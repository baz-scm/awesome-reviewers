[
  {
    "discussion_id": "1501620043",
    "pr_number": 63039,
    "pr_file": "tensorflow/lite/tools/pip_package/build_pip_package_with_cmake.sh",
    "created_at": "2024-02-24T16:34:00+00:00",
    "commented_code": ";;\n esac\n \n-cmake --build . --verbose -j ${BUILD_NUM_JOBS} -t _pywrap_tensorflow_interpreter_wrapper\n+cmake --build . --verbose -j $(nproc) -t _pywrap_tensorflow_interpreter_wrapper",
    "repo_full_name": "tensorflow/tensorflow",
    "discussion_comments": [
      {
        "comment_id": "1501620043",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 63039,
        "pr_file": "tensorflow/lite/tools/pip_package/build_pip_package_with_cmake.sh",
        "discussion_id": "1501620043",
        "commented_code": "@@ -123,7 +123,7 @@ case \"${TENSORFLOW_TARGET}\" in\n     ;;\n esac\n \n-cmake --build . --verbose -j ${BUILD_NUM_JOBS} -t _pywrap_tensorflow_interpreter_wrapper\n+cmake --build . --verbose -j $(nproc) -t _pywrap_tensorflow_interpreter_wrapper",
        "comment_created_at": "2024-02-24T16:34:00+00:00",
        "comment_author": "mihaimaruseac",
        "comment_body": "$BUILD_NUM_JOBS allows one to control whether they want to run on all cores, on a single core (for debugging), or only a subset of cores (in case others are needed for other tasks). Fixing this to `nproc` removes this flexibility.\r\n\r\nInstead, I think it is better to define `BUILD_NUM_JOBS` with a default value if not passed in",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1329283101",
    "pr_number": 61871,
    "pr_file": "tensorflow/tools/ci_build/windows/cpu/pip/build_tf_windows_clang-cl.sh",
    "created_at": "2023-09-18T21:10:30+00:00",
    "commented_code": "+#!/bin/bash\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+#\n+# This script assumes the standard setup on tensorflow Jenkins windows machines.\n+# It is NOT guaranteed to work on any other machine. Use at your own risk!\n+#\n+# REQUIREMENTS:\n+# * All installed in standard locations:\n+#   - JDK8, and JAVA_HOME set.\n+#   - Microsoft Visual Studio 2015 Community Edition\n+#   - Msys2\n+#   - Anaconda3\n+# * Bazel windows executable copied as \"bazel.exe\" and included in PATH.\n+# change\n+\n+# All commands shall pass, and all should be visible.\n+set -x\n+set -e\n+\n+# This script is under <repo_root>/tensorflow/tools/ci_build/windows/cpu/pip/\n+# Change into repository root.\n+script_dir=$(dirname $0)\n+cd ${script_dir%%tensorflow/tools/ci_build/windows/cpu/pip}.\n+\n+# Setting up the environment variables Bazel and ./configure needs\n+source \"tensorflow/tools/ci_build/windows/bazel/common_env.sh\" \\\n+  || { echo \"Failed to source common_env.sh\" >&2; exit 1; }\n+\n+# load bazel_test_lib.sh\n+source \"tensorflow/tools/ci_build/windows/bazel/bazel_test_lib.sh\" \\\n+  || { echo \"Failed to source bazel_test_lib.sh\" >&2; exit 1; }\n+\n+# Recreate an empty bazelrc file under source root\n+export TMP_BAZELRC=.tmp.bazelrc\n+rm -f \"${TMP_BAZELRC}\"\n+touch \"${TMP_BAZELRC}\"\n+\n+function cleanup {\n+  # Remove all options in .tmp.bazelrc\n+  echo \"\" > \"${TMP_BAZELRC}\"\n+}\n+trap cleanup EXIT\n+\n+PY_TEST_DIR=\"py_test_dir\"\n+\n+SKIP_TEST=0\n+RELEASE_BUILD=0\n+TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\"\n+PROJECT_NAME=\"\"\n+EXTRA_BUILD_FLAGS=\"\"\n+EXTRA_TEST_FLAGS=\"\"\n+\n+# --skip_test            Skip running tests\n+# --enable_remote_cache  Add options to enable remote cache for build and test\n+# --release_build        Build for release, compilation time will be longer to\n+#                        ensure performance\n+# --test_core_only       Use tensorflow/python/... as test target\n+while [[ $# -gt 0 ]]; do\n+  case \"$1\" in\n+    --tf_nightly) TF_NIGHTLY=1 ;;\n+    --skip_test) SKIP_TEST=1 ;;\n+    --enable_remote_cache) set_remote_cache_options ;;\n+    --release_build) RELEASE_BUILD=1 ;;\n+    --test_core_only) TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\" ;;\n+    --extra_build_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_BUILD_FLAGS=\"$1\"\n+      ;;\n+    --project_name)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      PROJECT_NAME=\"$1\"\n+      ;;\n+    --extra_test_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_TEST_FLAGS=\"$1\"\n+      ;;\n+    *)\n+  esac\n+  shift\n+done\n+\n+if [[ \"$RELEASE_BUILD\" == 1 ]]; then\n+  # Overriding eigen strong inline speeds up the compiling of conv_grad_ops_3d.cc and conv_ops_3d.cc\n+  # by 20 minutes. See https://github.com/tensorflow/tensorflow/issues/10521\n+  # Because this hurts the performance of TF, we don't override it in release build.\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=0\n+else\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=1\n+fi\n+\n+if [[ \"$TF_NIGHTLY\" == 1 ]]; then\n+  if [[ ${PROJECT_NAME} == *\"2.0_preview\"* ]]; then\n+    python tensorflow/tools/ci_build/update_version.py --version=2.0.0 --nightly\n+  else\n+    python tensorflow/tools/ci_build/update_version.py --nightly\n+  fi\n+  if [ -z ${PROJECT_NAME} ]; then\n+    EXTRA_PIP_FLAGS=\"--nightly_flag\"\n+  else\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME} --nightly_flag\"\n+  fi\n+else\n+  if [[ -v PROJECT_NAME  ]]; then\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME}\"\n+  fi\n+fi\n+\n+# Enable short object file path to avoid long path issue on Windows.\n+echo \"startup --output_user_root=${TMPDIR}\" >> \"${TMP_BAZELRC}\"\n+\n+if ! grep -q \"import %workspace%/${TMP_BAZELRC}\" .bazelrc; then\n+  echo \"import %workspace%/${TMP_BAZELRC}\" >> .bazelrc\n+fi\n+\n+run_configure_for_cpu_build\n+\n+bazel build ${EXTRA_BUILD_FLAGS}  \\\n+  --experimental_cc_shared_library \\\n+  --build_tag_filters=-no_pip,-no_windows,-windows_excluded,-no_oss,-oss_excluded,-gpu,-tpu \\\n+  --copt=/std:c++latest --copt=/clang:-Weverything --linkopt=/FORCE:MULTIPLE \\",
    "repo_full_name": "tensorflow/tensorflow",
    "discussion_comments": [
      {
        "comment_id": "1329283101",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 61871,
        "pr_file": "tensorflow/tools/ci_build/windows/cpu/pip/build_tf_windows_clang-cl.sh",
        "discussion_id": "1329283101",
        "commented_code": "@@ -0,0 +1,166 @@\n+#!/bin/bash\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+#\n+# This script assumes the standard setup on tensorflow Jenkins windows machines.\n+# It is NOT guaranteed to work on any other machine. Use at your own risk!\n+#\n+# REQUIREMENTS:\n+# * All installed in standard locations:\n+#   - JDK8, and JAVA_HOME set.\n+#   - Microsoft Visual Studio 2015 Community Edition\n+#   - Msys2\n+#   - Anaconda3\n+# * Bazel windows executable copied as \"bazel.exe\" and included in PATH.\n+# change\n+\n+# All commands shall pass, and all should be visible.\n+set -x\n+set -e\n+\n+# This script is under <repo_root>/tensorflow/tools/ci_build/windows/cpu/pip/\n+# Change into repository root.\n+script_dir=$(dirname $0)\n+cd ${script_dir%%tensorflow/tools/ci_build/windows/cpu/pip}.\n+\n+# Setting up the environment variables Bazel and ./configure needs\n+source \"tensorflow/tools/ci_build/windows/bazel/common_env.sh\" \\\n+  || { echo \"Failed to source common_env.sh\" >&2; exit 1; }\n+\n+# load bazel_test_lib.sh\n+source \"tensorflow/tools/ci_build/windows/bazel/bazel_test_lib.sh\" \\\n+  || { echo \"Failed to source bazel_test_lib.sh\" >&2; exit 1; }\n+\n+# Recreate an empty bazelrc file under source root\n+export TMP_BAZELRC=.tmp.bazelrc\n+rm -f \"${TMP_BAZELRC}\"\n+touch \"${TMP_BAZELRC}\"\n+\n+function cleanup {\n+  # Remove all options in .tmp.bazelrc\n+  echo \"\" > \"${TMP_BAZELRC}\"\n+}\n+trap cleanup EXIT\n+\n+PY_TEST_DIR=\"py_test_dir\"\n+\n+SKIP_TEST=0\n+RELEASE_BUILD=0\n+TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\"\n+PROJECT_NAME=\"\"\n+EXTRA_BUILD_FLAGS=\"\"\n+EXTRA_TEST_FLAGS=\"\"\n+\n+# --skip_test            Skip running tests\n+# --enable_remote_cache  Add options to enable remote cache for build and test\n+# --release_build        Build for release, compilation time will be longer to\n+#                        ensure performance\n+# --test_core_only       Use tensorflow/python/... as test target\n+while [[ $# -gt 0 ]]; do\n+  case \"$1\" in\n+    --tf_nightly) TF_NIGHTLY=1 ;;\n+    --skip_test) SKIP_TEST=1 ;;\n+    --enable_remote_cache) set_remote_cache_options ;;\n+    --release_build) RELEASE_BUILD=1 ;;\n+    --test_core_only) TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\" ;;\n+    --extra_build_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_BUILD_FLAGS=\"$1\"\n+      ;;\n+    --project_name)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      PROJECT_NAME=\"$1\"\n+      ;;\n+    --extra_test_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_TEST_FLAGS=\"$1\"\n+      ;;\n+    *)\n+  esac\n+  shift\n+done\n+\n+if [[ \"$RELEASE_BUILD\" == 1 ]]; then\n+  # Overriding eigen strong inline speeds up the compiling of conv_grad_ops_3d.cc and conv_ops_3d.cc\n+  # by 20 minutes. See https://github.com/tensorflow/tensorflow/issues/10521\n+  # Because this hurts the performance of TF, we don't override it in release build.\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=0\n+else\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=1\n+fi\n+\n+if [[ \"$TF_NIGHTLY\" == 1 ]]; then\n+  if [[ ${PROJECT_NAME} == *\"2.0_preview\"* ]]; then\n+    python tensorflow/tools/ci_build/update_version.py --version=2.0.0 --nightly\n+  else\n+    python tensorflow/tools/ci_build/update_version.py --nightly\n+  fi\n+  if [ -z ${PROJECT_NAME} ]; then\n+    EXTRA_PIP_FLAGS=\"--nightly_flag\"\n+  else\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME} --nightly_flag\"\n+  fi\n+else\n+  if [[ -v PROJECT_NAME  ]]; then\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME}\"\n+  fi\n+fi\n+\n+# Enable short object file path to avoid long path issue on Windows.\n+echo \"startup --output_user_root=${TMPDIR}\" >> \"${TMP_BAZELRC}\"\n+\n+if ! grep -q \"import %workspace%/${TMP_BAZELRC}\" .bazelrc; then\n+  echo \"import %workspace%/${TMP_BAZELRC}\" >> .bazelrc\n+fi\n+\n+run_configure_for_cpu_build\n+\n+bazel build ${EXTRA_BUILD_FLAGS}  \\\n+  --experimental_cc_shared_library \\\n+  --build_tag_filters=-no_pip,-no_windows,-windows_excluded,-no_oss,-oss_excluded,-gpu,-tpu \\\n+  --copt=/std:c++latest --copt=/clang:-Weverything --linkopt=/FORCE:MULTIPLE \\",
        "comment_created_at": "2023-09-18T21:10:30+00:00",
        "comment_author": "vam-google",
        "comment_body": "This file seems to be copied from https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/ci_build/windows/cpu/pip/build_tf_windows.sh almost as is, with a few parameters added as this one. Is it possible to avoid this duplication (like having one shell script containing all shared parts, making these extra parameters an attribute to the script)?",
        "pr_file_module": null
      },
      {
        "comment_id": "1329323689",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 61871,
        "pr_file": "tensorflow/tools/ci_build/windows/cpu/pip/build_tf_windows_clang-cl.sh",
        "discussion_id": "1329283101",
        "commented_code": "@@ -0,0 +1,166 @@\n+#!/bin/bash\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+#\n+# This script assumes the standard setup on tensorflow Jenkins windows machines.\n+# It is NOT guaranteed to work on any other machine. Use at your own risk!\n+#\n+# REQUIREMENTS:\n+# * All installed in standard locations:\n+#   - JDK8, and JAVA_HOME set.\n+#   - Microsoft Visual Studio 2015 Community Edition\n+#   - Msys2\n+#   - Anaconda3\n+# * Bazel windows executable copied as \"bazel.exe\" and included in PATH.\n+# change\n+\n+# All commands shall pass, and all should be visible.\n+set -x\n+set -e\n+\n+# This script is under <repo_root>/tensorflow/tools/ci_build/windows/cpu/pip/\n+# Change into repository root.\n+script_dir=$(dirname $0)\n+cd ${script_dir%%tensorflow/tools/ci_build/windows/cpu/pip}.\n+\n+# Setting up the environment variables Bazel and ./configure needs\n+source \"tensorflow/tools/ci_build/windows/bazel/common_env.sh\" \\\n+  || { echo \"Failed to source common_env.sh\" >&2; exit 1; }\n+\n+# load bazel_test_lib.sh\n+source \"tensorflow/tools/ci_build/windows/bazel/bazel_test_lib.sh\" \\\n+  || { echo \"Failed to source bazel_test_lib.sh\" >&2; exit 1; }\n+\n+# Recreate an empty bazelrc file under source root\n+export TMP_BAZELRC=.tmp.bazelrc\n+rm -f \"${TMP_BAZELRC}\"\n+touch \"${TMP_BAZELRC}\"\n+\n+function cleanup {\n+  # Remove all options in .tmp.bazelrc\n+  echo \"\" > \"${TMP_BAZELRC}\"\n+}\n+trap cleanup EXIT\n+\n+PY_TEST_DIR=\"py_test_dir\"\n+\n+SKIP_TEST=0\n+RELEASE_BUILD=0\n+TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\"\n+PROJECT_NAME=\"\"\n+EXTRA_BUILD_FLAGS=\"\"\n+EXTRA_TEST_FLAGS=\"\"\n+\n+# --skip_test            Skip running tests\n+# --enable_remote_cache  Add options to enable remote cache for build and test\n+# --release_build        Build for release, compilation time will be longer to\n+#                        ensure performance\n+# --test_core_only       Use tensorflow/python/... as test target\n+while [[ $# -gt 0 ]]; do\n+  case \"$1\" in\n+    --tf_nightly) TF_NIGHTLY=1 ;;\n+    --skip_test) SKIP_TEST=1 ;;\n+    --enable_remote_cache) set_remote_cache_options ;;\n+    --release_build) RELEASE_BUILD=1 ;;\n+    --test_core_only) TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\" ;;\n+    --extra_build_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_BUILD_FLAGS=\"$1\"\n+      ;;\n+    --project_name)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      PROJECT_NAME=\"$1\"\n+      ;;\n+    --extra_test_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_TEST_FLAGS=\"$1\"\n+      ;;\n+    *)\n+  esac\n+  shift\n+done\n+\n+if [[ \"$RELEASE_BUILD\" == 1 ]]; then\n+  # Overriding eigen strong inline speeds up the compiling of conv_grad_ops_3d.cc and conv_ops_3d.cc\n+  # by 20 minutes. See https://github.com/tensorflow/tensorflow/issues/10521\n+  # Because this hurts the performance of TF, we don't override it in release build.\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=0\n+else\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=1\n+fi\n+\n+if [[ \"$TF_NIGHTLY\" == 1 ]]; then\n+  if [[ ${PROJECT_NAME} == *\"2.0_preview\"* ]]; then\n+    python tensorflow/tools/ci_build/update_version.py --version=2.0.0 --nightly\n+  else\n+    python tensorflow/tools/ci_build/update_version.py --nightly\n+  fi\n+  if [ -z ${PROJECT_NAME} ]; then\n+    EXTRA_PIP_FLAGS=\"--nightly_flag\"\n+  else\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME} --nightly_flag\"\n+  fi\n+else\n+  if [[ -v PROJECT_NAME  ]]; then\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME}\"\n+  fi\n+fi\n+\n+# Enable short object file path to avoid long path issue on Windows.\n+echo \"startup --output_user_root=${TMPDIR}\" >> \"${TMP_BAZELRC}\"\n+\n+if ! grep -q \"import %workspace%/${TMP_BAZELRC}\" .bazelrc; then\n+  echo \"import %workspace%/${TMP_BAZELRC}\" >> .bazelrc\n+fi\n+\n+run_configure_for_cpu_build\n+\n+bazel build ${EXTRA_BUILD_FLAGS}  \\\n+  --experimental_cc_shared_library \\\n+  --build_tag_filters=-no_pip,-no_windows,-windows_excluded,-no_oss,-oss_excluded,-gpu,-tpu \\\n+  --copt=/std:c++latest --copt=/clang:-Weverything --linkopt=/FORCE:MULTIPLE \\",
        "comment_created_at": "2023-09-18T21:58:12+00:00",
        "comment_author": "angerson",
        "comment_body": "We're going to toss scripts from this directory anyway once they're properly integrated into the ci/official directory, which is currently ongoing, so I don't think it's worth the time to add extra logic. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1329332851",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 61871,
        "pr_file": "tensorflow/tools/ci_build/windows/cpu/pip/build_tf_windows_clang-cl.sh",
        "discussion_id": "1329283101",
        "commented_code": "@@ -0,0 +1,166 @@\n+#!/bin/bash\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+#\n+# This script assumes the standard setup on tensorflow Jenkins windows machines.\n+# It is NOT guaranteed to work on any other machine. Use at your own risk!\n+#\n+# REQUIREMENTS:\n+# * All installed in standard locations:\n+#   - JDK8, and JAVA_HOME set.\n+#   - Microsoft Visual Studio 2015 Community Edition\n+#   - Msys2\n+#   - Anaconda3\n+# * Bazel windows executable copied as \"bazel.exe\" and included in PATH.\n+# change\n+\n+# All commands shall pass, and all should be visible.\n+set -x\n+set -e\n+\n+# This script is under <repo_root>/tensorflow/tools/ci_build/windows/cpu/pip/\n+# Change into repository root.\n+script_dir=$(dirname $0)\n+cd ${script_dir%%tensorflow/tools/ci_build/windows/cpu/pip}.\n+\n+# Setting up the environment variables Bazel and ./configure needs\n+source \"tensorflow/tools/ci_build/windows/bazel/common_env.sh\" \\\n+  || { echo \"Failed to source common_env.sh\" >&2; exit 1; }\n+\n+# load bazel_test_lib.sh\n+source \"tensorflow/tools/ci_build/windows/bazel/bazel_test_lib.sh\" \\\n+  || { echo \"Failed to source bazel_test_lib.sh\" >&2; exit 1; }\n+\n+# Recreate an empty bazelrc file under source root\n+export TMP_BAZELRC=.tmp.bazelrc\n+rm -f \"${TMP_BAZELRC}\"\n+touch \"${TMP_BAZELRC}\"\n+\n+function cleanup {\n+  # Remove all options in .tmp.bazelrc\n+  echo \"\" > \"${TMP_BAZELRC}\"\n+}\n+trap cleanup EXIT\n+\n+PY_TEST_DIR=\"py_test_dir\"\n+\n+SKIP_TEST=0\n+RELEASE_BUILD=0\n+TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\"\n+PROJECT_NAME=\"\"\n+EXTRA_BUILD_FLAGS=\"\"\n+EXTRA_TEST_FLAGS=\"\"\n+\n+# --skip_test            Skip running tests\n+# --enable_remote_cache  Add options to enable remote cache for build and test\n+# --release_build        Build for release, compilation time will be longer to\n+#                        ensure performance\n+# --test_core_only       Use tensorflow/python/... as test target\n+while [[ $# -gt 0 ]]; do\n+  case \"$1\" in\n+    --tf_nightly) TF_NIGHTLY=1 ;;\n+    --skip_test) SKIP_TEST=1 ;;\n+    --enable_remote_cache) set_remote_cache_options ;;\n+    --release_build) RELEASE_BUILD=1 ;;\n+    --test_core_only) TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\" ;;\n+    --extra_build_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_BUILD_FLAGS=\"$1\"\n+      ;;\n+    --project_name)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      PROJECT_NAME=\"$1\"\n+      ;;\n+    --extra_test_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_TEST_FLAGS=\"$1\"\n+      ;;\n+    *)\n+  esac\n+  shift\n+done\n+\n+if [[ \"$RELEASE_BUILD\" == 1 ]]; then\n+  # Overriding eigen strong inline speeds up the compiling of conv_grad_ops_3d.cc and conv_ops_3d.cc\n+  # by 20 minutes. See https://github.com/tensorflow/tensorflow/issues/10521\n+  # Because this hurts the performance of TF, we don't override it in release build.\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=0\n+else\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=1\n+fi\n+\n+if [[ \"$TF_NIGHTLY\" == 1 ]]; then\n+  if [[ ${PROJECT_NAME} == *\"2.0_preview\"* ]]; then\n+    python tensorflow/tools/ci_build/update_version.py --version=2.0.0 --nightly\n+  else\n+    python tensorflow/tools/ci_build/update_version.py --nightly\n+  fi\n+  if [ -z ${PROJECT_NAME} ]; then\n+    EXTRA_PIP_FLAGS=\"--nightly_flag\"\n+  else\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME} --nightly_flag\"\n+  fi\n+else\n+  if [[ -v PROJECT_NAME  ]]; then\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME}\"\n+  fi\n+fi\n+\n+# Enable short object file path to avoid long path issue on Windows.\n+echo \"startup --output_user_root=${TMPDIR}\" >> \"${TMP_BAZELRC}\"\n+\n+if ! grep -q \"import %workspace%/${TMP_BAZELRC}\" .bazelrc; then\n+  echo \"import %workspace%/${TMP_BAZELRC}\" >> .bazelrc\n+fi\n+\n+run_configure_for_cpu_build\n+\n+bazel build ${EXTRA_BUILD_FLAGS}  \\\n+  --experimental_cc_shared_library \\\n+  --build_tag_filters=-no_pip,-no_windows,-windows_excluded,-no_oss,-oss_excluded,-gpu,-tpu \\\n+  --copt=/std:c++latest --copt=/clang:-Weverything --linkopt=/FORCE:MULTIPLE \\",
        "comment_created_at": "2023-09-18T22:14:01+00:00",
        "comment_author": "mraunak",
        "comment_body": "Yes, it is possible to avoid the duplication in two ways:\r\n\r\n1. Make changes in the .bazelrc file (https://github.com/tensorflow/tensorflow/blob/master/.bazelrc).\r\nAdd extra parameters related to clang-cl such as --copt, linkopt, platforms etc \r\n\r\nfor this, I need to test if these changes in .bazelrc do not affect the ongoing build on the MSVC platform\r\n\r\n2. Pass extra parameters as arguments to the script build_tf_windows.sh\r\nThese changes will be internal to Intel :\r\nhttps://github.com/Intel-tensorflow/tensorflow/blob/mraunak/win_ci_scripts/tensorflow/tools/ci_build/windows/cpu/pip/ci_run_build_test_clang.sh#L144\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1329376880",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 61871,
        "pr_file": "tensorflow/tools/ci_build/windows/cpu/pip/build_tf_windows_clang-cl.sh",
        "discussion_id": "1329283101",
        "commented_code": "@@ -0,0 +1,166 @@\n+#!/bin/bash\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+#\n+# This script assumes the standard setup on tensorflow Jenkins windows machines.\n+# It is NOT guaranteed to work on any other machine. Use at your own risk!\n+#\n+# REQUIREMENTS:\n+# * All installed in standard locations:\n+#   - JDK8, and JAVA_HOME set.\n+#   - Microsoft Visual Studio 2015 Community Edition\n+#   - Msys2\n+#   - Anaconda3\n+# * Bazel windows executable copied as \"bazel.exe\" and included in PATH.\n+# change\n+\n+# All commands shall pass, and all should be visible.\n+set -x\n+set -e\n+\n+# This script is under <repo_root>/tensorflow/tools/ci_build/windows/cpu/pip/\n+# Change into repository root.\n+script_dir=$(dirname $0)\n+cd ${script_dir%%tensorflow/tools/ci_build/windows/cpu/pip}.\n+\n+# Setting up the environment variables Bazel and ./configure needs\n+source \"tensorflow/tools/ci_build/windows/bazel/common_env.sh\" \\\n+  || { echo \"Failed to source common_env.sh\" >&2; exit 1; }\n+\n+# load bazel_test_lib.sh\n+source \"tensorflow/tools/ci_build/windows/bazel/bazel_test_lib.sh\" \\\n+  || { echo \"Failed to source bazel_test_lib.sh\" >&2; exit 1; }\n+\n+# Recreate an empty bazelrc file under source root\n+export TMP_BAZELRC=.tmp.bazelrc\n+rm -f \"${TMP_BAZELRC}\"\n+touch \"${TMP_BAZELRC}\"\n+\n+function cleanup {\n+  # Remove all options in .tmp.bazelrc\n+  echo \"\" > \"${TMP_BAZELRC}\"\n+}\n+trap cleanup EXIT\n+\n+PY_TEST_DIR=\"py_test_dir\"\n+\n+SKIP_TEST=0\n+RELEASE_BUILD=0\n+TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\"\n+PROJECT_NAME=\"\"\n+EXTRA_BUILD_FLAGS=\"\"\n+EXTRA_TEST_FLAGS=\"\"\n+\n+# --skip_test            Skip running tests\n+# --enable_remote_cache  Add options to enable remote cache for build and test\n+# --release_build        Build for release, compilation time will be longer to\n+#                        ensure performance\n+# --test_core_only       Use tensorflow/python/... as test target\n+while [[ $# -gt 0 ]]; do\n+  case \"$1\" in\n+    --tf_nightly) TF_NIGHTLY=1 ;;\n+    --skip_test) SKIP_TEST=1 ;;\n+    --enable_remote_cache) set_remote_cache_options ;;\n+    --release_build) RELEASE_BUILD=1 ;;\n+    --test_core_only) TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\" ;;\n+    --extra_build_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_BUILD_FLAGS=\"$1\"\n+      ;;\n+    --project_name)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      PROJECT_NAME=\"$1\"\n+      ;;\n+    --extra_test_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_TEST_FLAGS=\"$1\"\n+      ;;\n+    *)\n+  esac\n+  shift\n+done\n+\n+if [[ \"$RELEASE_BUILD\" == 1 ]]; then\n+  # Overriding eigen strong inline speeds up the compiling of conv_grad_ops_3d.cc and conv_ops_3d.cc\n+  # by 20 minutes. See https://github.com/tensorflow/tensorflow/issues/10521\n+  # Because this hurts the performance of TF, we don't override it in release build.\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=0\n+else\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=1\n+fi\n+\n+if [[ \"$TF_NIGHTLY\" == 1 ]]; then\n+  if [[ ${PROJECT_NAME} == *\"2.0_preview\"* ]]; then\n+    python tensorflow/tools/ci_build/update_version.py --version=2.0.0 --nightly\n+  else\n+    python tensorflow/tools/ci_build/update_version.py --nightly\n+  fi\n+  if [ -z ${PROJECT_NAME} ]; then\n+    EXTRA_PIP_FLAGS=\"--nightly_flag\"\n+  else\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME} --nightly_flag\"\n+  fi\n+else\n+  if [[ -v PROJECT_NAME  ]]; then\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME}\"\n+  fi\n+fi\n+\n+# Enable short object file path to avoid long path issue on Windows.\n+echo \"startup --output_user_root=${TMPDIR}\" >> \"${TMP_BAZELRC}\"\n+\n+if ! grep -q \"import %workspace%/${TMP_BAZELRC}\" .bazelrc; then\n+  echo \"import %workspace%/${TMP_BAZELRC}\" >> .bazelrc\n+fi\n+\n+run_configure_for_cpu_build\n+\n+bazel build ${EXTRA_BUILD_FLAGS}  \\\n+  --experimental_cc_shared_library \\\n+  --build_tag_filters=-no_pip,-no_windows,-windows_excluded,-no_oss,-oss_excluded,-gpu,-tpu \\\n+  --copt=/std:c++latest --copt=/clang:-Weverything --linkopt=/FORCE:MULTIPLE \\",
        "comment_created_at": "2023-09-18T23:20:09+00:00",
        "comment_author": "mraunak",
        "comment_body": "> We're going to toss scripts from this directory anyway once they're properly integrated into the ci/official directory, which is currently ongoing, so I don't think it's worth the time to add extra logic.\r\n\r\nHi @vam-google and @angerson are we okay with the file below: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/ci_build/windows/cpu/pip/build_tf_windows.sh \r\nPlease let me know if any further change is needed from my end. Thank you for your comments",
        "pr_file_module": null
      },
      {
        "comment_id": "1330572872",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 61871,
        "pr_file": "tensorflow/tools/ci_build/windows/cpu/pip/build_tf_windows_clang-cl.sh",
        "discussion_id": "1329283101",
        "commented_code": "@@ -0,0 +1,166 @@\n+#!/bin/bash\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+#\n+# This script assumes the standard setup on tensorflow Jenkins windows machines.\n+# It is NOT guaranteed to work on any other machine. Use at your own risk!\n+#\n+# REQUIREMENTS:\n+# * All installed in standard locations:\n+#   - JDK8, and JAVA_HOME set.\n+#   - Microsoft Visual Studio 2015 Community Edition\n+#   - Msys2\n+#   - Anaconda3\n+# * Bazel windows executable copied as \"bazel.exe\" and included in PATH.\n+# change\n+\n+# All commands shall pass, and all should be visible.\n+set -x\n+set -e\n+\n+# This script is under <repo_root>/tensorflow/tools/ci_build/windows/cpu/pip/\n+# Change into repository root.\n+script_dir=$(dirname $0)\n+cd ${script_dir%%tensorflow/tools/ci_build/windows/cpu/pip}.\n+\n+# Setting up the environment variables Bazel and ./configure needs\n+source \"tensorflow/tools/ci_build/windows/bazel/common_env.sh\" \\\n+  || { echo \"Failed to source common_env.sh\" >&2; exit 1; }\n+\n+# load bazel_test_lib.sh\n+source \"tensorflow/tools/ci_build/windows/bazel/bazel_test_lib.sh\" \\\n+  || { echo \"Failed to source bazel_test_lib.sh\" >&2; exit 1; }\n+\n+# Recreate an empty bazelrc file under source root\n+export TMP_BAZELRC=.tmp.bazelrc\n+rm -f \"${TMP_BAZELRC}\"\n+touch \"${TMP_BAZELRC}\"\n+\n+function cleanup {\n+  # Remove all options in .tmp.bazelrc\n+  echo \"\" > \"${TMP_BAZELRC}\"\n+}\n+trap cleanup EXIT\n+\n+PY_TEST_DIR=\"py_test_dir\"\n+\n+SKIP_TEST=0\n+RELEASE_BUILD=0\n+TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\"\n+PROJECT_NAME=\"\"\n+EXTRA_BUILD_FLAGS=\"\"\n+EXTRA_TEST_FLAGS=\"\"\n+\n+# --skip_test            Skip running tests\n+# --enable_remote_cache  Add options to enable remote cache for build and test\n+# --release_build        Build for release, compilation time will be longer to\n+#                        ensure performance\n+# --test_core_only       Use tensorflow/python/... as test target\n+while [[ $# -gt 0 ]]; do\n+  case \"$1\" in\n+    --tf_nightly) TF_NIGHTLY=1 ;;\n+    --skip_test) SKIP_TEST=1 ;;\n+    --enable_remote_cache) set_remote_cache_options ;;\n+    --release_build) RELEASE_BUILD=1 ;;\n+    --test_core_only) TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\" ;;\n+    --extra_build_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_BUILD_FLAGS=\"$1\"\n+      ;;\n+    --project_name)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      PROJECT_NAME=\"$1\"\n+      ;;\n+    --extra_test_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_TEST_FLAGS=\"$1\"\n+      ;;\n+    *)\n+  esac\n+  shift\n+done\n+\n+if [[ \"$RELEASE_BUILD\" == 1 ]]; then\n+  # Overriding eigen strong inline speeds up the compiling of conv_grad_ops_3d.cc and conv_ops_3d.cc\n+  # by 20 minutes. See https://github.com/tensorflow/tensorflow/issues/10521\n+  # Because this hurts the performance of TF, we don't override it in release build.\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=0\n+else\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=1\n+fi\n+\n+if [[ \"$TF_NIGHTLY\" == 1 ]]; then\n+  if [[ ${PROJECT_NAME} == *\"2.0_preview\"* ]]; then\n+    python tensorflow/tools/ci_build/update_version.py --version=2.0.0 --nightly\n+  else\n+    python tensorflow/tools/ci_build/update_version.py --nightly\n+  fi\n+  if [ -z ${PROJECT_NAME} ]; then\n+    EXTRA_PIP_FLAGS=\"--nightly_flag\"\n+  else\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME} --nightly_flag\"\n+  fi\n+else\n+  if [[ -v PROJECT_NAME  ]]; then\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME}\"\n+  fi\n+fi\n+\n+# Enable short object file path to avoid long path issue on Windows.\n+echo \"startup --output_user_root=${TMPDIR}\" >> \"${TMP_BAZELRC}\"\n+\n+if ! grep -q \"import %workspace%/${TMP_BAZELRC}\" .bazelrc; then\n+  echo \"import %workspace%/${TMP_BAZELRC}\" >> .bazelrc\n+fi\n+\n+run_configure_for_cpu_build\n+\n+bazel build ${EXTRA_BUILD_FLAGS}  \\\n+  --experimental_cc_shared_library \\\n+  --build_tag_filters=-no_pip,-no_windows,-windows_excluded,-no_oss,-oss_excluded,-gpu,-tpu \\\n+  --copt=/std:c++latest --copt=/clang:-Weverything --linkopt=/FORCE:MULTIPLE \\",
        "comment_created_at": "2023-09-19T18:56:15+00:00",
        "comment_author": "angerson",
        "comment_body": "If it's possible to add all clang-unique changes to a bazelrc configuration option (like `build:win_clang`), then please go with that.",
        "pr_file_module": null
      },
      {
        "comment_id": "1332298952",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 61871,
        "pr_file": "tensorflow/tools/ci_build/windows/cpu/pip/build_tf_windows_clang-cl.sh",
        "discussion_id": "1329283101",
        "commented_code": "@@ -0,0 +1,166 @@\n+#!/bin/bash\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+#\n+# This script assumes the standard setup on tensorflow Jenkins windows machines.\n+# It is NOT guaranteed to work on any other machine. Use at your own risk!\n+#\n+# REQUIREMENTS:\n+# * All installed in standard locations:\n+#   - JDK8, and JAVA_HOME set.\n+#   - Microsoft Visual Studio 2015 Community Edition\n+#   - Msys2\n+#   - Anaconda3\n+# * Bazel windows executable copied as \"bazel.exe\" and included in PATH.\n+# change\n+\n+# All commands shall pass, and all should be visible.\n+set -x\n+set -e\n+\n+# This script is under <repo_root>/tensorflow/tools/ci_build/windows/cpu/pip/\n+# Change into repository root.\n+script_dir=$(dirname $0)\n+cd ${script_dir%%tensorflow/tools/ci_build/windows/cpu/pip}.\n+\n+# Setting up the environment variables Bazel and ./configure needs\n+source \"tensorflow/tools/ci_build/windows/bazel/common_env.sh\" \\\n+  || { echo \"Failed to source common_env.sh\" >&2; exit 1; }\n+\n+# load bazel_test_lib.sh\n+source \"tensorflow/tools/ci_build/windows/bazel/bazel_test_lib.sh\" \\\n+  || { echo \"Failed to source bazel_test_lib.sh\" >&2; exit 1; }\n+\n+# Recreate an empty bazelrc file under source root\n+export TMP_BAZELRC=.tmp.bazelrc\n+rm -f \"${TMP_BAZELRC}\"\n+touch \"${TMP_BAZELRC}\"\n+\n+function cleanup {\n+  # Remove all options in .tmp.bazelrc\n+  echo \"\" > \"${TMP_BAZELRC}\"\n+}\n+trap cleanup EXIT\n+\n+PY_TEST_DIR=\"py_test_dir\"\n+\n+SKIP_TEST=0\n+RELEASE_BUILD=0\n+TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\"\n+PROJECT_NAME=\"\"\n+EXTRA_BUILD_FLAGS=\"\"\n+EXTRA_TEST_FLAGS=\"\"\n+\n+# --skip_test            Skip running tests\n+# --enable_remote_cache  Add options to enable remote cache for build and test\n+# --release_build        Build for release, compilation time will be longer to\n+#                        ensure performance\n+# --test_core_only       Use tensorflow/python/... as test target\n+while [[ $# -gt 0 ]]; do\n+  case \"$1\" in\n+    --tf_nightly) TF_NIGHTLY=1 ;;\n+    --skip_test) SKIP_TEST=1 ;;\n+    --enable_remote_cache) set_remote_cache_options ;;\n+    --release_build) RELEASE_BUILD=1 ;;\n+    --test_core_only) TEST_TARGET=\"//${PY_TEST_DIR}/tensorflow/python/...\" ;;\n+    --extra_build_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_BUILD_FLAGS=\"$1\"\n+      ;;\n+    --project_name)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      PROJECT_NAME=\"$1\"\n+      ;;\n+    --extra_test_flags)\n+      shift\n+      if [[ -z \"$1\" ]]; then\n+        break\n+      fi\n+      EXTRA_TEST_FLAGS=\"$1\"\n+      ;;\n+    *)\n+  esac\n+  shift\n+done\n+\n+if [[ \"$RELEASE_BUILD\" == 1 ]]; then\n+  # Overriding eigen strong inline speeds up the compiling of conv_grad_ops_3d.cc and conv_ops_3d.cc\n+  # by 20 minutes. See https://github.com/tensorflow/tensorflow/issues/10521\n+  # Because this hurts the performance of TF, we don't override it in release build.\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=0\n+else\n+  export TF_OVERRIDE_EIGEN_STRONG_INLINE=1\n+fi\n+\n+if [[ \"$TF_NIGHTLY\" == 1 ]]; then\n+  if [[ ${PROJECT_NAME} == *\"2.0_preview\"* ]]; then\n+    python tensorflow/tools/ci_build/update_version.py --version=2.0.0 --nightly\n+  else\n+    python tensorflow/tools/ci_build/update_version.py --nightly\n+  fi\n+  if [ -z ${PROJECT_NAME} ]; then\n+    EXTRA_PIP_FLAGS=\"--nightly_flag\"\n+  else\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME} --nightly_flag\"\n+  fi\n+else\n+  if [[ -v PROJECT_NAME  ]]; then\n+    EXTRA_PIP_FLAGS=\"--project_name ${PROJECT_NAME}\"\n+  fi\n+fi\n+\n+# Enable short object file path to avoid long path issue on Windows.\n+echo \"startup --output_user_root=${TMPDIR}\" >> \"${TMP_BAZELRC}\"\n+\n+if ! grep -q \"import %workspace%/${TMP_BAZELRC}\" .bazelrc; then\n+  echo \"import %workspace%/${TMP_BAZELRC}\" >> .bazelrc\n+fi\n+\n+run_configure_for_cpu_build\n+\n+bazel build ${EXTRA_BUILD_FLAGS}  \\\n+  --experimental_cc_shared_library \\\n+  --build_tag_filters=-no_pip,-no_windows,-windows_excluded,-no_oss,-oss_excluded,-gpu,-tpu \\\n+  --copt=/std:c++latest --copt=/clang:-Weverything --linkopt=/FORCE:MULTIPLE \\",
        "comment_created_at": "2023-09-21T00:10:20+00:00",
        "comment_author": "mraunak",
        "comment_body": "Hi @angerson, added clang-unique changes to the .bazelrc file, please review and let me know if any further change is needed",
        "pr_file_module": null
      }
    ]
  }
]