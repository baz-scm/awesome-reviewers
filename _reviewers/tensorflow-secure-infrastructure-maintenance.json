[
  {
    "discussion_id": "1190206303",
    "pr_number": 60536,
    "pr_file": "tensorflow/tools/tf_windows_build_dockerfiles/Dockerfile",
    "created_at": "2023-05-10T17:23:35+00:00",
    "commented_code": "+# This Dockerfile creates an image that:\n+# - Has the correct MTU setting for networking from inside the container to work.\n+# - Has Visual Studio 2019 Build Tools installed.\n+# - Has MSVC 14.29 and clang 14.0 installed\n+# - Has msys2 + git, curl, zip, unzip installed.\n+# - Has Python 3.9 installed.\n+# - Has Bazelisk 0.11 installed.\n+\n+FROM mcr.microsoft.com/windows/servercore:ltsc2019\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+RUN netsh interface ipv4 set subinterface \\\"vEthernet (Ethernet)\\\" mtu=1460 store=persistent\n+\n+RUN md C:\\TEMP\n+RUN md C:\\TMP\n+\n+RUN (New-Object Net.WebClient).DownloadFile('https://aka.ms/vs/16/release/vs_community.exe', 'C:\\TEMP\\vs_community.exe');\n+# Install Visual Studio 2019 Build Tools.\n+SHELL [\"cmd\", \"/S\", \"/C\"]\n+RUN C:\\TEMP\\vs_community.exe \\\n+        --quiet --wait --norestart --nocache \\\n+        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \\\n+        --add Microsoft.VisualStudio.Workload.NativeDesktop \\\n+        --add Microsoft.VisualStudio.Component.VC.14.29.x86.x64 \\\n+        --add Microsoft.VisualStudio.Component.Windows10SDK.20348 \\\n+ || IF \"%ERRORLEVEL%\"==\"3010\" EXIT 0\n+\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+# Install 7-Zip and add it to the path.\n+RUN (New-Object Net.WebClient).DownloadFile('https://www.7-zip.org/a/7z2201-x64.msi', '7z.msi'); \\\n+    Start-Process msiexec.exe -ArgumentList \\\"/i 7z.msi /qn /norestart /log C:\\\\TEMP\\\\7z_install_log.txt\\\" -wait; \\\n+    Remove-Item .\\7z.msi;\n+\n+# Install msys2, and add some extra tools.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://repo.msys2.org/distrib/x86_64/msys2-base-x86_64-20220603.tar.xz', \\\n+         'msys2.tar.xz'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x msys2.tar.xz -oC:\\TEMP\\msys2.tar' -Wait; \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x C:\\TEMP\\msys2.tar -oC:\\tools' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\msys64;C:\\tools\\msys64\\usr\\bin\\'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+# Install clang.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/LLVM-14.0.0-win64.exe', \\\n+         'LLVM.exe'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x LLVM.exe -oC:\\tools\\llvm' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\llvm\\bin'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+\n+# Disable signature checking on pacman because we cannot initialize the keyring\n+RUN Add-Content -Path C:\\tools\\msys64\\etc\\pacman.d\\mirrorlist.mingw32 -Value 'SigLevel = Never'\n+RUN Add-Content -Path C:\\tools\\msys64\\etc\\pacman.d\\mirrorlist.mingw64 -Value 'SigLevel = Never'\n+RUN Add-Content -Path C:\\tools\\msys64\\etc\\pacman.d\\mirrorlist.msys -Value 'SigLevel = Never'\n+\n+# Install pacman packages.\n+RUN C:\\tools\\msys64\\usr\\bin\\bash.exe -lc 'pacman --noconfirm -Syy git curl zip unzip patch'\n+\n+# Install Python 3.9.7\n+ENV PYTHON_VERSION 3.9.7\n+\n+RUN $url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \\\n+\tWrite-Host ('Downloading {0} ...' -f $url); \\\n+\t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \\\n+\t(New-Object Net.WebClient).DownloadFile($url, 'C:\\tmp\\pyinstall.exe'); \\\n+\t\\\n+\tWrite-Host 'Installing...'; \\\n+        Start-Process -FilePath \\\"C:\\tmp\\pyinstall.exe\\\" -ArgumentList '/quiet InstallAllUsers=1 PrependPath=1 TargetDir=C:\\Python39' -Wait; \\\n+\t\\\n+\tWrite-Host 'Verifying install ...'; \\\n+\tWrite-Host '  python --version'; C:\\python39\\python.exe --version; \\\n+\t\\\n+\tWrite-Host 'Verifying pip install ...'; \\\n+\tC:\\python39\\python.exe -m pip --version; \\\n+\t\\\n+\tWrite-Host 'Removing ...'; \\\n+\tRemove-Item C:\\tmp\\pyinstall.exe -Force; \\\n+\t\\\n+\tWrite-Host 'Complete.';\n+\n+# Install the pip packages\n+RUN python -m pip install --ignore-installed --force-reinstall --upgrade \\\n+    setuptools packaging\\\n+    pyreadline tf-estimator-nightly tb-nightly backports.weakref==1.0rc1 \\\n+    protobuf~=3.20.3 absl-py~=1.0.0 portpicker~=1.4.0 gast==0.4.0 termcolor~=2.1.1 astor==0.7.1 h5py~=3.8.0 numpy~=1.22.0 \\\n+    scipy~=1.7.2 keras-nightly\n+\n+RUN \\\n+  Add-Type -AssemblyName \\\"System.IO.Compression.FileSystem\\\"; \\\n+  $zulu_url = \\\"https://cdn.azul.com/zulu/bin/zulu8.28.0.1-jdk8.0.163-win_x64.zip\\\"; \\\n+  $zulu_zip = \\\"c:\\\\temp\\\\zulu8.28.0.1-jdk8.0.163-win_x64.zip\\\"; \\\n+  $zulu_extracted_path = \\\"c:\\\\temp\\\\\\\" + [IO.Path]::GetFileNameWithoutExtension($zulu_zip); \\\n+  $zulu_root = \\\"c:\\\\openjdk\\\"; \\\n+  (New-Object Net.WebClient).DownloadFile($zulu_url, $zulu_zip); \\\n+  [System.IO.Compression.ZipFile]::ExtractToDirectory($zulu_zip, \\\"c:\\\\temp\\\"); \\\n+  Move-Item $zulu_extracted_path -Destination $zulu_root; \\\n+  Remove-Item $zulu_zip; \\\n+  $env:PATH = [Environment]::GetEnvironmentVariable(\\\"PATH\\\", \\\"Machine\\\") + \\\";${zulu_root}\\\\bin\\\"; \\\n+  [Environment]::SetEnvironmentVariable(\\\"PATH\\\", $env:PATH, \\\"Machine\\\"); \\\n+  $env:JAVA_HOME = $zulu_root; \\\n+  [Environment]::SetEnvironmentVariable(\\\"JAVA_HOME\\\", $env:JAVA_HOME, \\\"Machine\\\")\n+\n+# Environment variables to work around the msys issues\n+ENV MSYS_NO_PATHCONV 1\n+ENV MSYS2_ARG_CONV_EXCL *\n+\n+# See https://docs.microsoft.com/en-us/visualstudio/releases/2019/history for the mapping\n+ENV BAZEL_VC_FULL_VERSION 14.29.30133\n+\n+# Make sure path to MSVC tools is available to Bazel\n+ENV BAZEL_VC \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\"\n+\n+# Install bazelisk\n+RUN md C:\\tools\\bazel\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-windows-amd64.exe', \\",
    "repo_full_name": "tensorflow/tensorflow",
    "discussion_comments": [
      {
        "comment_id": "1190206303",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 60536,
        "pr_file": "tensorflow/tools/tf_windows_build_dockerfiles/Dockerfile",
        "discussion_id": "1190206303",
        "commented_code": "@@ -0,0 +1,132 @@\n+# This Dockerfile creates an image that:\n+# - Has the correct MTU setting for networking from inside the container to work.\n+# - Has Visual Studio 2019 Build Tools installed.\n+# - Has MSVC 14.29 and clang 14.0 installed\n+# - Has msys2 + git, curl, zip, unzip installed.\n+# - Has Python 3.9 installed.\n+# - Has Bazelisk 0.11 installed.\n+\n+FROM mcr.microsoft.com/windows/servercore:ltsc2019\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+RUN netsh interface ipv4 set subinterface \\\"vEthernet (Ethernet)\\\" mtu=1460 store=persistent\n+\n+RUN md C:\\TEMP\n+RUN md C:\\TMP\n+\n+RUN (New-Object Net.WebClient).DownloadFile('https://aka.ms/vs/16/release/vs_community.exe', 'C:\\TEMP\\vs_community.exe');\n+# Install Visual Studio 2019 Build Tools.\n+SHELL [\"cmd\", \"/S\", \"/C\"]\n+RUN C:\\TEMP\\vs_community.exe \\\n+        --quiet --wait --norestart --nocache \\\n+        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \\\n+        --add Microsoft.VisualStudio.Workload.NativeDesktop \\\n+        --add Microsoft.VisualStudio.Component.VC.14.29.x86.x64 \\\n+        --add Microsoft.VisualStudio.Component.Windows10SDK.20348 \\\n+ || IF \"%ERRORLEVEL%\"==\"3010\" EXIT 0\n+\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+# Install 7-Zip and add it to the path.\n+RUN (New-Object Net.WebClient).DownloadFile('https://www.7-zip.org/a/7z2201-x64.msi', '7z.msi'); \\\n+    Start-Process msiexec.exe -ArgumentList \\\"/i 7z.msi /qn /norestart /log C:\\\\TEMP\\\\7z_install_log.txt\\\" -wait; \\\n+    Remove-Item .\\7z.msi;\n+\n+# Install msys2, and add some extra tools.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://repo.msys2.org/distrib/x86_64/msys2-base-x86_64-20220603.tar.xz', \\\n+         'msys2.tar.xz'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x msys2.tar.xz -oC:\\TEMP\\msys2.tar' -Wait; \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x C:\\TEMP\\msys2.tar -oC:\\tools' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\msys64;C:\\tools\\msys64\\usr\\bin\\'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+# Install clang.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/LLVM-14.0.0-win64.exe', \\\n+         'LLVM.exe'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x LLVM.exe -oC:\\tools\\llvm' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\llvm\\bin'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+\n+# Disable signature checking on pacman because we cannot initialize the keyring\n+RUN Add-Content -Path C:\\tools\\msys64\\etc\\pacman.d\\mirrorlist.mingw32 -Value 'SigLevel = Never'\n+RUN Add-Content -Path C:\\tools\\msys64\\etc\\pacman.d\\mirrorlist.mingw64 -Value 'SigLevel = Never'\n+RUN Add-Content -Path C:\\tools\\msys64\\etc\\pacman.d\\mirrorlist.msys -Value 'SigLevel = Never'\n+\n+# Install pacman packages.\n+RUN C:\\tools\\msys64\\usr\\bin\\bash.exe -lc 'pacman --noconfirm -Syy git curl zip unzip patch'\n+\n+# Install Python 3.9.7\n+ENV PYTHON_VERSION 3.9.7\n+\n+RUN $url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \\\n+\tWrite-Host ('Downloading {0} ...' -f $url); \\\n+\t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \\\n+\t(New-Object Net.WebClient).DownloadFile($url, 'C:\\tmp\\pyinstall.exe'); \\\n+\t\\\n+\tWrite-Host 'Installing...'; \\\n+        Start-Process -FilePath \\\"C:\\tmp\\pyinstall.exe\\\" -ArgumentList '/quiet InstallAllUsers=1 PrependPath=1 TargetDir=C:\\Python39' -Wait; \\\n+\t\\\n+\tWrite-Host 'Verifying install ...'; \\\n+\tWrite-Host '  python --version'; C:\\python39\\python.exe --version; \\\n+\t\\\n+\tWrite-Host 'Verifying pip install ...'; \\\n+\tC:\\python39\\python.exe -m pip --version; \\\n+\t\\\n+\tWrite-Host 'Removing ...'; \\\n+\tRemove-Item C:\\tmp\\pyinstall.exe -Force; \\\n+\t\\\n+\tWrite-Host 'Complete.';\n+\n+# Install the pip packages\n+RUN python -m pip install --ignore-installed --force-reinstall --upgrade \\\n+    setuptools packaging\\\n+    pyreadline tf-estimator-nightly tb-nightly backports.weakref==1.0rc1 \\\n+    protobuf~=3.20.3 absl-py~=1.0.0 portpicker~=1.4.0 gast==0.4.0 termcolor~=2.1.1 astor==0.7.1 h5py~=3.8.0 numpy~=1.22.0 \\\n+    scipy~=1.7.2 keras-nightly\n+\n+RUN \\\n+  Add-Type -AssemblyName \\\"System.IO.Compression.FileSystem\\\"; \\\n+  $zulu_url = \\\"https://cdn.azul.com/zulu/bin/zulu8.28.0.1-jdk8.0.163-win_x64.zip\\\"; \\\n+  $zulu_zip = \\\"c:\\\\temp\\\\zulu8.28.0.1-jdk8.0.163-win_x64.zip\\\"; \\\n+  $zulu_extracted_path = \\\"c:\\\\temp\\\\\\\" + [IO.Path]::GetFileNameWithoutExtension($zulu_zip); \\\n+  $zulu_root = \\\"c:\\\\openjdk\\\"; \\\n+  (New-Object Net.WebClient).DownloadFile($zulu_url, $zulu_zip); \\\n+  [System.IO.Compression.ZipFile]::ExtractToDirectory($zulu_zip, \\\"c:\\\\temp\\\"); \\\n+  Move-Item $zulu_extracted_path -Destination $zulu_root; \\\n+  Remove-Item $zulu_zip; \\\n+  $env:PATH = [Environment]::GetEnvironmentVariable(\\\"PATH\\\", \\\"Machine\\\") + \\\";${zulu_root}\\\\bin\\\"; \\\n+  [Environment]::SetEnvironmentVariable(\\\"PATH\\\", $env:PATH, \\\"Machine\\\"); \\\n+  $env:JAVA_HOME = $zulu_root; \\\n+  [Environment]::SetEnvironmentVariable(\\\"JAVA_HOME\\\", $env:JAVA_HOME, \\\"Machine\\\")\n+\n+# Environment variables to work around the msys issues\n+ENV MSYS_NO_PATHCONV 1\n+ENV MSYS2_ARG_CONV_EXCL *\n+\n+# See https://docs.microsoft.com/en-us/visualstudio/releases/2019/history for the mapping\n+ENV BAZEL_VC_FULL_VERSION 14.29.30133\n+\n+# Make sure path to MSVC tools is available to Bazel\n+ENV BAZEL_VC \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\"\n+\n+# Install bazelisk\n+RUN md C:\\tools\\bazel\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-windows-amd64.exe', \\",
        "comment_created_at": "2023-05-10T17:23:35+00:00",
        "comment_author": "MichaelHudgins",
        "comment_body": "Can we update bazelisk version? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1193223913",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 60536,
        "pr_file": "tensorflow/tools/tf_windows_build_dockerfiles/Dockerfile",
        "discussion_id": "1190206303",
        "commented_code": "@@ -0,0 +1,132 @@\n+# This Dockerfile creates an image that:\n+# - Has the correct MTU setting for networking from inside the container to work.\n+# - Has Visual Studio 2019 Build Tools installed.\n+# - Has MSVC 14.29 and clang 14.0 installed\n+# - Has msys2 + git, curl, zip, unzip installed.\n+# - Has Python 3.9 installed.\n+# - Has Bazelisk 0.11 installed.\n+\n+FROM mcr.microsoft.com/windows/servercore:ltsc2019\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+RUN netsh interface ipv4 set subinterface \\\"vEthernet (Ethernet)\\\" mtu=1460 store=persistent\n+\n+RUN md C:\\TEMP\n+RUN md C:\\TMP\n+\n+RUN (New-Object Net.WebClient).DownloadFile('https://aka.ms/vs/16/release/vs_community.exe', 'C:\\TEMP\\vs_community.exe');\n+# Install Visual Studio 2019 Build Tools.\n+SHELL [\"cmd\", \"/S\", \"/C\"]\n+RUN C:\\TEMP\\vs_community.exe \\\n+        --quiet --wait --norestart --nocache \\\n+        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \\\n+        --add Microsoft.VisualStudio.Workload.NativeDesktop \\\n+        --add Microsoft.VisualStudio.Component.VC.14.29.x86.x64 \\\n+        --add Microsoft.VisualStudio.Component.Windows10SDK.20348 \\\n+ || IF \"%ERRORLEVEL%\"==\"3010\" EXIT 0\n+\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+# Install 7-Zip and add it to the path.\n+RUN (New-Object Net.WebClient).DownloadFile('https://www.7-zip.org/a/7z2201-x64.msi', '7z.msi'); \\\n+    Start-Process msiexec.exe -ArgumentList \\\"/i 7z.msi /qn /norestart /log C:\\\\TEMP\\\\7z_install_log.txt\\\" -wait; \\\n+    Remove-Item .\\7z.msi;\n+\n+# Install msys2, and add some extra tools.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://repo.msys2.org/distrib/x86_64/msys2-base-x86_64-20220603.tar.xz', \\\n+         'msys2.tar.xz'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x msys2.tar.xz -oC:\\TEMP\\msys2.tar' -Wait; \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x C:\\TEMP\\msys2.tar -oC:\\tools' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\msys64;C:\\tools\\msys64\\usr\\bin\\'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+# Install clang.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/LLVM-14.0.0-win64.exe', \\\n+         'LLVM.exe'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x LLVM.exe -oC:\\tools\\llvm' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\llvm\\bin'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+\n+# Disable signature checking on pacman because we cannot initialize the keyring\n+RUN Add-Content -Path C:\\tools\\msys64\\etc\\pacman.d\\mirrorlist.mingw32 -Value 'SigLevel = Never'\n+RUN Add-Content -Path C:\\tools\\msys64\\etc\\pacman.d\\mirrorlist.mingw64 -Value 'SigLevel = Never'\n+RUN Add-Content -Path C:\\tools\\msys64\\etc\\pacman.d\\mirrorlist.msys -Value 'SigLevel = Never'\n+\n+# Install pacman packages.\n+RUN C:\\tools\\msys64\\usr\\bin\\bash.exe -lc 'pacman --noconfirm -Syy git curl zip unzip patch'\n+\n+# Install Python 3.9.7\n+ENV PYTHON_VERSION 3.9.7\n+\n+RUN $url = ('https://www.python.org/ftp/python/{0}/python-{0}-amd64.exe' -f $env:PYTHON_VERSION); \\\n+\tWrite-Host ('Downloading {0} ...' -f $url); \\\n+\t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \\\n+\t(New-Object Net.WebClient).DownloadFile($url, 'C:\\tmp\\pyinstall.exe'); \\\n+\t\\\n+\tWrite-Host 'Installing...'; \\\n+        Start-Process -FilePath \\\"C:\\tmp\\pyinstall.exe\\\" -ArgumentList '/quiet InstallAllUsers=1 PrependPath=1 TargetDir=C:\\Python39' -Wait; \\\n+\t\\\n+\tWrite-Host 'Verifying install ...'; \\\n+\tWrite-Host '  python --version'; C:\\python39\\python.exe --version; \\\n+\t\\\n+\tWrite-Host 'Verifying pip install ...'; \\\n+\tC:\\python39\\python.exe -m pip --version; \\\n+\t\\\n+\tWrite-Host 'Removing ...'; \\\n+\tRemove-Item C:\\tmp\\pyinstall.exe -Force; \\\n+\t\\\n+\tWrite-Host 'Complete.';\n+\n+# Install the pip packages\n+RUN python -m pip install --ignore-installed --force-reinstall --upgrade \\\n+    setuptools packaging\\\n+    pyreadline tf-estimator-nightly tb-nightly backports.weakref==1.0rc1 \\\n+    protobuf~=3.20.3 absl-py~=1.0.0 portpicker~=1.4.0 gast==0.4.0 termcolor~=2.1.1 astor==0.7.1 h5py~=3.8.0 numpy~=1.22.0 \\\n+    scipy~=1.7.2 keras-nightly\n+\n+RUN \\\n+  Add-Type -AssemblyName \\\"System.IO.Compression.FileSystem\\\"; \\\n+  $zulu_url = \\\"https://cdn.azul.com/zulu/bin/zulu8.28.0.1-jdk8.0.163-win_x64.zip\\\"; \\\n+  $zulu_zip = \\\"c:\\\\temp\\\\zulu8.28.0.1-jdk8.0.163-win_x64.zip\\\"; \\\n+  $zulu_extracted_path = \\\"c:\\\\temp\\\\\\\" + [IO.Path]::GetFileNameWithoutExtension($zulu_zip); \\\n+  $zulu_root = \\\"c:\\\\openjdk\\\"; \\\n+  (New-Object Net.WebClient).DownloadFile($zulu_url, $zulu_zip); \\\n+  [System.IO.Compression.ZipFile]::ExtractToDirectory($zulu_zip, \\\"c:\\\\temp\\\"); \\\n+  Move-Item $zulu_extracted_path -Destination $zulu_root; \\\n+  Remove-Item $zulu_zip; \\\n+  $env:PATH = [Environment]::GetEnvironmentVariable(\\\"PATH\\\", \\\"Machine\\\") + \\\";${zulu_root}\\\\bin\\\"; \\\n+  [Environment]::SetEnvironmentVariable(\\\"PATH\\\", $env:PATH, \\\"Machine\\\"); \\\n+  $env:JAVA_HOME = $zulu_root; \\\n+  [Environment]::SetEnvironmentVariable(\\\"JAVA_HOME\\\", $env:JAVA_HOME, \\\"Machine\\\")\n+\n+# Environment variables to work around the msys issues\n+ENV MSYS_NO_PATHCONV 1\n+ENV MSYS2_ARG_CONV_EXCL *\n+\n+# See https://docs.microsoft.com/en-us/visualstudio/releases/2019/history for the mapping\n+ENV BAZEL_VC_FULL_VERSION 14.29.30133\n+\n+# Make sure path to MSVC tools is available to Bazel\n+ENV BAZEL_VC \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\"\n+\n+# Install bazelisk\n+RUN md C:\\tools\\bazel\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-windows-amd64.exe', \\",
        "comment_created_at": "2023-05-14T23:12:38+00:00",
        "comment_author": "Bobarshad",
        "comment_body": "bazelisk was updated to v1.16.0",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1190319094",
    "pr_number": 60536,
    "pr_file": "tensorflow/tools/tf_windows_build_dockerfiles/Dockerfile",
    "created_at": "2023-05-10T19:33:11+00:00",
    "commented_code": "+# This Dockerfile creates an image that:\n+# - Has the correct MTU setting for networking from inside the container to work.\n+# - Has Visual Studio 2019 Build Tools installed.\n+# - Has MSVC 14.29 and clang 14.0 installed\n+# - Has msys2 + git, curl, zip, unzip installed.\n+# - Has Python 3.9 installed.\n+# - Has Bazelisk 0.11 installed.\n+\n+FROM mcr.microsoft.com/windows/servercore:ltsc2019\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+RUN netsh interface ipv4 set subinterface \\\"vEthernet (Ethernet)\\\" mtu=1460 store=persistent\n+\n+RUN md C:\\TEMP\n+RUN md C:\\TMP\n+\n+RUN (New-Object Net.WebClient).DownloadFile('https://aka.ms/vs/16/release/vs_community.exe', 'C:\\TEMP\\vs_community.exe');\n+# Install Visual Studio 2019 Build Tools.\n+SHELL [\"cmd\", \"/S\", \"/C\"]\n+RUN C:\\TEMP\\vs_community.exe \\\n+        --quiet --wait --norestart --nocache \\\n+        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \\\n+        --add Microsoft.VisualStudio.Workload.NativeDesktop \\\n+        --add Microsoft.VisualStudio.Component.VC.14.29.x86.x64 \\\n+        --add Microsoft.VisualStudio.Component.Windows10SDK.20348 \\\n+ || IF \"%ERRORLEVEL%\"==\"3010\" EXIT 0\n+\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+# Install 7-Zip and add it to the path.\n+RUN (New-Object Net.WebClient).DownloadFile('https://www.7-zip.org/a/7z2201-x64.msi', '7z.msi'); \\\n+    Start-Process msiexec.exe -ArgumentList \\\"/i 7z.msi /qn /norestart /log C:\\\\TEMP\\\\7z_install_log.txt\\\" -wait; \\\n+    Remove-Item .\\7z.msi;\n+\n+# Install msys2, and add some extra tools.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://repo.msys2.org/distrib/x86_64/msys2-base-x86_64-20220603.tar.xz', \\\n+         'msys2.tar.xz'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x msys2.tar.xz -oC:\\TEMP\\msys2.tar' -Wait; \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x C:\\TEMP\\msys2.tar -oC:\\tools' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\msys64;C:\\tools\\msys64\\usr\\bin\\'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+# Install clang.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/LLVM-14.0.0-win64.exe', \\\n+         'LLVM.exe'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x LLVM.exe -oC:\\tools\\llvm' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\llvm\\bin'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+\n+# Disable signature checking on pacman because we cannot initialize the keyring",
    "repo_full_name": "tensorflow/tensorflow",
    "discussion_comments": [
      {
        "comment_id": "1190319094",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 60536,
        "pr_file": "tensorflow/tools/tf_windows_build_dockerfiles/Dockerfile",
        "discussion_id": "1190319094",
        "commented_code": "@@ -0,0 +1,132 @@\n+# This Dockerfile creates an image that:\n+# - Has the correct MTU setting for networking from inside the container to work.\n+# - Has Visual Studio 2019 Build Tools installed.\n+# - Has MSVC 14.29 and clang 14.0 installed\n+# - Has msys2 + git, curl, zip, unzip installed.\n+# - Has Python 3.9 installed.\n+# - Has Bazelisk 0.11 installed.\n+\n+FROM mcr.microsoft.com/windows/servercore:ltsc2019\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+RUN netsh interface ipv4 set subinterface \\\"vEthernet (Ethernet)\\\" mtu=1460 store=persistent\n+\n+RUN md C:\\TEMP\n+RUN md C:\\TMP\n+\n+RUN (New-Object Net.WebClient).DownloadFile('https://aka.ms/vs/16/release/vs_community.exe', 'C:\\TEMP\\vs_community.exe');\n+# Install Visual Studio 2019 Build Tools.\n+SHELL [\"cmd\", \"/S\", \"/C\"]\n+RUN C:\\TEMP\\vs_community.exe \\\n+        --quiet --wait --norestart --nocache \\\n+        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \\\n+        --add Microsoft.VisualStudio.Workload.NativeDesktop \\\n+        --add Microsoft.VisualStudio.Component.VC.14.29.x86.x64 \\\n+        --add Microsoft.VisualStudio.Component.Windows10SDK.20348 \\\n+ || IF \"%ERRORLEVEL%\"==\"3010\" EXIT 0\n+\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+# Install 7-Zip and add it to the path.\n+RUN (New-Object Net.WebClient).DownloadFile('https://www.7-zip.org/a/7z2201-x64.msi', '7z.msi'); \\\n+    Start-Process msiexec.exe -ArgumentList \\\"/i 7z.msi /qn /norestart /log C:\\\\TEMP\\\\7z_install_log.txt\\\" -wait; \\\n+    Remove-Item .\\7z.msi;\n+\n+# Install msys2, and add some extra tools.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://repo.msys2.org/distrib/x86_64/msys2-base-x86_64-20220603.tar.xz', \\\n+         'msys2.tar.xz'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x msys2.tar.xz -oC:\\TEMP\\msys2.tar' -Wait; \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x C:\\TEMP\\msys2.tar -oC:\\tools' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\msys64;C:\\tools\\msys64\\usr\\bin\\'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+# Install clang.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/LLVM-14.0.0-win64.exe', \\\n+         'LLVM.exe'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x LLVM.exe -oC:\\tools\\llvm' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\llvm\\bin'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+\n+# Disable signature checking on pacman because we cannot initialize the keyring",
        "comment_created_at": "2023-05-10T19:33:11+00:00",
        "comment_author": "angerson",
        "comment_body": "I agree that initializing the pacman keyring is a hassle, but I really don't think we can just disable signature checking in our main CI build environment. @mihaimaruseac  ",
        "pr_file_module": null
      },
      {
        "comment_id": "1197059506",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 60536,
        "pr_file": "tensorflow/tools/tf_windows_build_dockerfiles/Dockerfile",
        "discussion_id": "1190319094",
        "commented_code": "@@ -0,0 +1,132 @@\n+# This Dockerfile creates an image that:\n+# - Has the correct MTU setting for networking from inside the container to work.\n+# - Has Visual Studio 2019 Build Tools installed.\n+# - Has MSVC 14.29 and clang 14.0 installed\n+# - Has msys2 + git, curl, zip, unzip installed.\n+# - Has Python 3.9 installed.\n+# - Has Bazelisk 0.11 installed.\n+\n+FROM mcr.microsoft.com/windows/servercore:ltsc2019\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+RUN netsh interface ipv4 set subinterface \\\"vEthernet (Ethernet)\\\" mtu=1460 store=persistent\n+\n+RUN md C:\\TEMP\n+RUN md C:\\TMP\n+\n+RUN (New-Object Net.WebClient).DownloadFile('https://aka.ms/vs/16/release/vs_community.exe', 'C:\\TEMP\\vs_community.exe');\n+# Install Visual Studio 2019 Build Tools.\n+SHELL [\"cmd\", \"/S\", \"/C\"]\n+RUN C:\\TEMP\\vs_community.exe \\\n+        --quiet --wait --norestart --nocache \\\n+        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \\\n+        --add Microsoft.VisualStudio.Workload.NativeDesktop \\\n+        --add Microsoft.VisualStudio.Component.VC.14.29.x86.x64 \\\n+        --add Microsoft.VisualStudio.Component.Windows10SDK.20348 \\\n+ || IF \"%ERRORLEVEL%\"==\"3010\" EXIT 0\n+\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+# Install 7-Zip and add it to the path.\n+RUN (New-Object Net.WebClient).DownloadFile('https://www.7-zip.org/a/7z2201-x64.msi', '7z.msi'); \\\n+    Start-Process msiexec.exe -ArgumentList \\\"/i 7z.msi /qn /norestart /log C:\\\\TEMP\\\\7z_install_log.txt\\\" -wait; \\\n+    Remove-Item .\\7z.msi;\n+\n+# Install msys2, and add some extra tools.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://repo.msys2.org/distrib/x86_64/msys2-base-x86_64-20220603.tar.xz', \\\n+         'msys2.tar.xz'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x msys2.tar.xz -oC:\\TEMP\\msys2.tar' -Wait; \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x C:\\TEMP\\msys2.tar -oC:\\tools' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\msys64;C:\\tools\\msys64\\usr\\bin\\'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+# Install clang.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/LLVM-14.0.0-win64.exe', \\\n+         'LLVM.exe'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x LLVM.exe -oC:\\tools\\llvm' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\llvm\\bin'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+\n+# Disable signature checking on pacman because we cannot initialize the keyring",
        "comment_created_at": "2023-05-17T21:14:04+00:00",
        "comment_author": "mihaimaruseac",
        "comment_body": "+1 to not disabling signature checking.\r\n\r\nThere is a potential alternative to record all packages together with their checksum in a file and download them, check the checksum and only install after, but:\r\n- this would reimplement pacman\r\n- this would require us to maintain this list manually, so slowing down iterations",
        "pr_file_module": null
      },
      {
        "comment_id": "1211995732",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 60536,
        "pr_file": "tensorflow/tools/tf_windows_build_dockerfiles/Dockerfile",
        "discussion_id": "1190319094",
        "commented_code": "@@ -0,0 +1,132 @@\n+# This Dockerfile creates an image that:\n+# - Has the correct MTU setting for networking from inside the container to work.\n+# - Has Visual Studio 2019 Build Tools installed.\n+# - Has MSVC 14.29 and clang 14.0 installed\n+# - Has msys2 + git, curl, zip, unzip installed.\n+# - Has Python 3.9 installed.\n+# - Has Bazelisk 0.11 installed.\n+\n+FROM mcr.microsoft.com/windows/servercore:ltsc2019\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+RUN netsh interface ipv4 set subinterface \\\"vEthernet (Ethernet)\\\" mtu=1460 store=persistent\n+\n+RUN md C:\\TEMP\n+RUN md C:\\TMP\n+\n+RUN (New-Object Net.WebClient).DownloadFile('https://aka.ms/vs/16/release/vs_community.exe', 'C:\\TEMP\\vs_community.exe');\n+# Install Visual Studio 2019 Build Tools.\n+SHELL [\"cmd\", \"/S\", \"/C\"]\n+RUN C:\\TEMP\\vs_community.exe \\\n+        --quiet --wait --norestart --nocache \\\n+        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \\\n+        --add Microsoft.VisualStudio.Workload.NativeDesktop \\\n+        --add Microsoft.VisualStudio.Component.VC.14.29.x86.x64 \\\n+        --add Microsoft.VisualStudio.Component.Windows10SDK.20348 \\\n+ || IF \"%ERRORLEVEL%\"==\"3010\" EXIT 0\n+\n+SHELL [\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-Command\", \"$ErrorActionPreference='Stop'; $ProgressPreference='SilentlyContinue'; $VerbosePreference = 'Continue';\"]\n+\n+# Install 7-Zip and add it to the path.\n+RUN (New-Object Net.WebClient).DownloadFile('https://www.7-zip.org/a/7z2201-x64.msi', '7z.msi'); \\\n+    Start-Process msiexec.exe -ArgumentList \\\"/i 7z.msi /qn /norestart /log C:\\\\TEMP\\\\7z_install_log.txt\\\" -wait; \\\n+    Remove-Item .\\7z.msi;\n+\n+# Install msys2, and add some extra tools.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://repo.msys2.org/distrib/x86_64/msys2-base-x86_64-20220603.tar.xz', \\\n+         'msys2.tar.xz'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x msys2.tar.xz -oC:\\TEMP\\msys2.tar' -Wait; \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x C:\\TEMP\\msys2.tar -oC:\\tools' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\msys64;C:\\tools\\msys64\\usr\\bin\\'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+# Install clang.\n+RUN (New-Object Net.WebClient).DownloadFile( \\\n+         'https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/LLVM-14.0.0-win64.exe', \\\n+         'LLVM.exe'); \\\n+    Start-Process -FilePath \\\"C:\\Program Files\\7-Zip\\7z.exe\\\" -ArgumentList 'x LLVM.exe -oC:\\tools\\llvm' -Wait; \\\n+    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', 'Machine') + ';C:\\tools\\llvm\\bin'; \\\n+    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Machine');\n+\n+\n+# Disable signature checking on pacman because we cannot initialize the keyring",
        "comment_created_at": "2023-05-31T16:30:27+00:00",
        "comment_author": "Bobarshad",
        "comment_body": "Enabling signature checking on pacman is done.",
        "pr_file_module": null
      }
    ]
  }
]