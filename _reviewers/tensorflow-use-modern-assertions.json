[
  {
    "discussion_id": "450991054",
    "pr_number": 40817,
    "pr_file": "tensorflow/python/eager/def_function_test.py",
    "created_at": "2020-07-07T16:26:12+00:00",
    "commented_code": "self.assertLen(logs.output, 1)\n     self.assertIn('Tracing is expensive', logs.output[0])\n \n+  def test_type_annotation_basic(self):\n+    def f(x: ops.Tensor[dtypes.Int32], y: ops.Tensor[dtypes.Float32]):\n+      return x\n+    signature = [tensor_spec.TensorSpec(None, dtypes.int32),\n+                 tensor_spec.TensorSpec(None, dtypes.float32)]\n+    def_function.function(f, input_signature=signature)\n+\n+  def test_mismatch_type_annotation(self):\n+    msg = 'Type annotation does not match input_signature'\n+    with self.assertRaisesRegexp(ValueError, msg):",
    "repo_full_name": "tensorflow/tensorflow",
    "discussion_comments": [
      {
        "comment_id": "450991054",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 40817,
        "pr_file": "tensorflow/python/eager/def_function_test.py",
        "discussion_id": "450991054",
        "commented_code": "@@ -917,6 +917,50 @@ def f(x):\n     self.assertLen(logs.output, 1)\n     self.assertIn('Tracing is expensive', logs.output[0])\n \n+  def test_type_annotation_basic(self):\n+    def f(x: ops.Tensor[dtypes.Int32], y: ops.Tensor[dtypes.Float32]):\n+      return x\n+    signature = [tensor_spec.TensorSpec(None, dtypes.int32),\n+                 tensor_spec.TensorSpec(None, dtypes.float32)]\n+    def_function.function(f, input_signature=signature)\n+\n+  def test_mismatch_type_annotation(self):\n+    msg = 'Type annotation does not match input_signature'\n+    with self.assertRaisesRegexp(ValueError, msg):",
        "comment_created_at": "2020-07-07T16:26:12+00:00",
        "comment_author": "mdanatg",
        "comment_body": "Please use `assertRaisesRegex`, it's a newer symbol",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1306074045",
    "pr_number": 57792,
    "pr_file": "tensorflow/python/kernel_tests/array_ops/gather_nd_op_test.py",
    "created_at": "2023-08-25T19:27:38+00:00",
    "commented_code": "self.assertEqual(\"ResourceGatherNd\", gather.op.inputs[0].op.type)\n       self.assertAllEqual([2, 5], gather)\n \n+  def testInvalidBatchDims(self):\n+    with self.session():\n+      with self.assertRaises(",
    "repo_full_name": "tensorflow/tensorflow",
    "discussion_comments": [
      {
        "comment_id": "1306074045",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 57792,
        "pr_file": "tensorflow/python/kernel_tests/array_ops/gather_nd_op_test.py",
        "discussion_id": "1306074045",
        "commented_code": "@@ -380,6 +381,18 @@ def testGatherNdResourceVariable(self):\n         self.assertEqual(\"ResourceGatherNd\", gather.op.inputs[0].op.type)\n       self.assertAllEqual([2, 5], gather)\n \n+  def testInvalidBatchDims(self):\n+    with self.session():\n+      with self.assertRaises(",
        "comment_created_at": "2023-08-25T19:27:38+00:00",
        "comment_author": "cantonios",
        "comment_body": "Can you use `assertRaisesRegex` to ensure we're catching the expected error?",
        "pr_file_module": null
      }
    ]
  }
]