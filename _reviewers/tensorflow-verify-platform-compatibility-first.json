[
  {
    "discussion_id": "1996542142",
    "pr_number": 89271,
    "pr_file": "tools/tf_env_collect.sh",
    "created_at": "2025-03-15T03:18:52+00:00",
    "commented_code": "platform.python_implementation(),\n ))\n EOF\n-${python_bin_path} /tmp/check_python.py 2>&1  >> ${OUTPUT_FILE}\n \n-{\n-echo\n-echo '== check os platform ==============================================='\n-} >> ${OUTPUT_FILE}\n+  print_header \"check os platform\"\n \n-cat <<EOF > /tmp/check_os.py\n+  \"${PYTHON_BIN_PATH}\" <<EOF\n import platform\n \n-print(\"\"\"os: %s\n-os kernel version: %s\n-os release version: %s\n-os platform: %s\n-linux distribution: %s\n-linux os distribution: %s\n-mac version: %s\n-uname: %s\n-architecture: %s\n-machine: %s\n-\"\"\" % (\n-platform.system(),\n-platform.version(),\n-platform.release(),\n-platform.platform(),\n-platform.linux_distribution(),\n-platform.dist(),\n-platform.mac_ver(),\n-platform.uname(),\n-platform.architecture(),\n-platform.machine(),\n-))\n+PLATFORM_ENTRIES = [\n+    (\"os\", \"system\"),\n+    (\"os kernel version\", \"version\"),\n+    (\"os release version\", \"release\"),\n+    (\"os platform\", \"platform\"),\n+    (\"freedesktop os release\", \"freedesktop_os_release\"),\n+    (\"mac version\", \"mac_ver\"),\n+    (\"uname\", \"uname\"),\n+    (\"architecture\", \"architecture\"),\n+    (\"machine\", \"machine\"),\n+]\n+\n+for label, function_name in PLATFORM_ENTRIES:\n+    if hasattr(platform, function_name):",
    "repo_full_name": "tensorflow/tensorflow",
    "discussion_comments": [
      {
        "comment_id": "1996542142",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 89271,
        "pr_file": "tools/tf_env_collect.sh",
        "discussion_id": "1996542142",
        "commented_code": "@@ -52,84 +67,86 @@ platform.python_compiler(),\n platform.python_implementation(),\n ))\n EOF\n-${python_bin_path} /tmp/check_python.py 2>&1  >> ${OUTPUT_FILE}\n \n-{\n-echo\n-echo '== check os platform ==============================================='\n-} >> ${OUTPUT_FILE}\n+  print_header \"check os platform\"\n \n-cat <<EOF > /tmp/check_os.py\n+  \"${PYTHON_BIN_PATH}\" <<EOF\n import platform\n \n-print(\"\"\"os: %s\n-os kernel version: %s\n-os release version: %s\n-os platform: %s\n-linux distribution: %s\n-linux os distribution: %s\n-mac version: %s\n-uname: %s\n-architecture: %s\n-machine: %s\n-\"\"\" % (\n-platform.system(),\n-platform.version(),\n-platform.release(),\n-platform.platform(),\n-platform.linux_distribution(),\n-platform.dist(),\n-platform.mac_ver(),\n-platform.uname(),\n-platform.architecture(),\n-platform.machine(),\n-))\n+PLATFORM_ENTRIES = [\n+    (\"os\", \"system\"),\n+    (\"os kernel version\", \"version\"),\n+    (\"os release version\", \"release\"),\n+    (\"os platform\", \"platform\"),\n+    (\"freedesktop os release\", \"freedesktop_os_release\"),\n+    (\"mac version\", \"mac_ver\"),\n+    (\"uname\", \"uname\"),\n+    (\"architecture\", \"architecture\"),\n+    (\"machine\", \"machine\"),\n+]\n+\n+for label, function_name in PLATFORM_ENTRIES:\n+    if hasattr(platform, function_name):",
        "comment_created_at": "2025-03-15T03:18:52+00:00",
        "comment_author": "maludwig",
        "comment_body": "Some machines (like Windows) won't have some of these functions (like \"freedesktop_os_release\" or \"mac_ver\"), so this just prints the ones that do exist. I added \"freedesktop_os_release\" because that's kinda what linux_distribution was, and it lets you know what OS is running inside WSL.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1996542786",
    "pr_number": 89271,
    "pr_file": "tools/tf_env_collect.sh",
    "created_at": "2025-03-15T03:21:20+00:00",
    "commented_code": "platform.python_implementation(),\n ))\n EOF\n-${python_bin_path} /tmp/check_python.py 2>&1  >> ${OUTPUT_FILE}\n \n-{\n-echo\n-echo '== check os platform ==============================================='\n-} >> ${OUTPUT_FILE}\n+  print_header \"check os platform\"\n \n-cat <<EOF > /tmp/check_os.py\n+  \"${PYTHON_BIN_PATH}\" <<EOF\n import platform\n \n-print(\"\"\"os: %s\n-os kernel version: %s\n-os release version: %s\n-os platform: %s\n-linux distribution: %s\n-linux os distribution: %s\n-mac version: %s\n-uname: %s\n-architecture: %s\n-machine: %s\n-\"\"\" % (\n-platform.system(),\n-platform.version(),\n-platform.release(),\n-platform.platform(),\n-platform.linux_distribution(),\n-platform.dist(),\n-platform.mac_ver(),\n-platform.uname(),\n-platform.architecture(),\n-platform.machine(),\n-))\n+PLATFORM_ENTRIES = [\n+    (\"os\", \"system\"),\n+    (\"os kernel version\", \"version\"),\n+    (\"os release version\", \"release\"),\n+    (\"os platform\", \"platform\"),\n+    (\"freedesktop os release\", \"freedesktop_os_release\"),\n+    (\"mac version\", \"mac_ver\"),\n+    (\"uname\", \"uname\"),\n+    (\"architecture\", \"architecture\"),\n+    (\"machine\", \"machine\"),\n+]\n+\n+for label, function_name in PLATFORM_ENTRIES:\n+    if hasattr(platform, function_name):\n+        function = getattr(platform, function_name)\n+        result = function()  # Call the function\n+        print(f\"{label}: {result}\")\n+    else:\n+        print(f\"{label}: N/A\")\n EOF\n-${python_bin_path} /tmp/check_os.py 2>&1  >> ${OUTPUT_FILE}\n \n-{\n-  echo\n-  echo '== are we in docker ============================================='\n-  num=`cat /proc/1/cgroup | grep docker | wc -l`;",
    "repo_full_name": "tensorflow/tensorflow",
    "discussion_comments": [
      {
        "comment_id": "1996542786",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 89271,
        "pr_file": "tools/tf_env_collect.sh",
        "discussion_id": "1996542786",
        "commented_code": "@@ -52,84 +67,86 @@ platform.python_compiler(),\n platform.python_implementation(),\n ))\n EOF\n-${python_bin_path} /tmp/check_python.py 2>&1  >> ${OUTPUT_FILE}\n \n-{\n-echo\n-echo '== check os platform ==============================================='\n-} >> ${OUTPUT_FILE}\n+  print_header \"check os platform\"\n \n-cat <<EOF > /tmp/check_os.py\n+  \"${PYTHON_BIN_PATH}\" <<EOF\n import platform\n \n-print(\"\"\"os: %s\n-os kernel version: %s\n-os release version: %s\n-os platform: %s\n-linux distribution: %s\n-linux os distribution: %s\n-mac version: %s\n-uname: %s\n-architecture: %s\n-machine: %s\n-\"\"\" % (\n-platform.system(),\n-platform.version(),\n-platform.release(),\n-platform.platform(),\n-platform.linux_distribution(),\n-platform.dist(),\n-platform.mac_ver(),\n-platform.uname(),\n-platform.architecture(),\n-platform.machine(),\n-))\n+PLATFORM_ENTRIES = [\n+    (\"os\", \"system\"),\n+    (\"os kernel version\", \"version\"),\n+    (\"os release version\", \"release\"),\n+    (\"os platform\", \"platform\"),\n+    (\"freedesktop os release\", \"freedesktop_os_release\"),\n+    (\"mac version\", \"mac_ver\"),\n+    (\"uname\", \"uname\"),\n+    (\"architecture\", \"architecture\"),\n+    (\"machine\", \"machine\"),\n+]\n+\n+for label, function_name in PLATFORM_ENTRIES:\n+    if hasattr(platform, function_name):\n+        function = getattr(platform, function_name)\n+        result = function()  # Call the function\n+        print(f\"{label}: {result}\")\n+    else:\n+        print(f\"{label}: N/A\")\n EOF\n-${python_bin_path} /tmp/check_os.py 2>&1  >> ${OUTPUT_FILE}\n \n-{\n-  echo\n-  echo '== are we in docker ============================================='\n-  num=`cat /proc/1/cgroup | grep docker | wc -l`;",
        "comment_created_at": "2025-03-15T03:21:20+00:00",
        "comment_author": "maludwig",
        "comment_body": "This was a very cryptic way to see if the word \"docker\" was in that file.\r\nIt reads the `/proc/1/cgroup` file into STDIN, pipes that to grep, looking for the word docker, then counts the lines of output, and then if the number of lines of output is greater than or equal to 1, then we are in docker.\r\n\r\nI shortened it to just say yes if \"docker\" is in the file.",
        "pr_file_module": null
      }
    ]
  }
]