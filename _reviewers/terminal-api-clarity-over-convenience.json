[
  {
    "discussion_id": "2273725668",
    "pr_number": 18915,
    "pr_file": "src/cascadia/TerminalSettingsModel/ActionArgs.h",
    "created_at": "2025-08-13T14:53:16+00:00",
    "commented_code": "h.write(SplitSize());\r\n             return h.finalize();\r\n         }\r\n+        uint32_t GetArgCount() const\r\n+        {\r\n+            if (_ContentArgs)\r\n+            {\r\n+                if (const auto newTermArgs = _ContentArgs.try_as<NewTerminalArgs>())\r\n+                {\r\n+                    return newTermArgs->GetArgCount() + gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+                }\r\n+            }\r\n+            return gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+        }\r\n+        Model::ArgDescriptor GetArgDescriptorAt(uint32_t index) const\r\n+        {\r\n+            const auto additionalArgCount = gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+            if (index < additionalArgCount)\r\n+            {\r\n+                return _argDescriptors.at(index);\r\n+            }\r\n+            else\r\n+            {\r\n+                return _ContentArgs.as<NewTerminalArgs>()->GetArgDescriptorAt(index - additionalArgCount);\r\n+            }\r\n+        }\r\n+        IInspectable GetArgAt(uint32_t index) const",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2273725668",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18915,
        "pr_file": "src/cascadia/TerminalSettingsModel/ActionArgs.h",
        "discussion_id": "2273725668",
        "commented_code": "@@ -731,14 +761,67 @@ namespace winrt::Microsoft::Terminal::Settings::Model::implementation\n             h.write(SplitSize());\r\n             return h.finalize();\r\n         }\r\n+        uint32_t GetArgCount() const\r\n+        {\r\n+            if (_ContentArgs)\r\n+            {\r\n+                if (const auto newTermArgs = _ContentArgs.try_as<NewTerminalArgs>())\r\n+                {\r\n+                    return newTermArgs->GetArgCount() + gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+                }\r\n+            }\r\n+            return gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+        }\r\n+        Model::ArgDescriptor GetArgDescriptorAt(uint32_t index) const\r\n+        {\r\n+            const auto additionalArgCount = gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+            if (index < additionalArgCount)\r\n+            {\r\n+                return _argDescriptors.at(index);\r\n+            }\r\n+            else\r\n+            {\r\n+                return _ContentArgs.as<NewTerminalArgs>()->GetArgDescriptorAt(index - additionalArgCount);\r\n+            }\r\n+        }\r\n+        IInspectable GetArgAt(uint32_t index) const\r",
        "comment_created_at": "2025-08-13T14:53:16+00:00",
        "comment_author": "lhecker",
        "comment_body": "Indexing our x macros numerically seems unusual to me. Why not use stringly indexing (i.e. as if ActionArgs was a hashmap and the keys strings)?",
        "pr_file_module": null
      },
      {
        "comment_id": "2274732459",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18915,
        "pr_file": "src/cascadia/TerminalSettingsModel/ActionArgs.h",
        "discussion_id": "2273725668",
        "commented_code": "@@ -731,14 +761,67 @@ namespace winrt::Microsoft::Terminal::Settings::Model::implementation\n             h.write(SplitSize());\r\n             return h.finalize();\r\n         }\r\n+        uint32_t GetArgCount() const\r\n+        {\r\n+            if (_ContentArgs)\r\n+            {\r\n+                if (const auto newTermArgs = _ContentArgs.try_as<NewTerminalArgs>())\r\n+                {\r\n+                    return newTermArgs->GetArgCount() + gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+                }\r\n+            }\r\n+            return gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+        }\r\n+        Model::ArgDescriptor GetArgDescriptorAt(uint32_t index) const\r\n+        {\r\n+            const auto additionalArgCount = gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+            if (index < additionalArgCount)\r\n+            {\r\n+                return _argDescriptors.at(index);\r\n+            }\r\n+            else\r\n+            {\r\n+                return _ContentArgs.as<NewTerminalArgs>()->GetArgDescriptorAt(index - additionalArgCount);\r\n+            }\r\n+        }\r\n+        IInspectable GetArgAt(uint32_t index) const\r",
        "comment_created_at": "2025-08-13T21:53:00+00:00",
        "comment_author": "PankajBhojwani",
        "comment_body": "How would a consumer obtain the keys though? Wouldn't they need to index at some point to get that",
        "pr_file_module": null
      },
      {
        "comment_id": "2274739521",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18915,
        "pr_file": "src/cascadia/TerminalSettingsModel/ActionArgs.h",
        "discussion_id": "2273725668",
        "commented_code": "@@ -731,14 +761,67 @@ namespace winrt::Microsoft::Terminal::Settings::Model::implementation\n             h.write(SplitSize());\r\n             return h.finalize();\r\n         }\r\n+        uint32_t GetArgCount() const\r\n+        {\r\n+            if (_ContentArgs)\r\n+            {\r\n+                if (const auto newTermArgs = _ContentArgs.try_as<NewTerminalArgs>())\r\n+                {\r\n+                    return newTermArgs->GetArgCount() + gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+                }\r\n+            }\r\n+            return gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+        }\r\n+        Model::ArgDescriptor GetArgDescriptorAt(uint32_t index) const\r\n+        {\r\n+            const auto additionalArgCount = gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+            if (index < additionalArgCount)\r\n+            {\r\n+                return _argDescriptors.at(index);\r\n+            }\r\n+            else\r\n+            {\r\n+                return _ContentArgs.as<NewTerminalArgs>()->GetArgDescriptorAt(index - additionalArgCount);\r\n+            }\r\n+        }\r\n+        IInspectable GetArgAt(uint32_t index) const\r",
        "comment_created_at": "2025-08-13T21:58:35+00:00",
        "comment_author": "lhecker",
        "comment_body": "You already have the `_argDescriptors` list, right? Why not return that one as-is? Each `ArgDescriptor` includes the `Name` as a string already.",
        "pr_file_module": null
      },
      {
        "comment_id": "2274775144",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18915,
        "pr_file": "src/cascadia/TerminalSettingsModel/ActionArgs.h",
        "discussion_id": "2273725668",
        "commented_code": "@@ -731,14 +761,67 @@ namespace winrt::Microsoft::Terminal::Settings::Model::implementation\n             h.write(SplitSize());\r\n             return h.finalize();\r\n         }\r\n+        uint32_t GetArgCount() const\r\n+        {\r\n+            if (_ContentArgs)\r\n+            {\r\n+                if (const auto newTermArgs = _ContentArgs.try_as<NewTerminalArgs>())\r\n+                {\r\n+                    return newTermArgs->GetArgCount() + gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+                }\r\n+            }\r\n+            return gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+        }\r\n+        Model::ArgDescriptor GetArgDescriptorAt(uint32_t index) const\r\n+        {\r\n+            const auto additionalArgCount = gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+            if (index < additionalArgCount)\r\n+            {\r\n+                return _argDescriptors.at(index);\r\n+            }\r\n+            else\r\n+            {\r\n+                return _ContentArgs.as<NewTerminalArgs>()->GetArgDescriptorAt(index - additionalArgCount);\r\n+            }\r\n+        }\r\n+        IInspectable GetArgAt(uint32_t index) const\r",
        "comment_created_at": "2025-08-13T22:26:39+00:00",
        "comment_author": "PankajBhojwani",
        "comment_body": "Sure but then the consumer has to loop through the arg descriptor list to get each arg descriptor (to get the name from it), which is effectively indexing right?",
        "pr_file_module": null
      },
      {
        "comment_id": "2274881261",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18915,
        "pr_file": "src/cascadia/TerminalSettingsModel/ActionArgs.h",
        "discussion_id": "2273725668",
        "commented_code": "@@ -731,14 +761,67 @@ namespace winrt::Microsoft::Terminal::Settings::Model::implementation\n             h.write(SplitSize());\r\n             return h.finalize();\r\n         }\r\n+        uint32_t GetArgCount() const\r\n+        {\r\n+            if (_ContentArgs)\r\n+            {\r\n+                if (const auto newTermArgs = _ContentArgs.try_as<NewTerminalArgs>())\r\n+                {\r\n+                    return newTermArgs->GetArgCount() + gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+                }\r\n+            }\r\n+            return gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+        }\r\n+        Model::ArgDescriptor GetArgDescriptorAt(uint32_t index) const\r\n+        {\r\n+            const auto additionalArgCount = gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+            if (index < additionalArgCount)\r\n+            {\r\n+                return _argDescriptors.at(index);\r\n+            }\r\n+            else\r\n+            {\r\n+                return _ContentArgs.as<NewTerminalArgs>()->GetArgDescriptorAt(index - additionalArgCount);\r\n+            }\r\n+        }\r\n+        IInspectable GetArgAt(uint32_t index) const\r",
        "comment_created_at": "2025-08-13T23:46:37+00:00",
        "comment_author": "lhecker",
        "comment_body": "Yes, but doesn't that feel more natural for a reflection API? If you were to debug it and see \"5\" it's not immediately clear what you want, whereas with \"windowTitle\" you kind of know already.",
        "pr_file_module": null
      },
      {
        "comment_id": "2277268714",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18915,
        "pr_file": "src/cascadia/TerminalSettingsModel/ActionArgs.h",
        "discussion_id": "2273725668",
        "commented_code": "@@ -731,14 +761,67 @@ namespace winrt::Microsoft::Terminal::Settings::Model::implementation\n             h.write(SplitSize());\r\n             return h.finalize();\r\n         }\r\n+        uint32_t GetArgCount() const\r\n+        {\r\n+            if (_ContentArgs)\r\n+            {\r\n+                if (const auto newTermArgs = _ContentArgs.try_as<NewTerminalArgs>())\r\n+                {\r\n+                    return newTermArgs->GetArgCount() + gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+                }\r\n+            }\r\n+            return gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+        }\r\n+        Model::ArgDescriptor GetArgDescriptorAt(uint32_t index) const\r\n+        {\r\n+            const auto additionalArgCount = gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+            if (index < additionalArgCount)\r\n+            {\r\n+                return _argDescriptors.at(index);\r\n+            }\r\n+            else\r\n+            {\r\n+                return _ContentArgs.as<NewTerminalArgs>()->GetArgDescriptorAt(index - additionalArgCount);\r\n+            }\r\n+        }\r\n+        IInspectable GetArgAt(uint32_t index) const\r",
        "comment_created_at": "2025-08-14T17:24:24+00:00",
        "comment_author": "PankajBhojwani",
        "comment_body": "Perhaps we're prioritizing different things here - I feel like from the consumer side it is much easier to ask \"how many args do you have\" and then index accordingly, but from a debugging perspective it's easier to see the actual string value? I personally value the former higher but maybe I'm missing something",
        "pr_file_module": null
      },
      {
        "comment_id": "2277299785",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18915,
        "pr_file": "src/cascadia/TerminalSettingsModel/ActionArgs.h",
        "discussion_id": "2273725668",
        "commented_code": "@@ -731,14 +761,67 @@ namespace winrt::Microsoft::Terminal::Settings::Model::implementation\n             h.write(SplitSize());\r\n             return h.finalize();\r\n         }\r\n+        uint32_t GetArgCount() const\r\n+        {\r\n+            if (_ContentArgs)\r\n+            {\r\n+                if (const auto newTermArgs = _ContentArgs.try_as<NewTerminalArgs>())\r\n+                {\r\n+                    return newTermArgs->GetArgCount() + gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+                }\r\n+            }\r\n+            return gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+        }\r\n+        Model::ArgDescriptor GetArgDescriptorAt(uint32_t index) const\r\n+        {\r\n+            const auto additionalArgCount = gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+            if (index < additionalArgCount)\r\n+            {\r\n+                return _argDescriptors.at(index);\r\n+            }\r\n+            else\r\n+            {\r\n+                return _ContentArgs.as<NewTerminalArgs>()->GetArgDescriptorAt(index - additionalArgCount);\r\n+            }\r\n+        }\r\n+        IInspectable GetArgAt(uint32_t index) const\r",
        "comment_created_at": "2025-08-14T17:31:58+00:00",
        "comment_author": "lhecker",
        "comment_body": "FWIW I don't consider this to be an important issue. The only thing I do think we should address is the non-static std::vector.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2103568258",
    "pr_number": 18559,
    "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettings.idl",
    "created_at": "2025-05-22T23:40:23+00:00",
    "commented_code": "void ExpandCommands();\r\n     }\r\n+\r\n+    [default_interface] runtimeclass FragmentProfileEntry",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2103568258",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18559,
        "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettings.idl",
        "discussion_id": "2103568258",
        "commented_code": "@@ -56,4 +63,35 @@ namespace Microsoft.Terminal.Settings.Model\n \r\n         void ExpandCommands();\r\n     }\r\n+\r\n+    [default_interface] runtimeclass FragmentProfileEntry\r",
        "comment_created_at": "2025-05-22T23:40:23+00:00",
        "comment_author": "DHowett",
        "comment_body": "we don't need [default_interface] on any of these, FWIW.",
        "pr_file_module": null
      },
      {
        "comment_id": "2103568450",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18559,
        "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettings.idl",
        "discussion_id": "2103568258",
        "commented_code": "@@ -56,4 +63,35 @@ namespace Microsoft.Terminal.Settings.Model\n \r\n         void ExpandCommands();\r\n     }\r\n+\r\n+    [default_interface] runtimeclass FragmentProfileEntry\r",
        "comment_created_at": "2025-05-22T23:40:37+00:00",
        "comment_author": "DHowett",
        "comment_body": "(or at least, we should not.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2105311307",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18559,
        "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettings.idl",
        "discussion_id": "2103568258",
        "commented_code": "@@ -56,4 +63,35 @@ namespace Microsoft.Terminal.Settings.Model\n \r\n         void ExpandCommands();\r\n     }\r\n+\r\n+    [default_interface] runtimeclass FragmentProfileEntry\r",
        "comment_created_at": "2025-05-23T19:43:12+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "Fixed. Curious, what's the guidance on when to include `default_interface`? Is it just if it has multiple interfaces?",
        "pr_file_module": null
      },
      {
        "comment_id": "2110554520",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18559,
        "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettings.idl",
        "discussion_id": "2103568258",
        "commented_code": "@@ -56,4 +63,35 @@ namespace Microsoft.Terminal.Settings.Model\n \r\n         void ExpandCommands();\r\n     }\r\n+\r\n+    [default_interface] runtimeclass FragmentProfileEntry\r",
        "comment_created_at": "2025-05-27T23:51:45+00:00",
        "comment_author": "DHowett",
        "comment_body": "So, you only need `[default_interface]` when the runtimeclass has (1) no other interface and (2) no identifying characteristics at all; it forces the creation of an interface even if one wouldn't be necessary.",
        "pr_file_module": null
      }
    ]
  }
]