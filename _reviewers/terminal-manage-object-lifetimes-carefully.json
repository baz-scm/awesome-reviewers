[
  {
    "discussion_id": "2220499496",
    "pr_number": 19142,
    "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
    "created_at": "2025-07-21T22:37:22+00:00",
    "commented_code": "// Since the previous focus location might be discarded in the background,\n         // e.g., the command palette will be dismissed by the menu,\n         // and then closing the fly-out will move the focus to wrong location.\n-        newTabFlyout.Opening([this](auto&&, auto&&) {\n-            _FocusCurrentTab(true);\n+        newTabFlyout.Opening([weakThis{ get_weak() }](auto&&, auto&&) {\n+            if (auto page{ weakThis.get() })",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2220499496",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 19142,
        "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
        "discussion_id": "2220499496",
        "commented_code": "@@ -834,14 +842,36 @@ namespace winrt::TerminalApp::implementation\n         // Since the previous focus location might be discarded in the background,\n         // e.g., the command palette will be dismissed by the menu,\n         // and then closing the fly-out will move the focus to wrong location.\n-        newTabFlyout.Opening([this](auto&&, auto&&) {\n-            _FocusCurrentTab(true);\n+        newTabFlyout.Opening([weakThis{ get_weak() }](auto&&, auto&&) {\n+            if (auto page{ weakThis.get() })",
        "comment_created_at": "2025-07-21T22:37:22+00:00",
        "comment_author": "DHowett",
        "comment_body": "this is only necessary if there's a chance the hosting page goes away before the dropdown button goes away. generally for UI-speed things (like the user clicking on something) all this weak reference stuff is just noise honestly.",
        "pr_file_module": null
      },
      {
        "comment_id": "2220683410",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 19142,
        "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
        "discussion_id": "2220499496",
        "commented_code": "@@ -834,14 +842,36 @@ namespace winrt::TerminalApp::implementation\n         // Since the previous focus location might be discarded in the background,\n         // e.g., the command palette will be dismissed by the menu,\n         // and then closing the fly-out will move the focus to wrong location.\n-        newTabFlyout.Opening([this](auto&&, auto&&) {\n-            _FocusCurrentTab(true);\n+        newTabFlyout.Opening([weakThis{ get_weak() }](auto&&, auto&&) {\n+            if (auto page{ weakThis.get() })",
        "comment_created_at": "2025-07-22T00:39:50+00:00",
        "comment_author": "lhecker",
        "comment_body": "FWIW I personally prefer reference counting, if possible, because of our history of race conditions. However, in this case I think `this` was technically sufficient. I'm fine with either approach.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2164739010",
    "pr_number": 19027,
    "pr_file": "src/cascadia/TerminalApp/TerminalWindow.cpp",
    "created_at": "2025-06-24T19:24:55+00:00",
    "commented_code": "_root->Initialized({ get_weak(), &TerminalWindow::_pageInitialized });\r\n         _root->WindowSizeChanged({ get_weak(), &TerminalWindow::_WindowSizeChanged });\r\n         _root->RenameWindowRequested({ get_weak(), &TerminalWindow::_RenameWindowRequested });\r\n+        _root->ShowLoadWarningsDialog([weakThis{ get_weak() }](auto&& /*s*/, const Windows::Foundation::Collections::IVectorView<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>& warnings) {",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2164739010",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 19027,
        "pr_file": "src/cascadia/TerminalApp/TerminalWindow.cpp",
        "discussion_id": "2164739010",
        "commented_code": "@@ -220,6 +220,12 @@ namespace winrt::TerminalApp::implementation\n         _root->Initialized({ get_weak(), &TerminalWindow::_pageInitialized });\r\n         _root->WindowSizeChanged({ get_weak(), &TerminalWindow::_WindowSizeChanged });\r\n         _root->RenameWindowRequested({ get_weak(), &TerminalWindow::_RenameWindowRequested });\r\n+        _root->ShowLoadWarningsDialog([weakThis{ get_weak() }](auto&& /*s*/, const Windows::Foundation::Collections::IVectorView<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>& warnings) {\r",
        "comment_created_at": "2025-06-24T19:24:55+00:00",
        "comment_author": "DHowett",
        "comment_body": "in general, this should follow the same pattern as above. Use `{get_weak(), &Foo::Function}` instead of authoring your own weak reference resolver. :)\n\nIt will require adding a useless argument to `_ShowLoadWarningsDialog`, but perhaps that's fine",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082570381",
    "pr_number": 17346,
    "pr_file": "src/cascadia/TerminalControl/TermControl.cpp",
    "created_at": "2025-05-09T22:23:17+00:00",
    "commented_code": "_core = _interactivity.Core();\r\n \r\n+        // If high contrast mode was changed, update the appearance appropriately.\r\n+        _accessibilitySettings.HighContrastChanged([this](const Windows::UI::ViewManagement::AccessibilitySettings& a11ySettings, auto&&) {",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2082570381",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 17346,
        "pr_file": "src/cascadia/TerminalControl/TermControl.cpp",
        "discussion_id": "2082570381",
        "commented_code": "@@ -276,6 +278,12 @@ namespace winrt::Microsoft::Terminal::Control::implementation\n \r\n         _core = _interactivity.Core();\r\n \r\n+        // If high contrast mode was changed, update the appearance appropriately.\r\n+        _accessibilitySettings.HighContrastChanged([this](const Windows::UI::ViewManagement::AccessibilitySettings& a11ySettings, auto&&) {\r",
        "comment_created_at": "2025-05-09T22:23:17+00:00",
        "comment_author": "DHowett",
        "comment_body": "This is going to explode the moment you close a tab and then the contrast settings change. You're leaving a dangling event handler _with a raw pointer_ to every termcontrol, registered in the AccessibilitySettings.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1971832087",
    "pr_number": 18632,
    "pr_file": "src/cascadia/TerminalApp/DebugTapConnection.cpp",
    "created_at": "2025-02-26T15:33:19+00:00",
    "commented_code": "DebugTapConnection::DebugTapConnection(ITerminalConnection wrappedConnection)\r\n     {\r\n-        _outputRevoker = wrappedConnection.TerminalOutput(winrt::auto_revoke, { this, &DebugTapConnection::_OutputHandler });\r\n-        _stateChangedRevoker = wrappedConnection.StateChanged(winrt::auto_revoke, [this](auto&& /*s*/, auto&& /*e*/) {\r\n-            StateChanged.raise(*this, nullptr);\r\n+        _outputRevoker = wrappedConnection.TerminalOutput(winrt::auto_revoke, { get_weak(), &DebugTapConnection::_OutputHandler });",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1971832087",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18632,
        "pr_file": "src/cascadia/TerminalApp/DebugTapConnection.cpp",
        "discussion_id": "1971832087",
        "commented_code": "@@ -60,9 +60,12 @@ namespace winrt::Microsoft::TerminalApp::implementation\n \r\n     DebugTapConnection::DebugTapConnection(ITerminalConnection wrappedConnection)\r\n     {\r\n-        _outputRevoker = wrappedConnection.TerminalOutput(winrt::auto_revoke, { this, &DebugTapConnection::_OutputHandler });\r\n-        _stateChangedRevoker = wrappedConnection.StateChanged(winrt::auto_revoke, [this](auto&& /*s*/, auto&& /*e*/) {\r\n-            StateChanged.raise(*this, nullptr);\r\n+        _outputRevoker = wrappedConnection.TerminalOutput(winrt::auto_revoke, { get_weak(), &DebugTapConnection::_OutputHandler });\r",
        "comment_created_at": "2025-02-26T15:33:19+00:00",
        "comment_author": "lhecker",
        "comment_body": "`get_weak()` to ensure pending calls during revocation can complete without `this` being deallocated.",
        "pr_file_module": null
      },
      {
        "comment_id": "1971930328",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18632,
        "pr_file": "src/cascadia/TerminalApp/DebugTapConnection.cpp",
        "discussion_id": "1971832087",
        "commented_code": "@@ -60,9 +60,12 @@ namespace winrt::Microsoft::TerminalApp::implementation\n \r\n     DebugTapConnection::DebugTapConnection(ITerminalConnection wrappedConnection)\r\n     {\r\n-        _outputRevoker = wrappedConnection.TerminalOutput(winrt::auto_revoke, { this, &DebugTapConnection::_OutputHandler });\r\n-        _stateChangedRevoker = wrappedConnection.StateChanged(winrt::auto_revoke, [this](auto&& /*s*/, auto&& /*e*/) {\r\n-            StateChanged.raise(*this, nullptr);\r\n+        _outputRevoker = wrappedConnection.TerminalOutput(winrt::auto_revoke, { get_weak(), &DebugTapConnection::_OutputHandler });\r",
        "comment_created_at": "2025-02-26T16:25:33+00:00",
        "comment_author": "DHowett",
        "comment_body": "does this by chance fix the issue where closing a connection while the debug tap is on it crashes terminal",
        "pr_file_module": null
      },
      {
        "comment_id": "1972515743",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18632,
        "pr_file": "src/cascadia/TerminalApp/DebugTapConnection.cpp",
        "discussion_id": "1971832087",
        "commented_code": "@@ -60,9 +60,12 @@ namespace winrt::Microsoft::TerminalApp::implementation\n \r\n     DebugTapConnection::DebugTapConnection(ITerminalConnection wrappedConnection)\r\n     {\r\n-        _outputRevoker = wrappedConnection.TerminalOutput(winrt::auto_revoke, { this, &DebugTapConnection::_OutputHandler });\r\n-        _stateChangedRevoker = wrappedConnection.StateChanged(winrt::auto_revoke, [this](auto&& /*s*/, auto&& /*e*/) {\r\n-            StateChanged.raise(*this, nullptr);\r\n+        _outputRevoker = wrappedConnection.TerminalOutput(winrt::auto_revoke, { get_weak(), &DebugTapConnection::_OutputHandler });\r",
        "comment_created_at": "2025-02-26T22:31:20+00:00",
        "comment_author": "lhecker",
        "comment_body": "I wasn't aware we had such an issue. It's quite likely that this fixes it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1971832645",
    "pr_number": 18632,
    "pr_file": "src/cascadia/TerminalControl/ControlCore.cpp",
    "created_at": "2025-02-26T15:33:35+00:00",
    "commented_code": "auto oldState = ConnectionState(); // rely on ControlCore's automatic null handling\r\n         // revoke ALL old handlers immediately\r\n \r\n+        // TODO: This manual event revoking doesn't make much sense.\r\n+        // We could just drop the old connection. Why have all that Close() stuff?\r\n+        // It also shouldn't need to be exposed to the outside. I suspect we can only\r\n+        // improve this though, once drag/drop of tabs doesn't use \"startup actions\" anymore.\r\n         _connectionOutputEventRevoker.revoke();\r\n         _connectionStateChangedRevoker.revoke();\r\n \r\n         _connection = newConnection;\r\n         if (_connection)\r\n         {\r\n             // Subscribe to the connection's disconnected event and call our connection closed handlers.\r\n-            _connectionStateChangedRevoker = newConnection.StateChanged(winrt::auto_revoke, [this](auto&& /*s*/, auto&& /*v*/) {\r\n-                ConnectionStateChanged.raise(*this, nullptr);\r\n-            });\r\n+            _connectionStateChangedRevoker = newConnection.StateChanged(winrt::auto_revoke, { get_weak(), &ControlCore::_connectionStateChangedHandler });",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1971832645",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18632,
        "pr_file": "src/cascadia/TerminalControl/ControlCore.cpp",
        "discussion_id": "1971832645",
        "commented_code": "@@ -276,16 +267,18 @@ namespace winrt::Microsoft::Terminal::Control::implementation\n         auto oldState = ConnectionState(); // rely on ControlCore's automatic null handling\r\n         // revoke ALL old handlers immediately\r\n \r\n+        // TODO: This manual event revoking doesn't make much sense.\r\n+        // We could just drop the old connection. Why have all that Close() stuff?\r\n+        // It also shouldn't need to be exposed to the outside. I suspect we can only\r\n+        // improve this though, once drag/drop of tabs doesn't use \"startup actions\" anymore.\r\n         _connectionOutputEventRevoker.revoke();\r\n         _connectionStateChangedRevoker.revoke();\r\n \r\n         _connection = newConnection;\r\n         if (_connection)\r\n         {\r\n             // Subscribe to the connection's disconnected event and call our connection closed handlers.\r\n-            _connectionStateChangedRevoker = newConnection.StateChanged(winrt::auto_revoke, [this](auto&& /*s*/, auto&& /*v*/) {\r\n-                ConnectionStateChanged.raise(*this, nullptr);\r\n-            });\r\n+            _connectionStateChangedRevoker = newConnection.StateChanged(winrt::auto_revoke, { get_weak(), &ControlCore::_connectionStateChangedHandler });\r",
        "comment_created_at": "2025-02-26T15:33:35+00:00",
        "comment_author": "lhecker",
        "comment_body": "`get_weak()` to ensure pending calls during revocation can complete without `this` being deallocated. (Same below.)",
        "pr_file_module": null
      },
      {
        "comment_id": "1989464505",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18632,
        "pr_file": "src/cascadia/TerminalControl/ControlCore.cpp",
        "discussion_id": "1971832645",
        "commented_code": "@@ -276,16 +267,18 @@ namespace winrt::Microsoft::Terminal::Control::implementation\n         auto oldState = ConnectionState(); // rely on ControlCore's automatic null handling\r\n         // revoke ALL old handlers immediately\r\n \r\n+        // TODO: This manual event revoking doesn't make much sense.\r\n+        // We could just drop the old connection. Why have all that Close() stuff?\r\n+        // It also shouldn't need to be exposed to the outside. I suspect we can only\r\n+        // improve this though, once drag/drop of tabs doesn't use \"startup actions\" anymore.\r\n         _connectionOutputEventRevoker.revoke();\r\n         _connectionStateChangedRevoker.revoke();\r\n \r\n         _connection = newConnection;\r\n         if (_connection)\r\n         {\r\n             // Subscribe to the connection's disconnected event and call our connection closed handlers.\r\n-            _connectionStateChangedRevoker = newConnection.StateChanged(winrt::auto_revoke, [this](auto&& /*s*/, auto&& /*v*/) {\r\n-                ConnectionStateChanged.raise(*this, nullptr);\r\n-            });\r\n+            _connectionStateChangedRevoker = newConnection.StateChanged(winrt::auto_revoke, { get_weak(), &ControlCore::_connectionStateChangedHandler });\r",
        "comment_created_at": "2025-03-11T14:47:52+00:00",
        "comment_author": "lhecker",
        "comment_body": "Fuck. I just realized this can't work because it allows `this` to be destructed on a background thread which breaks WinUI. Got to use a lock or something instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1880941808",
    "pr_number": 17983,
    "pr_file": "src/cascadia/TerminalSettingsEditor/ProfileViewModel.cpp",
    "created_at": "2024-12-11T20:41:55+00:00",
    "commented_code": "BellStyle(currentStyle);\r\n     }\r\n \r\n+    // Method Description:\r\n+    // - Construct _CurrentBellSounds by importing the _inherited_ value from the model\r\n+    // - Adds a PropertyChanged handler to each BellSoundViewModel to propagate changes to the model\r\n+    void ProfileViewModel::_InitializeCurrentBellSounds()\r\n+    {\r\n+        _CurrentBellSounds = winrt::single_threaded_observable_vector<Editor::BellSoundViewModel>();\r\n+        if (const auto soundList = _profile.BellSound())\r\n+        {\r\n+            for (const auto&& bellSound : soundList)\r\n+            {\r\n+                _CurrentBellSounds.Append(winrt::make<BellSoundViewModel>(bellSound, _dispatcher));\r\n+            }\r\n+        }\r\n+        _MarkDuplicateBellSoundDirectories();\r\n+        _NotifyChanges(L\"CurrentBellSounds\");\r\n+    }\r\n+\r\n+    // Method Description:\r\n+    // - If the current layer is inheriting the bell sound from its parent,\r\n+    //   we need to copy the _inherited_ bell sound list to the current layer\r\n+    //   so that we can then apply modifications to it\r\n+    void ProfileViewModel::_PrepareModelForBellSoundModification()\r\n+    {\r\n+        if (!_profile.HasBellSound())\r\n+        {\r\n+            std::vector<hstring> newSounds;\r\n+            if (const auto inheritedSounds = _profile.BellSound())\r\n+            {\r\n+                // copy inherited bell sounds to the current layer\r\n+                newSounds.reserve(inheritedSounds.Size());\r\n+                for (const auto sound : inheritedSounds)\r\n+                {\r\n+                    newSounds.push_back(sound);\r\n+                }\r\n+            }\r\n+            // if we didn't inherit any bell sounds,\r\n+            // we should still set the bell sound to an empty list (instead of null)\r\n+            _profile.BellSound(winrt::single_threaded_vector<hstring>(std::move(newSounds)));\r\n+        }\r\n+    }\r\n+\r\n+    // Method Description:\r\n+    // - Check if any bell sounds share the same name.\r\n+    //   If they do, mark them so that they show the directory path in the UI\r\n+    void ProfileViewModel::_MarkDuplicateBellSoundDirectories()\r\n+    {\r\n+        for (uint32_t i = 0; i < _CurrentBellSounds.Size(); i++)\r\n+        {\r\n+            auto soundA = _CurrentBellSounds.GetAt(i);\r\n+            for (uint32_t j = i + 1; j < _CurrentBellSounds.Size(); j++)\r\n+            {\r\n+                auto soundB = _CurrentBellSounds.GetAt(j);\r\n+                if (soundA.DisplayPath() == soundB.DisplayPath())\r\n+                {\r\n+                    get_self<BellSoundViewModel>(_CurrentBellSounds.GetAt(i))->ShowDirectory(true);\r\n+                    get_self<BellSoundViewModel>(_CurrentBellSounds.GetAt(j))->ShowDirectory(true);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    BellSoundViewModel::BellSoundViewModel(hstring path, const Windows::UI::Core::CoreDispatcher& dispatcher) :\r\n+        _Path{ path },\r\n+        _dispatcher{ dispatcher }\r\n+    {\r\n+        _CheckIfFileExists();",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1880941808",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 17983,
        "pr_file": "src/cascadia/TerminalSettingsEditor/ProfileViewModel.cpp",
        "discussion_id": "1880941808",
        "commented_code": "@@ -384,9 +402,149 @@ namespace winrt::Microsoft::Terminal::Settings::Editor::implementation\n         BellStyle(currentStyle);\r\n     }\r\n \r\n+    // Method Description:\r\n+    // - Construct _CurrentBellSounds by importing the _inherited_ value from the model\r\n+    // - Adds a PropertyChanged handler to each BellSoundViewModel to propagate changes to the model\r\n+    void ProfileViewModel::_InitializeCurrentBellSounds()\r\n+    {\r\n+        _CurrentBellSounds = winrt::single_threaded_observable_vector<Editor::BellSoundViewModel>();\r\n+        if (const auto soundList = _profile.BellSound())\r\n+        {\r\n+            for (const auto&& bellSound : soundList)\r\n+            {\r\n+                _CurrentBellSounds.Append(winrt::make<BellSoundViewModel>(bellSound, _dispatcher));\r\n+            }\r\n+        }\r\n+        _MarkDuplicateBellSoundDirectories();\r\n+        _NotifyChanges(L\"CurrentBellSounds\");\r\n+    }\r\n+\r\n+    // Method Description:\r\n+    // - If the current layer is inheriting the bell sound from its parent,\r\n+    //   we need to copy the _inherited_ bell sound list to the current layer\r\n+    //   so that we can then apply modifications to it\r\n+    void ProfileViewModel::_PrepareModelForBellSoundModification()\r\n+    {\r\n+        if (!_profile.HasBellSound())\r\n+        {\r\n+            std::vector<hstring> newSounds;\r\n+            if (const auto inheritedSounds = _profile.BellSound())\r\n+            {\r\n+                // copy inherited bell sounds to the current layer\r\n+                newSounds.reserve(inheritedSounds.Size());\r\n+                for (const auto sound : inheritedSounds)\r\n+                {\r\n+                    newSounds.push_back(sound);\r\n+                }\r\n+            }\r\n+            // if we didn't inherit any bell sounds,\r\n+            // we should still set the bell sound to an empty list (instead of null)\r\n+            _profile.BellSound(winrt::single_threaded_vector<hstring>(std::move(newSounds)));\r\n+        }\r\n+    }\r\n+\r\n+    // Method Description:\r\n+    // - Check if any bell sounds share the same name.\r\n+    //   If they do, mark them so that they show the directory path in the UI\r\n+    void ProfileViewModel::_MarkDuplicateBellSoundDirectories()\r\n+    {\r\n+        for (uint32_t i = 0; i < _CurrentBellSounds.Size(); i++)\r\n+        {\r\n+            auto soundA = _CurrentBellSounds.GetAt(i);\r\n+            for (uint32_t j = i + 1; j < _CurrentBellSounds.Size(); j++)\r\n+            {\r\n+                auto soundB = _CurrentBellSounds.GetAt(j);\r\n+                if (soundA.DisplayPath() == soundB.DisplayPath())\r\n+                {\r\n+                    get_self<BellSoundViewModel>(_CurrentBellSounds.GetAt(i))->ShowDirectory(true);\r\n+                    get_self<BellSoundViewModel>(_CurrentBellSounds.GetAt(j))->ShowDirectory(true);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    BellSoundViewModel::BellSoundViewModel(hstring path, const Windows::UI::Core::CoreDispatcher& dispatcher) :\r\n+        _Path{ path },\r\n+        _dispatcher{ dispatcher }\r\n+    {\r\n+        _CheckIfFileExists();\r",
        "comment_created_at": "2024-12-11T20:41:55+00:00",
        "comment_author": "DHowett",
        "comment_body": "I'm a bit way of doing this in the constructor, but I guess it's fine..?",
        "pr_file_module": null
      },
      {
        "comment_id": "1880943655",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 17983,
        "pr_file": "src/cascadia/TerminalSettingsEditor/ProfileViewModel.cpp",
        "discussion_id": "1880941808",
        "commented_code": "@@ -384,9 +402,149 @@ namespace winrt::Microsoft::Terminal::Settings::Editor::implementation\n         BellStyle(currentStyle);\r\n     }\r\n \r\n+    // Method Description:\r\n+    // - Construct _CurrentBellSounds by importing the _inherited_ value from the model\r\n+    // - Adds a PropertyChanged handler to each BellSoundViewModel to propagate changes to the model\r\n+    void ProfileViewModel::_InitializeCurrentBellSounds()\r\n+    {\r\n+        _CurrentBellSounds = winrt::single_threaded_observable_vector<Editor::BellSoundViewModel>();\r\n+        if (const auto soundList = _profile.BellSound())\r\n+        {\r\n+            for (const auto&& bellSound : soundList)\r\n+            {\r\n+                _CurrentBellSounds.Append(winrt::make<BellSoundViewModel>(bellSound, _dispatcher));\r\n+            }\r\n+        }\r\n+        _MarkDuplicateBellSoundDirectories();\r\n+        _NotifyChanges(L\"CurrentBellSounds\");\r\n+    }\r\n+\r\n+    // Method Description:\r\n+    // - If the current layer is inheriting the bell sound from its parent,\r\n+    //   we need to copy the _inherited_ bell sound list to the current layer\r\n+    //   so that we can then apply modifications to it\r\n+    void ProfileViewModel::_PrepareModelForBellSoundModification()\r\n+    {\r\n+        if (!_profile.HasBellSound())\r\n+        {\r\n+            std::vector<hstring> newSounds;\r\n+            if (const auto inheritedSounds = _profile.BellSound())\r\n+            {\r\n+                // copy inherited bell sounds to the current layer\r\n+                newSounds.reserve(inheritedSounds.Size());\r\n+                for (const auto sound : inheritedSounds)\r\n+                {\r\n+                    newSounds.push_back(sound);\r\n+                }\r\n+            }\r\n+            // if we didn't inherit any bell sounds,\r\n+            // we should still set the bell sound to an empty list (instead of null)\r\n+            _profile.BellSound(winrt::single_threaded_vector<hstring>(std::move(newSounds)));\r\n+        }\r\n+    }\r\n+\r\n+    // Method Description:\r\n+    // - Check if any bell sounds share the same name.\r\n+    //   If they do, mark them so that they show the directory path in the UI\r\n+    void ProfileViewModel::_MarkDuplicateBellSoundDirectories()\r\n+    {\r\n+        for (uint32_t i = 0; i < _CurrentBellSounds.Size(); i++)\r\n+        {\r\n+            auto soundA = _CurrentBellSounds.GetAt(i);\r\n+            for (uint32_t j = i + 1; j < _CurrentBellSounds.Size(); j++)\r\n+            {\r\n+                auto soundB = _CurrentBellSounds.GetAt(j);\r\n+                if (soundA.DisplayPath() == soundB.DisplayPath())\r\n+                {\r\n+                    get_self<BellSoundViewModel>(_CurrentBellSounds.GetAt(i))->ShowDirectory(true);\r\n+                    get_self<BellSoundViewModel>(_CurrentBellSounds.GetAt(j))->ShowDirectory(true);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    BellSoundViewModel::BellSoundViewModel(hstring path, const Windows::UI::Core::CoreDispatcher& dispatcher) :\r\n+        _Path{ path },\r\n+        _dispatcher{ dispatcher }\r\n+    {\r\n+        _CheckIfFileExists();\r",
        "comment_created_at": "2024-12-11T20:42:30+00:00",
        "comment_author": "DHowett",
        "comment_body": "you will probably need a way to capture a strong reference to `this` so that it's kept alive across the coroutine body",
        "pr_file_module": null
      },
      {
        "comment_id": "1880948495",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 17983,
        "pr_file": "src/cascadia/TerminalSettingsEditor/ProfileViewModel.cpp",
        "discussion_id": "1880941808",
        "commented_code": "@@ -384,9 +402,149 @@ namespace winrt::Microsoft::Terminal::Settings::Editor::implementation\n         BellStyle(currentStyle);\r\n     }\r\n \r\n+    // Method Description:\r\n+    // - Construct _CurrentBellSounds by importing the _inherited_ value from the model\r\n+    // - Adds a PropertyChanged handler to each BellSoundViewModel to propagate changes to the model\r\n+    void ProfileViewModel::_InitializeCurrentBellSounds()\r\n+    {\r\n+        _CurrentBellSounds = winrt::single_threaded_observable_vector<Editor::BellSoundViewModel>();\r\n+        if (const auto soundList = _profile.BellSound())\r\n+        {\r\n+            for (const auto&& bellSound : soundList)\r\n+            {\r\n+                _CurrentBellSounds.Append(winrt::make<BellSoundViewModel>(bellSound, _dispatcher));\r\n+            }\r\n+        }\r\n+        _MarkDuplicateBellSoundDirectories();\r\n+        _NotifyChanges(L\"CurrentBellSounds\");\r\n+    }\r\n+\r\n+    // Method Description:\r\n+    // - If the current layer is inheriting the bell sound from its parent,\r\n+    //   we need to copy the _inherited_ bell sound list to the current layer\r\n+    //   so that we can then apply modifications to it\r\n+    void ProfileViewModel::_PrepareModelForBellSoundModification()\r\n+    {\r\n+        if (!_profile.HasBellSound())\r\n+        {\r\n+            std::vector<hstring> newSounds;\r\n+            if (const auto inheritedSounds = _profile.BellSound())\r\n+            {\r\n+                // copy inherited bell sounds to the current layer\r\n+                newSounds.reserve(inheritedSounds.Size());\r\n+                for (const auto sound : inheritedSounds)\r\n+                {\r\n+                    newSounds.push_back(sound);\r\n+                }\r\n+            }\r\n+            // if we didn't inherit any bell sounds,\r\n+            // we should still set the bell sound to an empty list (instead of null)\r\n+            _profile.BellSound(winrt::single_threaded_vector<hstring>(std::move(newSounds)));\r\n+        }\r\n+    }\r\n+\r\n+    // Method Description:\r\n+    // - Check if any bell sounds share the same name.\r\n+    //   If they do, mark them so that they show the directory path in the UI\r\n+    void ProfileViewModel::_MarkDuplicateBellSoundDirectories()\r\n+    {\r\n+        for (uint32_t i = 0; i < _CurrentBellSounds.Size(); i++)\r\n+        {\r\n+            auto soundA = _CurrentBellSounds.GetAt(i);\r\n+            for (uint32_t j = i + 1; j < _CurrentBellSounds.Size(); j++)\r\n+            {\r\n+                auto soundB = _CurrentBellSounds.GetAt(j);\r\n+                if (soundA.DisplayPath() == soundB.DisplayPath())\r\n+                {\r\n+                    get_self<BellSoundViewModel>(_CurrentBellSounds.GetAt(i))->ShowDirectory(true);\r\n+                    get_self<BellSoundViewModel>(_CurrentBellSounds.GetAt(j))->ShowDirectory(true);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    BellSoundViewModel::BellSoundViewModel(hstring path, const Windows::UI::Core::CoreDispatcher& dispatcher) :\r\n+        _Path{ path },\r\n+        _dispatcher{ dispatcher }\r\n+    {\r\n+        _CheckIfFileExists();\r",
        "comment_created_at": "2024-12-11T20:44:22+00:00",
        "comment_author": "DHowett",
        "comment_body": "is it possible for you to do this all in one coroutine invocation (check all bell sound files) rather than spawning one coroutine per bell sound?",
        "pr_file_module": null
      },
      {
        "comment_id": "1881228417",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 17983,
        "pr_file": "src/cascadia/TerminalSettingsEditor/ProfileViewModel.cpp",
        "discussion_id": "1880941808",
        "commented_code": "@@ -384,9 +402,149 @@ namespace winrt::Microsoft::Terminal::Settings::Editor::implementation\n         BellStyle(currentStyle);\r\n     }\r\n \r\n+    // Method Description:\r\n+    // - Construct _CurrentBellSounds by importing the _inherited_ value from the model\r\n+    // - Adds a PropertyChanged handler to each BellSoundViewModel to propagate changes to the model\r\n+    void ProfileViewModel::_InitializeCurrentBellSounds()\r\n+    {\r\n+        _CurrentBellSounds = winrt::single_threaded_observable_vector<Editor::BellSoundViewModel>();\r\n+        if (const auto soundList = _profile.BellSound())\r\n+        {\r\n+            for (const auto&& bellSound : soundList)\r\n+            {\r\n+                _CurrentBellSounds.Append(winrt::make<BellSoundViewModel>(bellSound, _dispatcher));\r\n+            }\r\n+        }\r\n+        _MarkDuplicateBellSoundDirectories();\r\n+        _NotifyChanges(L\"CurrentBellSounds\");\r\n+    }\r\n+\r\n+    // Method Description:\r\n+    // - If the current layer is inheriting the bell sound from its parent,\r\n+    //   we need to copy the _inherited_ bell sound list to the current layer\r\n+    //   so that we can then apply modifications to it\r\n+    void ProfileViewModel::_PrepareModelForBellSoundModification()\r\n+    {\r\n+        if (!_profile.HasBellSound())\r\n+        {\r\n+            std::vector<hstring> newSounds;\r\n+            if (const auto inheritedSounds = _profile.BellSound())\r\n+            {\r\n+                // copy inherited bell sounds to the current layer\r\n+                newSounds.reserve(inheritedSounds.Size());\r\n+                for (const auto sound : inheritedSounds)\r\n+                {\r\n+                    newSounds.push_back(sound);\r\n+                }\r\n+            }\r\n+            // if we didn't inherit any bell sounds,\r\n+            // we should still set the bell sound to an empty list (instead of null)\r\n+            _profile.BellSound(winrt::single_threaded_vector<hstring>(std::move(newSounds)));\r\n+        }\r\n+    }\r\n+\r\n+    // Method Description:\r\n+    // - Check if any bell sounds share the same name.\r\n+    //   If they do, mark them so that they show the directory path in the UI\r\n+    void ProfileViewModel::_MarkDuplicateBellSoundDirectories()\r\n+    {\r\n+        for (uint32_t i = 0; i < _CurrentBellSounds.Size(); i++)\r\n+        {\r\n+            auto soundA = _CurrentBellSounds.GetAt(i);\r\n+            for (uint32_t j = i + 1; j < _CurrentBellSounds.Size(); j++)\r\n+            {\r\n+                auto soundB = _CurrentBellSounds.GetAt(j);\r\n+                if (soundA.DisplayPath() == soundB.DisplayPath())\r\n+                {\r\n+                    get_self<BellSoundViewModel>(_CurrentBellSounds.GetAt(i))->ShowDirectory(true);\r\n+                    get_self<BellSoundViewModel>(_CurrentBellSounds.GetAt(j))->ShowDirectory(true);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    BellSoundViewModel::BellSoundViewModel(hstring path, const Windows::UI::Core::CoreDispatcher& dispatcher) :\r\n+        _Path{ path },\r\n+        _dispatcher{ dispatcher }\r\n+    {\r\n+        _CheckIfFileExists();\r",
        "comment_created_at": "2024-12-12T01:20:23+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "Good idea. Moved the validation to be just when we import from the JSON.",
        "pr_file_module": null
      }
    ]
  }
]