[
  {
    "discussion_id": "2280629303",
    "pr_number": 19254,
    "pr_file": "src/cascadia/TerminalApp/TerminalPaneContent.h",
    "created_at": "2025-08-16T22:29:42+00:00",
    "commented_code": "struct TerminalPaneContent : TerminalPaneContentT<TerminalPaneContent>, BasicPaneEvents\r\n     {\r\n         TerminalPaneContent(const winrt::Microsoft::Terminal::Settings::Model::Profile& profile,\r\n-                            const TerminalApp::TerminalSettingsCache& cache,\r\n+                            const std::shared_ptr<TerminalSettingsCache>& cache,",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2280629303",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 19254,
        "pr_file": "src/cascadia/TerminalApp/TerminalPaneContent.h",
        "discussion_id": "2280629303",
        "commented_code": "@@ -20,7 +22,7 @@ namespace winrt::TerminalApp::implementation\n     struct TerminalPaneContent : TerminalPaneContentT<TerminalPaneContent>, BasicPaneEvents\r\n     {\r\n         TerminalPaneContent(const winrt::Microsoft::Terminal::Settings::Model::Profile& profile,\r\n-                            const TerminalApp::TerminalSettingsCache& cache,\r\n+                            const std::shared_ptr<TerminalSettingsCache>& cache,\r",
        "comment_created_at": "2025-08-16T22:29:42+00:00",
        "comment_author": "DHowett",
        "comment_body": "we could make this `TerminalSettingsCache*`, honestly, and dispense with the shared_ptr completely. _We never construct a new cache._ Pane content does not outlive the parent Page.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2116235419",
    "pr_number": 18700,
    "pr_file": "src/cascadia/TerminalApp/SnippetsPaneContent.h",
    "created_at": "2025-05-30T16:34:25+00:00",
    "commented_code": "}\r\n         }\r\n \r\n-        void UpdateFilter(const winrt::hstring& filter)\r\n+        void UpdateFilter(std::shared_ptr<fzf::matcher::Pattern> pattern)\r\n         {\r\n-            _filteredCommand->UpdateFilter(filter);\r\n+            _pattern = pattern;",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2116235419",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18700,
        "pr_file": "src/cascadia/TerminalApp/SnippetsPaneContent.h",
        "discussion_id": "2116235419",
        "commented_code": "@@ -77,13 +77,14 @@ namespace winrt::TerminalApp::implementation\n             }\r\n         }\r\n \r\n-        void UpdateFilter(const winrt::hstring& filter)\r\n+        void UpdateFilter(std::shared_ptr<fzf::matcher::Pattern> pattern)\r\n         {\r\n-            _filteredCommand->UpdateFilter(filter);\r\n+            _pattern = pattern;\r",
        "comment_created_at": "2025-05-30T16:34:25+00:00",
        "comment_author": "DHowett",
        "comment_body": "nit: should we `std::move` from `pattern` to reduce the reference count churn? then we would use `_pattern` everywhere else (and maybe `wil::hide_name pattern;`? would that pass auditing?)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1113338128",
    "pr_number": 14825,
    "pr_file": "src/cascadia/TerminalApp/AppLogic.h",
    "created_at": "2023-02-21T16:58:51+00:00",
    "commented_code": "AppLogic();\r\n         ~AppLogic() = default;\r\n \r\n-        STDMETHODIMP Initialize(HWND hwnd);\r\n-\r\n         void Create();\r\n         bool IsUwp() const noexcept;\r\n         void RunAsUwp();\r\n         bool IsElevated() const noexcept;\r\n         void ReloadSettings();\r\n \r\n-        [[nodiscard]] Microsoft::Terminal::Settings::Model::CascadiaSettings GetSettings() const noexcept;\r\n+        bool HasSettingsStartupActions() const noexcept;\r\n \r\n-        void Quit();\r\n+        bool ShouldUsePersistedLayout() const;\r\n+        void SaveWindowLayoutJsons(const Windows::Foundation::Collections::IVector<hstring>& layouts);\r\n+\r\n+        [[nodiscard]] Microsoft::Terminal::Settings::Model::CascadiaSettings GetSettings() const noexcept;\r\n \r\n-        bool HasCommandlineArguments() const noexcept;\r\n-        bool HasSettingsStartupActions() const noexcept;\r\n-        int32_t SetStartupCommandline(array_view<const winrt::hstring> actions);\r\n-        int32_t ExecuteCommandline(array_view<const winrt::hstring> actions, const winrt::hstring& cwd);\r\n         TerminalApp::FindTargetWindowResult FindTargetWindow(array_view<const winrt::hstring> actions);\r\n-        winrt::hstring ParseCommandlineMessage();\r\n-        bool ShouldExitEarly();\r\n-\r\n-        bool FocusMode() const;\r\n-        bool Fullscreen() const;\r\n-        void Maximized(bool newMaximized);\r\n-        bool AlwaysOnTop() const;\r\n-        bool AutoHideWindow();\r\n-\r\n-        bool ShouldUsePersistedLayout();\r\n-        bool ShouldImmediatelyHandoffToElevated();\r\n-        void HandoffToElevated();\r\n-        hstring GetWindowLayoutJson(Microsoft::Terminal::Settings::Model::LaunchPosition position);\r\n-        void SaveWindowLayoutJsons(const Windows::Foundation::Collections::IVector<hstring>& layouts);\r\n-        void IdentifyWindow();\r\n-        void RenameFailed();\r\n-        winrt::hstring WindowName();\r\n-        void WindowName(const winrt::hstring& name);\r\n-        uint64_t WindowId();\r\n-        void WindowId(const uint64_t& id);\r\n-        void SetPersistedLayoutIdx(const uint32_t idx);\r\n-        void SetNumberOfOpenWindows(const uint64_t num);\r\n-        bool IsQuakeWindow() const noexcept;\r\n-        void RequestExitFullscreen();\r\n-\r\n-        Windows::Foundation::Size GetLaunchDimensions(uint32_t dpi);\r\n-        bool CenterOnLaunch();\r\n-        TerminalApp::InitialPosition GetInitialPosition(int64_t defaultInitialX, int64_t defaultInitialY);\r\n-        winrt::Windows::UI::Xaml::ElementTheme GetRequestedTheme();\r\n-        Microsoft::Terminal::Settings::Model::LaunchMode GetLaunchMode();\r\n-        bool GetShowTabsInTitlebar();\r\n-        bool GetInitialAlwaysOnTop();\r\n-        float CalcSnappedDimension(const bool widthOrHeight, const float dimension) const;\r\n-\r\n-        Windows::UI::Xaml::UIElement GetRoot() noexcept;\r\n-\r\n-        void SetInboundListener();\r\n-\r\n-        hstring Title();\r\n-        void TitlebarClicked();\r\n-        bool OnDirectKeyEvent(const uint32_t vkey, const uint8_t scanCode, const bool down);\r\n-\r\n-        void CloseWindow(Microsoft::Terminal::Settings::Model::LaunchPosition position);\r\n-        void WindowVisibilityChanged(const bool showOrHide);\r\n-\r\n-        winrt::TerminalApp::TaskbarState TaskbarState();\r\n-        winrt::Windows::UI::Xaml::Media::Brush TitlebarBrush();\r\n-        void WindowActivated(const bool activated);\r\n-\r\n-        bool GetMinimizeToNotificationArea();\r\n-        bool GetAlwaysShowNotificationIcon();\r\n-        bool GetShowTitleInTitlebar();\r\n-\r\n-        winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::UI::Xaml::Controls::ContentDialogResult> ShowDialog(winrt::Windows::UI::Xaml::Controls::ContentDialog dialog);\r\n-        void DismissDialog();\r\n \r\n         Windows::Foundation::Collections::IMapView<Microsoft::Terminal::Control::KeyChord, Microsoft::Terminal::Settings::Model::Command> GlobalHotkeys();\r\n \r\n         Microsoft::Terminal::Settings::Model::Theme Theme();\r\n \r\n-        // -------------------------------- WinRT Events ---------------------------------\r\n-        // PropertyChanged is surprisingly not a typed event, so we'll define that one manually.\r\n-        // Usually we'd just do\r\n-        //    WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);\r\n-        //\r\n-        // But what we're doing here is exposing the Page's PropertyChanged _as\r\n-        // our own event_. It's a FORWARDED_CALLBACK, essentially.\r\n-        winrt::event_token PropertyChanged(Windows::UI::Xaml::Data::PropertyChangedEventHandler const& handler) { return _root->PropertyChanged(handler); }\r\n-        void PropertyChanged(winrt::event_token const& token) { _root->PropertyChanged(token); }\r\n+        TerminalApp::TerminalWindow CreateNewWindow();\r\n \r\n-        TYPED_EVENT(RequestedThemeChanged, winrt::Windows::Foundation::IInspectable, winrt::Microsoft::Terminal::Settings::Model::Theme);\r\n-        TYPED_EVENT(SettingsChanged, winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable);\r\n-        TYPED_EVENT(SystemMenuChangeRequested, winrt::Windows::Foundation::IInspectable, winrt::TerminalApp::SystemMenuChangeArgs);\r\n+        TYPED_EVENT(SettingsChanged, winrt::Windows::Foundation::IInspectable, winrt::TerminalApp::SettingsLoadEventArgs);\r\n \r\n     private:\r\n         bool _isUwp{ false };\r\n         bool _isElevated{ false };\r\n \r\n-        // If you add controls here, but forget to null them either here or in\r\n-        // the ctor, you're going to have a bad time. It'll mysteriously fail to\r\n-        // activate the AppLogic.\r\n-        // ALSO: If you add any UIElements as roots here, make sure they're\r\n-        // updated in _ApplyTheme. The root currently is _root.\r\n-        winrt::com_ptr<TerminalPage> _root{ nullptr };\r\n         Microsoft::Terminal::Settings::Model::CascadiaSettings _settings{ nullptr };\r\n \r\n         winrt::hstring _settingsLoadExceptionText;\r\n         HRESULT _settingsLoadedResult = S_OK;\r\n         bool _loadedInitialSettings = false;\r\n \r\n-        uint64_t _numOpenWindows{ 0 };\r\n-\r\n-        std::shared_mutex _dialogLock;\r\n-        winrt::Windows::UI::Xaml::Controls::ContentDialog _dialog;\r\n-\r\n-        ::TerminalApp::AppCommandlineArgs _appArgs;\r\n+        bool _hasSettingsStartupActions{ false };\r\n         ::TerminalApp::AppCommandlineArgs _settingsAppArgs;\r\n \r\n         std::shared_ptr<ThrottledFuncTrailing<>> _reloadSettings;\r\n         til::throttled_func_trailing<> _reloadState;\r\n \r\n+        winrt::Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings> _warnings{ winrt::multi_threaded_vector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>() };",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1113338128",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 14825,
        "pr_file": "src/cascadia/TerminalApp/AppLogic.h",
        "discussion_id": "1113338128",
        "commented_code": "@@ -56,124 +46,47 @@ namespace winrt::TerminalApp::implementation\n         AppLogic();\r\n         ~AppLogic() = default;\r\n \r\n-        STDMETHODIMP Initialize(HWND hwnd);\r\n-\r\n         void Create();\r\n         bool IsUwp() const noexcept;\r\n         void RunAsUwp();\r\n         bool IsElevated() const noexcept;\r\n         void ReloadSettings();\r\n \r\n-        [[nodiscard]] Microsoft::Terminal::Settings::Model::CascadiaSettings GetSettings() const noexcept;\r\n+        bool HasSettingsStartupActions() const noexcept;\r\n \r\n-        void Quit();\r\n+        bool ShouldUsePersistedLayout() const;\r\n+        void SaveWindowLayoutJsons(const Windows::Foundation::Collections::IVector<hstring>& layouts);\r\n+\r\n+        [[nodiscard]] Microsoft::Terminal::Settings::Model::CascadiaSettings GetSettings() const noexcept;\r\n \r\n-        bool HasCommandlineArguments() const noexcept;\r\n-        bool HasSettingsStartupActions() const noexcept;\r\n-        int32_t SetStartupCommandline(array_view<const winrt::hstring> actions);\r\n-        int32_t ExecuteCommandline(array_view<const winrt::hstring> actions, const winrt::hstring& cwd);\r\n         TerminalApp::FindTargetWindowResult FindTargetWindow(array_view<const winrt::hstring> actions);\r\n-        winrt::hstring ParseCommandlineMessage();\r\n-        bool ShouldExitEarly();\r\n-\r\n-        bool FocusMode() const;\r\n-        bool Fullscreen() const;\r\n-        void Maximized(bool newMaximized);\r\n-        bool AlwaysOnTop() const;\r\n-        bool AutoHideWindow();\r\n-\r\n-        bool ShouldUsePersistedLayout();\r\n-        bool ShouldImmediatelyHandoffToElevated();\r\n-        void HandoffToElevated();\r\n-        hstring GetWindowLayoutJson(Microsoft::Terminal::Settings::Model::LaunchPosition position);\r\n-        void SaveWindowLayoutJsons(const Windows::Foundation::Collections::IVector<hstring>& layouts);\r\n-        void IdentifyWindow();\r\n-        void RenameFailed();\r\n-        winrt::hstring WindowName();\r\n-        void WindowName(const winrt::hstring& name);\r\n-        uint64_t WindowId();\r\n-        void WindowId(const uint64_t& id);\r\n-        void SetPersistedLayoutIdx(const uint32_t idx);\r\n-        void SetNumberOfOpenWindows(const uint64_t num);\r\n-        bool IsQuakeWindow() const noexcept;\r\n-        void RequestExitFullscreen();\r\n-\r\n-        Windows::Foundation::Size GetLaunchDimensions(uint32_t dpi);\r\n-        bool CenterOnLaunch();\r\n-        TerminalApp::InitialPosition GetInitialPosition(int64_t defaultInitialX, int64_t defaultInitialY);\r\n-        winrt::Windows::UI::Xaml::ElementTheme GetRequestedTheme();\r\n-        Microsoft::Terminal::Settings::Model::LaunchMode GetLaunchMode();\r\n-        bool GetShowTabsInTitlebar();\r\n-        bool GetInitialAlwaysOnTop();\r\n-        float CalcSnappedDimension(const bool widthOrHeight, const float dimension) const;\r\n-\r\n-        Windows::UI::Xaml::UIElement GetRoot() noexcept;\r\n-\r\n-        void SetInboundListener();\r\n-\r\n-        hstring Title();\r\n-        void TitlebarClicked();\r\n-        bool OnDirectKeyEvent(const uint32_t vkey, const uint8_t scanCode, const bool down);\r\n-\r\n-        void CloseWindow(Microsoft::Terminal::Settings::Model::LaunchPosition position);\r\n-        void WindowVisibilityChanged(const bool showOrHide);\r\n-\r\n-        winrt::TerminalApp::TaskbarState TaskbarState();\r\n-        winrt::Windows::UI::Xaml::Media::Brush TitlebarBrush();\r\n-        void WindowActivated(const bool activated);\r\n-\r\n-        bool GetMinimizeToNotificationArea();\r\n-        bool GetAlwaysShowNotificationIcon();\r\n-        bool GetShowTitleInTitlebar();\r\n-\r\n-        winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::UI::Xaml::Controls::ContentDialogResult> ShowDialog(winrt::Windows::UI::Xaml::Controls::ContentDialog dialog);\r\n-        void DismissDialog();\r\n \r\n         Windows::Foundation::Collections::IMapView<Microsoft::Terminal::Control::KeyChord, Microsoft::Terminal::Settings::Model::Command> GlobalHotkeys();\r\n \r\n         Microsoft::Terminal::Settings::Model::Theme Theme();\r\n \r\n-        // -------------------------------- WinRT Events ---------------------------------\r\n-        // PropertyChanged is surprisingly not a typed event, so we'll define that one manually.\r\n-        // Usually we'd just do\r\n-        //    WINRT_CALLBACK(PropertyChanged, Windows::UI::Xaml::Data::PropertyChangedEventHandler);\r\n-        //\r\n-        // But what we're doing here is exposing the Page's PropertyChanged _as\r\n-        // our own event_. It's a FORWARDED_CALLBACK, essentially.\r\n-        winrt::event_token PropertyChanged(Windows::UI::Xaml::Data::PropertyChangedEventHandler const& handler) { return _root->PropertyChanged(handler); }\r\n-        void PropertyChanged(winrt::event_token const& token) { _root->PropertyChanged(token); }\r\n+        TerminalApp::TerminalWindow CreateNewWindow();\r\n \r\n-        TYPED_EVENT(RequestedThemeChanged, winrt::Windows::Foundation::IInspectable, winrt::Microsoft::Terminal::Settings::Model::Theme);\r\n-        TYPED_EVENT(SettingsChanged, winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable);\r\n-        TYPED_EVENT(SystemMenuChangeRequested, winrt::Windows::Foundation::IInspectable, winrt::TerminalApp::SystemMenuChangeArgs);\r\n+        TYPED_EVENT(SettingsChanged, winrt::Windows::Foundation::IInspectable, winrt::TerminalApp::SettingsLoadEventArgs);\r\n \r\n     private:\r\n         bool _isUwp{ false };\r\n         bool _isElevated{ false };\r\n \r\n-        // If you add controls here, but forget to null them either here or in\r\n-        // the ctor, you're going to have a bad time. It'll mysteriously fail to\r\n-        // activate the AppLogic.\r\n-        // ALSO: If you add any UIElements as roots here, make sure they're\r\n-        // updated in _ApplyTheme. The root currently is _root.\r\n-        winrt::com_ptr<TerminalPage> _root{ nullptr };\r\n         Microsoft::Terminal::Settings::Model::CascadiaSettings _settings{ nullptr };\r\n \r\n         winrt::hstring _settingsLoadExceptionText;\r\n         HRESULT _settingsLoadedResult = S_OK;\r\n         bool _loadedInitialSettings = false;\r\n \r\n-        uint64_t _numOpenWindows{ 0 };\r\n-\r\n-        std::shared_mutex _dialogLock;\r\n-        winrt::Windows::UI::Xaml::Controls::ContentDialog _dialog;\r\n-\r\n-        ::TerminalApp::AppCommandlineArgs _appArgs;\r\n+        bool _hasSettingsStartupActions{ false };\r\n         ::TerminalApp::AppCommandlineArgs _settingsAppArgs;\r\n \r\n         std::shared_ptr<ThrottledFuncTrailing<>> _reloadSettings;\r\n         til::throttled_func_trailing<> _reloadState;\r\n \r\n+        winrt::Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings> _warnings{ winrt::multi_threaded_vector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>() };\r",
        "comment_created_at": "2023-02-21T16:58:51+00:00",
        "comment_author": "lhecker",
        "comment_body": "You should avoid using the WinRT collection types. `IVector` is basically like using a linked list, performance wise. Instead, as far as I can tell, you can just wrap it into a `winrt::multi_threaded_vector` whenever its actually needed. You can avoid making a copy of `_warnings` by using `std::move`, since `_warnings` is only read exactly once anyways, after a settings reload.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1131180557",
    "pr_number": 14825,
    "pr_file": "src/cascadia/TerminalApp/SettingsLoadEventArgs.h",
    "created_at": "2023-03-09T15:16:20+00:00",
    "commented_code": "+// Copyright (c) Microsoft Corporation.\r\n+// Licensed under the MIT license.\r\n+\r\n+#pragma once\r\n+\r\n+#include \"SettingsLoadEventArgs.g.h\"\r\n+#include <inc/cppwinrt_utils.h>\r\n+namespace winrt::TerminalApp::implementation\r\n+{\r\n+    struct SettingsLoadEventArgs : SettingsLoadEventArgsT<SettingsLoadEventArgs>\r\n+    {\r\n+        WINRT_PROPERTY(bool, Reload, false);\r\n+        WINRT_PROPERTY(uint64_t, Result, S_OK);\r\n+        WINRT_PROPERTY(winrt::hstring, ExceptionText, L\"\");\r\n+        WINRT_PROPERTY(winrt::Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>, Warnings, nullptr);\r\n+        WINRT_PROPERTY(Microsoft::Terminal::Settings::Model::CascadiaSettings, NewSettings, nullptr);\r\n+\r\n+    public:\r\n+        SettingsLoadEventArgs(bool reload,\r\n+                              uint64_t result,\r\n+                              const winrt::hstring& exceptionText,\r\n+                              const winrt::Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>& warnings,\r\n+                              const Microsoft::Terminal::Settings::Model::CascadiaSettings& newSettings) :\r\n+            _Reload{ reload },\r\n+            _Result{ result },\r\n+            _ExceptionText{ exceptionText },\r\n+            _Warnings{ warnings },\r\n+            _NewSettings{ newSettings } {};",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1131180557",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 14825,
        "pr_file": "src/cascadia/TerminalApp/SettingsLoadEventArgs.h",
        "discussion_id": "1131180557",
        "commented_code": "@@ -0,0 +1,30 @@\n+// Copyright (c) Microsoft Corporation.\r\n+// Licensed under the MIT license.\r\n+\r\n+#pragma once\r\n+\r\n+#include \"SettingsLoadEventArgs.g.h\"\r\n+#include <inc/cppwinrt_utils.h>\r\n+namespace winrt::TerminalApp::implementation\r\n+{\r\n+    struct SettingsLoadEventArgs : SettingsLoadEventArgsT<SettingsLoadEventArgs>\r\n+    {\r\n+        WINRT_PROPERTY(bool, Reload, false);\r\n+        WINRT_PROPERTY(uint64_t, Result, S_OK);\r\n+        WINRT_PROPERTY(winrt::hstring, ExceptionText, L\"\");\r\n+        WINRT_PROPERTY(winrt::Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>, Warnings, nullptr);\r\n+        WINRT_PROPERTY(Microsoft::Terminal::Settings::Model::CascadiaSettings, NewSettings, nullptr);\r\n+\r\n+    public:\r\n+        SettingsLoadEventArgs(bool reload,\r\n+                              uint64_t result,\r\n+                              const winrt::hstring& exceptionText,\r\n+                              const winrt::Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>& warnings,\r\n+                              const Microsoft::Terminal::Settings::Model::CascadiaSettings& newSettings) :\r\n+            _Reload{ reload },\r\n+            _Result{ result },\r\n+            _ExceptionText{ exceptionText },\r\n+            _Warnings{ warnings },\r\n+            _NewSettings{ newSettings } {};\r",
        "comment_created_at": "2023-03-09T15:16:20+00:00",
        "comment_author": "DHowett",
        "comment_body": "nit: in general for the winrt typed properties you can save an `AddRef`/`Release` on each one by taking them in as `T` instead of `const T&`, and then using `std::move` when you assign them to members.\r\n\r\nto wit:\r\n\r\n```c++\r\nConstructor(IVector foo): _foo{std::move(foo)} {}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1131300743",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 14825,
        "pr_file": "src/cascadia/TerminalApp/SettingsLoadEventArgs.h",
        "discussion_id": "1131180557",
        "commented_code": "@@ -0,0 +1,30 @@\n+// Copyright (c) Microsoft Corporation.\r\n+// Licensed under the MIT license.\r\n+\r\n+#pragma once\r\n+\r\n+#include \"SettingsLoadEventArgs.g.h\"\r\n+#include <inc/cppwinrt_utils.h>\r\n+namespace winrt::TerminalApp::implementation\r\n+{\r\n+    struct SettingsLoadEventArgs : SettingsLoadEventArgsT<SettingsLoadEventArgs>\r\n+    {\r\n+        WINRT_PROPERTY(bool, Reload, false);\r\n+        WINRT_PROPERTY(uint64_t, Result, S_OK);\r\n+        WINRT_PROPERTY(winrt::hstring, ExceptionText, L\"\");\r\n+        WINRT_PROPERTY(winrt::Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>, Warnings, nullptr);\r\n+        WINRT_PROPERTY(Microsoft::Terminal::Settings::Model::CascadiaSettings, NewSettings, nullptr);\r\n+\r\n+    public:\r\n+        SettingsLoadEventArgs(bool reload,\r\n+                              uint64_t result,\r\n+                              const winrt::hstring& exceptionText,\r\n+                              const winrt::Windows::Foundation::Collections::IVector<Microsoft::Terminal::Settings::Model::SettingsLoadWarnings>& warnings,\r\n+                              const Microsoft::Terminal::Settings::Model::CascadiaSettings& newSettings) :\r\n+            _Reload{ reload },\r\n+            _Result{ result },\r\n+            _ExceptionText{ exceptionText },\r\n+            _Warnings{ warnings },\r\n+            _NewSettings{ newSettings } {};\r",
        "comment_created_at": "2023-03-09T16:38:17+00:00",
        "comment_author": "zadjii-msft",
        "comment_body": "TIL",
        "pr_file_module": null
      }
    ]
  }
]