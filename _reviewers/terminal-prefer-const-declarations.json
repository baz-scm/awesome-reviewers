[
  {
    "discussion_id": "2124719054",
    "pr_number": 18953,
    "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
    "created_at": "2025-06-03T19:18:56+00:00",
    "commented_code": "}\n \n         const auto theme = _settings.GlobalSettings().CurrentTheme();\n+        auto paneActiveBorderColor = theme.Pane() ? theme.Pane().ActiveBorderColor() : nullptr;\n+        auto paneInactiveBorderColor = theme.Pane() ? theme.Pane().InactiveBorderColor() : nullptr;\n+        auto broadcastBorderColor = theme.Pane() ? theme.Pane().BroadcastBorderColor() : nullptr;",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2124719054",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18953,
        "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
        "discussion_id": "2124719054",
        "commented_code": "@@ -4689,10 +4689,13 @@ namespace winrt::TerminalApp::implementation\n         }\n \n         const auto theme = _settings.GlobalSettings().CurrentTheme();\n+        auto paneActiveBorderColor = theme.Pane() ? theme.Pane().ActiveBorderColor() : nullptr;\n+        auto paneInactiveBorderColor = theme.Pane() ? theme.Pane().InactiveBorderColor() : nullptr;\n+        auto broadcastBorderColor = theme.Pane() ? theme.Pane().BroadcastBorderColor() : nullptr;",
        "comment_created_at": "2025-06-03T19:18:56+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "```suggestion\r\n        const auto paneActiveBorderColor = theme.Pane() ? theme.Pane().ActiveBorderColor() : nullptr;\r\n        const auto paneInactiveBorderColor = theme.Pane() ? theme.Pane().InactiveBorderColor() : nullptr;\r\n        const auto broadcastBorderColor = theme.Pane() ? theme.Pane().BroadcastBorderColor() : nullptr;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2124721154",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18953,
        "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
        "discussion_id": "2124719054",
        "commented_code": "@@ -4689,10 +4689,13 @@ namespace winrt::TerminalApp::implementation\n         }\n \n         const auto theme = _settings.GlobalSettings().CurrentTheme();\n+        auto paneActiveBorderColor = theme.Pane() ? theme.Pane().ActiveBorderColor() : nullptr;\n+        auto paneInactiveBorderColor = theme.Pane() ? theme.Pane().InactiveBorderColor() : nullptr;\n+        auto broadcastBorderColor = theme.Pane() ? theme.Pane().BroadcastBorderColor() : nullptr;",
        "comment_created_at": "2025-06-03T19:19:42+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "Looks like you're able to set `requestedTheme` to `const` as well, if you wanna do that while you're here.",
        "pr_file_module": null
      },
      {
        "comment_id": "2125633351",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18953,
        "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
        "discussion_id": "2124719054",
        "commented_code": "@@ -4689,10 +4689,13 @@ namespace winrt::TerminalApp::implementation\n         }\n \n         const auto theme = _settings.GlobalSettings().CurrentTheme();\n+        auto paneActiveBorderColor = theme.Pane() ? theme.Pane().ActiveBorderColor() : nullptr;\n+        auto paneInactiveBorderColor = theme.Pane() ? theme.Pane().InactiveBorderColor() : nullptr;\n+        auto broadcastBorderColor = theme.Pane() ? theme.Pane().BroadcastBorderColor() : nullptr;",
        "comment_created_at": "2025-06-04T04:55:00+00:00",
        "comment_author": "Techypanda",
        "comment_body": "went back and refactored to add const where i could, these are being modified so cannot be const",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2205565742",
    "pr_number": 19130,
    "pr_file": "src/cascadia/TerminalApp/HighlightedTextControl.cpp",
    "created_at": "2025-07-14T18:34:16+00:00",
    "commented_code": "// Our control exposes a \"Text\" property to be used with Data Binding\n     // To allow this we need to register a Dependency Property Identifier to be used by the property system\n     // (https://docs.microsoft.com/en-us/windows/uwp/xaml-platform/custom-dependency-properties)\n-    DependencyProperty HighlightedTextControl::_textProperty = DependencyProperty::Register(\n-        L\"Text\",\n-        xaml_typename<winrt::TerminalApp::HighlightedText>(),\n-        xaml_typename<winrt::TerminalApp::HighlightedTextControl>(),\n-        PropertyMetadata(nullptr, HighlightedTextControl::_onTextChanged));\n+    DependencyProperty HighlightedTextControl::_TextProperty{ nullptr };\n+    DependencyProperty HighlightedTextControl::_HighlightedRunsProperty{ nullptr };\n+    DependencyProperty HighlightedTextControl::_TextBlockStyleProperty{ nullptr };\n+    DependencyProperty HighlightedTextControl::_HighlightedRunStyleProperty{ nullptr };\n \n     HighlightedTextControl::HighlightedTextControl()\n     {\n-        InitializeComponent();\n+        _InitializeProperties();\n     }\n \n-    // Method Description:\n-    // - Returns the Identifier of the \"Text\" dependency property\n-    DependencyProperty HighlightedTextControl::TextProperty()\n+    void HighlightedTextControl::_InitializeProperties()\n     {\n-        return _textProperty;\n+        static auto [[maybe_unused]] registered = [] {\n+            _TextProperty = DependencyProperty::Register(\n+                L\"Text\",\n+                xaml_typename<winrt::hstring>(),\n+                xaml_typename<winrt::TerminalApp::HighlightedTextControl>(),\n+                PropertyMetadata(nullptr, HighlightedTextControl::_onPropertyChanged));\n+\n+            _HighlightedRunsProperty = DependencyProperty::Register(\n+                L\"HighlightedRuns\",\n+                xaml_typename<winrt::Windows::Foundation::Collections::IVector<winrt::TerminalApp::HighlightedRun>>(),\n+                xaml_typename<winrt::TerminalApp::HighlightedTextControl>(),\n+                PropertyMetadata(nullptr, HighlightedTextControl::_onPropertyChanged));\n+\n+            _TextBlockStyleProperty = DependencyProperty::Register(\n+                L\"TextBlockStyle\",\n+                xaml_typename<winrt::Windows::UI::Xaml::Style>(),\n+                xaml_typename<winrt::TerminalApp::HighlightedTextControl>(),\n+                PropertyMetadata{ nullptr });\n+\n+            _HighlightedRunStyleProperty = DependencyProperty::Register(\n+                L\"HighlightedRunStyle\",\n+                xaml_typename<winrt::Windows::UI::Xaml::Style>(),\n+                xaml_typename<winrt::TerminalApp::HighlightedTextControl>(),\n+                PropertyMetadata(nullptr, HighlightedTextControl::_onPropertyChanged));\n+\n+            return true;\n+        }();\n     }\n \n-    // Method Description:\n-    // - Returns the TextBlock view used to render the highlighted text\n-    // Can be used when the Text property change is triggered by the event system to update the view\n-    // We need to expose it rather than simply bind a data source because we update the runs in code-behind\n-    Controls::TextBlock HighlightedTextControl::TextView()\n+    void HighlightedTextControl::_onPropertyChanged(const DependencyObject& o, const DependencyPropertyChangedEventArgs& /*e*/)\n     {\n-        return _textView();\n+        const auto control = o.try_as<winrt::TerminalApp::HighlightedTextControl>();\n+        if (control)\n+        {\n+            winrt::get_self<HighlightedTextControl>(control)->_updateTextAndStyle();\n+        }\n     }\n \n-    winrt::TerminalApp::HighlightedText HighlightedTextControl::Text()\n+    void HighlightedTextControl::OnApplyTemplate()\n     {\n-        return winrt::unbox_value<winrt::TerminalApp::HighlightedText>(GetValue(_textProperty));\n+        _updateTextAndStyle();\n     }\n \n-    void HighlightedTextControl::Text(const winrt::TerminalApp::HighlightedText& value)\n+    static void _applyStyleToObject(const winrt::Windows::UI::Xaml::Style& style, const winrt::Windows::UI::Xaml::DependencyObject& object)\n     {\n-        SetValue(_textProperty, winrt::box_value(value));\n+        if (!style)\n+        {\n+            return;\n+        }\n+\n+        static const auto fontWeightProperty{ winrt::Windows::UI::Xaml::Documents::TextElement::FontWeightProperty() };\n+\n+        const auto setters{ style.Setters() };\n+        for (auto&& setterBase : setters)\n+        {\n+            auto setter = setterBase.as<winrt::Windows::UI::Xaml::Setter>();\n+            auto property = setter.Property();\n+            auto value = setter.Value();",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2205565742",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 19130,
        "pr_file": "src/cascadia/TerminalApp/HighlightedTextControl.cpp",
        "discussion_id": "2205565742",
        "commented_code": "@@ -22,70 +22,150 @@ namespace winrt::TerminalApp::implementation\n     // Our control exposes a \"Text\" property to be used with Data Binding\n     // To allow this we need to register a Dependency Property Identifier to be used by the property system\n     // (https://docs.microsoft.com/en-us/windows/uwp/xaml-platform/custom-dependency-properties)\n-    DependencyProperty HighlightedTextControl::_textProperty = DependencyProperty::Register(\n-        L\"Text\",\n-        xaml_typename<winrt::TerminalApp::HighlightedText>(),\n-        xaml_typename<winrt::TerminalApp::HighlightedTextControl>(),\n-        PropertyMetadata(nullptr, HighlightedTextControl::_onTextChanged));\n+    DependencyProperty HighlightedTextControl::_TextProperty{ nullptr };\n+    DependencyProperty HighlightedTextControl::_HighlightedRunsProperty{ nullptr };\n+    DependencyProperty HighlightedTextControl::_TextBlockStyleProperty{ nullptr };\n+    DependencyProperty HighlightedTextControl::_HighlightedRunStyleProperty{ nullptr };\n \n     HighlightedTextControl::HighlightedTextControl()\n     {\n-        InitializeComponent();\n+        _InitializeProperties();\n     }\n \n-    // Method Description:\n-    // - Returns the Identifier of the \"Text\" dependency property\n-    DependencyProperty HighlightedTextControl::TextProperty()\n+    void HighlightedTextControl::_InitializeProperties()\n     {\n-        return _textProperty;\n+        static auto [[maybe_unused]] registered = [] {\n+            _TextProperty = DependencyProperty::Register(\n+                L\"Text\",\n+                xaml_typename<winrt::hstring>(),\n+                xaml_typename<winrt::TerminalApp::HighlightedTextControl>(),\n+                PropertyMetadata(nullptr, HighlightedTextControl::_onPropertyChanged));\n+\n+            _HighlightedRunsProperty = DependencyProperty::Register(\n+                L\"HighlightedRuns\",\n+                xaml_typename<winrt::Windows::Foundation::Collections::IVector<winrt::TerminalApp::HighlightedRun>>(),\n+                xaml_typename<winrt::TerminalApp::HighlightedTextControl>(),\n+                PropertyMetadata(nullptr, HighlightedTextControl::_onPropertyChanged));\n+\n+            _TextBlockStyleProperty = DependencyProperty::Register(\n+                L\"TextBlockStyle\",\n+                xaml_typename<winrt::Windows::UI::Xaml::Style>(),\n+                xaml_typename<winrt::TerminalApp::HighlightedTextControl>(),\n+                PropertyMetadata{ nullptr });\n+\n+            _HighlightedRunStyleProperty = DependencyProperty::Register(\n+                L\"HighlightedRunStyle\",\n+                xaml_typename<winrt::Windows::UI::Xaml::Style>(),\n+                xaml_typename<winrt::TerminalApp::HighlightedTextControl>(),\n+                PropertyMetadata(nullptr, HighlightedTextControl::_onPropertyChanged));\n+\n+            return true;\n+        }();\n     }\n \n-    // Method Description:\n-    // - Returns the TextBlock view used to render the highlighted text\n-    // Can be used when the Text property change is triggered by the event system to update the view\n-    // We need to expose it rather than simply bind a data source because we update the runs in code-behind\n-    Controls::TextBlock HighlightedTextControl::TextView()\n+    void HighlightedTextControl::_onPropertyChanged(const DependencyObject& o, const DependencyPropertyChangedEventArgs& /*e*/)\n     {\n-        return _textView();\n+        const auto control = o.try_as<winrt::TerminalApp::HighlightedTextControl>();\n+        if (control)\n+        {\n+            winrt::get_self<HighlightedTextControl>(control)->_updateTextAndStyle();\n+        }\n     }\n \n-    winrt::TerminalApp::HighlightedText HighlightedTextControl::Text()\n+    void HighlightedTextControl::OnApplyTemplate()\n     {\n-        return winrt::unbox_value<winrt::TerminalApp::HighlightedText>(GetValue(_textProperty));\n+        _updateTextAndStyle();\n     }\n \n-    void HighlightedTextControl::Text(const winrt::TerminalApp::HighlightedText& value)\n+    static void _applyStyleToObject(const winrt::Windows::UI::Xaml::Style& style, const winrt::Windows::UI::Xaml::DependencyObject& object)\n     {\n-        SetValue(_textProperty, winrt::box_value(value));\n+        if (!style)\n+        {\n+            return;\n+        }\n+\n+        static const auto fontWeightProperty{ winrt::Windows::UI::Xaml::Documents::TextElement::FontWeightProperty() };\n+\n+        const auto setters{ style.Setters() };\n+        for (auto&& setterBase : setters)\n+        {\n+            auto setter = setterBase.as<winrt::Windows::UI::Xaml::Setter>();\n+            auto property = setter.Property();\n+            auto value = setter.Value();",
        "comment_created_at": "2025-07-14T18:34:16+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "```suggestion\r\n            const auto setter = setterBase.as<winrt::Windows::UI::Xaml::Setter>();\r\n            const auto property = setter.Property();\r\n            auto value = setter.Value();\r\n```\r\nLooks like you may be able to set these two as `const`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1139439442",
    "pr_number": 14825,
    "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
    "created_at": "2023-03-16T23:03:25+00:00",
    "commented_code": "namespace winrt::TerminalApp::implementation\n {\n-    TerminalPage::TerminalPage() :\n+    TerminalPage::TerminalPage(TerminalApp::WindowProperties properties) :",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1139439442",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 14825,
        "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
        "discussion_id": "1139439442",
        "commented_code": "@@ -51,13 +52,16 @@ namespace winrt\n \n namespace winrt::TerminalApp::implementation\n {\n-    TerminalPage::TerminalPage() :\n+    TerminalPage::TerminalPage(TerminalApp::WindowProperties properties) :",
        "comment_created_at": "2023-03-16T23:03:25+00:00",
        "comment_author": "DHowett",
        "comment_body": "nit: this is a copy/addref/release. either move from it or make it a const ref.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082591842",
    "pr_number": 18888,
    "pr_file": "src/cascadia/TerminalSettingsEditor/ProfileViewModel.cpp",
    "created_at": "2025-05-09T22:56:29+00:00",
    "commented_code": "return _currentIconType == _IconTypes.GetAt(3);\r\n     }\r\n \r\n+    hstring ProfileViewModel::BellStylePreview() const\r\n+    {\r\n+        const auto bellStyle = BellStyle();\r\n+        const bool isAudibleSet = WI_IsFlagSet(bellStyle, BellStyle::Audible);\r\n+        const bool isWindowSet = WI_IsFlagSet(bellStyle, BellStyle::Window);\r\n+        const bool isTaskbarSet = WI_IsFlagSet(bellStyle, BellStyle::Taskbar);\r\n+        if (bellStyle == Model::BellStyle::All || (isAudibleSet && isWindowSet && isTaskbarSet))\r\n+        {\r\n+            return RS_(L\"Profile_BellStyleAll/Content\");\r\n+        }\r\n+        else if (bellStyle == static_cast<Model::BellStyle>(0))\r\n+        {\r\n+            return RS_(L\"Profile_BellStyleNone/Content\");\r\n+        }\r\n+\r\n+        std::vector<hstring> resultList;\r\n+        resultList.reserve(3);\r\n+        if (isAudibleSet)",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2082591842",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18888,
        "pr_file": "src/cascadia/TerminalSettingsEditor/ProfileViewModel.cpp",
        "discussion_id": "2082591842",
        "commented_code": "@@ -613,6 +630,52 @@ namespace winrt::Microsoft::Terminal::Settings::Editor::implementation\n         return _currentIconType == _IconTypes.GetAt(3);\r\n     }\r\n \r\n+    hstring ProfileViewModel::BellStylePreview() const\r\n+    {\r\n+        const auto bellStyle = BellStyle();\r\n+        const bool isAudibleSet = WI_IsFlagSet(bellStyle, BellStyle::Audible);\r\n+        const bool isWindowSet = WI_IsFlagSet(bellStyle, BellStyle::Window);\r\n+        const bool isTaskbarSet = WI_IsFlagSet(bellStyle, BellStyle::Taskbar);\r\n+        if (bellStyle == Model::BellStyle::All || (isAudibleSet && isWindowSet && isTaskbarSet))\r\n+        {\r\n+            return RS_(L\"Profile_BellStyleAll/Content\");\r\n+        }\r\n+        else if (bellStyle == static_cast<Model::BellStyle>(0))\r\n+        {\r\n+            return RS_(L\"Profile_BellStyleNone/Content\");\r\n+        }\r\n+\r\n+        std::vector<hstring> resultList;\r\n+        resultList.reserve(3);\r\n+        if (isAudibleSet)\r",
        "comment_created_at": "2025-05-09T22:56:29+00:00",
        "comment_author": "DHowett",
        "comment_body": "replace all these with\n\n\n```suggestion\n        if (WI_IsFlagSet(bellStyle, BellStyle::Audible))\n```\n\nand get rid of the temporary booleans. :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1968090687",
    "pr_number": 18620,
    "pr_file": "src/cascadia/TerminalApp/TabManagement.cpp",
    "created_at": "2025-02-24T17:21:17+00:00",
    "commented_code": "if (_tabPointerMiddleButtonPressed && !eventArgs.GetCurrentPoint(nullptr).Properties().IsMiddleButtonPressed())\r\n         {\r\n             _tabPointerMiddleButtonPressed = false;\r\n-            if (const auto tabViewItem{ sender.try_as<MUX::Controls::TabViewItem>() })\r\n+            if (auto tabViewItem = sender.try_as<MUX::Controls::TabViewItem>())",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1968090687",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18620,
        "pr_file": "src/cascadia/TerminalApp/TabManagement.cpp",
        "discussion_id": "1968090687",
        "commented_code": "@@ -903,19 +905,39 @@ namespace winrt::TerminalApp::implementation\n         if (_tabPointerMiddleButtonPressed && !eventArgs.GetCurrentPoint(nullptr).Properties().IsMiddleButtonPressed())\r\n         {\r\n             _tabPointerMiddleButtonPressed = false;\r\n-            if (const auto tabViewItem{ sender.try_as<MUX::Controls::TabViewItem>() })\r\n+            if (auto tabViewItem = sender.try_as<MUX::Controls::TabViewItem>())\r",
        "comment_created_at": "2025-02-24T17:21:17+00:00",
        "comment_author": "DHowett",
        "comment_body": "why the syntax change? was the previous one wrong?",
        "pr_file_module": null
      },
      {
        "comment_id": "1968138600",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18620,
        "pr_file": "src/cascadia/TerminalApp/TabManagement.cpp",
        "discussion_id": "1968090687",
        "commented_code": "@@ -903,19 +905,39 @@ namespace winrt::TerminalApp::implementation\n         if (_tabPointerMiddleButtonPressed && !eventArgs.GetCurrentPoint(nullptr).Properties().IsMiddleButtonPressed())\r\n         {\r\n             _tabPointerMiddleButtonPressed = false;\r\n-            if (const auto tabViewItem{ sender.try_as<MUX::Controls::TabViewItem>() })\r\n+            if (auto tabViewItem = sender.try_as<MUX::Controls::TabViewItem>())\r",
        "comment_created_at": "2025-02-24T17:55:16+00:00",
        "comment_author": "lhecker",
        "comment_body": "I believe we're alone in our usage of the `auto foo{ ... }` syntax. Not even the C++ Core Guidelines use it: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-auto\r\nAs you know, the brace-initializer syntax is historically overladen and rather brittle, so I see people recommend using it only for constructing explicitly named types, and I concur. In fact, since ~C++20 it's actually been going back from there with the consortium's trend towards \"we can be like Rust if we have static analyzers\", hence members recommending even things like `int foo = bar()`, despite the risk for unintentional narrowing.",
        "pr_file_module": null
      }
    ]
  }
]