[
  {
    "discussion_id": "1788386738",
    "pr_number": 17945,
    "pr_file": "src/terminal/adapter/adaptDispatch.cpp",
    "created_at": "2024-10-04T22:26:17+00:00",
    "commented_code": "};\n }\n \n+void AdaptDispatch::_ReturnCsiResponse(const std::wstring_view response) const\n+{\n+    const auto csi = _terminalInput.GetInputMode(TerminalInput::Mode::SendC1) ? L\"\\x9B\" : L\"\\x1B[\";\n+    _api.ReturnResponse(fmt::format(FMT_COMPILE(L\"{}{}\"), csi, response));\n+}\n+\n+void AdaptDispatch::_ReturnDcsResponse(const std::wstring_view response) const\n+{\n+    const auto dcs = _terminalInput.GetInputMode(TerminalInput::Mode::SendC1) ? L\"\\x90\" : L\"\\x1BP\";\n+    const auto st = _terminalInput.GetInputMode(TerminalInput::Mode::SendC1) ? L\"\\x9C\" : L\"\\x1B\\\\\";\n+    _api.ReturnResponse(fmt::format(FMT_COMPILE(L\"{}{}{}\"), dcs, response, st));\n+}\n+\n+void AdaptDispatch::_ReturnOscResponse(const std::wstring_view response) const",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1788386738",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 17945,
        "pr_file": "src/terminal/adapter/adaptDispatch.cpp",
        "discussion_id": "1788386738",
        "commented_code": "@@ -4685,6 +4682,26 @@ ITermDispatch::StringHandler AdaptDispatch::_RestoreTabStops()\n     };\n }\n \n+void AdaptDispatch::_ReturnCsiResponse(const std::wstring_view response) const\n+{\n+    const auto csi = _terminalInput.GetInputMode(TerminalInput::Mode::SendC1) ? L\"\\x9B\" : L\"\\x1B[\";\n+    _api.ReturnResponse(fmt::format(FMT_COMPILE(L\"{}{}\"), csi, response));\n+}\n+\n+void AdaptDispatch::_ReturnDcsResponse(const std::wstring_view response) const\n+{\n+    const auto dcs = _terminalInput.GetInputMode(TerminalInput::Mode::SendC1) ? L\"\\x90\" : L\"\\x1BP\";\n+    const auto st = _terminalInput.GetInputMode(TerminalInput::Mode::SendC1) ? L\"\\x9C\" : L\"\\x1B\\\\\";\n+    _api.ReturnResponse(fmt::format(FMT_COMPILE(L\"{}{}{}\"), dcs, response, st));\n+}\n+\n+void AdaptDispatch::_ReturnOscResponse(const std::wstring_view response) const",
        "comment_created_at": "2024-10-04T22:26:17+00:00",
        "comment_author": "DHowett",
        "comment_body": "Thought: Xterm specifies that OSC responses are returned with the same terminator (`ST` or `BEL`) as the request that generated them. I suppose having this function affords us a much easier way to find/fix all occurrences of us being out of spec :)\r\n\r\n>         XTerm accepts either BEL  or ST  for terminating OSC\r\n>         sequences, and when returning information, uses the same\r\n>         terminator used in a query.  While the latter is preferred,\r\n>         the former is supported for legacy applications:\r\n>         o   Although documented in the changes for X.V10R4 (December\r\n>             1986), BEL  as a string terminator dates from X11R4\r\n>             (December 1989).\r\n>         o   Since XFree86-3.1.2Ee (August 1996), xterm has accepted ST\r\n>             (the documented string terminator in ECMA-48).\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1788461543",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 17945,
        "pr_file": "src/terminal/adapter/adaptDispatch.cpp",
        "discussion_id": "1788386738",
        "commented_code": "@@ -4685,6 +4682,26 @@ ITermDispatch::StringHandler AdaptDispatch::_RestoreTabStops()\n     };\n }\n \n+void AdaptDispatch::_ReturnCsiResponse(const std::wstring_view response) const\n+{\n+    const auto csi = _terminalInput.GetInputMode(TerminalInput::Mode::SendC1) ? L\"\\x9B\" : L\"\\x1B[\";\n+    _api.ReturnResponse(fmt::format(FMT_COMPILE(L\"{}{}\"), csi, response));\n+}\n+\n+void AdaptDispatch::_ReturnDcsResponse(const std::wstring_view response) const\n+{\n+    const auto dcs = _terminalInput.GetInputMode(TerminalInput::Mode::SendC1) ? L\"\\x90\" : L\"\\x1BP\";\n+    const auto st = _terminalInput.GetInputMode(TerminalInput::Mode::SendC1) ? L\"\\x9C\" : L\"\\x1B\\\\\";\n+    _api.ReturnResponse(fmt::format(FMT_COMPILE(L\"{}{}{}\"), dcs, response, st));\n+}\n+\n+void AdaptDispatch::_ReturnOscResponse(const std::wstring_view response) const",
        "comment_created_at": "2024-10-05T01:51:56+00:00",
        "comment_author": "j4james",
        "comment_body": "I really hate that `BEL` terminator, but you're right, we should be responding with `BEL` if the query was terminated with `BEL`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1737469052",
    "pr_number": 17829,
    "pr_file": "src/host/outputStream.cpp",
    "created_at": "2024-08-29T23:20:34+00:00",
    "commented_code": "// - <none>\r\n void ConhostInternalGetSet::ShowWindow(bool showOrHide)\r\n {\r\n-    auto& gci = ServiceLocator::LocateGlobals().getConsoleInformation();\r\n-    const auto hwnd = gci.IsInVtIoMode() ? ServiceLocator::LocatePseudoWindow() : ServiceLocator::LocateConsoleWindow()->GetWindowHandle();\r\n+    // ConPTY is supposed to be \"transparent\" to the VT application. Any VT it processes is given to the terminal.\r\n+    // As such, it must not react to this \"CSI 1 t\" or \"CSI 2 t\" sequence. That's the job of the terminal.\r\n+    // If the terminal encounters such a sequence, it can show/hide itself and let ConPTY know via its signal API.\r\n+    const auto window = ServiceLocator::LocateConsoleWindow();\r\n+    if (!window)\r\n+    {\r\n+        return;\r\n+    }",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1737469052",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 17829,
        "pr_file": "src/host/outputStream.cpp",
        "discussion_id": "1737469052",
        "commented_code": "@@ -208,15 +208,22 @@ CursorType ConhostInternalGetSet::GetUserDefaultCursorStyle() const\n // - <none>\r\n void ConhostInternalGetSet::ShowWindow(bool showOrHide)\r\n {\r\n-    auto& gci = ServiceLocator::LocateGlobals().getConsoleInformation();\r\n-    const auto hwnd = gci.IsInVtIoMode() ? ServiceLocator::LocatePseudoWindow() : ServiceLocator::LocateConsoleWindow()->GetWindowHandle();\r\n+    // ConPTY is supposed to be \"transparent\" to the VT application. Any VT it processes is given to the terminal.\r\n+    // As such, it must not react to this \"CSI 1 t\" or \"CSI 2 t\" sequence. That's the job of the terminal.\r\n+    // If the terminal encounters such a sequence, it can show/hide itself and let ConPTY know via its signal API.\r\n+    const auto window = ServiceLocator::LocateConsoleWindow();\r\n+    if (!window)\r\n+    {\r\n+        return;\r\n+    }\r",
        "comment_created_at": "2024-08-29T23:20:34+00:00",
        "comment_author": "lhecker",
        "comment_body": "* Avoid emitting another de-/iconify VT sequence when we encounter a (de)iconify VT sequence during parsing.",
        "pr_file_module": null
      }
    ]
  }
]