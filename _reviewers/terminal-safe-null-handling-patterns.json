[
  {
    "discussion_id": "2273708937",
    "pr_number": 18915,
    "pr_file": "src/cascadia/TerminalSettingsModel/ActionArgs.h",
    "created_at": "2025-08-13T14:47:35+00:00",
    "commented_code": "h.write(SplitSize());\r\n             return h.finalize();\r\n         }\r\n+        uint32_t GetArgCount() const\r\n+        {\r\n+            if (_ContentArgs)\r\n+            {\r\n+                if (const auto newTermArgs = _ContentArgs.try_as<NewTerminalArgs>())\r\n+                {\r\n+                    return newTermArgs->GetArgCount() + gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+                }\r\n+            }\r\n+            return gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+        }\r\n+        Model::ArgDescriptor GetArgDescriptorAt(uint32_t index) const\r\n+        {\r\n+            const auto additionalArgCount = gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+            if (index < additionalArgCount)\r\n+            {\r\n+                return _argDescriptors.at(index);\r\n+            }\r\n+            else\r\n+            {\r\n+                return _ContentArgs.as<NewTerminalArgs>()->GetArgDescriptorAt(index - additionalArgCount);",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2273708937",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18915,
        "pr_file": "src/cascadia/TerminalSettingsModel/ActionArgs.h",
        "discussion_id": "2273708937",
        "commented_code": "@@ -731,14 +761,67 @@ namespace winrt::Microsoft::Terminal::Settings::Model::implementation\n             h.write(SplitSize());\r\n             return h.finalize();\r\n         }\r\n+        uint32_t GetArgCount() const\r\n+        {\r\n+            if (_ContentArgs)\r\n+            {\r\n+                if (const auto newTermArgs = _ContentArgs.try_as<NewTerminalArgs>())\r\n+                {\r\n+                    return newTermArgs->GetArgCount() + gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+                }\r\n+            }\r\n+            return gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+        }\r\n+        Model::ArgDescriptor GetArgDescriptorAt(uint32_t index) const\r\n+        {\r\n+            const auto additionalArgCount = gsl::narrow<uint32_t>(_argDescriptors.size());\r\n+            if (index < additionalArgCount)\r\n+            {\r\n+                return _argDescriptors.at(index);\r\n+            }\r\n+            else\r\n+            {\r\n+                return _ContentArgs.as<NewTerminalArgs>()->GetArgDescriptorAt(index - additionalArgCount);\r",
        "comment_created_at": "2025-08-13T14:47:35+00:00",
        "comment_author": "lhecker",
        "comment_body": "Above you do `_ContentArgs.try_as<NewTerminalArgs>` but here just `try`. If it's not safe to cast it, shouldn't this avoid doing so as well?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2252790465",
    "pr_number": 19143,
    "pr_file": "src/cascadia/TerminalSettingsModel/TerminalSettingsSerializationHelpers.h",
    "created_at": "2025-08-04T23:32:18+00:00",
    "commented_code": "}\r\n };\r\n \r\n+template<>\r\n+struct ::Microsoft::Terminal::Settings::Model::JsonUtils::ConversionTrait<::winrt::Microsoft::Terminal::Settings::Model::IMediaResource>\r\n+{\r\n+    ::winrt::Microsoft::Terminal::Settings::Model::IMediaResource FromJson(const Json::Value& json)\r\n+    {\r\n+        if (json.isNull()) [[unlikely]]\r\n+        {\r\n+            // Do not use Empty here, as Empty is shared across all instances.\r\n+            return ::winrt::Microsoft::Terminal::Settings::Model::implementation::MediaResource::FromString(L\"\");\r\n+        }\r\n+\r\n+        winrt::hstring string{ til::u8u16(Detail::GetStringView(json)) };\r\n+        return ::winrt::Microsoft::Terminal::Settings::Model::implementation::MediaResource::FromString(string);\r\n+    }\r\n+\r\n+    bool CanConvert(const Json::Value& json)\r\n+    {\r\n+        return json.isString() || json.isNull();\r\n+    }\r\n+\r\n+    Json::Value ToJson(const ::winrt::Microsoft::Terminal::Settings::Model::IMediaResource& val)\r\n+    {\r\n+        if (!val || val.Path() == winrt::hstring{})\r\n+        {\r\n+            // empty string becomes null (is this correct?)\r\n+            return Json::Value::nullSingleton();\r\n+        }",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2252790465",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 19143,
        "pr_file": "src/cascadia/TerminalSettingsModel/TerminalSettingsSerializationHelpers.h",
        "discussion_id": "2252790465",
        "commented_code": "@@ -767,6 +768,43 @@ struct ::Microsoft::Terminal::Settings::Model::JsonUtils::ConversionTrait<::winr\n     }\r\n };\r\n \r\n+template<>\r\n+struct ::Microsoft::Terminal::Settings::Model::JsonUtils::ConversionTrait<::winrt::Microsoft::Terminal::Settings::Model::IMediaResource>\r\n+{\r\n+    ::winrt::Microsoft::Terminal::Settings::Model::IMediaResource FromJson(const Json::Value& json)\r\n+    {\r\n+        if (json.isNull()) [[unlikely]]\r\n+        {\r\n+            // Do not use Empty here, as Empty is shared across all instances.\r\n+            return ::winrt::Microsoft::Terminal::Settings::Model::implementation::MediaResource::FromString(L\"\");\r\n+        }\r\n+\r\n+        winrt::hstring string{ til::u8u16(Detail::GetStringView(json)) };\r\n+        return ::winrt::Microsoft::Terminal::Settings::Model::implementation::MediaResource::FromString(string);\r\n+    }\r\n+\r\n+    bool CanConvert(const Json::Value& json)\r\n+    {\r\n+        return json.isString() || json.isNull();\r\n+    }\r\n+\r\n+    Json::Value ToJson(const ::winrt::Microsoft::Terminal::Settings::Model::IMediaResource& val)\r\n+    {\r\n+        if (!val || val.Path() == winrt::hstring{})\r\n+        {\r\n+            // empty string becomes null (is this correct?)\r\n+            return Json::Value::nullSingleton();\r\n+        }\r",
        "comment_created_at": "2025-08-04T23:32:18+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "Yup! This is correct. Tested on my dev build. We replace `\"\"` with `null` on save. Storing the property with this value is meaningful because removing the property in the JSON forces inheritance.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2211299219",
    "pr_number": 19132,
    "pr_file": "src/cascadia/TerminalApp/CommandPaletteItems.h",
    "created_at": "2025-07-16T18:52:01+00:00",
    "commented_code": "+// Copyright (c) Microsoft Corporation.\r\n+// Licensed under the MIT license.\r\n+\r\n+#pragma once\r\n+\r\n+#include \"BasePaletteItem.h\"\r\n+#include \"TabPaletteItem.g.h\"\r\n+\r\n+#include \"../inc/cppwinrt_utils.h\"\r\n+\r\n+namespace winrt::TerminalApp::implementation\r\n+{\r\n+    struct ActionPaletteItem :\r\n+        public winrt::implements<ActionPaletteItem, IPaletteItem, winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged>,\r\n+        BasePaletteItem<ActionPaletteItem, winrt::TerminalApp::PaletteItemType::Action>\r\n+    {\r\n+        ActionPaletteItem(const Microsoft::Terminal::Settings::Model::Command& command, const winrt::hstring keyChordText) :\r\n+            _Command{ command }, _name{ command.Name() }, _keyChordText{ keyChordText }\r\n+        {\r\n+        }\r\n+\r\n+        winrt::hstring Name()\r\n+        {\r\n+            return _name;\r\n+        }\r\n+\r\n+        winrt::hstring KeyChordText()\r\n+        {\r\n+            return _keyChordText;\r\n+        }\r\n+\r\n+        winrt::hstring Icon()\r\n+        {\r\n+            return _Command.IconPath();\r\n+        }\r\n+\r\n+        WINRT_PROPERTY(Microsoft::Terminal::Settings::Model::Command, Command, nullptr);\r\n+\r\n+    private:\r\n+        Windows::UI::Xaml::Data::INotifyPropertyChanged::PropertyChanged_revoker _commandChangedRevoker;\r\n+        winrt::hstring _name;\r\n+        winrt::hstring _keyChordText;\r\n+    };\r\n+\r\n+    struct CommandLinePaletteItem :\r\n+        public winrt::implements<CommandLinePaletteItem, IPaletteItem, winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged>,\r\n+        BasePaletteItem<CommandLinePaletteItem, winrt::TerminalApp::PaletteItemType::CommandLine>\r\n+    {\r\n+        CommandLinePaletteItem(const winrt::hstring& commandLine) :\r\n+            _CommandLine{ commandLine } {}\r\n+\r\n+        winrt::hstring Name()\r\n+        {\r\n+            return _CommandLine;\r\n+        }\r\n+\r\n+        winrt::hstring KeyChordText()\r\n+        {\r\n+            return {};\r\n+        }\r\n+\r\n+        winrt::hstring Icon()\r\n+        {\r\n+            return {};\r\n+        }\r\n+\r\n+        WINRT_PROPERTY(winrt::hstring, CommandLine);\r\n+    };\r\n+\r\n+    struct TabPaletteItem :\r\n+        public TabPaletteItemT<TabPaletteItem>,\r\n+        BasePaletteItem<TabPaletteItem, winrt::TerminalApp::PaletteItemType::Tab>\r\n+    {\r\n+        TabPaletteItem(const winrt::TerminalApp::TabBase& tab);\r\n+\r\n+        winrt::TerminalApp::TabBase Tab() const noexcept\r\n+        {\r\n+            return _tab.get();\r\n+        }\r\n+\r\n+        winrt::hstring Name()\r\n+        {\r\n+            if (auto tab = _tab.get())\r\n+            {\r\n+                return tab.Title();\r\n+            }\r\n+            return {};\r\n+        }\r\n+\r\n+        winrt::hstring KeyChordText()\r\n+        {\r\n+            return {};\r\n+        }\r\n+\r\n+        winrt::hstring Icon()\r\n+        {\r\n+            if (auto tab = _tab.get())\r\n+            {\r\n+                return tab.Icon();\r\n+            }\r\n+            return {};\r\n+        }\r\n+\r\n+        winrt::TerminalApp::TerminalTabStatus TabStatus()\r\n+        {\r\n+            if (auto tab = _tab.get())\r\n+            {\r\n+                if (auto terminalTab = tab.try_as<winrt::TerminalApp::TerminalTab>())",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2211299219",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 19132,
        "pr_file": "src/cascadia/TerminalApp/CommandPaletteItems.h",
        "discussion_id": "2211299219",
        "commented_code": "@@ -0,0 +1,121 @@\n+// Copyright (c) Microsoft Corporation.\r\n+// Licensed under the MIT license.\r\n+\r\n+#pragma once\r\n+\r\n+#include \"BasePaletteItem.h\"\r\n+#include \"TabPaletteItem.g.h\"\r\n+\r\n+#include \"../inc/cppwinrt_utils.h\"\r\n+\r\n+namespace winrt::TerminalApp::implementation\r\n+{\r\n+    struct ActionPaletteItem :\r\n+        public winrt::implements<ActionPaletteItem, IPaletteItem, winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged>,\r\n+        BasePaletteItem<ActionPaletteItem, winrt::TerminalApp::PaletteItemType::Action>\r\n+    {\r\n+        ActionPaletteItem(const Microsoft::Terminal::Settings::Model::Command& command, const winrt::hstring keyChordText) :\r\n+            _Command{ command }, _name{ command.Name() }, _keyChordText{ keyChordText }\r\n+        {\r\n+        }\r\n+\r\n+        winrt::hstring Name()\r\n+        {\r\n+            return _name;\r\n+        }\r\n+\r\n+        winrt::hstring KeyChordText()\r\n+        {\r\n+            return _keyChordText;\r\n+        }\r\n+\r\n+        winrt::hstring Icon()\r\n+        {\r\n+            return _Command.IconPath();\r\n+        }\r\n+\r\n+        WINRT_PROPERTY(Microsoft::Terminal::Settings::Model::Command, Command, nullptr);\r\n+\r\n+    private:\r\n+        Windows::UI::Xaml::Data::INotifyPropertyChanged::PropertyChanged_revoker _commandChangedRevoker;\r\n+        winrt::hstring _name;\r\n+        winrt::hstring _keyChordText;\r\n+    };\r\n+\r\n+    struct CommandLinePaletteItem :\r\n+        public winrt::implements<CommandLinePaletteItem, IPaletteItem, winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged>,\r\n+        BasePaletteItem<CommandLinePaletteItem, winrt::TerminalApp::PaletteItemType::CommandLine>\r\n+    {\r\n+        CommandLinePaletteItem(const winrt::hstring& commandLine) :\r\n+            _CommandLine{ commandLine } {}\r\n+\r\n+        winrt::hstring Name()\r\n+        {\r\n+            return _CommandLine;\r\n+        }\r\n+\r\n+        winrt::hstring KeyChordText()\r\n+        {\r\n+            return {};\r\n+        }\r\n+\r\n+        winrt::hstring Icon()\r\n+        {\r\n+            return {};\r\n+        }\r\n+\r\n+        WINRT_PROPERTY(winrt::hstring, CommandLine);\r\n+    };\r\n+\r\n+    struct TabPaletteItem :\r\n+        public TabPaletteItemT<TabPaletteItem>,\r\n+        BasePaletteItem<TabPaletteItem, winrt::TerminalApp::PaletteItemType::Tab>\r\n+    {\r\n+        TabPaletteItem(const winrt::TerminalApp::TabBase& tab);\r\n+\r\n+        winrt::TerminalApp::TabBase Tab() const noexcept\r\n+        {\r\n+            return _tab.get();\r\n+        }\r\n+\r\n+        winrt::hstring Name()\r\n+        {\r\n+            if (auto tab = _tab.get())\r\n+            {\r\n+                return tab.Title();\r\n+            }\r\n+            return {};\r\n+        }\r\n+\r\n+        winrt::hstring KeyChordText()\r\n+        {\r\n+            return {};\r\n+        }\r\n+\r\n+        winrt::hstring Icon()\r\n+        {\r\n+            if (auto tab = _tab.get())\r\n+            {\r\n+                return tab.Icon();\r\n+            }\r\n+            return {};\r\n+        }\r\n+\r\n+        winrt::TerminalApp::TerminalTabStatus TabStatus()\r\n+        {\r\n+            if (auto tab = _tab.get())\r\n+            {\r\n+                if (auto terminalTab = tab.try_as<winrt::TerminalApp::TerminalTab>())\r",
        "comment_created_at": "2025-07-16T18:52:01+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "```suggestion\n            if (const auto tab = _tab.get())\n            {\n                if (const auto terminalTab = tab.try_as<winrt::TerminalApp::TerminalTab>())\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1923695661",
    "pr_number": 18445,
    "pr_file": "src/cascadia/WindowsTerminal/IslandWindow.h",
    "created_at": "2025-01-21T13:04:42+00:00",
    "commented_code": "bool _minimizeToNotificationArea{ false };\n \n     std::unordered_map<UINT, SystemMenuItemInfo> _systemMenuItems;\n-    UINT _systemMenuNextItemId;\n+    UINT _systemMenuNextItemId = 0;",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1923695661",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18445,
        "pr_file": "src/cascadia/WindowsTerminal/IslandWindow.h",
        "discussion_id": "1923695661",
        "commented_code": "@@ -143,7 +147,7 @@ class IslandWindow :\n     bool _minimizeToNotificationArea{ false };\n \n     std::unordered_map<UINT, SystemMenuItemInfo> _systemMenuItems;\n-    UINT _systemMenuNextItemId;\n+    UINT _systemMenuNextItemId = 0;",
        "comment_created_at": "2025-01-21T13:04:42+00:00",
        "comment_author": "lhecker",
        "comment_body": "This member was left uninitialized.",
        "pr_file_module": null
      }
    ]
  }
]