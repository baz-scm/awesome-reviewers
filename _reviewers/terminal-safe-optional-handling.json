[
  {
    "discussion_id": "2138891477",
    "pr_number": 18953,
    "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
    "created_at": "2025-06-10T22:53:48+00:00",
    "commented_code": "}\n \n         const auto theme = _settings.GlobalSettings().CurrentTheme();\n-        auto requestedTheme{ theme.RequestedTheme() };\n+        const auto paneActiveBorderColor = theme.Pane() ? theme.Pane().ActiveBorderColor() : nullptr;\n+        const auto paneInactiveBorderColor = theme.Pane() ? theme.Pane().InactiveBorderColor() : nullptr;\n+        const auto broadcastBorderColor = theme.Pane() ? theme.Pane().BroadcastBorderColor() : nullptr;\n+        const auto requestedTheme{ theme.RequestedTheme() };\n \n         {\n-            _updatePaneResources(requestedTheme);\n+            _updatePaneResources(requestedTheme, paneActiveBorderColor, paneInactiveBorderColor, broadcastBorderColor);",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2138891477",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18953,
        "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
        "discussion_id": "2138891477",
        "commented_code": "@@ -4689,10 +4689,13 @@ namespace winrt::TerminalApp::implementation\n         }\n \n         const auto theme = _settings.GlobalSettings().CurrentTheme();\n-        auto requestedTheme{ theme.RequestedTheme() };\n+        const auto paneActiveBorderColor = theme.Pane() ? theme.Pane().ActiveBorderColor() : nullptr;\n+        const auto paneInactiveBorderColor = theme.Pane() ? theme.Pane().InactiveBorderColor() : nullptr;\n+        const auto broadcastBorderColor = theme.Pane() ? theme.Pane().BroadcastBorderColor() : nullptr;\n+        const auto requestedTheme{ theme.RequestedTheme() };\n \n         {\n-            _updatePaneResources(requestedTheme);\n+            _updatePaneResources(requestedTheme, paneActiveBorderColor, paneInactiveBorderColor, broadcastBorderColor);",
        "comment_created_at": "2025-06-10T22:53:48+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "I think you don't actually need the variables. In MTSMSettings.h, the last parameter in the macro is `nullptr`, so if the setting isn't defined, the getter should already retrieve `nullptr`. You should be able to pass `theme.Pane().ActiveBorderColor()` and the other ones directly into `_updatePaneResources`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2149253432",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18953,
        "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
        "discussion_id": "2138891477",
        "commented_code": "@@ -4689,10 +4689,13 @@ namespace winrt::TerminalApp::implementation\n         }\n \n         const auto theme = _settings.GlobalSettings().CurrentTheme();\n-        auto requestedTheme{ theme.RequestedTheme() };\n+        const auto paneActiveBorderColor = theme.Pane() ? theme.Pane().ActiveBorderColor() : nullptr;\n+        const auto paneInactiveBorderColor = theme.Pane() ? theme.Pane().InactiveBorderColor() : nullptr;\n+        const auto broadcastBorderColor = theme.Pane() ? theme.Pane().BroadcastBorderColor() : nullptr;\n+        const auto requestedTheme{ theme.RequestedTheme() };\n \n         {\n-            _updatePaneResources(requestedTheme);\n+            _updatePaneResources(requestedTheme, paneActiveBorderColor, paneInactiveBorderColor, broadcastBorderColor);",
        "comment_created_at": "2025-06-16T07:39:48+00:00",
        "comment_author": "Techypanda",
        "comment_body": "tested this by removing the pane key from my json and reloading: crashed as theme.Pane() was null; I need the ternary or it goes `nullptr.ActiveBorderColor()` which crashes it (i could be wrong).\r\n\r\nWill try a way that im thinking to clean this up but i dont believe i can pass this directly as you suggest unless im mistaken",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1131171867",
    "pr_number": 14825,
    "pr_file": "src/cascadia/TerminalApp/AppLogic.cpp",
    "created_at": "2023-03-09T15:10:49+00:00",
    "commented_code": "return winrt::make<FindTargetWindowResult>(WindowingBehaviorUseNew);\r\n     }\r\n \r\n-    // Method Description:\r\n-    // - If there were any errors parsing the commandline that was used to\r\n-    //   initialize the terminal, this will return a string containing that\r\n-    //   message. If there were no errors, this message will be blank.\r\n-    // - If the user requested help on any command (using --help), this will\r\n-    //   contain the help message.\r\n-    // - If the user requested the version number (using --version), this will\r\n-    //   contain the version string.\r\n-    // Arguments:\r\n-    // - <none>\r\n-    // Return Value:\r\n-    // - the help text or error message for the provided commandline, if one\r\n-    //   exists, otherwise the empty string.\r\n-    winrt::hstring AppLogic::ParseCommandlineMessage()\r\n-    {\r\n-        return winrt::to_hstring(_appArgs.GetExitMessage());\r\n-    }\r\n-\r\n-    // Method Description:\r\n-    // - Returns true if we should exit the application before even starting the\r\n-    //   window. We might want to do this if we're displaying an error message or\r\n-    //   the version string, or if we want to open the settings file.\r\n-    // Arguments:\r\n-    // - <none>\r\n-    // Return Value:\r\n-    // - true iff we should exit the application before even starting the window\r\n-    bool AppLogic::ShouldExitEarly()\r\n-    {\r\n-        return _appArgs.ShouldExitEarly();\r\n-    }\r\n-\r\n-    bool AppLogic::FocusMode() const\r\n-    {\r\n-        return _root ? _root->FocusMode() : false;\r\n-    }\r\n-\r\n-    bool AppLogic::Fullscreen() const\r\n-    {\r\n-        return _root ? _root->Fullscreen() : false;\r\n-    }\r\n-\r\n-    void AppLogic::Maximized(bool newMaximized)\r\n+    Windows::Foundation::Collections::IMapView<Microsoft::Terminal::Control::KeyChord, Microsoft::Terminal::Settings::Model::Command> AppLogic::GlobalHotkeys()\r\n     {\r\n-        if (_root)\r\n-        {\r\n-            _root->Maximized(newMaximized);\r\n-        }\r\n+        return _settings.GlobalSettings().ActionMap().GlobalHotkeys();\r\n     }\r\n \r\n-    bool AppLogic::AlwaysOnTop() const\r\n+    Microsoft::Terminal::Settings::Model::Theme AppLogic::Theme()\r\n     {\r\n-        return _root ? _root->AlwaysOnTop() : false;\r\n+        return _settings.GlobalSettings().CurrentTheme();\r\n     }\r\n \r\n-    bool AppLogic::AutoHideWindow()\r\n+    TerminalApp::TerminalWindow AppLogic::CreateNewWindow()\r\n     {\r\n-        if (!_loadedInitialSettings)\r\n+        if (_settings == nullptr)\r\n         {\r\n-            // Load settings if we haven't already\r\n             ReloadSettings();\r\n         }\r\n \r\n-        return _settings.GlobalSettings().AutoHideWindow();\r\n-    }\r\n-\r\n-    Windows::Foundation::Collections::IMapView<Microsoft::Terminal::Control::KeyChord, Microsoft::Terminal::Settings::Model::Command> AppLogic::GlobalHotkeys()\r\n-    {\r\n-        return _settings.GlobalSettings().ActionMap().GlobalHotkeys();\r\n-    }\r\n+        auto ev = winrt::make_self<SettingsLoadEventArgs>(false,\r\n+                                                          _settingsLoadedResult,\r\n+                                                          _settingsLoadExceptionText,\r\n+                                                          winrt::multi_threaded_vector<SettingsLoadWarnings>(std::move(_warnings)),",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1131171867",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 14825,
        "pr_file": "src/cascadia/TerminalApp/AppLogic.cpp",
        "discussion_id": "1131171867",
        "commented_code": "@@ -1468,97 +652,42 @@ namespace winrt::TerminalApp::implementation\n         return winrt::make<FindTargetWindowResult>(WindowingBehaviorUseNew);\r\n     }\r\n \r\n-    // Method Description:\r\n-    // - If there were any errors parsing the commandline that was used to\r\n-    //   initialize the terminal, this will return a string containing that\r\n-    //   message. If there were no errors, this message will be blank.\r\n-    // - If the user requested help on any command (using --help), this will\r\n-    //   contain the help message.\r\n-    // - If the user requested the version number (using --version), this will\r\n-    //   contain the version string.\r\n-    // Arguments:\r\n-    // - <none>\r\n-    // Return Value:\r\n-    // - the help text or error message for the provided commandline, if one\r\n-    //   exists, otherwise the empty string.\r\n-    winrt::hstring AppLogic::ParseCommandlineMessage()\r\n-    {\r\n-        return winrt::to_hstring(_appArgs.GetExitMessage());\r\n-    }\r\n-\r\n-    // Method Description:\r\n-    // - Returns true if we should exit the application before even starting the\r\n-    //   window. We might want to do this if we're displaying an error message or\r\n-    //   the version string, or if we want to open the settings file.\r\n-    // Arguments:\r\n-    // - <none>\r\n-    // Return Value:\r\n-    // - true iff we should exit the application before even starting the window\r\n-    bool AppLogic::ShouldExitEarly()\r\n-    {\r\n-        return _appArgs.ShouldExitEarly();\r\n-    }\r\n-\r\n-    bool AppLogic::FocusMode() const\r\n-    {\r\n-        return _root ? _root->FocusMode() : false;\r\n-    }\r\n-\r\n-    bool AppLogic::Fullscreen() const\r\n-    {\r\n-        return _root ? _root->Fullscreen() : false;\r\n-    }\r\n-\r\n-    void AppLogic::Maximized(bool newMaximized)\r\n+    Windows::Foundation::Collections::IMapView<Microsoft::Terminal::Control::KeyChord, Microsoft::Terminal::Settings::Model::Command> AppLogic::GlobalHotkeys()\r\n     {\r\n-        if (_root)\r\n-        {\r\n-            _root->Maximized(newMaximized);\r\n-        }\r\n+        return _settings.GlobalSettings().ActionMap().GlobalHotkeys();\r\n     }\r\n \r\n-    bool AppLogic::AlwaysOnTop() const\r\n+    Microsoft::Terminal::Settings::Model::Theme AppLogic::Theme()\r\n     {\r\n-        return _root ? _root->AlwaysOnTop() : false;\r\n+        return _settings.GlobalSettings().CurrentTheme();\r\n     }\r\n \r\n-    bool AppLogic::AutoHideWindow()\r\n+    TerminalApp::TerminalWindow AppLogic::CreateNewWindow()\r\n     {\r\n-        if (!_loadedInitialSettings)\r\n+        if (_settings == nullptr)\r\n         {\r\n-            // Load settings if we haven't already\r\n             ReloadSettings();\r\n         }\r\n \r\n-        return _settings.GlobalSettings().AutoHideWindow();\r\n-    }\r\n-\r\n-    Windows::Foundation::Collections::IMapView<Microsoft::Terminal::Control::KeyChord, Microsoft::Terminal::Settings::Model::Command> AppLogic::GlobalHotkeys()\r\n-    {\r\n-        return _settings.GlobalSettings().ActionMap().GlobalHotkeys();\r\n-    }\r\n+        auto ev = winrt::make_self<SettingsLoadEventArgs>(false,\r\n+                                                          _settingsLoadedResult,\r\n+                                                          _settingsLoadExceptionText,\r\n+                                                          winrt::multi_threaded_vector<SettingsLoadWarnings>(std::move(_warnings)),\r",
        "comment_created_at": "2023-03-09T15:10:49+00:00",
        "comment_author": "DHowett",
        "comment_body": "You should be careful with this `move` here. I think you're moving from `_warnings` when the settings are loaded (to construct an event for every window) and then again when a new window is created (to construct an event for its creation).\r\n\r\nThe second time will be a no-op, but also it will produce an empty vector. If that is the desired behavior, it's better to make it explicit.",
        "pr_file_module": null
      },
      {
        "comment_id": "1132544422",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 14825,
        "pr_file": "src/cascadia/TerminalApp/AppLogic.cpp",
        "discussion_id": "1131171867",
        "commented_code": "@@ -1468,97 +652,42 @@ namespace winrt::TerminalApp::implementation\n         return winrt::make<FindTargetWindowResult>(WindowingBehaviorUseNew);\r\n     }\r\n \r\n-    // Method Description:\r\n-    // - If there were any errors parsing the commandline that was used to\r\n-    //   initialize the terminal, this will return a string containing that\r\n-    //   message. If there were no errors, this message will be blank.\r\n-    // - If the user requested help on any command (using --help), this will\r\n-    //   contain the help message.\r\n-    // - If the user requested the version number (using --version), this will\r\n-    //   contain the version string.\r\n-    // Arguments:\r\n-    // - <none>\r\n-    // Return Value:\r\n-    // - the help text or error message for the provided commandline, if one\r\n-    //   exists, otherwise the empty string.\r\n-    winrt::hstring AppLogic::ParseCommandlineMessage()\r\n-    {\r\n-        return winrt::to_hstring(_appArgs.GetExitMessage());\r\n-    }\r\n-\r\n-    // Method Description:\r\n-    // - Returns true if we should exit the application before even starting the\r\n-    //   window. We might want to do this if we're displaying an error message or\r\n-    //   the version string, or if we want to open the settings file.\r\n-    // Arguments:\r\n-    // - <none>\r\n-    // Return Value:\r\n-    // - true iff we should exit the application before even starting the window\r\n-    bool AppLogic::ShouldExitEarly()\r\n-    {\r\n-        return _appArgs.ShouldExitEarly();\r\n-    }\r\n-\r\n-    bool AppLogic::FocusMode() const\r\n-    {\r\n-        return _root ? _root->FocusMode() : false;\r\n-    }\r\n-\r\n-    bool AppLogic::Fullscreen() const\r\n-    {\r\n-        return _root ? _root->Fullscreen() : false;\r\n-    }\r\n-\r\n-    void AppLogic::Maximized(bool newMaximized)\r\n+    Windows::Foundation::Collections::IMapView<Microsoft::Terminal::Control::KeyChord, Microsoft::Terminal::Settings::Model::Command> AppLogic::GlobalHotkeys()\r\n     {\r\n-        if (_root)\r\n-        {\r\n-            _root->Maximized(newMaximized);\r\n-        }\r\n+        return _settings.GlobalSettings().ActionMap().GlobalHotkeys();\r\n     }\r\n \r\n-    bool AppLogic::AlwaysOnTop() const\r\n+    Microsoft::Terminal::Settings::Model::Theme AppLogic::Theme()\r\n     {\r\n-        return _root ? _root->AlwaysOnTop() : false;\r\n+        return _settings.GlobalSettings().CurrentTheme();\r\n     }\r\n \r\n-    bool AppLogic::AutoHideWindow()\r\n+    TerminalApp::TerminalWindow AppLogic::CreateNewWindow()\r\n     {\r\n-        if (!_loadedInitialSettings)\r\n+        if (_settings == nullptr)\r\n         {\r\n-            // Load settings if we haven't already\r\n             ReloadSettings();\r\n         }\r\n \r\n-        return _settings.GlobalSettings().AutoHideWindow();\r\n-    }\r\n-\r\n-    Windows::Foundation::Collections::IMapView<Microsoft::Terminal::Control::KeyChord, Microsoft::Terminal::Settings::Model::Command> AppLogic::GlobalHotkeys()\r\n-    {\r\n-        return _settings.GlobalSettings().ActionMap().GlobalHotkeys();\r\n-    }\r\n+        auto ev = winrt::make_self<SettingsLoadEventArgs>(false,\r\n+                                                          _settingsLoadedResult,\r\n+                                                          _settingsLoadExceptionText,\r\n+                                                          winrt::multi_threaded_vector<SettingsLoadWarnings>(std::move(_warnings)),\r",
        "comment_created_at": "2023-03-10T15:45:14+00:00",
        "comment_author": "zadjii-msft",
        "comment_body": "Y'know, I didn't have it as a `move` origianlly (before https://github.com/microsoft/terminal/pull/14825#discussion_r1113338128, c79f27c3dac686c5f30b6448831d856a61fd57ca). It seems to always work as expected even with the `move`, but it does _feel_ wrong. \r\n\r\nI might go back to making a new IVector (without the `move`) just cause I don't think I trust this. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849321850",
    "pr_number": 18220,
    "pr_file": "src/cascadia/QueryExtension/ExtensionPalette.cpp",
    "created_at": "2024-11-20T00:07:31+00:00",
    "commented_code": "// Clear the text box each time we close the dialog. This is consistent with VsCode.\n         _queryBox().Text(winrt::hstring{});\n     }\n+\n+    ChatMessage::ChatMessage(winrt::hstring content, bool isQuery, bool isCode) :\n+        _messageContent{ content },\n+        _isQuery{ isQuery },\n+        _isCode{ isCode }",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1849321850",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18220,
        "pr_file": "src/cascadia/QueryExtension/ExtensionPalette.cpp",
        "discussion_id": "1849321850",
        "commented_code": "@@ -489,4 +456,55 @@ namespace winrt::Microsoft::Terminal::Query::Extension::implementation\n         // Clear the text box each time we close the dialog. This is consistent with VsCode.\n         _queryBox().Text(winrt::hstring{});\n     }\n+\n+    ChatMessage::ChatMessage(winrt::hstring content, bool isQuery, bool isCode) :\n+        _messageContent{ content },\n+        _isQuery{ isQuery },\n+        _isCode{ isCode }",
        "comment_created_at": "2024-11-20T00:07:31+00:00",
        "comment_author": "DHowett",
        "comment_body": "you'll need a `_richBlock{ nullptr }` here, otherwise we will construct one on line 460 and then overwrite it on line 465.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1838560031",
    "pr_number": 18183,
    "pr_file": "src/cascadia/TerminalSettingsModel/WslDistroGenerator.cpp",
    "created_at": "2024-11-12T18:10:11+00:00",
    "commented_code": "continue;\r\n         }\r\n \r\n+        const auto modernValue{ wil::reg::try_get_value<uint32_t>(distroKey.get(), RegKeyModern) };\r\n+        if (modernValue == 1u)",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1838560031",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18183,
        "pr_file": "src/cascadia/TerminalSettingsModel/WslDistroGenerator.cpp",
        "discussion_id": "1838560031",
        "commented_code": "@@ -188,6 +189,12 @@ static bool getWslNames(const wil::unique_hkey& wslRootKey,\n             continue;\r\n         }\r\n \r\n+        const auto modernValue{ wil::reg::try_get_value<uint32_t>(distroKey.get(), RegKeyModern) };\r\n+        if (modernValue == 1u)\r",
        "comment_created_at": "2024-11-12T18:10:11+00:00",
        "comment_author": "DHowett",
        "comment_body": "it's an `optional` - `nullopt` is `!=` 1 :)",
        "pr_file_module": null
      },
      {
        "comment_id": "1838584076",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18183,
        "pr_file": "src/cascadia/TerminalSettingsModel/WslDistroGenerator.cpp",
        "discussion_id": "1838560031",
        "commented_code": "@@ -188,6 +189,12 @@ static bool getWslNames(const wil::unique_hkey& wslRootKey,\n             continue;\r\n         }\r\n \r\n+        const auto modernValue{ wil::reg::try_get_value<uint32_t>(distroKey.get(), RegKeyModern) };\r\n+        if (modernValue == 1u)\r",
        "comment_created_at": "2024-11-12T18:30:18+00:00",
        "comment_author": "lhecker",
        "comment_body": "I'd prefer if this was `.value_or(0) != 0` because that would more accurately represent \"truthy\".",
        "pr_file_module": null
      }
    ]
  }
]