[
  {
    "discussion_id": "2091859444",
    "pr_number": 18915,
    "pr_file": "src/cascadia/TerminalSettingsModel/Command.cpp",
    "created_at": "2025-05-15T19:47:02+00:00",
    "commented_code": "{\r\n     Command::Command() = default;\r\n \r\n+    Model::Command Command::NewUserCommand()\r\n+    {\r\n+        auto newCmd{ winrt::make_self<Command>() };\r\n+        newCmd->_Origin = OriginTag::User;\r\n+        return *newCmd;\r\n+    }\r\n+\r\n+    Model::Command Command::CopyAsUserCommand(Model::Command originalCmd)",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2091859444",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18915,
        "pr_file": "src/cascadia/TerminalSettingsModel/Command.cpp",
        "discussion_id": "2091859444",
        "commented_code": "@@ -28,6 +28,21 @@ namespace winrt::Microsoft::Terminal::Settings::Model::implementation\n {\r\n     Command::Command() = default;\r\n \r\n+    Model::Command Command::NewUserCommand()\r\n+    {\r\n+        auto newCmd{ winrt::make_self<Command>() };\r\n+        newCmd->_Origin = OriginTag::User;\r\n+        return *newCmd;\r\n+    }\r\n+\r\n+    Model::Command Command::CopyAsUserCommand(Model::Command originalCmd)\r",
        "comment_created_at": "2025-05-15T19:47:02+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "```suggestion\r\n    Model::Command Command::CopyAsUserCommand(const Model::Command& originalCmd)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2100805833",
    "pr_number": 18917,
    "pr_file": "src/cascadia/TerminalSettingsEditor/ActionsViewModel.cpp",
    "created_at": "2025-05-21T17:19:04+00:00",
    "commented_code": "using namespace winrt::Windows::UI::Xaml::Navigation;\r\n using namespace winrt::Microsoft::Terminal::Settings::Model;\r\n \r\n+// todo:\r\n+//      multiple actions\r\n+//      selection color\r\n+// the above arg types aren't implemented yet - they all have multiple values within them\r\n+// and require a different approach to binding/displaying. Selection color has color and IsIndex16,\r\n+// multiple actions is... multiple actions\r\n+// for now, do not support these shortcut actions in the new action editor\r\n+inline const std::set<winrt::Microsoft::Terminal::Settings::Model::ShortcutAction> UnimplementedShortcutActions = {\r\n+    winrt::Microsoft::Terminal::Settings::Model::ShortcutAction::MultipleActions,\r\n+    winrt::Microsoft::Terminal::Settings::Model::ShortcutAction::ColorSelection\r\n+};\r\n+\r\n+#define INITIALIZE_ENUM_LIST_AND_VALUE(enumMappingsName, enumType, resourceSectionAndType, resourceProperty)                                                \\\r\n+    std::vector<winrt::Microsoft::Terminal::Settings::Editor::EnumEntry> enumList;                                                                          \\\r\n+    const auto mappings = winrt::Microsoft::Terminal::Settings::Model::EnumMappings::enumMappingsName();                                                    \\\r\n+    enumType unboxedValue;                                                                                                                                  \\\r\n+    if (_Value)                                                                                                                                             \\\r\n+    {                                                                                                                                                       \\\r\n+        unboxedValue = unbox_value<enumType>(_Value);                                                                                                       \\\r\n+    }                                                                                                                                                       \\\r\n+    for (const auto [enumKey, enumValue] : mappings)                                                                                                        \\\r\n+    {                                                                                                                                                       \\\r\n+        const auto enumName = LocalizedNameForEnumName(resourceSectionAndType, enumKey, resourceProperty);                                                  \\\r\n+        auto entry = winrt::make<winrt::Microsoft::Terminal::Settings::Editor::implementation::EnumEntry>(enumName, winrt::box_value<enumType>(enumValue)); \\\r\n+        enumList.emplace_back(entry);                                                                                                                       \\\r\n+        if (_Value && unboxedValue == enumValue)                                                                                                            \\\r\n+        {                                                                                                                                                   \\\r\n+            _EnumValue = entry;                                                                                                                             \\\r\n+        }                                                                                                                                                   \\\r\n+    }                                                                                                                                                       \\\r\n+    std::sort(enumList.begin(), enumList.end(), EnumEntryReverseComparator<enumType>());                                                                    \\\r\n+    _EnumList = winrt::single_threaded_observable_vector<winrt::Microsoft::Terminal::Settings::Editor::EnumEntry>(std::move(enumList));                     \\\r\n+    _NotifyChanges(L\"EnumList\", L\"EnumValue\");",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2100805833",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18917,
        "pr_file": "src/cascadia/TerminalSettingsEditor/ActionsViewModel.cpp",
        "discussion_id": "2100805833",
        "commented_code": "@@ -18,383 +24,1194 @@ using namespace winrt::Windows::UI::Xaml::Data;\n using namespace winrt::Windows::UI::Xaml::Navigation;\r\n using namespace winrt::Microsoft::Terminal::Settings::Model;\r\n \r\n+// todo:\r\n+//      multiple actions\r\n+//      selection color\r\n+// the above arg types aren't implemented yet - they all have multiple values within them\r\n+// and require a different approach to binding/displaying. Selection color has color and IsIndex16,\r\n+// multiple actions is... multiple actions\r\n+// for now, do not support these shortcut actions in the new action editor\r\n+inline const std::set<winrt::Microsoft::Terminal::Settings::Model::ShortcutAction> UnimplementedShortcutActions = {\r\n+    winrt::Microsoft::Terminal::Settings::Model::ShortcutAction::MultipleActions,\r\n+    winrt::Microsoft::Terminal::Settings::Model::ShortcutAction::ColorSelection\r\n+};\r\n+\r\n+#define INITIALIZE_ENUM_LIST_AND_VALUE(enumMappingsName, enumType, resourceSectionAndType, resourceProperty)                                                \\\r\n+    std::vector<winrt::Microsoft::Terminal::Settings::Editor::EnumEntry> enumList;                                                                          \\\r\n+    const auto mappings = winrt::Microsoft::Terminal::Settings::Model::EnumMappings::enumMappingsName();                                                    \\\r\n+    enumType unboxedValue;                                                                                                                                  \\\r\n+    if (_Value)                                                                                                                                             \\\r\n+    {                                                                                                                                                       \\\r\n+        unboxedValue = unbox_value<enumType>(_Value);                                                                                                       \\\r\n+    }                                                                                                                                                       \\\r\n+    for (const auto [enumKey, enumValue] : mappings)                                                                                                        \\\r\n+    {                                                                                                                                                       \\\r\n+        const auto enumName = LocalizedNameForEnumName(resourceSectionAndType, enumKey, resourceProperty);                                                  \\\r\n+        auto entry = winrt::make<winrt::Microsoft::Terminal::Settings::Editor::implementation::EnumEntry>(enumName, winrt::box_value<enumType>(enumValue)); \\\r\n+        enumList.emplace_back(entry);                                                                                                                       \\\r\n+        if (_Value && unboxedValue == enumValue)                                                                                                            \\\r\n+        {                                                                                                                                                   \\\r\n+            _EnumValue = entry;                                                                                                                             \\\r\n+        }                                                                                                                                                   \\\r\n+    }                                                                                                                                                       \\\r\n+    std::sort(enumList.begin(), enumList.end(), EnumEntryReverseComparator<enumType>());                                                                    \\\r\n+    _EnumList = winrt::single_threaded_observable_vector<winrt::Microsoft::Terminal::Settings::Editor::EnumEntry>(std::move(enumList));                     \\\r\n+    _NotifyChanges(L\"EnumList\", L\"EnumValue\");\r",
        "comment_created_at": "2025-05-21T17:19:04+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "(Regarding this `_NotifyChanges()` and all the other macros that have a similar one)\r\n\r\nWho's listening to these? It looks like we don't have a `PropertyChanged` handler for specifically these values.\r\n\r\nConversely, shouldn't the property changed events be more specific? Like, shouldn't it notify `L## #enumMappingsName L\"EnumList\"` to pass over the specific one?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2252827562",
    "pr_number": 19143,
    "pr_file": "src/cascadia/TerminalSettingsEditor/ProfileViewModel.cpp",
    "created_at": "2025-08-05T00:13:05+00:00",
    "commented_code": "void ProfileViewModel::_DeduceCurrentIconType()\r\n     {\r\n-        const auto& profileIcon = _profile.Icon();\r\n+        const auto profileIcon = IconPath();",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2252827562",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 19143,
        "pr_file": "src/cascadia/TerminalSettingsEditor/ProfileViewModel.cpp",
        "discussion_id": "2252827562",
        "commented_code": "@@ -182,7 +184,7 @@ namespace winrt::Microsoft::Terminal::Settings::Editor::implementation\n \r\n     void ProfileViewModel::_DeduceCurrentIconType()\r\n     {\r\n-        const auto& profileIcon = _profile.Icon();\r\n+        const auto profileIcon = IconPath();\r",
        "comment_created_at": "2025-08-05T00:13:05+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "In this function, we're setting `_currentIconType` to none, font icon, emoji, or image depending on the branch. Since you changed how `MediaResource` interprets an emoji, do we need to update this section more?\n\nThis function is intended to figure out the icon type from the JSON value alone. So if you want to test it, just make updates to the JSON and see how the SUI updates when it reloads.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "436077203",
    "pr_number": 6309,
    "pr_file": "src/cascadia/PublicTerminalCore/HwndTerminal.cpp",
    "created_at": "2020-06-05T17:58:24+00:00",
    "commented_code": "try\r\n {\r\n     const auto flags = getControlKeyState();\r\n-    _terminal->SendKeyEvent(vkey, scanCode, flags);\r\n+    _terminal->SendKeyEvent(vkey, scanCode, flags, true);",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "436077203",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 6309,
        "pr_file": "src/cascadia/PublicTerminalCore/HwndTerminal.cpp",
        "discussion_id": "436077203",
        "commented_code": "@@ -561,7 +561,7 @@ void HwndTerminal::_SendKeyEvent(WORD vkey, WORD scanCode) noexcept\n try\r\n {\r\n     const auto flags = getControlKeyState();\r\n-    _terminal->SendKeyEvent(vkey, scanCode, flags);\r\n+    _terminal->SendKeyEvent(vkey, scanCode, flags, true);\r",
        "comment_created_at": "2020-06-05T17:58:24+00:00",
        "comment_author": "miniksa",
        "comment_body": "It's honestly confusing to read these `SendKeyEvent` calls with a random boolean at the end. Without full context on this specific issue, I fear that it is hard to comprehend that the true/false is keydown/keyup. \r\n\r\nIs there any chance that you can use the other method to send the keydown/up pair (and have the up be ignored) or perhaps expose `SendKeyDownEvent` as a helper to give that boolean over (and comment why only the down is necessary) here and in the `TermControl.cpp` calls where you've done the same thing?",
        "pr_file_module": null
      },
      {
        "comment_id": "436158265",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 6309,
        "pr_file": "src/cascadia/PublicTerminalCore/HwndTerminal.cpp",
        "discussion_id": "436077203",
        "commented_code": "@@ -561,7 +561,7 @@ void HwndTerminal::_SendKeyEvent(WORD vkey, WORD scanCode) noexcept\n try\r\n {\r\n     const auto flags = getControlKeyState();\r\n-    _terminal->SendKeyEvent(vkey, scanCode, flags);\r\n+    _terminal->SendKeyEvent(vkey, scanCode, flags, true);\r",
        "comment_created_at": "2020-06-05T20:50:55+00:00",
        "comment_author": "zadjii-msft",
        "comment_body": "Oh wait, this is a good catch, I didn't implement the keyup for the Wpf Terminal. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1314920414",
    "pr_number": 15924,
    "pr_file": "src/cascadia/TerminalApp/TabManagement.cpp",
    "created_at": "2023-09-04T12:59:27+00:00",
    "commented_code": "}\r\n         }\r\n \r\n-        tabViewItem.PointerReleased({ this, &TerminalPage::_OnTabClick });\r\n+        tabViewItem.PointerPressed({ this, &TerminalPage::_OnPointerPressed });\r\n+        tabViewItem.PointerReleased({ this, &TerminalPage::_OnPointerReleased });\r\n+        tabViewItem.PointerExited({ this, &TerminalPage::_OnPointerExited });\r\n+        tabViewItem.PointerEntered({ this, &TerminalPage::_OnPointerEntered });",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1314920414",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 15924,
        "pr_file": "src/cascadia/TerminalApp/TabManagement.cpp",
        "discussion_id": "1314920414",
        "commented_code": "@@ -180,7 +180,10 @@ namespace winrt::TerminalApp::implementation\n             }\r\n         }\r\n \r\n-        tabViewItem.PointerReleased({ this, &TerminalPage::_OnTabClick });\r\n+        tabViewItem.PointerPressed({ this, &TerminalPage::_OnPointerPressed });\r\n+        tabViewItem.PointerReleased({ this, &TerminalPage::_OnPointerReleased });\r\n+        tabViewItem.PointerExited({ this, &TerminalPage::_OnPointerExited });\r\n+        tabViewItem.PointerEntered({ this, &TerminalPage::_OnPointerEntered });\r",
        "comment_created_at": "2023-09-04T12:59:27+00:00",
        "comment_author": "lhecker",
        "comment_body": "I believe it might be better to rename these to contain \"Tab\". Without that, it feels like the functions refer to the entire page including the terminal contents.",
        "pr_file_module": null
      },
      {
        "comment_id": "1349574480",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 15924,
        "pr_file": "src/cascadia/TerminalApp/TabManagement.cpp",
        "discussion_id": "1314920414",
        "commented_code": "@@ -180,7 +180,10 @@ namespace winrt::TerminalApp::implementation\n             }\r\n         }\r\n \r\n-        tabViewItem.PointerReleased({ this, &TerminalPage::_OnTabClick });\r\n+        tabViewItem.PointerPressed({ this, &TerminalPage::_OnPointerPressed });\r\n+        tabViewItem.PointerReleased({ this, &TerminalPage::_OnPointerReleased });\r\n+        tabViewItem.PointerExited({ this, &TerminalPage::_OnPointerExited });\r\n+        tabViewItem.PointerEntered({ this, &TerminalPage::_OnPointerEntered });\r",
        "comment_created_at": "2023-10-07T21:07:22+00:00",
        "comment_author": "kasper93",
        "comment_body": "Good point, prefixed with tab.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1964120758",
    "pr_number": 18490,
    "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
    "created_at": "2025-02-20T18:14:07+00:00",
    "commented_code": "return connection;\n     }\n \n+    // use _replaceConnectionForRestart instead of using this function directly. _replaceConnectionForRestart will close the old connection.\n     TerminalConnection::ITerminalConnection TerminalPage::_duplicateConnectionForRestart(const TerminalApp::TerminalPaneContent& paneContent)",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1964120758",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18490,
        "pr_file": "src/cascadia/TerminalApp/TerminalPage.cpp",
        "discussion_id": "1964120758",
        "commented_code": "@@ -1362,6 +1362,7 @@ namespace winrt::TerminalApp::implementation\n         return connection;\n     }\n \n+    // use _replaceConnectionForRestart instead of using this function directly. _replaceConnectionForRestart will close the old connection.\n     TerminalConnection::ITerminalConnection TerminalPage::_duplicateConnectionForRestart(const TerminalApp::TerminalPaneContent& paneContent)",
        "comment_created_at": "2025-02-20T18:14:07+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "Hmm... If we shouldn't use `_duplicateConnectionForRestart` and there's only one place we're using it (in `_replaceConnectionForRestart`), can we just combine them so nobody uses the wrong one in the future?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1755305607",
    "pr_number": 17909,
    "pr_file": "src/cascadia/UIHelpers/Converters.cpp",
    "created_at": "2024-09-11T18:34:10+00:00",
    "commented_code": "return maxVal;\n     }\n+\n+    double Converters::PaddingValueFromIndex(const winrt::hstring& paddingString, uint32_t paddingIndex)",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1755305607",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 17909,
        "pr_file": "src/cascadia/UIHelpers/Converters.cpp",
        "discussion_id": "1755305607",
        "commented_code": "@@ -105,4 +105,35 @@ namespace winrt::Microsoft::Terminal::UI::implementation\n \n         return maxVal;\n     }\n+\n+    double Converters::PaddingValueFromIndex(const winrt::hstring& paddingString, uint32_t paddingIndex)",
        "comment_created_at": "2024-09-11T18:34:10+00:00",
        "comment_author": "nukoseer",
        "comment_body": "Maybe this should also take an `enum` parameter instead of index but this is only called from XAML.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1797251252",
    "pr_number": 18027,
    "pr_file": "src/cascadia/TerminalControl/TermControl.cpp",
    "created_at": "2024-10-11T17:34:32+00:00",
    "commented_code": "}\r\n \r\n         const auto panel = SwapChainPanel();\r\n-        const auto scale = panel.CompositionScaleX();\r\n         const auto offset = panel.ActualOffset();\r\n \r\n         // Update the tooltip with the URI\r\n         HoveredUri().Text(uriText);\r\n \r\n         // Set the border thickness so it covers the entire cell\r\n         const auto charSizeInPixels = CharacterDimensions();\r\n-        const auto htInDips = charSizeInPixels.Height / scale;\r\n-        const auto wtInDips = charSizeInPixels.Width / scale;\r\n-        const Thickness newThickness{ wtInDips, htInDips, 0, 0 };\r\n+        const Thickness newThickness{ charSizeInPixels.Height, charSizeInPixels.Width, 0, 0 };",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1797251252",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18027,
        "pr_file": "src/cascadia/TerminalControl/TermControl.cpp",
        "discussion_id": "1797251252",
        "commented_code": "@@ -3587,25 +3569,22 @@ namespace winrt::Microsoft::Terminal::Control::implementation\n         }\r\n \r\n         const auto panel = SwapChainPanel();\r\n-        const auto scale = panel.CompositionScaleX();\r\n         const auto offset = panel.ActualOffset();\r\n \r\n         // Update the tooltip with the URI\r\n         HoveredUri().Text(uriText);\r\n \r\n         // Set the border thickness so it covers the entire cell\r\n         const auto charSizeInPixels = CharacterDimensions();\r\n-        const auto htInDips = charSizeInPixels.Height / scale;\r\n-        const auto wtInDips = charSizeInPixels.Width / scale;\r\n-        const Thickness newThickness{ wtInDips, htInDips, 0, 0 };\r\n+        const Thickness newThickness{ charSizeInPixels.Height, charSizeInPixels.Width, 0, 0 };\r",
        "comment_created_at": "2024-10-11T17:34:32+00:00",
        "comment_author": "DHowett",
        "comment_body": "Wait up - CharacterDimensions calls FontSizeInDips **and should not be in pixels**",
        "pr_file_module": null
      },
      {
        "comment_id": "1828446339",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18027,
        "pr_file": "src/cascadia/TerminalControl/TermControl.cpp",
        "discussion_id": "1797251252",
        "commented_code": "@@ -3587,25 +3569,22 @@ namespace winrt::Microsoft::Terminal::Control::implementation\n         }\r\n \r\n         const auto panel = SwapChainPanel();\r\n-        const auto scale = panel.CompositionScaleX();\r\n         const auto offset = panel.ActualOffset();\r\n \r\n         // Update the tooltip with the URI\r\n         HoveredUri().Text(uriText);\r\n \r\n         // Set the border thickness so it covers the entire cell\r\n         const auto charSizeInPixels = CharacterDimensions();\r\n-        const auto htInDips = charSizeInPixels.Height / scale;\r\n-        const auto wtInDips = charSizeInPixels.Width / scale;\r\n-        const Thickness newThickness{ wtInDips, htInDips, 0, 0 };\r\n+        const Thickness newThickness{ charSizeInPixels.Height, charSizeInPixels.Width, 0, 0 };\r",
        "comment_created_at": "2024-11-04T22:01:18+00:00",
        "comment_author": "lhecker",
        "comment_body": "I'm always a little confused if XAML wants DIPs or pixels, but I think it wants DIPs in this case, right? Assuming that is correct, I've just changed the variable name and left the rest as-is.",
        "pr_file_module": null
      }
    ]
  }
]