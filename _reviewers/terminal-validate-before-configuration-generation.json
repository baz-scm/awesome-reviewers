[
  {
    "discussion_id": "2143744737",
    "pr_number": 19025,
    "pr_file": "src/cascadia/TerminalSettingsModel/VsDevCmdGenerator.cpp",
    "created_at": "2025-06-12T22:14:46+00:00",
    "commented_code": "// The \"-startdir\" parameter will prevent \"vsdevcmd\" from automatically\r\n     // setting the shell path so the path in the profile will be used instead.\r\n #if defined(_M_ARM64)\r\n-    commandLine.append(LR\"(\" -startdir=none -arch=arm64 -host_arch=x64)\");\r\n+    commandLine.append(LR\"(\" -startdir=none -arch=arm64 -host_arch=arm64)\");",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2143744737",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 19025,
        "pr_file": "src/cascadia/TerminalSettingsModel/VsDevCmdGenerator.cpp",
        "discussion_id": "2143744737",
        "commented_code": "@@ -45,7 +45,7 @@ std::wstring VsDevCmdGenerator::GetProfileCommandLine(const VsSetupConfiguration\n     // The \"-startdir\" parameter will prevent \"vsdevcmd\" from automatically\r\n     // setting the shell path so the path in the profile will be used instead.\r\n #if defined(_M_ARM64)\r\n-    commandLine.append(LR\"(\" -startdir=none -arch=arm64 -host_arch=x64)\");\r\n+    commandLine.append(LR\"(\" -startdir=none -arch=arm64 -host_arch=arm64)\");\r",
        "comment_created_at": "2025-06-12T22:14:46+00:00",
        "comment_author": "DHowett",
        "comment_body": "Alright, I hate it but... it [looks like](https://learn.microsoft.com/en-us/visualstudio/install/visual-studio-on-arm-devices?view=vs-2022) 17.4 is the version that added arm64 native hosting.\n\nWould you mind adding a check like we have on line R85 in the powershell dev shell generator?\n\nhttps://github.com/microsoft/terminal/blob/1142b6c0928a9a9127c679ffb081ae3f9b007da5/src/cascadia/TerminalSettingsModel/VsDevShellGenerator.cpp#L85",
        "pr_file_module": null
      },
      {
        "comment_id": "2143803588",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 19025,
        "pr_file": "src/cascadia/TerminalSettingsModel/VsDevCmdGenerator.cpp",
        "discussion_id": "2143744737",
        "commented_code": "@@ -45,7 +45,7 @@ std::wstring VsDevCmdGenerator::GetProfileCommandLine(const VsSetupConfiguration\n     // The \"-startdir\" parameter will prevent \"vsdevcmd\" from automatically\r\n     // setting the shell path so the path in the profile will be used instead.\r\n #if defined(_M_ARM64)\r\n-    commandLine.append(LR\"(\" -startdir=none -arch=arm64 -host_arch=x64)\");\r\n+    commandLine.append(LR\"(\" -startdir=none -arch=arm64 -host_arch=arm64)\");\r",
        "comment_created_at": "2025-06-12T23:15:28+00:00",
        "comment_author": "reynoldskr",
        "comment_body": "Ack that",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1989701189",
    "pr_number": 18639,
    "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettingsSerialization.cpp",
    "created_at": "2025-03-11T16:33:12+00:00",
    "commented_code": "// (meaning profiles specified by the application rather by the user).\r\n void SettingsLoader::GenerateProfiles()\r\n {\r\n-    _executeGenerator(PowershellCoreProfileGenerator{});\r\n-    _executeGenerator(WslDistroGenerator{});\r\n-    _executeGenerator(AzureCloudShellGenerator{});\r\n-    _executeGenerator(VisualStudioGenerator{});\r\n+    PowershellCoreProfileGenerator powerShellGenerator{};\r\n+    _executeGenerator(powerShellGenerator);\r\n+\r\n+    WslDistroGenerator wslGenerator{};\r\n+    _executeGenerator(wslGenerator);\r\n+\r\n+    AzureCloudShellGenerator acsGenerator{};\r\n+    _executeGenerator(acsGenerator);\r\n+\r\n+    VisualStudioGenerator vsGenerator{};\r\n+    _executeGenerator(vsGenerator);\r\n+\r\n #if TIL_FEATURE_DYNAMICSSHPROFILES_ENABLED\r\n-    _executeGenerator(SshHostGenerator{});\r\n+    SshHostGenerator sshGenerator{};\r\n+    _executeGenerator(sshGenerator);\r\n #endif\r\n+\r\n+    PowershellInstallationProfileGenerator pwshInstallationGenerator{};\r\n+    _executeGenerator(pwshInstallationGenerator);\r\n+\r\n+    _cleanupPowerShellInstaller(!powerShellGenerator.GetPowerShellInstances().empty());\r\n+}\r\n+\r\n+// Retrieve the \"Install Latest PowerShell\" profile and...\r\n+// - add a comment to the JSON to indicate it's conditionally applied\r\n+// - (if PowerShell is installed) mark it for deletion\r\n+void SettingsLoader::_cleanupPowerShellInstaller(bool isPowerShellInstalled)\r\n+{\r\n+    const hstring pwshInstallerNamespace{ PowershellInstallationProfileGenerator::Namespace };\r\n+    if (extensionPackageMap.contains(pwshInstallerNamespace))\r\n+    {\r\n+        if (const auto& fragExtList = extensionPackageMap[pwshInstallerNamespace]->Fragments(); fragExtList.Size() > 0)\r\n+        {\r\n+            Json::StreamWriterBuilder styledWriter;\r\n+            styledWriter[\"indentation\"] = \"    \";\r\n+            styledWriter[\"commentStyle\"] = \"All\";\r\n+\r\n+            auto fragExt = get_self<FragmentSettings>(fragExtList.GetAt(0));\r\n+\r\n+            // We want the comment to be the first thing in the object,\r\n+            // \"closeOnExit\" is the first property, so target that.\r\n+            auto fragExtJson = _parseJSON(til::u16u8(fragExt->Json()));\r\n+            fragExtJson[JsonKey(ProfilesKey)][0][\"closeOnExit\"].setComment(til::u16u8(fmt::format(FMT_COMPILE(L\"// {}\"), RS_(L\"PowerShellInstallationProfileJsonComment\"))), Json::CommentPlacement::commentBefore);\r\n+            fragExt->Json(hstring{ til::u8u16(Json::writeString(styledWriter, fragExtJson)) });\r\n+\r\n+            if (const auto& profileEntryList = fragExt->NewProfilesView(); profileEntryList.Size() > 0)\r\n+            {\r\n+                auto profileEntry = get_self<FragmentProfileEntry>(profileEntryList.GetAt(0));\r\n+\r\n+                // We want the comment to be the first thing in the object,\r\n+                // \"closeOnExit\" is the first property, so target that.\r\n+                auto profileJson = _parseJSON(til::u16u8(profileEntry->Json()));\r\n+                profileJson[\"closeOnExit\"].setComment(til::u16u8(fmt::format(FMT_COMPILE(L\"// {}\"), RS_(L\"PowerShellInstallationProfileJsonComment\"))), Json::CommentPlacement::commentBefore);\r\n+                profileEntry->Json(hstring{ til::u8u16(Json::writeString(styledWriter, profileJson)) });\r\n+\r\n+                // If PowerShell is installed, mark the installer profile for deletion\r\n+                if (isPowerShellInstalled)",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "1989701189",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18639,
        "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettingsSerialization.cpp",
        "discussion_id": "1989701189",
        "commented_code": "@@ -178,13 +179,77 @@ SettingsLoader::SettingsLoader(const std::string_view& userJSON, const std::stri\n // (meaning profiles specified by the application rather by the user).\r\n void SettingsLoader::GenerateProfiles()\r\n {\r\n-    _executeGenerator(PowershellCoreProfileGenerator{});\r\n-    _executeGenerator(WslDistroGenerator{});\r\n-    _executeGenerator(AzureCloudShellGenerator{});\r\n-    _executeGenerator(VisualStudioGenerator{});\r\n+    PowershellCoreProfileGenerator powerShellGenerator{};\r\n+    _executeGenerator(powerShellGenerator);\r\n+\r\n+    WslDistroGenerator wslGenerator{};\r\n+    _executeGenerator(wslGenerator);\r\n+\r\n+    AzureCloudShellGenerator acsGenerator{};\r\n+    _executeGenerator(acsGenerator);\r\n+\r\n+    VisualStudioGenerator vsGenerator{};\r\n+    _executeGenerator(vsGenerator);\r\n+\r\n #if TIL_FEATURE_DYNAMICSSHPROFILES_ENABLED\r\n-    _executeGenerator(SshHostGenerator{});\r\n+    SshHostGenerator sshGenerator{};\r\n+    _executeGenerator(sshGenerator);\r\n #endif\r\n+\r\n+    PowershellInstallationProfileGenerator pwshInstallationGenerator{};\r\n+    _executeGenerator(pwshInstallationGenerator);\r\n+\r\n+    _cleanupPowerShellInstaller(!powerShellGenerator.GetPowerShellInstances().empty());\r\n+}\r\n+\r\n+// Retrieve the \"Install Latest PowerShell\" profile and...\r\n+// - add a comment to the JSON to indicate it's conditionally applied\r\n+// - (if PowerShell is installed) mark it for deletion\r\n+void SettingsLoader::_cleanupPowerShellInstaller(bool isPowerShellInstalled)\r\n+{\r\n+    const hstring pwshInstallerNamespace{ PowershellInstallationProfileGenerator::Namespace };\r\n+    if (extensionPackageMap.contains(pwshInstallerNamespace))\r\n+    {\r\n+        if (const auto& fragExtList = extensionPackageMap[pwshInstallerNamespace]->Fragments(); fragExtList.Size() > 0)\r\n+        {\r\n+            Json::StreamWriterBuilder styledWriter;\r\n+            styledWriter[\"indentation\"] = \"    \";\r\n+            styledWriter[\"commentStyle\"] = \"All\";\r\n+\r\n+            auto fragExt = get_self<FragmentSettings>(fragExtList.GetAt(0));\r\n+\r\n+            // We want the comment to be the first thing in the object,\r\n+            // \"closeOnExit\" is the first property, so target that.\r\n+            auto fragExtJson = _parseJSON(til::u16u8(fragExt->Json()));\r\n+            fragExtJson[JsonKey(ProfilesKey)][0][\"closeOnExit\"].setComment(til::u16u8(fmt::format(FMT_COMPILE(L\"// {}\"), RS_(L\"PowerShellInstallationProfileJsonComment\"))), Json::CommentPlacement::commentBefore);\r\n+            fragExt->Json(hstring{ til::u8u16(Json::writeString(styledWriter, fragExtJson)) });\r\n+\r\n+            if (const auto& profileEntryList = fragExt->NewProfilesView(); profileEntryList.Size() > 0)\r\n+            {\r\n+                auto profileEntry = get_self<FragmentProfileEntry>(profileEntryList.GetAt(0));\r\n+\r\n+                // We want the comment to be the first thing in the object,\r\n+                // \"closeOnExit\" is the first property, so target that.\r\n+                auto profileJson = _parseJSON(til::u16u8(profileEntry->Json()));\r\n+                profileJson[\"closeOnExit\"].setComment(til::u16u8(fmt::format(FMT_COMPILE(L\"// {}\"), RS_(L\"PowerShellInstallationProfileJsonComment\"))), Json::CommentPlacement::commentBefore);\r\n+                profileEntry->Json(hstring{ til::u8u16(Json::writeString(styledWriter, profileJson)) });\r\n+\r\n+                // If PowerShell is installed, mark the installer profile for deletion\r\n+                if (isPowerShellInstalled)\r",
        "comment_created_at": "2025-03-11T16:33:12+00:00",
        "comment_author": "lhecker",
        "comment_body": "Do we need to generate the installer profile at all then?",
        "pr_file_module": null
      },
      {
        "comment_id": "2048001122",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18639,
        "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettingsSerialization.cpp",
        "discussion_id": "1989701189",
        "commented_code": "@@ -178,13 +179,77 @@ SettingsLoader::SettingsLoader(const std::string_view& userJSON, const std::stri\n // (meaning profiles specified by the application rather by the user).\r\n void SettingsLoader::GenerateProfiles()\r\n {\r\n-    _executeGenerator(PowershellCoreProfileGenerator{});\r\n-    _executeGenerator(WslDistroGenerator{});\r\n-    _executeGenerator(AzureCloudShellGenerator{});\r\n-    _executeGenerator(VisualStudioGenerator{});\r\n+    PowershellCoreProfileGenerator powerShellGenerator{};\r\n+    _executeGenerator(powerShellGenerator);\r\n+\r\n+    WslDistroGenerator wslGenerator{};\r\n+    _executeGenerator(wslGenerator);\r\n+\r\n+    AzureCloudShellGenerator acsGenerator{};\r\n+    _executeGenerator(acsGenerator);\r\n+\r\n+    VisualStudioGenerator vsGenerator{};\r\n+    _executeGenerator(vsGenerator);\r\n+\r\n #if TIL_FEATURE_DYNAMICSSHPROFILES_ENABLED\r\n-    _executeGenerator(SshHostGenerator{});\r\n+    SshHostGenerator sshGenerator{};\r\n+    _executeGenerator(sshGenerator);\r\n #endif\r\n+\r\n+    PowershellInstallationProfileGenerator pwshInstallationGenerator{};\r\n+    _executeGenerator(pwshInstallationGenerator);\r\n+\r\n+    _cleanupPowerShellInstaller(!powerShellGenerator.GetPowerShellInstances().empty());\r\n+}\r\n+\r\n+// Retrieve the \"Install Latest PowerShell\" profile and...\r\n+// - add a comment to the JSON to indicate it's conditionally applied\r\n+// - (if PowerShell is installed) mark it for deletion\r\n+void SettingsLoader::_cleanupPowerShellInstaller(bool isPowerShellInstalled)\r\n+{\r\n+    const hstring pwshInstallerNamespace{ PowershellInstallationProfileGenerator::Namespace };\r\n+    if (extensionPackageMap.contains(pwshInstallerNamespace))\r\n+    {\r\n+        if (const auto& fragExtList = extensionPackageMap[pwshInstallerNamespace]->Fragments(); fragExtList.Size() > 0)\r\n+        {\r\n+            Json::StreamWriterBuilder styledWriter;\r\n+            styledWriter[\"indentation\"] = \"    \";\r\n+            styledWriter[\"commentStyle\"] = \"All\";\r\n+\r\n+            auto fragExt = get_self<FragmentSettings>(fragExtList.GetAt(0));\r\n+\r\n+            // We want the comment to be the first thing in the object,\r\n+            // \"closeOnExit\" is the first property, so target that.\r\n+            auto fragExtJson = _parseJSON(til::u16u8(fragExt->Json()));\r\n+            fragExtJson[JsonKey(ProfilesKey)][0][\"closeOnExit\"].setComment(til::u16u8(fmt::format(FMT_COMPILE(L\"// {}\"), RS_(L\"PowerShellInstallationProfileJsonComment\"))), Json::CommentPlacement::commentBefore);\r\n+            fragExt->Json(hstring{ til::u8u16(Json::writeString(styledWriter, fragExtJson)) });\r\n+\r\n+            if (const auto& profileEntryList = fragExt->NewProfilesView(); profileEntryList.Size() > 0)\r\n+            {\r\n+                auto profileEntry = get_self<FragmentProfileEntry>(profileEntryList.GetAt(0));\r\n+\r\n+                // We want the comment to be the first thing in the object,\r\n+                // \"closeOnExit\" is the first property, so target that.\r\n+                auto profileJson = _parseJSON(til::u16u8(profileEntry->Json()));\r\n+                profileJson[\"closeOnExit\"].setComment(til::u16u8(fmt::format(FMT_COMPILE(L\"// {}\"), RS_(L\"PowerShellInstallationProfileJsonComment\"))), Json::CommentPlacement::commentBefore);\r\n+                profileEntry->Json(hstring{ til::u8u16(Json::writeString(styledWriter, profileJson)) });\r\n+\r\n+                // If PowerShell is installed, mark the installer profile for deletion\r\n+                if (isPowerShellInstalled)\r",
        "comment_created_at": "2025-04-17T00:42:26+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "Yes and no. Let me explain.\r\n\r\nProfile generators leave a stub in the settings.json. Thus, the installer leaves this stub:\r\n```js\r\n{\r\n    \"guid\": \"{965a10f2-b0f2-55dc-a3c2-2ddbf639bf89}\",\r\n    \"hidden\": false,\r\n    \"name\": \"Install Latest PowerShell\",\r\n    \"source\": \"Windows.Terminal.InstallPowerShell\"\r\n},\r\n```\r\nIt's important that we go through the process of marking it for deletion so that this profile isn't left around for the user to clean up. That's why we have to mark it for deletion.\r\n\r\nThat said, you make a good point. If we already know that PowerShell is installed, let's just skip running the installer's generator at all.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2048023991",
    "pr_number": 18639,
    "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettingsSerialization.cpp",
    "created_at": "2025-04-17T01:02:59+00:00",
    "commented_code": "// (meaning profiles specified by the application rather by the user).\r\n void SettingsLoader::GenerateProfiles()\r\n {\r\n-    _executeGenerator(PowershellCoreProfileGenerator{});\r\n-    _executeGenerator(WslDistroGenerator{});\r\n-    _executeGenerator(AzureCloudShellGenerator{});\r\n-    _executeGenerator(VisualStudioGenerator{});\r\n+    {\r\n+        PowershellCoreProfileGenerator powerShellGenerator{};\r\n+        _executeGenerator(powerShellGenerator);\r\n+\r\n+        const auto isPowerShellInstalled = !powerShellGenerator.GetPowerShellInstances().empty();\r\n+        if (!isPowerShellInstalled)\r\n+        {\r\n+            // Only generate the installer stub profile if PowerShell isn't installed.\r\n+            PowershellInstallationProfileGenerator pwshInstallationGenerator{};\r\n+            _executeGenerator(pwshInstallationGenerator);\r\n+        }",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2048023991",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18639,
        "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettingsSerialization.cpp",
        "discussion_id": "2048023991",
        "commented_code": "@@ -178,15 +179,87 @@ SettingsLoader::SettingsLoader(const std::string_view& userJSON, const std::stri\n // (meaning profiles specified by the application rather by the user).\r\n void SettingsLoader::GenerateProfiles()\r\n {\r\n-    _executeGenerator(PowershellCoreProfileGenerator{});\r\n-    _executeGenerator(WslDistroGenerator{});\r\n-    _executeGenerator(AzureCloudShellGenerator{});\r\n-    _executeGenerator(VisualStudioGenerator{});\r\n+    {\r\n+        PowershellCoreProfileGenerator powerShellGenerator{};\r\n+        _executeGenerator(powerShellGenerator);\r\n+\r\n+        const auto isPowerShellInstalled = !powerShellGenerator.GetPowerShellInstances().empty();\r\n+        if (!isPowerShellInstalled)\r\n+        {\r\n+            // Only generate the installer stub profile if PowerShell isn't installed.\r\n+            PowershellInstallationProfileGenerator pwshInstallationGenerator{};\r\n+            _executeGenerator(pwshInstallationGenerator);\r\n+        }\r",
        "comment_created_at": "2025-04-17T01:02:59+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "Using this as a thread to track some of the top-level discussion around preemptively disabling the installer generator. Specifically Dustin's concern [here](https://github.com/microsoft/terminal/pull/18639#issuecomment-2695191389):\r\n\r\n> Sorry, what I mean is... we don't want to display the PowerShell Installer if the user's not going to be able to use it either due to enterprise management (winget is disabled, source is disabled, our dynamic profile generators are disabled), user management (winget is disabled, source is uninstalled, our dynamic profile generators are disabled), or any other thing that may prevent the user from being successful here.\r\n> \r\n> We need to be able to make that determination quickly with the information available in native data stores available in-proc, because there's a chance we will be doing it **on every launch of Terminal**.\r\n\r\nMotivation ([link](https://github.com/microsoft/terminal/pull/18639#issuecomment-2694814500)): (paraphrasing) out-of-proc query can REALLY impact our startup time\r\n\r\nSolution discussion from John ([link](https://github.com/microsoft/terminal/pull/18639#issuecomment-2695532224)):\r\n> I assume that the goal is to avoid showing this option in the face of guaranteed failure. I also assume there is at least some aversion to installing the MSIX version from the Store (I don't know its current support status).\r\n> \r\n> If those are both true, then I think you must run/attempt to run a winget process to get the answer. Any attempt to short circuit that by reading GP registry would not be a supported path.\r\n\r\nSounds like we may need to think of some other way to preemptively disable the installer generator. I'll noodle on this more tomorrow, but again, using this thread as a nicer way of tracking it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051081038",
    "pr_number": 18639,
    "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettingsSerialization.cpp",
    "created_at": "2025-04-18T20:23:10+00:00",
    "commented_code": "// (meaning profiles specified by the application rather by the user).\r\n void SettingsLoader::GenerateProfiles()\r\n {\r\n-    _executeGenerator(PowershellCoreProfileGenerator{});\r\n-    _executeGenerator(WslDistroGenerator{});\r\n-    _executeGenerator(AzureCloudShellGenerator{});\r\n-    _executeGenerator(VisualStudioGenerator{});\r\n+    {\r\n+        PowershellCoreProfileGenerator powerShellGenerator{};\r\n+        _executeGenerator(powerShellGenerator);\r\n+\r\n+        const auto isPowerShellInstalled = !powerShellGenerator.GetPowerShellInstances().empty();\r\n+        if (!isPowerShellInstalled)\r\n+        {\r\n+            // Only generate the installer stub profile if PowerShell isn't installed.\r\n+            PowershellInstallationProfileGenerator pwshInstallationGenerator{};\r\n+            _executeGenerator(pwshInstallationGenerator);\r\n+        }",
    "repo_full_name": "microsoft/terminal",
    "discussion_comments": [
      {
        "comment_id": "2051081038",
        "repo_full_name": "microsoft/terminal",
        "pr_number": 18639,
        "pr_file": "src/cascadia/TerminalSettingsModel/CascadiaSettingsSerialization.cpp",
        "discussion_id": "2051081038",
        "commented_code": "@@ -178,15 +179,87 @@ SettingsLoader::SettingsLoader(const std::string_view& userJSON, const std::stri\n // (meaning profiles specified by the application rather by the user).\r\n void SettingsLoader::GenerateProfiles()\r\n {\r\n-    _executeGenerator(PowershellCoreProfileGenerator{});\r\n-    _executeGenerator(WslDistroGenerator{});\r\n-    _executeGenerator(AzureCloudShellGenerator{});\r\n-    _executeGenerator(VisualStudioGenerator{});\r\n+    {\r\n+        PowershellCoreProfileGenerator powerShellGenerator{};\r\n+        _executeGenerator(powerShellGenerator);\r\n+\r\n+        const auto isPowerShellInstalled = !powerShellGenerator.GetPowerShellInstances().empty();\r\n+        if (!isPowerShellInstalled)\r\n+        {\r\n+            // Only generate the installer stub profile if PowerShell isn't installed.\r\n+            PowershellInstallationProfileGenerator pwshInstallationGenerator{};\r\n+            _executeGenerator(pwshInstallationGenerator);\r\n+        }\r",
        "comment_created_at": "2025-04-18T20:23:10+00:00",
        "comment_author": "carlos-zamora",
        "comment_body": "\ud83d\udcdd Huh, a side effect of putting this in a scope and conditionally executing the installer's generator is that now the generator only appears in the Extensions page if PowerShell is not installed. This is because all the work to register the generator for the settings UI is in `_executeGenerator()`.\r\n\r\nI'm honestly kinda ok with this change. It means that for anybody that has PowerShell installed already, they won't even see the installer generator anywhere. But if the user doesn't have PowerShell 7 installed, they get the installer stub. From that point, the user can also manually disable the generator via the Extensions page.",
        "pr_file_module": null
      }
    ]
  }
]