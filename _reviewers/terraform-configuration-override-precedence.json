[
  {
    "discussion_id": "2012428481",
    "pr_number": 36729,
    "pr_file": "internal/command/test_test.go",
    "created_at": "2025-03-25T15:55:49+00:00",
    "commented_code": "}\n }\n \n+func TestTest_SkipCleanup(t *testing.T) {",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2012428481",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36729,
        "pr_file": "internal/command/test_test.go",
        "discussion_id": "2012428481",
        "commented_code": "@@ -2214,6 +2214,373 @@ Success! 5 passed, 0 failed.\n \t}\n }\n \n+func TestTest_SkipCleanup(t *testing.T) {",
        "comment_created_at": "2025-03-25T15:55:49+00:00",
        "comment_author": "SarahFrench",
        "comment_body": "What's the expected behaviour when a user sets skip_cleanup = true in the `test` block and also in an individual run block?\r\n\r\n\r\nSimilarly, what's the expected behaviour when a user sets skip_cleanup = **false** in the `test` block and skip_cleanup = **true** in an individual run block? Does the user receive a warning from these two conflicting instructions?",
        "pr_file_module": null
      },
      {
        "comment_id": "2020535319",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36729,
        "pr_file": "internal/command/test_test.go",
        "discussion_id": "2012428481",
        "commented_code": "@@ -2214,6 +2214,373 @@ Success! 5 passed, 0 failed.\n \t}\n }\n \n+func TestTest_SkipCleanup(t *testing.T) {",
        "comment_created_at": "2025-03-31T07:37:04+00:00",
        "comment_author": "dsa0x",
        "comment_body": "Just like every other command we have, the local value always overrides the global one, so whatever is in `test` block takes precedence, if set.",
        "pr_file_module": null
      },
      {
        "comment_id": "2024962832",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36729,
        "pr_file": "internal/command/test_test.go",
        "discussion_id": "2012428481",
        "commented_code": "@@ -2214,6 +2214,373 @@ Success! 5 passed, 0 failed.\n \t}\n }\n \n+func TestTest_SkipCleanup(t *testing.T) {",
        "comment_created_at": "2025-04-02T14:34:23+00:00",
        "comment_author": "SarahFrench",
        "comment_body": "~If whatever is in the `test` block takes precedence~ if a global setting is overridden by more specific settings, that might be something useful to call out [in the documentation for the test block.\r\n](https://developer.hashicorp.com/terraform/language/v1.12.x/tests#test-block)\r\n\r\nI think this PR also needs to add the skip_cleanup field to the docs for the run block.",
        "pr_file_module": null
      },
      {
        "comment_id": "2025351553",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36729,
        "pr_file": "internal/command/test_test.go",
        "discussion_id": "2012428481",
        "commented_code": "@@ -2214,6 +2214,373 @@ Success! 5 passed, 0 failed.\n \t}\n }\n \n+func TestTest_SkipCleanup(t *testing.T) {",
        "comment_created_at": "2025-04-02T18:12:07+00:00",
        "comment_author": "dsa0x",
        "comment_body": "üëç . I can do that in another PR",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1963272651",
    "pr_number": 36541,
    "pr_file": "internal/configs/test_file.go",
    "created_at": "2025-02-20T10:13:28+00:00",
    "commented_code": "}\n \t\t\t\tr.Overrides.Put(subject, override)\n \t\t\t}\n+\t\tcase \"backend\":\n+\t\t\tbackend, backedDiags := decodeBackendBlock(block)\n+\t\t\tdiags = append(diags, backedDiags...)\n+\n+\t\t\tif backend.Type == \"remote\" {\n+\t\t\t\t// Enhanced backends are not in use\n+\t\t\t\tdiags = append(diags, &hcl.Diagnostic{\n+\t\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\t\tSummary:  \"Only state storage backends can be used in a run\",\n+\t\t\t\t\tDetail:   fmt.Sprintf(\"The \\\"remote\\\" backend type cannot be used in the backend block in run %q at %s.\", r.Name, block.DefRange),\n+\t\t\t\t\tSubject:  block.DefRange.Ptr(),\n+\t\t\t\t})\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\tif r.Backend != nil {\n+\t\t\t\t// We've already encountered a backend for this run block",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1963272651",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36541,
        "pr_file": "internal/configs/test_file.go",
        "discussion_id": "1963272651",
        "commented_code": "@@ -648,6 +680,35 @@ func decodeTestRunBlock(block *hcl.Block, file *TestFile) (*TestRun, hcl.Diagnos\n \t\t\t\t}\n \t\t\t\tr.Overrides.Put(subject, override)\n \t\t\t}\n+\t\tcase \"backend\":\n+\t\t\tbackend, backedDiags := decodeBackendBlock(block)\n+\t\t\tdiags = append(diags, backedDiags...)\n+\n+\t\t\tif backend.Type == \"remote\" {\n+\t\t\t\t// Enhanced backends are not in use\n+\t\t\t\tdiags = append(diags, &hcl.Diagnostic{\n+\t\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\t\tSummary:  \"Only state storage backends can be used in a run\",\n+\t\t\t\t\tDetail:   fmt.Sprintf(\"The \\\"remote\\\" backend type cannot be used in the backend block in run %q at %s.\", r.Name, block.DefRange),\n+\t\t\t\t\tSubject:  block.DefRange.Ptr(),\n+\t\t\t\t})\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\tif r.Backend != nil {\n+\t\t\t\t// We've already encountered a backend for this run block",
        "comment_created_at": "2025-02-20T10:13:28+00:00",
        "comment_author": "SarahFrench",
        "comment_body": "Another question is: do we leave it to users to make sure they avoid using the same backend _configuration_ (i.e. the same, single state file) for multiple internal states within a test file?\r\n\r\nWith the introduction of parallel runs within a test file users could accidentally write tests that use the same remote state but different internal state files, which could experience conflicts in confusing ways.",
        "pr_file_module": null
      },
      {
        "comment_id": "1963322447",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36541,
        "pr_file": "internal/configs/test_file.go",
        "discussion_id": "1963272651",
        "commented_code": "@@ -648,6 +680,35 @@ func decodeTestRunBlock(block *hcl.Block, file *TestFile) (*TestRun, hcl.Diagnos\n \t\t\t\t}\n \t\t\t\tr.Overrides.Put(subject, override)\n \t\t\t}\n+\t\tcase \"backend\":\n+\t\t\tbackend, backedDiags := decodeBackendBlock(block)\n+\t\t\tdiags = append(diags, backedDiags...)\n+\n+\t\t\tif backend.Type == \"remote\" {\n+\t\t\t\t// Enhanced backends are not in use\n+\t\t\t\tdiags = append(diags, &hcl.Diagnostic{\n+\t\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\t\tSummary:  \"Only state storage backends can be used in a run\",\n+\t\t\t\t\tDetail:   fmt.Sprintf(\"The \\\"remote\\\" backend type cannot be used in the backend block in run %q at %s.\", r.Name, block.DefRange),\n+\t\t\t\t\tSubject:  block.DefRange.Ptr(),\n+\t\t\t\t})\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\tif r.Backend != nil {\n+\t\t\t\t// We've already encountered a backend for this run block",
        "comment_created_at": "2025-02-20T10:45:23+00:00",
        "comment_author": "dsa0x",
        "comment_body": "In my opinion, the state key is just a direction to the original state file, which in this case is defined by the backend configuration (and thus may be a local or remote file). Therefore, using same backend config for multiple internal states should be invalid. \r\nI cannot at the moment recall a situation where you'd want different internal states to have same state file. In that case, you can just make those runs reference the same state.",
        "pr_file_module": null
      },
      {
        "comment_id": "1967517697",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36541,
        "pr_file": "internal/configs/test_file.go",
        "discussion_id": "1963272651",
        "commented_code": "@@ -648,6 +680,35 @@ func decodeTestRunBlock(block *hcl.Block, file *TestFile) (*TestRun, hcl.Diagnos\n \t\t\t\t}\n \t\t\t\tr.Overrides.Put(subject, override)\n \t\t\t}\n+\t\tcase \"backend\":\n+\t\t\tbackend, backedDiags := decodeBackendBlock(block)\n+\t\t\tdiags = append(diags, backedDiags...)\n+\n+\t\t\tif backend.Type == \"remote\" {\n+\t\t\t\t// Enhanced backends are not in use\n+\t\t\t\tdiags = append(diags, &hcl.Diagnostic{\n+\t\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\t\tSummary:  \"Only state storage backends can be used in a run\",\n+\t\t\t\t\tDetail:   fmt.Sprintf(\"The \\\"remote\\\" backend type cannot be used in the backend block in run %q at %s.\", r.Name, block.DefRange),\n+\t\t\t\t\tSubject:  block.DefRange.Ptr(),\n+\t\t\t\t})\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\tif r.Backend != nil {\n+\t\t\t\t// We've already encountered a backend for this run block",
        "comment_created_at": "2025-02-24T12:02:25+00:00",
        "comment_author": "liamcervante",
        "comment_body": "Yes, I agree - let's prevent this if we can üëç ",
        "pr_file_module": null
      },
      {
        "comment_id": "1975442336",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36541,
        "pr_file": "internal/configs/test_file.go",
        "discussion_id": "1963272651",
        "commented_code": "@@ -648,6 +680,35 @@ func decodeTestRunBlock(block *hcl.Block, file *TestFile) (*TestRun, hcl.Diagnos\n \t\t\t\t}\n \t\t\t\tr.Overrides.Put(subject, override)\n \t\t\t}\n+\t\tcase \"backend\":\n+\t\t\tbackend, backedDiags := decodeBackendBlock(block)\n+\t\t\tdiags = append(diags, backedDiags...)\n+\n+\t\t\tif backend.Type == \"remote\" {\n+\t\t\t\t// Enhanced backends are not in use\n+\t\t\t\tdiags = append(diags, &hcl.Diagnostic{\n+\t\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\t\tSummary:  \"Only state storage backends can be used in a run\",\n+\t\t\t\t\tDetail:   fmt.Sprintf(\"The \\\"remote\\\" backend type cannot be used in the backend block in run %q at %s.\", r.Name, block.DefRange),\n+\t\t\t\t\tSubject:  block.DefRange.Ptr(),\n+\t\t\t\t})\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\tif r.Backend != nil {\n+\t\t\t\t// We've already encountered a backend for this run block",
        "comment_created_at": "2025-02-28T13:49:09+00:00",
        "comment_author": "SarahFrench",
        "comment_body": "I've implemented a version of this validation in https://github.com/hashicorp/terraform/pull/36541/commits/38c284abfdf5e9d2b625ca50425a9672e74bdb78, but I'm experiencing that restriction where I cannot import code for making a hash of a backend from `internal/backend/init` into the code that parses the file in `internal/configs/`. Instead of raising diagnostics while a specific file is parsed I need to wait until the parsing completes and that data is returned to TestCommand.Run() in the `command` package.\r\n\r\nAn alternative would be to pass the necessary backend initialisation logic into the parsing logic as an argument, but that feels incorrect.\r\n\r\nWould continuing with the approach in the commit I linked be ok?",
        "pr_file_module": null
      },
      {
        "comment_id": "1975698731",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36541,
        "pr_file": "internal/configs/test_file.go",
        "discussion_id": "1963272651",
        "commented_code": "@@ -648,6 +680,35 @@ func decodeTestRunBlock(block *hcl.Block, file *TestFile) (*TestRun, hcl.Diagnos\n \t\t\t\t}\n \t\t\t\tr.Overrides.Put(subject, override)\n \t\t\t}\n+\t\tcase \"backend\":\n+\t\t\tbackend, backedDiags := decodeBackendBlock(block)\n+\t\t\tdiags = append(diags, backedDiags...)\n+\n+\t\t\tif backend.Type == \"remote\" {\n+\t\t\t\t// Enhanced backends are not in use\n+\t\t\t\tdiags = append(diags, &hcl.Diagnostic{\n+\t\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\t\tSummary:  \"Only state storage backends can be used in a run\",\n+\t\t\t\t\tDetail:   fmt.Sprintf(\"The \\\"remote\\\" backend type cannot be used in the backend block in run %q at %s.\", r.Name, block.DefRange),\n+\t\t\t\t\tSubject:  block.DefRange.Ptr(),\n+\t\t\t\t})\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\tif r.Backend != nil {\n+\t\t\t\t// We've already encountered a backend for this run block",
        "comment_created_at": "2025-02-28T16:33:00+00:00",
        "comment_author": "dsa0x",
        "comment_body": "In addition to doing this validation in the configs package, I think another right approach for such validation would have been in the test suite itself. We already something close, where we filter the tests in the config. Doing this backend validation is however not possible at the moment due to import cycles. Given that, this approach should be sufficient for now. \r\n\r\nNevertheless, the crux of the problem is because the `TestSuiteRunner` implementation is defined within the `backend` package. That was a time when tests were supposed to be limited in-memory local backend. With the advent on non-local backends, we should move it out, and thus would allow us to reference backend \"parent\" packages like the `init`. However, that may not need to be part of this PR\r\nI moved that functionality into the moved test suite like I described here => https://gist.github.com/dsa0x/b076bc35f53226594496b51cc93e5670 (see `ensureBackend`)",
        "pr_file_module": null
      },
      {
        "comment_id": "1975848840",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36541,
        "pr_file": "internal/configs/test_file.go",
        "discussion_id": "1963272651",
        "commented_code": "@@ -648,6 +680,35 @@ func decodeTestRunBlock(block *hcl.Block, file *TestFile) (*TestRun, hcl.Diagnos\n \t\t\t\t}\n \t\t\t\tr.Overrides.Put(subject, override)\n \t\t\t}\n+\t\tcase \"backend\":\n+\t\t\tbackend, backedDiags := decodeBackendBlock(block)\n+\t\t\tdiags = append(diags, backedDiags...)\n+\n+\t\t\tif backend.Type == \"remote\" {\n+\t\t\t\t// Enhanced backends are not in use\n+\t\t\t\tdiags = append(diags, &hcl.Diagnostic{\n+\t\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\t\tSummary:  \"Only state storage backends can be used in a run\",\n+\t\t\t\t\tDetail:   fmt.Sprintf(\"The \\\"remote\\\" backend type cannot be used in the backend block in run %q at %s.\", r.Name, block.DefRange),\n+\t\t\t\t\tSubject:  block.DefRange.Ptr(),\n+\t\t\t\t})\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\tif r.Backend != nil {\n+\t\t\t\t// We've already encountered a backend for this run block",
        "comment_created_at": "2025-02-28T18:22:45+00:00",
        "comment_author": "SarahFrench",
        "comment_body": "It looks like putting TestSuiteRunner into the backend `local` package [was in anticipation](https://github.com/hashicorp/terraform/pull/33734) of being able to run tests in TFC/non-locally, and previously it was in the command package. At that point it made sense for the TestSuiteRunner to be in the local package as it has similar responsibilities to the local backend (a backendrun.OperationsBackend), i.e. it coordinates how the test operation is executed locally.\r\n\r\nI think a potential solution for this is to separate the \"local\" backendrun.OperationsBackend from the \"local\" backend.Backend, with the state backend in another package. That would help prevent backend/init from importing backend/local, and maybe -hopefully- could allow the validation to be done during parsing and neither after parsing nor at the point of test execution.\r\n\r\nI'll try my idea out as I have some pre-existing work doing the above already.  ",
        "pr_file_module": null
      },
      {
        "comment_id": "1975861497",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36541,
        "pr_file": "internal/configs/test_file.go",
        "discussion_id": "1963272651",
        "commented_code": "@@ -648,6 +680,35 @@ func decodeTestRunBlock(block *hcl.Block, file *TestFile) (*TestRun, hcl.Diagnos\n \t\t\t\t}\n \t\t\t\tr.Overrides.Put(subject, override)\n \t\t\t}\n+\t\tcase \"backend\":\n+\t\t\tbackend, backedDiags := decodeBackendBlock(block)\n+\t\t\tdiags = append(diags, backedDiags...)\n+\n+\t\t\tif backend.Type == \"remote\" {\n+\t\t\t\t// Enhanced backends are not in use\n+\t\t\t\tdiags = append(diags, &hcl.Diagnostic{\n+\t\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\t\tSummary:  \"Only state storage backends can be used in a run\",\n+\t\t\t\t\tDetail:   fmt.Sprintf(\"The \\\"remote\\\" backend type cannot be used in the backend block in run %q at %s.\", r.Name, block.DefRange),\n+\t\t\t\t\tSubject:  block.DefRange.Ptr(),\n+\t\t\t\t})\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\tif r.Backend != nil {\n+\t\t\t\t// We've already encountered a backend for this run block",
        "comment_created_at": "2025-02-28T18:35:02+00:00",
        "comment_author": "dsa0x",
        "comment_body": "Sounds good üëç I can imagine that would be beneficial beyond tests.\r\n\r\n> Just a note that we still support Tests in TFC, but TFC ends up making a local test execution",
        "pr_file_module": null
      },
      {
        "comment_id": "1979282186",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36541,
        "pr_file": "internal/configs/test_file.go",
        "discussion_id": "1963272651",
        "commented_code": "@@ -648,6 +680,35 @@ func decodeTestRunBlock(block *hcl.Block, file *TestFile) (*TestRun, hcl.Diagnos\n \t\t\t\t}\n \t\t\t\tr.Overrides.Put(subject, override)\n \t\t\t}\n+\t\tcase \"backend\":\n+\t\t\tbackend, backedDiags := decodeBackendBlock(block)\n+\t\t\tdiags = append(diags, backedDiags...)\n+\n+\t\t\tif backend.Type == \"remote\" {\n+\t\t\t\t// Enhanced backends are not in use\n+\t\t\t\tdiags = append(diags, &hcl.Diagnostic{\n+\t\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\t\tSummary:  \"Only state storage backends can be used in a run\",\n+\t\t\t\t\tDetail:   fmt.Sprintf(\"The \\\"remote\\\" backend type cannot be used in the backend block in run %q at %s.\", r.Name, block.DefRange),\n+\t\t\t\t\tSubject:  block.DefRange.Ptr(),\n+\t\t\t\t})\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\tif r.Backend != nil {\n+\t\t\t\t// We've already encountered a backend for this run block",
        "comment_created_at": "2025-03-04T11:56:39+00:00",
        "comment_author": "SarahFrench",
        "comment_body": "I think the changes I mentioned would enable the approach outlined in [your gist](https://gist.github.com/dsa0x/b076bc35f53226594496b51cc93e5670), though I'll need to think how that would tie into other work. For now, I'm going to drop it and pick it up again if the follow on work after this PR can be improved by the refactor.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1877973934",
    "pr_number": 36185,
    "pr_file": "internal/configs/test_file.go",
    "created_at": "2024-12-10T12:01:57+00:00",
    "commented_code": "{Name: \"refresh\"},\n \t\t{Name: \"replace\"},\n \t\t{Name: \"target\"},\n+\t\t{Name: \"state_alias\"},",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1877973934",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36185,
        "pr_file": "internal/configs/test_file.go",
        "discussion_id": "1877973934",
        "commented_code": "@@ -839,6 +846,7 @@ var testRunOptionsBlockSchema = &hcl.BodySchema{\n \t\t{Name: \"refresh\"},\n \t\t{Name: \"replace\"},\n \t\t{Name: \"target\"},\n+\t\t{Name: \"state_alias\"},",
        "comment_created_at": "2024-12-10T12:01:57+00:00",
        "comment_author": "liamcervante",
        "comment_body": "I think I wouldn't put this within the run options block. The run options are a 1:1 mapping to actual run options a user can specify on the command line to the plan command, and overriding the state is not something that can be done this way. I think putting it here confuses things.\r\n\r\nI think we can actually just have it at the root level of the `run` block. It's metadata about the run block rather than something that changes the behaviour of the plan/apply operation itself.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1905411844",
    "pr_number": 36227,
    "pr_file": "internal/configs/mock_provider.go",
    "created_at": "2025-01-07T12:51:16+00:00",
    "commented_code": "return provider, diags\n }\n \n+func extractOverrideDuring(content *hcl.BodyContent) (*string, hcl.Diagnostics) {",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1905411844",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36227,
        "pr_file": "internal/configs/mock_provider.go",
        "discussion_id": "1905411844",
        "commented_code": "@@ -65,12 +72,39 @@ func decodeMockProviderBlock(block *hcl.Block) (*Provider, hcl.Diagnostics) {\n \treturn provider, diags\n }\n \n+func extractOverrideDuring(content *hcl.BodyContent) (*string, hcl.Diagnostics) {",
        "comment_created_at": "2025-01-07T12:51:16+00:00",
        "comment_author": "liamcervante",
        "comment_body": "I think you could also make this return a string without a pointer -> just return \"apply\" if the attribute isn't set.",
        "pr_file_module": null
      },
      {
        "comment_id": "1906853630",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36227,
        "pr_file": "internal/configs/mock_provider.go",
        "discussion_id": "1905411844",
        "commented_code": "@@ -65,12 +72,39 @@ func decodeMockProviderBlock(block *hcl.Block) (*Provider, hcl.Diagnostics) {\n \treturn provider, diags\n }\n \n+func extractOverrideDuring(content *hcl.BodyContent) (*string, hcl.Diagnostics) {",
        "comment_created_at": "2025-01-08T09:12:45+00:00",
        "comment_author": "dsa0x",
        "comment_body": "In this section [internal/configs/mock_provider.go#L317-L325](https://github.com/hashicorp/terraform/pull/36227/files#diff-e07a696d4818a4328954e8900c8e5833aeee855a5541c57c7f677e66848da9caR317-R325), the field needs to be a pointer. This is necessary because, if the `override_*` block does not explicitly set a value for `override_during`, the global value should be applied. However, if the override_* block does set a value, it should take precedence over the global value. Using a pointer allows us to differentiate between an explicitly set value and a zero value.",
        "pr_file_module": null
      },
      {
        "comment_id": "1906873826",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36227,
        "pr_file": "internal/configs/mock_provider.go",
        "discussion_id": "1905411844",
        "commented_code": "@@ -65,12 +72,39 @@ func decodeMockProviderBlock(block *hcl.Block) (*Provider, hcl.Diagnostics) {\n \treturn provider, diags\n }\n \n+func extractOverrideDuring(content *hcl.BodyContent) (*string, hcl.Diagnostics) {",
        "comment_created_at": "2025-01-08T09:27:34+00:00",
        "comment_author": "liamcervante",
        "comment_body": "ah nice! Makes sense!",
        "pr_file_module": null
      }
    ]
  }
]