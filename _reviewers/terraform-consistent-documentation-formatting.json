[
  {
    "discussion_id": "1605895101",
    "pr_number": 35183,
    "pr_file": "website/docs/cli/code/index.mdx",
    "created_at": "2024-05-18T20:48:17+00:00",
    "commented_code": "to work with. Integrating these commands into your editing workflow can\n potentially save you time and effort.\n \n-- [The `terraform console` command](/terraform/cli/commands/console) starts an\n+- [`terraform console`](/terraform/cli/commands/console): Start an \n   interactive shell for evaluating Terraform\n-  [expressions](/terraform/language/expressions), which can be a faster way\n-  to verify that a particular resource argument results in the value you expect.\n+  [expressions](/terraform/language/expressions) to quickly verify that a \n+  particular resource argument results in the value you expect.\n \n-- [The `terraform fmt` command](/terraform/cli/commands/fmt) rewrites Terraform\n+- [`terraform fmt`](/terraform/cli/commands/fmt): Rewrite Terraform\n   configuration files to a canonical format and style, so you don't have to\n   waste time making minor adjustments for readability and consistency. It works\n   well as a pre-commit hook in your version control system.",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1605895101",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 35183,
        "pr_file": "website/docs/cli/code/index.mdx",
        "discussion_id": "1605895101",
        "commented_code": "@@ -15,30 +15,29 @@ Terraform CLI includes several commands to make Terraform code more convenient\n to work with. Integrating these commands into your editing workflow can\n potentially save you time and effort.\n \n-- [The `terraform console` command](/terraform/cli/commands/console) starts an\n+- [`terraform console`](/terraform/cli/commands/console): Start an \n   interactive shell for evaluating Terraform\n-  [expressions](/terraform/language/expressions), which can be a faster way\n-  to verify that a particular resource argument results in the value you expect.\n+  [expressions](/terraform/language/expressions) to quickly verify that a \n+  particular resource argument results in the value you expect.\n \n-- [The `terraform fmt` command](/terraform/cli/commands/fmt) rewrites Terraform\n+- [`terraform fmt`](/terraform/cli/commands/fmt): Rewrite Terraform\n   configuration files to a canonical format and style, so you don't have to\n   waste time making minor adjustments for readability and consistency. It works\n   well as a pre-commit hook in your version control system.",
        "comment_created_at": "2024-05-18T20:48:17+00:00",
        "comment_author": "cadamini",
        "comment_body": "```suggestion\r\n- [`terraform fmt`](/terraform/cli/commands/fmt): Rewrite Terraform\r\n  configuration files to a canonical format and style, so you don't have to\r\n  waste time making minor adjustments for readability and consistency. `fmt` works\r\n  well as a pre-commit hook in your version control system.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2096438641",
    "pr_number": 35183,
    "pr_file": "website/docs/cli/code/index.mdx",
    "created_at": "2025-05-19T20:29:13+00:00",
    "commented_code": "## Workflows \n \n Terraform CLI includes several commands to make Terraform code more convenient\n-to work with. Integrating these commands into your editing workflow can\n-potentially save you time and effort.\n+to work with. The following commands can be integrated into your editing \n+workflow and may save you time and effort:\n \n-- [The `terraform console` command](/terraform/cli/commands/console) starts an\n+- [`terraform console`](/terraform/cli/commands/console): Start an \n   interactive shell for evaluating Terraform\n-  [expressions](/terraform/language/expressions), which can be a faster way\n-  to verify that a particular resource argument results in the value you expect.\n+  [expressions](/terraform/language/expressions) to quickly verify that a \n+  particular resource argument results in the value you expect.\n \n-- [The `terraform fmt` command](/terraform/cli/commands/fmt) rewrites Terraform\n+- [`terraform fmt`](/terraform/cli/commands/fmt): Rewrite Terraform",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2096438641",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 35183,
        "pr_file": "website/docs/cli/code/index.mdx",
        "discussion_id": "2096438641",
        "commented_code": "@@ -17,33 +15,32 @@ in the Terraform language.\n ## Workflows \n \n Terraform CLI includes several commands to make Terraform code more convenient\n-to work with. Integrating these commands into your editing workflow can\n-potentially save you time and effort.\n+to work with. The following commands can be integrated into your editing \n+workflow and may save you time and effort:\n \n-- [The `terraform console` command](/terraform/cli/commands/console) starts an\n+- [`terraform console`](/terraform/cli/commands/console): Start an \n   interactive shell for evaluating Terraform\n-  [expressions](/terraform/language/expressions), which can be a faster way\n-  to verify that a particular resource argument results in the value you expect.\n+  [expressions](/terraform/language/expressions) to quickly verify that a \n+  particular resource argument results in the value you expect.\n \n-- [The `terraform fmt` command](/terraform/cli/commands/fmt) rewrites Terraform\n+- [`terraform fmt`](/terraform/cli/commands/fmt): Rewrite Terraform",
        "comment_created_at": "2025-05-19T20:29:13+00:00",
        "comment_author": "rkoron007",
        "comment_body": "```suggestion\r\n- The [`terraform fmt`](/terraform/cli/commands/fmt) command automatically rewrites Terraform\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2096439371",
    "pr_number": 35183,
    "pr_file": "website/docs/cli/code/index.mdx",
    "created_at": "2025-05-19T20:29:32+00:00",
    "commented_code": "## Workflows \n \n Terraform CLI includes several commands to make Terraform code more convenient\n-to work with. Integrating these commands into your editing workflow can\n-potentially save you time and effort.\n+to work with. The following commands can be integrated into your editing \n+workflow and may save you time and effort:\n \n-- [The `terraform console` command](/terraform/cli/commands/console) starts an\n+- [`terraform console`](/terraform/cli/commands/console): Start an \n   interactive shell for evaluating Terraform\n-  [expressions](/terraform/language/expressions), which can be a faster way\n-  to verify that a particular resource argument results in the value you expect.\n+  [expressions](/terraform/language/expressions) to quickly verify that a \n+  particular resource argument results in the value you expect.\n \n-- [The `terraform fmt` command](/terraform/cli/commands/fmt) rewrites Terraform\n+- [`terraform fmt`](/terraform/cli/commands/fmt): Rewrite Terraform\n   configuration files to a canonical format and style, so you don't have to\n-  waste time making minor adjustments for readability and consistency. It works\n+  waste time making minor adjustments for readability and consistency. `fmt` works",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2096439371",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 35183,
        "pr_file": "website/docs/cli/code/index.mdx",
        "discussion_id": "2096439371",
        "commented_code": "@@ -17,33 +15,32 @@ in the Terraform language.\n ## Workflows \n \n Terraform CLI includes several commands to make Terraform code more convenient\n-to work with. Integrating these commands into your editing workflow can\n-potentially save you time and effort.\n+to work with. The following commands can be integrated into your editing \n+workflow and may save you time and effort:\n \n-- [The `terraform console` command](/terraform/cli/commands/console) starts an\n+- [`terraform console`](/terraform/cli/commands/console): Start an \n   interactive shell for evaluating Terraform\n-  [expressions](/terraform/language/expressions), which can be a faster way\n-  to verify that a particular resource argument results in the value you expect.\n+  [expressions](/terraform/language/expressions) to quickly verify that a \n+  particular resource argument results in the value you expect.\n \n-- [The `terraform fmt` command](/terraform/cli/commands/fmt) rewrites Terraform\n+- [`terraform fmt`](/terraform/cli/commands/fmt): Rewrite Terraform\n   configuration files to a canonical format and style, so you don't have to\n-  waste time making minor adjustments for readability and consistency. It works\n+  waste time making minor adjustments for readability and consistency. `fmt` works",
        "comment_created_at": "2025-05-19T20:29:32+00:00",
        "comment_author": "rkoron007",
        "comment_body": "```suggestion\r\n  waste time making minor adjustments for readability and consistency. The `terraform fmt` command works\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1632142060",
    "pr_number": 35315,
    "pr_file": "website/docs/language/style.mdx",
    "created_at": "2024-06-09T00:59:21+00:00",
    "commented_code": "## File names\n \n-We recommend the following file naming conventions:\n+We recommend the following file naming conventions for organizing your configuration files:\n \n-- A `backend.tf` file that contains your [backend configuration](/terraform/language/settings/backends/configuration). You can define multiple `terraform` blocks in your configuration to separate your backend configuration from your Terraform and provider versioning configuration. \n-- A `main.tf` file that contains all resource and data source blocks.\n-- A `outputs.tf` file that contains all output blocks in alphabetical order.\n-- A `providers.tf` file that contains all `provider` blocks and configuration.\n-- A `terraform.tf` file that contains a single `terraform` block which defines your `required_version` and `required_providers`.\n-- A `variables.tf` file that contains all variable blocks in alphabetical order.\n-- A `locals.tf` file that contains local values. Refer to [local values](#local-values) for more information.\n-- A `override.tf` file that contains override definitions for your configuration. Terraform loads this and all files ending with `_override.tf` last. Use them sparingly and add comments to the original resource definitions, as these overrides make your code harder to reason about. Refer to the [override files](/terraform/language/files/override) documentation for more information.\n+- `backend.tf`: Your [backend configuration](/terraform/language/settings/backends/configuration). You can define multiple `terraform` blocks in your configuration to separate your backend configuration from your Terraform and provider versioning configuration. \n+- `main.tf`: Resource and data source blocks.\n+- `outputs.tf`: Output blocks in alphabetical order.\n+- `providers.tf`: Your `provider` blocks and configuration.\n+- `terraform.tf`: A single `terraform` block which defines your `required_version` and `required_providers`.\n+- `variables.tf`: Variable blocks in alphabetical order.\n+- `locals.tf`: Local values. Refer to [local values](#local-values) for more information.\n+- `override.tf`: Override definitions for your configuration. Terraform loads this and all files ending with `_override.tf` last. Use them sparingly and add comments to the original resource definitions, as these overrides make your code harder to reason about. Refer to the [override files](/terraform/language/files/override) documentation for more information.",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1632142060",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 35315,
        "pr_file": "website/docs/language/style.mdx",
        "discussion_id": "1632142060",
        "commented_code": "@@ -89,23 +89,22 @@ For more information, refer to the [Terraform `validate` documentation](/terrafo\n \n ## File names\n \n-We recommend the following file naming conventions:\n+We recommend the following file naming conventions for organizing your configuration files:\n \n-- A `backend.tf` file that contains your [backend configuration](/terraform/language/settings/backends/configuration). You can define multiple `terraform` blocks in your configuration to separate your backend configuration from your Terraform and provider versioning configuration. \n-- A `main.tf` file that contains all resource and data source blocks.\n-- A `outputs.tf` file that contains all output blocks in alphabetical order.\n-- A `providers.tf` file that contains all `provider` blocks and configuration.\n-- A `terraform.tf` file that contains a single `terraform` block which defines your `required_version` and `required_providers`.\n-- A `variables.tf` file that contains all variable blocks in alphabetical order.\n-- A `locals.tf` file that contains local values. Refer to [local values](#local-values) for more information.\n-- A `override.tf` file that contains override definitions for your configuration. Terraform loads this and all files ending with `_override.tf` last. Use them sparingly and add comments to the original resource definitions, as these overrides make your code harder to reason about. Refer to the [override files](/terraform/language/files/override) documentation for more information.\n+- `backend.tf`: Your [backend configuration](/terraform/language/settings/backends/configuration). You can define multiple `terraform` blocks in your configuration to separate your backend configuration from your Terraform and provider versioning configuration. \n+- `main.tf`: Resource and data source blocks.\n+- `outputs.tf`: Output blocks in alphabetical order.\n+- `providers.tf`: Your `provider` blocks and configuration.\n+- `terraform.tf`: A single `terraform` block which defines your `required_version` and `required_providers`.\n+- `variables.tf`: Variable blocks in alphabetical order.\n+- `locals.tf`: Local values. Refer to [local values](#local-values) for more information.\n+- `override.tf`: Override definitions for your configuration. Terraform loads this and all files ending with `_override.tf` last. Use them sparingly and add comments to the original resource definitions, as these overrides make your code harder to reason about. Refer to the [override files](/terraform/language/files/override) documentation for more information.",
        "comment_created_at": "2024-06-09T00:59:21+00:00",
        "comment_author": "cadamini",
        "comment_body": "```suggestion\r\n- `backend.tf`: Your [backend configuration](/terraform/language/settings/backends/configuration). You can define multiple `terraform` blocks in your configuration to separate your backend configuration from your Terraform and provider versioning configuration. \r\n- `main.tf`: Resource and data source blocks\r\n- `outputs.tf`: Output blocks in alphabetical order\r\n- `providers.tf`: Your `provider` blocks and configuration\r\n- `terraform.tf`: A single `terraform` block which defines your `required_version` and `required_providers`\r\n- `variables.tf`: Variable blocks in alphabetical order\r\n- `locals.tf`: Local values. Refer to [local values](#local-values) for more information.\r\n- `override.tf`: Override definitions for your configuration. Terraform loads this and all files ending with `_override.tf` last. Use them sparingly and add comments to the original resource definitions, as these overrides make your code harder to reason about. Refer to the [override files](/terraform/language/files/override) documentation for more information.\r\n```\r\n\r\nperiods required for incomplete sentences?",
        "pr_file_module": null
      }
    ]
  }
]