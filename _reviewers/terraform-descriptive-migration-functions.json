[
  {
    "discussion_id": "1959568941",
    "pr_number": 36463,
    "pr_file": "scripts/changelog.sh",
    "created_at": "2025-02-18T11:37:56+00:00",
    "commented_code": "NEXT_VERSION=$(npx -y changie@$CHANGIE_VERSION next minor)\n     # Remove all existing per-release changelogs\n     rm ./.changes/*.*.*.md\n-    # Remove all unreleased changes\n-    rm ./.changes/unreleased/*.yaml\n-    # Remove all backported changes\n-    rm ./.changes/backported/*.yaml\n+    \n     # Create a new empty version file for the next minor version\n     touch ./.changes/$NEXT_VERSION.md\n     \n+    LATEST_MAJOR_MINOR=$(echo $LATEST_VERSION | awk -F. '{print $1\".\"$2}')\n+    NEXT_MAJOR_MINOR=$(echo $NEXT_VERSION | awk -F. '{print $1\".\"$2}')\n+    \n+    # Create a new changes directory for the next minor version\n+    mkdir ./.changes/v$NEXT_MAJOR_MINOR\n+    touch ./.changes/v$NEXT_MAJOR_MINOR/.gitkeep\n+",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1959568941",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36463,
        "pr_file": "scripts/changelog.sh",
        "discussion_id": "1959568941",
        "commented_code": "@@ -150,33 +150,43 @@ function nextminor {\n     NEXT_VERSION=$(npx -y changie@$CHANGIE_VERSION next minor)\n     # Remove all existing per-release changelogs\n     rm ./.changes/*.*.*.md\n-    # Remove all unreleased changes\n-    rm ./.changes/unreleased/*.yaml\n-    # Remove all backported changes\n-    rm ./.changes/backported/*.yaml\n+    \n     # Create a new empty version file for the next minor version\n     touch ./.changes/$NEXT_VERSION.md\n     \n+    LATEST_MAJOR_MINOR=$(echo $LATEST_VERSION | awk -F. '{print $1\".\"$2}')\n+    NEXT_MAJOR_MINOR=$(echo $NEXT_VERSION | awk -F. '{print $1\".\"$2}')\n+    \n+    # Create a new changes directory for the next minor version\n+    mkdir ./.changes/v$NEXT_MAJOR_MINOR\n+    touch ./.changes/v$NEXT_MAJOR_MINOR/.gitkeep\n+",
        "comment_created_at": "2025-02-18T11:37:56+00:00",
        "comment_author": "SarahFrench",
        "comment_body": "idea/nit: as well as making the new changes folder, could this function also clear any stale change files for past versions that are still on the main branch?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1917144795",
    "pr_number": 36334,
    "pr_file": "scripts/changelog.sh",
    "created_at": "2025-01-15T18:18:25+00:00",
    "commented_code": "rm ./.changes/*.*.*.md\n     # Remove all unreleased changes\n     rm ./.changes/unreleased/*.yaml\n+    # Remove all backported changes\n+    rm ./.changes/backported/*.yaml\n     # Create a new empty version file for the next minor version\n     touch ./.changes/$NEXT_VERSION.md\n     \n     generate \"dev\"\n }\n \n+# This function is expected to be run on the branch of the last minor release. It will make sure\n+# that backports work properly\n+function maintenancerelease {",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1917144795",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36334,
        "pr_file": "scripts/changelog.sh",
        "discussion_id": "1917144795",
        "commented_code": "@@ -137,22 +150,46 @@ function nextminor {\n     rm ./.changes/*.*.*.md\n     # Remove all unreleased changes\n     rm ./.changes/unreleased/*.yaml\n+    # Remove all backported changes\n+    rm ./.changes/backported/*.yaml\n     # Create a new empty version file for the next minor version\n     touch ./.changes/$NEXT_VERSION.md\n     \n     generate \"dev\"\n }\n \n+# This function is expected to be run on the branch of the last minor release. It will make sure\n+# that backports work properly\n+function maintenancerelease {",
        "comment_created_at": "2025-01-15T18:18:25+00:00",
        "comment_author": "SarahFrench",
        "comment_body": "I'm still learning the release process and what how words are used when talking about it. When looking at the `Is there a Terraform CLI release this week?` doc it looks like maintenance branch is just a different way to refer to any release branch. On the other hand `maintenancerelease` function looks like it'd only be used for backporting from the maintenance/release branch for the previous minor version. Could it be called something like `backportrelease` to make that clearer?\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1918157547",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36334,
        "pr_file": "scripts/changelog.sh",
        "discussion_id": "1917144795",
        "commented_code": "@@ -137,22 +150,46 @@ function nextminor {\n     rm ./.changes/*.*.*.md\n     # Remove all unreleased changes\n     rm ./.changes/unreleased/*.yaml\n+    # Remove all backported changes\n+    rm ./.changes/backported/*.yaml\n     # Create a new empty version file for the next minor version\n     touch ./.changes/$NEXT_VERSION.md\n     \n     generate \"dev\"\n }\n \n+# This function is expected to be run on the branch of the last minor release. It will make sure\n+# that backports work properly\n+function maintenancerelease {",
        "comment_created_at": "2025-01-16T09:54:47+00:00",
        "comment_author": "DanielMSchmidt",
        "comment_body": ">  looks like it'd only be used for backporting from the maintenance/release branch for the previous minor version\r\n\r\nThe `maintenancerelease` function is used when you create a new maintenance branch to set it up as a target for backporting. Words are hard, I'm not sure if `maintenancerelease` describes it accurately, but I would hope the help text might be a good hint. My second best ideas were `runthisonanewmaintenancebranch` and `runthisonmainafterbranchingoffamaintenancebranch` seemed too verbose ðŸ™ˆ ",
        "pr_file_module": null
      },
      {
        "comment_id": "1918166672",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36334,
        "pr_file": "scripts/changelog.sh",
        "discussion_id": "1917144795",
        "commented_code": "@@ -137,22 +150,46 @@ function nextminor {\n     rm ./.changes/*.*.*.md\n     # Remove all unreleased changes\n     rm ./.changes/unreleased/*.yaml\n+    # Remove all backported changes\n+    rm ./.changes/backported/*.yaml\n     # Create a new empty version file for the next minor version\n     touch ./.changes/$NEXT_VERSION.md\n     \n     generate \"dev\"\n }\n \n+# This function is expected to be run on the branch of the last minor release. It will make sure\n+# that backports work properly\n+function maintenancerelease {",
        "comment_created_at": "2025-01-16T10:00:49+00:00",
        "comment_author": "radeksimko",
        "comment_body": "Just so I also understand the meaning - am I right that `maintenancerelease` is for `patch` releases of _previous_ major series? i.e. if we're already working on 1.12 (i.e. `main` == effectively 1.12) like now then we use this to release `1.11.X`, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "1918179058",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36334,
        "pr_file": "scripts/changelog.sh",
        "discussion_id": "1917144795",
        "commented_code": "@@ -137,22 +150,46 @@ function nextminor {\n     rm ./.changes/*.*.*.md\n     # Remove all unreleased changes\n     rm ./.changes/unreleased/*.yaml\n+    # Remove all backported changes\n+    rm ./.changes/backported/*.yaml\n     # Create a new empty version file for the next minor version\n     touch ./.changes/$NEXT_VERSION.md\n     \n     generate \"dev\"\n }\n \n+# This function is expected to be run on the branch of the last minor release. It will make sure\n+# that backports work properly\n+function maintenancerelease {",
        "comment_created_at": "2025-01-16T10:09:17+00:00",
        "comment_author": "DanielMSchmidt",
        "comment_body": "Kind of, you would use it when branching of the `v1.11` branch to make sure that branch will handle the backports only",
        "pr_file_module": null
      }
    ]
  }
]