[
  {
    "discussion_id": "2112827714",
    "pr_number": 37092,
    "pr_file": "docs/plugin-protocol/tfplugin5.proto",
    "created_at": "2025-05-28T22:07:40+00:00",
    "commented_code": "// when include_resource_object is set to true, the provider should\n         // include the full resource object for each result\n         bool include_resource_object = 3;\n+\n+        // The maximum number of results that Terraform is expecting.\n+        // The stream will stop, once this limit is reached.\n+        int64 limit = 4;",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2112827714",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37092,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2112827714",
        "commented_code": "@@ -831,6 +831,10 @@ message ListResource {\n         // when include_resource_object is set to true, the provider should\n         // include the full resource object for each result\n         bool include_resource_object = 3;\n+\n+        // The maximum number of results that Terraform is expecting.\n+        // The stream will stop, once this limit is reached.\n+        int64 limit = 4;",
        "comment_created_at": "2025-05-28T22:07:40+00:00",
        "comment_author": "bbasata",
        "comment_body": "Checking my understanding:\r\n\r\nFor a provider implementation, is this an advisory/optional limit or a best-effort/required limit?\r\n\r\nIn other words: is the provider responsible for making a best-effort attempt to send no more than `limit` events? I want to say \"yes, the provider is responsible for best-effort.\"",
        "pr_file_module": null
      },
      {
        "comment_id": "2123651309",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37092,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2112827714",
        "commented_code": "@@ -831,6 +831,10 @@ message ListResource {\n         // when include_resource_object is set to true, the provider should\n         // include the full resource object for each result\n         bool include_resource_object = 3;\n+\n+        // The maximum number of results that Terraform is expecting.\n+        // The stream will stop, once this limit is reached.\n+        int64 limit = 4;",
        "comment_created_at": "2025-06-03T12:22:32+00:00",
        "comment_author": "dsa0x",
        "comment_body": "We include the limit as an fyi for the provider (perhaps to save it from overfetching), but if the provider does not adhere to it, we still enforce that limit in core.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091471302",
    "pr_number": 37007,
    "pr_file": "docs/plugin-protocol/tfplugin5.proto",
    "created_at": "2025-05-15T15:34:18+00:00",
    "commented_code": "FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2091471302",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37007,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2091471302",
        "commented_code": "@@ -811,3 +819,45 @@ message CallFunction {\n         FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;",
        "comment_created_at": "2025-05-15T15:34:18+00:00",
        "comment_author": "bbasata",
        "comment_body": "Checking my assumptions:\r\n\r\nIs it completely the provider's decision re: whether or not to return `resource_object`? Possibly via information in the list config, as defined in the list config schema?\r\n\r\nOr do we want the request message to have an explicit `include` (or similar) field that is not schema-dependent?\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2091488131",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37007,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2091471302",
        "commented_code": "@@ -811,3 +819,45 @@ message CallFunction {\n         FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;",
        "comment_created_at": "2025-05-15T15:42:45+00:00",
        "comment_author": "dbanck",
        "comment_body": "The current idea is to have an attribute in the config (maybe something like `include_resource`) and, if that field is set, the provider should include the `resource_object`.\r\n\r\nShould this be made more explicit with an additional field in the proto request (outside the config)? I imagine that having a field at protocol level removes any ambiguity",
        "pr_file_module": null
      },
      {
        "comment_id": "2091490344",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37007,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2091471302",
        "commented_code": "@@ -811,3 +819,45 @@ message CallFunction {\n         FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;",
        "comment_created_at": "2025-05-15T15:43:45+00:00",
        "comment_author": "jbardin",
        "comment_body": "yes, if resource data is optional, we should probably directly include whether it's requested or not in the request.",
        "pr_file_module": null
      },
      {
        "comment_id": "2091492689",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37007,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2091471302",
        "commented_code": "@@ -811,3 +819,45 @@ message CallFunction {\n         FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;",
        "comment_created_at": "2025-05-15T15:44:43+00:00",
        "comment_author": "dsa0x",
        "comment_body": "If we want that attribute standardized, then perhaps it should be in the proto definition",
        "pr_file_module": null
      },
      {
        "comment_id": "2091499126",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37007,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2091471302",
        "commented_code": "@@ -811,3 +819,45 @@ message CallFunction {\n         FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;",
        "comment_created_at": "2025-05-15T15:47:44+00:00",
        "comment_author": "dsa0x",
        "comment_body": "If it is in the proto file, what does it mean to the sdk/framework when the attribute is set? Would the sdk invalidate a provider response that does not include the resource despite it being requested for, or is the attribute simply a suggestion?",
        "pr_file_module": null
      },
      {
        "comment_id": "2091759985",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37007,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2091471302",
        "commented_code": "@@ -811,3 +819,45 @@ message CallFunction {\n         FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;",
        "comment_created_at": "2025-05-15T18:32:38+00:00",
        "comment_author": "bbasata",
        "comment_body": "> If it is in the proto file, what does it mean to the sdk/framework when the attribute is set? Would the sdk invalidate a provider response that does not include the resource despite it being requested for, or is the attribute simply a suggestion?\r\n\r\nI imagine the SDK/Framework would simply pass this along to the provider implementation, without inspecting the response.\r\n\r\nWe _could_ raise a \"provider implementation error\" if the attribute is set & the returned resource is absent. I don't see a lot of value in that; open to changing my opinion on it, though.",
        "pr_file_module": null
      },
      {
        "comment_id": "2092902515",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37007,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2091471302",
        "commented_code": "@@ -811,3 +819,45 @@ message CallFunction {\n         FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;",
        "comment_created_at": "2025-05-16T11:53:17+00:00",
        "comment_author": "dbanck",
        "comment_body": "I will add a `include_resource_object` field to the request",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091496582",
    "pr_number": 37007,
    "pr_file": "docs/plugin-protocol/tfplugin5.proto",
    "created_at": "2025-05-15T15:46:35+00:00",
    "commented_code": "FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;\n+        }\n+\n+        oneof response {",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2091496582",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37007,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2091496582",
        "commented_code": "@@ -811,3 +819,45 @@ message CallFunction {\n         FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;\n+        }\n+\n+        oneof response {",
        "comment_created_at": "2025-05-15T15:46:35+00:00",
        "comment_author": "jbardin",
        "comment_body": "I don't know if we want `oneof` here, doesn't that preclude returning both? Terraform has typically assumed there will always be both a result and a diagnostic in every response. While `ListResource` may not require a result with an error like `ApplyResourceChange` does, but there may still be warnings included with a valid result.",
        "pr_file_module": null
      },
      {
        "comment_id": "2092898579",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37007,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2091496582",
        "commented_code": "@@ -811,3 +819,45 @@ message CallFunction {\n         FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;\n+        }\n+\n+        oneof response {",
        "comment_created_at": "2025-05-16T11:50:24+00:00",
        "comment_author": "dbanck",
        "comment_body": "yeah, returning a warning in combination with a result won't be possible with `oneof` 🤔 \r\n\r\nWe could flatten the `Event` message to something like this:\r\n```proto\r\nmessage Event {\r\n    // identity is the resource identity data of the resource instance.\r\n    ResourceIdentityData identity = 1;\r\n\r\n    // display_name can be displayed in a UI to make it easier for humans to identify a resource\r\n    string display_name = 2;\r\n\r\n    // optional resource object which can be useful when combining list blocks in configuration\r\n    optional DynamicValue resource_object = 3;\r\n\r\n    // A warning or error diagnostics for this event\r\n    repeated Diagnostic diagnostic = 4;\r\n}\r\n```\r\n\r\nThis means that we cannot return a single error without the additional fields (all being null?). But maybe that's OK?",
        "pr_file_module": null
      },
      {
        "comment_id": "2092913921",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 37007,
        "pr_file": "docs/plugin-protocol/tfplugin5.proto",
        "discussion_id": "2091496582",
        "commented_code": "@@ -811,3 +819,45 @@ message CallFunction {\n         FunctionError error = 2;\n     }\n }\n+\n+message ListResource {\n+    message Request {\n+        // type_name is the list resource type name.\n+        string type_name = 1;\n+\n+        // configuration is the list ConfigSchema-based configuration data.\n+        DynamicValue config = 2;\n+    }\n+\n+    message Event {\n+        // Resource contains all data associated with each resource instance.\n+        message Result {\n+            // identity is the resource identity data of the resource instance.\n+            ResourceIdentityData identity = 1;\n+\n+            // display_name can be displayed in a UI to make it easier for humans to identify a resource\n+            string display_name = 2;\n+\n+            // optional resource object which can be useful when combining list blocks in configuration\n+            DynamicValue resource_object = 3;\n+        }\n+\n+        oneof response {",
        "comment_created_at": "2025-05-16T12:01:10+00:00",
        "comment_author": "dsa0x",
        "comment_body": "> This means that we cannot return a single error without the additional fields \r\n\r\nThis is what is typical for other RPCs, so I would also assume it is okay.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1967557375",
    "pr_number": 36482,
    "pr_file": "internal/rpcapi/terraform1/stacks/stacks.proto",
    "created_at": "2025-02-24T12:31:19+00:00",
    "commented_code": "// of a stack inspector handle.\n   rpc InspectExpressionResult(InspectExpressionResult.Request)\n       returns (InspectExpressionResult.Response);\n+  // Open a previously-saved Terraform state, returning a handle that can be\n+  // used with other operations. This is distinct from OpenState because it\n+  // means core state rather than stack state.\n+  rpc OpenTerraformState(OpenTerraformState.Request) returns (OpenTerraformState.Response);\n+  // Close a previously-opened Terraform state using its handle.\n+  rpc CloseTerraformState(CloseTerraformState.Request) returns (CloseTerraformState.Response);\n+  // MigrateTerraformState migrates a Terraform state into Stacks state using\n+  // a mapping of addresses.\n+  rpc MigrateTerraformState(MigrateTerraformState.Request) returns (stream MigrateTerraformState.Event);\n+}\n+\n+// OpenTerraformState opens a previously-saved Terraform state, returning a\n+// handle that can be used with other operations. This is distinct from\n+// OpenState because it means core state rather than stack state.\n+message OpenTerraformState {\n+  message Request {\n+    oneof state {\n+      // We can open a state based on configuration that has been initialized.\n+      string config_path = 1;\n+\n+      // Or a state file based on raw bytes.\n+      bytes raw = 2;\n+    }\n+  }\n+  message Response {\n+    int64 state_handle = 1;\n+    repeated terraform1.Diagnostic diagnostics = 2;\n+  }\n+}\n+\n+// CloseTerraformState closes a previously-opened Terraform state using its\n+// handle.\n+message CloseTerraformState {\n+  message Request {\n+    int64 state_handle = 1;\n+  }\n+  message Response {\n+  }\n+}\n+\n+// MigrateTerraformState migrates a Terraform state into Stacks state using\n+// a mapping of addresses.\n+//\n+// Only resources and modules from the root module should be specified. All\n+// resources in nested modules maintain their nested structure within the new\n+// components the base modules were moved into.\n+message MigrateTerraformState {\n+  message Request {\n+    int64 state_handle = 1; // previously opened Terraform state\n+    int64 config_handle = 2; // new stacks configuration\n+    int64 dependency_locks_handle = 3;\n+    int64 provider_cache_handle = 4;\n+\n+    // resource_address_map maps resources in the root module to their new\n+    // components. The keys are the addresses of the resources in the Terraform\n+    // state, and the values are the names of the new components.\n+    //\n+    // eg. resource_type.resource_name -> component_name\n+    map<string, string> resource_address_map = 5;\n+\n+    // module_address_map maps modules in the root module to their new\n+    // components. The keys are the module names in the Terraform state, and\n+    // the values are the names of the new components.\n+    //\n+    // eg. module_name -> component_name\n+    map<string, string> module_address_map = 6;",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1967557375",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36482,
        "pr_file": "internal/rpcapi/terraform1/stacks/stacks.proto",
        "discussion_id": "1967557375",
        "commented_code": "@@ -51,6 +51,79 @@ service Stacks {\n   // of a stack inspector handle.\n   rpc InspectExpressionResult(InspectExpressionResult.Request)\n       returns (InspectExpressionResult.Response);\n+  // Open a previously-saved Terraform state, returning a handle that can be\n+  // used with other operations. This is distinct from OpenState because it\n+  // means core state rather than stack state.\n+  rpc OpenTerraformState(OpenTerraformState.Request) returns (OpenTerraformState.Response);\n+  // Close a previously-opened Terraform state using its handle.\n+  rpc CloseTerraformState(CloseTerraformState.Request) returns (CloseTerraformState.Response);\n+  // MigrateTerraformState migrates a Terraform state into Stacks state using\n+  // a mapping of addresses.\n+  rpc MigrateTerraformState(MigrateTerraformState.Request) returns (stream MigrateTerraformState.Event);\n+}\n+\n+// OpenTerraformState opens a previously-saved Terraform state, returning a\n+// handle that can be used with other operations. This is distinct from\n+// OpenState because it means core state rather than stack state.\n+message OpenTerraformState {\n+  message Request {\n+    oneof state {\n+      // We can open a state based on configuration that has been initialized.\n+      string config_path = 1;\n+\n+      // Or a state file based on raw bytes.\n+      bytes raw = 2;\n+    }\n+  }\n+  message Response {\n+    int64 state_handle = 1;\n+    repeated terraform1.Diagnostic diagnostics = 2;\n+  }\n+}\n+\n+// CloseTerraformState closes a previously-opened Terraform state using its\n+// handle.\n+message CloseTerraformState {\n+  message Request {\n+    int64 state_handle = 1;\n+  }\n+  message Response {\n+  }\n+}\n+\n+// MigrateTerraformState migrates a Terraform state into Stacks state using\n+// a mapping of addresses.\n+//\n+// Only resources and modules from the root module should be specified. All\n+// resources in nested modules maintain their nested structure within the new\n+// components the base modules were moved into.\n+message MigrateTerraformState {\n+  message Request {\n+    int64 state_handle = 1; // previously opened Terraform state\n+    int64 config_handle = 2; // new stacks configuration\n+    int64 dependency_locks_handle = 3;\n+    int64 provider_cache_handle = 4;\n+\n+    // resource_address_map maps resources in the root module to their new\n+    // components. The keys are the addresses of the resources in the Terraform\n+    // state, and the values are the names of the new components.\n+    //\n+    // eg. resource_type.resource_name -> component_name\n+    map<string, string> resource_address_map = 5;\n+\n+    // module_address_map maps modules in the root module to their new\n+    // components. The keys are the module names in the Terraform state, and\n+    // the values are the names of the new components.\n+    //\n+    // eg. module_name -> component_name\n+    map<string, string> module_address_map = 6;",
        "comment_created_at": "2025-02-24T12:31:19+00:00",
        "comment_author": "liamcervante",
        "comment_body": "```suggestion\r\n    message Mapping {\r\n      // resource_address_map maps resources in the root module to their new\r\n      // components. The keys are the addresses of the resources in the Terraform\r\n      // state, and the values are the names of the new components.\r\n      //\r\n      // eg. resource_type.resource_name -> component_name\r\n      map<string, string> resource_address_map = 1;\r\n\r\n      // module_address_map maps modules in the root module to their new\r\n      // components. The keys are the module names in the Terraform state, and\r\n      // the values are the names of the new components.\r\n      //\r\n      // eg. module_name -> component_name\r\n      map<string, string> module_address_map = 2;\r\n    }\r\n    \r\n    oneof mapping {\r\n      Mapping simple = 5;\r\n    }\r\n```\r\n\r\nI know this is from the prototype (and maybe the RFC), but we can make this more robust for changes to the mapping in future by wrapping the current approach into a nested message.\r\n\r\nThis way if we add another more complication mapping in the future, we can add extra entries into the `oneof` for each new mapping type and then do behaviour switching between them.",
        "pr_file_module": null
      },
      {
        "comment_id": "1968048181",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36482,
        "pr_file": "internal/rpcapi/terraform1/stacks/stacks.proto",
        "discussion_id": "1967557375",
        "commented_code": "@@ -51,6 +51,79 @@ service Stacks {\n   // of a stack inspector handle.\n   rpc InspectExpressionResult(InspectExpressionResult.Request)\n       returns (InspectExpressionResult.Response);\n+  // Open a previously-saved Terraform state, returning a handle that can be\n+  // used with other operations. This is distinct from OpenState because it\n+  // means core state rather than stack state.\n+  rpc OpenTerraformState(OpenTerraformState.Request) returns (OpenTerraformState.Response);\n+  // Close a previously-opened Terraform state using its handle.\n+  rpc CloseTerraformState(CloseTerraformState.Request) returns (CloseTerraformState.Response);\n+  // MigrateTerraformState migrates a Terraform state into Stacks state using\n+  // a mapping of addresses.\n+  rpc MigrateTerraformState(MigrateTerraformState.Request) returns (stream MigrateTerraformState.Event);\n+}\n+\n+// OpenTerraformState opens a previously-saved Terraform state, returning a\n+// handle that can be used with other operations. This is distinct from\n+// OpenState because it means core state rather than stack state.\n+message OpenTerraformState {\n+  message Request {\n+    oneof state {\n+      // We can open a state based on configuration that has been initialized.\n+      string config_path = 1;\n+\n+      // Or a state file based on raw bytes.\n+      bytes raw = 2;\n+    }\n+  }\n+  message Response {\n+    int64 state_handle = 1;\n+    repeated terraform1.Diagnostic diagnostics = 2;\n+  }\n+}\n+\n+// CloseTerraformState closes a previously-opened Terraform state using its\n+// handle.\n+message CloseTerraformState {\n+  message Request {\n+    int64 state_handle = 1;\n+  }\n+  message Response {\n+  }\n+}\n+\n+// MigrateTerraformState migrates a Terraform state into Stacks state using\n+// a mapping of addresses.\n+//\n+// Only resources and modules from the root module should be specified. All\n+// resources in nested modules maintain their nested structure within the new\n+// components the base modules were moved into.\n+message MigrateTerraformState {\n+  message Request {\n+    int64 state_handle = 1; // previously opened Terraform state\n+    int64 config_handle = 2; // new stacks configuration\n+    int64 dependency_locks_handle = 3;\n+    int64 provider_cache_handle = 4;\n+\n+    // resource_address_map maps resources in the root module to their new\n+    // components. The keys are the addresses of the resources in the Terraform\n+    // state, and the values are the names of the new components.\n+    //\n+    // eg. resource_type.resource_name -> component_name\n+    map<string, string> resource_address_map = 5;\n+\n+    // module_address_map maps modules in the root module to their new\n+    // components. The keys are the module names in the Terraform state, and\n+    // the values are the names of the new components.\n+    //\n+    // eg. module_name -> component_name\n+    map<string, string> module_address_map = 6;",
        "comment_created_at": "2025-02-24T16:54:35+00:00",
        "comment_author": "dsa0x",
        "comment_body": "Would this not imply that they cannot have both resource and module mapping? Why would we want to restrict that? They may potentially want to select only a few resources from a certain module, and all from the other.",
        "pr_file_module": null
      },
      {
        "comment_id": "1968050672",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36482,
        "pr_file": "internal/rpcapi/terraform1/stacks/stacks.proto",
        "discussion_id": "1967557375",
        "commented_code": "@@ -51,6 +51,79 @@ service Stacks {\n   // of a stack inspector handle.\n   rpc InspectExpressionResult(InspectExpressionResult.Request)\n       returns (InspectExpressionResult.Response);\n+  // Open a previously-saved Terraform state, returning a handle that can be\n+  // used with other operations. This is distinct from OpenState because it\n+  // means core state rather than stack state.\n+  rpc OpenTerraformState(OpenTerraformState.Request) returns (OpenTerraformState.Response);\n+  // Close a previously-opened Terraform state using its handle.\n+  rpc CloseTerraformState(CloseTerraformState.Request) returns (CloseTerraformState.Response);\n+  // MigrateTerraformState migrates a Terraform state into Stacks state using\n+  // a mapping of addresses.\n+  rpc MigrateTerraformState(MigrateTerraformState.Request) returns (stream MigrateTerraformState.Event);\n+}\n+\n+// OpenTerraformState opens a previously-saved Terraform state, returning a\n+// handle that can be used with other operations. This is distinct from\n+// OpenState because it means core state rather than stack state.\n+message OpenTerraformState {\n+  message Request {\n+    oneof state {\n+      // We can open a state based on configuration that has been initialized.\n+      string config_path = 1;\n+\n+      // Or a state file based on raw bytes.\n+      bytes raw = 2;\n+    }\n+  }\n+  message Response {\n+    int64 state_handle = 1;\n+    repeated terraform1.Diagnostic diagnostics = 2;\n+  }\n+}\n+\n+// CloseTerraformState closes a previously-opened Terraform state using its\n+// handle.\n+message CloseTerraformState {\n+  message Request {\n+    int64 state_handle = 1;\n+  }\n+  message Response {\n+  }\n+}\n+\n+// MigrateTerraformState migrates a Terraform state into Stacks state using\n+// a mapping of addresses.\n+//\n+// Only resources and modules from the root module should be specified. All\n+// resources in nested modules maintain their nested structure within the new\n+// components the base modules were moved into.\n+message MigrateTerraformState {\n+  message Request {\n+    int64 state_handle = 1; // previously opened Terraform state\n+    int64 config_handle = 2; // new stacks configuration\n+    int64 dependency_locks_handle = 3;\n+    int64 provider_cache_handle = 4;\n+\n+    // resource_address_map maps resources in the root module to their new\n+    // components. The keys are the addresses of the resources in the Terraform\n+    // state, and the values are the names of the new components.\n+    //\n+    // eg. resource_type.resource_name -> component_name\n+    map<string, string> resource_address_map = 5;\n+\n+    // module_address_map maps modules in the root module to their new\n+    // components. The keys are the module names in the Terraform state, and\n+    // the values are the names of the new components.\n+    //\n+    // eg. module_name -> component_name\n+    map<string, string> module_address_map = 6;",
        "comment_created_at": "2025-02-24T16:56:08+00:00",
        "comment_author": "dsa0x",
        "comment_body": "Perhaps a nested map instead? i.e\r\n```\r\n oneof mapping {\r\n      map<string, Mapping> simple = 5;\r\n    }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1969133501",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36482,
        "pr_file": "internal/rpcapi/terraform1/stacks/stacks.proto",
        "discussion_id": "1967557375",
        "commented_code": "@@ -51,6 +51,79 @@ service Stacks {\n   // of a stack inspector handle.\n   rpc InspectExpressionResult(InspectExpressionResult.Request)\n       returns (InspectExpressionResult.Response);\n+  // Open a previously-saved Terraform state, returning a handle that can be\n+  // used with other operations. This is distinct from OpenState because it\n+  // means core state rather than stack state.\n+  rpc OpenTerraformState(OpenTerraformState.Request) returns (OpenTerraformState.Response);\n+  // Close a previously-opened Terraform state using its handle.\n+  rpc CloseTerraformState(CloseTerraformState.Request) returns (CloseTerraformState.Response);\n+  // MigrateTerraformState migrates a Terraform state into Stacks state using\n+  // a mapping of addresses.\n+  rpc MigrateTerraformState(MigrateTerraformState.Request) returns (stream MigrateTerraformState.Event);\n+}\n+\n+// OpenTerraformState opens a previously-saved Terraform state, returning a\n+// handle that can be used with other operations. This is distinct from\n+// OpenState because it means core state rather than stack state.\n+message OpenTerraformState {\n+  message Request {\n+    oneof state {\n+      // We can open a state based on configuration that has been initialized.\n+      string config_path = 1;\n+\n+      // Or a state file based on raw bytes.\n+      bytes raw = 2;\n+    }\n+  }\n+  message Response {\n+    int64 state_handle = 1;\n+    repeated terraform1.Diagnostic diagnostics = 2;\n+  }\n+}\n+\n+// CloseTerraformState closes a previously-opened Terraform state using its\n+// handle.\n+message CloseTerraformState {\n+  message Request {\n+    int64 state_handle = 1;\n+  }\n+  message Response {\n+  }\n+}\n+\n+// MigrateTerraformState migrates a Terraform state into Stacks state using\n+// a mapping of addresses.\n+//\n+// Only resources and modules from the root module should be specified. All\n+// resources in nested modules maintain their nested structure within the new\n+// components the base modules were moved into.\n+message MigrateTerraformState {\n+  message Request {\n+    int64 state_handle = 1; // previously opened Terraform state\n+    int64 config_handle = 2; // new stacks configuration\n+    int64 dependency_locks_handle = 3;\n+    int64 provider_cache_handle = 4;\n+\n+    // resource_address_map maps resources in the root module to their new\n+    // components. The keys are the addresses of the resources in the Terraform\n+    // state, and the values are the names of the new components.\n+    //\n+    // eg. resource_type.resource_name -> component_name\n+    map<string, string> resource_address_map = 5;\n+\n+    // module_address_map maps modules in the root module to their new\n+    // components. The keys are the module names in the Terraform state, and\n+    // the values are the names of the new components.\n+    //\n+    // eg. module_name -> component_name\n+    map<string, string> module_address_map = 6;",
        "comment_created_at": "2025-02-25T07:34:16+00:00",
        "comment_author": "liamcervante",
        "comment_body": "You can't put repeated or map fields into a `oneof`. In my suggestion both the resource and module mappings are contained within the nested mapping - there are maps inside it. Then a more complicated mapping could follow in the `oneof` later that also entirely contains all the mapping information for that approach.",
        "pr_file_module": null
      },
      {
        "comment_id": "1969352853",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36482,
        "pr_file": "internal/rpcapi/terraform1/stacks/stacks.proto",
        "discussion_id": "1967557375",
        "commented_code": "@@ -51,6 +51,79 @@ service Stacks {\n   // of a stack inspector handle.\n   rpc InspectExpressionResult(InspectExpressionResult.Request)\n       returns (InspectExpressionResult.Response);\n+  // Open a previously-saved Terraform state, returning a handle that can be\n+  // used with other operations. This is distinct from OpenState because it\n+  // means core state rather than stack state.\n+  rpc OpenTerraformState(OpenTerraformState.Request) returns (OpenTerraformState.Response);\n+  // Close a previously-opened Terraform state using its handle.\n+  rpc CloseTerraformState(CloseTerraformState.Request) returns (CloseTerraformState.Response);\n+  // MigrateTerraformState migrates a Terraform state into Stacks state using\n+  // a mapping of addresses.\n+  rpc MigrateTerraformState(MigrateTerraformState.Request) returns (stream MigrateTerraformState.Event);\n+}\n+\n+// OpenTerraformState opens a previously-saved Terraform state, returning a\n+// handle that can be used with other operations. This is distinct from\n+// OpenState because it means core state rather than stack state.\n+message OpenTerraformState {\n+  message Request {\n+    oneof state {\n+      // We can open a state based on configuration that has been initialized.\n+      string config_path = 1;\n+\n+      // Or a state file based on raw bytes.\n+      bytes raw = 2;\n+    }\n+  }\n+  message Response {\n+    int64 state_handle = 1;\n+    repeated terraform1.Diagnostic diagnostics = 2;\n+  }\n+}\n+\n+// CloseTerraformState closes a previously-opened Terraform state using its\n+// handle.\n+message CloseTerraformState {\n+  message Request {\n+    int64 state_handle = 1;\n+  }\n+  message Response {\n+  }\n+}\n+\n+// MigrateTerraformState migrates a Terraform state into Stacks state using\n+// a mapping of addresses.\n+//\n+// Only resources and modules from the root module should be specified. All\n+// resources in nested modules maintain their nested structure within the new\n+// components the base modules were moved into.\n+message MigrateTerraformState {\n+  message Request {\n+    int64 state_handle = 1; // previously opened Terraform state\n+    int64 config_handle = 2; // new stacks configuration\n+    int64 dependency_locks_handle = 3;\n+    int64 provider_cache_handle = 4;\n+\n+    // resource_address_map maps resources in the root module to their new\n+    // components. The keys are the addresses of the resources in the Terraform\n+    // state, and the values are the names of the new components.\n+    //\n+    // eg. resource_type.resource_name -> component_name\n+    map<string, string> resource_address_map = 5;\n+\n+    // module_address_map maps modules in the root module to their new\n+    // components. The keys are the module names in the Terraform state, and\n+    // the values are the names of the new components.\n+    //\n+    // eg. module_name -> component_name\n+    map<string, string> module_address_map = 6;",
        "comment_created_at": "2025-02-25T09:24:58+00:00",
        "comment_author": "dsa0x",
        "comment_body": "What do you think of https://github.com/hashicorp/terraform/pull/36482/commits/bd6c0b5b1bc1fd70192ac8e0ee920d219a409fa2#diff-e1c0fb64413bb4c69eb323fdd60c19a03407d986c0059994e59daf8486210294? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1969367660",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36482,
        "pr_file": "internal/rpcapi/terraform1/stacks/stacks.proto",
        "discussion_id": "1967557375",
        "commented_code": "@@ -51,6 +51,79 @@ service Stacks {\n   // of a stack inspector handle.\n   rpc InspectExpressionResult(InspectExpressionResult.Request)\n       returns (InspectExpressionResult.Response);\n+  // Open a previously-saved Terraform state, returning a handle that can be\n+  // used with other operations. This is distinct from OpenState because it\n+  // means core state rather than stack state.\n+  rpc OpenTerraformState(OpenTerraformState.Request) returns (OpenTerraformState.Response);\n+  // Close a previously-opened Terraform state using its handle.\n+  rpc CloseTerraformState(CloseTerraformState.Request) returns (CloseTerraformState.Response);\n+  // MigrateTerraformState migrates a Terraform state into Stacks state using\n+  // a mapping of addresses.\n+  rpc MigrateTerraformState(MigrateTerraformState.Request) returns (stream MigrateTerraformState.Event);\n+}\n+\n+// OpenTerraformState opens a previously-saved Terraform state, returning a\n+// handle that can be used with other operations. This is distinct from\n+// OpenState because it means core state rather than stack state.\n+message OpenTerraformState {\n+  message Request {\n+    oneof state {\n+      // We can open a state based on configuration that has been initialized.\n+      string config_path = 1;\n+\n+      // Or a state file based on raw bytes.\n+      bytes raw = 2;\n+    }\n+  }\n+  message Response {\n+    int64 state_handle = 1;\n+    repeated terraform1.Diagnostic diagnostics = 2;\n+  }\n+}\n+\n+// CloseTerraformState closes a previously-opened Terraform state using its\n+// handle.\n+message CloseTerraformState {\n+  message Request {\n+    int64 state_handle = 1;\n+  }\n+  message Response {\n+  }\n+}\n+\n+// MigrateTerraformState migrates a Terraform state into Stacks state using\n+// a mapping of addresses.\n+//\n+// Only resources and modules from the root module should be specified. All\n+// resources in nested modules maintain their nested structure within the new\n+// components the base modules were moved into.\n+message MigrateTerraformState {\n+  message Request {\n+    int64 state_handle = 1; // previously opened Terraform state\n+    int64 config_handle = 2; // new stacks configuration\n+    int64 dependency_locks_handle = 3;\n+    int64 provider_cache_handle = 4;\n+\n+    // resource_address_map maps resources in the root module to their new\n+    // components. The keys are the addresses of the resources in the Terraform\n+    // state, and the values are the names of the new components.\n+    //\n+    // eg. resource_type.resource_name -> component_name\n+    map<string, string> resource_address_map = 5;\n+\n+    // module_address_map maps modules in the root module to their new\n+    // components. The keys are the module names in the Terraform state, and\n+    // the values are the names of the new components.\n+    //\n+    // eg. module_name -> component_name\n+    map<string, string> module_address_map = 6;",
        "comment_created_at": "2025-02-25T09:33:06+00:00",
        "comment_author": "liamcervante",
        "comment_body": "I added a comment directly on the commit: https://github.com/hashicorp/terraform/commit/bd6c0b5b1bc1fd70192ac8e0ee920d219a409fa2#r152967523",
        "pr_file_module": null
      }
    ]
  }
]