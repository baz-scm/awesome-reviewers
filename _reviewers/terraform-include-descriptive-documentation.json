[
  {
    "discussion_id": "2066841363",
    "pr_number": 36934,
    "pr_file": "website/docs/language/block/output.mdx",
    "created_at": "2025-04-29T15:35:10+00:00",
    "commented_code": "+---\n+page_title: Output block reference for the Terraform configuration language\n+description: Use the `output` block to expose information about your module's infrastructure.\n+---\n+\n+# `output` block reference\n+\n+The `output` block lets you expose information about your infrastructure.\n+\n+> **Hands-on:** Try the [Output Data From Terraform](/terraform/tutorials/configuration-language/outputs) tutorial.\n+\n+## Background\n+\n+The value of an `output` block is similar to a return value in other programming languages. The `output` block exposes information about your infrastructure that you can reference on the command line, in HCP Terraform, and in other Terraform configurations that can access your configuration's state. The `output` block serves three main purposes in Terraform:\n+\n+- Child modules can expose resource attributes to parent modules.\n+- Root modules can display values in CLI output.\n+- Other Terraform configurations using [remote state](/terraform/language/state/remote) can access root module outputs with the `terraform_remote_state` data source.\n+\n+In HCP Terraform, your `output` block values appear in the UI after Terraform applies your configuration. You can [mark outputs as sensitive in HCP Terraform](/terraform/cloud-docs/workspaces/variables/managing-variables#sensitive-values) to hide their values in the UI and in API responses.\n+\n+## Configuration model\n+\n+The `output` block supports the following arguments:\n+\n+- [`output \"<LABEL>\"`](#output) &nbsp; block\n+  - [`value`](#value) &nbsp; expression\n+  - [`description`](#description) &nbsp; string\n+  - [`sensitive`](#sensitive) &nbsp; boolean\n+  - [`ephemeral`](#ephemeral) &nbsp; boolean\n+  - [`depends_on`](#depends_on) &nbsp; list of references\n+  - [`precondition`](#precondition) &nbsp; block\n+    - [`condition`](#precondition) &nbsp; expression\n+    - [`error_message`](#precondition) &nbsp; string\n+\n+## Complete configuration\n+\n+All available arguments are defined in the following `output` block. There are no mutually exclusive arguments for an `output` block.\n+\n+```hcl\n+output \"<LABEL>\" {\n+  value       = <EXPRESSION>\n+  description = \"<STRING>\"\n+  sensitive   = <true|false>\n+  ephemeral   = <true|false>\n+  depends_on  = [<REFERENCE>]\n+\n+  precondition {\n+    condition     = <EXPRESSION>\n+    error_message = \"<STRING>\"\n+  }\n+}\n+```\n+\n+## Specification\n+\n+An `output` block supports the following configuration.\n+\n+### `output \"<LABEL>\"`\n+\n+[Follow Terraform's resource naming rules](/terraform/language/style#resource-naming) when declaring an `output` block.\n+\n+The following arguments are supported in an `output` block:\n+\n+| Argument | Description | Type | Required? |\n+| --- | --- | --- | --- |\n+| `value` | The value Terraform returns for this output. | Expression | Required |\n+| `description` | A description of the output's purpose and how to use it. | String | Optional |\n+| `sensitive` | Specifies if Terraform hides this value in CLI output. | Boolean | Optional |\n+| `ephemeral` | Specifies whether to prevent storing this value in state. | Boolean | Optional |\n+| `depends_on` | A list of explicit dependencies for this output. | List | Optional |\n+| `precondition` | A condition to validate before computing the output or storing it in state. | Block | Optional |\n+\n+### `value`\n+\n+You must include a `value` argument in each `output` block. Terraform evaluates the `value` argument's expression and exposes the result as the return value of an output and stores that value in state.\n+\n+```hcl\n+output \"unique_name\" {\n+  value = <expression-to-evaluate>\n+}\n+```\n+\n+Any valid expression can be an output `value.` Refer to [Expressions](/terraform/language/expressions/) to learn more.\n+\n+#### Summary\n+\n+- Data type: Expression\n+- Default: None\n+- Required: Yes\n+\n+### `description`\n+\n+Use the `description` argument in an `output` block to explain the purpose of this output, requirements, and what kind of value this output exports.\n+\n+```hcl\n+output \"instance_ip_addr\" {\n+  value       = <expression-to-evaluate>\n+  description = \"<concise description from the perspective of a module consumer>.\"\n+}\n+```\n+We recommend writing the description from the point of view of a module consumer to help consumers understand why the output exists and how to use it.\n+\n+#### Summary\n+\n+- Data type: String\n+- Default: None\n+\n+### `sensitive`\n+\n+Add the `sensitive` argument to an `output` block to hide that block's value in the CLI output of a Terraform operation.\n+\n+```hcl\n+output \"admin_password\" {\n+  value     = <expression-to-evaluate>\n+  sensitive = <boolean>\n+}\n+```\n+\n+If you set the `sensitive` argument to `true`, Terraform redacts that output value in plan and apply operations:\n+\n+```shell-session\n+Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\n+\n+Outputs:\n+\n+admin_password = (sensitive value)\n+```\n+\n+Terraform still records sensitive values in state, so anyone who can access your state data can access your sensitive values. For more information about safely storing sensitive data, refer to [Sensitive data in state](/terraform/language/state/sensitive-data).\n+\n+#### Summary\n+\n+- Data type: Boolean\n+- Default: `false`\n+\n+### `ephemeral`\n+\n+-> **Note**: Ephemeral outputs are available in Terraform v1.10 and later.\n+\n+Add the `ephemeral` argument to `output` blocks in child modules to pass data between modules without persisting that data to state or plan files. You cannot add the `ephemeral` argument to `output` blocks in the root module.\n+\n+```hcl\n+output \"unique_password\" {\n+  value     = <expression-to-evaluate>\n+  ephemeral = <boolean>\n+}\n+```\n+\n+Passing output values between child modules and the root module is useful for managing credentials, tokens, and other temporary resources that you do not want to store in state. If you enable the `ephemeral` argument on an `output` block, then your configuration must meet the following conditions:\n+\n+- The value of the `output` block must come from an ephemeral context.\n+- You can only reference that output in other ephemeral contexts.\n+\n+The following ephemeral contexts can set values for output blocks with the `ephemeral` argument, and they can also reference output blocks with the `ephemeral` argument:\n+- Another child module's ephemeral `output` block\n+- A [write-only argument](/terraform/language/resources/ephemeral/write-only)\n+- [Variables with the `ephemeral` argument](/terraform/language/values/variables#exclude-values-from-state)\n+- [An `ephemeral` resource block](/terraform/language/resources/ephemeral)\n+- Configuring providers in the [`provider` block](/terraform/language/providers)\n+- In [provisioner](/terraform/language/resources/provisioners/syntax) and [connection](/terraform/language/resources/provisioners/connection) blocks\n+\n+#### Summary\n+\n+- Data type: Boolean\n+- Default: `false`\n+\n+### `depends_on`\n+\n+The `depends_on` argument specifies an explicit dependency on another upstream resource for an `output` block. Terraform must complete all operations on an upstream resource before an `output` block can reference it.\n+\n+```hcl\n+output \"unique_name\" {\n+  value      = <expression-to-evaluate>\n+  depends_on = [<another_resource.name>]\n+}\n+```\n+\n+If the `value` expression in an `output` block references another resource, Terraform automatically determines the dependency order. If you need to establish a dependency between resources and outputs that are configured independently and do not reference each other, you can use the`depends_on` argument to declare an explicit dependency. If you add the `depends_on` argument, we recommend adding a comment to explain it.\n+\n+The `depends_on` block is a meta-argument. Meta-arguments are built-in arguments that control how Terraform creates resources. Refer to [Meta-arguments](/terraform/language/meta-arguments/depends_on) for additional information.\n+\n+<>{/* TODO: Update meta-arguments concept link once we have the page*/}</>\n+\n+#### Summary\n+\n+- Data type: List of references\n+- Default: None\n+\n+### `precondition`\n+\n+The `precondition` block lets you validate that the value of an `output` block meets specific requirements. Use preconditions on outputs to validate that your output values meet your requirements before Terraform exposes them or stores their values in state.\n+\n+```hcl\n+output \"unique_name\" {\n+  value  = <expression-to-evaluate>\n+\n+  precondition {\n+    condition     = <expression-to-verify>\n+    error_message = \"<error message string>\"\n+  }\n+}\n+```\n+\n+You can specify the following arguments in the `precondition` block:\n+\n+| Attribute | Description | Data type | Required? |\n+| :---- | :---- | :---- | :---- |\n+| `condition` | Expression that must return `true` for Terraform to proceed with an operation. | A valid [Conditional expression](/terraform/language/expressions/conditionals). | Required |\n+| `error_message` | Message to display if the condition evaluates to `false`. | String | Required |\n+\n+Terraform evaluates preconditions on outputs when creating or applying a plan, and if a precondition block's `condition` expression evaluates to `false`, then Terraform throws an error with the `error_message` and stops the current operation.\n+\n+Refer to [Validate your configuration](/terraform/language/test-and-validate/validate#preconditions) for more details about preconditions.\n+\n+#### Summary\n+\n+- Data type: Block\n+- Default: None\n+\n+## Examples\n+\n+The following examples demonstrate common use cases for `output` values.\n+\n+### Basic example\n+\n+In the following example, an `output` block exposes a server's private IP address from the current module:\n+\n+```hcl\n+output \"instance_ip_addr\" {\n+  value       = aws_instance.server.private_ip\n+  description = \"The private IP address of the main server instance.\"\n+}\n+```\n+\n+### Accessing child module outputs\n+\n+In the following example, the current module uses an output named `instance_ip_addr` from a child module named `web_server`:\n+\n+```hcl\n+output \"website_url\" {\n+  value = \"https://${module.web_server.instance_ip_addr}\"\n+}\n+```",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2066841363",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36934,
        "pr_file": "website/docs/language/block/output.mdx",
        "discussion_id": "2066841363",
        "commented_code": "@@ -0,0 +1,289 @@\n+---\n+page_title: Output block reference for the Terraform configuration language\n+description: Use the `output` block to expose information about your module's infrastructure.\n+---\n+\n+# `output` block reference\n+\n+The `output` block lets you expose information about your infrastructure.\n+\n+> **Hands-on:** Try the [Output Data From Terraform](/terraform/tutorials/configuration-language/outputs) tutorial.\n+\n+## Background\n+\n+The value of an `output` block is similar to a return value in other programming languages. The `output` block exposes information about your infrastructure that you can reference on the command line, in HCP Terraform, and in other Terraform configurations that can access your configuration's state. The `output` block serves three main purposes in Terraform:\n+\n+- Child modules can expose resource attributes to parent modules.\n+- Root modules can display values in CLI output.\n+- Other Terraform configurations using [remote state](/terraform/language/state/remote) can access root module outputs with the `terraform_remote_state` data source.\n+\n+In HCP Terraform, your `output` block values appear in the UI after Terraform applies your configuration. You can [mark outputs as sensitive in HCP Terraform](/terraform/cloud-docs/workspaces/variables/managing-variables#sensitive-values) to hide their values in the UI and in API responses.\n+\n+## Configuration model\n+\n+The `output` block supports the following arguments:\n+\n+- [`output \"<LABEL>\"`](#output) &nbsp; block\n+  - [`value`](#value) &nbsp; expression\n+  - [`description`](#description) &nbsp; string\n+  - [`sensitive`](#sensitive) &nbsp; boolean\n+  - [`ephemeral`](#ephemeral) &nbsp; boolean\n+  - [`depends_on`](#depends_on) &nbsp; list of references\n+  - [`precondition`](#precondition) &nbsp; block\n+    - [`condition`](#precondition) &nbsp; expression\n+    - [`error_message`](#precondition) &nbsp; string\n+\n+## Complete configuration\n+\n+All available arguments are defined in the following `output` block. There are no mutually exclusive arguments for an `output` block.\n+\n+```hcl\n+output \"<LABEL>\" {\n+  value       = <EXPRESSION>\n+  description = \"<STRING>\"\n+  sensitive   = <true|false>\n+  ephemeral   = <true|false>\n+  depends_on  = [<REFERENCE>]\n+\n+  precondition {\n+    condition     = <EXPRESSION>\n+    error_message = \"<STRING>\"\n+  }\n+}\n+```\n+\n+## Specification\n+\n+An `output` block supports the following configuration.\n+\n+### `output \"<LABEL>\"`\n+\n+[Follow Terraform's resource naming rules](/terraform/language/style#resource-naming) when declaring an `output` block.\n+\n+The following arguments are supported in an `output` block:\n+\n+| Argument | Description | Type | Required? |\n+| --- | --- | --- | --- |\n+| `value` | The value Terraform returns for this output. | Expression | Required |\n+| `description` | A description of the output's purpose and how to use it. | String | Optional |\n+| `sensitive` | Specifies if Terraform hides this value in CLI output. | Boolean | Optional |\n+| `ephemeral` | Specifies whether to prevent storing this value in state. | Boolean | Optional |\n+| `depends_on` | A list of explicit dependencies for this output. | List | Optional |\n+| `precondition` | A condition to validate before computing the output or storing it in state. | Block | Optional |\n+\n+### `value`\n+\n+You must include a `value` argument in each `output` block. Terraform evaluates the `value` argument's expression and exposes the result as the return value of an output and stores that value in state.\n+\n+```hcl\n+output \"unique_name\" {\n+  value = <expression-to-evaluate>\n+}\n+```\n+\n+Any valid expression can be an output `value.` Refer to [Expressions](/terraform/language/expressions/) to learn more.\n+\n+#### Summary\n+\n+- Data type: Expression\n+- Default: None\n+- Required: Yes\n+\n+### `description`\n+\n+Use the `description` argument in an `output` block to explain the purpose of this output, requirements, and what kind of value this output exports.\n+\n+```hcl\n+output \"instance_ip_addr\" {\n+  value       = <expression-to-evaluate>\n+  description = \"<concise description from the perspective of a module consumer>.\"\n+}\n+```\n+We recommend writing the description from the point of view of a module consumer to help consumers understand why the output exists and how to use it.\n+\n+#### Summary\n+\n+- Data type: String\n+- Default: None\n+\n+### `sensitive`\n+\n+Add the `sensitive` argument to an `output` block to hide that block's value in the CLI output of a Terraform operation.\n+\n+```hcl\n+output \"admin_password\" {\n+  value     = <expression-to-evaluate>\n+  sensitive = <boolean>\n+}\n+```\n+\n+If you set the `sensitive` argument to `true`, Terraform redacts that output value in plan and apply operations:\n+\n+```shell-session\n+Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\n+\n+Outputs:\n+\n+admin_password = (sensitive value)\n+```\n+\n+Terraform still records sensitive values in state, so anyone who can access your state data can access your sensitive values. For more information about safely storing sensitive data, refer to [Sensitive data in state](/terraform/language/state/sensitive-data).\n+\n+#### Summary\n+\n+- Data type: Boolean\n+- Default: `false`\n+\n+### `ephemeral`\n+\n+-> **Note**: Ephemeral outputs are available in Terraform v1.10 and later.\n+\n+Add the `ephemeral` argument to `output` blocks in child modules to pass data between modules without persisting that data to state or plan files. You cannot add the `ephemeral` argument to `output` blocks in the root module.\n+\n+```hcl\n+output \"unique_password\" {\n+  value     = <expression-to-evaluate>\n+  ephemeral = <boolean>\n+}\n+```\n+\n+Passing output values between child modules and the root module is useful for managing credentials, tokens, and other temporary resources that you do not want to store in state. If you enable the `ephemeral` argument on an `output` block, then your configuration must meet the following conditions:\n+\n+- The value of the `output` block must come from an ephemeral context.\n+- You can only reference that output in other ephemeral contexts.\n+\n+The following ephemeral contexts can set values for output blocks with the `ephemeral` argument, and they can also reference output blocks with the `ephemeral` argument:\n+- Another child module's ephemeral `output` block\n+- A [write-only argument](/terraform/language/resources/ephemeral/write-only)\n+- [Variables with the `ephemeral` argument](/terraform/language/values/variables#exclude-values-from-state)\n+- [An `ephemeral` resource block](/terraform/language/resources/ephemeral)\n+- Configuring providers in the [`provider` block](/terraform/language/providers)\n+- In [provisioner](/terraform/language/resources/provisioners/syntax) and [connection](/terraform/language/resources/provisioners/connection) blocks\n+\n+#### Summary\n+\n+- Data type: Boolean\n+- Default: `false`\n+\n+### `depends_on`\n+\n+The `depends_on` argument specifies an explicit dependency on another upstream resource for an `output` block. Terraform must complete all operations on an upstream resource before an `output` block can reference it.\n+\n+```hcl\n+output \"unique_name\" {\n+  value      = <expression-to-evaluate>\n+  depends_on = [<another_resource.name>]\n+}\n+```\n+\n+If the `value` expression in an `output` block references another resource, Terraform automatically determines the dependency order. If you need to establish a dependency between resources and outputs that are configured independently and do not reference each other, you can use the`depends_on` argument to declare an explicit dependency. If you add the `depends_on` argument, we recommend adding a comment to explain it.\n+\n+The `depends_on` block is a meta-argument. Meta-arguments are built-in arguments that control how Terraform creates resources. Refer to [Meta-arguments](/terraform/language/meta-arguments/depends_on) for additional information.\n+\n+<>{/* TODO: Update meta-arguments concept link once we have the page*/}</>\n+\n+#### Summary\n+\n+- Data type: List of references\n+- Default: None\n+\n+### `precondition`\n+\n+The `precondition` block lets you validate that the value of an `output` block meets specific requirements. Use preconditions on outputs to validate that your output values meet your requirements before Terraform exposes them or stores their values in state.\n+\n+```hcl\n+output \"unique_name\" {\n+  value  = <expression-to-evaluate>\n+\n+  precondition {\n+    condition     = <expression-to-verify>\n+    error_message = \"<error message string>\"\n+  }\n+}\n+```\n+\n+You can specify the following arguments in the `precondition` block:\n+\n+| Attribute | Description | Data type | Required? |\n+| :---- | :---- | :---- | :---- |\n+| `condition` | Expression that must return `true` for Terraform to proceed with an operation. | A valid [Conditional expression](/terraform/language/expressions/conditionals). | Required |\n+| `error_message` | Message to display if the condition evaluates to `false`. | String | Required |\n+\n+Terraform evaluates preconditions on outputs when creating or applying a plan, and if a precondition block's `condition` expression evaluates to `false`, then Terraform throws an error with the `error_message` and stops the current operation.\n+\n+Refer to [Validate your configuration](/terraform/language/test-and-validate/validate#preconditions) for more details about preconditions.\n+\n+#### Summary\n+\n+- Data type: Block\n+- Default: None\n+\n+## Examples\n+\n+The following examples demonstrate common use cases for `output` values.\n+\n+### Basic example\n+\n+In the following example, an `output` block exposes a server's private IP address from the current module:\n+\n+```hcl\n+output \"instance_ip_addr\" {\n+  value       = aws_instance.server.private_ip\n+  description = \"The private IP address of the main server instance.\"\n+}\n+```\n+\n+### Accessing child module outputs\n+\n+In the following example, the current module uses an output named `instance_ip_addr` from a child module named `web_server`:\n+\n+```hcl\n+output \"website_url\" {\n+  value = \"https://${module.web_server.instance_ip_addr}\"\n+}\n+```",
        "comment_created_at": "2025-04-29T15:35:10+00:00",
        "comment_author": "robin-norwood",
        "comment_body": "As best practice, I think all of these should have a description field.\r\ndescription = \"The website URL, starting with https://\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2066842112",
    "pr_number": 36934,
    "pr_file": "website/docs/language/block/output.mdx",
    "created_at": "2025-04-29T15:35:33+00:00",
    "commented_code": "+---\n+page_title: Output block reference for the Terraform configuration language\n+description: Use the `output` block to expose information about your module's infrastructure.\n+---\n+\n+# `output` block reference\n+\n+The `output` block lets you expose information about your infrastructure.\n+\n+> **Hands-on:** Try the [Output Data From Terraform](/terraform/tutorials/configuration-language/outputs) tutorial.\n+\n+## Background\n+\n+The value of an `output` block is similar to a return value in other programming languages. The `output` block exposes information about your infrastructure that you can reference on the command line, in HCP Terraform, and in other Terraform configurations that can access your configuration's state. The `output` block serves three main purposes in Terraform:\n+\n+- Child modules can expose resource attributes to parent modules.\n+- Root modules can display values in CLI output.\n+- Other Terraform configurations using [remote state](/terraform/language/state/remote) can access root module outputs with the `terraform_remote_state` data source.\n+\n+In HCP Terraform, your `output` block values appear in the UI after Terraform applies your configuration. You can [mark outputs as sensitive in HCP Terraform](/terraform/cloud-docs/workspaces/variables/managing-variables#sensitive-values) to hide their values in the UI and in API responses.\n+\n+## Configuration model\n+\n+The `output` block supports the following arguments:\n+\n+- [`output \"<LABEL>\"`](#output) &nbsp; block\n+  - [`value`](#value) &nbsp; expression\n+  - [`description`](#description) &nbsp; string\n+  - [`sensitive`](#sensitive) &nbsp; boolean\n+  - [`ephemeral`](#ephemeral) &nbsp; boolean\n+  - [`depends_on`](#depends_on) &nbsp; list of references\n+  - [`precondition`](#precondition) &nbsp; block\n+    - [`condition`](#precondition) &nbsp; expression\n+    - [`error_message`](#precondition) &nbsp; string\n+\n+## Complete configuration\n+\n+All available arguments are defined in the following `output` block. There are no mutually exclusive arguments for an `output` block.\n+\n+```hcl\n+output \"<LABEL>\" {\n+  value       = <EXPRESSION>\n+  description = \"<STRING>\"\n+  sensitive   = <true|false>\n+  ephemeral   = <true|false>\n+  depends_on  = [<REFERENCE>]\n+\n+  precondition {\n+    condition     = <EXPRESSION>\n+    error_message = \"<STRING>\"\n+  }\n+}\n+```\n+\n+## Specification\n+\n+An `output` block supports the following configuration.\n+\n+### `output \"<LABEL>\"`\n+\n+[Follow Terraform's resource naming rules](/terraform/language/style#resource-naming) when declaring an `output` block.\n+\n+The following arguments are supported in an `output` block:\n+\n+| Argument | Description | Type | Required? |\n+| --- | --- | --- | --- |\n+| `value` | The value Terraform returns for this output. | Expression | Required |\n+| `description` | A description of the output's purpose and how to use it. | String | Optional |\n+| `sensitive` | Specifies if Terraform hides this value in CLI output. | Boolean | Optional |\n+| `ephemeral` | Specifies whether to prevent storing this value in state. | Boolean | Optional |\n+| `depends_on` | A list of explicit dependencies for this output. | List | Optional |\n+| `precondition` | A condition to validate before computing the output or storing it in state. | Block | Optional |\n+\n+### `value`\n+\n+You must include a `value` argument in each `output` block. Terraform evaluates the `value` argument's expression and exposes the result as the return value of an output and stores that value in state.\n+\n+```hcl\n+output \"unique_name\" {\n+  value = <expression-to-evaluate>\n+}\n+```\n+\n+Any valid expression can be an output `value.` Refer to [Expressions](/terraform/language/expressions/) to learn more.\n+\n+#### Summary\n+\n+- Data type: Expression\n+- Default: None\n+- Required: Yes\n+\n+### `description`\n+\n+Use the `description` argument in an `output` block to explain the purpose of this output, requirements, and what kind of value this output exports.\n+\n+```hcl\n+output \"instance_ip_addr\" {\n+  value       = <expression-to-evaluate>\n+  description = \"<concise description from the perspective of a module consumer>.\"\n+}\n+```\n+We recommend writing the description from the point of view of a module consumer to help consumers understand why the output exists and how to use it.\n+\n+#### Summary\n+\n+- Data type: String\n+- Default: None\n+\n+### `sensitive`\n+\n+Add the `sensitive` argument to an `output` block to hide that block's value in the CLI output of a Terraform operation.\n+\n+```hcl\n+output \"admin_password\" {\n+  value     = <expression-to-evaluate>\n+  sensitive = <boolean>\n+}\n+```\n+\n+If you set the `sensitive` argument to `true`, Terraform redacts that output value in plan and apply operations:\n+\n+```shell-session\n+Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\n+\n+Outputs:\n+\n+admin_password = (sensitive value)\n+```\n+\n+Terraform still records sensitive values in state, so anyone who can access your state data can access your sensitive values. For more information about safely storing sensitive data, refer to [Sensitive data in state](/terraform/language/state/sensitive-data).\n+\n+#### Summary\n+\n+- Data type: Boolean\n+- Default: `false`\n+\n+### `ephemeral`\n+\n+-> **Note**: Ephemeral outputs are available in Terraform v1.10 and later.\n+\n+Add the `ephemeral` argument to `output` blocks in child modules to pass data between modules without persisting that data to state or plan files. You cannot add the `ephemeral` argument to `output` blocks in the root module.\n+\n+```hcl\n+output \"unique_password\" {\n+  value     = <expression-to-evaluate>\n+  ephemeral = <boolean>\n+}\n+```\n+\n+Passing output values between child modules and the root module is useful for managing credentials, tokens, and other temporary resources that you do not want to store in state. If you enable the `ephemeral` argument on an `output` block, then your configuration must meet the following conditions:\n+\n+- The value of the `output` block must come from an ephemeral context.\n+- You can only reference that output in other ephemeral contexts.\n+\n+The following ephemeral contexts can set values for output blocks with the `ephemeral` argument, and they can also reference output blocks with the `ephemeral` argument:\n+- Another child module's ephemeral `output` block\n+- A [write-only argument](/terraform/language/resources/ephemeral/write-only)\n+- [Variables with the `ephemeral` argument](/terraform/language/values/variables#exclude-values-from-state)\n+- [An `ephemeral` resource block](/terraform/language/resources/ephemeral)\n+- Configuring providers in the [`provider` block](/terraform/language/providers)\n+- In [provisioner](/terraform/language/resources/provisioners/syntax) and [connection](/terraform/language/resources/provisioners/connection) blocks\n+\n+#### Summary\n+\n+- Data type: Boolean\n+- Default: `false`\n+\n+### `depends_on`\n+\n+The `depends_on` argument specifies an explicit dependency on another upstream resource for an `output` block. Terraform must complete all operations on an upstream resource before an `output` block can reference it.\n+\n+```hcl\n+output \"unique_name\" {\n+  value      = <expression-to-evaluate>\n+  depends_on = [<another_resource.name>]\n+}\n+```\n+\n+If the `value` expression in an `output` block references another resource, Terraform automatically determines the dependency order. If you need to establish a dependency between resources and outputs that are configured independently and do not reference each other, you can use the`depends_on` argument to declare an explicit dependency. If you add the `depends_on` argument, we recommend adding a comment to explain it.\n+\n+The `depends_on` block is a meta-argument. Meta-arguments are built-in arguments that control how Terraform creates resources. Refer to [Meta-arguments](/terraform/language/meta-arguments/depends_on) for additional information.\n+\n+<>{/* TODO: Update meta-arguments concept link once we have the page*/}</>\n+\n+#### Summary\n+\n+- Data type: List of references\n+- Default: None\n+\n+### `precondition`\n+\n+The `precondition` block lets you validate that the value of an `output` block meets specific requirements. Use preconditions on outputs to validate that your output values meet your requirements before Terraform exposes them or stores their values in state.\n+\n+```hcl\n+output \"unique_name\" {\n+  value  = <expression-to-evaluate>\n+\n+  precondition {\n+    condition     = <expression-to-verify>\n+    error_message = \"<error message string>\"\n+  }\n+}\n+```\n+\n+You can specify the following arguments in the `precondition` block:\n+\n+| Attribute | Description | Data type | Required? |\n+| :---- | :---- | :---- | :---- |\n+| `condition` | Expression that must return `true` for Terraform to proceed with an operation. | A valid [Conditional expression](/terraform/language/expressions/conditionals). | Required |\n+| `error_message` | Message to display if the condition evaluates to `false`. | String | Required |\n+\n+Terraform evaluates preconditions on outputs when creating or applying a plan, and if a precondition block's `condition` expression evaluates to `false`, then Terraform throws an error with the `error_message` and stops the current operation.\n+\n+Refer to [Validate your configuration](/terraform/language/test-and-validate/validate#preconditions) for more details about preconditions.\n+\n+#### Summary\n+\n+- Data type: Block\n+- Default: None\n+\n+## Examples\n+\n+The following examples demonstrate common use cases for `output` values.\n+\n+### Basic example\n+\n+In the following example, an `output` block exposes a server's private IP address from the current module:\n+\n+```hcl\n+output \"instance_ip_addr\" {\n+  value       = aws_instance.server.private_ip\n+  description = \"The private IP address of the main server instance.\"\n+}\n+```\n+\n+### Accessing child module outputs\n+\n+In the following example, the current module uses an output named `instance_ip_addr` from a child module named `web_server`:\n+\n+```hcl\n+output \"website_url\" {\n+  value = \"https://${module.web_server.instance_ip_addr}\"\n+}\n+```\n+\n+### Sensitive output\n+\n+In the following example, the `db_password` output sets the `sensitive` argument to `true` to prevent Terraform from displaying the database password in CLI output:\n+\n+```hcl\n+output \"db_password\" {\n+  value     = aws_db_instance.db.password\n+  sensitive = true\n+}",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2066842112",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36934,
        "pr_file": "website/docs/language/block/output.mdx",
        "discussion_id": "2066842112",
        "commented_code": "@@ -0,0 +1,289 @@\n+---\n+page_title: Output block reference for the Terraform configuration language\n+description: Use the `output` block to expose information about your module's infrastructure.\n+---\n+\n+# `output` block reference\n+\n+The `output` block lets you expose information about your infrastructure.\n+\n+> **Hands-on:** Try the [Output Data From Terraform](/terraform/tutorials/configuration-language/outputs) tutorial.\n+\n+## Background\n+\n+The value of an `output` block is similar to a return value in other programming languages. The `output` block exposes information about your infrastructure that you can reference on the command line, in HCP Terraform, and in other Terraform configurations that can access your configuration's state. The `output` block serves three main purposes in Terraform:\n+\n+- Child modules can expose resource attributes to parent modules.\n+- Root modules can display values in CLI output.\n+- Other Terraform configurations using [remote state](/terraform/language/state/remote) can access root module outputs with the `terraform_remote_state` data source.\n+\n+In HCP Terraform, your `output` block values appear in the UI after Terraform applies your configuration. You can [mark outputs as sensitive in HCP Terraform](/terraform/cloud-docs/workspaces/variables/managing-variables#sensitive-values) to hide their values in the UI and in API responses.\n+\n+## Configuration model\n+\n+The `output` block supports the following arguments:\n+\n+- [`output \"<LABEL>\"`](#output) &nbsp; block\n+  - [`value`](#value) &nbsp; expression\n+  - [`description`](#description) &nbsp; string\n+  - [`sensitive`](#sensitive) &nbsp; boolean\n+  - [`ephemeral`](#ephemeral) &nbsp; boolean\n+  - [`depends_on`](#depends_on) &nbsp; list of references\n+  - [`precondition`](#precondition) &nbsp; block\n+    - [`condition`](#precondition) &nbsp; expression\n+    - [`error_message`](#precondition) &nbsp; string\n+\n+## Complete configuration\n+\n+All available arguments are defined in the following `output` block. There are no mutually exclusive arguments for an `output` block.\n+\n+```hcl\n+output \"<LABEL>\" {\n+  value       = <EXPRESSION>\n+  description = \"<STRING>\"\n+  sensitive   = <true|false>\n+  ephemeral   = <true|false>\n+  depends_on  = [<REFERENCE>]\n+\n+  precondition {\n+    condition     = <EXPRESSION>\n+    error_message = \"<STRING>\"\n+  }\n+}\n+```\n+\n+## Specification\n+\n+An `output` block supports the following configuration.\n+\n+### `output \"<LABEL>\"`\n+\n+[Follow Terraform's resource naming rules](/terraform/language/style#resource-naming) when declaring an `output` block.\n+\n+The following arguments are supported in an `output` block:\n+\n+| Argument | Description | Type | Required? |\n+| --- | --- | --- | --- |\n+| `value` | The value Terraform returns for this output. | Expression | Required |\n+| `description` | A description of the output's purpose and how to use it. | String | Optional |\n+| `sensitive` | Specifies if Terraform hides this value in CLI output. | Boolean | Optional |\n+| `ephemeral` | Specifies whether to prevent storing this value in state. | Boolean | Optional |\n+| `depends_on` | A list of explicit dependencies for this output. | List | Optional |\n+| `precondition` | A condition to validate before computing the output or storing it in state. | Block | Optional |\n+\n+### `value`\n+\n+You must include a `value` argument in each `output` block. Terraform evaluates the `value` argument's expression and exposes the result as the return value of an output and stores that value in state.\n+\n+```hcl\n+output \"unique_name\" {\n+  value = <expression-to-evaluate>\n+}\n+```\n+\n+Any valid expression can be an output `value.` Refer to [Expressions](/terraform/language/expressions/) to learn more.\n+\n+#### Summary\n+\n+- Data type: Expression\n+- Default: None\n+- Required: Yes\n+\n+### `description`\n+\n+Use the `description` argument in an `output` block to explain the purpose of this output, requirements, and what kind of value this output exports.\n+\n+```hcl\n+output \"instance_ip_addr\" {\n+  value       = <expression-to-evaluate>\n+  description = \"<concise description from the perspective of a module consumer>.\"\n+}\n+```\n+We recommend writing the description from the point of view of a module consumer to help consumers understand why the output exists and how to use it.\n+\n+#### Summary\n+\n+- Data type: String\n+- Default: None\n+\n+### `sensitive`\n+\n+Add the `sensitive` argument to an `output` block to hide that block's value in the CLI output of a Terraform operation.\n+\n+```hcl\n+output \"admin_password\" {\n+  value     = <expression-to-evaluate>\n+  sensitive = <boolean>\n+}\n+```\n+\n+If you set the `sensitive` argument to `true`, Terraform redacts that output value in plan and apply operations:\n+\n+```shell-session\n+Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\n+\n+Outputs:\n+\n+admin_password = (sensitive value)\n+```\n+\n+Terraform still records sensitive values in state, so anyone who can access your state data can access your sensitive values. For more information about safely storing sensitive data, refer to [Sensitive data in state](/terraform/language/state/sensitive-data).\n+\n+#### Summary\n+\n+- Data type: Boolean\n+- Default: `false`\n+\n+### `ephemeral`\n+\n+-> **Note**: Ephemeral outputs are available in Terraform v1.10 and later.\n+\n+Add the `ephemeral` argument to `output` blocks in child modules to pass data between modules without persisting that data to state or plan files. You cannot add the `ephemeral` argument to `output` blocks in the root module.\n+\n+```hcl\n+output \"unique_password\" {\n+  value     = <expression-to-evaluate>\n+  ephemeral = <boolean>\n+}\n+```\n+\n+Passing output values between child modules and the root module is useful for managing credentials, tokens, and other temporary resources that you do not want to store in state. If you enable the `ephemeral` argument on an `output` block, then your configuration must meet the following conditions:\n+\n+- The value of the `output` block must come from an ephemeral context.\n+- You can only reference that output in other ephemeral contexts.\n+\n+The following ephemeral contexts can set values for output blocks with the `ephemeral` argument, and they can also reference output blocks with the `ephemeral` argument:\n+- Another child module's ephemeral `output` block\n+- A [write-only argument](/terraform/language/resources/ephemeral/write-only)\n+- [Variables with the `ephemeral` argument](/terraform/language/values/variables#exclude-values-from-state)\n+- [An `ephemeral` resource block](/terraform/language/resources/ephemeral)\n+- Configuring providers in the [`provider` block](/terraform/language/providers)\n+- In [provisioner](/terraform/language/resources/provisioners/syntax) and [connection](/terraform/language/resources/provisioners/connection) blocks\n+\n+#### Summary\n+\n+- Data type: Boolean\n+- Default: `false`\n+\n+### `depends_on`\n+\n+The `depends_on` argument specifies an explicit dependency on another upstream resource for an `output` block. Terraform must complete all operations on an upstream resource before an `output` block can reference it.\n+\n+```hcl\n+output \"unique_name\" {\n+  value      = <expression-to-evaluate>\n+  depends_on = [<another_resource.name>]\n+}\n+```\n+\n+If the `value` expression in an `output` block references another resource, Terraform automatically determines the dependency order. If you need to establish a dependency between resources and outputs that are configured independently and do not reference each other, you can use the`depends_on` argument to declare an explicit dependency. If you add the `depends_on` argument, we recommend adding a comment to explain it.\n+\n+The `depends_on` block is a meta-argument. Meta-arguments are built-in arguments that control how Terraform creates resources. Refer to [Meta-arguments](/terraform/language/meta-arguments/depends_on) for additional information.\n+\n+<>{/* TODO: Update meta-arguments concept link once we have the page*/}</>\n+\n+#### Summary\n+\n+- Data type: List of references\n+- Default: None\n+\n+### `precondition`\n+\n+The `precondition` block lets you validate that the value of an `output` block meets specific requirements. Use preconditions on outputs to validate that your output values meet your requirements before Terraform exposes them or stores their values in state.\n+\n+```hcl\n+output \"unique_name\" {\n+  value  = <expression-to-evaluate>\n+\n+  precondition {\n+    condition     = <expression-to-verify>\n+    error_message = \"<error message string>\"\n+  }\n+}\n+```\n+\n+You can specify the following arguments in the `precondition` block:\n+\n+| Attribute | Description | Data type | Required? |\n+| :---- | :---- | :---- | :---- |\n+| `condition` | Expression that must return `true` for Terraform to proceed with an operation. | A valid [Conditional expression](/terraform/language/expressions/conditionals). | Required |\n+| `error_message` | Message to display if the condition evaluates to `false`. | String | Required |\n+\n+Terraform evaluates preconditions on outputs when creating or applying a plan, and if a precondition block's `condition` expression evaluates to `false`, then Terraform throws an error with the `error_message` and stops the current operation.\n+\n+Refer to [Validate your configuration](/terraform/language/test-and-validate/validate#preconditions) for more details about preconditions.\n+\n+#### Summary\n+\n+- Data type: Block\n+- Default: None\n+\n+## Examples\n+\n+The following examples demonstrate common use cases for `output` values.\n+\n+### Basic example\n+\n+In the following example, an `output` block exposes a server's private IP address from the current module:\n+\n+```hcl\n+output \"instance_ip_addr\" {\n+  value       = aws_instance.server.private_ip\n+  description = \"The private IP address of the main server instance.\"\n+}\n+```\n+\n+### Accessing child module outputs\n+\n+In the following example, the current module uses an output named `instance_ip_addr` from a child module named `web_server`:\n+\n+```hcl\n+output \"website_url\" {\n+  value = \"https://${module.web_server.instance_ip_addr}\"\n+}\n+```\n+\n+### Sensitive output\n+\n+In the following example, the `db_password` output sets the `sensitive` argument to `true` to prevent Terraform from displaying the database password in CLI output:\n+\n+```hcl\n+output \"db_password\" {\n+  value     = aws_db_instance.db.password\n+  sensitive = true\n+}",
        "comment_created_at": "2025-04-29T15:35:33+00:00",
        "comment_author": "robin-norwood",
        "comment_body": "recommend adding description\r\ndescription = \"The database password.\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2019006617",
    "pr_number": 36793,
    "pr_file": "website/docs/language/mitigate-risk/validate.mdx",
    "created_at": "2025-03-28T16:42:13+00:00",
    "commented_code": "+---\n+page_title: Validate your infrastructure in Terraform’s configuration language\n+description: >-\n+  Configuration-level validation lets you enforce rules, validate resources, and detect errors as part of your infrastructure provisioning process.\n+---\n+\n+# Validate your configuration\n+\n+Terraform has a few ways to validate your configuration, all of which let you document and enforce your configuration's requirements, help you prevent configuration errors and provide contextual error messages. Validate your configuration to improve your module consumer's troubleshooting, make your runs more predictable, and help your maintainers understand your configuration's intent.\n+\n+## Introduction\n+\n+Validation helps you verify that your Terraform configuration works as you intend. Using different types of validation you can:\n+\n+- Verify input variables meet specific requirements\n+- Prevent incorrect outputs from writing to your state\n+- Ensure resources and data sources are configured correctly after Terraform applies them\n+- Verify the broader behavior of your infrastructure\n+- Document assumptions about your infrastructure\n+- Use HCP Terraform to regularly verify your infrastructure\n+\n+When a validation fails, Terraform provides context that you can use in your error messages to help users understand and fix their issue. Terraform evaluates different ways of validation at [different stages of Terraform's execution cycle](#order-of-validation), and they can either block further operation execution or continue execution with warnings.\n+\n+For authors, adding validation to your configuration enforces your module's standards and requirements, helping module consumers understand and use your configuration.\n+\n+## Requirements\n+\n+- Terraform v0.13.0 or later for [input variable validation](#input-variable-validation)\n+- Terraform v1.2.0 or later for [preconditions and postconditions](#preconditions-and-postconditions)\n+- Terraform v1.5.0 or later for [`check` blocks](#checks)\n+\n+## Choose a validation for your use case\n+\n+> **Hands On:** Try the [Validate Modules with Custom Conditions](/terraform/tutorials/configuration-language/custom-conditions) tutorial to learn how to use variable validation, preconditions, and postconditions. Try the [Validate Infrastructure Using Checks](/terraform/tutorials/configuration-language/checks) tutorial to learn how to use `check` blocks.\n+\n+Terraform offers several ways of validating configuration:\n+\n+* Input variable validations verify your configuration's parameters when Terraform creates a plan.\n+* Preconditions ensure individual resources, data sources, and outputs meet your requirements before Terraform tries to create them.\n+* Postconditions verifies that Terraform produced your resources and data sources with the expected and desired settings.\n+* Checks lets you validate that your resources work as expected without blocking Terraform operations based on the check's result.\n+\n+Validating your configuration is flexible, and you can often use different kinds of validation to achieve the same result. When choosing a validation rule, consider whether or not you want the validation to block your operations, and during which phase of the Terraform workflow it should run.\n+\n+### Input variable validation\n+\n+Use input variable validation to:\n+- Verify input variables meet specific format requirements.\n+- Verify input values fall within acceptable ranges.\n+- Prevent Terraform operations if a variable is misconfigured.\n+\n+For example, you can validate whether a variable value has valid AMI ID syntax.\n+\n+```hcl\n+variable \"image_id\" {\n+  type        = string\n+  description = \"The id of the machine image (AMI) to use for the server.\"\n+\n+  validation {\n+    condition     = length(var.image_id) > 4 && substr(var.image_id, 0, 4) == \"ami-\"\n+    error_message = \"The image_id value must be a valid AMI id, starting with \\\"ami-\\\".\"\n+  }\n+}\n+```\n+\n+If you set the value of the `image_id` variable to a string without AMI ID syntax, the condition evaluates to `false`. When a variable validation fails, Terraform errors, displays the configured `error_message`, and stops the operation from proceeding. While provider APIs often error on these same validations, this helps your users avoid the error and issues a helpful error message. You can also use these validations to enforce your organization's design decisions, such as naming conventions.\n+\n+To learn more about variable validations, refer to the [input variable block](/terraform/language/values/variables).\n+\n+### Preconditions and postconditions\n+\n+Use `precondition` blocks when you want to verify your configuration's assumptions for resources, data sources, and outputs before Terraform creates them. Use `postcondition` blocks to validate the guarantees your resources and data sources must meet for your configuration to run.\n+\n+#### Preconditions\n+\n+Terraform evaluates preconditions on resources, data sources, and outputs when Terraform creates a plan. Preconditions take precedence over any argument errors raised by providers on incorrectly configured resources, data sources, and outputs.\n+\n+The following example uses a precondition to verify that the AMI configured for an`aws_instance` uses the `x86_64` CPU architecture.\n+\n+```hcl\n+resource \"aws_instance\" \"example\" {\n+  instance_type = \"t3.micro\"\n+  ami           = data.aws_ami.example.id\n+\n+  lifecycle {\n+    # The AMI ID must refer to an AMI that contains an operating system\n+    # for the `x86_64` architecture.\n+    precondition {\n+      condition     = data.aws_ami.example.architecture == \"x86_64\"\n+      error_message = \"The selected AMI must be for the x86_64 architecture.\"\n+    }\n+  }\n+}\n+```\n+\n+The precondition detects if the caller accidentally selected an AMI for a different architecture, which may not be able to run the software this instance hosts. Terraform evaluates the precondition while it builds its plan, and if the precondition fails Terraform throws an error with the `error_message` argument and stops the current operation. Refer to the [resource configuration reference](/terraform/language/block/resource) for more examples of using a precondition block.\n+\n+An `output` block can also include a precondition to verify a module's output. You can use preconditions on outputs to prevent Terraform from saving an invalid value in your state, or to preserve a valid value from the previous apply.\n+\n+For example, you can use a precondition to ensure a server's security group has at least one ingress rule to allow traffic on ports 80 or 443:\n+\n+```hcl\n+output \"instance_public_ip\" {\n+  value = aws_instance.web.public_ip\n+\n+  precondition {\n+    condition     = length([for rule in aws_security_group.web.ingress : rule if rule.to_port == 80 || rule.to_port == 443]) > 0\n+    error_message = \"Security group must allow HTTP (port 80) or HTTPS (port 443) traffic.\"\n+  }\n+}\n+```\n+\n+If the `precondition` fails, Terraform throws an error with the `error_message` and stops the current operation. Refer to the [`output` block reference](/terraform/language/values/outputs) for more details.\n+\n+#### Postconditions\n+\n+Terraform evaluates `postcondition` blocks after planning and applying changes to a resource, or after reading from a data source.\n+\n+For example, you can use a `postcondition` to detect if a user accidentally provided an AMI intended for the wrong system component.\n+\n+```hcl\n+data \"aws_ami\" \"example\" {\n+  id = var.aws_ami_id\n+\n+  lifecycle {\n+    # The AMI ID must refer to an existing AMI that has the tag \"nomad-server\".\n+    postcondition {\n+      condition     = self.tags[\"Component\"] == \"nomad-server\"\n+      error_message = \"tags[\\\"Component\\\"] must be \\\"nomad-server\\\".\"\n+    }\n+  }\n+}\n+```\n+\n+Unless the component has the `\"nomad-server\"` tag, the postcondition fails, which prevents using the incorrect AMI to provision a server. If the postcondition fails, Terraform throws an error with the `error_message` argument and stops the current operation.\n+\n+Adding postconditions can prevent cascading changes to other dependent resources. Refer to the [`resource` configuration reference](/terraform/language/resources/syntax) for more examples of using a `postcondition` block.\n+\n+Postconditions can serve as static guardrails to enforce mandatory configuration aspects on your `data` and `resource` blocks. For verifying infrastructure dynamically against external or changing conditions, we recommend using the `check` blocks, which run as the final step of a Terraform operation after postconditions. Learn more about the [`check` block](#checks).\n+\n+#### Choose between a precondition or postcondition\n+\n+You can often implement similar verification with different kinds of validation to achieve the same result. For example, you could add a postcondition on a resource that produces data, or add a precondition to a resource or output that references that same data. To decide between a precondition or a postcondition, consider whether the rule you are setting represents an assumption you need to make about the configuration, or a guarantee on the resulting resource, and when it should run.\n+\n+Use preconditions for assumptions that you want to verify before Terraform creates the target block. For example, you may want to verify that the AMI selected for an `aws_instance` has x86_64 CPU architecture before trying to create the instance. Using preconditions for assumptions helps future maintainers understand the values a resource, output, or data source should allow.\n+\n+Use postconditions for guarantees that you need to verify after Terraform creates the resource or reads from the data source. For example, you may want to ensure that an `aws_instance` is launched in a network that assigns it a private DNS record. Use postconditions for guarantees to help future maintainers understand which behaviors they must preserve when changing configuration.\n+\n+When deciding between preconditions and postconditions, it can be helpful to ask:\n+- Which block is clearest to report an error message from? For example, if a resource has many dependencies, it can be pragmatic to declare one postcondition on that resource rather than preconditions on each dependency.\n+- Should you declare the same condition as a precondition and postcondition? If your postcondition is in a different module from your precondition, it can be beneficial to have both, because each module verifies one another as each evolves independently.",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2019006617",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36793,
        "pr_file": "website/docs/language/mitigate-risk/validate.mdx",
        "discussion_id": "2019006617",
        "commented_code": "@@ -0,0 +1,248 @@\n+---\n+page_title: Validate your infrastructure in Terraform’s configuration language\n+description: >-\n+  Configuration-level validation lets you enforce rules, validate resources, and detect errors as part of your infrastructure provisioning process.\n+---\n+\n+# Validate your configuration\n+\n+Terraform has a few ways to validate your configuration, all of which let you document and enforce your configuration's requirements, help you prevent configuration errors and provide contextual error messages. Validate your configuration to improve your module consumer's troubleshooting, make your runs more predictable, and help your maintainers understand your configuration's intent.\n+\n+## Introduction\n+\n+Validation helps you verify that your Terraform configuration works as you intend. Using different types of validation you can:\n+\n+- Verify input variables meet specific requirements\n+- Prevent incorrect outputs from writing to your state\n+- Ensure resources and data sources are configured correctly after Terraform applies them\n+- Verify the broader behavior of your infrastructure\n+- Document assumptions about your infrastructure\n+- Use HCP Terraform to regularly verify your infrastructure\n+\n+When a validation fails, Terraform provides context that you can use in your error messages to help users understand and fix their issue. Terraform evaluates different ways of validation at [different stages of Terraform's execution cycle](#order-of-validation), and they can either block further operation execution or continue execution with warnings.\n+\n+For authors, adding validation to your configuration enforces your module's standards and requirements, helping module consumers understand and use your configuration.\n+\n+## Requirements\n+\n+- Terraform v0.13.0 or later for [input variable validation](#input-variable-validation)\n+- Terraform v1.2.0 or later for [preconditions and postconditions](#preconditions-and-postconditions)\n+- Terraform v1.5.0 or later for [`check` blocks](#checks)\n+\n+## Choose a validation for your use case\n+\n+> **Hands On:** Try the [Validate Modules with Custom Conditions](/terraform/tutorials/configuration-language/custom-conditions) tutorial to learn how to use variable validation, preconditions, and postconditions. Try the [Validate Infrastructure Using Checks](/terraform/tutorials/configuration-language/checks) tutorial to learn how to use `check` blocks.\n+\n+Terraform offers several ways of validating configuration:\n+\n+* Input variable validations verify your configuration's parameters when Terraform creates a plan.\n+* Preconditions ensure individual resources, data sources, and outputs meet your requirements before Terraform tries to create them.\n+* Postconditions verifies that Terraform produced your resources and data sources with the expected and desired settings.\n+* Checks lets you validate that your resources work as expected without blocking Terraform operations based on the check's result.\n+\n+Validating your configuration is flexible, and you can often use different kinds of validation to achieve the same result. When choosing a validation rule, consider whether or not you want the validation to block your operations, and during which phase of the Terraform workflow it should run.\n+\n+### Input variable validation\n+\n+Use input variable validation to:\n+- Verify input variables meet specific format requirements.\n+- Verify input values fall within acceptable ranges.\n+- Prevent Terraform operations if a variable is misconfigured.\n+\n+For example, you can validate whether a variable value has valid AMI ID syntax.\n+\n+```hcl\n+variable \"image_id\" {\n+  type        = string\n+  description = \"The id of the machine image (AMI) to use for the server.\"\n+\n+  validation {\n+    condition     = length(var.image_id) > 4 && substr(var.image_id, 0, 4) == \"ami-\"\n+    error_message = \"The image_id value must be a valid AMI id, starting with \\\"ami-\\\".\"\n+  }\n+}\n+```\n+\n+If you set the value of the `image_id` variable to a string without AMI ID syntax, the condition evaluates to `false`. When a variable validation fails, Terraform errors, displays the configured `error_message`, and stops the operation from proceeding. While provider APIs often error on these same validations, this helps your users avoid the error and issues a helpful error message. You can also use these validations to enforce your organization's design decisions, such as naming conventions.\n+\n+To learn more about variable validations, refer to the [input variable block](/terraform/language/values/variables).\n+\n+### Preconditions and postconditions\n+\n+Use `precondition` blocks when you want to verify your configuration's assumptions for resources, data sources, and outputs before Terraform creates them. Use `postcondition` blocks to validate the guarantees your resources and data sources must meet for your configuration to run.\n+\n+#### Preconditions\n+\n+Terraform evaluates preconditions on resources, data sources, and outputs when Terraform creates a plan. Preconditions take precedence over any argument errors raised by providers on incorrectly configured resources, data sources, and outputs.\n+\n+The following example uses a precondition to verify that the AMI configured for an`aws_instance` uses the `x86_64` CPU architecture.\n+\n+```hcl\n+resource \"aws_instance\" \"example\" {\n+  instance_type = \"t3.micro\"\n+  ami           = data.aws_ami.example.id\n+\n+  lifecycle {\n+    # The AMI ID must refer to an AMI that contains an operating system\n+    # for the `x86_64` architecture.\n+    precondition {\n+      condition     = data.aws_ami.example.architecture == \"x86_64\"\n+      error_message = \"The selected AMI must be for the x86_64 architecture.\"\n+    }\n+  }\n+}\n+```\n+\n+The precondition detects if the caller accidentally selected an AMI for a different architecture, which may not be able to run the software this instance hosts. Terraform evaluates the precondition while it builds its plan, and if the precondition fails Terraform throws an error with the `error_message` argument and stops the current operation. Refer to the [resource configuration reference](/terraform/language/block/resource) for more examples of using a precondition block.\n+\n+An `output` block can also include a precondition to verify a module's output. You can use preconditions on outputs to prevent Terraform from saving an invalid value in your state, or to preserve a valid value from the previous apply.\n+\n+For example, you can use a precondition to ensure a server's security group has at least one ingress rule to allow traffic on ports 80 or 443:\n+\n+```hcl\n+output \"instance_public_ip\" {\n+  value = aws_instance.web.public_ip\n+\n+  precondition {\n+    condition     = length([for rule in aws_security_group.web.ingress : rule if rule.to_port == 80 || rule.to_port == 443]) > 0\n+    error_message = \"Security group must allow HTTP (port 80) or HTTPS (port 443) traffic.\"\n+  }\n+}\n+```\n+\n+If the `precondition` fails, Terraform throws an error with the `error_message` and stops the current operation. Refer to the [`output` block reference](/terraform/language/values/outputs) for more details.\n+\n+#### Postconditions\n+\n+Terraform evaluates `postcondition` blocks after planning and applying changes to a resource, or after reading from a data source.\n+\n+For example, you can use a `postcondition` to detect if a user accidentally provided an AMI intended for the wrong system component.\n+\n+```hcl\n+data \"aws_ami\" \"example\" {\n+  id = var.aws_ami_id\n+\n+  lifecycle {\n+    # The AMI ID must refer to an existing AMI that has the tag \"nomad-server\".\n+    postcondition {\n+      condition     = self.tags[\"Component\"] == \"nomad-server\"\n+      error_message = \"tags[\\\"Component\\\"] must be \\\"nomad-server\\\".\"\n+    }\n+  }\n+}\n+```\n+\n+Unless the component has the `\"nomad-server\"` tag, the postcondition fails, which prevents using the incorrect AMI to provision a server. If the postcondition fails, Terraform throws an error with the `error_message` argument and stops the current operation.\n+\n+Adding postconditions can prevent cascading changes to other dependent resources. Refer to the [`resource` configuration reference](/terraform/language/resources/syntax) for more examples of using a `postcondition` block.\n+\n+Postconditions can serve as static guardrails to enforce mandatory configuration aspects on your `data` and `resource` blocks. For verifying infrastructure dynamically against external or changing conditions, we recommend using the `check` blocks, which run as the final step of a Terraform operation after postconditions. Learn more about the [`check` block](#checks).\n+\n+#### Choose between a precondition or postcondition\n+\n+You can often implement similar verification with different kinds of validation to achieve the same result. For example, you could add a postcondition on a resource that produces data, or add a precondition to a resource or output that references that same data. To decide between a precondition or a postcondition, consider whether the rule you are setting represents an assumption you need to make about the configuration, or a guarantee on the resulting resource, and when it should run.\n+\n+Use preconditions for assumptions that you want to verify before Terraform creates the target block. For example, you may want to verify that the AMI selected for an `aws_instance` has x86_64 CPU architecture before trying to create the instance. Using preconditions for assumptions helps future maintainers understand the values a resource, output, or data source should allow.\n+\n+Use postconditions for guarantees that you need to verify after Terraform creates the resource or reads from the data source. For example, you may want to ensure that an `aws_instance` is launched in a network that assigns it a private DNS record. Use postconditions for guarantees to help future maintainers understand which behaviors they must preserve when changing configuration.\n+\n+When deciding between preconditions and postconditions, it can be helpful to ask:\n+- Which block is clearest to report an error message from? For example, if a resource has many dependencies, it can be pragmatic to declare one postcondition on that resource rather than preconditions on each dependency.\n+- Should you declare the same condition as a precondition and postcondition? If your postcondition is in a different module from your precondition, it can be beneficial to have both, because each module verifies one another as each evolves independently.",
        "comment_created_at": "2025-03-28T16:42:13+00:00",
        "comment_author": "trujillo-adam",
        "comment_body": "```suggestion\r\n- Determine whether the precondition and postcondition should you declare the same conditions. If your postcondition is in a different module from your precondition, it can be beneficial to have both, because each module verifies one another as each evolves independently.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1968468669",
    "pr_number": 36572,
    "pr_file": "website/docs/language/resources/ephemeral/write-only.mdx",
    "created_at": "2025-02-24T21:52:50+00:00",
    "commented_code": "---\n page_title: Use write-only arguments\n-description: Learn how to use write-only arguments to set temporary values that can only be overwritten and are not stored in Terraform's state.\n+description: Learn how to use write-only arguments to set temporary values on resources that are not stored in Terraform's state or plan files.\n ---\n \n-<!-- THIS IS HIDDEN FOR NOW - TODO FOR GA: unhide when we have a code snippet to share and I can add more details -->\n-\n # Use write-only arguments\n \n-Terraform resources can include ephemeral arguments, also known as attributes, for data that only needs to exist temporarily. An ephemeral argument on a resource is called a \"write-only argument\". Write-only arguments can help store generated sensitive data for the current Terraform operation, such as a short-lived password, token, or session identifier.\n+Write-only arguments let you securely pass temporary values to Terraform resources during a Terraform operation without persisting those values to state or plan files. Use write-only arguments to store sensitive data for the current Terraform operation, such as a short-lived password, token, or session identifier. \n+\n+## Background\n+\n+Write-only arguments are only available during the runtime of a Terraform operation, and Terraform omits those values from state and plan files.\n+\n+You can use write-only arguments to pass ephemeral values directly to a resource without Terraform persisting that value. For example, you can directly pass a generated password or a fetched token to a write-only argument without risking Terraform exposing that value. Use write-only arguments to ensure sensitive data only exists during the current Terraform operation.\n+\n+Unlike other ephemeral constructs in Terraform, such as ephemeral resources or variables, write-only arguments also accept both ephemeral and non-ephemeral values.\n+\n+## Requirements\n+\n+To use write-only arguments, you must use Terraform v.1.11 or later and use  a `resource` that supports write-only arguments.\n+\n+## Declare a write-only argument\n+\n+Providers indicate in the Terraform registry whether an argument is write-only. For example, the `aws` provider's `aws_db_instance` resource has a write-only `password_wo` argument. The `password_wo` argument accepts a value to use as the database password:\n+\n+<CodeBlockConfig highlight=\"7\">\n+\n+```hcl\n+resource \"aws_db_instance\" \"test\" {\n+  instance_class      = \"db.t5.micro\"\n+  allocated_storage   = \"5\"\n+  engine              = \"postgres\"\n+  username            = \"admin\"\n+  skip_final_snapshot = true\n+  password_wo = <ephemeral or non-ephemeral value>\n+}\n+```\n+\n+</CodeBlockConfig>\n+\n+Write-only arguments accept both ephemeral and non-ephemeral values. For example, you could also use a string as the value of a write-only argument:",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1968468669",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36572,
        "pr_file": "website/docs/language/resources/ephemeral/write-only.mdx",
        "discussion_id": "1968468669",
        "commented_code": "@@ -1,44 +1,123 @@\n ---\n page_title: Use write-only arguments\n-description: Learn how to use write-only arguments to set temporary values that can only be overwritten and are not stored in Terraform's state.\n+description: Learn how to use write-only arguments to set temporary values on resources that are not stored in Terraform's state or plan files.\n ---\n \n-<!-- THIS IS HIDDEN FOR NOW - TODO FOR GA: unhide when we have a code snippet to share and I can add more details -->\n-\n # Use write-only arguments\n \n-Terraform resources can include ephemeral arguments, also known as attributes, for data that only needs to exist temporarily. An ephemeral argument on a resource is called a \"write-only argument\". Write-only arguments can help store generated sensitive data for the current Terraform operation, such as a short-lived password, token, or session identifier.\n+Write-only arguments let you securely pass temporary values to Terraform resources during a Terraform operation without persisting those values to state or plan files. Use write-only arguments to store sensitive data for the current Terraform operation, such as a short-lived password, token, or session identifier. \n+\n+## Background\n+\n+Write-only arguments are only available during the runtime of a Terraform operation, and Terraform omits those values from state and plan files.\n+\n+You can use write-only arguments to pass ephemeral values directly to a resource without Terraform persisting that value. For example, you can directly pass a generated password or a fetched token to a write-only argument without risking Terraform exposing that value. Use write-only arguments to ensure sensitive data only exists during the current Terraform operation.\n+\n+Unlike other ephemeral constructs in Terraform, such as ephemeral resources or variables, write-only arguments also accept both ephemeral and non-ephemeral values.\n+\n+## Requirements\n+\n+To use write-only arguments, you must use Terraform v.1.11 or later and use  a `resource` that supports write-only arguments.\n+\n+## Declare a write-only argument\n+\n+Providers indicate in the Terraform registry whether an argument is write-only. For example, the `aws` provider's `aws_db_instance` resource has a write-only `password_wo` argument. The `password_wo` argument accepts a value to use as the database password:\n+\n+<CodeBlockConfig highlight=\"7\">\n+\n+```hcl\n+resource \"aws_db_instance\" \"test\" {\n+  instance_class      = \"db.t5.micro\"\n+  allocated_storage   = \"5\"\n+  engine              = \"postgres\"\n+  username            = \"admin\"\n+  skip_final_snapshot = true\n+  password_wo = <ephemeral or non-ephemeral value>\n+}\n+```\n+\n+</CodeBlockConfig>\n+\n+Write-only arguments accept both ephemeral and non-ephemeral values. For example, you could also use a string as the value of a write-only argument:",
        "comment_created_at": "2025-02-24T21:52:50+00:00",
        "comment_author": "garvitarai1",
        "comment_body": "Maybe we should say somewhere this is not recommended though. \r\n\r\nShould we add password version to these examples as well for completeness? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1968483057",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36572,
        "pr_file": "website/docs/language/resources/ephemeral/write-only.mdx",
        "discussion_id": "1968468669",
        "commented_code": "@@ -1,44 +1,123 @@\n ---\n page_title: Use write-only arguments\n-description: Learn how to use write-only arguments to set temporary values that can only be overwritten and are not stored in Terraform's state.\n+description: Learn how to use write-only arguments to set temporary values on resources that are not stored in Terraform's state or plan files.\n ---\n \n-<!-- THIS IS HIDDEN FOR NOW - TODO FOR GA: unhide when we have a code snippet to share and I can add more details -->\n-\n # Use write-only arguments\n \n-Terraform resources can include ephemeral arguments, also known as attributes, for data that only needs to exist temporarily. An ephemeral argument on a resource is called a \"write-only argument\". Write-only arguments can help store generated sensitive data for the current Terraform operation, such as a short-lived password, token, or session identifier.\n+Write-only arguments let you securely pass temporary values to Terraform resources during a Terraform operation without persisting those values to state or plan files. Use write-only arguments to store sensitive data for the current Terraform operation, such as a short-lived password, token, or session identifier. \n+\n+## Background\n+\n+Write-only arguments are only available during the runtime of a Terraform operation, and Terraform omits those values from state and plan files.\n+\n+You can use write-only arguments to pass ephemeral values directly to a resource without Terraform persisting that value. For example, you can directly pass a generated password or a fetched token to a write-only argument without risking Terraform exposing that value. Use write-only arguments to ensure sensitive data only exists during the current Terraform operation.\n+\n+Unlike other ephemeral constructs in Terraform, such as ephemeral resources or variables, write-only arguments also accept both ephemeral and non-ephemeral values.\n+\n+## Requirements\n+\n+To use write-only arguments, you must use Terraform v.1.11 or later and use  a `resource` that supports write-only arguments.\n+\n+## Declare a write-only argument\n+\n+Providers indicate in the Terraform registry whether an argument is write-only. For example, the `aws` provider's `aws_db_instance` resource has a write-only `password_wo` argument. The `password_wo` argument accepts a value to use as the database password:\n+\n+<CodeBlockConfig highlight=\"7\">\n+\n+```hcl\n+resource \"aws_db_instance\" \"test\" {\n+  instance_class      = \"db.t5.micro\"\n+  allocated_storage   = \"5\"\n+  engine              = \"postgres\"\n+  username            = \"admin\"\n+  skip_final_snapshot = true\n+  password_wo = <ephemeral or non-ephemeral value>\n+}\n+```\n+\n+</CodeBlockConfig>\n+\n+Write-only arguments accept both ephemeral and non-ephemeral values. For example, you could also use a string as the value of a write-only argument:",
        "comment_created_at": "2025-02-24T22:06:56+00:00",
        "comment_author": "rkoron007",
        "comment_body": "Yeah, good point about adding the versions - I like that for setting a nice precedent. \r\n\r\nHow would it feel to make that a positive reframe to instead focus on recommending v.s. advising against? Not for any particular reason other than I know folks always like to see a recommendation: \r\n```\r\nWrite-only arguments accept both ephemeral and non-ephemeral values. For example, you could also use a string as the value of a write-only argument:\r\n\r\n<example>\r\n\r\nHowever, we recommend using write-only arguments for passing ephemeral values to resources.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1970117553",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36572,
        "pr_file": "website/docs/language/resources/ephemeral/write-only.mdx",
        "discussion_id": "1968468669",
        "commented_code": "@@ -1,44 +1,123 @@\n ---\n page_title: Use write-only arguments\n-description: Learn how to use write-only arguments to set temporary values that can only be overwritten and are not stored in Terraform's state.\n+description: Learn how to use write-only arguments to set temporary values on resources that are not stored in Terraform's state or plan files.\n ---\n \n-<!-- THIS IS HIDDEN FOR NOW - TODO FOR GA: unhide when we have a code snippet to share and I can add more details -->\n-\n # Use write-only arguments\n \n-Terraform resources can include ephemeral arguments, also known as attributes, for data that only needs to exist temporarily. An ephemeral argument on a resource is called a \"write-only argument\". Write-only arguments can help store generated sensitive data for the current Terraform operation, such as a short-lived password, token, or session identifier.\n+Write-only arguments let you securely pass temporary values to Terraform resources during a Terraform operation without persisting those values to state or plan files. Use write-only arguments to store sensitive data for the current Terraform operation, such as a short-lived password, token, or session identifier. \n+\n+## Background\n+\n+Write-only arguments are only available during the runtime of a Terraform operation, and Terraform omits those values from state and plan files.\n+\n+You can use write-only arguments to pass ephemeral values directly to a resource without Terraform persisting that value. For example, you can directly pass a generated password or a fetched token to a write-only argument without risking Terraform exposing that value. Use write-only arguments to ensure sensitive data only exists during the current Terraform operation.\n+\n+Unlike other ephemeral constructs in Terraform, such as ephemeral resources or variables, write-only arguments also accept both ephemeral and non-ephemeral values.\n+\n+## Requirements\n+\n+To use write-only arguments, you must use Terraform v.1.11 or later and use  a `resource` that supports write-only arguments.\n+\n+## Declare a write-only argument\n+\n+Providers indicate in the Terraform registry whether an argument is write-only. For example, the `aws` provider's `aws_db_instance` resource has a write-only `password_wo` argument. The `password_wo` argument accepts a value to use as the database password:\n+\n+<CodeBlockConfig highlight=\"7\">\n+\n+```hcl\n+resource \"aws_db_instance\" \"test\" {\n+  instance_class      = \"db.t5.micro\"\n+  allocated_storage   = \"5\"\n+  engine              = \"postgres\"\n+  username            = \"admin\"\n+  skip_final_snapshot = true\n+  password_wo = <ephemeral or non-ephemeral value>\n+}\n+```\n+\n+</CodeBlockConfig>\n+\n+Write-only arguments accept both ephemeral and non-ephemeral values. For example, you could also use a string as the value of a write-only argument:",
        "comment_created_at": "2025-02-25T16:20:23+00:00",
        "comment_author": "garvitarai1",
        "comment_body": "ya that sounds great! I think we should provide an opinionated view in the docs",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1936489562",
    "pr_number": 36258,
    "pr_file": "website/docs/language/backend/azurerm.mdx",
    "created_at": "2025-01-31T00:16:46+00:00",
    "commented_code": "* `key` - (Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container.\n \n-* `environment` - (Optional) The Azure Environment which should be used. This can also be sourced from the `ARM_ENVIRONMENT` environment variable. Possible values are `public`, `china`, `german`, `stack` and `usgovernment`. Defaults to `public`.\n-\n-* `endpoint` - (Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the `ARM_ENDPOINT` environment variable.\n-\n-~> **NOTE:** An `endpoint` should only be configured when using Azure Stack.\n+* `environment` - (Optional) The Azure Environment which should be used. This can also be sourced from the `ARM_ENVIRONMENT` environment variable. Possible values are `public`, `china`  and `usgovernment`. Defaults to `public`.\n \n * `metadata_host` - (Optional) The Hostname of the Azure Metadata Service (for example `management.azure.com`), used to obtain the Cloud Environment when using a Custom Azure Environment. This can also be sourced from the `ARM_METADATA_HOSTNAME` Environment Variable.\n \n * `snapshot` - (Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use? Defaults to `false`. This value can also be sourced from the `ARM_SNAPSHOT` environment variable.\n \n+* `use_cli` - (Optional) Should Azure CLI be used for authentication? Defaults to `false`. This value can also be sourced from the `ARM_USE_CLI` environment variable.",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1936489562",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36258,
        "pr_file": "website/docs/language/backend/azurerm.mdx",
        "discussion_id": "1936489562",
        "commented_code": "@@ -514,16 +514,14 @@ The following configuration options are supported:\n \n * `key` - (Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container.\n \n-* `environment` - (Optional) The Azure Environment which should be used. This can also be sourced from the `ARM_ENVIRONMENT` environment variable. Possible values are `public`, `china`, `german`, `stack` and `usgovernment`. Defaults to `public`.\n-\n-* `endpoint` - (Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the `ARM_ENDPOINT` environment variable.\n-\n-~> **NOTE:** An `endpoint` should only be configured when using Azure Stack.\n+* `environment` - (Optional) The Azure Environment which should be used. This can also be sourced from the `ARM_ENVIRONMENT` environment variable. Possible values are `public`, `china`  and `usgovernment`. Defaults to `public`.\n \n * `metadata_host` - (Optional) The Hostname of the Azure Metadata Service (for example `management.azure.com`), used to obtain the Cloud Environment when using a Custom Azure Environment. This can also be sourced from the `ARM_METADATA_HOSTNAME` Environment Variable.\n \n * `snapshot` - (Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use? Defaults to `false`. This value can also be sourced from the `ARM_SNAPSHOT` environment variable.\n \n+* `use_cli` - (Optional) Should Azure CLI be used for authentication? Defaults to `false`. This value can also be sourced from the `ARM_USE_CLI` environment variable.",
        "comment_created_at": "2025-01-31T00:16:46+00:00",
        "comment_author": "trujillo-adam",
        "comment_body": "```suggestion\r\n- `use_cli`: (Optional) Enables Terraform to use the Azure CLI for authentication. The default is `false`. You can also set the `ARM_USE_CLI` environment variable to configure this option.\r\n```\r\nNot sure why some of these are phrased as questions, but we should directly and concretely state what the option does.",
        "pr_file_module": null
      },
      {
        "comment_id": "1936525122",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36258,
        "pr_file": "website/docs/language/backend/azurerm.mdx",
        "discussion_id": "1936489562",
        "commented_code": "@@ -514,16 +514,14 @@ The following configuration options are supported:\n \n * `key` - (Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container.\n \n-* `environment` - (Optional) The Azure Environment which should be used. This can also be sourced from the `ARM_ENVIRONMENT` environment variable. Possible values are `public`, `china`, `german`, `stack` and `usgovernment`. Defaults to `public`.\n-\n-* `endpoint` - (Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the `ARM_ENDPOINT` environment variable.\n-\n-~> **NOTE:** An `endpoint` should only be configured when using Azure Stack.\n+* `environment` - (Optional) The Azure Environment which should be used. This can also be sourced from the `ARM_ENVIRONMENT` environment variable. Possible values are `public`, `china`  and `usgovernment`. Defaults to `public`.\n \n * `metadata_host` - (Optional) The Hostname of the Azure Metadata Service (for example `management.azure.com`), used to obtain the Cloud Environment when using a Custom Azure Environment. This can also be sourced from the `ARM_METADATA_HOSTNAME` Environment Variable.\n \n * `snapshot` - (Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use? Defaults to `false`. This value can also be sourced from the `ARM_SNAPSHOT` environment variable.\n \n+* `use_cli` - (Optional) Should Azure CLI be used for authentication? Defaults to `false`. This value can also be sourced from the `ARM_USE_CLI` environment variable.",
        "comment_created_at": "2025-01-31T01:10:40+00:00",
        "comment_author": "magodo",
        "comment_body": "The question style is what we've been using for the `azreurm` document all the time, for bools.",
        "pr_file_module": null
      }
    ]
  }
]