[
  {
    "discussion_id": "1995701140",
    "pr_number": 36643,
    "pr_file": "internal/communicator/ssh/communicator.go",
    "created_at": "2025-03-14T14:37:28+00:00",
    "commented_code": "return \"\", fmt.Errorf(\"Cannot quote shell command, target platform unknown: %s\", targetPlatform)\n \n }\n+\n+// ProxyCommandConnectFunc is a convenience method for returning a function\n+// that connects to a host using a proxy command.\n+func ProxyCommandConnectFunc(proxyCommand, addr string) func() (net.Conn, error) {\n+\treturn func() (net.Conn, error) {\n+\t\tlog.Printf(\"[DEBUG] Connecting to %s using proxy command: %s\", addr, proxyCommand)\n+\n+\t\t// Replace %h and %p in the proxy command with the host and port\n+\t\thost, port, err := net.SplitHostPort(addr)\n+\t\tif err != nil {\n+\t\t\treturn nil, fmt.Errorf(\"Error parsing address: %s\", err)\n+\t\t}\n+\n+\t\tcommand := strings.Replace(proxyCommand, \"%h\", host, -1)",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "1995701140",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36643,
        "pr_file": "internal/communicator/ssh/communicator.go",
        "discussion_id": "1995701140",
        "commented_code": "@@ -897,3 +918,164 @@ func quoteShell(args []string, targetPlatform string) (string, error) {\n \treturn \"\", fmt.Errorf(\"Cannot quote shell command, target platform unknown: %s\", targetPlatform)\n \n }\n+\n+// ProxyCommandConnectFunc is a convenience method for returning a function\n+// that connects to a host using a proxy command.\n+func ProxyCommandConnectFunc(proxyCommand, addr string) func() (net.Conn, error) {\n+\treturn func() (net.Conn, error) {\n+\t\tlog.Printf(\"[DEBUG] Connecting to %s using proxy command: %s\", addr, proxyCommand)\n+\n+\t\t// Replace %h and %p in the proxy command with the host and port\n+\t\thost, port, err := net.SplitHostPort(addr)\n+\t\tif err != nil {\n+\t\t\treturn nil, fmt.Errorf(\"Error parsing address: %s\", err)\n+\t\t}\n+\n+\t\tcommand := strings.Replace(proxyCommand, \"%h\", host, -1)",
        "comment_created_at": "2025-03-14T14:37:28+00:00",
        "comment_author": "jbardin",
        "comment_body": "Since this is injecting config values into an arbitrary command it does set up the possibility for command injection. Something to consider for a security review.",
        "pr_file_module": null
      },
      {
        "comment_id": "2004334493",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36643,
        "pr_file": "internal/communicator/ssh/communicator.go",
        "discussion_id": "1995701140",
        "commented_code": "@@ -897,3 +918,164 @@ func quoteShell(args []string, targetPlatform string) (string, error) {\n \treturn \"\", fmt.Errorf(\"Cannot quote shell command, target platform unknown: %s\", targetPlatform)\n \n }\n+\n+// ProxyCommandConnectFunc is a convenience method for returning a function\n+// that connects to a host using a proxy command.\n+func ProxyCommandConnectFunc(proxyCommand, addr string) func() (net.Conn, error) {\n+\treturn func() (net.Conn, error) {\n+\t\tlog.Printf(\"[DEBUG] Connecting to %s using proxy command: %s\", addr, proxyCommand)\n+\n+\t\t// Replace %h and %p in the proxy command with the host and port\n+\t\thost, port, err := net.SplitHostPort(addr)\n+\t\tif err != nil {\n+\t\t\treturn nil, fmt.Errorf(\"Error parsing address: %s\", err)\n+\t\t}\n+\n+\t\tcommand := strings.Replace(proxyCommand, \"%h\", host, -1)",
        "comment_created_at": "2025-03-19T21:30:25+00:00",
        "comment_author": "jbardin",
        "comment_body": "OK, after reading through the proposal, I'd probably opt to leave out this special replacement syntax since it's OpenSSH specific, and just make use of normal string interpolation for the arguments.",
        "pr_file_module": null
      }
    ]
  }
]