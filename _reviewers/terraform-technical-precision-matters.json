[
  {
    "discussion_id": "2018907268",
    "pr_number": 36793,
    "pr_file": "website/docs/language/expressions/conditionals.mdx",
    "created_at": "2025-03-28T15:40:04+00:00",
    "commented_code": "```hcl\n var.example ? tostring(12) : \"hello\"\n ```\n+\n+## Examples\n+\n+You can use any of Terraform's built-in functions or language operators\n+in a condition as long as the expression is valid and returns a boolean result. The following language features are particularly useful when writing condition expressions.\n+\n+### Logical operator examples\n+\n+Use the logical operators `&&` (AND), `||` (OR), and `!` (NOT) to combine multiple conditions together.\n+\n+```hcl\n+  condition = var.name != \"\" && lower(var.name) == var.name\n+```\n+\n+You can also use arithmetic operators (e.g. `a + b`), equality operators (eg., `a == b`) and comparison operators (e.g., `a < b`). Refer to [Arithmetic and Logical Operators](/terraform/language/expressions/operators) for details.",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2018907268",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36793,
        "pr_file": "website/docs/language/expressions/conditionals.mdx",
        "discussion_id": "2018907268",
        "commented_code": "@@ -78,3 +78,134 @@ a string.\n ```hcl\n var.example ? tostring(12) : \"hello\"\n ```\n+\n+## Examples\n+\n+You can use any of Terraform's built-in functions or language operators\n+in a condition as long as the expression is valid and returns a boolean result. The following language features are particularly useful when writing condition expressions.\n+\n+### Logical operator examples\n+\n+Use the logical operators `&&` (AND), `||` (OR), and `!` (NOT) to combine multiple conditions together.\n+\n+```hcl\n+  condition = var.name != \"\" && lower(var.name) == var.name\n+```\n+\n+You can also use arithmetic operators (e.g. `a + b`), equality operators (eg., `a == b`) and comparison operators (e.g., `a < b`). Refer to [Arithmetic and Logical Operators](/terraform/language/expressions/operators) for details.",
        "comment_created_at": "2025-03-28T15:40:04+00:00",
        "comment_author": "trujillo-adam",
        "comment_body": "```suggestion\r\nYou can also use arithmetic operators, for example `a + b`, equality operators, for example `a == b`, and comparison operators, for example `a < b`. Refer to [Arithmetic and Logical Operators](/terraform/language/expressions/operators) for details.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2018927371",
    "pr_number": 36793,
    "pr_file": "website/docs/language/expressions/conditionals.mdx",
    "created_at": "2025-03-28T15:52:58+00:00",
    "commented_code": "```hcl\n var.example ? tostring(12) : \"hello\"\n ```\n+\n+## Examples\n+\n+You can use any of Terraform's built-in functions or language operators\n+in a condition as long as the expression is valid and returns a boolean result. The following language features are particularly useful when writing condition expressions.\n+\n+### Logical operator examples\n+\n+Use the logical operators `&&` (AND), `||` (OR), and `!` (NOT) to combine multiple conditions together.\n+\n+```hcl\n+  condition = var.name != \"\" && lower(var.name) == var.name\n+```\n+\n+You can also use arithmetic operators (e.g. `a + b`), equality operators (eg., `a == b`) and comparison operators (e.g., `a < b`). Refer to [Arithmetic and Logical Operators](/terraform/language/expressions/operators) for details.\n+\n+### `contains` Function\n+\n+Use the [`contains` function](/terraform/language/functions/contains) to test whether a given value is one of a set of predefined valid values.\n+\n+```hcl\n+  condition = contains([\"STAGE\", \"PROD\"], var.environment)\n+```\n+\n+### `length` Function\n+\n+Use the [`length` function](/terraform/language/functions/length) to test a collection's length and require a non-empty list or map.\n+\n+```hcl\n+  condition = length(var.items) != 0\n+```\n+This is a better approach than directly comparing with another collection using `==` or `!=`. This is because the comparison operators can only return `true` if both operands have exactly the same type, which is often ambiguous for empty collections.",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2018927371",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36793,
        "pr_file": "website/docs/language/expressions/conditionals.mdx",
        "discussion_id": "2018927371",
        "commented_code": "@@ -78,3 +78,134 @@ a string.\n ```hcl\n var.example ? tostring(12) : \"hello\"\n ```\n+\n+## Examples\n+\n+You can use any of Terraform's built-in functions or language operators\n+in a condition as long as the expression is valid and returns a boolean result. The following language features are particularly useful when writing condition expressions.\n+\n+### Logical operator examples\n+\n+Use the logical operators `&&` (AND), `||` (OR), and `!` (NOT) to combine multiple conditions together.\n+\n+```hcl\n+  condition = var.name != \"\" && lower(var.name) == var.name\n+```\n+\n+You can also use arithmetic operators (e.g. `a + b`), equality operators (eg., `a == b`) and comparison operators (e.g., `a < b`). Refer to [Arithmetic and Logical Operators](/terraform/language/expressions/operators) for details.\n+\n+### `contains` Function\n+\n+Use the [`contains` function](/terraform/language/functions/contains) to test whether a given value is one of a set of predefined valid values.\n+\n+```hcl\n+  condition = contains([\"STAGE\", \"PROD\"], var.environment)\n+```\n+\n+### `length` Function\n+\n+Use the [`length` function](/terraform/language/functions/length) to test a collection's length and require a non-empty list or map.\n+\n+```hcl\n+  condition = length(var.items) != 0\n+```\n+This is a better approach than directly comparing with another collection using `==` or `!=`. This is because the comparison operators can only return `true` if both operands have exactly the same type, which is often ambiguous for empty collections.",
        "comment_created_at": "2025-03-28T15:52:58+00:00",
        "comment_author": "trujillo-adam",
        "comment_body": "```suggestion\r\n\r\nUsing the `length` function is more suitable than using `==` or `!=` when both operands potentially have exactly the same type, which is often ambiguous for empty collections.\r\n```\r\nMaybe not the big of a semantic difference between \"better\" and \"more suitable\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2018941626",
    "pr_number": 36793,
    "pr_file": "website/docs/language/functions/timecmp.mdx",
    "created_at": "2025-03-28T16:01:57+00:00",
    "commented_code": "0\n ```\n \n-`timecmp` can be particularly useful in defining\n-[custom condition checks](/terraform/language/expressions/custom-conditions) that\n-involve a specified timestamp being within a particular range. For example,\n+`timecmp` can be particularly useful while writing validations that involve a specified timestamp being within a particular range.",
    "repo_full_name": "hashicorp/terraform",
    "discussion_comments": [
      {
        "comment_id": "2018941626",
        "repo_full_name": "hashicorp/terraform",
        "pr_number": 36793,
        "pr_file": "website/docs/language/functions/timecmp.mdx",
        "discussion_id": "2018941626",
        "commented_code": "@@ -43,9 +43,8 @@ both be strings conforming to this syntax.\n 0\n ```\n \n-`timecmp` can be particularly useful in defining\n-[custom condition checks](/terraform/language/expressions/custom-conditions) that\n-involve a specified timestamp being within a particular range. For example,\n+`timecmp` can be particularly useful while writing validations that involve a specified timestamp being within a particular range.",
        "comment_created_at": "2025-03-28T16:01:57+00:00",
        "comment_author": "trujillo-adam",
        "comment_body": "```suggestion\r\nThe `timecmp` function is suitable for validations that verify that a specified timestamp is within a particular range.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]