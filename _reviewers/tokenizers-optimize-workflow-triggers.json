[
  {
    "discussion_id": "1805605391",
    "pr_number": 1659,
    "pr_file": ".github/workflows/docs-check.yml",
    "created_at": "2024-10-17T23:49:45+00:00",
    "commented_code": "uses: actions/checkout@v3\n \n       - name: Install Python\n-        uses: actions/setup-python@v1\n+        uses: actions/setup-python@v5",
    "repo_full_name": "huggingface/tokenizers",
    "discussion_comments": [
      {
        "comment_id": "1805605391",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 1659,
        "pr_file": ".github/workflows/docs-check.yml",
        "discussion_id": "1805605391",
        "commented_code": "@@ -14,18 +14,13 @@ jobs:\n         uses: actions/checkout@v3\n \n       - name: Install Python\n-        uses: actions/setup-python@v1\n+        uses: actions/setup-python@v5",
        "comment_created_at": "2024-10-17T23:49:45+00:00",
        "comment_author": "hamirmahal",
        "comment_body": "`v5` is the latest major version of [`actions/setup-python`](https://github.com/actions/setup-python) at the time of this writing.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "890974773",
    "pr_number": 1009,
    "pr_file": "tokenizers/examples/unstable_wasm/.appveyor.yml",
    "created_at": "2022-06-07T09:11:55+00:00",
    "commented_code": "+install:\n+  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe",
    "repo_full_name": "huggingface/tokenizers",
    "discussion_comments": [
      {
        "comment_id": "890974773",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 1009,
        "pr_file": "tokenizers/examples/unstable_wasm/.appveyor.yml",
        "discussion_id": "890974773",
        "commented_code": "@@ -0,0 +1,11 @@\n+install:\n+  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe",
        "comment_created_at": "2022-06-07T09:11:55+00:00",
        "comment_author": "McPatate",
        "comment_body": "Why use appveyor for the CI ?",
        "pr_file_module": null
      },
      {
        "comment_id": "891150921",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 1009,
        "pr_file": "tokenizers/examples/unstable_wasm/.appveyor.yml",
        "discussion_id": "890974773",
        "commented_code": "@@ -0,0 +1,11 @@\n+install:\n+  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe",
        "comment_created_at": "2022-06-07T12:24:22+00:00",
        "comment_author": "Narsil",
        "comment_body": "It's in the default template for `wasm` app. I don't really see a lot of downsides of keeping them.",
        "pr_file_module": null
      },
      {
        "comment_id": "891160207",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 1009,
        "pr_file": "tokenizers/examples/unstable_wasm/.appveyor.yml",
        "discussion_id": "890974773",
        "commented_code": "@@ -0,0 +1,11 @@\n+install:\n+  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe",
        "comment_created_at": "2022-06-07T12:31:15+00:00",
        "comment_author": "McPatate",
        "comment_body": "I'd leave it up to the user to know or not to add these kinds of files, they don't showcase anything particular to `tokenizers` and are readily available on `wasm` tutorials. But that's just my 2 cents !",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "366505007",
    "pr_number": 68,
    "pr_file": ".github/workflows/node-release.yml",
    "created_at": "2020-01-14T18:36:49+00:00",
    "commented_code": "+name: Node Release\n+\n+env:\n+  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n+  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n+  AWS_DEFAULT_REGION: us-east-1\n+\n+on:\n+  push:\n+    tags:\n+      - node-v*\n+\n+jobs:\n+  build_all:",
    "repo_full_name": "huggingface/tokenizers",
    "discussion_comments": [
      {
        "comment_id": "366505007",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 68,
        "pr_file": ".github/workflows/node-release.yml",
        "discussion_id": "366505007",
        "commented_code": "@@ -0,0 +1,104 @@\n+name: Node Release\n+\n+env:\n+  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n+  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n+  AWS_DEFAULT_REGION: us-east-1\n+\n+on:\n+  push:\n+    tags:\n+      - node-v*\n+\n+jobs:\n+  build_all:",
        "comment_created_at": "2020-01-14T18:36:49+00:00",
        "comment_author": "n1t0",
        "comment_body": "Is this step doing something that the next one doesn't? Otherwise, since the `npm_publish` depends on `rust_publish` we can probably remove it. If one of the builds (in `rust_publish`) for any of the os/node were to fail, it would just fail the whole job anyway, right?\r\nI think it would maybe make more sense to run the `build_all` job for each commit, to make sure we don't break anything in these bindings. What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "366509553",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 68,
        "pr_file": ".github/workflows/node-release.yml",
        "discussion_id": "366505007",
        "commented_code": "@@ -0,0 +1,104 @@\n+name: Node Release\n+\n+env:\n+  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n+  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n+  AWS_DEFAULT_REGION: us-east-1\n+\n+on:\n+  push:\n+    tags:\n+      - node-v*\n+\n+jobs:\n+  build_all:",
        "comment_created_at": "2020-01-14T18:46:20+00:00",
        "comment_author": "Pierrci",
        "comment_body": "`rust_build` only builds rust, not typescript so that's why. I agree it would be better to run that at each commit, but maybe only the ts build then (and only when files inside `bindings/node` are updated or something like that)? There is already a rust build running at each commit.",
        "pr_file_module": null
      },
      {
        "comment_id": "366510319",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 68,
        "pr_file": ".github/workflows/node-release.yml",
        "discussion_id": "366505007",
        "commented_code": "@@ -0,0 +1,104 @@\n+name: Node Release\n+\n+env:\n+  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n+  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n+  AWS_DEFAULT_REGION: us-east-1\n+\n+on:\n+  push:\n+    tags:\n+      - node-v*\n+\n+jobs:\n+  build_all:",
        "comment_created_at": "2020-01-14T18:47:54+00:00",
        "comment_author": "Pierrci",
        "comment_body": "And js tests could be integrated at this step too (when they arrive ðŸ˜†)",
        "pr_file_module": null
      },
      {
        "comment_id": "366513251",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 68,
        "pr_file": ".github/workflows/node-release.yml",
        "discussion_id": "366505007",
        "commented_code": "@@ -0,0 +1,104 @@\n+name: Node Release\n+\n+env:\n+  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n+  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n+  AWS_DEFAULT_REGION: us-east-1\n+\n+on:\n+  push:\n+    tags:\n+      - node-v*\n+\n+jobs:\n+  build_all:",
        "comment_created_at": "2020-01-14T18:53:45+00:00",
        "comment_author": "n1t0",
        "comment_body": "Sure but the `Rust` job doesn't check that the bindings still compile after something has been modified in the main library. At each commit, I think we would like to make sure everything is still compiling: the main library, but also all the bindings.",
        "pr_file_module": null
      },
      {
        "comment_id": "366517468",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 68,
        "pr_file": ".github/workflows/node-release.yml",
        "discussion_id": "366505007",
        "commented_code": "@@ -0,0 +1,104 @@\n+name: Node Release\n+\n+env:\n+  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n+  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n+  AWS_DEFAULT_REGION: us-east-1\n+\n+on:\n+  push:\n+    tags:\n+      - node-v*\n+\n+jobs:\n+  build_all:",
        "comment_created_at": "2020-01-14T19:02:34+00:00",
        "comment_author": "Pierrci",
        "comment_body": "yes you're right, I pushed a new workflow `node.yml` with the `build_all` job and removed it from the release workflow",
        "pr_file_module": null
      },
      {
        "comment_id": "366525098",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 68,
        "pr_file": ".github/workflows/node-release.yml",
        "discussion_id": "366505007",
        "commented_code": "@@ -0,0 +1,104 @@\n+name: Node Release\n+\n+env:\n+  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n+  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n+  AWS_DEFAULT_REGION: us-east-1\n+\n+on:\n+  push:\n+    tags:\n+      - node-v*\n+\n+jobs:\n+  build_all:",
        "comment_created_at": "2020-01-14T19:19:04+00:00",
        "comment_author": "Pierrci",
        "comment_body": "And we can maybe add a `paths-ignore` with `./bindings` in `rust.yml` since I don't see the need to rebuild the rust source if only code in bindings has been updated?",
        "pr_file_module": null
      },
      {
        "comment_id": "366536228",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 68,
        "pr_file": ".github/workflows/node-release.yml",
        "discussion_id": "366505007",
        "commented_code": "@@ -0,0 +1,104 @@\n+name: Node Release\n+\n+env:\n+  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n+  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n+  AWS_DEFAULT_REGION: us-east-1\n+\n+on:\n+  push:\n+    tags:\n+      - node-v*\n+\n+jobs:\n+  build_all:",
        "comment_created_at": "2020-01-14T19:42:16+00:00",
        "comment_author": "n1t0",
        "comment_body": "Nice thanks! You are right, at the moment it's totally useless. I don't know what would be better between having a separate workflow for the main library and each bindings, or actually having one main `Build` workflow, that takes care of building everything on each OS, mutualizing the setup parts. What do you think? (This is out of the scope of this PR though).",
        "pr_file_module": null
      }
    ]
  }
]