[
  {
    "discussion_id": "1545164783",
    "pr_number": 1476,
    "pr_file": "bindings/python/py_src/tokenizers/implementations/sentencepiece_bpe.py",
    "created_at": "2024-03-30T06:32:15+00:00",
    "commented_code": "tokenizer.add_special_tokens([str(unk_token)])\n \n         tokenizer.normalizer = NFKC()\n-        tokenizer.pre_tokenizer = pre_tokenizers.Metaspace(replacement=replacement, add_prefix_space=add_prefix_space)\n-        tokenizer.decoder = decoders.Metaspace(replacement=replacement, add_prefix_space=add_prefix_space)\n+        prepend_scheme = \"always\" if add_prefix_space else \"never\"",
    "repo_full_name": "huggingface/tokenizers",
    "discussion_comments": [
      {
        "comment_id": "1545164783",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 1476,
        "pr_file": "bindings/python/py_src/tokenizers/implementations/sentencepiece_bpe.py",
        "discussion_id": "1545164783",
        "commented_code": "@@ -32,8 +32,9 @@ def __init__(\n             tokenizer.add_special_tokens([str(unk_token)])\n \n         tokenizer.normalizer = NFKC()\n-        tokenizer.pre_tokenizer = pre_tokenizers.Metaspace(replacement=replacement, add_prefix_space=add_prefix_space)\n-        tokenizer.decoder = decoders.Metaspace(replacement=replacement, add_prefix_space=add_prefix_space)\n+        prepend_scheme = \"always\" if add_prefix_space else \"never\"",
        "comment_created_at": "2024-03-30T06:32:15+00:00",
        "comment_author": "ArthurZucker",
        "comment_body": "oh perfect",
        "pr_file_module": null
      },
      {
        "comment_id": "1545168531",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 1476,
        "pr_file": "bindings/python/py_src/tokenizers/implementations/sentencepiece_bpe.py",
        "discussion_id": "1545164783",
        "commented_code": "@@ -32,8 +32,9 @@ def __init__(\n             tokenizer.add_special_tokens([str(unk_token)])\n \n         tokenizer.normalizer = NFKC()\n-        tokenizer.pre_tokenizer = pre_tokenizers.Metaspace(replacement=replacement, add_prefix_space=add_prefix_space)\n-        tokenizer.decoder = decoders.Metaspace(replacement=replacement, add_prefix_space=add_prefix_space)\n+        prepend_scheme = \"always\" if add_prefix_space else \"never\"",
        "comment_created_at": "2024-03-30T06:41:05+00:00",
        "comment_author": "ArthurZucker",
        "comment_body": "We could make it BC in python only if the python layer of MetaSpace just use `prepend_scheme = \"always\" if add_prefix_space else \"never\"`. WOuld be nice",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "519905635",
    "pr_number": 508,
    "pr_file": "bindings/python/py_src/tokenizers/viz/visualizer.py",
    "created_at": "2020-11-09T15:37:12+00:00",
    "commented_code": "+import itertools\n+from typing import List, Optional, Tuple, Dict, Callable, Any\n+from tokenizers import Tokenizer, Encoding\n+from tokenizers.viz.templates import HTMLBody\n+from tokenizers.viz.viztypes import (\n+    AnnotationList,\n+    PartialIntList,\n+    CharState,\n+    Annotation,\n+)\n+\n+\n+class EncodingVisualizer:\n+    def __init__(\n+        self,\n+        tokenizer: Tokenizer,\n+        default_to_notebook: bool = False,",
    "repo_full_name": "huggingface/tokenizers",
    "discussion_comments": [
      {
        "comment_id": "519905635",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 508,
        "pr_file": "bindings/python/py_src/tokenizers/viz/visualizer.py",
        "discussion_id": "519905635",
        "commented_code": "@@ -0,0 +1,277 @@\n+import itertools\n+from typing import List, Optional, Tuple, Dict, Callable, Any\n+from tokenizers import Tokenizer, Encoding\n+from tokenizers.viz.templates import HTMLBody\n+from tokenizers.viz.viztypes import (\n+    AnnotationList,\n+    PartialIntList,\n+    CharState,\n+    Annotation,\n+)\n+\n+\n+class EncodingVisualizer:\n+    def __init__(\n+        self,\n+        tokenizer: Tokenizer,\n+        default_to_notebook: bool = False,",
        "comment_created_at": "2020-11-09T15:37:12+00:00",
        "comment_author": "n1t0",
        "comment_body": "What do you think about always trying to display in a notebook if `IPython` is available, and always returning the content? That way it just displays when possible, without the need to change this value.",
        "pr_file_module": null
      },
      {
        "comment_id": "520068854",
        "repo_full_name": "huggingface/tokenizers",
        "pr_number": 508,
        "pr_file": "bindings/python/py_src/tokenizers/viz/visualizer.py",
        "discussion_id": "519905635",
        "commented_code": "@@ -0,0 +1,277 @@\n+import itertools\n+from typing import List, Optional, Tuple, Dict, Callable, Any\n+from tokenizers import Tokenizer, Encoding\n+from tokenizers.viz.templates import HTMLBody\n+from tokenizers.viz.viztypes import (\n+    AnnotationList,\n+    PartialIntList,\n+    CharState,\n+    Annotation,\n+)\n+\n+\n+class EncodingVisualizer:\n+    def __init__(\n+        self,\n+        tokenizer: Tokenizer,\n+        default_to_notebook: bool = False,",
        "comment_created_at": "2020-11-09T19:33:03+00:00",
        "comment_author": "talolard",
        "comment_body": "I think that's the better default, will implement.\r\n",
        "pr_file_module": null
      }
    ]
  }
]