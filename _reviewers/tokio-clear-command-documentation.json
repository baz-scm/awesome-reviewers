[
  {
    "discussion_id": "1563200138",
    "pr_number": 6480,
    "pr_file": "CONTRIBUTING.md",
    "created_at": "2024-04-12T21:06:45+00:00",
    "commented_code": "# Contributing to Tokio\n \n-:balloon: Thanks for your help improving the project! We are so happy to have\n-you!\n+:balloon: Thanks for your help improving the project! We are so happy to have you!\n \n-There are opportunities to contribute to Tokio at any level. It doesn't matter if\n-you are just getting started with Rust or are the most weathered expert, we can\n-use your help.\n+There are opportunities to contribute to Tokio at any level. It doesn't matter if you are just\n+getting started with Rust or are the most weathered expert, we can use your help.\n \n **No contribution is too small and all contributions are valued.**\n \n-This guide will help you get started. **Do not let this guide intimidate you**.\n-It should be considered a map to help you navigate the process.\n+This guide will help you get started. **Do not let this guide intimidate you**. It should be\n+considered a map to help you navigate the process.\n \n-The [dev channel][dev] is available for any concerns not covered in this guide, please join\n-us!\n+The [dev channel][dev] is available for any concerns not covered in this guide, please join us!\n \n [dev]: https://discord.gg/tokio\n \n ## Conduct\n \n-The Tokio project adheres to the [Rust Code of Conduct][coc]. This describes\n-the _minimum_ behavior expected from all contributors. Instances of violations of the\n-Code of Conduct can be reported by contacting the project team at\n-[moderation@tokio.rs](mailto:moderation@tokio.rs).\n+The Tokio project adheres to the [Rust Code of Conduct][coc]. This describes the _minimum_ behavior\n+expected from all contributors. Instances of violations of the Code of Conduct can be reported by\n+contacting the project team at [moderation@tokio.rs](mailto:moderation@tokio.rs).\n \n [coc]: https://github.com/rust-lang/rust/blob/master/CODE_OF_CONDUCT.md\n \n ## Contributing in Issues\n \n For any issue, there are fundamentally three ways an individual can contribute:\n \n-1. By opening the issue for discussion: For instance, if you believe that you\n-   have discovered a bug in Tokio, creating a new issue in [the tokio-rs/tokio\n-   issue tracker][issue] is the way to report it.\n-\n-2. By helping to triage the issue: This can be done by providing\n-   supporting details (a test case that demonstrates a bug), providing\n-   suggestions on how to address the issue, or ensuring that the issue is tagged\n-   correctly.\n-\n-3. By helping to resolve the issue: Typically this is done either in the form of\n-   demonstrating that the issue reported is not a problem after all, or more\n-   often, by opening a Pull Request that changes some bit of something in\n-   Tokio in a concrete and reviewable manner.\n+1. By opening the issue for discussion: For instance, if you believe that you have discovered a bug\n+   in Tokio, creating a new issue in [the tokio-rs/tokio issue tracker][issue] is the way to report\n+   it.\n+2. By helping to triage the issue: This can be done by providing supporting details (a test case\n+   that demonstrates a bug), providing suggestions on how to address the issue, or ensuring that the\n+   issue is tagged correctly.\n+3. By helping to resolve the issue: Typically this is done either in the form of demonstrating that\n+   the issue reported is not a problem after all, or more often, by opening a Pull Request that\n+   changes some bit of something in Tokio in a concrete and reviewable manner.\n \n [issue]: https://github.com/tokio-rs/tokio/issues\n \n-**Anybody can participate in any stage of contribution**. We urge you to\n-participate in the discussion around bugs and participate in reviewing PRs.\n+**Anybody can participate in any stage of contribution**. We urge you to participate in the\n+discussion around bugs and participate in reviewing PRs.\n \n ### Asking for General Help\n \n-If you have reviewed existing documentation and still have questions or are\n-having problems, you can [open a discussion] asking for help.\n+If you have reviewed existing documentation and still have questions or are having problems, you can\n+[open a discussion] asking for help.\n \n-In exchange for receiving help, we ask that you contribute back a documentation\n-PR that helps others avoid the problems that you encountered.\n+In exchange for receiving help, we ask that you contribute back a documentation PR that helps others\n+avoid the problems that you encountered.\n \n [open a discussion]: https://github.com/tokio-rs/tokio/discussions/new\n \n ### Submitting a Bug Report\n \n When opening a new issue in the Tokio issue tracker, you will be presented\n-with a basic template that should be filled in. If you believe that you have\n-uncovered a bug, please fill out this form, following the template to the best\n-of your ability. Do not worry if you cannot answer every detail, just fill in\n-what you can.\n+with a basic template that should be filled in. If you believe that you have uncovered a bug, please\n+fill out this form, following the template to the best of your ability. Do not worry if you cannot\n+answer every detail, just fill in what you can.\n \n-The two most important pieces of information we need in order to properly\n-evaluate the report is a description of the behavior you are seeing and a simple\n-test case we can use to recreate the problem on our own. If we cannot recreate\n-the issue, it becomes impossible for us to fix.\n+The two most important pieces of information we need in order to properly evaluate the report is a\n+description of the behavior you are seeing and a simple test case we can use to recreate the problem\n+on our own. If we cannot recreate the issue, it becomes impossible for us to fix.\n \n-In order to rule out the possibility of bugs introduced by userland code, test\n-cases should be limited, as much as possible, to using only Tokio APIs.\n+In order to rule out the possibility of bugs introduced by userland code, test cases should be\n+limited, as much as possible, to using only Tokio APIs.\n \n See [How to create a Minimal, Complete, and Verifiable example][mcve].\n \n [mcve]: https://stackoverflow.com/help/mcve\n \n ### Triaging a Bug Report\n \n-Once an issue has been opened, it is not uncommon for there to be discussion\n-around it. Some contributors may have differing opinions about the issue,\n-including whether the behavior being seen is a bug or a feature. This discussion\n-is part of the process and should be kept focused, helpful, and professional.\n+Once an issue has been opened, it is not uncommon for there to be discussion around it. Some\n+contributors may have differing opinions about the issue, including whether the behavior being seen\n+is a bug or a feature. This discussion is part of the process and should be kept focused, helpful,\n+and professional.\n \n-Short, clipped responses—that provide neither additional context nor supporting\n-detail—are not helpful or professional. To many, such responses are simply\n-annoying and unfriendly.\n+Short, clipped responses—that provide neither additional context nor supporting detail—are not\n+helpful or professional. To many, such responses are simply annoying and unfriendly.\n \n-Contributors are encouraged to help one another make forward progress as much as\n-possible, empowering one another to solve issues collaboratively. If you choose\n-to comment on an issue that you feel either is not a problem that needs to be\n-fixed, or if you encounter information in an issue that you feel is incorrect,\n-explain why you feel that way with additional supporting context, and be willing\n-to be convinced that you may be wrong. By doing so, we can often reach the\n-correct outcome much faster.\n+Contributors are encouraged to help one another make forward progress as much as possible,\n+empowering one another to solve issues collaboratively. If you choose to comment on an issue that\n+you feel either is not a problem that needs to be fixed, or if you encounter information in an issue\n+that you feel is incorrect, explain why you feel that way with additional supporting context, and be\n+willing to be convinced that you may be wrong. By doing so, we can often reach the correct outcome\n+much faster.\n \n ### Resolving a Bug Report\n \n-In the majority of cases, issues are resolved by opening a Pull Request. The\n-process for opening and reviewing a Pull Request is similar to that of opening\n-and triaging issues, but carries with it a necessary review and approval\n-workflow that ensures that the proposed changes meet the minimal quality and\n-functional guidelines of the Tokio project.\n+In the majority of cases, issues are resolved by opening a Pull Request. The process for opening and\n+reviewing a Pull Request is similar to that of opening and triaging issues, but carries with it a\n+necessary review and approval workflow that ensures that the proposed changes meet the minimal\n+quality and functional guidelines of the Tokio project.\n \n ## Pull Requests\n \n-Pull Requests are the way concrete changes are made to the code, documentation,\n-and dependencies in the Tokio repository.\n+Pull Requests are the way concrete changes are made to the code, documentation, and dependencies in\n+the Tokio repository.\n \n-Even tiny pull requests (e.g., one character pull request fixing a typo in API\n-documentation) are greatly appreciated. Before making a large change, it is\n-usually a good idea to first open an issue describing the change to solicit\n-feedback and guidance. This will increase the likelihood of the PR getting\n-merged.\n+Even tiny pull requests (e.g., one character pull request fixing a typo in API documentation) are\n+greatly appreciated. Before making a large change, it is usually a good idea to first open an issue\n+describing the change to solicit feedback and guidance. This will increase the likelihood of the PR\n+getting merged.\n \n ### Cargo Commands\n \n-Due to the extensive use of features in Tokio, you will often need to add extra\n-arguments to many common cargo commands. This section lists some commonly needed\n-commands.\n+Due to the extensive use of features in Tokio, you will often need to add extra arguments to many\n+common cargo commands. This section lists some commonly needed commands.\n \n Some commands just need the `--all-features` argument:\n \n-```\n+```shell",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1563200138",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6480,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1563200138",
        "commented_code": "@@ -1,139 +1,123 @@\n # Contributing to Tokio\n \n-:balloon: Thanks for your help improving the project! We are so happy to have\n-you!\n+:balloon: Thanks for your help improving the project! We are so happy to have you!\n \n-There are opportunities to contribute to Tokio at any level. It doesn't matter if\n-you are just getting started with Rust or are the most weathered expert, we can\n-use your help.\n+There are opportunities to contribute to Tokio at any level. It doesn't matter if you are just\n+getting started with Rust or are the most weathered expert, we can use your help.\n \n **No contribution is too small and all contributions are valued.**\n \n-This guide will help you get started. **Do not let this guide intimidate you**.\n-It should be considered a map to help you navigate the process.\n+This guide will help you get started. **Do not let this guide intimidate you**. It should be\n+considered a map to help you navigate the process.\n \n-The [dev channel][dev] is available for any concerns not covered in this guide, please join\n-us!\n+The [dev channel][dev] is available for any concerns not covered in this guide, please join us!\n \n [dev]: https://discord.gg/tokio\n \n ## Conduct\n \n-The Tokio project adheres to the [Rust Code of Conduct][coc]. This describes\n-the _minimum_ behavior expected from all contributors. Instances of violations of the\n-Code of Conduct can be reported by contacting the project team at\n-[moderation@tokio.rs](mailto:moderation@tokio.rs).\n+The Tokio project adheres to the [Rust Code of Conduct][coc]. This describes the _minimum_ behavior\n+expected from all contributors. Instances of violations of the Code of Conduct can be reported by\n+contacting the project team at [moderation@tokio.rs](mailto:moderation@tokio.rs).\n \n [coc]: https://github.com/rust-lang/rust/blob/master/CODE_OF_CONDUCT.md\n \n ## Contributing in Issues\n \n For any issue, there are fundamentally three ways an individual can contribute:\n \n-1. By opening the issue for discussion: For instance, if you believe that you\n-   have discovered a bug in Tokio, creating a new issue in [the tokio-rs/tokio\n-   issue tracker][issue] is the way to report it.\n-\n-2. By helping to triage the issue: This can be done by providing\n-   supporting details (a test case that demonstrates a bug), providing\n-   suggestions on how to address the issue, or ensuring that the issue is tagged\n-   correctly.\n-\n-3. By helping to resolve the issue: Typically this is done either in the form of\n-   demonstrating that the issue reported is not a problem after all, or more\n-   often, by opening a Pull Request that changes some bit of something in\n-   Tokio in a concrete and reviewable manner.\n+1. By opening the issue for discussion: For instance, if you believe that you have discovered a bug\n+   in Tokio, creating a new issue in [the tokio-rs/tokio issue tracker][issue] is the way to report\n+   it.\n+2. By helping to triage the issue: This can be done by providing supporting details (a test case\n+   that demonstrates a bug), providing suggestions on how to address the issue, or ensuring that the\n+   issue is tagged correctly.\n+3. By helping to resolve the issue: Typically this is done either in the form of demonstrating that\n+   the issue reported is not a problem after all, or more often, by opening a Pull Request that\n+   changes some bit of something in Tokio in a concrete and reviewable manner.\n \n [issue]: https://github.com/tokio-rs/tokio/issues\n \n-**Anybody can participate in any stage of contribution**. We urge you to\n-participate in the discussion around bugs and participate in reviewing PRs.\n+**Anybody can participate in any stage of contribution**. We urge you to participate in the\n+discussion around bugs and participate in reviewing PRs.\n \n ### Asking for General Help\n \n-If you have reviewed existing documentation and still have questions or are\n-having problems, you can [open a discussion] asking for help.\n+If you have reviewed existing documentation and still have questions or are having problems, you can\n+[open a discussion] asking for help.\n \n-In exchange for receiving help, we ask that you contribute back a documentation\n-PR that helps others avoid the problems that you encountered.\n+In exchange for receiving help, we ask that you contribute back a documentation PR that helps others\n+avoid the problems that you encountered.\n \n [open a discussion]: https://github.com/tokio-rs/tokio/discussions/new\n \n ### Submitting a Bug Report\n \n When opening a new issue in the Tokio issue tracker, you will be presented\n-with a basic template that should be filled in. If you believe that you have\n-uncovered a bug, please fill out this form, following the template to the best\n-of your ability. Do not worry if you cannot answer every detail, just fill in\n-what you can.\n+with a basic template that should be filled in. If you believe that you have uncovered a bug, please\n+fill out this form, following the template to the best of your ability. Do not worry if you cannot\n+answer every detail, just fill in what you can.\n \n-The two most important pieces of information we need in order to properly\n-evaluate the report is a description of the behavior you are seeing and a simple\n-test case we can use to recreate the problem on our own. If we cannot recreate\n-the issue, it becomes impossible for us to fix.\n+The two most important pieces of information we need in order to properly evaluate the report is a\n+description of the behavior you are seeing and a simple test case we can use to recreate the problem\n+on our own. If we cannot recreate the issue, it becomes impossible for us to fix.\n \n-In order to rule out the possibility of bugs introduced by userland code, test\n-cases should be limited, as much as possible, to using only Tokio APIs.\n+In order to rule out the possibility of bugs introduced by userland code, test cases should be\n+limited, as much as possible, to using only Tokio APIs.\n \n See [How to create a Minimal, Complete, and Verifiable example][mcve].\n \n [mcve]: https://stackoverflow.com/help/mcve\n \n ### Triaging a Bug Report\n \n-Once an issue has been opened, it is not uncommon for there to be discussion\n-around it. Some contributors may have differing opinions about the issue,\n-including whether the behavior being seen is a bug or a feature. This discussion\n-is part of the process and should be kept focused, helpful, and professional.\n+Once an issue has been opened, it is not uncommon for there to be discussion around it. Some\n+contributors may have differing opinions about the issue, including whether the behavior being seen\n+is a bug or a feature. This discussion is part of the process and should be kept focused, helpful,\n+and professional.\n \n-Short, clipped responses—that provide neither additional context nor supporting\n-detail—are not helpful or professional. To many, such responses are simply\n-annoying and unfriendly.\n+Short, clipped responses—that provide neither additional context nor supporting detail—are not\n+helpful or professional. To many, such responses are simply annoying and unfriendly.\n \n-Contributors are encouraged to help one another make forward progress as much as\n-possible, empowering one another to solve issues collaboratively. If you choose\n-to comment on an issue that you feel either is not a problem that needs to be\n-fixed, or if you encounter information in an issue that you feel is incorrect,\n-explain why you feel that way with additional supporting context, and be willing\n-to be convinced that you may be wrong. By doing so, we can often reach the\n-correct outcome much faster.\n+Contributors are encouraged to help one another make forward progress as much as possible,\n+empowering one another to solve issues collaboratively. If you choose to comment on an issue that\n+you feel either is not a problem that needs to be fixed, or if you encounter information in an issue\n+that you feel is incorrect, explain why you feel that way with additional supporting context, and be\n+willing to be convinced that you may be wrong. By doing so, we can often reach the correct outcome\n+much faster.\n \n ### Resolving a Bug Report\n \n-In the majority of cases, issues are resolved by opening a Pull Request. The\n-process for opening and reviewing a Pull Request is similar to that of opening\n-and triaging issues, but carries with it a necessary review and approval\n-workflow that ensures that the proposed changes meet the minimal quality and\n-functional guidelines of the Tokio project.\n+In the majority of cases, issues are resolved by opening a Pull Request. The process for opening and\n+reviewing a Pull Request is similar to that of opening and triaging issues, but carries with it a\n+necessary review and approval workflow that ensures that the proposed changes meet the minimal\n+quality and functional guidelines of the Tokio project.\n \n ## Pull Requests\n \n-Pull Requests are the way concrete changes are made to the code, documentation,\n-and dependencies in the Tokio repository.\n+Pull Requests are the way concrete changes are made to the code, documentation, and dependencies in\n+the Tokio repository.\n \n-Even tiny pull requests (e.g., one character pull request fixing a typo in API\n-documentation) are greatly appreciated. Before making a large change, it is\n-usually a good idea to first open an issue describing the change to solicit\n-feedback and guidance. This will increase the likelihood of the PR getting\n-merged.\n+Even tiny pull requests (e.g., one character pull request fixing a typo in API documentation) are\n+greatly appreciated. Before making a large change, it is usually a good idea to first open an issue\n+describing the change to solicit feedback and guidance. This will increase the likelihood of the PR\n+getting merged.\n \n ### Cargo Commands\n \n-Due to the extensive use of features in Tokio, you will often need to add extra\n-arguments to many common cargo commands. This section lists some commonly needed\n-commands.\n+Due to the extensive use of features in Tokio, you will often need to add extra arguments to many\n+common cargo commands. This section lists some commonly needed commands.\n \n Some commands just need the `--all-features` argument:\n \n-```\n+```shell",
        "comment_created_at": "2024-04-12T21:06:45+00:00",
        "comment_author": "joshka",
        "comment_body": "In general, I've gone with `shell` over `bash` as the commands are relevant generally to any shell.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1563201723",
    "pr_number": 6480,
    "pr_file": "CONTRIBUTING.md",
    "created_at": "2024-04-12T21:08:47+00:00",
    "commented_code": "- tokio-stream/Cargo.toml\n -->\n \n-```\n+```shell\n cargo +1.77 clippy --all --tests --all-features\n ```\n \n-When building documentation, a simple `cargo doc` is not sufficient. To produce\n-documentation equivalent to what will be produced in docs.rs's builds of Tokio's\n-docs, please use:\n+When building documentation, a simple `cargo doc` is not sufficient. To produce documentation\n+equivalent to what will be produced in docs.rs's builds of Tokio's docs, please use:\n \n-```\n-RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features [--open]\n+```shell\n+RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" \\\n+    cargo +nightly doc --all-features [--open]\n ```\n \n-This turns on indicators to display the Cargo features required for\n-conditionally compiled APIs in Tokio, and it enables documentation of unstable\n-Tokio features. Notice that it is necessary to pass cfg flags to both RustDoc\n-*and* rustc.\n+This turns on indicators to display the Cargo features required for conditionally compiled APIs in\n+Tokio, and it enables documentation of unstable Tokio features. Notice that it is necessary to pass\n+cfg flags to both RustDoc _and_ rustc.\n \n-There is a more concise way to build docs.rs-equivalent docs by using [`cargo\n-docs-rs`], which reads the above documentation flags out of Tokio's Cargo.toml\n-as docs.rs itself does.\n+There is a more concise way to build docs.rs-equivalent docs by using [`cargo docs-rs`], which reads\n+the above documentation flags out of Tokio's Cargo.toml as docs.rs itself does.\n \n [`cargo docs-rs`]: https://github.com/dtolnay/cargo-docs-rs\n \n-```\n+```shell\n cargo install cargo-docs-rs\n cargo +nightly docs-rs [--open]\n ```\n \n-The `cargo fmt` command does not work on the Tokio codebase. You can use the\n-command below instead:\n+The `cargo fmt` command does not work on the Tokio codebase. You can use the command below instead:\n \n-```\n+```shell\n # Mac or Linux\n rustfmt --check --edition 2021 $(git ls-files '*.rs')\n+```\n \n+```powershell\n # Powershell\n Get-ChildItem . -Filter \"*.rs\" -Recurse | foreach { rustfmt --check --edition 2021 $_.FullName }\n ```\n+\n The `--check` argument prints the things that need to be fixed. If you remove\n it, `rustfmt` will update your files locally instead.\n \n You can run loom tests with\n-```\n+\n+```shell\n cd tokio # tokio crate in workspace\n LOOM_MAX_PREEMPTIONS=1 LOOM_MAX_BRANCHES=10000 RUSTFLAGS=\"--cfg loom -C debug_assertions\" \\\n     cargo test --lib --release --features full -- --test-threads=1 --nocapture\n ```\n+\n Additionally, you can also add `--cfg tokio_unstable` to the `RUSTFLAGS` environment variable to\n-run loom tests that test unstable features. \n+run loom tests that test unstable features.\n \n You can run miri tests with\n-```\n+\n+```shell\n MIRIFLAGS=\"-Zmiri-disable-isolation -Zmiri-tag-raw-pointers\" \\\n     cargo +nightly miri test --features full --lib\n ```\n \n ### Performing spellcheck on tokio codebase\n \n-You can perform spell-check on tokio codebase. For details of how to use the spellcheck tool, feel free to visit\n-https://github.com/drahnr/cargo-spellcheck\n-```\n+You can perform spell-check on tokio codebase. For details of how to use the spellcheck tool, feel\n+free to visit <https://github.com/drahnr/cargo-spellcheck>\n+\n+```shell\n # First install the spell-check plugin\n cargo install --locked cargo-spellcheck\n \n # Then run the cargo spell check command\n cargo spellcheck check\n ```\n \n-if the command rejects a word, you should backtick the rejected word if it's code related. If not, the \n-rejected word should be put into `spellcheck.dic` file. \n+if the command rejects a word, you should backtick the rejected word if it's code related. If not,\n+the rejected word should be put into `spellcheck.dic` file.\n \n-Note that when you add a word into the file, you should also update the first line which tells the spellcheck tool\n-the total number of words included in the file\n+Note that when you add a word into the file, you should also update the first line which tells the\n+spellcheck tool the total number of words included in the file\n \n ### Tests\n \n-If the change being proposed alters code (as opposed to only documentation for\n-example), it is either adding new functionality to Tokio or it is fixing\n-existing, broken functionality. In both of these cases, the pull request should\n-include one or more tests to ensure that Tokio does not regress in the future.\n-There are two ways to write tests: [integration tests][integration-tests]\n-and [documentation tests][documentation-tests].\n-(Tokio avoids [unit tests][unit-tests] as much as possible).\n-\n-Tokio uses [conditional compilation attributes][conditional-compilation]\n-throughout the codebase, to modify rustc's behavior. Code marked with such\n-attributes can be enabled using RUSTFLAGS and RUSTDOCFLAGS environment\n-variables. One of the most prevalent flags passed in these variables is\n-the `--cfg` option. To run tests in a particular file, check first what\n-options #![cfg] declaration defines for that file.\n-\n-For instance, to run a test marked with the 'tokio_unstable' cfg option,\n-you must pass this flag to the compiler when running the test.\n-```\n-$ RUSTFLAGS=\"--cfg tokio_unstable\" cargo test -p tokio --all-features --test rt_metrics\n+If the change being proposed alters code (as opposed to only documentation for example), it is\n+either adding new functionality to Tokio or it is fixing existing, broken functionality. In both of\n+these cases, the pull request should include one or more tests to ensure that Tokio does not regress\n+in the future. There are two ways to write tests: [integration tests][integration-tests] and\n+[documentation tests][documentation-tests]. (Tokio avoids [unit tests][unit-tests] as much as\n+possible).\n+\n+Tokio uses [conditional compilation attributes][conditional-compilation] throughout the codebase, to\n+modify rustc's behavior. Code marked with such attributes can be enabled using RUSTFLAGS and\n+RUSTDOCFLAGS environment variables. One of the most prevalent flags passed in these variables is the\n+`--cfg` option. To run tests in a particular file, check first what options #![cfg] declaration\n+defines for that file.\n+\n+For instance, to run a test marked with the 'tokio_unstable' cfg option, you must pass this flag to\n+the compiler when running the test.\n+\n+```shell\n+RUSTFLAGS=\"--cfg tokio_unstable\" cargo test -p tokio --all-features --test rt_metrics\n ```\n \n #### Integration tests\n \n-Integration tests go in the same crate as the code they are testing. Each sub\n-crate should have a `dev-dependency` on `tokio` itself. This makes all Tokio\n-utilities available to use in tests, no matter the crate being tested.\n+Integration tests go in the same crate as the code they are testing. Each sub crate should have a\n+`dev-dependency` on `tokio` itself. This makes all Tokio utilities available to use in tests, no\n+matter the crate being tested.\n \n-The best strategy for writing a new integration test is to look at existing\n-integration tests in the crate and follow the style.\n+The best strategy for writing a new integration test is to look at existing integration tests in the\n+crate and follow the style.\n \n #### Fuzz tests\n \n-Some of our crates include a set of fuzz tests, this will be marked by a\n-directory `fuzz`. It is a good idea to run fuzz tests after each change.\n-To get started with fuzz testing you'll need to install\n-[cargo-fuzz](https://github.com/rust-fuzz/cargo-fuzz).\n+Some of our crates include a set of fuzz tests, this will be marked by a directory `fuzz`. It is a\n+good idea to run fuzz tests after each change. To get started with fuzz testing you'll need to\n+install [cargo-fuzz](https://github.com/rust-fuzz/cargo-fuzz).\n \n-`cargo install cargo-fuzz`\n+```shell\n+cargo install --locked cargo-fuzz\n+```\n \n To list the available fuzzing harnesses you can run;\n \n-```bash\n-$ cd tokio\n-$ cargo fuzz list\n+```shell\n+cd tokio\n+cargo fuzz list\n+```\n+\n+```text\n fuzz_linked_list\n ````",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1563201723",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6480,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1563201723",
        "commented_code": "@@ -148,160 +132,166 @@ When updating this, also update:\n - tokio-stream/Cargo.toml\n -->\n \n-```\n+```shell\n cargo +1.77 clippy --all --tests --all-features\n ```\n \n-When building documentation, a simple `cargo doc` is not sufficient. To produce\n-documentation equivalent to what will be produced in docs.rs's builds of Tokio's\n-docs, please use:\n+When building documentation, a simple `cargo doc` is not sufficient. To produce documentation\n+equivalent to what will be produced in docs.rs's builds of Tokio's docs, please use:\n \n-```\n-RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features [--open]\n+```shell\n+RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" \\\n+    cargo +nightly doc --all-features [--open]\n ```\n \n-This turns on indicators to display the Cargo features required for\n-conditionally compiled APIs in Tokio, and it enables documentation of unstable\n-Tokio features. Notice that it is necessary to pass cfg flags to both RustDoc\n-*and* rustc.\n+This turns on indicators to display the Cargo features required for conditionally compiled APIs in\n+Tokio, and it enables documentation of unstable Tokio features. Notice that it is necessary to pass\n+cfg flags to both RustDoc _and_ rustc.\n \n-There is a more concise way to build docs.rs-equivalent docs by using [`cargo\n-docs-rs`], which reads the above documentation flags out of Tokio's Cargo.toml\n-as docs.rs itself does.\n+There is a more concise way to build docs.rs-equivalent docs by using [`cargo docs-rs`], which reads\n+the above documentation flags out of Tokio's Cargo.toml as docs.rs itself does.\n \n [`cargo docs-rs`]: https://github.com/dtolnay/cargo-docs-rs\n \n-```\n+```shell\n cargo install cargo-docs-rs\n cargo +nightly docs-rs [--open]\n ```\n \n-The `cargo fmt` command does not work on the Tokio codebase. You can use the\n-command below instead:\n+The `cargo fmt` command does not work on the Tokio codebase. You can use the command below instead:\n \n-```\n+```shell\n # Mac or Linux\n rustfmt --check --edition 2021 $(git ls-files '*.rs')\n+```\n \n+```powershell\n # Powershell\n Get-ChildItem . -Filter \"*.rs\" -Recurse | foreach { rustfmt --check --edition 2021 $_.FullName }\n ```\n+\n The `--check` argument prints the things that need to be fixed. If you remove\n it, `rustfmt` will update your files locally instead.\n \n You can run loom tests with\n-```\n+\n+```shell\n cd tokio # tokio crate in workspace\n LOOM_MAX_PREEMPTIONS=1 LOOM_MAX_BRANCHES=10000 RUSTFLAGS=\"--cfg loom -C debug_assertions\" \\\n     cargo test --lib --release --features full -- --test-threads=1 --nocapture\n ```\n+\n Additionally, you can also add `--cfg tokio_unstable` to the `RUSTFLAGS` environment variable to\n-run loom tests that test unstable features. \n+run loom tests that test unstable features.\n \n You can run miri tests with\n-```\n+\n+```shell\n MIRIFLAGS=\"-Zmiri-disable-isolation -Zmiri-tag-raw-pointers\" \\\n     cargo +nightly miri test --features full --lib\n ```\n \n ### Performing spellcheck on tokio codebase\n \n-You can perform spell-check on tokio codebase. For details of how to use the spellcheck tool, feel free to visit\n-https://github.com/drahnr/cargo-spellcheck\n-```\n+You can perform spell-check on tokio codebase. For details of how to use the spellcheck tool, feel\n+free to visit <https://github.com/drahnr/cargo-spellcheck>\n+\n+```shell\n # First install the spell-check plugin\n cargo install --locked cargo-spellcheck\n \n # Then run the cargo spell check command\n cargo spellcheck check\n ```\n \n-if the command rejects a word, you should backtick the rejected word if it's code related. If not, the \n-rejected word should be put into `spellcheck.dic` file. \n+if the command rejects a word, you should backtick the rejected word if it's code related. If not,\n+the rejected word should be put into `spellcheck.dic` file.\n \n-Note that when you add a word into the file, you should also update the first line which tells the spellcheck tool\n-the total number of words included in the file\n+Note that when you add a word into the file, you should also update the first line which tells the\n+spellcheck tool the total number of words included in the file\n \n ### Tests\n \n-If the change being proposed alters code (as opposed to only documentation for\n-example), it is either adding new functionality to Tokio or it is fixing\n-existing, broken functionality. In both of these cases, the pull request should\n-include one or more tests to ensure that Tokio does not regress in the future.\n-There are two ways to write tests: [integration tests][integration-tests]\n-and [documentation tests][documentation-tests].\n-(Tokio avoids [unit tests][unit-tests] as much as possible).\n-\n-Tokio uses [conditional compilation attributes][conditional-compilation]\n-throughout the codebase, to modify rustc's behavior. Code marked with such\n-attributes can be enabled using RUSTFLAGS and RUSTDOCFLAGS environment\n-variables. One of the most prevalent flags passed in these variables is\n-the `--cfg` option. To run tests in a particular file, check first what\n-options #![cfg] declaration defines for that file.\n-\n-For instance, to run a test marked with the 'tokio_unstable' cfg option,\n-you must pass this flag to the compiler when running the test.\n-```\n-$ RUSTFLAGS=\"--cfg tokio_unstable\" cargo test -p tokio --all-features --test rt_metrics\n+If the change being proposed alters code (as opposed to only documentation for example), it is\n+either adding new functionality to Tokio or it is fixing existing, broken functionality. In both of\n+these cases, the pull request should include one or more tests to ensure that Tokio does not regress\n+in the future. There are two ways to write tests: [integration tests][integration-tests] and\n+[documentation tests][documentation-tests]. (Tokio avoids [unit tests][unit-tests] as much as\n+possible).\n+\n+Tokio uses [conditional compilation attributes][conditional-compilation] throughout the codebase, to\n+modify rustc's behavior. Code marked with such attributes can be enabled using RUSTFLAGS and\n+RUSTDOCFLAGS environment variables. One of the most prevalent flags passed in these variables is the\n+`--cfg` option. To run tests in a particular file, check first what options #![cfg] declaration\n+defines for that file.\n+\n+For instance, to run a test marked with the 'tokio_unstable' cfg option, you must pass this flag to\n+the compiler when running the test.\n+\n+```shell\n+RUSTFLAGS=\"--cfg tokio_unstable\" cargo test -p tokio --all-features --test rt_metrics\n ```\n \n #### Integration tests\n \n-Integration tests go in the same crate as the code they are testing. Each sub\n-crate should have a `dev-dependency` on `tokio` itself. This makes all Tokio\n-utilities available to use in tests, no matter the crate being tested.\n+Integration tests go in the same crate as the code they are testing. Each sub crate should have a\n+`dev-dependency` on `tokio` itself. This makes all Tokio utilities available to use in tests, no\n+matter the crate being tested.\n \n-The best strategy for writing a new integration test is to look at existing\n-integration tests in the crate and follow the style.\n+The best strategy for writing a new integration test is to look at existing integration tests in the\n+crate and follow the style.\n \n #### Fuzz tests\n \n-Some of our crates include a set of fuzz tests, this will be marked by a\n-directory `fuzz`. It is a good idea to run fuzz tests after each change.\n-To get started with fuzz testing you'll need to install\n-[cargo-fuzz](https://github.com/rust-fuzz/cargo-fuzz).\n+Some of our crates include a set of fuzz tests, this will be marked by a directory `fuzz`. It is a\n+good idea to run fuzz tests after each change. To get started with fuzz testing you'll need to\n+install [cargo-fuzz](https://github.com/rust-fuzz/cargo-fuzz).\n \n-`cargo install cargo-fuzz`\n+```shell\n+cargo install --locked cargo-fuzz\n+```\n \n To list the available fuzzing harnesses you can run;\n \n-```bash\n-$ cd tokio\n-$ cargo fuzz list\n+```shell\n+cd tokio\n+cargo fuzz list\n+```\n+\n+```text\n fuzz_linked_list\n ````",
        "comment_created_at": "2024-04-12T21:08:47+00:00",
        "comment_author": "joshka",
        "comment_body": "It's a good idea to generally split commands and the output into separate blocks instead of using shell prefixes, to make it clearer that the user shouldn't be pasting the output of the command.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1561492918",
    "pr_number": 6475,
    "pr_file": "CONTRIBUTING.md",
    "created_at": "2024-04-11T18:43:56+00:00",
    "commented_code": "cargo +1.77 clippy --all --tests --all-features\n ```\n \n-When building documentation normally, the markers that list the features\n-required for various parts of Tokio are missing. To build the documentation\n-correctly, use this command:\n+When building documentation, a simple `cargo doc` is not sufficient. To produce\n+documentation equivalent to what will be produced in docs.rs's builds of Tokio's\n+docs, please use:\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs\" RUSTFLAGS=\"--cfg docsrs\" cargo +nightly doc --all-features\n+RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features [--open]\n ```\n \n-To build documentation including Tokio's unstable features, it is necessary to\n-pass `--cfg tokio_unstable` to both RustDoc *and* rustc. To build the\n-documentation for unstable features, use this command:\n+This turns on indicators to display the Cargo features required for\n+conditionally compiled APIs in Tokio, and it enables documentation of unstable\n+Tokio features. Notice that it is necessary to pass cfg flags to both RustDoc\n+*and* rustc.\n+\n+There is a more concise way to build docs.rs-equivalent docs by using [`cargo\n+docs-rs`], which reads the above documentation flags out of Tokio's Cargo.toml\n+as docs.rs itself does.\n+\n+[`cargo docs-rs`]: https://github.com/dtolnay/cargo-docs-rs\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features\n+cargo install cargo-docs-rs",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1561492918",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6475,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1561492918",
        "commented_code": "@@ -152,20 +152,28 @@ When updating this, also update:\n cargo +1.77 clippy --all --tests --all-features\n ```\n \n-When building documentation normally, the markers that list the features\n-required for various parts of Tokio are missing. To build the documentation\n-correctly, use this command:\n+When building documentation, a simple `cargo doc` is not sufficient. To produce\n+documentation equivalent to what will be produced in docs.rs's builds of Tokio's\n+docs, please use:\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs\" RUSTFLAGS=\"--cfg docsrs\" cargo +nightly doc --all-features\n+RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features [--open]\n ```\n \n-To build documentation including Tokio's unstable features, it is necessary to\n-pass `--cfg tokio_unstable` to both RustDoc *and* rustc. To build the\n-documentation for unstable features, use this command:\n+This turns on indicators to display the Cargo features required for\n+conditionally compiled APIs in Tokio, and it enables documentation of unstable\n+Tokio features. Notice that it is necessary to pass cfg flags to both RustDoc\n+*and* rustc.\n+\n+There is a more concise way to build docs.rs-equivalent docs by using [`cargo\n+docs-rs`], which reads the above documentation flags out of Tokio's Cargo.toml\n+as docs.rs itself does.\n+\n+[`cargo docs-rs`]: https://github.com/dtolnay/cargo-docs-rs\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features\n+cargo install cargo-docs-rs",
        "comment_created_at": "2024-04-11T18:43:56+00:00",
        "comment_author": "joshka",
        "comment_body": "Should this be `cargo install cargo-docs-rs --locked`? (Saving users from install pain caused by any upstream dependency problems).",
        "pr_file_module": null
      },
      {
        "comment_id": "1561882093",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6475,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1561492918",
        "commented_code": "@@ -152,20 +152,28 @@ When updating this, also update:\n cargo +1.77 clippy --all --tests --all-features\n ```\n \n-When building documentation normally, the markers that list the features\n-required for various parts of Tokio are missing. To build the documentation\n-correctly, use this command:\n+When building documentation, a simple `cargo doc` is not sufficient. To produce\n+documentation equivalent to what will be produced in docs.rs's builds of Tokio's\n+docs, please use:\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs\" RUSTFLAGS=\"--cfg docsrs\" cargo +nightly doc --all-features\n+RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features [--open]\n ```\n \n-To build documentation including Tokio's unstable features, it is necessary to\n-pass `--cfg tokio_unstable` to both RustDoc *and* rustc. To build the\n-documentation for unstable features, use this command:\n+This turns on indicators to display the Cargo features required for\n+conditionally compiled APIs in Tokio, and it enables documentation of unstable\n+Tokio features. Notice that it is necessary to pass cfg flags to both RustDoc\n+*and* rustc.\n+\n+There is a more concise way to build docs.rs-equivalent docs by using [`cargo\n+docs-rs`], which reads the above documentation flags out of Tokio's Cargo.toml\n+as docs.rs itself does.\n+\n+[`cargo docs-rs`]: https://github.com/dtolnay/cargo-docs-rs\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features\n+cargo install cargo-docs-rs",
        "comment_created_at": "2024-04-12T00:33:29+00:00",
        "comment_author": "NobodyXu",
        "comment_body": "could use `cargo binsrall cargo-docs-rs` to avoid cost of building the dep.",
        "pr_file_module": null
      },
      {
        "comment_id": "1561884071",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6475,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1561492918",
        "commented_code": "@@ -152,20 +152,28 @@ When updating this, also update:\n cargo +1.77 clippy --all --tests --all-features\n ```\n \n-When building documentation normally, the markers that list the features\n-required for various parts of Tokio are missing. To build the documentation\n-correctly, use this command:\n+When building documentation, a simple `cargo doc` is not sufficient. To produce\n+documentation equivalent to what will be produced in docs.rs's builds of Tokio's\n+docs, please use:\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs\" RUSTFLAGS=\"--cfg docsrs\" cargo +nightly doc --all-features\n+RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features [--open]\n ```\n \n-To build documentation including Tokio's unstable features, it is necessary to\n-pass `--cfg tokio_unstable` to both RustDoc *and* rustc. To build the\n-documentation for unstable features, use this command:\n+This turns on indicators to display the Cargo features required for\n+conditionally compiled APIs in Tokio, and it enables documentation of unstable\n+Tokio features. Notice that it is necessary to pass cfg flags to both RustDoc\n+*and* rustc.\n+\n+There is a more concise way to build docs.rs-equivalent docs by using [`cargo\n+docs-rs`], which reads the above documentation flags out of Tokio's Cargo.toml\n+as docs.rs itself does.\n+\n+[`cargo docs-rs`]: https://github.com/dtolnay/cargo-docs-rs\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features\n+cargo install cargo-docs-rs",
        "comment_created_at": "2024-04-12T00:38:24+00:00",
        "comment_author": "taiki-e",
        "comment_body": "I think --locked is a good idea, but I think we should not assume that developers are installing binstall.",
        "pr_file_module": null
      },
      {
        "comment_id": "1562211600",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6475,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1561492918",
        "commented_code": "@@ -152,20 +152,28 @@ When updating this, also update:\n cargo +1.77 clippy --all --tests --all-features\n ```\n \n-When building documentation normally, the markers that list the features\n-required for various parts of Tokio are missing. To build the documentation\n-correctly, use this command:\n+When building documentation, a simple `cargo doc` is not sufficient. To produce\n+documentation equivalent to what will be produced in docs.rs's builds of Tokio's\n+docs, please use:\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs\" RUSTFLAGS=\"--cfg docsrs\" cargo +nightly doc --all-features\n+RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features [--open]\n ```\n \n-To build documentation including Tokio's unstable features, it is necessary to\n-pass `--cfg tokio_unstable` to both RustDoc *and* rustc. To build the\n-documentation for unstable features, use this command:\n+This turns on indicators to display the Cargo features required for\n+conditionally compiled APIs in Tokio, and it enables documentation of unstable\n+Tokio features. Notice that it is necessary to pass cfg flags to both RustDoc\n+*and* rustc.\n+\n+There is a more concise way to build docs.rs-equivalent docs by using [`cargo\n+docs-rs`], which reads the above documentation flags out of Tokio's Cargo.toml\n+as docs.rs itself does.\n+\n+[`cargo docs-rs`]: https://github.com/dtolnay/cargo-docs-rs\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features\n+cargo install cargo-docs-rs",
        "comment_created_at": "2024-04-12T08:26:57+00:00",
        "comment_author": "joshka",
        "comment_body": "Yeah. Anyone that has installed binstall would know just use binstall generally, it's the newer users that often don't know to use `--locked` that can cause a support burden.",
        "pr_file_module": null
      },
      {
        "comment_id": "1562217881",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6475,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1561492918",
        "commented_code": "@@ -152,20 +152,28 @@ When updating this, also update:\n cargo +1.77 clippy --all --tests --all-features\n ```\n \n-When building documentation normally, the markers that list the features\n-required for various parts of Tokio are missing. To build the documentation\n-correctly, use this command:\n+When building documentation, a simple `cargo doc` is not sufficient. To produce\n+documentation equivalent to what will be produced in docs.rs's builds of Tokio's\n+docs, please use:\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs\" RUSTFLAGS=\"--cfg docsrs\" cargo +nightly doc --all-features\n+RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features [--open]\n ```\n \n-To build documentation including Tokio's unstable features, it is necessary to\n-pass `--cfg tokio_unstable` to both RustDoc *and* rustc. To build the\n-documentation for unstable features, use this command:\n+This turns on indicators to display the Cargo features required for\n+conditionally compiled APIs in Tokio, and it enables documentation of unstable\n+Tokio features. Notice that it is necessary to pass cfg flags to both RustDoc\n+*and* rustc.\n+\n+There is a more concise way to build docs.rs-equivalent docs by using [`cargo\n+docs-rs`], which reads the above documentation flags out of Tokio's Cargo.toml\n+as docs.rs itself does.\n+\n+[`cargo docs-rs`]: https://github.com/dtolnay/cargo-docs-rs\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features\n+cargo install cargo-docs-rs",
        "comment_created_at": "2024-04-12T08:29:26+00:00",
        "comment_author": "Darksonn",
        "comment_body": "I'm happy to accept a PR that adds `--locked` to the command.",
        "pr_file_module": null
      },
      {
        "comment_id": "1563105870",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6475,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1561492918",
        "commented_code": "@@ -152,20 +152,28 @@ When updating this, also update:\n cargo +1.77 clippy --all --tests --all-features\n ```\n \n-When building documentation normally, the markers that list the features\n-required for various parts of Tokio are missing. To build the documentation\n-correctly, use this command:\n+When building documentation, a simple `cargo doc` is not sufficient. To produce\n+documentation equivalent to what will be produced in docs.rs's builds of Tokio's\n+docs, please use:\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs\" RUSTFLAGS=\"--cfg docsrs\" cargo +nightly doc --all-features\n+RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features [--open]\n ```\n \n-To build documentation including Tokio's unstable features, it is necessary to\n-pass `--cfg tokio_unstable` to both RustDoc *and* rustc. To build the\n-documentation for unstable features, use this command:\n+This turns on indicators to display the Cargo features required for\n+conditionally compiled APIs in Tokio, and it enables documentation of unstable\n+Tokio features. Notice that it is necessary to pass cfg flags to both RustDoc\n+*and* rustc.\n+\n+There is a more concise way to build docs.rs-equivalent docs by using [`cargo\n+docs-rs`], which reads the above documentation flags out of Tokio's Cargo.toml\n+as docs.rs itself does.\n+\n+[`cargo docs-rs`]: https://github.com/dtolnay/cargo-docs-rs\n \n ```\n-RUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features\n+cargo install cargo-docs-rs",
        "comment_created_at": "2024-04-12T19:46:00+00:00",
        "comment_author": "joshka",
        "comment_body": "https://github.com/tokio-rs/tokio/pull/6479",
        "pr_file_module": null
      }
    ]
  }
]