[
  {
    "discussion_id": "1903981405",
    "pr_number": 7054,
    "pr_file": "tokio/src/io/blocking.rs",
    "created_at": "2025-01-06T10:30:08+00:00",
    "commented_code": "&self.buf[self.pos..]\n     }\n \n-    pub(crate) fn ensure_capacity_for(&mut self, bytes: &ReadBuf<'_>, max_buf_size: usize) {\n+    /// Safety: `rd` must not read from the buffer passed to `read` and\n+    /// must correctly report the length of the written portion of the buffer.\n+    pub(crate) unsafe fn read_from<T: Read>(\n+        &mut self,\n+        rd: &mut T,\n+        max_buf_size: usize,\n+    ) -> io::Result<usize> {\n         assert!(self.is_empty());\n+        self.buf.reserve(max_buf_size);\n \n-        let len = cmp::min(bytes.remaining(), max_buf_size);\n-\n-        if self.buf.len() < len {\n-            self.buf.reserve(len - self.buf.len());\n-        }\n-\n-        unsafe {\n-            self.buf.set_len(len);\n-        }\n-    }\n-\n-    pub(crate) fn read_from<T: Read>(&mut self, rd: &mut T) -> io::Result<usize> {\n-        let res = uninterruptibly!(rd.read(&mut self.buf));\n+        let buf = &mut self.buf.spare_capacity_mut()[..max_buf_size];\n+        let buf = unsafe { &mut *(buf as *mut [MaybeUninit<u8>] as *mut [u8]) };\n+        let res = uninterruptibly!(rd.read(buf));\n \n         if let Ok(n) = res {\n-            self.buf.truncate(n);\n+            unsafe { self.buf.set_len(n) }",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1903981405",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7054,
        "pr_file": "tokio/src/io/blocking.rs",
        "discussion_id": "1903981405",
        "commented_code": "@@ -227,25 +228,22 @@ impl Buf {\n         &self.buf[self.pos..]\n     }\n \n-    pub(crate) fn ensure_capacity_for(&mut self, bytes: &ReadBuf<'_>, max_buf_size: usize) {\n+    /// Safety: `rd` must not read from the buffer passed to `read` and\n+    /// must correctly report the length of the written portion of the buffer.\n+    pub(crate) unsafe fn read_from<T: Read>(\n+        &mut self,\n+        rd: &mut T,\n+        max_buf_size: usize,\n+    ) -> io::Result<usize> {\n         assert!(self.is_empty());\n+        self.buf.reserve(max_buf_size);\n \n-        let len = cmp::min(bytes.remaining(), max_buf_size);\n-\n-        if self.buf.len() < len {\n-            self.buf.reserve(len - self.buf.len());\n-        }\n-\n-        unsafe {\n-            self.buf.set_len(len);\n-        }\n-    }\n-\n-    pub(crate) fn read_from<T: Read>(&mut self, rd: &mut T) -> io::Result<usize> {\n-        let res = uninterruptibly!(rd.read(&mut self.buf));\n+        let buf = &mut self.buf.spare_capacity_mut()[..max_buf_size];\n+        let buf = unsafe { &mut *(buf as *mut [MaybeUninit<u8>] as *mut [u8]) };\n+        let res = uninterruptibly!(rd.read(buf));\n \n         if let Ok(n) = res {\n-            self.buf.truncate(n);\n+            unsafe { self.buf.set_len(n) }",
        "comment_created_at": "2025-01-06T10:30:08+00:00",
        "comment_author": "Darksonn",
        "comment_body": "This needs a safety comment to explain that this is okay because the caller guarantees that the written portion is reported correctly.\r\n\r\nAlso, it'd be nice to note that this is only correct because `self.buf.len() == 0` as asserted above.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1903981623",
    "pr_number": 7054,
    "pr_file": "tokio/src/io/blocking.rs",
    "created_at": "2025-01-06T10:30:21+00:00",
    "commented_code": "&self.buf[self.pos..]\n     }\n \n-    pub(crate) fn ensure_capacity_for(&mut self, bytes: &ReadBuf<'_>, max_buf_size: usize) {\n+    /// Safety: `rd` must not read from the buffer passed to `read` and\n+    /// must correctly report the length of the written portion of the buffer.\n+    pub(crate) unsafe fn read_from<T: Read>(\n+        &mut self,\n+        rd: &mut T,\n+        max_buf_size: usize,\n+    ) -> io::Result<usize> {\n         assert!(self.is_empty());\n+        self.buf.reserve(max_buf_size);\n \n-        let len = cmp::min(bytes.remaining(), max_buf_size);\n-\n-        if self.buf.len() < len {\n-            self.buf.reserve(len - self.buf.len());\n-        }\n-\n-        unsafe {\n-            self.buf.set_len(len);\n-        }\n-    }\n-\n-    pub(crate) fn read_from<T: Read>(&mut self, rd: &mut T) -> io::Result<usize> {\n-        let res = uninterruptibly!(rd.read(&mut self.buf));\n+        let buf = &mut self.buf.spare_capacity_mut()[..max_buf_size];\n+        let buf = unsafe { &mut *(buf as *mut [MaybeUninit<u8>] as *mut [u8]) };",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1903981623",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7054,
        "pr_file": "tokio/src/io/blocking.rs",
        "discussion_id": "1903981623",
        "commented_code": "@@ -227,25 +228,22 @@ impl Buf {\n         &self.buf[self.pos..]\n     }\n \n-    pub(crate) fn ensure_capacity_for(&mut self, bytes: &ReadBuf<'_>, max_buf_size: usize) {\n+    /// Safety: `rd` must not read from the buffer passed to `read` and\n+    /// must correctly report the length of the written portion of the buffer.\n+    pub(crate) unsafe fn read_from<T: Read>(\n+        &mut self,\n+        rd: &mut T,\n+        max_buf_size: usize,\n+    ) -> io::Result<usize> {\n         assert!(self.is_empty());\n+        self.buf.reserve(max_buf_size);\n \n-        let len = cmp::min(bytes.remaining(), max_buf_size);\n-\n-        if self.buf.len() < len {\n-            self.buf.reserve(len - self.buf.len());\n-        }\n-\n-        unsafe {\n-            self.buf.set_len(len);\n-        }\n-    }\n-\n-    pub(crate) fn read_from<T: Read>(&mut self, rd: &mut T) -> io::Result<usize> {\n-        let res = uninterruptibly!(rd.read(&mut self.buf));\n+        let buf = &mut self.buf.spare_capacity_mut()[..max_buf_size];\n+        let buf = unsafe { &mut *(buf as *mut [MaybeUninit<u8>] as *mut [u8]) };",
        "comment_created_at": "2025-01-06T10:30:21+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Can you add a safety comment?\r\n```\r\n// SAFETY: The memory may be uninitialized, but `rd.read` will only write to the buffer.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1582698458",
    "pr_number": 6521,
    "pr_file": "tokio/src/util/wake_list.rs",
    "created_at": "2024-04-29T08:26:42+00:00",
    "commented_code": "}\n \n     pub(crate) fn wake_all(&mut self) {\n+        struct DropGuard {\n+            wakers: *mut Waker,\n+            start: usize,\n+            end: usize,\n+        }\n+\n+        impl Drop for DropGuard {\n+            fn drop(&mut self) {\n+                let slice = ptr::slice_from_raw_parts_mut(\n+                    unsafe { self.wakers.add(self.start) },",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1582698458",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6521,
        "pr_file": "tokio/src/util/wake_list.rs",
        "discussion_id": "1582698458",
        "commented_code": "@@ -37,12 +37,34 @@ impl WakeList {\n     }\n \n     pub(crate) fn wake_all(&mut self) {\n+        struct DropGuard {\n+            wakers: *mut Waker,\n+            start: usize,\n+            end: usize,\n+        }\n+\n+        impl Drop for DropGuard {\n+            fn drop(&mut self) {\n+                let slice = ptr::slice_from_raw_parts_mut(\n+                    unsafe { self.wakers.add(self.start) },",
        "comment_created_at": "2024-04-29T08:26:42+00:00",
        "comment_author": "Darksonn",
        "comment_body": "This unsafe block needs a safety comment. It should explain that the resulting pointer is in-bounds (or one after the end) of the `self.wakers` array.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1187608929",
    "pr_number": 5665,
    "pr_file": "tokio-util/src/sync/mpsc.rs",
    "created_at": "2023-05-08T15:53:02+00:00",
    "commented_code": "}\n }\n \n-impl<T: Send + 'static> PollSender<T> {\n+type InnerFuture<'a, T> = ReusableBoxFuture<'a, Result<OwnedPermit<T>, PollSendError<T>>>;\n+\n+#[derive(Debug)]\n+// TODO: This should be replace with a type_alias_impl_trait to eliminate `'static` and all the transmutes\n+struct PollSenderFuture<T>(InnerFuture<'static, T>);\n+\n+impl<T> PollSenderFuture<T> {\n+    /// Create with an empty inner future with no `Send` bound.\n+    fn empty() -> Self {\n+        // We don't use `make_acquire_future` here because our relaxed bounds on `T` are not\n+        // compatible with the transitive bounds required by `Sender<T>`.\n+        Self(ReusableBoxFuture::new(async { unreachable!() }))\n+    }\n+}\n+\n+impl<T: Send> PollSenderFuture<T> {\n+    /// Create with an empty inner future.\n+    fn new() -> Self {\n+        let v = InnerFuture::new(make_acquire_future(None));\n+        // This is safe because `make_acquire_future(None)` is actually `'static`\n+        Self(unsafe { mem::transmute::<InnerFuture<'_, T>, InnerFuture<'static, T>>(v) })\n+    }\n+\n+    /// Poll the inner future.\n+    fn poll(&mut self, cx: &mut Context<'_>) -> Poll<Result<OwnedPermit<T>, PollSendError<T>>> {\n+        self.0.poll(cx)\n+    }\n+\n+    /// Replace the inner future.\n+    fn set(&mut self, sender: Option<Sender<T>>) {\n+        // This is safe because `make_acquire_future(sender)` is bounded by the lifetime of `T`, which inner is already bound by\n+        let inner: &mut InnerFuture<'_, T> =\n+            unsafe { &mut *(&mut self.0 as *mut InnerFuture<'static, T>).cast() };",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1187608929",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 5665,
        "pr_file": "tokio-util/src/sync/mpsc.rs",
        "discussion_id": "1187608929",
        "commented_code": "@@ -64,13 +64,50 @@ async fn make_acquire_future<T>(\n     }\n }\n \n-impl<T: Send + 'static> PollSender<T> {\n+type InnerFuture<'a, T> = ReusableBoxFuture<'a, Result<OwnedPermit<T>, PollSendError<T>>>;\n+\n+#[derive(Debug)]\n+// TODO: This should be replace with a type_alias_impl_trait to eliminate `'static` and all the transmutes\n+struct PollSenderFuture<T>(InnerFuture<'static, T>);\n+\n+impl<T> PollSenderFuture<T> {\n+    /// Create with an empty inner future with no `Send` bound.\n+    fn empty() -> Self {\n+        // We don't use `make_acquire_future` here because our relaxed bounds on `T` are not\n+        // compatible with the transitive bounds required by `Sender<T>`.\n+        Self(ReusableBoxFuture::new(async { unreachable!() }))\n+    }\n+}\n+\n+impl<T: Send> PollSenderFuture<T> {\n+    /// Create with an empty inner future.\n+    fn new() -> Self {\n+        let v = InnerFuture::new(make_acquire_future(None));\n+        // This is safe because `make_acquire_future(None)` is actually `'static`\n+        Self(unsafe { mem::transmute::<InnerFuture<'_, T>, InnerFuture<'static, T>>(v) })\n+    }\n+\n+    /// Poll the inner future.\n+    fn poll(&mut self, cx: &mut Context<'_>) -> Poll<Result<OwnedPermit<T>, PollSendError<T>>> {\n+        self.0.poll(cx)\n+    }\n+\n+    /// Replace the inner future.\n+    fn set(&mut self, sender: Option<Sender<T>>) {\n+        // This is safe because `make_acquire_future(sender)` is bounded by the lifetime of `T`, which inner is already bound by\n+        let inner: &mut InnerFuture<'_, T> =\n+            unsafe { &mut *(&mut self.0 as *mut InnerFuture<'static, T>).cast() };",
        "comment_created_at": "2023-05-08T15:53:02+00:00",
        "comment_author": "Darksonn",
        "comment_body": "It seems like there's an extra call to `.cast()` here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1187660907",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 5665,
        "pr_file": "tokio-util/src/sync/mpsc.rs",
        "discussion_id": "1187608929",
        "commented_code": "@@ -64,13 +64,50 @@ async fn make_acquire_future<T>(\n     }\n }\n \n-impl<T: Send + 'static> PollSender<T> {\n+type InnerFuture<'a, T> = ReusableBoxFuture<'a, Result<OwnedPermit<T>, PollSendError<T>>>;\n+\n+#[derive(Debug)]\n+// TODO: This should be replace with a type_alias_impl_trait to eliminate `'static` and all the transmutes\n+struct PollSenderFuture<T>(InnerFuture<'static, T>);\n+\n+impl<T> PollSenderFuture<T> {\n+    /// Create with an empty inner future with no `Send` bound.\n+    fn empty() -> Self {\n+        // We don't use `make_acquire_future` here because our relaxed bounds on `T` are not\n+        // compatible with the transitive bounds required by `Sender<T>`.\n+        Self(ReusableBoxFuture::new(async { unreachable!() }))\n+    }\n+}\n+\n+impl<T: Send> PollSenderFuture<T> {\n+    /// Create with an empty inner future.\n+    fn new() -> Self {\n+        let v = InnerFuture::new(make_acquire_future(None));\n+        // This is safe because `make_acquire_future(None)` is actually `'static`\n+        Self(unsafe { mem::transmute::<InnerFuture<'_, T>, InnerFuture<'static, T>>(v) })\n+    }\n+\n+    /// Poll the inner future.\n+    fn poll(&mut self, cx: &mut Context<'_>) -> Poll<Result<OwnedPermit<T>, PollSendError<T>>> {\n+        self.0.poll(cx)\n+    }\n+\n+    /// Replace the inner future.\n+    fn set(&mut self, sender: Option<Sender<T>>) {\n+        // This is safe because `make_acquire_future(sender)` is bounded by the lifetime of `T`, which inner is already bound by\n+        let inner: &mut InnerFuture<'_, T> =\n+            unsafe { &mut *(&mut self.0 as *mut InnerFuture<'static, T>).cast() };",
        "comment_created_at": "2023-05-08T16:47:36+00:00",
        "comment_author": "Daniel-Bloom-dfinity",
        "comment_body": "I don't think so, the cast converts from `*mut InnerFuture<'static, T>` to `*mut InnerFuture<'_, T>`.\r\n\r\nI can move all the `cast` stuff outside the `unsafe` to make this clearer:\r\n```rust\r\nlet inner: *mut InnerFuture<'_, T> = (&mut self.0 as *mut InnerFuture<'static, T>).cast();\r\n// SAFETY: The `make_acquire_future(sender)` future must not exist after the type `T`\r\n// becomes invalid, and this casts away the type-level lifetime check for that. However, the\r\n// inner future is never moved out of this `PollSenderFuture<T>`, so the future will not\r\n// live longer than the `PollSenderFuture<T>` lives. A `PollSenderFuture<T>` is guaranteed\r\n// to not exist after the type `T` becomes invalid, because it is annotated with a `T`, so\r\n// this is ok.\r\nlet inner = unsafe { &mut *inner };\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1187892690",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 5665,
        "pr_file": "tokio-util/src/sync/mpsc.rs",
        "discussion_id": "1187608929",
        "commented_code": "@@ -64,13 +64,50 @@ async fn make_acquire_future<T>(\n     }\n }\n \n-impl<T: Send + 'static> PollSender<T> {\n+type InnerFuture<'a, T> = ReusableBoxFuture<'a, Result<OwnedPermit<T>, PollSendError<T>>>;\n+\n+#[derive(Debug)]\n+// TODO: This should be replace with a type_alias_impl_trait to eliminate `'static` and all the transmutes\n+struct PollSenderFuture<T>(InnerFuture<'static, T>);\n+\n+impl<T> PollSenderFuture<T> {\n+    /// Create with an empty inner future with no `Send` bound.\n+    fn empty() -> Self {\n+        // We don't use `make_acquire_future` here because our relaxed bounds on `T` are not\n+        // compatible with the transitive bounds required by `Sender<T>`.\n+        Self(ReusableBoxFuture::new(async { unreachable!() }))\n+    }\n+}\n+\n+impl<T: Send> PollSenderFuture<T> {\n+    /// Create with an empty inner future.\n+    fn new() -> Self {\n+        let v = InnerFuture::new(make_acquire_future(None));\n+        // This is safe because `make_acquire_future(None)` is actually `'static`\n+        Self(unsafe { mem::transmute::<InnerFuture<'_, T>, InnerFuture<'static, T>>(v) })\n+    }\n+\n+    /// Poll the inner future.\n+    fn poll(&mut self, cx: &mut Context<'_>) -> Poll<Result<OwnedPermit<T>, PollSendError<T>>> {\n+        self.0.poll(cx)\n+    }\n+\n+    /// Replace the inner future.\n+    fn set(&mut self, sender: Option<Sender<T>>) {\n+        // This is safe because `make_acquire_future(sender)` is bounded by the lifetime of `T`, which inner is already bound by\n+        let inner: &mut InnerFuture<'_, T> =\n+            unsafe { &mut *(&mut self.0 as *mut InnerFuture<'static, T>).cast() };",
        "comment_created_at": "2023-05-08T20:58:08+00:00",
        "comment_author": "Daniel-Bloom-dfinity",
        "comment_body": "Or alternatively:\r\n```rust\r\nlet inner: *mut InnerFuture<'static, T> = &mut self.0;\r\nlet inner: *mut InnerFuture<'_, T> = inner.cast();\r\n// SAFETY: The `make_acquire_future(sender)` future must not exist after the type `T`\r\n// becomes invalid, and this casts away the type-level lifetime check for that. However, the\r\n// inner future is never moved out of this `PollSenderFuture<T>`, so the future will not\r\n// live longer than the `PollSenderFuture<T>` lives. A `PollSenderFuture<T>` is guaranteed\r\n// to not exist after the type `T` becomes invalid, because it is annotated with a `T`, so\r\n// this is ok.\r\nlet inner = unsafe { &mut *inner };\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1188320268",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 5665,
        "pr_file": "tokio-util/src/sync/mpsc.rs",
        "discussion_id": "1187608929",
        "commented_code": "@@ -64,13 +64,50 @@ async fn make_acquire_future<T>(\n     }\n }\n \n-impl<T: Send + 'static> PollSender<T> {\n+type InnerFuture<'a, T> = ReusableBoxFuture<'a, Result<OwnedPermit<T>, PollSendError<T>>>;\n+\n+#[derive(Debug)]\n+// TODO: This should be replace with a type_alias_impl_trait to eliminate `'static` and all the transmutes\n+struct PollSenderFuture<T>(InnerFuture<'static, T>);\n+\n+impl<T> PollSenderFuture<T> {\n+    /// Create with an empty inner future with no `Send` bound.\n+    fn empty() -> Self {\n+        // We don't use `make_acquire_future` here because our relaxed bounds on `T` are not\n+        // compatible with the transitive bounds required by `Sender<T>`.\n+        Self(ReusableBoxFuture::new(async { unreachable!() }))\n+    }\n+}\n+\n+impl<T: Send> PollSenderFuture<T> {\n+    /// Create with an empty inner future.\n+    fn new() -> Self {\n+        let v = InnerFuture::new(make_acquire_future(None));\n+        // This is safe because `make_acquire_future(None)` is actually `'static`\n+        Self(unsafe { mem::transmute::<InnerFuture<'_, T>, InnerFuture<'static, T>>(v) })\n+    }\n+\n+    /// Poll the inner future.\n+    fn poll(&mut self, cx: &mut Context<'_>) -> Poll<Result<OwnedPermit<T>, PollSendError<T>>> {\n+        self.0.poll(cx)\n+    }\n+\n+    /// Replace the inner future.\n+    fn set(&mut self, sender: Option<Sender<T>>) {\n+        // This is safe because `make_acquire_future(sender)` is bounded by the lifetime of `T`, which inner is already bound by\n+        let inner: &mut InnerFuture<'_, T> =\n+            unsafe { &mut *(&mut self.0 as *mut InnerFuture<'static, T>).cast() };",
        "comment_created_at": "2023-05-09T08:40:41+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Yes, using several `let` statements is good. It makes it clear what the types are.",
        "pr_file_module": null
      }
    ]
  }
]