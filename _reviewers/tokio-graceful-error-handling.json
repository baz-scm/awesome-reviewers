[
  {
    "discussion_id": "1530031030",
    "pr_number": 6381,
    "pr_file": "tokio/src/fs/file.rs",
    "created_at": "2024-03-19T09:42:36+00:00",
    "commented_code": "/// let std_file = std::fs::File::open(\"foo.txt\").unwrap();\n     /// let file = tokio::fs::File::from_std(std_file);\n     /// ```\n-    pub fn from_std(std: StdFile) -> File {\n+    pub fn from_std(mut std: StdFile) -> File {\n+        let pos = std.stream_position().unwrap();",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1530031030",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6381,
        "pr_file": "tokio/src/fs/file.rs",
        "discussion_id": "1530031030",
        "commented_code": "@@ -233,13 +233,14 @@ impl File {\n     /// let std_file = std::fs::File::open(\"foo.txt\").unwrap();\n     /// let file = tokio::fs::File::from_std(std_file);\n     /// ```\n-    pub fn from_std(std: StdFile) -> File {\n+    pub fn from_std(mut std: StdFile) -> File {\n+        let pos = std.stream_position().unwrap();",
        "comment_created_at": "2024-03-19T09:42:36+00:00",
        "comment_author": "Darksonn",
        "comment_body": "I think we probably want to just fall back to existing behavior if `stream_position` fails.\r\n```suggestion\r\n        let pos = std.stream_position().unwrap_or(0);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1963852975",
    "pr_number": 7166,
    "pr_file": "tokio/src/util/blocking_check.rs",
    "created_at": "2025-02-20T15:57:46+00:00",
    "commented_code": "+#[cfg(unix)]\n+use std::os::fd::AsFd;\n+\n+#[cfg(unix)]\n+#[allow(unused_variables)]\n+pub(crate) fn check_socket_for_blocking<S: AsFd>(s: &S) -> crate::io::Result<()> {\n+    #[cfg(debug_assertions)]\n+    {\n+        let sock = socket2::SockRef::from(s);\n+\n+        if !sock.nonblocking()? {\n+            eprintln!(\"Warning: registering a blocking socket, this may be a bug!\");",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1963852975",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7166,
        "pr_file": "tokio/src/util/blocking_check.rs",
        "discussion_id": "1963852975",
        "commented_code": "@@ -0,0 +1,25 @@\n+#[cfg(unix)]\n+use std::os::fd::AsFd;\n+\n+#[cfg(unix)]\n+#[allow(unused_variables)]\n+pub(crate) fn check_socket_for_blocking<S: AsFd>(s: &S) -> crate::io::Result<()> {\n+    #[cfg(debug_assertions)]\n+    {\n+        let sock = socket2::SockRef::from(s);\n+\n+        if !sock.nonblocking()? {\n+            eprintln!(\"Warning: registering a blocking socket, this may be a bug!\");",
        "comment_created_at": "2025-02-20T15:57:46+00:00",
        "comment_author": "jeff-hiner",
        "comment_body": "Is it possible/likely that users are already using stderr for other things? Emitting stderr from within a library feels kinda gross; it might be easier to spot if we just panic here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1964066004",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7166,
        "pr_file": "tokio/src/util/blocking_check.rs",
        "discussion_id": "1963852975",
        "commented_code": "@@ -0,0 +1,25 @@\n+#[cfg(unix)]\n+use std::os::fd::AsFd;\n+\n+#[cfg(unix)]\n+#[allow(unused_variables)]\n+pub(crate) fn check_socket_for_blocking<S: AsFd>(s: &S) -> crate::io::Result<()> {\n+    #[cfg(debug_assertions)]\n+    {\n+        let sock = socket2::SockRef::from(s);\n+\n+        if !sock.nonblocking()? {\n+            eprintln!(\"Warning: registering a blocking socket, this may be a bug!\");",
        "comment_created_at": "2025-02-20T17:33:51+00:00",
        "comment_author": "Noah-Kennedy",
        "comment_body": "I actually feel similarly, the request to do it this way specifically came from @carllerche.\r\n\r\nI'll leave it up to him to voice why he wants this approach.",
        "pr_file_module": null
      },
      {
        "comment_id": "1968271241",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7166,
        "pr_file": "tokio/src/util/blocking_check.rs",
        "discussion_id": "1963852975",
        "commented_code": "@@ -0,0 +1,25 @@\n+#[cfg(unix)]\n+use std::os::fd::AsFd;\n+\n+#[cfg(unix)]\n+#[allow(unused_variables)]\n+pub(crate) fn check_socket_for_blocking<S: AsFd>(s: &S) -> crate::io::Result<()> {\n+    #[cfg(debug_assertions)]\n+    {\n+        let sock = socket2::SockRef::from(s);\n+\n+        if !sock.nonblocking()? {\n+            eprintln!(\"Warning: registering a blocking socket, this may be a bug!\");",
        "comment_created_at": "2025-02-24T19:17:02+00:00",
        "comment_author": "carllerche",
        "comment_body": "I spent some more time thinking about this question. I think that I am OK starting with a `debug_assert`. I would like there to be a way to disable the assertion (in case a user has a legitimate case) **, and** the panic message links to an issue for the user to find out how to disable the panic **and** report their legitimate use case.\r\n\r\nTo disable the panic, we can use a `tokio_allow_from_blocking_fd` `cfg` flag or something similar. The linked issue can include steps for setting it.\r\n\r\ncc/ @Darksonn wdyt?",
        "pr_file_module": null
      },
      {
        "comment_id": "1968275463",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7166,
        "pr_file": "tokio/src/util/blocking_check.rs",
        "discussion_id": "1963852975",
        "commented_code": "@@ -0,0 +1,25 @@\n+#[cfg(unix)]\n+use std::os::fd::AsFd;\n+\n+#[cfg(unix)]\n+#[allow(unused_variables)]\n+pub(crate) fn check_socket_for_blocking<S: AsFd>(s: &S) -> crate::io::Result<()> {\n+    #[cfg(debug_assertions)]\n+    {\n+        let sock = socket2::SockRef::from(s);\n+\n+        if !sock.nonblocking()? {\n+            eprintln!(\"Warning: registering a blocking socket, this may be a bug!\");",
        "comment_created_at": "2025-02-24T19:19:02+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Using a debug assertion with a `--cfg` to disable it seems preferable to the `eprintln!`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1494584142",
    "pr_number": 6345,
    "pr_file": "tokio/src/io/async_fd.rs",
    "created_at": "2024-02-19T13:54:40+00:00",
    "commented_code": "/// [`try_io`]: method@AsyncFdReadyGuard::try_io\n #[derive(Debug)]\n pub struct TryIoError(());\n+\n+/// Error returned by [`try_new`] or [`try_with_interest`].\n+///\n+/// [`try_new`]: AsyncFd::try_new\n+/// [`try_with_interest`]: AsyncFd::try_with_interest\n+pub struct AsyncFdError<T> {\n+    inner: T,\n+    cause: io::Error,\n+}\n+\n+impl<T> AsyncFdError<T> {\n+    /// Returns the original object passed to [`try_new`] or [`try_with_interest`]\n+    /// alongside the error that caused these functions to fail.\n+    ///\n+    /// [`try_new`]: AsyncFd::try_new\n+    /// [`try_with_interest`]: AsyncFd::try_with_interest\n+    pub fn into_parts(self) -> (T, io::Error) {\n+        (self.inner, self.cause)\n+    }\n+}\n+\n+impl<T> fmt::Display for AsyncFdError<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(&self.cause, f)\n+    }\n+}\n+\n+impl<T> fmt::Debug for AsyncFdError<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Debug::fmt(&self.cause, f)\n+    }\n+}\n+\n+impl<T> Error for AsyncFdError<T> {}",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1494584142",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6345,
        "pr_file": "tokio/src/io/async_fd.rs",
        "discussion_id": "1494584142",
        "commented_code": "@@ -1257,3 +1313,43 @@ impl<'a, T: std::fmt::Debug + AsRawFd> std::fmt::Debug for AsyncFdReadyMutGuard<\n /// [`try_io`]: method@AsyncFdReadyGuard::try_io\n #[derive(Debug)]\n pub struct TryIoError(());\n+\n+/// Error returned by [`try_new`] or [`try_with_interest`].\n+///\n+/// [`try_new`]: AsyncFd::try_new\n+/// [`try_with_interest`]: AsyncFd::try_with_interest\n+pub struct AsyncFdError<T> {\n+    inner: T,\n+    cause: io::Error,\n+}\n+\n+impl<T> AsyncFdError<T> {\n+    /// Returns the original object passed to [`try_new`] or [`try_with_interest`]\n+    /// alongside the error that caused these functions to fail.\n+    ///\n+    /// [`try_new`]: AsyncFd::try_new\n+    /// [`try_with_interest`]: AsyncFd::try_with_interest\n+    pub fn into_parts(self) -> (T, io::Error) {\n+        (self.inner, self.cause)\n+    }\n+}\n+\n+impl<T> fmt::Display for AsyncFdError<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(&self.cause, f)\n+    }\n+}\n+\n+impl<T> fmt::Debug for AsyncFdError<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Debug::fmt(&self.cause, f)\n+    }\n+}\n+\n+impl<T> Error for AsyncFdError<T> {}",
        "comment_created_at": "2024-02-19T13:54:40+00:00",
        "comment_author": "Darksonn",
        "comment_body": "You could implement the `source` method here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1943114639",
    "pr_number": 6815,
    "pr_file": "tokio-util/src/io/sync_bridge.rs",
    "created_at": "2025-02-05T15:04:23+00:00",
    "commented_code": "///     // Example: In-memory data.\n ///     let data = b\"Hello, world!\"; // A byte slice.\n ///     let reader = Cursor::new(data); // Create an in-memory AsyncRead.\n-///     compress_data(reader).await;\n+///     let _ = compress_data(reader).await;",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1943114639",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6815,
        "pr_file": "tokio-util/src/io/sync_bridge.rs",
        "discussion_id": "1943114639",
        "commented_code": "@@ -151,7 +150,7 @@ use tokio::io::{\n ///     // Example: In-memory data.\n ///     let data = b\"Hello, world!\"; // A byte slice.\n ///     let reader = Cursor::new(data); // Create an in-memory AsyncRead.\n-///     compress_data(reader).await;\n+///     let _ = compress_data(reader).await;",
        "comment_created_at": "2025-02-05T15:04:23+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Let's not ignore errors.\r\n```suggestion\r\n///     compress_data(reader).await?;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1545792290",
    "pr_number": 6445,
    "pr_file": "tokio/src/runtime/builder.rs",
    "created_at": "2024-03-31T19:46:38+00:00",
    "commented_code": "/// # }\n     /// ```\n     pub fn global_queue_interval(&mut self, val: u32) -> &mut Self {\n+        assert!(val > 0, \"global_queue_interval must be greater than 0\");",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1545792290",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6445,
        "pr_file": "tokio/src/runtime/builder.rs",
        "discussion_id": "1545792290",
        "commented_code": "@@ -769,6 +773,7 @@ impl Builder {\n     /// # }\n     /// ```\n     pub fn global_queue_interval(&mut self, val: u32) -> &mut Self {\n+        assert!(val > 0, \"global_queue_interval must be greater than 0\");",
        "comment_created_at": "2024-03-31T19:46:38+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Can you add `#[track_caller]` and a [test for the panic location](https://github.com/tokio-rs/tokio/blob/master/tokio/tests/rt_panic.rs)?",
        "pr_file_module": null
      }
    ]
  }
]