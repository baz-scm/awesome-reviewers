[
  {
    "discussion_id": "1490933313",
    "pr_number": 6348,
    "pr_file": "tokio/src/sync/mpsc/chan.rs",
    "created_at": "2024-02-15T12:25:34+00:00",
    "commented_code": "self.inner.notify_rx_closed.notify_waiters();\n     }\n \n+    pub(crate) fn is_closed_and_empty(&mut self) -> bool {\n+        // There two internal states that can represent a closed channel that has no messages\n+        //\n+        //  1. When `close` is called.\n+        //  In this case, the inner semaphore will be closed, and the channel has no\n+        //  outstanding messages if the list is at the tail position.\n+        //\n+        //  2. When all senders are dropped.\n+        //  In this case, the semaphore remains unclosed, and the `index` in the list won't\n+        //  reach the tail position. It is necessary to check the list if the last block is\n+        //  `closed` and has no value available.\n+        self.inner.rx_fields.with_mut(|rx_fields_ptr| {\n+            let rx_fields = unsafe { &mut *rx_fields_ptr };\n+            (self.inner.semaphore.is_closed() && rx_fields.list.is_at_tail_position(&self.inner.tx))\n+                || rx_fields.list.is_closed_and_empty(&self.inner.tx)",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1490933313",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6348,
        "pr_file": "tokio/src/sync/mpsc/chan.rs",
        "discussion_id": "1490933313",
        "commented_code": "@@ -241,6 +241,24 @@ impl<T, S: Semaphore> Rx<T, S> {\n         self.inner.notify_rx_closed.notify_waiters();\n     }\n \n+    pub(crate) fn is_closed_and_empty(&mut self) -> bool {\n+        // There two internal states that can represent a closed channel that has no messages\n+        //\n+        //  1. When `close` is called.\n+        //  In this case, the inner semaphore will be closed, and the channel has no\n+        //  outstanding messages if the list is at the tail position.\n+        //\n+        //  2. When all senders are dropped.\n+        //  In this case, the semaphore remains unclosed, and the `index` in the list won't\n+        //  reach the tail position. It is necessary to check the list if the last block is\n+        //  `closed` and has no value available.\n+        self.inner.rx_fields.with_mut(|rx_fields_ptr| {\n+            let rx_fields = unsafe { &mut *rx_fields_ptr };\n+            (self.inner.semaphore.is_closed() && rx_fields.list.is_at_tail_position(&self.inner.tx))\n+                || rx_fields.list.is_closed_and_empty(&self.inner.tx)",
        "comment_created_at": "2024-02-15T12:25:34+00:00",
        "comment_author": "balliegojr",
        "comment_body": "On alternative to this implementation would be to change the `Tx` drop implementation to also close the semaphore, this would simplify the internal state to rely only on the semaphore.\r\n\r\nThe issue with this alternative approach is that is necessary to add a constraint to the struct generic parameter.\r\n\r\n```rust\r\nimpl<T, S: Semaphore> Drop for Tx<T, S> { // <- Tx<T, S: Semaphore>, this would propagate to a lot of places\r\n    fn drop(&mut self) {\r\n        if self.inner.tx_count.fetch_sub(1, AcqRel) != 1 {\r\n            return;\r\n        }\r\n\r\n        // Close the list, which sends a `Close` message\r\n        self.inner.tx.close();\r\n        self.inner.semaphore.close();\r\n\r\n        // Notify the receiver\r\n        self.wake_rx();\r\n    }\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1442059511",
    "pr_number": 6268,
    "pr_file": "tokio/src/sync/notify.rs",
    "created_at": "2024-01-04T17:23:47+00:00",
    "commented_code": "use std::panic::{RefUnwindSafe, UnwindSafe};\n use std::pin::Pin;\n use std::ptr::NonNull;\n-use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, SeqCst};\n+use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, AcqRel, SeqCst};",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1442059511",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6268,
        "pr_file": "tokio/src/sync/notify.rs",
        "discussion_id": "1442059511",
        "commented_code": "@@ -16,7 +16,7 @@ use std::marker::PhantomPinned;\n use std::panic::{RefUnwindSafe, UnwindSafe};\n use std::pin::Pin;\n use std::ptr::NonNull;\n-use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, SeqCst};\n+use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, AcqRel, SeqCst};",
        "comment_created_at": "2024-01-04T17:23:47+00:00",
        "comment_author": "hawkw",
        "comment_body": "nit, take it or leave it: since we now use all `Ordering`s, this import could be simplified to just\n```suggestion\nuse std::sync::atomic::Ordering::{self, *};\n```\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1442070704",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6268,
        "pr_file": "tokio/src/sync/notify.rs",
        "discussion_id": "1442059511",
        "commented_code": "@@ -16,7 +16,7 @@ use std::marker::PhantomPinned;\n use std::panic::{RefUnwindSafe, UnwindSafe};\n use std::pin::Pin;\n use std::ptr::NonNull;\n-use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, SeqCst};\n+use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, AcqRel, SeqCst};",
        "comment_created_at": "2024-01-04T17:35:41+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Wait, does this PR not eliminate all usages of SeqCst?",
        "pr_file_module": null
      },
      {
        "comment_id": "1442418007",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6268,
        "pr_file": "tokio/src/sync/notify.rs",
        "discussion_id": "1442059511",
        "commented_code": "@@ -16,7 +16,7 @@ use std::marker::PhantomPinned;\n use std::panic::{RefUnwindSafe, UnwindSafe};\n use std::pin::Pin;\n use std::ptr::NonNull;\n-use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, SeqCst};\n+use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, AcqRel, SeqCst};",
        "comment_created_at": "2024-01-05T01:24:44+00:00",
        "comment_author": "wang384670111",
        "comment_body": "> Wait, does this PR not eliminate all usages of SeqCst?\r\n\r\nYes, indeed, other parts of this model also use SeqCst, and I believe it's feasible to relax these orderings to Acquire/Release. However, I have not made any modifications to the SeqCst usage in other areas, as these usages do not trigger alerts in the detector(possibly because the call chain does not involve related function calls). If possible, I would like to initially ease it to Acquire/Release and then submit a new pull request.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1442688269",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6268,
        "pr_file": "tokio/src/sync/notify.rs",
        "discussion_id": "1442059511",
        "commented_code": "@@ -16,7 +16,7 @@ use std::marker::PhantomPinned;\n use std::panic::{RefUnwindSafe, UnwindSafe};\n use std::pin::Pin;\n use std::ptr::NonNull;\n-use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, SeqCst};\n+use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, AcqRel, SeqCst};",
        "comment_created_at": "2024-01-05T09:58:05+00:00",
        "comment_author": "Darksonn",
        "comment_body": "I don't know how your detector works, but mixing SeqCst and non-SeqCst orderings is never the right answer. Never.\r\n\r\nLooking over the code, I notice that there are atomics in both the `Notify`, but also the waiters. Before I can accept a PR relaxing any of them, I'm going to have to review the code for whether it currently relies on the SeqCst guarantees to synchronize between those different atomics. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1442972614",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6268,
        "pr_file": "tokio/src/sync/notify.rs",
        "discussion_id": "1442059511",
        "commented_code": "@@ -16,7 +16,7 @@ use std::marker::PhantomPinned;\n use std::panic::{RefUnwindSafe, UnwindSafe};\n use std::pin::Pin;\n use std::ptr::NonNull;\n-use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, SeqCst};\n+use std::sync::atomic::Ordering::{self, Acquire, Relaxed, Release, AcqRel, SeqCst};",
        "comment_created_at": "2024-01-05T14:52:03+00:00",
        "comment_author": "wang384670111",
        "comment_body": "> I don't know how your detector works, but mixing SeqCst and non-SeqCst orderings is never the right answer. Never.\r\n> \r\n> Looking over the code, I notice that there are atomics in both the `Notify`, but also the waiters. Before I can accept a PR relaxing any of them, I'm going to have to review the code for whether it currently relies on the SeqCst guarantees to synchronize between those different atomics.\r\n\r\n\r\nWhat you've mentioned is quite insightful. I've noticed that there are numerous instances of ordering being used improperly within the community. Therefore, my aim is to develop an automated system to detect such issues. Currently, this project is still experimental and undergoing continuous optimization. Regarding the issue you've highlighted, I believe I've pinpointed the root cause. It seems that during the traversal of the call graph, the regular expression I crafted failed to match the relevant atomic operations. This is an aspect I am actively working to resolve. It's important to clarify that this isn't an issue with the detection pattern, but rather a specific challenge I'm addressing\ud83d\udc97.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1459137760",
    "pr_number": 6298,
    "pr_file": "tokio/src/sync/broadcast.rs",
    "created_at": "2024-01-19T14:47:38+00:00",
    "commented_code": "}\n                                 }\n \n-                                if !(*ptr).queued {\n-                                    (*ptr).queued = true;\n+                                // If the waiter is not already queued, enqueue it.\n+                                // Relaxed memory order suffices because we don't need\n+                                // to synchronize with `Recv::drop` here (calling\n+                                // `Receiver::recv_ref` with a waiter implies ownership\n+                                // of the corresponding `Recv`).\n+                                if !(*ptr).queued.swap(true, Relaxed) {",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1459137760",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6298,
        "pr_file": "tokio/src/sync/broadcast.rs",
        "discussion_id": "1459137760",
        "commented_code": "@@ -1104,8 +1107,12 @@ impl<T> Receiver<T> {\n                                     }\n                                 }\n \n-                                if !(*ptr).queued {\n-                                    (*ptr).queued = true;\n+                                // If the waiter is not already queued, enqueue it.\n+                                // Relaxed memory order suffices because we don't need\n+                                // to synchronize with `Recv::drop` here (calling\n+                                // `Receiver::recv_ref` with a waiter implies ownership\n+                                // of the corresponding `Recv`).\n+                                if !(*ptr).queued.swap(true, Relaxed) {",
        "comment_created_at": "2024-01-19T14:47:38+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Here you have exclusive access, so just perform a normal write.",
        "pr_file_module": null
      },
      {
        "comment_id": "1468434718",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6298,
        "pr_file": "tokio/src/sync/broadcast.rs",
        "discussion_id": "1459137760",
        "commented_code": "@@ -1104,8 +1107,12 @@ impl<T> Receiver<T> {\n                                     }\n                                 }\n \n-                                if !(*ptr).queued {\n-                                    (*ptr).queued = true;\n+                                // If the waiter is not already queued, enqueue it.\n+                                // Relaxed memory order suffices because we don't need\n+                                // to synchronize with `Recv::drop` here (calling\n+                                // `Receiver::recv_ref` with a waiter implies ownership\n+                                // of the corresponding `Recv`).\n+                                if !(*ptr).queued.swap(true, Relaxed) {",
        "comment_created_at": "2024-01-27T10:00:44+00:00",
        "comment_author": "vnetserg",
        "comment_body": "It turned out that loom `AtomicBool` does not support `get_mut`, so I resolved to using relaxed load/store.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1453882441",
    "pr_number": 6284,
    "pr_file": "tokio/src/sync/broadcast.rs",
    "created_at": "2024-01-16T19:06:41+00:00",
    "commented_code": "mask: usize,\n \n     /// Tail of the queue. Includes the rx wait list.\n-    tail: Mutex<Tail>,\n+    tail: RwLock<Tail>,",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1453882441",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6284,
        "pr_file": "tokio/src/sync/broadcast.rs",
        "discussion_id": "1453882441",
        "commented_code": "@@ -310,7 +311,7 @@ struct Shared<T> {\n     mask: usize,\n \n     /// Tail of the queue. Includes the rx wait list.\n-    tail: Mutex<Tail>,\n+    tail: RwLock<Tail>,",
        "comment_created_at": "2024-01-16T19:06:41+00:00",
        "comment_author": "carllerche",
        "comment_body": "`RwLock` implementations tend to be heavier than `Mutex`. In this case, it looks like all reads are of numbers. Another option is to make these cells `AtomicUsize` (or `AtomicU64`) and require writers to these cells to hold the `tail` mutex. Reads can do the atomic read directly. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1454638249",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6284,
        "pr_file": "tokio/src/sync/broadcast.rs",
        "discussion_id": "1453882441",
        "commented_code": "@@ -310,7 +311,7 @@ struct Shared<T> {\n     mask: usize,\n \n     /// Tail of the queue. Includes the rx wait list.\n-    tail: Mutex<Tail>,\n+    tail: RwLock<Tail>,",
        "comment_created_at": "2024-01-17T05:44:21+00:00",
        "comment_author": "vnetserg",
        "comment_body": "Are you saying that we could make `Tail` fields atomic? That would spare us the need to take a lock in some situations, but the main contention source is adding waiters to the list, which would still have to be done with a lock.",
        "pr_file_module": null
      }
    ]
  }
]