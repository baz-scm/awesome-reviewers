[
  {
    "discussion_id": "1971481509",
    "pr_number": 7165,
    "pr_file": "tokio-util/src/io/read_arc.rs",
    "created_at": "2025-02-26T12:14:54+00:00",
    "commented_code": "+use std::io;\n+use std::mem::MaybeUninit;\n+use std::sync::Arc;\n+use tokio::io::{AsyncRead, AsyncReadExt};\n+\n+/// Read data from an `AsyncRead` into an `Arc`.\n+///\n+/// This uses `Arc::new_uninit_slice` and reads into the resulting uninitialized `Arc`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # #[tokio::main]\n+/// # async fn main() -> std::io::Result<()> {\n+/// use tokio_util::io::read_exact_arc;\n+///\n+/// let read = tokio::io::repeat(42);\n+///\n+/// let arc = read_exact_arc(read, 4).await?;\n+///\n+/// assert_eq!(&arc[..], &[42; 4]);\n+/// # Ok(())\n+/// # }\n+/// ```\n+pub async fn read_exact_arc<R: AsyncRead>(read: R, len: usize) -> io::Result<Arc<[u8]>> {\n+    tokio::pin!(read);\n+    // TODO(MSRV 1.82): When bumping MSRV, switch to `Arc::new_uninit_slice(len)`. The following is\n+    // equivalent, and generates the same assembly, but works without requiring MSRV 1.82.\n+    let mut arc: Arc<[MaybeUninit<u8>]> = (0..len).map(|_| MaybeUninit::uninit()).collect();\n+    let mut buf = unsafe { Arc::get_mut(&mut arc).unwrap_unchecked() };\n+    while !buf.is_empty() {\n+        if read.read_buf(&mut buf).await? == 0 {\n+            return Err(io::Error::new(io::ErrorKind::UnexpectedEof, \"early eof\"));\n+        }\n+    }\n+    // TODO(MSRV 1.82): When bumping MSRV, switch to `arc.assume_init()`. The following is\n+    // equivalent, and generates the same assembly, but works without requiring MSRV 1.82.\n+    Ok(unsafe { Arc::from_raw(Arc::into_raw(arc) as *const [u8]) })",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1971481509",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7165,
        "pr_file": "tokio-util/src/io/read_arc.rs",
        "discussion_id": "1971481509",
        "commented_code": "@@ -0,0 +1,39 @@\n+use std::io;\n+use std::mem::MaybeUninit;\n+use std::sync::Arc;\n+use tokio::io::{AsyncRead, AsyncReadExt};\n+\n+/// Read data from an `AsyncRead` into an `Arc`.\n+///\n+/// This uses `Arc::new_uninit_slice` and reads into the resulting uninitialized `Arc`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # #[tokio::main]\n+/// # async fn main() -> std::io::Result<()> {\n+/// use tokio_util::io::read_exact_arc;\n+///\n+/// let read = tokio::io::repeat(42);\n+///\n+/// let arc = read_exact_arc(read, 4).await?;\n+///\n+/// assert_eq!(&arc[..], &[42; 4]);\n+/// # Ok(())\n+/// # }\n+/// ```\n+pub async fn read_exact_arc<R: AsyncRead>(read: R, len: usize) -> io::Result<Arc<[u8]>> {\n+    tokio::pin!(read);\n+    // TODO(MSRV 1.82): When bumping MSRV, switch to `Arc::new_uninit_slice(len)`. The following is\n+    // equivalent, and generates the same assembly, but works without requiring MSRV 1.82.\n+    let mut arc: Arc<[MaybeUninit<u8>]> = (0..len).map(|_| MaybeUninit::uninit()).collect();\n+    let mut buf = unsafe { Arc::get_mut(&mut arc).unwrap_unchecked() };\n+    while !buf.is_empty() {\n+        if read.read_buf(&mut buf).await? == 0 {\n+            return Err(io::Error::new(io::ErrorKind::UnexpectedEof, \"early eof\"));\n+        }\n+    }\n+    // TODO(MSRV 1.82): When bumping MSRV, switch to `arc.assume_init()`. The following is\n+    // equivalent, and generates the same assembly, but works without requiring MSRV 1.82.\n+    Ok(unsafe { Arc::from_raw(Arc::into_raw(arc) as *const [u8]) })",
        "comment_created_at": "2025-02-26T12:14:54+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Please include a short safety comment on why each unsafe block is okay.",
        "pr_file_module": null
      },
      {
        "comment_id": "1973495252",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7165,
        "pr_file": "tokio-util/src/io/read_arc.rs",
        "discussion_id": "1971481509",
        "commented_code": "@@ -0,0 +1,39 @@\n+use std::io;\n+use std::mem::MaybeUninit;\n+use std::sync::Arc;\n+use tokio::io::{AsyncRead, AsyncReadExt};\n+\n+/// Read data from an `AsyncRead` into an `Arc`.\n+///\n+/// This uses `Arc::new_uninit_slice` and reads into the resulting uninitialized `Arc`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # #[tokio::main]\n+/// # async fn main() -> std::io::Result<()> {\n+/// use tokio_util::io::read_exact_arc;\n+///\n+/// let read = tokio::io::repeat(42);\n+///\n+/// let arc = read_exact_arc(read, 4).await?;\n+///\n+/// assert_eq!(&arc[..], &[42; 4]);\n+/// # Ok(())\n+/// # }\n+/// ```\n+pub async fn read_exact_arc<R: AsyncRead>(read: R, len: usize) -> io::Result<Arc<[u8]>> {\n+    tokio::pin!(read);\n+    // TODO(MSRV 1.82): When bumping MSRV, switch to `Arc::new_uninit_slice(len)`. The following is\n+    // equivalent, and generates the same assembly, but works without requiring MSRV 1.82.\n+    let mut arc: Arc<[MaybeUninit<u8>]> = (0..len).map(|_| MaybeUninit::uninit()).collect();\n+    let mut buf = unsafe { Arc::get_mut(&mut arc).unwrap_unchecked() };\n+    while !buf.is_empty() {\n+        if read.read_buf(&mut buf).await? == 0 {\n+            return Err(io::Error::new(io::ErrorKind::UnexpectedEof, \"early eof\"));\n+        }\n+    }\n+    // TODO(MSRV 1.82): When bumping MSRV, switch to `arc.assume_init()`. The following is\n+    // equivalent, and generates the same assembly, but works without requiring MSRV 1.82.\n+    Ok(unsafe { Arc::from_raw(Arc::into_raw(arc) as *const [u8]) })",
        "comment_created_at": "2025-02-27T12:36:36+00:00",
        "comment_author": "joshtriplett",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1517542687",
    "pr_number": 6348,
    "pr_file": "tokio/src/sync/mpsc/list.rs",
    "created_at": "2024-03-08T10:34:30+00:00",
    "commented_code": "}\n \n impl<T> Rx<T> {\n+    pub(crate) fn is_empty(&self) -> bool {\n+        unsafe {\n+            let block = self.head.as_ref();\n+            !block.has_value(self.index)\n+        }\n+    }\n+\n+    pub(crate) fn len(&self, tx: &Tx<T>) -> usize {\n+        let tail_position = tx.tail_position.load(Acquire);\n+        let tail = tx.block_tail.load(Acquire);\n+\n+        unsafe {\n+            let tail_block = &mut *tail;\n+\n+            if tail_block.is_closed() {\n+                tail_position - self.index - 1\n+            } else {\n+                tail_position - self.index\n+            }\n+        }",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1517542687",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6348,
        "pr_file": "tokio/src/sync/mpsc/list.rs",
        "discussion_id": "1517542687",
        "commented_code": "@@ -230,6 +230,28 @@ impl<T> fmt::Debug for Tx<T> {\n }\n \n impl<T> Rx<T> {\n+    pub(crate) fn is_empty(&self) -> bool {\n+        unsafe {\n+            let block = self.head.as_ref();\n+            !block.has_value(self.index)\n+        }\n+    }\n+\n+    pub(crate) fn len(&self, tx: &Tx<T>) -> usize {\n+        let tail_position = tx.tail_position.load(Acquire);\n+        let tail = tx.block_tail.load(Acquire);\n+\n+        unsafe {\n+            let tail_block = &mut *tail;\n+\n+            if tail_block.is_closed() {\n+                tail_position - self.index - 1\n+            } else {\n+                tail_position - self.index\n+            }\n+        }",
        "comment_created_at": "2024-03-08T10:34:30+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Please reduce the scope of this unsafe block. You only need it for the `&mut *tail` operation as far as I can tell.\r\n```Rust\r\nlet tail_block = unsafe { &mut *tail };\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1447856620",
    "pr_number": 6152,
    "pr_file": "tokio/src/process/unix/pidfd_reaper.rs",
    "created_at": "2024-01-10T19:27:58+00:00",
    "commented_code": "+use crate::{\n+    io::{interest::Interest, PollEvented},\n+    process::{\n+        imp::{orphan::Wait, OrphanQueue},\n+        kill::Kill,\n+    },\n+    util::error::RUNTIME_SHUTTING_DOWN_ERROR,\n+};\n+\n+use libc::{syscall, SYS_pidfd_open, __errno_location, ENOSYS, PIDFD_NONBLOCK};\n+use mio::{event::Source, unix::SourceFd};\n+use std::{\n+    fs::File,\n+    future::Future,\n+    io,\n+    marker::Unpin,\n+    ops::Deref,\n+    os::unix::io::{AsRawFd, FromRawFd, RawFd},\n+    pin::Pin,\n+    process::ExitStatus,\n+    sync::atomic::{AtomicBool, Ordering::Relaxed},\n+    task::{Context, Poll},\n+};\n+\n+#[derive(Debug)]\n+struct Pidfd {\n+    fd: File,\n+}\n+\n+impl Pidfd {\n+    fn open(pid: u32) -> Option<Pidfd> {\n+        // Store false (0) to reduce executable size\n+        static NO_PIDFD_SUPPORT: AtomicBool = AtomicBool::new(false);\n+\n+        if NO_PIDFD_SUPPORT.load(Relaxed) {\n+            return None;\n+        }\n+\n+        unsafe {\n+            let fd = syscall(SYS_pidfd_open, pid, PIDFD_NONBLOCK);\n+            if fd == -1 {\n+                let errno = *__errno_location();\n+\n+                if errno == ENOSYS {\n+                    NO_PIDFD_SUPPORT.store(true, Relaxed)\n+                }\n+\n+                None\n+            } else {\n+                Some(Pidfd {\n+                    fd: File::from_raw_fd(fd as i32),\n+                })\n+            }\n+        }",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1447856620",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6152,
        "pr_file": "tokio/src/process/unix/pidfd_reaper.rs",
        "discussion_id": "1447856620",
        "commented_code": "@@ -0,0 +1,310 @@\n+use crate::{\n+    io::{interest::Interest, PollEvented},\n+    process::{\n+        imp::{orphan::Wait, OrphanQueue},\n+        kill::Kill,\n+    },\n+    util::error::RUNTIME_SHUTTING_DOWN_ERROR,\n+};\n+\n+use libc::{syscall, SYS_pidfd_open, __errno_location, ENOSYS, PIDFD_NONBLOCK};\n+use mio::{event::Source, unix::SourceFd};\n+use std::{\n+    fs::File,\n+    future::Future,\n+    io,\n+    marker::Unpin,\n+    ops::Deref,\n+    os::unix::io::{AsRawFd, FromRawFd, RawFd},\n+    pin::Pin,\n+    process::ExitStatus,\n+    sync::atomic::{AtomicBool, Ordering::Relaxed},\n+    task::{Context, Poll},\n+};\n+\n+#[derive(Debug)]\n+struct Pidfd {\n+    fd: File,\n+}\n+\n+impl Pidfd {\n+    fn open(pid: u32) -> Option<Pidfd> {\n+        // Store false (0) to reduce executable size\n+        static NO_PIDFD_SUPPORT: AtomicBool = AtomicBool::new(false);\n+\n+        if NO_PIDFD_SUPPORT.load(Relaxed) {\n+            return None;\n+        }\n+\n+        unsafe {\n+            let fd = syscall(SYS_pidfd_open, pid, PIDFD_NONBLOCK);\n+            if fd == -1 {\n+                let errno = *__errno_location();\n+\n+                if errno == ENOSYS {\n+                    NO_PIDFD_SUPPORT.store(true, Relaxed)\n+                }\n+\n+                None\n+            } else {\n+                Some(Pidfd {\n+                    fd: File::from_raw_fd(fd as i32),\n+                })\n+            }\n+        }",
        "comment_created_at": "2024-01-10T19:27:58+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Generally, it is preferred to have a separate unsafe block for each unsafe operation, and to annotate each block with a `// SAFETY:` comment justifying its correctness.",
        "pr_file_module": null
      },
      {
        "comment_id": "1448045910",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6152,
        "pr_file": "tokio/src/process/unix/pidfd_reaper.rs",
        "discussion_id": "1447856620",
        "commented_code": "@@ -0,0 +1,310 @@\n+use crate::{\n+    io::{interest::Interest, PollEvented},\n+    process::{\n+        imp::{orphan::Wait, OrphanQueue},\n+        kill::Kill,\n+    },\n+    util::error::RUNTIME_SHUTTING_DOWN_ERROR,\n+};\n+\n+use libc::{syscall, SYS_pidfd_open, __errno_location, ENOSYS, PIDFD_NONBLOCK};\n+use mio::{event::Source, unix::SourceFd};\n+use std::{\n+    fs::File,\n+    future::Future,\n+    io,\n+    marker::Unpin,\n+    ops::Deref,\n+    os::unix::io::{AsRawFd, FromRawFd, RawFd},\n+    pin::Pin,\n+    process::ExitStatus,\n+    sync::atomic::{AtomicBool, Ordering::Relaxed},\n+    task::{Context, Poll},\n+};\n+\n+#[derive(Debug)]\n+struct Pidfd {\n+    fd: File,\n+}\n+\n+impl Pidfd {\n+    fn open(pid: u32) -> Option<Pidfd> {\n+        // Store false (0) to reduce executable size\n+        static NO_PIDFD_SUPPORT: AtomicBool = AtomicBool::new(false);\n+\n+        if NO_PIDFD_SUPPORT.load(Relaxed) {\n+            return None;\n+        }\n+\n+        unsafe {\n+            let fd = syscall(SYS_pidfd_open, pid, PIDFD_NONBLOCK);\n+            if fd == -1 {\n+                let errno = *__errno_location();\n+\n+                if errno == ENOSYS {\n+                    NO_PIDFD_SUPPORT.store(true, Relaxed)\n+                }\n+\n+                None\n+            } else {\n+                Some(Pidfd {\n+                    fd: File::from_raw_fd(fd as i32),\n+                })\n+            }\n+        }",
        "comment_created_at": "2024-01-10T22:14:13+00:00",
        "comment_author": "NobodyXu",
        "comment_body": "Thanks!\r\n\r\nI've reduced the `unsafe {}` block to each function calls and also replaced use of `__errno_location()` with `io::Error::last_os_error().raw_os_error().unwrap()`",
        "pr_file_module": null
      }
    ]
  }
]