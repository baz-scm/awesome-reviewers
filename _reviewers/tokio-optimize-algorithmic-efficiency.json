[
  {
    "discussion_id": "1308436191",
    "pr_number": 5958,
    "pr_file": "tokio/src/io/blocking.rs",
    "created_at": "2023-08-29T08:49:10+00:00",
    "commented_code": "self.buf.truncate(0);\n             ret\n         }\n+\n+        pub(crate) fn copy_from_bufs(&mut self, bufs: &[io::IoSlice<'_>]) -> usize {\n+            assert!(self.is_empty());\n+\n+            let n = bufs.iter().map(|b| b.len()).sum::<usize>().min(MAX_BUF);",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1308436191",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 5958,
        "pr_file": "tokio/src/io/blocking.rs",
        "discussion_id": "1308436191",
        "commented_code": "@@ -276,5 +276,24 @@ cfg_fs! {\n             self.buf.truncate(0);\n             ret\n         }\n+\n+        pub(crate) fn copy_from_bufs(&mut self, bufs: &[io::IoSlice<'_>]) -> usize {\n+            assert!(self.is_empty());\n+\n+            let n = bufs.iter().map(|b| b.len()).sum::<usize>().min(MAX_BUF);",
        "comment_created_at": "2023-08-29T08:49:10+00:00",
        "comment_author": "Darksonn",
        "comment_body": "This iterates all of the buffers every time, even if we only write a few of them. If the buffers are very long and this is called in a loop, that gives quadratic performance.\r\n\r\nWe should be able to embed this logic inside the for loop instead to avoid that.",
        "pr_file_module": null
      },
      {
        "comment_id": "1308484295",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 5958,
        "pr_file": "tokio/src/io/blocking.rs",
        "discussion_id": "1308436191",
        "commented_code": "@@ -276,5 +276,24 @@ cfg_fs! {\n             self.buf.truncate(0);\n             ret\n         }\n+\n+        pub(crate) fn copy_from_bufs(&mut self, bufs: &[io::IoSlice<'_>]) -> usize {\n+            assert!(self.is_empty());\n+\n+            let n = bufs.iter().map(|b| b.len()).sum::<usize>().min(MAX_BUF);",
        "comment_created_at": "2023-08-29T09:27:53+00:00",
        "comment_author": "maminrayej",
        "comment_body": "You mean `b.len()` is `O(n)` and causes the `bufs.iter()` to be `O(n^2)`? I thought since it's a `Deref` to `&[u8]`, it's `O(1)`.\r\nI've provided an alternate implementation that doesn't use `bufs.iter()`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1308547194",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 5958,
        "pr_file": "tokio/src/io/blocking.rs",
        "discussion_id": "1308436191",
        "commented_code": "@@ -276,5 +276,24 @@ cfg_fs! {\n             self.buf.truncate(0);\n             ret\n         }\n+\n+        pub(crate) fn copy_from_bufs(&mut self, bufs: &[io::IoSlice<'_>]) -> usize {\n+            assert!(self.is_empty());\n+\n+            let n = bufs.iter().map(|b| b.len()).sum::<usize>().min(MAX_BUF);",
        "comment_created_at": "2023-08-29T10:18:57+00:00",
        "comment_author": "Darksonn",
        "comment_body": "No, `b.len()` is constant time. Instead, it's O(n) in the length of `bufs`, which you iterate over.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1536609325",
    "pr_number": 6414,
    "pr_file": "tokio-util/src/codec/length_delimited.rs",
    "created_at": "2024-03-23T10:21:37+00:00",
    "commented_code": "self.num_skip\n             .unwrap_or(self.length_field_offset + self.length_field_len)\n     }\n+\n+    fn adjust_max_frame_len(&mut self) {\n+        // This function is basically `std::u64::saturating_add_signed`. Since it\n+        // requires MSRV 1.66, its implementation is copied here.\n+        //\n+        // TODO: use the method from std when MSRV becomes >= 1.66\n+        fn saturating_add_signed(num: u64, rhs: i64) -> u64 {\n+            let (res, overflow) = num.overflowing_add(rhs as u64);\n+            if overflow == (rhs < 0) {\n+                res\n+            } else if overflow {\n+                u64::MAX\n+            } else {\n+                0\n+            }\n+        }\n+\n+        // Calculate the maximum number that can be represented using `length_field_len` bytes.\n+        let max_number = 2u64.saturating_pow((8 * self.length_field_len - 1) as u32);\n+        // In order to prevent an overflow, we do the last part manually.\n+        let max_number = max_number + (max_number - 1);",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1536609325",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6414,
        "pr_file": "tokio-util/src/codec/length_delimited.rs",
        "discussion_id": "1536609325",
        "commented_code": "@@ -1018,6 +1026,34 @@ impl Builder {\n         self.num_skip\n             .unwrap_or(self.length_field_offset + self.length_field_len)\n     }\n+\n+    fn adjust_max_frame_len(&mut self) {\n+        // This function is basically `std::u64::saturating_add_signed`. Since it\n+        // requires MSRV 1.66, its implementation is copied here.\n+        //\n+        // TODO: use the method from std when MSRV becomes >= 1.66\n+        fn saturating_add_signed(num: u64, rhs: i64) -> u64 {\n+            let (res, overflow) = num.overflowing_add(rhs as u64);\n+            if overflow == (rhs < 0) {\n+                res\n+            } else if overflow {\n+                u64::MAX\n+            } else {\n+                0\n+            }\n+        }\n+\n+        // Calculate the maximum number that can be represented using `length_field_len` bytes.\n+        let max_number = 2u64.saturating_pow((8 * self.length_field_len - 1) as u32);\n+        // In order to prevent an overflow, we do the last part manually.\n+        let max_number = max_number + (max_number - 1);",
        "comment_created_at": "2024-03-23T10:21:37+00:00",
        "comment_author": "Darksonn",
        "comment_body": "I would expect that `saturating_pow` is rather expensive compared to a shift.\r\n```suggestion\r\n        let max_number = match 1.checked_shl(8 * self.length_field_len) {\r\n            Some(shl) => shl - 1,\r\n            None => u64::MAX,\r\n        };\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2039828485",
    "pr_number": 7249,
    "pr_file": "tokio/src/process/unix/mod.rs",
    "created_at": "2025-04-11T15:47:22+00:00",
    "commented_code": "}\n }\n \n-pub(crate) fn spawn_child(cmd: &mut std::process::Command) -> io::Result<SpawnedChild> {\n-    let mut child = cmd.spawn()?;\n+pub(crate) fn spawn_child_with(\n+    cmd: &mut StdCommand,\n+    with: impl Fn(&mut StdCommand) -> io::Result<StdChild>,\n+) -> io::Result<SpawnedChild> {\n+    let mut child = with(cmd)?;",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "2039828485",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7249,
        "pr_file": "tokio/src/process/unix/mod.rs",
        "discussion_id": "2039828485",
        "commented_code": "@@ -115,8 +115,11 @@ impl fmt::Debug for Child {\n     }\n }\n \n-pub(crate) fn spawn_child(cmd: &mut std::process::Command) -> io::Result<SpawnedChild> {\n-    let mut child = cmd.spawn()?;\n+pub(crate) fn spawn_child_with(\n+    cmd: &mut StdCommand,\n+    with: impl Fn(&mut StdCommand) -> io::Result<StdChild>,\n+) -> io::Result<SpawnedChild> {\n+    let mut child = with(cmd)?;",
        "comment_created_at": "2025-04-11T15:47:22+00:00",
        "comment_author": "ipetkov",
        "comment_body": "Might be worth reworking this slightly to avoid monomorphization bloat (basically the entire rest of the function body does not need to be re-monormorphized for every unique `with` that is passed in):\r\n\r\nSomething like:\r\n\r\n```rust\r\npub(crate) fn spawn_child_with(\r\n    cmd: &mut StdCommand,\r\n    with: impl Fn(&mut StdCommand) -> io::Result<StdChild>,\r\n) -> io::Result<SpawnedChild> {\r\n    spawn_child(&mut with(cmd)?)\r\n}\r\n\r\nfn spawn_child(cmd: &mut StdCommand) -> io::Result<SpawnedChild> {\r\n  // ...\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2040057980",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7249,
        "pr_file": "tokio/src/process/unix/mod.rs",
        "discussion_id": "2039828485",
        "commented_code": "@@ -115,8 +115,11 @@ impl fmt::Debug for Child {\n     }\n }\n \n-pub(crate) fn spawn_child(cmd: &mut std::process::Command) -> io::Result<SpawnedChild> {\n-    let mut child = cmd.spawn()?;\n+pub(crate) fn spawn_child_with(\n+    cmd: &mut StdCommand,\n+    with: impl Fn(&mut StdCommand) -> io::Result<StdChild>,\n+) -> io::Result<SpawnedChild> {\n+    let mut child = with(cmd)?;",
        "comment_created_at": "2025-04-11T18:04:36+00:00",
        "comment_author": "PaulDance",
        "comment_body": "Here, you probably meant that the helper function takes an `std::process::Child` in since `with: impl Fn(&mut StdCommand) -> io::Result<StdChild>`, right? This is what I've used in the proposed update.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1979233167",
    "pr_number": 7193,
    "pr_file": "tokio/src/time/interval.rs",
    "created_at": "2025-03-04T11:25:45+00:00",
    "commented_code": "// However, if a tick took excessively long and we are now behind,\n         // schedule the next tick according to how the user specified with\n         // `MissedTickBehavior`\n-        let next = if now > timeout + Duration::from_millis(5) {\n+\n+        let next = if now\n+            > timeout\n+                .checked_add(Duration::from_millis(5))\n+                .unwrap_or_else(Instant::far_future)\n+        {",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1979233167",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7193,
        "pr_file": "tokio/src/time/interval.rs",
        "discussion_id": "1979233167",
        "commented_code": "@@ -475,7 +475,12 @@ impl Interval {\n         // However, if a tick took excessively long and we are now behind,\n         // schedule the next tick according to how the user specified with\n         // `MissedTickBehavior`\n-        let next = if now > timeout + Duration::from_millis(5) {\n+\n+        let next = if now\n+            > timeout\n+                .checked_add(Duration::from_millis(5))\n+                .unwrap_or_else(Instant::far_future)\n+        {",
        "comment_created_at": "2025-03-04T11:25:45+00:00",
        "comment_author": "Darksonn",
        "comment_body": "I think the better way to check this is to use this:\r\n```rs\r\nnow.saturating_duration_since(timeout) > Duration::from_millis(5)\r\n```",
        "pr_file_module": null
      }
    ]
  }
]