[
  {
    "discussion_id": "1971481069",
    "pr_number": 7165,
    "pr_file": "tokio-util/src/io/read_arc.rs",
    "created_at": "2025-02-26T12:14:33+00:00",
    "commented_code": "+use std::io;\n+use std::mem::MaybeUninit;\n+use std::sync::Arc;\n+use tokio::io::{AsyncRead, AsyncReadExt};\n+\n+/// Read data from an `AsyncRead` into an `Arc`.\n+///\n+/// This uses `Arc::new_uninit_slice` and reads into the resulting uninitialized `Arc`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # #[tokio::main]\n+/// # async fn main() -> std::io::Result<()> {\n+/// use tokio_util::io::read_exact_arc;\n+///\n+/// let read = tokio::io::repeat(42);\n+///\n+/// let arc = read_exact_arc(read, 4).await?;\n+///\n+/// assert_eq!(&arc[..], &[42; 4]);\n+/// # Ok(())\n+/// # }\n+/// ```\n+pub async fn read_exact_arc<R: AsyncRead>(read: R, len: usize) -> io::Result<Arc<[u8]>> {\n+    tokio::pin!(read);\n+    // TODO(MSRV 1.82): When bumping MSRV, switch to `Arc::new_uninit_slice(len)`. The following is\n+    // equivalent, and generates the same assembly, but works without requiring MSRV 1.82.\n+    let mut arc: Arc<[MaybeUninit<u8>]> = (0..len).map(|_| MaybeUninit::uninit()).collect();\n+    let mut buf = unsafe { Arc::get_mut(&mut arc).unwrap_unchecked() };",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1971481069",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7165,
        "pr_file": "tokio-util/src/io/read_arc.rs",
        "discussion_id": "1971481069",
        "commented_code": "@@ -0,0 +1,39 @@\n+use std::io;\n+use std::mem::MaybeUninit;\n+use std::sync::Arc;\n+use tokio::io::{AsyncRead, AsyncReadExt};\n+\n+/// Read data from an `AsyncRead` into an `Arc`.\n+///\n+/// This uses `Arc::new_uninit_slice` and reads into the resulting uninitialized `Arc`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # #[tokio::main]\n+/// # async fn main() -> std::io::Result<()> {\n+/// use tokio_util::io::read_exact_arc;\n+///\n+/// let read = tokio::io::repeat(42);\n+///\n+/// let arc = read_exact_arc(read, 4).await?;\n+///\n+/// assert_eq!(&arc[..], &[42; 4]);\n+/// # Ok(())\n+/// # }\n+/// ```\n+pub async fn read_exact_arc<R: AsyncRead>(read: R, len: usize) -> io::Result<Arc<[u8]>> {\n+    tokio::pin!(read);\n+    // TODO(MSRV 1.82): When bumping MSRV, switch to `Arc::new_uninit_slice(len)`. The following is\n+    // equivalent, and generates the same assembly, but works without requiring MSRV 1.82.\n+    let mut arc: Arc<[MaybeUninit<u8>]> = (0..len).map(|_| MaybeUninit::uninit()).collect();\n+    let mut buf = unsafe { Arc::get_mut(&mut arc).unwrap_unchecked() };",
        "comment_created_at": "2025-02-26T12:14:33+00:00",
        "comment_author": "Darksonn",
        "comment_body": "The intent of this `unwrap_unchecked()` is to access the memory for free, but `get_mut` has a bunch of logic to lock the weak count and so on. If we actually want to access the memory without checks, we should go through `into_raw`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1973497593",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7165,
        "pr_file": "tokio-util/src/io/read_arc.rs",
        "discussion_id": "1971481069",
        "commented_code": "@@ -0,0 +1,39 @@\n+use std::io;\n+use std::mem::MaybeUninit;\n+use std::sync::Arc;\n+use tokio::io::{AsyncRead, AsyncReadExt};\n+\n+/// Read data from an `AsyncRead` into an `Arc`.\n+///\n+/// This uses `Arc::new_uninit_slice` and reads into the resulting uninitialized `Arc`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # #[tokio::main]\n+/// # async fn main() -> std::io::Result<()> {\n+/// use tokio_util::io::read_exact_arc;\n+///\n+/// let read = tokio::io::repeat(42);\n+///\n+/// let arc = read_exact_arc(read, 4).await?;\n+///\n+/// assert_eq!(&arc[..], &[42; 4]);\n+/// # Ok(())\n+/// # }\n+/// ```\n+pub async fn read_exact_arc<R: AsyncRead>(read: R, len: usize) -> io::Result<Arc<[u8]>> {\n+    tokio::pin!(read);\n+    // TODO(MSRV 1.82): When bumping MSRV, switch to `Arc::new_uninit_slice(len)`. The following is\n+    // equivalent, and generates the same assembly, but works without requiring MSRV 1.82.\n+    let mut arc: Arc<[MaybeUninit<u8>]> = (0..len).map(|_| MaybeUninit::uninit()).collect();\n+    let mut buf = unsafe { Arc::get_mut(&mut arc).unwrap_unchecked() };",
        "comment_created_at": "2025-02-27T12:37:17+00:00",
        "comment_author": "joshtriplett",
        "comment_body": "I switched this to use `as_ptr`, which is likewise free. This leaves the memory owned by the `Arc` so we don't have to carefully put it *back* into an `Arc` to drop it on the error path.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1335464824",
    "pr_number": 6010,
    "pr_file": "tokio/src/sync/mpsc/chan.rs",
    "created_at": "2023-09-25T07:02:18+00:00",
    "commented_code": "})\n     }\n \n+    /// Receives values into `buffer` up to its capacity\n+    ///\n+    /// If the buffer initially has 0 capacity, reserves `super::BLOCK_CAP` elements\n+    pub(crate) fn recv_many(&mut self, cx: &mut Context<'_>, buffer: &mut Vec<T>) -> Poll<usize> {\n+        use super::block::Read;\n+        if buffer.capacity() == 0 {\n+            buffer.reserve(super::BLOCK_CAP);\n+        }\n+        buffer.clear();",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1335464824",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6010,
        "pr_file": "tokio/src/sync/mpsc/chan.rs",
        "discussion_id": "1335464824",
        "commented_code": "@@ -293,6 +295,79 @@ impl<T, S: Semaphore> Rx<T, S> {\n         })\n     }\n \n+    /// Receives values into `buffer` up to its capacity\n+    ///\n+    /// If the buffer initially has 0 capacity, reserves `super::BLOCK_CAP` elements\n+    pub(crate) fn recv_many(&mut self, cx: &mut Context<'_>, buffer: &mut Vec<T>) -> Poll<usize> {\n+        use super::block::Read;\n+        if buffer.capacity() == 0 {\n+            buffer.reserve(super::BLOCK_CAP);\n+        }\n+        buffer.clear();",
        "comment_created_at": "2023-09-25T07:02:18+00:00",
        "comment_author": "Darksonn",
        "comment_body": "I don't think we should clear the buffer. That's up to the user. I think it's better to support appending to the vector if the user wants that.",
        "pr_file_module": null
      },
      {
        "comment_id": "1336388249",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6010,
        "pr_file": "tokio/src/sync/mpsc/chan.rs",
        "discussion_id": "1335464824",
        "commented_code": "@@ -293,6 +295,79 @@ impl<T, S: Semaphore> Rx<T, S> {\n         })\n     }\n \n+    /// Receives values into `buffer` up to its capacity\n+    ///\n+    /// If the buffer initially has 0 capacity, reserves `super::BLOCK_CAP` elements\n+    pub(crate) fn recv_many(&mut self, cx: &mut Context<'_>, buffer: &mut Vec<T>) -> Poll<usize> {\n+        use super::block::Read;\n+        if buffer.capacity() == 0 {\n+            buffer.reserve(super::BLOCK_CAP);\n+        }\n+        buffer.clear();",
        "comment_created_at": "2023-09-25T21:05:07+00:00",
        "comment_author": "aschweig",
        "comment_body": "There is a clear performance case to be made; particularly if this avoids copying elements in the caller.\r\n\r\nCan you suggest the behavior if the buffer has already hit capacity at the time of the `recv_many` call?  `assert!(buffer.capacity() > buffer.len());` -- or `return Pending;` -- if there is a message that cannot be retrieved?\r\n\r\nAlong these lines, it may also make sense to eliminate `buffer.reserve(super::BLOCK_CAP);` -- I had included that behavior to make `recv_many` unfailing, but with this change the method can fail when the buffer's _full_ (len = capacity).  A zero-length buffer is -- in this sense -- always _full_.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1338305709",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6010,
        "pr_file": "tokio/src/sync/mpsc/chan.rs",
        "discussion_id": "1335464824",
        "commented_code": "@@ -293,6 +295,79 @@ impl<T, S: Semaphore> Rx<T, S> {\n         })\n     }\n \n+    /// Receives values into `buffer` up to its capacity\n+    ///\n+    /// If the buffer initially has 0 capacity, reserves `super::BLOCK_CAP` elements\n+    pub(crate) fn recv_many(&mut self, cx: &mut Context<'_>, buffer: &mut Vec<T>) -> Poll<usize> {\n+        use super::block::Read;\n+        if buffer.capacity() == 0 {\n+            buffer.reserve(super::BLOCK_CAP);\n+        }\n+        buffer.clear();",
        "comment_created_at": "2023-09-27T09:09:25+00:00",
        "comment_author": "Darksonn",
        "comment_body": "There are two options that make sense to me:\r\n\r\n * Add a third argument that specifies the maximum number of elements to add to the vector. In this case, the capacity is irrelevant, and we will resize the buffer if necessary.\r\n * Or use the capacity like this:\r\n\r\n```rs\r\nif buffer.len() == buffer.capacity() {\r\n    buffer.reserve(super::BLOCK_CAP);\r\n}\r\nlet max_number_added = buffer.capacity() - buffer.len();\r\n```\r\n\r\nIn either case, I prefer that we do not clear the buffer.",
        "pr_file_module": null
      },
      {
        "comment_id": "1341909794",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6010,
        "pr_file": "tokio/src/sync/mpsc/chan.rs",
        "discussion_id": "1335464824",
        "commented_code": "@@ -293,6 +295,79 @@ impl<T, S: Semaphore> Rx<T, S> {\n         })\n     }\n \n+    /// Receives values into `buffer` up to its capacity\n+    ///\n+    /// If the buffer initially has 0 capacity, reserves `super::BLOCK_CAP` elements\n+    pub(crate) fn recv_many(&mut self, cx: &mut Context<'_>, buffer: &mut Vec<T>) -> Poll<usize> {\n+        use super::block::Read;\n+        if buffer.capacity() == 0 {\n+            buffer.reserve(super::BLOCK_CAP);\n+        }\n+        buffer.clear();",
        "comment_created_at": "2023-09-30T04:41:25+00:00",
        "comment_author": "aschweig",
        "comment_body": "I adopted the second approach in the latest push.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1342145187",
    "pr_number": 6010,
    "pr_file": "tokio/src/sync/mpsc/bounded.rs",
    "created_at": "2023-10-01T14:36:33+00:00",
    "commented_code": "poll_fn(|cx| self.chan.recv(cx)).await\n     }\n \n+    /// Receives the next values for this receiver and extends `buffer`.\n+    ///\n+    /// This method returns the number of values added to `buffer`.\n+    ///\n+    /// If there are no messages in the channel's queue, but the channel has\n+    /// not yet been closed, this method will sleep until a message is sent or\n+    /// the channel is closed.  Note that if [`close`] is called, but there are\n+    /// still outstanding [`Permits`] from before it was closed, the channel is\n+    /// not considered closed by `recv` until the permits are released.\n+    ///\n+    /// This method will never return 0 unless the channel has been closed and\n+    /// there are no remaining messages in the channel's queue. This indicates\n+    /// that no further values can ever be received from this `Receiver`. The\n+    /// channel is closed when all senders have been dropped, or when [`close`]\n+    /// is called.\n+    ///\n+    /// If at the time of the call `buffer` has unused capacity,\n+    /// `recv_many` extends the buffer with no more elements than\n+    /// its unused capacity. Should `buffer` have no initial unused\n+    /// capacity, additional elements are first reserved.",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1342145187",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6010,
        "pr_file": "tokio/src/sync/mpsc/bounded.rs",
        "discussion_id": "1342145187",
        "commented_code": "@@ -230,6 +230,74 @@ impl<T> Receiver<T> {\n         poll_fn(|cx| self.chan.recv(cx)).await\n     }\n \n+    /// Receives the next values for this receiver and extends `buffer`.\n+    ///\n+    /// This method returns the number of values added to `buffer`.\n+    ///\n+    /// If there are no messages in the channel's queue, but the channel has\n+    /// not yet been closed, this method will sleep until a message is sent or\n+    /// the channel is closed.  Note that if [`close`] is called, but there are\n+    /// still outstanding [`Permits`] from before it was closed, the channel is\n+    /// not considered closed by `recv` until the permits are released.\n+    ///\n+    /// This method will never return 0 unless the channel has been closed and\n+    /// there are no remaining messages in the channel's queue. This indicates\n+    /// that no further values can ever be received from this `Receiver`. The\n+    /// channel is closed when all senders have been dropped, or when [`close`]\n+    /// is called.\n+    ///\n+    /// If at the time of the call `buffer` has unused capacity,\n+    /// `recv_many` extends the buffer with no more elements than\n+    /// its unused capacity. Should `buffer` have no initial unused\n+    /// capacity, additional elements are first reserved.",
        "comment_created_at": "2023-10-01T14:36:33+00:00",
        "comment_author": "Darksonn",
        "comment_body": "I was looking at this paragraph, and I think it could be improved like this:\r\n```suggestion\r\n    /// If `buffer` has unused capacity, then this call will not reserve\r\n    /// additional space in `buffer`. This means that the maximum number of\r\n    /// received messages is `buffer.capacity() - buffer.len()`. However, if\r\n    /// the capacity is equal to the length, then this call will increase the\r\n    /// capacity to make space for additional elements.\r\n```\r\nThis actually raises a question: Perhaps it makes sense to only reserve space when we return a message? This way, we don't consume extra memory until a message arrives, and if the channel gets closed, we don't reserve any space.\r\n\r\nWhat do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1342160689",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6010,
        "pr_file": "tokio/src/sync/mpsc/bounded.rs",
        "discussion_id": "1342145187",
        "commented_code": "@@ -230,6 +230,74 @@ impl<T> Receiver<T> {\n         poll_fn(|cx| self.chan.recv(cx)).await\n     }\n \n+    /// Receives the next values for this receiver and extends `buffer`.\n+    ///\n+    /// This method returns the number of values added to `buffer`.\n+    ///\n+    /// If there are no messages in the channel's queue, but the channel has\n+    /// not yet been closed, this method will sleep until a message is sent or\n+    /// the channel is closed.  Note that if [`close`] is called, but there are\n+    /// still outstanding [`Permits`] from before it was closed, the channel is\n+    /// not considered closed by `recv` until the permits are released.\n+    ///\n+    /// This method will never return 0 unless the channel has been closed and\n+    /// there are no remaining messages in the channel's queue. This indicates\n+    /// that no further values can ever be received from this `Receiver`. The\n+    /// channel is closed when all senders have been dropped, or when [`close`]\n+    /// is called.\n+    ///\n+    /// If at the time of the call `buffer` has unused capacity,\n+    /// `recv_many` extends the buffer with no more elements than\n+    /// its unused capacity. Should `buffer` have no initial unused\n+    /// capacity, additional elements are first reserved.",
        "comment_created_at": "2023-10-01T16:48:13+00:00",
        "comment_author": "aschweig",
        "comment_body": "I like your language here better.\r\n\r\nI also like the idea of not allocating memory unless needed.  If the channels are very lightweight perhaps there are often created and a finite number of messages sent and then closed.  Why force the caller to always allocate one more message than is actually sent?\r\n\r\nIn chan.rs, `recv_many`:\r\n```\r\nlet mut insufficient_capacity = buffer.capacity() == buffer.len();\r\n...\r\n                () => {\r\n                    while (buffer.len() < buffer.capacity() || insufficient_capacity) {\r\n                        match rx_fields.list.pop(&self.inner.tx) {\r\n                            Some(Read::Value(value)) => {\r\n                                if insufficient_capacity {\r\n                                    buffer.reserve(super::BLOCK_CAP);\r\n                                    insufficient_capacity = false;\r\n                                }\r\n                                buffer.push(value);\r\n                            }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1342162218",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6010,
        "pr_file": "tokio/src/sync/mpsc/bounded.rs",
        "discussion_id": "1342145187",
        "commented_code": "@@ -230,6 +230,74 @@ impl<T> Receiver<T> {\n         poll_fn(|cx| self.chan.recv(cx)).await\n     }\n \n+    /// Receives the next values for this receiver and extends `buffer`.\n+    ///\n+    /// This method returns the number of values added to `buffer`.\n+    ///\n+    /// If there are no messages in the channel's queue, but the channel has\n+    /// not yet been closed, this method will sleep until a message is sent or\n+    /// the channel is closed.  Note that if [`close`] is called, but there are\n+    /// still outstanding [`Permits`] from before it was closed, the channel is\n+    /// not considered closed by `recv` until the permits are released.\n+    ///\n+    /// This method will never return 0 unless the channel has been closed and\n+    /// there are no remaining messages in the channel's queue. This indicates\n+    /// that no further values can ever be received from this `Receiver`. The\n+    /// channel is closed when all senders have been dropped, or when [`close`]\n+    /// is called.\n+    ///\n+    /// If at the time of the call `buffer` has unused capacity,\n+    /// `recv_many` extends the buffer with no more elements than\n+    /// its unused capacity. Should `buffer` have no initial unused\n+    /// capacity, additional elements are first reserved.",
        "comment_created_at": "2023-10-01T17:02:30+00:00",
        "comment_author": "aschweig",
        "comment_body": "Does it make sense to urge users to manage the buffer's capacity outside `recv_many`?\r\ne.g.,\r\n\r\nIf `buffer` has unused capacity, then this call will not reserve\r\nadditional space in `buffer`. This means that the maximum number of\r\nreceived messages is `buffer.capacity() - buffer.len()`.  \r\nEfficient client code should ensure `buffer` has unused capacity,\r\nbut if the capacity is equal to the length and there is at least one message\r\nin the channel's queue, then this call will _conservatively_ increase the capacity\r\nto make space for additional elements.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1864269792",
    "pr_number": 6975,
    "pr_file": "tokio/src/runtime/dump.rs",
    "created_at": "2024-11-30T14:26:36+00:00",
    "commented_code": "trace: Trace,\n }\n \n+/// A backtrace symbol. This is similar to [backtrace::BacktraceSymbol],\n+/// but is a separate struct to avoid public dependency issues.\n+///\n+/// This struct is guaranteed to be pure data and operations involving\n+/// it will not call platform functions that take an unpredictable amount\n+/// of time to finish.\n+#[derive(Clone, Debug)]\n+pub struct BacktraceSymbol {\n+    name: Option<Vec<u8>>,\n+    name_demangled: Option<String>,",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1864269792",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6975,
        "pr_file": "tokio/src/runtime/dump.rs",
        "discussion_id": "1864269792",
        "commented_code": "@@ -30,14 +30,167 @@ pub struct Task {\n     trace: Trace,\n }\n \n+/// A backtrace symbol. This is similar to [backtrace::BacktraceSymbol],\n+/// but is a separate struct to avoid public dependency issues.\n+///\n+/// This struct is guaranteed to be pure data and operations involving\n+/// it will not call platform functions that take an unpredictable amount\n+/// of time to finish.\n+#[derive(Clone, Debug)]\n+pub struct BacktraceSymbol {\n+    name: Option<Vec<u8>>,\n+    name_demangled: Option<String>,",
        "comment_created_at": "2024-11-30T14:26:36+00:00",
        "comment_author": "mox692",
        "comment_body": "I think a boxed slice would be enough here.\r\n\r\n```suggestion\r\n    name: Option<Box<[u8]>>,\r\n    name_demangled: Option<Box<str>>,\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1721199507",
    "pr_number": 6784,
    "pr_file": "tokio/src/task/join_set.rs",
    "created_at": "2024-08-19T04:29:43+00:00",
    "commented_code": "while self.join_next().await.is_some() {}\n     }\n \n+    /// Awaits the completion of all tasks on this `JoinSet`, returning a Vector of their results.\n+    ///\n+    /// If any task on this `JoinSet` errors or panics, this will panic and cancel all\n+    /// tasks on this `JoinSet`.\n+    ///\n+    /// For specific error handling of individual tasks, you should call `join_next`\n+    /// in a loop with your desired handling.\n+    pub async fn join_all(mut self) -> Vec<T> {\n+        let mut output = Vec::new();",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1721199507",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6784,
        "pr_file": "tokio/src/task/join_set.rs",
        "discussion_id": "1721199507",
        "commented_code": "@@ -374,6 +374,26 @@ impl<T: 'static> JoinSet<T> {\n         while self.join_next().await.is_some() {}\n     }\n \n+    /// Awaits the completion of all tasks on this `JoinSet`, returning a Vector of their results.\n+    ///\n+    /// If any task on this `JoinSet` errors or panics, this will panic and cancel all\n+    /// tasks on this `JoinSet`.\n+    ///\n+    /// For specific error handling of individual tasks, you should call `join_next`\n+    /// in a loop with your desired handling.\n+    pub async fn join_all(mut self) -> Vec<T> {\n+        let mut output = Vec::new();",
        "comment_created_at": "2024-08-19T04:29:43+00:00",
        "comment_author": "mox692",
        "comment_body": "```suggestion\r\n        let mut output = Vec::with_capacity(self.len());\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1577713267",
    "pr_number": 6512,
    "pr_file": "tokio/src/time/sleep.rs",
    "created_at": "2024-04-24T11:14:32+00:00",
    "commented_code": "#[must_use = \"futures do nothing unless you `.await` or poll them\"]\n     pub struct Sleep {\n         inner: Inner,\n-\n+        deadline : Instant,\n+        handle: scheduler::Handle,\n         // The link between the `Sleep` instance and the timer that drives it.\n         #[pin]\n-        entry: TimerEntry,\n+        entry: Option<TimerEntry>,\n     }",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1577713267",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6512,
        "pr_file": "tokio/src/time/sleep.rs",
        "discussion_id": "1577713267",
        "commented_code": "@@ -226,10 +227,11 @@ pin_project! {\n     #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n     pub struct Sleep {\n         inner: Inner,\n-\n+        deadline : Instant,\n+        handle: scheduler::Handle,\n         // The link between the `Sleep` instance and the timer that drives it.\n         #[pin]\n-        entry: TimerEntry,\n+        entry: Option<TimerEntry>,\n     }",
        "comment_created_at": "2024-04-24T11:14:32+00:00",
        "comment_author": "Darksonn",
        "comment_body": "How does this change the size of `Sleep`? Could `TimerEntry` be changed to reduce the change?",
        "pr_file_module": null
      },
      {
        "comment_id": "1577733142",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6512,
        "pr_file": "tokio/src/time/sleep.rs",
        "discussion_id": "1577713267",
        "commented_code": "@@ -226,10 +227,11 @@ pin_project! {\n     #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n     pub struct Sleep {\n         inner: Inner,\n-\n+        deadline : Instant,\n+        handle: scheduler::Handle,\n         // The link between the `Sleep` instance and the timer that drives it.\n         #[pin]\n-        entry: TimerEntry,\n+        entry: Option<TimerEntry>,\n     }",
        "comment_created_at": "2024-04-24T11:32:23+00:00",
        "comment_author": "wathenjiang",
        "comment_body": "I think this should be possible. Your idea looks better, I'll give it a try.",
        "pr_file_module": null
      },
      {
        "comment_id": "1578017258",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6512,
        "pr_file": "tokio/src/time/sleep.rs",
        "discussion_id": "1577713267",
        "commented_code": "@@ -226,10 +227,11 @@ pin_project! {\n     #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n     pub struct Sleep {\n         inner: Inner,\n-\n+        deadline : Instant,\n+        handle: scheduler::Handle,\n         // The link between the `Sleep` instance and the timer that drives it.\n         #[pin]\n-        entry: TimerEntry,\n+        entry: Option<TimerEntry>,\n     }",
        "comment_created_at": "2024-04-24T14:43:53+00:00",
        "comment_author": "wathenjiang",
        "comment_body": "I put `deadline` and `handle` in `Sleep` here for do not init the `TimerEntry`, but I have to put them to a place to save them temporarily.\r\n\r\nSaving `handle` here is to ensure the `timeout` will panic if there is no runtime handle in TLS or we do not `enable_time` or `enable_all`.\r\n\r\nThe size of `Sleep` is an issue worth considering. Is there any way to solve this problem?",
        "pr_file_module": null
      },
      {
        "comment_id": "1578037127",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6512,
        "pr_file": "tokio/src/time/sleep.rs",
        "discussion_id": "1577713267",
        "commented_code": "@@ -226,10 +227,11 @@ pin_project! {\n     #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n     pub struct Sleep {\n         inner: Inner,\n-\n+        deadline : Instant,\n+        handle: scheduler::Handle,\n         // The link between the `Sleep` instance and the timer that drives it.\n         #[pin]\n-        entry: TimerEntry,\n+        entry: Option<TimerEntry>,\n     }",
        "comment_created_at": "2024-04-24T14:55:58+00:00",
        "comment_author": "Darksonn",
        "comment_body": "What happens if you just don't call `clear_entry` in [this method](https://github.com/tokio-rs/tokio/blob/ef657d23fd0f73bc73d3cc872feaceb0f8bf36b7/tokio/src/runtime/time/entry.rs#L503-L527) when it hasn't yet been registered?\r\n\r\nBased on @conradludgate's comment [here](https://github.com/tokio-rs/tokio/issues/6504#issuecomment-2073343288), it sounds like this triggers a loom failure, but that's most likely due to some path where the timer is dropped concurrently with firing or something like that. If we've never been registered with the driver, then not calling `clear_entry` should be okay.",
        "pr_file_module": null
      },
      {
        "comment_id": "1578662075",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6512,
        "pr_file": "tokio/src/time/sleep.rs",
        "discussion_id": "1577713267",
        "commented_code": "@@ -226,10 +227,11 @@ pin_project! {\n     #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n     pub struct Sleep {\n         inner: Inner,\n-\n+        deadline : Instant,\n+        handle: scheduler::Handle,\n         // The link between the `Sleep` instance and the timer that drives it.\n         #[pin]\n-        entry: TimerEntry,\n+        entry: Option<TimerEntry>,\n     }",
        "comment_created_at": "2024-04-25T00:27:26+00:00",
        "comment_author": "wathenjiang",
        "comment_body": "In my test, it can improve the performance by reduicng lock contention when we always let timeout register into the driver. But, on the other hand, if the timeout never register into the driver, this can not bring significant performance improvement.",
        "pr_file_module": null
      },
      {
        "comment_id": "1578668356",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6512,
        "pr_file": "tokio/src/time/sleep.rs",
        "discussion_id": "1577713267",
        "commented_code": "@@ -226,10 +227,11 @@ pin_project! {\n     #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n     pub struct Sleep {\n         inner: Inner,\n-\n+        deadline : Instant,\n+        handle: scheduler::Handle,\n         // The link between the `Sleep` instance and the timer that drives it.\n         #[pin]\n-        entry: TimerEntry,\n+        entry: Option<TimerEntry>,\n     }",
        "comment_created_at": "2024-04-25T00:37:10+00:00",
        "comment_author": "wathenjiang",
        "comment_body": "That said, maybe we can use `inner: StdUnsafeCell<Option<TimerShared>>` for this purpose, the size of `Sleep` should be barely changed.\r\n\r\nAvoiding `clear_entry` for unregistered `timeout`s is not necessary. In this case, we should avoid constructing the intrusive linked list item.",
        "pr_file_module": null
      }
    ]
  }
]