[
  {
    "discussion_id": "1808896635",
    "pr_number": 6899,
    "pr_file": "tokio/src/runtime/metrics/worker.rs",
    "created_at": "2024-10-21T14:06:25+00:00",
    "commented_code": "}\n \n impl WorkerMetrics {\n-    pub(crate) fn from_config(config: &Config) -> WorkerMetrics {\n-        let mut worker_metrics = WorkerMetrics::new();\n-        worker_metrics.poll_count_histogram = config\n-            .metrics_poll_count_histogram\n-            .as_ref()\n-            .map(|histogram_builder| histogram_builder.build());\n-        worker_metrics\n+    cfg_unstable_metrics! {",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1808896635",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6899,
        "pr_file": "tokio/src/runtime/metrics/worker.rs",
        "discussion_id": "1808896635",
        "commented_code": "@@ -57,29 +80,41 @@ pub(crate) struct WorkerMetrics {\n }\n \n impl WorkerMetrics {\n-    pub(crate) fn from_config(config: &Config) -> WorkerMetrics {\n-        let mut worker_metrics = WorkerMetrics::new();\n-        worker_metrics.poll_count_histogram = config\n-            .metrics_poll_count_histogram\n-            .as_ref()\n-            .map(|histogram_builder| histogram_builder.build());\n-        worker_metrics\n+    cfg_unstable_metrics! {",
        "comment_created_at": "2024-10-21T14:06:25+00:00",
        "comment_author": "hds",
        "comment_body": "It would be better if we grouped all the unstable functions together at the bottom of the `impl` block, instead of spreading them out.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1902125179",
    "pr_number": 6899,
    "pr_file": "tokio/src/runtime/metrics/batch.rs",
    "created_at": "2025-01-03T20:04:59+00:00",
    "commented_code": "-use crate::runtime::metrics::{HistogramBatch, WorkerMetrics};\n+use crate::runtime::metrics::WorkerMetrics;\n+\n+cfg_unstable_metrics! {\n+    use crate::runtime::metrics::HistogramBatch;\n+}\n \n use std::sync::atomic::Ordering::Relaxed;\n use std::time::{Duration, Instant};\n \n pub(crate) struct MetricsBatch {\n+    #[cfg(tokio_unstable)]\n     /// Number of times the worker parked.\n     park_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of times the worker parked and unparked.\n     park_unpark_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of times the worker woke w/o doing work.\n     noop_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of tasks stolen.\n     steal_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of times tasks where stolen.\n     steal_operations: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of tasks that were polled by the worker.\n     poll_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of tasks polled when the worker entered park. This is used to\n     /// track the noop count.\n     poll_count_on_last_park: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of tasks that were scheduled locally on this worker.\n     local_schedule_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of tasks moved to the global queue to make space in the local",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1902125179",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6899,
        "pr_file": "tokio/src/runtime/metrics/batch.rs",
        "discussion_id": "1902125179",
        "commented_code": "@@ -1,34 +1,47 @@\n-use crate::runtime::metrics::{HistogramBatch, WorkerMetrics};\n+use crate::runtime::metrics::WorkerMetrics;\n+\n+cfg_unstable_metrics! {\n+    use crate::runtime::metrics::HistogramBatch;\n+}\n \n use std::sync::atomic::Ordering::Relaxed;\n use std::time::{Duration, Instant};\n \n pub(crate) struct MetricsBatch {\n+    #[cfg(tokio_unstable)]\n     /// Number of times the worker parked.\n     park_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of times the worker parked and unparked.\n     park_unpark_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of times the worker woke w/o doing work.\n     noop_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of tasks stolen.\n     steal_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of times tasks where stolen.\n     steal_operations: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of tasks that were polled by the worker.\n     poll_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of tasks polled when the worker entered park. This is used to\n     /// track the noop count.\n     poll_count_on_last_park: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of tasks that were scheduled locally on this worker.\n     local_schedule_count: u64,\n \n+    #[cfg(tokio_unstable)]\n     /// Number of tasks moved to the global queue to make space in the local",
        "comment_created_at": "2025-01-03T20:04:59+00:00",
        "comment_author": "rcoh",
        "comment_body": "consider reorganizing to put the stable fields on the top to make it clearer",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1913283455",
    "pr_number": 6899,
    "pr_file": "tokio/src/runtime/metrics/worker.rs",
    "created_at": "2025-01-13T14:30:38+00:00",
    "commented_code": "#[derive(Debug, Default)]\n #[repr(align(128))]\n pub(crate) struct WorkerMetrics {",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1913283455",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6899,
        "pr_file": "tokio/src/runtime/metrics/worker.rs",
        "discussion_id": "1913283455",
        "commented_code": "@@ -15,40 +18,50 @@ use std::thread::ThreadId;\n #[derive(Debug, Default)]\n #[repr(align(128))]\n pub(crate) struct WorkerMetrics {",
        "comment_created_at": "2025-01-13T14:30:38+00:00",
        "comment_author": "rcoh",
        "comment_body": "sameâ€”please move stable fields to top",
        "pr_file_module": null
      },
      {
        "comment_id": "1913442983",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6899,
        "pr_file": "tokio/src/runtime/metrics/worker.rs",
        "discussion_id": "1913283455",
        "commented_code": "@@ -15,40 +18,50 @@ use std::thread::ThreadId;\n #[derive(Debug, Default)]\n #[repr(align(128))]\n pub(crate) struct WorkerMetrics {",
        "comment_created_at": "2025-01-13T16:09:48+00:00",
        "comment_author": "Owen-CH-Leung",
        "comment_body": "Thanks. Moved stable fields to top",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1652453571",
    "pr_number": 6658,
    "pr_file": "tokio-stream/src/lib.rs",
    "created_at": "2024-06-25T10:15:21+00:00",
    "commented_code": "mod stream_ext;\n pub use stream_ext::{collect::FromStream, StreamExt};\n+pub use stream_ext::{\n+    AllFuture, AnyFuture, Chain, Filter, FilterMap, FoldFuture, Fuse, Map, MapWhile, Merge, Next,\n+    Peekable, Skip, SkipWhile, Take, TakeWhile, Then, TryNext,\n+};",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1652453571",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6658,
        "pr_file": "tokio-stream/src/lib.rs",
        "discussion_id": "1652453571",
        "commented_code": "@@ -81,6 +81,10 @@ pub mod wrappers;\n \n mod stream_ext;\n pub use stream_ext::{collect::FromStream, StreamExt};\n+pub use stream_ext::{\n+    AllFuture, AnyFuture, Chain, Filter, FilterMap, FoldFuture, Fuse, Map, MapWhile, Merge, Next,\n+    Peekable, Skip, SkipWhile, Take, TakeWhile, Then, TryNext,\n+};",
        "comment_created_at": "2024-06-25T10:15:21+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Please put them in a sub-module so they don't clutter the front page of the crate documentation.",
        "pr_file_module": null
      },
      {
        "comment_id": "1652597585",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6658,
        "pr_file": "tokio-stream/src/lib.rs",
        "discussion_id": "1652453571",
        "commented_code": "@@ -81,6 +81,10 @@ pub mod wrappers;\n \n mod stream_ext;\n pub use stream_ext::{collect::FromStream, StreamExt};\n+pub use stream_ext::{\n+    AllFuture, AnyFuture, Chain, Filter, FilterMap, FoldFuture, Fuse, Map, MapWhile, Merge, Next,\n+    Peekable, Skip, SkipWhile, Take, TakeWhile, Then, TryNext,\n+};",
        "comment_created_at": "2024-06-25T11:30:55+00:00",
        "comment_author": "sharpened-nacho",
        "comment_body": "I could define a `pub mod adapters` in lib.rs that `pub use`s all the structures like so\r\n```rust\r\n/// Some doc\r\npub mod adapters {\r\n    pub use crate::stream_ext::{\r\n        AllFuture, AnyFuture, Chain, Filter, FilterMap, FoldFuture, Fuse, Map, MapWhile, Merge,\r\n        Next, Peekable, Skip, SkipWhile, Take, TakeWhile, Then, TryNext,\r\n    };\r\n}\r\n```\r\n\r\nThis seemed very hacky to me, so I thought : should all the mods for those structures really be in the `stream_ext` folder/mod? The exposed structure of the crate is very different from its folder structure. How about having adapters.rs next to stream_ext.rs, and an adapters folder with all the mods' files? That would mimic the std::iter structure.\r\nThat way we could also put the \"sources\" (std::iter terminology) related mods (`empty`, `iter`, `once`, etc.) in their folder - but expose them the same as they are right now to not break anything.\r\n\r\nI would have 2 questions with this though :\r\n- is that considered a breaking change (the interface is kept the same)? And even if not, do you want to do this sort of big changes?\r\n- what to do with the all-alone `collect` mod? Keeping it in `stream_ext`? Lift it next to `stream_ext` and `adapters`?\r\n\r\nBut perhaps I'm going too far, I have no idea :sweat_smile: ",
        "pr_file_module": null
      },
      {
        "comment_id": "1652614477",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6658,
        "pr_file": "tokio-stream/src/lib.rs",
        "discussion_id": "1652453571",
        "commented_code": "@@ -81,6 +81,10 @@ pub mod wrappers;\n \n mod stream_ext;\n pub use stream_ext::{collect::FromStream, StreamExt};\n+pub use stream_ext::{\n+    AllFuture, AnyFuture, Chain, Filter, FilterMap, FoldFuture, Fuse, Map, MapWhile, Merge, Next,\n+    Peekable, Skip, SkipWhile, Take, TakeWhile, Then, TryNext,\n+};",
        "comment_created_at": "2024-06-25T11:35:24+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Defining an inline module like you suggested in the beginning is fine. (But the other approaches would not be considered breaking.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1721736864",
    "pr_number": 6786,
    "pr_file": "tokio-util/src/task/mod.rs",
    "created_at": "2024-08-19T12:49:08+00:00",
    "commented_code": "pub mod task_tracker;\n pub use task_tracker::TaskTracker;\n+\n+pub mod abort_on_drop;",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1721736864",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6786,
        "pr_file": "tokio-util/src/task/mod.rs",
        "discussion_id": "1721736864",
        "commented_code": "@@ -11,3 +11,5 @@ pub use join_map::{JoinMap, JoinMapKeys};\n \n pub mod task_tracker;\n pub use task_tracker::TaskTracker;\n+\n+pub mod abort_on_drop;",
        "comment_created_at": "2024-08-19T12:49:08+00:00",
        "comment_author": "Darksonn",
        "comment_body": "No reason to expose a module with one item.\r\n```suggestion\r\nmod abort_on_drop;\r\npub use abort_on_drop::AbortOnDropHandle;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1451745871",
    "pr_number": 6284,
    "pr_file": "tokio/src/util/linked_list.rs",
    "created_at": "2024-01-14T14:39:56+00:00",
    "commented_code": "}\n }\n \n+// ===== impl AtomicLinkedList =====\n+\n+feature! {\n+    #![feature = \"sync\"]\n+\n+    use core::sync::atomic::{\n+        AtomicPtr,\n+        Ordering::{AcqRel, Relaxed},\n+    };\n+",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1451745871",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6284,
        "pr_file": "tokio/src/util/linked_list.rs",
        "discussion_id": "1451745871",
        "commented_code": "@@ -313,6 +347,146 @@ cfg_taskdump! {\n     }\n }\n \n+// ===== impl AtomicLinkedList =====\n+\n+feature! {\n+    #![feature = \"sync\"]\n+\n+    use core::sync::atomic::{\n+        AtomicPtr,\n+        Ordering::{AcqRel, Relaxed},\n+    };\n+",
        "comment_created_at": "2024-01-14T14:39:56+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Please split this into a separate file. Rustfmt doesn't work inside the macros, so I don't want large codeblocks inside them.",
        "pr_file_module": null
      },
      {
        "comment_id": "1451760881",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6284,
        "pr_file": "tokio/src/util/linked_list.rs",
        "discussion_id": "1451745871",
        "commented_code": "@@ -313,6 +347,146 @@ cfg_taskdump! {\n     }\n }\n \n+// ===== impl AtomicLinkedList =====\n+\n+feature! {\n+    #![feature = \"sync\"]\n+\n+    use core::sync::atomic::{\n+        AtomicPtr,\n+        Ordering::{AcqRel, Relaxed},\n+    };\n+",
        "comment_created_at": "2024-01-14T16:12:49+00:00",
        "comment_author": "vnetserg",
        "comment_body": "I created a separate file in the least intrusive way I could think of. A better approach I think would be to refactor linked_list.rs into multiple files, but probably it is better done outside of this PR. Please let me know if you have a better idea of how it could be done.",
        "pr_file_module": null
      }
    ]
  }
]