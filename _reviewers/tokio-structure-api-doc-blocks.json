[
  {
    "discussion_id": "1931886514",
    "pr_number": 7100,
    "pr_file": "tokio/src/sync/broadcast.rs",
    "created_at": "2025-01-28T10:10:15+00:00",
    "commented_code": "impl<T> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n         let shared = self.shared.clone();\n-        shared.num_tx.fetch_add(1, SeqCst);\n+        shared.num_tx.fetch_add(1, Relaxed);\n \n         Sender { shared }\n     }\n }\n \n impl<T> Drop for Sender<T> {\n     fn drop(&mut self) {\n-        if 1 == self.shared.num_tx.fetch_sub(1, SeqCst) {\n+        if 1 == self.shared.num_tx.fetch_sub(1, AcqRel) {\n             self.close_channel();\n         }\n     }\n }\n \n+impl<T> WeakSender<T> {\n+    /// Tries to convert a `WeakSender` into a [`Sender`]. This will return `Some`\n+    /// if there are other `Sender` instances alive and the channel wasn't\n+    /// previously dropped, otherwise `None` is returned.",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1931886514",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7100,
        "pr_file": "tokio/src/sync/broadcast.rs",
        "discussion_id": "1931886514",
        "commented_code": "@@ -998,20 +1061,74 @@ impl<T> Shared<T> {\n impl<T> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n         let shared = self.shared.clone();\n-        shared.num_tx.fetch_add(1, SeqCst);\n+        shared.num_tx.fetch_add(1, Relaxed);\n \n         Sender { shared }\n     }\n }\n \n impl<T> Drop for Sender<T> {\n     fn drop(&mut self) {\n-        if 1 == self.shared.num_tx.fetch_sub(1, SeqCst) {\n+        if 1 == self.shared.num_tx.fetch_sub(1, AcqRel) {\n             self.close_channel();\n         }\n     }\n }\n \n+impl<T> WeakSender<T> {\n+    /// Tries to convert a `WeakSender` into a [`Sender`]. This will return `Some`\n+    /// if there are other `Sender` instances alive and the channel wasn't\n+    /// previously dropped, otherwise `None` is returned.",
        "comment_created_at": "2025-01-28T10:10:15+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Markdown docs generally start with one really short summary, followed by more text.\r\n```suggestion\r\n    /// Tries to convert a `WeakSender` into a [`Sender`]. \r\n    ///\r\n    /// This will return `Some`\r\n    /// if there are other `Sender` instances alive and the channel wasn't\r\n    /// previously dropped, otherwise `None` is returned.\r\n```\r\n\\+ reflow to line length",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1470871806",
    "pr_number": 6310,
    "pr_file": "tokio-util/src/codec/mod.rs",
    "created_at": "2024-01-30T09:39:04+00:00",
    "commented_code": "//! [`AsyncWrite`], to framed streams implementing [`Sink`] and [`Stream`].\n //! Framed streams are also known as transports.\n //!\n+//! # Example encoding using `LinesCodec`\n+//! The following example demonstrates how to use a codec such as [`LinesCodec`] to\n+//! write a sink of framed data. [`FramedWrite`] can be used to achieve this. Data sent\n+//! to [`FramedWrite`] are first framed according to a specific codec, and then sent to\n+//! an implementor of [`AsyncWrite`].\n+//! ```",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1470871806",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6310,
        "pr_file": "tokio-util/src/codec/mod.rs",
        "discussion_id": "1470871806",
        "commented_code": "@@ -7,6 +7,69 @@\n //! [`AsyncWrite`], to framed streams implementing [`Sink`] and [`Stream`].\n //! Framed streams are also known as transports.\n //!\n+//! # Example encoding using `LinesCodec`\n+//! The following example demonstrates how to use a codec such as [`LinesCodec`] to\n+//! write a sink of framed data. [`FramedWrite`] can be used to achieve this. Data sent\n+//! to [`FramedWrite`] are first framed according to a specific codec, and then sent to\n+//! an implementor of [`AsyncWrite`].\n+//! ```",
        "comment_created_at": "2024-01-30T09:39:04+00:00",
        "comment_author": "Darksonn",
        "comment_body": "We generally have empty lines between headers, text, and code blocks.\r\n```suggestion\r\n//! # Example encoding using `LinesCodec`\r\n//!\r\n//! The following example demonstrates how to use a codec such as [`LinesCodec`] to\r\n//! write a sink of framed data. [`FramedWrite`] can be used to achieve this. Data sent\r\n//! to [`FramedWrite`] are first framed according to a specific codec, and then sent to\r\n//! an implementor of [`AsyncWrite`].\r\n//!\r\n//! ```\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1869738651",
    "pr_number": 6975,
    "pr_file": "tokio/src/runtime/dump.rs",
    "created_at": "2024-12-04T15:11:07+00:00",
    "commented_code": "trace: Trace,\n }\n \n+/// A backtrace symbol. This is similar to [`backtrace::BacktraceSymbol`],\n+/// but is a separate struct to avoid public dependency issues.\n+///\n+/// This struct is guaranteed to be pure data and operations involving\n+/// it will not call platform functions that take an unpredictable amount\n+/// of time to finish.\n+#[derive(Clone, Debug)]\n+pub struct BacktraceSymbol {\n+    name: Option<Box<[u8]>>,\n+    name_demangled: Option<Box<str>>,\n+    addr: Option<*mut std::ffi::c_void>,\n+    filename: Option<std::path::PathBuf>,\n+    lineno: Option<u32>,\n+    colno: Option<u32>,\n+}\n+\n+impl BacktraceSymbol {\n+    pub(crate) fn from_backtrace_symbol(sym: &backtrace::BacktraceSymbol) -> Self {\n+        let name = sym.name();\n+        Self {\n+            name: name.as_ref().map(|name| name.as_bytes().into()),\n+            name_demangled: name.map(|name| format!(\"{}\", name).into()),\n+            addr: sym.addr(),\n+            filename: sym.filename().map(From::from),\n+            lineno: sym.lineno(),\n+            colno: sym.colno(),\n+        }\n+    }\n+\n+    /// Return the raw name of the symbol.\n+    pub fn name_raw(&self) -> Option<&[u8]> {\n+        self.name.as_deref()\n+    }\n+\n+    /// Return the demangled name of the symbol.\n+    pub fn name_demangled(&self) -> Option<&str> {\n+        self.name_demangled.as_deref()\n+    }\n+\n+    /// Returns the starting address of this symbol.\n+    pub fn addr(&self) -> Option<*mut std::ffi::c_void> {\n+        self.addr\n+    }\n+\n+    /// Returns the file name where this function was defined. If debuginfo\n+    /// is missing, this is likely to return None.\n+    pub fn filename(&self) -> Option<&Path> {\n+        self.filename.as_deref()\n+    }\n+\n+    /// Returns the line number for where this symbol is currently executing If debuginfo\n+    /// is missing, this is likely to return None.",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1869738651",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6975,
        "pr_file": "tokio/src/runtime/dump.rs",
        "discussion_id": "1869738651",
        "commented_code": "@@ -30,14 +30,191 @@ pub struct Task {\n     trace: Trace,\n }\n \n+/// A backtrace symbol. This is similar to [`backtrace::BacktraceSymbol`],\n+/// but is a separate struct to avoid public dependency issues.\n+///\n+/// This struct is guaranteed to be pure data and operations involving\n+/// it will not call platform functions that take an unpredictable amount\n+/// of time to finish.\n+#[derive(Clone, Debug)]\n+pub struct BacktraceSymbol {\n+    name: Option<Box<[u8]>>,\n+    name_demangled: Option<Box<str>>,\n+    addr: Option<*mut std::ffi::c_void>,\n+    filename: Option<std::path::PathBuf>,\n+    lineno: Option<u32>,\n+    colno: Option<u32>,\n+}\n+\n+impl BacktraceSymbol {\n+    pub(crate) fn from_backtrace_symbol(sym: &backtrace::BacktraceSymbol) -> Self {\n+        let name = sym.name();\n+        Self {\n+            name: name.as_ref().map(|name| name.as_bytes().into()),\n+            name_demangled: name.map(|name| format!(\"{}\", name).into()),\n+            addr: sym.addr(),\n+            filename: sym.filename().map(From::from),\n+            lineno: sym.lineno(),\n+            colno: sym.colno(),\n+        }\n+    }\n+\n+    /// Return the raw name of the symbol.\n+    pub fn name_raw(&self) -> Option<&[u8]> {\n+        self.name.as_deref()\n+    }\n+\n+    /// Return the demangled name of the symbol.\n+    pub fn name_demangled(&self) -> Option<&str> {\n+        self.name_demangled.as_deref()\n+    }\n+\n+    /// Returns the starting address of this symbol.\n+    pub fn addr(&self) -> Option<*mut std::ffi::c_void> {\n+        self.addr\n+    }\n+\n+    /// Returns the file name where this function was defined. If debuginfo\n+    /// is missing, this is likely to return None.\n+    pub fn filename(&self) -> Option<&Path> {\n+        self.filename.as_deref()\n+    }\n+\n+    /// Returns the line number for where this symbol is currently executing If debuginfo\n+    /// is missing, this is likely to return None.",
        "comment_created_at": "2024-12-04T15:11:07+00:00",
        "comment_author": "Darksonn",
        "comment_body": "This looks a bit weird with the sentence starting out of nowhere. Also, it's best to have extra information after a line break as that renders more nicely in the html docs.\r\n\r\n```suggestion\r\n    /// Returns the line number for where this symbol is currently executing.\r\n    ///\r\n    /// If debuginfo is missing, this is likely to return None.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1759703209",
    "pr_number": 6846,
    "pr_file": "tokio/src/runtime/coop.rs",
    "created_at": "2024-09-14T09:19:30+00:00",
    "commented_code": "self.0.is_none()\n         }\n     }\n+\n+    pin_project! {\n+        /// A future type that calls `poll_proceed` before polling the inner future to check if the\n+        /// inner future has exceeded its budget. If the inner future resolves, this will\n+        /// automatically call `RestoreOnPending::made_progress` before resolving this future with\n+        /// the result of the inner one. If polling the inner future is pending, polling this future\n+        /// type will also return a `Poll::Pending`.",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1759703209",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6846,
        "pr_file": "tokio/src/runtime/coop.rs",
        "discussion_id": "1759703209",
        "commented_code": "@@ -240,6 +243,42 @@ cfg_coop! {\n             self.0.is_none()\n         }\n     }\n+\n+    pin_project! {\n+        /// A future type that calls `poll_proceed` before polling the inner future to check if the\n+        /// inner future has exceeded its budget. If the inner future resolves, this will\n+        /// automatically call `RestoreOnPending::made_progress` before resolving this future with\n+        /// the result of the inner one. If polling the inner future is pending, polling this future\n+        /// type will also return a `Poll::Pending`.",
        "comment_created_at": "2024-09-14T09:19:30+00:00",
        "comment_author": "Darksonn",
        "comment_body": "This isn't publicly visible, so it's not a big deal here, but generally the convention is that documentation should start with one *short* line. If more explanation is needed, it can go in a separate paragraph. This is because when structs are shown in documentation, the first line is used as a summary in some cases, and the summary should be short.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1728957733",
    "pr_number": 6784,
    "pr_file": "tokio/src/task/join_set.rs",
    "created_at": "2024-08-23T13:17:11+00:00",
    "commented_code": "while self.join_next().await.is_some() {}\n     }\n \n+    /// Awaits the completion of all tasks in this `JoinSet`, returning a vector of their results.\n+    /// The results will be stored in the order they completed not the order they were spawned.\n+    ///",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1728957733",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6784,
        "pr_file": "tokio/src/task/join_set.rs",
        "discussion_id": "1728957733",
        "commented_code": "@@ -374,6 +374,79 @@ impl<T: 'static> JoinSet<T> {\n         while self.join_next().await.is_some() {}\n     }\n \n+    /// Awaits the completion of all tasks in this `JoinSet`, returning a vector of their results.\n+    /// The results will be stored in the order they completed not the order they were spawned.\n+    ///",
        "comment_created_at": "2024-08-23T13:17:11+00:00",
        "comment_author": "mox692",
        "comment_body": "We usually write a short one-sentence summary at the top, followed by a line break and then the body.\r\n\r\n```suggestion\r\n    /// Awaits the completion of all tasks in this `JoinSet`, returning a vector of their results.\r\n    ///\r\n    /// The results will be stored in the order they completed not the order they were spawned.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]