[
  {
    "discussion_id": "1494581530",
    "pr_number": 6348,
    "pr_file": "tokio/tests/sync_mpsc.rs",
    "created_at": "2024-02-19T13:52:42+00:00",
    "commented_code": null,
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1494581530",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6348,
        "pr_file": "tokio/tests/sync_mpsc.rs",
        "discussion_id": "1494581530",
        "commented_code": null,
        "comment_created_at": "2024-02-19T13:52:42+00:00",
        "comment_author": "Darksonn",
        "comment_body": "It is easier for me to understand the tests if you split them into many small tests rather than one or two large ones. For example, these small tests could be useful:\r\n\r\n1. `is_closed` should return true after calling `close` but still has a sender\r\n2. `is_closed` should return true after dropping all senders\r\n3. `is_closed` should return true after dropping all senders except for a weak sender\r\n4. `is_closed` should return false when there is a sender\r\n5. `is_closed` should return false when there is a sender, even if enough messages have been sent to fill the channel\r\n6. `is_closed` should return false when there is a permit (but no senders)",
        "pr_file_module": null
      },
      {
        "comment_id": "1501694559",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6348,
        "pr_file": "tokio/tests/sync_mpsc.rs",
        "discussion_id": "1494581530",
        "commented_code": null,
        "comment_created_at": "2024-02-24T20:37:27+00:00",
        "comment_author": "balliegojr",
        "comment_body": "I have split the tests into smaller single purpose tests. \r\n\r\nIs it necessary to have the same tests for the unbounded channel as well? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1501803172",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6348,
        "pr_file": "tokio/tests/sync_mpsc.rs",
        "discussion_id": "1494581530",
        "commented_code": null,
        "comment_created_at": "2024-02-25T11:46:48+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Thanks!\r\n\r\nThat could make sense. After all, they have different implementations of the semaphore, so we aren't *just* testing the same code twice.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1533773760",
    "pr_number": 6405,
    "pr_file": "tokio/tests/sync_mpsc_weak.rs",
    "created_at": "2024-03-21T12:05:50+00:00",
    "commented_code": "assert!(tx_weak.upgrade().is_none() && tx_weak2.upgrade().is_none());\n }\n+\n+#[tokio::test]",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1533773760",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6405,
        "pr_file": "tokio/tests/sync_mpsc_weak.rs",
        "discussion_id": "1533773760",
        "commented_code": "@@ -511,3 +512,161 @@ fn test_tx_count_weak_unbounded_sender() {\n \n     assert!(tx_weak.upgrade().is_none() && tx_weak2.upgrade().is_none());\n }\n+\n+#[tokio::test]",
        "comment_created_at": "2024-03-21T12:05:50+00:00",
        "comment_author": "mox692",
        "comment_body": "Regarding tests, I personally like the one test per one feature style, because that makes it clearer what is being tested. In this case, we could split into these tests:\r\n\r\n* strong_count is incremented when the Sender is cloned\r\n* weak_count is incremented when the Sender is downgraded\r\n* strong_count is decremented when the Sender is dropped\r\n* weak_count is decremented when the WeakSender is dropped\r\n* mixed cases not covered by the above, if needed",
        "pr_file_module": null
      },
      {
        "comment_id": "1536095865",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6405,
        "pr_file": "tokio/tests/sync_mpsc_weak.rs",
        "discussion_id": "1533773760",
        "commented_code": "@@ -511,3 +512,161 @@ fn test_tx_count_weak_unbounded_sender() {\n \n     assert!(tx_weak.upgrade().is_none() && tx_weak2.upgrade().is_none());\n }\n+\n+#[tokio::test]",
        "comment_created_at": "2024-03-22T19:31:38+00:00",
        "comment_author": "maminrayej",
        "comment_body": "That's a good point",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1685704477",
    "pr_number": 6695,
    "pr_file": "tokio/tests/rt_unstable_metrics.rs",
    "created_at": "2024-07-21T10:25:02+00:00",
    "commented_code": "assert_eq!(1, rt.metrics().remote_schedule_count());\n }\n \n+#[test]\n+fn worker_thread_id() {",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1685704477",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6695,
        "pr_file": "tokio/tests/rt_unstable_metrics.rs",
        "discussion_id": "1685704477",
        "commented_code": "@@ -150,6 +151,28 @@ fn remote_schedule_count() {\n     assert_eq!(1, rt.metrics().remote_schedule_count());\n }\n \n+#[test]\n+fn worker_thread_id() {",
        "comment_created_at": "2024-07-21T10:25:02+00:00",
        "comment_author": "Darksonn",
        "comment_body": "(No need to put everything you test related to thread ids in a single test. You can make more than one.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1886478921",
    "pr_number": 7038,
    "pr_file": "tokio/src/sync/watch.rs",
    "created_at": "2024-12-16T09:33:17+00:00",
    "commented_code": "/// When this function returns, the value that was passed to the closure\n     /// when it returned `true` will be considered seen.\n     ///\n-    /// If the channel is closed, then `wait_for` will return a `RecvError`.\n+    /// If the channel is closed, then `wait_for` will return a [`RecvError`].\n     /// Once this happens, no more messages can ever be sent on the channel.\n     /// When an error is returned, it is guaranteed that the closure has been\n     /// called on the last value, and that it returned `false` for that value.\n     /// (If the closure returned `true`, then the last value would have been\n     /// returned instead of the error.)\n     ///\n-    /// Like the `borrow` method, the returned borrow holds a read lock on the\n+    /// Like the [`borrow`] method, the returned borrow holds a read lock on the\n     /// inner value. This means that long-lived borrows could cause the producer\n     /// half to block. It is recommended to keep the borrow as short-lived as\n     /// possible. See the documentation of `borrow` for more information on\n     /// this.\n     ///\n-    /// [`Receiver::changed()`]: crate::sync::watch::Receiver::changed\n+    /// [`borrow`]: Receiver::borrow\n+    /// [`RecvError`]: error::RecvError\n+    ///\n+    /// # Cancel safety\n+    ///\n+    /// This method is cancel safe. If dropped before completion, it is\n+    /// guaranteed that the last seen value `val` (if any) satisfies\n+    /// `f(val) == false`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// If and only if the closure `f` panics. In that case, no resource owned\n+    /// or shared by this [`Receiver`] will be poisoned.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use tokio::sync::watch;\n+    /// use tokio::time::{sleep, Duration};\n     ///\n     /// #[tokio::main]\n-    ///\n     /// async fn main() {\n-    ///     let (tx, _rx) = watch::channel(\"hello\");\n+    ///     let (tx, mut rx) = watch::channel(\"hello\");\n     ///\n-    ///     tx.send(\"goodbye\").unwrap();\n+    ///     tokio::spawn(async move {\n+    ///         sleep(Duration::from_micros(100)).await;\n+    ///         tx.send(\"goodbye\").unwrap();\n+    ///     });",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1886478921",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7038,
        "pr_file": "tokio/src/sync/watch.rs",
        "discussion_id": "1886478921",
        "commented_code": "@@ -767,44 +767,50 @@ impl<T> Receiver<T> {\n     /// When this function returns, the value that was passed to the closure\n     /// when it returned `true` will be considered seen.\n     ///\n-    /// If the channel is closed, then `wait_for` will return a `RecvError`.\n+    /// If the channel is closed, then `wait_for` will return a [`RecvError`].\n     /// Once this happens, no more messages can ever be sent on the channel.\n     /// When an error is returned, it is guaranteed that the closure has been\n     /// called on the last value, and that it returned `false` for that value.\n     /// (If the closure returned `true`, then the last value would have been\n     /// returned instead of the error.)\n     ///\n-    /// Like the `borrow` method, the returned borrow holds a read lock on the\n+    /// Like the [`borrow`] method, the returned borrow holds a read lock on the\n     /// inner value. This means that long-lived borrows could cause the producer\n     /// half to block. It is recommended to keep the borrow as short-lived as\n     /// possible. See the documentation of `borrow` for more information on\n     /// this.\n     ///\n-    /// [`Receiver::changed()`]: crate::sync::watch::Receiver::changed\n+    /// [`borrow`]: Receiver::borrow\n+    /// [`RecvError`]: error::RecvError\n+    ///\n+    /// # Cancel safety\n+    ///\n+    /// This method is cancel safe. If dropped before completion, it is\n+    /// guaranteed that the last seen value `val` (if any) satisfies\n+    /// `f(val) == false`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// If and only if the closure `f` panics. In that case, no resource owned\n+    /// or shared by this [`Receiver`] will be poisoned.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use tokio::sync::watch;\n+    /// use tokio::time::{sleep, Duration};\n     ///\n     /// #[tokio::main]\n-    ///\n     /// async fn main() {\n-    ///     let (tx, _rx) = watch::channel(\"hello\");\n+    ///     let (tx, mut rx) = watch::channel(\"hello\");\n     ///\n-    ///     tx.send(\"goodbye\").unwrap();\n+    ///     tokio::spawn(async move {\n+    ///         sleep(Duration::from_micros(100)).await;\n+    ///         tx.send(\"goodbye\").unwrap();\n+    ///     });",
        "comment_created_at": "2024-12-16T09:33:17+00:00",
        "comment_author": "Darksonn",
        "comment_body": "We like to avoid sleeps in tests to reduce the amount of time it takes to run the tests. If you make the runtime use mocked time via the `start_paused` parameter, then this test will run instantly no matter what the duration is.\r\n\r\nhttps://github.com/tokio-rs/tokio/blob/10e23d1c621ab38aadf2cefba1120494cff615f0/tokio/src/runtime/task/join.rs#L190-L205",
        "pr_file_module": null
      },
      {
        "comment_id": "1886553771",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7038,
        "pr_file": "tokio/src/sync/watch.rs",
        "discussion_id": "1886478921",
        "commented_code": "@@ -767,44 +767,50 @@ impl<T> Receiver<T> {\n     /// When this function returns, the value that was passed to the closure\n     /// when it returned `true` will be considered seen.\n     ///\n-    /// If the channel is closed, then `wait_for` will return a `RecvError`.\n+    /// If the channel is closed, then `wait_for` will return a [`RecvError`].\n     /// Once this happens, no more messages can ever be sent on the channel.\n     /// When an error is returned, it is guaranteed that the closure has been\n     /// called on the last value, and that it returned `false` for that value.\n     /// (If the closure returned `true`, then the last value would have been\n     /// returned instead of the error.)\n     ///\n-    /// Like the `borrow` method, the returned borrow holds a read lock on the\n+    /// Like the [`borrow`] method, the returned borrow holds a read lock on the\n     /// inner value. This means that long-lived borrows could cause the producer\n     /// half to block. It is recommended to keep the borrow as short-lived as\n     /// possible. See the documentation of `borrow` for more information on\n     /// this.\n     ///\n-    /// [`Receiver::changed()`]: crate::sync::watch::Receiver::changed\n+    /// [`borrow`]: Receiver::borrow\n+    /// [`RecvError`]: error::RecvError\n+    ///\n+    /// # Cancel safety\n+    ///\n+    /// This method is cancel safe. If dropped before completion, it is\n+    /// guaranteed that the last seen value `val` (if any) satisfies\n+    /// `f(val) == false`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// If and only if the closure `f` panics. In that case, no resource owned\n+    /// or shared by this [`Receiver`] will be poisoned.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// use tokio::sync::watch;\n+    /// use tokio::time::{sleep, Duration};\n     ///\n     /// #[tokio::main]\n-    ///\n     /// async fn main() {\n-    ///     let (tx, _rx) = watch::channel(\"hello\");\n+    ///     let (tx, mut rx) = watch::channel(\"hello\");\n     ///\n-    ///     tx.send(\"goodbye\").unwrap();\n+    ///     tokio::spawn(async move {\n+    ///         sleep(Duration::from_micros(100)).await;\n+    ///         tx.send(\"goodbye\").unwrap();\n+    ///     });",
        "comment_created_at": "2024-12-16T10:21:36+00:00",
        "comment_author": "cip999",
        "comment_body": "Fair enough, done (and \"bumped\" the duration to 1s while at it).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1721445211",
    "pr_number": 6784,
    "pr_file": "tokio/tests/task_join_set.rs",
    "created_at": "2024-08-19T08:58:36+00:00",
    "commented_code": ".is_cancelled());\n }\n \n+#[tokio::test]\n+async fn join_all() {\n+    let mut set: JoinSet<i32> = JoinSet::new();\n+\n+    for _ in 0..5 {\n+        set.spawn(async { 1 });\n+    }\n+    let res: Vec<i32> = set.join_all().await;\n+\n+    assert_eq!(res.len(), 5);\n+    for itm in res.into_iter() {\n+        assert_eq!(itm, 1)\n+    }\n+}\n+\n+#[cfg(panic = \"unwind\")]\n+#[tokio::test]",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1721445211",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6784,
        "pr_file": "tokio/tests/task_join_set.rs",
        "discussion_id": "1721445211",
        "commented_code": "@@ -156,6 +156,46 @@ fn runtime_gone() {\n         .is_cancelled());\n }\n \n+#[tokio::test]\n+async fn join_all() {\n+    let mut set: JoinSet<i32> = JoinSet::new();\n+\n+    for _ in 0..5 {\n+        set.spawn(async { 1 });\n+    }\n+    let res: Vec<i32> = set.join_all().await;\n+\n+    assert_eq!(res.len(), 5);\n+    for itm in res.into_iter() {\n+        assert_eq!(itm, 1)\n+    }\n+}\n+\n+#[cfg(panic = \"unwind\")]\n+#[tokio::test]",
        "comment_created_at": "2024-08-19T08:58:36+00:00",
        "comment_author": "Darksonn",
        "comment_body": "This will make the test run much much faster by using [simulated time](https://docs.rs/tokio/latest/tokio/time/fn.pause.html).\r\n```suggestion\r\n#[tokio::test(start_paused = true)]\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1630122447",
    "pr_number": 6618,
    "pr_file": "tokio-util/src/sync/tests/loom_cancellation_token.rs",
    "created_at": "2024-06-06T19:36:39+00:00",
    "commented_code": "assert_ok!(th3.join());\n     });\n }\n+\n+#[test]\n+fn run_until_cancelled_completes() {\n+    loom::model(|| {\n+        block_on(async {\n+            let token = CancellationToken::new();\n+\n+            let fut = async {\n+                tokio::time::sleep(std::time::Duration::from_millis(500)).await;\n+                42\n+            };\n+\n+            if let Some(res) = token.run_until_cancelled(fut).await {\n+                assert_eq!(res, 42);\n+            } else {\n+                panic!(\"Should not happen since we are not cancelling the token\");\n+            }\n+        });\n+    });\n+}\n+\n+#[test]\n+fn run_until_cancelled_with_cancel() {\n+    loom::model(|| {\n+        block_on(async {\n+            let token = CancellationToken::new();\n+            let token1 = token.clone();\n+\n+            let th1 = std::thread::spawn(move || {\n+                std::thread::sleep(std::time::Duration::from_millis(500));\n+                token1.cancel();\n+            });",
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1630122447",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6618,
        "pr_file": "tokio-util/src/sync/tests/loom_cancellation_token.rs",
        "discussion_id": "1630122447",
        "commented_code": "@@ -174,3 +174,46 @@ fn cancel_parent_and_child() {\n         assert_ok!(th3.join());\n     });\n }\n+\n+#[test]\n+fn run_until_cancelled_completes() {\n+    loom::model(|| {\n+        block_on(async {\n+            let token = CancellationToken::new();\n+\n+            let fut = async {\n+                tokio::time::sleep(std::time::Duration::from_millis(500)).await;\n+                42\n+            };\n+\n+            if let Some(res) = token.run_until_cancelled(fut).await {\n+                assert_eq!(res, 42);\n+            } else {\n+                panic!(\"Should not happen since we are not cancelling the token\");\n+            }\n+        });\n+    });\n+}\n+\n+#[test]\n+fn run_until_cancelled_with_cancel() {\n+    loom::model(|| {\n+        block_on(async {\n+            let token = CancellationToken::new();\n+            let token1 = token.clone();\n+\n+            let th1 = std::thread::spawn(move || {\n+                std::thread::sleep(std::time::Duration::from_millis(500));\n+                token1.cancel();\n+            });",
        "comment_created_at": "2024-06-06T19:36:39+00:00",
        "comment_author": "Darksonn",
        "comment_body": "We do not use sleeping in tests. We have 845 tests right now. Imagine how long it would take to run the tests if every single one had a 0.5 second sleep.",
        "pr_file_module": null
      },
      {
        "comment_id": "1631644533",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 6618,
        "pr_file": "tokio-util/src/sync/tests/loom_cancellation_token.rs",
        "discussion_id": "1630122447",
        "commented_code": "@@ -174,3 +174,46 @@ fn cancel_parent_and_child() {\n         assert_ok!(th3.join());\n     });\n }\n+\n+#[test]\n+fn run_until_cancelled_completes() {\n+    loom::model(|| {\n+        block_on(async {\n+            let token = CancellationToken::new();\n+\n+            let fut = async {\n+                tokio::time::sleep(std::time::Duration::from_millis(500)).await;\n+                42\n+            };\n+\n+            if let Some(res) = token.run_until_cancelled(fut).await {\n+                assert_eq!(res, 42);\n+            } else {\n+                panic!(\"Should not happen since we are not cancelling the token\");\n+            }\n+        });\n+    });\n+}\n+\n+#[test]\n+fn run_until_cancelled_with_cancel() {\n+    loom::model(|| {\n+        block_on(async {\n+            let token = CancellationToken::new();\n+            let token1 = token.clone();\n+\n+            let th1 = std::thread::spawn(move || {\n+                std::thread::sleep(std::time::Duration::from_millis(500));\n+                token1.cancel();\n+            });",
        "comment_created_at": "2024-06-07T20:10:52+00:00",
        "comment_author": "tglane",
        "comment_body": "Yeah that was a stupid idea. I changed the test to use a channel instead of a sleep.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2075004336",
    "pr_number": 7307,
    "pr_file": "tokio/tests/macros_join.rs",
    "created_at": "2025-05-06T08:41:42+00:00",
    "commented_code": null,
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "2075004336",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7307,
        "pr_file": "tokio/tests/macros_join.rs",
        "discussion_id": "2075004336",
        "commented_code": null,
        "comment_created_at": "2025-05-06T08:41:42+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Please include some tests for edge cases similar to the existing `empty_join` test at the bottom and the four `sync_*` tests at the top.",
        "pr_file_module": null
      },
      {
        "comment_id": "2078236501",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7307,
        "pr_file": "tokio/tests/macros_join.rs",
        "discussion_id": "2075004336",
        "commented_code": null,
        "comment_created_at": "2025-05-07T18:20:23+00:00",
        "comment_author": "jlizen",
        "comment_body": "My previous implementation didn't support usage of `biased;` in the empty input, but I can add that in and add the corresponding test (along with the mentioned sync ones).",
        "pr_file_module": null
      },
      {
        "comment_id": "2078249824",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7307,
        "pr_file": "tokio/tests/macros_join.rs",
        "discussion_id": "2075004336",
        "commented_code": null,
        "comment_created_at": "2025-05-07T18:26:00+00:00",
        "comment_author": "jlizen",
        "comment_body": "My current approach is just to extend the additional tests with more test cases, to avoid exploding into a `*_biased` version of every test (with the exception of the ordering and size ones). But glad to split them.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1931880927",
    "pr_number": 7130,
    "pr_file": "tokio/tests/io_read_buf_exact.rs",
    "created_at": "2025-01-28T10:06:19+00:00",
    "commented_code": null,
    "repo_full_name": "tokio-rs/tokio",
    "discussion_comments": [
      {
        "comment_id": "1931880927",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7130,
        "pr_file": "tokio/tests/io_read_buf_exact.rs",
        "discussion_id": "1931880927",
        "commented_code": null,
        "comment_created_at": "2025-01-28T10:06:19+00:00",
        "comment_author": "Darksonn",
        "comment_body": "Please add a test that uses this with `Vec<u8>` and `BytesMut` too.",
        "pr_file_module": null
      },
      {
        "comment_id": "1931889051",
        "repo_full_name": "tokio-rs/tokio",
        "pr_number": 7130,
        "pr_file": "tokio/tests/io_read_buf_exact.rs",
        "discussion_id": "1931880927",
        "commented_code": null,
        "comment_created_at": "2025-01-28T10:12:02+00:00",
        "comment_author": "Darksonn",
        "comment_body": "I'm concerned that we might need to supply the number of bytes as a separate parameter. I recall that resizable buffers are considered infinitely large by `BufMut`.",
        "pr_file_module": null
      }
    ]
  }
]