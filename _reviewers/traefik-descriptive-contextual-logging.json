[
  {
    "discussion_id": "2039063622",
    "pr_number": 11238,
    "pr_file": "pkg/healthcheck/tcp.go",
    "created_at": "2025-04-11T08:27:28+00:00",
    "commented_code": "+package healthcheck\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"net\"\n+\t\"time\"\n+\n+\t\"github.com/rs/zerolog/log\"\n+\t\"github.com/traefik/traefik/v3/pkg/config/dynamic\"\n+\t\"github.com/traefik/traefik/v3/pkg/config/runtime\"\n+\t\"github.com/traefik/traefik/v3/pkg/tcp\"\n+)\n+\n+type ServiceTCPHealthChecker struct {\n+\tdialerManager *tcp.DialerManager\n+\tbalancer      StatusSetter\n+\tinfo          *runtime.TCPServiceInfo\n+\n+\tconfig   *dynamic.TCPServerHealthCheck\n+\tinterval time.Duration\n+\ttimeout  time.Duration\n+\n+\tmetrics metricsHealthCheck\n+\n+\ttargets     map[string]*net.TCPAddr\n+\tserviceName string\n+}\n+\n+func NewServiceTCPHealthChecker(dialerManager *tcp.DialerManager, metrics metricsHealthCheck, config *dynamic.TCPServerHealthCheck, service StatusSetter, info *runtime.TCPServiceInfo, targets map[string]*net.TCPAddr, serviceName string) *ServiceTCPHealthChecker {\n+\tinterval := time.Duration(config.Interval)",
    "repo_full_name": "traefik/traefik",
    "discussion_comments": [
      {
        "comment_id": "2039063622",
        "repo_full_name": "traefik/traefik",
        "pr_number": 11238,
        "pr_file": "pkg/healthcheck/tcp.go",
        "discussion_id": "2039063622",
        "commented_code": "@@ -0,0 +1,141 @@\n+package healthcheck\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"net\"\n+\t\"time\"\n+\n+\t\"github.com/rs/zerolog/log\"\n+\t\"github.com/traefik/traefik/v3/pkg/config/dynamic\"\n+\t\"github.com/traefik/traefik/v3/pkg/config/runtime\"\n+\t\"github.com/traefik/traefik/v3/pkg/tcp\"\n+)\n+\n+type ServiceTCPHealthChecker struct {\n+\tdialerManager *tcp.DialerManager\n+\tbalancer      StatusSetter\n+\tinfo          *runtime.TCPServiceInfo\n+\n+\tconfig   *dynamic.TCPServerHealthCheck\n+\tinterval time.Duration\n+\ttimeout  time.Duration\n+\n+\tmetrics metricsHealthCheck\n+\n+\ttargets     map[string]*net.TCPAddr\n+\tserviceName string\n+}\n+\n+func NewServiceTCPHealthChecker(dialerManager *tcp.DialerManager, metrics metricsHealthCheck, config *dynamic.TCPServerHealthCheck, service StatusSetter, info *runtime.TCPServiceInfo, targets map[string]*net.TCPAddr, serviceName string) *ServiceTCPHealthChecker {\n+\tinterval := time.Duration(config.Interval)",
        "comment_created_at": "2025-04-11T08:27:28+00:00",
        "comment_author": "sdelicata",
        "comment_body": "We probably miss a context here to use its associated logger that contains the service name, etc.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2028465797",
    "pr_number": 10610,
    "pr_file": "pkg/healthcheck/healthcheck.go",
    "created_at": "2025-04-04T09:37:38+00:00",
    "commented_code": "interval := time.Duration(config.Interval)\n \tif interval <= 0 {\n-\t\tlogger.Error().Msg(\"Health check interval smaller than zero\")\n+\t\tlogger.Error().Msg(\"Health check interval smaller than zero, default value will be used instead.\")\n \t\tinterval = time.Duration(dynamic.DefaultHealthCheckInterval)\n \t}\n \n+\t// If the unhealthyInterval option is not set, we use the interval option value,\n+\t// to check the unhealthy targets as often as the healthy ones.\n+\tvar unhealthyInterval time.Duration\n+\tif config.UnhealthyInterval == nil {\n+\t\tunhealthyInterval = interval\n+\t} else {\n+\t\tunhealthyInterval = time.Duration(*config.UnhealthyInterval)\n+\t\tif unhealthyInterval <= 0 {\n+\t\t\tlogger.Error().Msg(\"Health recheck interval smaller than zero, default value will be used instead.\")",
    "repo_full_name": "traefik/traefik",
    "discussion_comments": [
      {
        "comment_id": "2028465797",
        "repo_full_name": "traefik/traefik",
        "pr_number": 10610,
        "pr_file": "pkg/healthcheck/healthcheck.go",
        "discussion_id": "2028465797",
        "commented_code": "@@ -60,13 +69,26 @@ func NewServiceHealthChecker(ctx context.Context, metrics metricsHealthCheck, co\n \n \tinterval := time.Duration(config.Interval)\n \tif interval <= 0 {\n-\t\tlogger.Error().Msg(\"Health check interval smaller than zero\")\n+\t\tlogger.Error().Msg(\"Health check interval smaller than zero, default value will be used instead.\")\n \t\tinterval = time.Duration(dynamic.DefaultHealthCheckInterval)\n \t}\n \n+\t// If the unhealthyInterval option is not set, we use the interval option value,\n+\t// to check the unhealthy targets as often as the healthy ones.\n+\tvar unhealthyInterval time.Duration\n+\tif config.UnhealthyInterval == nil {\n+\t\tunhealthyInterval = interval\n+\t} else {\n+\t\tunhealthyInterval = time.Duration(*config.UnhealthyInterval)\n+\t\tif unhealthyInterval <= 0 {\n+\t\t\tlogger.Error().Msg(\"Health recheck interval smaller than zero, default value will be used instead.\")",
        "comment_created_at": "2025-04-04T09:37:38+00:00",
        "comment_author": "sdelicata",
        "comment_body": "```suggestion\r\n\t\t\tlogger.Error().Msg(\"Health check unhealthy interval smaller than zero, default value will be used instead.\")\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1965824528",
    "pr_number": 11475,
    "pr_file": "pkg/provider/kubernetes/crd/kubernetes.go",
    "created_at": "2025-02-21T16:32:02+00:00",
    "commented_code": "rootCAs = append(rootCAs, types.FileOrContent(caSecret))",
    "repo_full_name": "traefik/traefik",
    "discussion_comments": [
      {
        "comment_id": "1965824528",
        "repo_full_name": "traefik/traefik",
        "pr_number": 11475,
        "pr_file": "pkg/provider/kubernetes/crd/kubernetes.go",
        "discussion_id": "1965824528",
        "commented_code": "@@ -353,6 +353,26 @@ func (p *Provider) loadConfigurationFromCRD(ctx context.Context, client Client)\n \t\t\trootCAs = append(rootCAs, types.FileOrContent(caSecret))",
        "comment_created_at": "2025-02-21T16:32:02+00:00",
        "comment_author": "sdelicata",
        "comment_body": "Could you please add a warning log when `RootCAsSecrets` is used?",
        "pr_file_module": null
      },
      {
        "comment_id": "1966774667",
        "repo_full_name": "traefik/traefik",
        "pr_number": 11475,
        "pr_file": "pkg/provider/kubernetes/crd/kubernetes.go",
        "discussion_id": "1965824528",
        "commented_code": "@@ -353,6 +353,26 @@ func (p *Provider) loadConfigurationFromCRD(ctx context.Context, client Client)\n \t\t\trootCAs = append(rootCAs, types.FileOrContent(caSecret))",
        "comment_created_at": "2025-02-23T13:00:49+00:00",
        "comment_author": "Nelwhix",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]