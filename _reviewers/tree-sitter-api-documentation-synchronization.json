[
  {
    "discussion_id": "1921810472",
    "pr_number": 4121,
    "pr_file": "lib/binding_web/README.md",
    "created_at": "2025-01-20T05:21:38+00:00",
    "commented_code": "// the library is ready",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1921810472",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/README.md",
        "discussion_id": "1921810472",
        "commented_code": "@@ -50,6 +50,14 @@ await Parser.init();\n // the library is ready",
        "comment_created_at": "2025-01-20T05:21:38+00:00",
        "comment_author": "savetheclocktower",
        "comment_body": "The code examples earlier in `README.md` need updating \u2014 they use\r\n\r\n```js\r\nimport Parser from 'web-tree-sitter';\r\n```\r\n\r\nand need to be changed to read\r\n\r\n```js\r\nimport { Parser } from 'web-tree-sitter';\r\n```\r\n\r\nsince there is now no default export.",
        "pr_file_module": null
      },
      {
        "comment_id": "1921811589",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/README.md",
        "discussion_id": "1921810472",
        "commented_code": "@@ -50,6 +50,14 @@ await Parser.init();\n // the library is ready",
        "comment_created_at": "2025-01-20T05:23:33+00:00",
        "comment_author": "savetheclocktower",
        "comment_body": "It's also worth mentioning in the README that there are CJS and ESM entry points, and that you can opt into the debug build with (e.g.):\r\n\r\n```js\r\nimport { Parser} from 'web-tree-sitter/debug';\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1169176047",
    "pr_number": 1166,
    "pr_file": "README.md",
    "created_at": "2023-04-17T19:15:30+00:00",
    "commented_code": "- **Robust** enough to provide useful results even in the presence of syntax errors\n - **Dependency-free** so that the runtime library (which is written in pure C) can be embedded in any application\n \n+## Editors\n+\n+The following editors are making use of tree-sitter for syntax highlighting and other features:\n+\n+- [Neovim](https://github.com/neovim/neovim): a Vim-fork focused on extensibility and usability.\n+- [helix](https://github.com/helix-editor/helix): a post-modern modal text editor.\n+- [emacs-tree-sitter](https://github.com/emacs-tree-sitter/elisp-tree-sitter): bindings for Emacs 29+.",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1169176047",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 1166,
        "pr_file": "README.md",
        "discussion_id": "1169176047",
        "commented_code": "@@ -13,6 +13,15 @@ Tree-sitter is a parser generator tool and an incremental parsing library. It ca\n - **Robust** enough to provide useful results even in the presence of syntax errors\n - **Dependency-free** so that the runtime library (which is written in pure C) can be embedded in any application\n \n+## Editors\n+\n+The following editors are making use of tree-sitter for syntax highlighting and other features:\n+\n+- [Neovim](https://github.com/neovim/neovim): a Vim-fork focused on extensibility and usability.\n+- [helix](https://github.com/helix-editor/helix): a post-modern modal text editor.\n+- [emacs-tree-sitter](https://github.com/emacs-tree-sitter/elisp-tree-sitter): bindings for Emacs 29+.",
        "comment_created_at": "2023-04-17T19:15:30+00:00",
        "comment_author": "jcs090218",
        "comment_body": "Should probably remove \"29+\", see their main page:\r\n\r\n> For Emacs 29+, please use [the built-in integration](https://lists.gnu.org/archive/html/emacs-devel/2022-11/msg01443.html) instead of this package.\r\n\r\nEmacs 29+ has a built-in module into Emacs, but not the same to [emacs-tree-sitter]()/[elisp-tree-sitter]().",
        "pr_file_module": null
      }
    ]
  }
]