[
  {
    "discussion_id": "999493345",
    "pr_number": 1859,
    "pr_file": "docs/section-6-contributing.md",
    "created_at": "2022-10-19T13:55:50+00:00",
    "commented_code": "cd cli/npm\n    npm publish\n    ```\n+\n+## Developing Individual Language Grammars\n+\n+Grammars for individual languages developed in the [Tree-sitter organization](https://github.com/tree-sitter/) live in `tree-sitter/tree-sitter-LANGUAGE` repositories. This section describes general practices for language grammars. Grammars developed outside of the Tree-sitter organization are strongly recommended to follow these practices for greater consistency within the Tree-sitter ecosystem.\n+\n+### Contributing\n+\n+Contributions and fixes to the grammars in the form of PRs are appreciated. To make this process pleasant for both contributors and maintainers, we ask you to follow these guidelines:\n+\n+- Ensure the build and all tests pass in CI, and query files are updated for the change if necessary.\n+\n+- Keep the PR in _draft_ mode until they are ready to be reviewed and merged. This helps maintainers to know where their attention is necessary.\n+\n+- Include tests that cover the proposed changes. This helps the maintainers to understand the effect of the change, and prevents regressions in the future.\n+\n+- If the changes concern less well known or new language features, it can be helpful to include links to documentation and/or an example program in an online playground to illustrate the change.\n+\n+- Avoid unnecessary changes to the structure of the syntax tree, to minimize the update work required for direct consumers of the grammar.\n+\n+- Check if the grammar follows a reference grammar, implementation or other documentation. If so, make sure the change does as well.\n+\n+### Versioning",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "999493345",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 1859,
        "pr_file": "docs/section-6-contributing.md",
        "discussion_id": "999493345",
        "commented_code": "@@ -143,3 +143,49 @@ Publishing a new release of the CLI requires these steps:\n    cd cli/npm\n    npm publish\n    ```\n+\n+## Developing Individual Language Grammars\n+\n+Grammars for individual languages developed in the [Tree-sitter organization](https://github.com/tree-sitter/) live in `tree-sitter/tree-sitter-LANGUAGE` repositories. This section describes general practices for language grammars. Grammars developed outside of the Tree-sitter organization are strongly recommended to follow these practices for greater consistency within the Tree-sitter ecosystem.\n+\n+### Contributing\n+\n+Contributions and fixes to the grammars in the form of PRs are appreciated. To make this process pleasant for both contributors and maintainers, we ask you to follow these guidelines:\n+\n+- Ensure the build and all tests pass in CI, and query files are updated for the change if necessary.\n+\n+- Keep the PR in _draft_ mode until they are ready to be reviewed and merged. This helps maintainers to know where their attention is necessary.\n+\n+- Include tests that cover the proposed changes. This helps the maintainers to understand the effect of the change, and prevents regressions in the future.\n+\n+- If the changes concern less well known or new language features, it can be helpful to include links to documentation and/or an example program in an online playground to illustrate the change.\n+\n+- Avoid unnecessary changes to the structure of the syntax tree, to minimize the update work required for direct consumers of the grammar.\n+\n+- Check if the grammar follows a reference grammar, implementation or other documentation. If so, make sure the change does as well.\n+\n+### Versioning",
        "comment_created_at": "2022-10-19T13:55:50+00:00",
        "comment_author": "dcreager",
        "comment_body": "I'd also suggest a note that grammar releases should be frequent.  (Possibly after each PR is merged? Or after a batch of PRs if a maintainer does several in one go?)  Many consumers are currently pinning to specific commit SHAs, and we want there to be a frequent enough cadence of grammar releases to render that unnecessary.",
        "pr_file_module": null
      },
      {
        "comment_id": "999936212",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 1859,
        "pr_file": "docs/section-6-contributing.md",
        "discussion_id": "999493345",
        "commented_code": "@@ -143,3 +143,49 @@ Publishing a new release of the CLI requires these steps:\n    cd cli/npm\n    npm publish\n    ```\n+\n+## Developing Individual Language Grammars\n+\n+Grammars for individual languages developed in the [Tree-sitter organization](https://github.com/tree-sitter/) live in `tree-sitter/tree-sitter-LANGUAGE` repositories. This section describes general practices for language grammars. Grammars developed outside of the Tree-sitter organization are strongly recommended to follow these practices for greater consistency within the Tree-sitter ecosystem.\n+\n+### Contributing\n+\n+Contributions and fixes to the grammars in the form of PRs are appreciated. To make this process pleasant for both contributors and maintainers, we ask you to follow these guidelines:\n+\n+- Ensure the build and all tests pass in CI, and query files are updated for the change if necessary.\n+\n+- Keep the PR in _draft_ mode until they are ready to be reviewed and merged. This helps maintainers to know where their attention is necessary.\n+\n+- Include tests that cover the proposed changes. This helps the maintainers to understand the effect of the change, and prevents regressions in the future.\n+\n+- If the changes concern less well known or new language features, it can be helpful to include links to documentation and/or an example program in an online playground to illustrate the change.\n+\n+- Avoid unnecessary changes to the structure of the syntax tree, to minimize the update work required for direct consumers of the grammar.\n+\n+- Check if the grammar follows a reference grammar, implementation or other documentation. If so, make sure the change does as well.\n+\n+### Versioning",
        "comment_created_at": "2022-10-19T21:08:52+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Yeah, I agree. Right now it's hard to stay on top of releasing all of the latest changes. [This PR](https://github.com/tree-sitter/tree-sitter-java/commit/81148c0902125150d616ea30190a630c86974a7a) by @Luni-4 was a good start, adding automatic publishing to crates.io.\r\n\r\nI guess the ideal setup would be for all grammars to have something like that, and for the workflow to also publish other things as well, like the Node.js bindings and WASM builds to NPM, and at some point, the generated source code to a GitHub release, so that we could stop hosting it primarily in the git repository.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "147773189",
    "pr_number": 110,
    "pr_file": "README.md",
    "created_at": "2017-10-30T17:19:40+00:00",
    "commented_code": "To create the parser, compile this file like this:\n \n ```sh\n+libdir=$(dirname $(find tree-sitter/out/Release -name libcompiler.a))\n+\n clang++ -std=c++11 \\\n   -I tree-sitter/include \\\n-  -L tree-sitter/out/Release \\\n-  -l compiler \\\n+  -L \"$libdir\" \\",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "147773189",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 110,
        "pr_file": "README.md",
        "discussion_id": "147773189",
        "commented_code": "@@ -134,11 +134,13 @@ int main() {\n To create the parser, compile this file like this:\n \n ```sh\n+libdir=$(dirname $(find tree-sitter/out/Release -name libcompiler.a))\n+\n clang++ -std=c++11 \\\n   -I tree-sitter/include \\\n-  -L tree-sitter/out/Release \\\n-  -l compiler \\\n+  -L \"$libdir\" \\",
        "comment_created_at": "2017-10-30T17:19:40+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Maybe the simplest approach is to pass the `.a` file as just another object file argument, rather than using the linker flags `-l` and `-L` at all.\r\n\r\n```sh\r\nclang++ -std=c++11 \\\r\n  $(find tree-sitter/out -name libcompiler.a)  \\\r\n  arithmetic_grammar.cc \\\r\n  -o arithmetic_grammar\r\n```\r\n\r\nThis works for me on macOS using clang? Does this work on your linux system?",
        "pr_file_module": null
      },
      {
        "comment_id": "147897362",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 110,
        "pr_file": "README.md",
        "discussion_id": "147773189",
        "commented_code": "@@ -134,11 +134,13 @@ int main() {\n To create the parser, compile this file like this:\n \n ```sh\n+libdir=$(dirname $(find tree-sitter/out/Release -name libcompiler.a))\n+\n clang++ -std=c++11 \\\n   -I tree-sitter/include \\\n-  -L tree-sitter/out/Release \\\n-  -l compiler \\\n+  -L \"$libdir\" \\",
        "comment_created_at": "2017-10-31T05:14:52+00:00",
        "comment_author": "gnprice",
        "comment_body": "WFM! Given the fix to the order too, that is.\r\n\r\nI think it'd be slightly cleaner also to refer to `tree-sitter/out/Release` rather than `tree-sitter/out` -- that way if the person has also e.g. run tests, it still finds just one file. On my system it seems to work with no complaint even if two versions of libcompiler.a show up on that command line, but I'd worry a bit about counting on that in general.\r\n\r\nI'll send a version with this tweak.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "147898406",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 110,
        "pr_file": "README.md",
        "discussion_id": "147773189",
        "commented_code": "@@ -134,11 +134,13 @@ int main() {\n To create the parser, compile this file like this:\n \n ```sh\n+libdir=$(dirname $(find tree-sitter/out/Release -name libcompiler.a))\n+\n clang++ -std=c++11 \\\n   -I tree-sitter/include \\\n-  -L tree-sitter/out/Release \\\n-  -l compiler \\\n+  -L \"$libdir\" \\",
        "comment_created_at": "2017-10-31T05:25:41+00:00",
        "comment_author": "gnprice",
        "comment_body": "Sent. Also fixed where I was missing `\"\"` around the `find` results.\r\n",
        "pr_file_module": null
      }
    ]
  }
]