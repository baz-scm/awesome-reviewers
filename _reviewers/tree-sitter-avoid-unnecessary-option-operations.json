[
  {
    "discussion_id": "2296303381",
    "pr_number": 4205,
    "pr_file": "crates/cli/src/version.rs",
    "created_at": "2025-08-23T20:08:31+00:00",
    "commented_code": "format!(\n                         \"{}{}{}\",\n                         &line[..start_quote],\n-                        self.version,\n+                        self.version.clone().unwrap(),",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2296303381",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "crates/cli/src/version.rs",
        "discussion_id": "2296303381",
        "commented_code": "@@ -80,7 +137,7 @@ impl Version {\n                     format!(\n                         \"{}{}{}\",\n                         &line[..start_quote],\n-                        self.version,\n+                        self.version.clone().unwrap(),",
        "comment_created_at": "2025-08-23T20:08:31+00:00",
        "comment_author": "WillLillis",
        "comment_body": "```suggestion\r\n                        self.version.as_ref().unwrap(),\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2296303416",
    "pr_number": 4205,
    "pr_file": "crates/cli/src/version.rs",
    "created_at": "2025-08-23T20:08:44+00:00",
    "commented_code": ".lines()\n             .map(|line| {\n                 if line.starts_with(\"version =\") {\n-                    format!(\"version = \\\"{}\\\"\", self.version)\n+                    format!(\"version = \\\"{}\\\"\", self.version.clone().unwrap())",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2296303416",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "crates/cli/src/version.rs",
        "discussion_id": "2296303416",
        "commented_code": "@@ -107,7 +164,7 @@ impl Version {\n             .lines()\n             .map(|line| {\n                 if line.starts_with(\"version =\") {\n-                    format!(\"version = \\\"{}\\\"\", self.version)\n+                    format!(\"version = \\\"{}\\\"\", self.version.clone().unwrap())",
        "comment_created_at": "2025-08-23T20:08:44+00:00",
        "comment_author": "WillLillis",
        "comment_body": "```suggestion\r\n                    format!(\"version = \\\"{}\\\"\", self.version.as_ref().unwrap())\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2296303482",
    "pr_number": 4205,
    "pr_file": "crates/cli/src/version.rs",
    "created_at": "2025-08-23T20:09:14+00:00",
    "commented_code": ".lines()\n             .map(|line| {\n                 if line.starts_with(\"VERSION\") {\n-                    format!(\"VERSION := {}\", self.version)\n+                    format!(\"VERSION := {}\", self.version.clone().unwrap())",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2296303482",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "crates/cli/src/version.rs",
        "discussion_id": "2296303482",
        "commented_code": "@@ -208,7 +265,7 @@ impl Version {\n             .lines()\n             .map(|line| {\n                 if line.starts_with(\"VERSION\") {\n-                    format!(\"VERSION := {}\", self.version)\n+                    format!(\"VERSION := {}\", self.version.clone().unwrap())",
        "comment_created_at": "2025-08-23T20:09:14+00:00",
        "comment_author": "WillLillis",
        "comment_body": "```suggestion\r\n                    format!(\"VERSION := {}\", self.version.as_ref().unwrap())\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2296303549",
    "pr_number": 4205,
    "pr_file": "crates/cli/src/version.rs",
    "created_at": "2025-08-23T20:09:25+00:00",
    "commented_code": "let cmake = fs::read_to_string(self.current_dir.join(\"CMakeLists.txt\"))?;\n \n         let re = Regex::new(r#\"(\\s*VERSION\\s+)\"[0-9]+\\.[0-9]+\\.[0-9]+\"\"#)?;\n-        let cmake = re.replace(&cmake, format!(r#\"$1\"{}\"\"#, self.version));\n+        let cmake = re.replace(&cmake, format!(r#\"$1\"{}\"\"#, self.version.clone().unwrap()));",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2296303549",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "crates/cli/src/version.rs",
        "discussion_id": "2296303549",
        "commented_code": "@@ -230,7 +287,7 @@ impl Version {\n         let cmake = fs::read_to_string(self.current_dir.join(\"CMakeLists.txt\"))?;\n \n         let re = Regex::new(r#\"(\\s*VERSION\\s+)\"[0-9]+\\.[0-9]+\\.[0-9]+\"\"#)?;\n-        let cmake = re.replace(&cmake, format!(r#\"$1\"{}\"\"#, self.version));\n+        let cmake = re.replace(&cmake, format!(r#\"$1\"{}\"\"#, self.version.clone().unwrap()));",
        "comment_created_at": "2025-08-23T20:09:25+00:00",
        "comment_author": "WillLillis",
        "comment_body": "```suggestion\r\n        let cmake = re.replace(&cmake, format!(r#\"$1\"{}\"\"#, self.version.as_ref().unwrap()));\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2296303807",
    "pr_number": 4205,
    "pr_file": "crates/cli/src/version.rs",
    "created_at": "2025-08-23T20:09:42+00:00",
    "commented_code": ".lines()\n             .map(|line| {\n                 if line.starts_with(\"version =\") {\n-                    format!(\"version = \\\"{}\\\"\", self.version)\n+                    format!(\"version = \\\"{}\\\"\", self.version.clone().unwrap())",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2296303807",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "crates/cli/src/version.rs",
        "discussion_id": "2296303807",
        "commented_code": "@@ -248,7 +305,7 @@ impl Version {\n             .lines()\n             .map(|line| {\n                 if line.starts_with(\"version =\") {\n-                    format!(\"version = \\\"{}\\\"\", self.version)\n+                    format!(\"version = \\\"{}\\\"\", self.version.clone().unwrap())",
        "comment_created_at": "2025-08-23T20:09:42+00:00",
        "comment_author": "WillLillis",
        "comment_body": "```suggestion\r\n                    format!(\"version = \\\"{}\\\"\", self.version.as_ref().unwrap())\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1886168295",
    "pr_number": 4010,
    "pr_file": "cli/src/test_tags.rs",
    "created_at": "2024-12-16T04:53:40+00:00",
    "commented_code": "directory: &Path,\n     use_color: bool,\n ) -> Result<()> {\n-    let mut failed = false;\n     println!(\"tags:\");\n+    test_tags_indented(loader, loader_config, tags_context, directory, use_color, 2)\n+}\n+\n+pub fn test_tags_indented(\n+    loader: &Loader,\n+    loader_config: &Config,\n+    tags_context: &mut TagsContext,\n+    directory: &Path,\n+    use_color: bool,\n+    indent_level: usize,\n+) -> Result<()> {\n+    let mut failed = false;\n+\n     for tag_test_file in fs::read_dir(directory)? {\n         let tag_test_file = tag_test_file?;\n         let test_file_path = tag_test_file.path();\n         let test_file_name = tag_test_file.file_name();\n-        let (language, language_config) = loader\n-            .language_configuration_for_file_name(&test_file_path)?\n-            .ok_or_else(|| {\n-                anyhow!(\n-                    \"{}\",\n-                    util::lang_not_found_for_path(test_file_path.as_path(), loader_config)\n-                )\n-            })?;\n-        let tags_config = language_config\n-            .tags_config(language)?\n-            .ok_or_else(|| anyhow!(\"No tags config found for {:?}\", test_file_path))?;\n-        match test_tag(\n-            tags_context,\n-            tags_config,\n-            fs::read(&test_file_path)?.as_slice(),\n-        ) {\n-            Ok(assertion_count) => {\n-                println!(\n-                    \"  \u2713 {} ({assertion_count} assertions)\",\n-                    paint(\n-                        use_color.then_some(AnsiColor::Green),\n-                        test_file_name.to_string_lossy().as_ref()\n-                    ),\n-                );\n+        print!(\n+            \"{indent:indent_level$}\",\n+            indent = \"\",\n+            indent_level = indent_level * 2\n+        );\n+        if test_file_path.is_dir() && test_file_path.read_dir()?.next().is_some() {\n+            println!(\"{}:\", test_file_name.into_string().unwrap());",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1886168295",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4010,
        "pr_file": "cli/src/test_tags.rs",
        "discussion_id": "1886168295",
        "commented_code": "@@ -49,47 +49,84 @@ pub fn test_tags(\n     directory: &Path,\n     use_color: bool,\n ) -> Result<()> {\n-    let mut failed = false;\n     println!(\"tags:\");\n+    test_tags_indented(loader, loader_config, tags_context, directory, use_color, 2)\n+}\n+\n+pub fn test_tags_indented(\n+    loader: &Loader,\n+    loader_config: &Config,\n+    tags_context: &mut TagsContext,\n+    directory: &Path,\n+    use_color: bool,\n+    indent_level: usize,\n+) -> Result<()> {\n+    let mut failed = false;\n+\n     for tag_test_file in fs::read_dir(directory)? {\n         let tag_test_file = tag_test_file?;\n         let test_file_path = tag_test_file.path();\n         let test_file_name = tag_test_file.file_name();\n-        let (language, language_config) = loader\n-            .language_configuration_for_file_name(&test_file_path)?\n-            .ok_or_else(|| {\n-                anyhow!(\n-                    \"{}\",\n-                    util::lang_not_found_for_path(test_file_path.as_path(), loader_config)\n-                )\n-            })?;\n-        let tags_config = language_config\n-            .tags_config(language)?\n-            .ok_or_else(|| anyhow!(\"No tags config found for {:?}\", test_file_path))?;\n-        match test_tag(\n-            tags_context,\n-            tags_config,\n-            fs::read(&test_file_path)?.as_slice(),\n-        ) {\n-            Ok(assertion_count) => {\n-                println!(\n-                    \"  \u2713 {} ({assertion_count} assertions)\",\n-                    paint(\n-                        use_color.then_some(AnsiColor::Green),\n-                        test_file_name.to_string_lossy().as_ref()\n-                    ),\n-                );\n+        print!(\n+            \"{indent:indent_level$}\",\n+            indent = \"\",\n+            indent_level = indent_level * 2\n+        );\n+        if test_file_path.is_dir() && test_file_path.read_dir()?.next().is_some() {\n+            println!(\"{}:\", test_file_name.into_string().unwrap());",
        "comment_created_at": "2024-12-16T04:53:40+00:00",
        "comment_author": "WillLillis",
        "comment_body": "Any reason for the `unwrap()` instead of `test_file_name.to_string_lossy()`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1886171940",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4010,
        "pr_file": "cli/src/test_tags.rs",
        "discussion_id": "1886168295",
        "commented_code": "@@ -49,47 +49,84 @@ pub fn test_tags(\n     directory: &Path,\n     use_color: bool,\n ) -> Result<()> {\n-    let mut failed = false;\n     println!(\"tags:\");\n+    test_tags_indented(loader, loader_config, tags_context, directory, use_color, 2)\n+}\n+\n+pub fn test_tags_indented(\n+    loader: &Loader,\n+    loader_config: &Config,\n+    tags_context: &mut TagsContext,\n+    directory: &Path,\n+    use_color: bool,\n+    indent_level: usize,\n+) -> Result<()> {\n+    let mut failed = false;\n+\n     for tag_test_file in fs::read_dir(directory)? {\n         let tag_test_file = tag_test_file?;\n         let test_file_path = tag_test_file.path();\n         let test_file_name = tag_test_file.file_name();\n-        let (language, language_config) = loader\n-            .language_configuration_for_file_name(&test_file_path)?\n-            .ok_or_else(|| {\n-                anyhow!(\n-                    \"{}\",\n-                    util::lang_not_found_for_path(test_file_path.as_path(), loader_config)\n-                )\n-            })?;\n-        let tags_config = language_config\n-            .tags_config(language)?\n-            .ok_or_else(|| anyhow!(\"No tags config found for {:?}\", test_file_path))?;\n-        match test_tag(\n-            tags_context,\n-            tags_config,\n-            fs::read(&test_file_path)?.as_slice(),\n-        ) {\n-            Ok(assertion_count) => {\n-                println!(\n-                    \"  \u2713 {} ({assertion_count} assertions)\",\n-                    paint(\n-                        use_color.then_some(AnsiColor::Green),\n-                        test_file_name.to_string_lossy().as_ref()\n-                    ),\n-                );\n+        print!(\n+            \"{indent:indent_level$}\",\n+            indent = \"\",\n+            indent_level = indent_level * 2\n+        );\n+        if test_file_path.is_dir() && test_file_path.read_dir()?.next().is_some() {\n+            println!(\"{}:\", test_file_name.into_string().unwrap());",
        "comment_created_at": "2024-12-16T04:59:46+00:00",
        "comment_author": "amaanq",
        "comment_body": "copied from https://github.com/tree-sitter/tree-sitter/blob/07aaf2322e0d5d7568d37e65cc7a951da252416b/cli/src/test_highlight.rs#L77\r\n\r\nI don't really expect anyone to use non-utf8 filenames for a test file, though it doesn't hurt to use `to_string_lossy` (I'll update the other callsite)",
        "pr_file_module": null
      },
      {
        "comment_id": "1886181621",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4010,
        "pr_file": "cli/src/test_tags.rs",
        "discussion_id": "1886168295",
        "commented_code": "@@ -49,47 +49,84 @@ pub fn test_tags(\n     directory: &Path,\n     use_color: bool,\n ) -> Result<()> {\n-    let mut failed = false;\n     println!(\"tags:\");\n+    test_tags_indented(loader, loader_config, tags_context, directory, use_color, 2)\n+}\n+\n+pub fn test_tags_indented(\n+    loader: &Loader,\n+    loader_config: &Config,\n+    tags_context: &mut TagsContext,\n+    directory: &Path,\n+    use_color: bool,\n+    indent_level: usize,\n+) -> Result<()> {\n+    let mut failed = false;\n+\n     for tag_test_file in fs::read_dir(directory)? {\n         let tag_test_file = tag_test_file?;\n         let test_file_path = tag_test_file.path();\n         let test_file_name = tag_test_file.file_name();\n-        let (language, language_config) = loader\n-            .language_configuration_for_file_name(&test_file_path)?\n-            .ok_or_else(|| {\n-                anyhow!(\n-                    \"{}\",\n-                    util::lang_not_found_for_path(test_file_path.as_path(), loader_config)\n-                )\n-            })?;\n-        let tags_config = language_config\n-            .tags_config(language)?\n-            .ok_or_else(|| anyhow!(\"No tags config found for {:?}\", test_file_path))?;\n-        match test_tag(\n-            tags_context,\n-            tags_config,\n-            fs::read(&test_file_path)?.as_slice(),\n-        ) {\n-            Ok(assertion_count) => {\n-                println!(\n-                    \"  \u2713 {} ({assertion_count} assertions)\",\n-                    paint(\n-                        use_color.then_some(AnsiColor::Green),\n-                        test_file_name.to_string_lossy().as_ref()\n-                    ),\n-                );\n+        print!(\n+            \"{indent:indent_level$}\",\n+            indent = \"\",\n+            indent_level = indent_level * 2\n+        );\n+        if test_file_path.is_dir() && test_file_path.read_dir()?.next().is_some() {\n+            println!(\"{}:\", test_file_name.into_string().unwrap());",
        "comment_created_at": "2024-12-16T05:15:59+00:00",
        "comment_author": "WillLillis",
        "comment_body": "Makes sense! I don't really expect it to be an issue either, but it can't really hurt to use the lossy form here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1817873756",
    "pr_number": 3828,
    "pr_file": "cli/generate/build.rs",
    "created_at": "2024-10-26T15:45:52+00:00",
    "commented_code": "+use std::{env, path::PathBuf, process::Command};\n+\n+fn main() {\n+    if let Some(git_sha) = read_git_sha() {\n+        println!(\"cargo:rustc-env=BUILD_SHA={git_sha}\");\n+    }\n+}\n+\n+// This is copied from the build.rs in parent directory. This should be updated if the\n+// parent build.rs gets fixes.\n+fn read_git_sha() -> Option<String> {\n+    let crate_path = PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n+\n+    if !crate_path\n+        .parent()\n+        .unwrap()",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1817873756",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3828,
        "pr_file": "cli/generate/build.rs",
        "discussion_id": "1817873756",
        "commented_code": "@@ -0,0 +1,33 @@\n+use std::{env, path::PathBuf, process::Command};\n+\n+fn main() {\n+    if let Some(git_sha) = read_git_sha() {\n+        println!(\"cargo:rustc-env=BUILD_SHA={git_sha}\");\n+    }\n+}\n+\n+// This is copied from the build.rs in parent directory. This should be updated if the\n+// parent build.rs gets fixes.\n+fn read_git_sha() -> Option<String> {\n+    let crate_path = PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n+\n+    if !crate_path\n+        .parent()\n+        .unwrap()",
        "comment_created_at": "2024-10-26T15:45:52+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "This will panic if there is no parent.",
        "pr_file_module": null
      },
      {
        "comment_id": "1817889443",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3828,
        "pr_file": "cli/generate/build.rs",
        "discussion_id": "1817873756",
        "commented_code": "@@ -0,0 +1,33 @@\n+use std::{env, path::PathBuf, process::Command};\n+\n+fn main() {\n+    if let Some(git_sha) = read_git_sha() {\n+        println!(\"cargo:rustc-env=BUILD_SHA={git_sha}\");\n+    }\n+}\n+\n+// This is copied from the build.rs in parent directory. This should be updated if the\n+// parent build.rs gets fixes.\n+fn read_git_sha() -> Option<String> {\n+    let crate_path = PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").unwrap());\n+\n+    if !crate_path\n+        .parent()\n+        .unwrap()",
        "comment_created_at": "2024-10-26T16:50:57+00:00",
        "comment_author": "dundargoc",
        "comment_body": "Added a `Some(crate_path.parent())?;` check before to return early. Should work, but unsure if it's idioamtic rust or whatever.",
        "pr_file_module": null
      }
    ]
  }
]