[
  {
    "discussion_id": "1898776638",
    "pr_number": 3938,
    "pr_file": "lib/src/language.c",
    "created_at": "2024-12-28T02:16:32+00:00",
    "commented_code": "return self->state_count;\n }\n \n+uint32_t ts_language_supertype_count(const TSLanguage *self) {\n+  return self->version >= LANGUAGE_VERSION_WITH_SUPERTYPE_INFO ? self->supertype_count : 0;",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1898776638",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3938,
        "pr_file": "lib/src/language.c",
        "discussion_id": "1898776638",
        "commented_code": "@@ -24,6 +24,29 @@ uint32_t ts_language_state_count(const TSLanguage *self) {\n   return self->state_count;\n }\n \n+uint32_t ts_language_supertype_count(const TSLanguage *self) {\n+  return self->version >= LANGUAGE_VERSION_WITH_SUPERTYPE_INFO ? self->supertype_count : 0;",
        "comment_created_at": "2024-12-28T02:16:32+00:00",
        "comment_author": "amaanq",
        "comment_body": "Gate this with `LANGUAGE_VERSION_WITH_RESERVED_WORDS` instead, and remove the other define",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1920928971",
    "pr_number": 3799,
    "pr_file": "cli/src/templates/py-binding.c",
    "created_at": "2025-01-18T02:07:52+00:00",
    "commented_code": "return PyCapsule_New(tree_sitter_LOWER_PARSER_NAME(), \"tree_sitter.Language\", NULL);\n }\n \n+static struct PyModuleDef_Slot slots[] = {\n+#if PY_MINOR_VERSION >= 13\n+    {Py_mod_gil, Py_MOD_GIL_NOT_USED},",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1920928971",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3799,
        "pr_file": "cli/src/templates/py-binding.c",
        "discussion_id": "1920928971",
        "commented_code": "@@ -8,6 +8,13 @@ static PyObject* _binding_language(PyObject *Py_UNUSED(self), PyObject *Py_UNUSE\n     return PyCapsule_New(tree_sitter_LOWER_PARSER_NAME(), \"tree_sitter.Language\", NULL);\n }\n \n+static struct PyModuleDef_Slot slots[] = {\n+#if PY_MINOR_VERSION >= 13\n+    {Py_mod_gil, Py_MOD_GIL_NOT_USED},",
        "comment_created_at": "2025-01-18T02:07:52+00:00",
        "comment_author": "amaanq",
        "comment_body": "Did you try this out without `Py_GIL_DISABLED` defined? It doesn't fail to compile if the system Python version is 3.13, because of this part in setup.py:\r\n\r\n```py\r\nif limited_api := not get_config_var(\"Py_GIL_DISABLED\"):\r\n    macros.append((\"Py_LIMITED_API\", \"0x030A0000\"))\r\n```\r\n\r\nThe error I get is:\r\n\r\n```\r\n      bindings/python/tree_sitter_javascript/binding.c:13:6: error: \u2018Py_mod_gil\u2019 undeclared here (not in a function)\r\n         13 |     {Py_mod_gil, Py_MOD_GIL_NOT_USED},\r\n            |      ^~~~~~~~~~\r\n      bindings/python/tree_sitter_javascript/binding.c:13:18: error: \u2018Py_MOD_GIL_NOT_USED\u2019 undeclared here (not in a function)\r\n         13 |     {Py_mod_gil, Py_MOD_GIL_NOT_USED},\r\n            |                  ^~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\nIf it's set to `0x030D0000` then it works, but Python bindings will *not* build with this change, so this should be updated.\r\n\r\nNote that my Python version is `3.13.1`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1903088913",
    "pr_number": 4068,
    "pr_file": "lib/src/wasm/stdlib.c",
    "created_at": "2025-01-04T12:05:44+00:00",
    "commented_code": "// as needed, and freeing is mostly a noop. But in the special case of freeing\n // the last-allocated pointer, we'll reuse that pointer again.\n \n+#ifdef TREE_SITTER_FEATURE_WASM",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1903088913",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4068,
        "pr_file": "lib/src/wasm/stdlib.c",
        "discussion_id": "1903088913",
        "commented_code": "@@ -3,6 +3,8 @@\n // as needed, and freeing is mostly a noop. But in the special case of freeing\n // the last-allocated pointer, we'll reuse that pointer again.\n \n+#ifdef TREE_SITTER_FEATURE_WASM",
        "comment_created_at": "2025-01-04T12:05:44+00:00",
        "comment_author": "0xLucasMarcal",
        "comment_body": "@ObserverOfTime Copied from `lib/src/wasm_store.c` to keep the same behavior.\r\nAlso this file requires some other changes in order to build successfully, but it's outside this PRs scope, it's related directly to wasm-enabled builds",
        "pr_file_module": null
      },
      {
        "comment_id": "1903090245",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4068,
        "pr_file": "lib/src/wasm/stdlib.c",
        "discussion_id": "1903088913",
        "commented_code": "@@ -3,6 +3,8 @@\n // as needed, and freeing is mostly a noop. But in the special case of freeing\n // the last-allocated pointer, we'll reuse that pointer again.\n \n+#ifdef TREE_SITTER_FEATURE_WASM",
        "comment_created_at": "2025-01-04T12:13:15+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "This shouldn't be necessary.",
        "pr_file_module": null
      },
      {
        "comment_id": "1903091229",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4068,
        "pr_file": "lib/src/wasm/stdlib.c",
        "discussion_id": "1903088913",
        "commented_code": "@@ -3,6 +3,8 @@\n // as needed, and freeing is mostly a noop. But in the special case of freeing\n // the last-allocated pointer, we'll reuse that pointer again.\n \n+#ifdef TREE_SITTER_FEATURE_WASM",
        "comment_created_at": "2025-01-04T12:22:18+00:00",
        "comment_author": "0xLucasMarcal",
        "comment_body": "The compiler complains about not finding `__builtin_wasm_memory_size` and `__builtin_wasm_memory_grow`. I'm not super familiar with wasm, but since all the other code that implements wasm (`.c`) stuff are wrapped with this same condition shouldn't cause any harm",
        "pr_file_module": null
      },
      {
        "comment_id": "1903341242",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4068,
        "pr_file": "lib/src/wasm/stdlib.c",
        "discussion_id": "1903088913",
        "commented_code": "@@ -3,6 +3,8 @@\n // as needed, and freeing is mostly a noop. But in the special case of freeing\n // the last-allocated pointer, we'll reuse that pointer again.\n \n+#ifdef TREE_SITTER_FEATURE_WASM",
        "comment_created_at": "2025-01-05T21:17:05+00:00",
        "comment_author": "amaanq",
        "comment_body": "Can you add this to wasm-stdlib.h then for consistency? Also, please add a newline character at eof",
        "pr_file_module": null
      },
      {
        "comment_id": "1903362838",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4068,
        "pr_file": "lib/src/wasm/stdlib.c",
        "discussion_id": "1903088913",
        "commented_code": "@@ -3,6 +3,8 @@\n // as needed, and freeing is mostly a noop. But in the special case of freeing\n // the last-allocated pointer, we'll reuse that pointer again.\n \n+#ifdef TREE_SITTER_FEATURE_WASM",
        "comment_created_at": "2025-01-05T23:42:01+00:00",
        "comment_author": "0xLucasMarcal",
        "comment_body": ":check:",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1694099427",
    "pr_number": 3475,
    "pr_file": "lib/src/tree.c",
    "created_at": "2024-07-28T06:14:07+00:00",
    "commented_code": "fclose(file);\n }\n \n-#else\n+#elif !defined(__wasi__) // WASI doesn't support dup",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1694099427",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3475,
        "pr_file": "lib/src/tree.c",
        "discussion_id": "1694099427",
        "commented_code": "@@ -148,7 +148,7 @@ void ts_tree_print_dot_graph(const TSTree *self, int fd) {\n   fclose(file);\n }\n \n-#else\n+#elif !defined(__wasi__) // WASI doesn't support dup",
        "comment_created_at": "2024-07-28T06:14:07+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "You should add a noop/aborting `ts_tree_print_dot_graph` definition for WASI.",
        "pr_file_module": null
      }
    ]
  }
]