[
  {
    "discussion_id": "2147369725",
    "pr_number": 4517,
    "pr_file": "lib/src/array.h",
    "created_at": "2025-06-14T22:50:58+00:00",
    "commented_code": "#include <string.h>\n \n #ifdef _MSC_VER\n-#pragma warning(push)\n-#pragma warning(disable : 4101)\n+# pragma warning(push)\n+# pragma warning(disable : 4101)\n #elif defined(__GNUC__) || defined(__clang__)\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wunused-variable\"\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Wunused-variable\"",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2147369725",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4517,
        "pr_file": "lib/src/array.h",
        "discussion_id": "2147369725",
        "commented_code": "@@ -14,27 +14,25 @@ extern \"C\" {\n #include <string.h>\n \n #ifdef _MSC_VER\n-#pragma warning(push)\n-#pragma warning(disable : 4101)\n+# pragma warning(push)\n+# pragma warning(disable : 4101)\n #elif defined(__GNUC__) || defined(__clang__)\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wunused-variable\"\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Wunused-variable\"",
        "comment_created_at": "2025-06-14T22:50:58+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Can we not have these spaces after the `#` in preprocessor directives?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1713045075",
    "pr_number": 3284,
    "pr_file": "cli/src/generate/templates/.editorconfig",
    "created_at": "2024-08-11T19:33:32+00:00",
    "commented_code": "[Makefile]\n indent_style = tab\n indent_size = 8\n+\n+[parser.c]\n+indent_size = 2",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1713045075",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3284,
        "pr_file": "cli/src/generate/templates/.editorconfig",
        "discussion_id": "1713045075",
        "commented_code": "@@ -37,3 +34,6 @@ indent_size = 8\n [Makefile]\n indent_style = tab\n indent_size = 8\n+\n+[parser.c]\n+indent_size = 2",
        "comment_created_at": "2024-08-11T19:33:32+00:00",
        "comment_author": "fwcd",
        "comment_body": "I think we need to add all of the generated headers too (`tree_sitter/{alloc,array,parser}.h`). Since almost all of the generated C code uses 2 spaces, maybe it would make sense to just use `indent_size = 2` for all C/C++ here for consistency? Projects that use 4-space indent for their scanners could still overwrite it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1269335410",
    "pr_number": 2411,
    "pr_file": "script/build-fuzzers",
    "created_at": "2023-07-20T11:35:42+00:00",
    "commented_code": "lang_scanner=\"${lang_dir}/src/scanner\"\n   if [ -e \"${lang_scanner}.cc\" ]; then\n-    $CXX $CXXFLAGS -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.cc\" -o \"${lang_scanner}.o\"\n+    $CXX \"$CXXFLAGS\" -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.cc\" -o \"${lang_scanner}.o\"\n     objects+=(\"${lang_scanner}.o\")\n   elif [ -e \"${lang_scanner}.c\" ]; then\n-    $CC $CFLAGS -std=c99 -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.c\" -o \"${lang_scanner}.o\"\n+    $CC \"$CFLAGS\" -std=c99 -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.c\" -o \"${lang_scanner}.o\"\n     objects+=(\"${lang_scanner}.o\")\n   fi\n \n \n   # Compiling with -O0 speeds up the build dramatically\n-  $CC $CFLAGS -g -O0 \"-I${lang_dir}/src\" \"${lang_dir}/src/parser.c\" -c -o \"${lang_dir}/src/parser.o\"\n+  $CC \"$CFLAGS\" -g -O0 \"-I${lang_dir}/src\" \"${lang_dir}/src/parser.c\" -c -o \"${lang_dir}/src/parser.o\"",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1269335410",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 2411,
        "pr_file": "script/build-fuzzers",
        "discussion_id": "1269335410",
        "commented_code": "@@ -39,34 +39,39 @@ for lang in ${languages[@]}; do\n \n   lang_scanner=\"${lang_dir}/src/scanner\"\n   if [ -e \"${lang_scanner}.cc\" ]; then\n-    $CXX $CXXFLAGS -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.cc\" -o \"${lang_scanner}.o\"\n+    $CXX \"$CXXFLAGS\" -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.cc\" -o \"${lang_scanner}.o\"\n     objects+=(\"${lang_scanner}.o\")\n   elif [ -e \"${lang_scanner}.c\" ]; then\n-    $CC $CFLAGS -std=c99 -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.c\" -o \"${lang_scanner}.o\"\n+    $CC \"$CFLAGS\" -std=c99 -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.c\" -o \"${lang_scanner}.o\"\n     objects+=(\"${lang_scanner}.o\")\n   fi\n \n \n   # Compiling with -O0 speeds up the build dramatically\n-  $CC $CFLAGS -g -O0 \"-I${lang_dir}/src\" \"${lang_dir}/src/parser.c\" -c -o \"${lang_dir}/src/parser.o\"\n+  $CC \"$CFLAGS\" -g -O0 \"-I${lang_dir}/src\" \"${lang_dir}/src/parser.c\" -c -o \"${lang_dir}/src/parser.o\"",
        "comment_created_at": "2023-07-20T11:35:42+00:00",
        "comment_author": "ahlinc",
        "comment_body": "Wrapping vars in double quotes breaks variables expansion in the shell in case if there are multiple parameters delimited with spaces. Please remove all added double quote wrappings.",
        "pr_file_module": null
      },
      {
        "comment_id": "1269777278",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 2411,
        "pr_file": "script/build-fuzzers",
        "discussion_id": "1269335410",
        "commented_code": "@@ -39,34 +39,39 @@ for lang in ${languages[@]}; do\n \n   lang_scanner=\"${lang_dir}/src/scanner\"\n   if [ -e \"${lang_scanner}.cc\" ]; then\n-    $CXX $CXXFLAGS -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.cc\" -o \"${lang_scanner}.o\"\n+    $CXX \"$CXXFLAGS\" -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.cc\" -o \"${lang_scanner}.o\"\n     objects+=(\"${lang_scanner}.o\")\n   elif [ -e \"${lang_scanner}.c\" ]; then\n-    $CC $CFLAGS -std=c99 -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.c\" -o \"${lang_scanner}.o\"\n+    $CC \"$CFLAGS\" -std=c99 -g -O1 \"-I${lang_dir}/src\" -c \"${lang_scanner}.c\" -o \"${lang_scanner}.o\"\n     objects+=(\"${lang_scanner}.o\")\n   fi\n \n \n   # Compiling with -O0 speeds up the build dramatically\n-  $CC $CFLAGS -g -O0 \"-I${lang_dir}/src\" \"${lang_dir}/src/parser.c\" -c -o \"${lang_dir}/src/parser.o\"\n+  $CC \"$CFLAGS\" -g -O0 \"-I${lang_dir}/src\" \"${lang_dir}/src/parser.c\" -c -o \"${lang_dir}/src/parser.o\"",
        "comment_created_at": "2023-07-20T17:43:06+00:00",
        "comment_author": "amaanq",
        "comment_body": "sure",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "338623775",
    "pr_number": 472,
    "pr_file": "test/fuzz/fuzzer.cc",
    "created_at": "2019-10-24T14:57:09+00:00",
    "commented_code": "#include <cassert>\n+#include <fstream>\n #include \"tree_sitter/api.h\"\n \n extern \"C\" const TSLanguage *TS_LANG();\n \n+static TSQuery *lang_query;\n+\n+extern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\n+  if(TS_LANG_QUERY_FILENAME[0]) {\n+    // The query filename is relative to the fuzzing binary. Convert it\n+    // to an absolute path first\n+    auto binary_filename = std::string((*argv)[0]);\n+    auto binary_directory = binary_filename.substr(0, binary_filename.find_last_of(\"\\\\/\"));\n+    auto lang_query_filename = binary_directory + std::string(\"/\") + std::string(TS_LANG_QUERY_FILENAME);",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "338623775",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 472,
        "pr_file": "test/fuzz/fuzzer.cc",
        "discussion_id": "338623775",
        "commented_code": "@@ -1,8 +1,40 @@\n #include <cassert>\n+#include <fstream>\n #include \"tree_sitter/api.h\"\n \n extern \"C\" const TSLanguage *TS_LANG();\n \n+static TSQuery *lang_query;\n+\n+extern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\n+  if(TS_LANG_QUERY_FILENAME[0]) {\n+    // The query filename is relative to the fuzzing binary. Convert it\n+    // to an absolute path first\n+    auto binary_filename = std::string((*argv)[0]);\n+    auto binary_directory = binary_filename.substr(0, binary_filename.find_last_of(\"\\\\/\"));\n+    auto lang_query_filename = binary_directory + std::string(\"/\") + std::string(TS_LANG_QUERY_FILENAME);",
        "comment_created_at": "2019-10-24T14:57:09+00:00",
        "comment_author": "philipturnbull",
        "comment_body": "I wanted to use `std::filesystem::path` but that is C++17 only \ud83d\ude22 ",
        "pr_file_module": null
      },
      {
        "comment_id": "338675190",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 472,
        "pr_file": "test/fuzz/fuzzer.cc",
        "discussion_id": "338623775",
        "commented_code": "@@ -1,8 +1,40 @@\n #include <cassert>\n+#include <fstream>\n #include \"tree_sitter/api.h\"\n \n extern \"C\" const TSLanguage *TS_LANG();\n \n+static TSQuery *lang_query;\n+\n+extern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\n+  if(TS_LANG_QUERY_FILENAME[0]) {\n+    // The query filename is relative to the fuzzing binary. Convert it\n+    // to an absolute path first\n+    auto binary_filename = std::string((*argv)[0]);\n+    auto binary_directory = binary_filename.substr(0, binary_filename.find_last_of(\"\\\\/\"));\n+    auto lang_query_filename = binary_directory + std::string(\"/\") + std::string(TS_LANG_QUERY_FILENAME);",
        "comment_created_at": "2019-10-24T16:33:02+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Very minor - I think you can make this slightly shorter using [`operator+(const std::string &, const char *)`](http://www.cplusplus.com/reference/string/string/operator+/).\r\n\r\n```suggestion\r\n    auto lang_query_filename = binary_directory + \"/\" + TS_LANG_QUERY_FILENAME;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "122522969",
    "pr_number": 77,
    "pr_file": "script/test",
    "created_at": "2017-06-16T20:03:30+00:00",
    "commented_code": "args+=(\"--reporter=singleline\")\n fi\n \n-make $target\n+if [[ ! -z \"$run_scan_build\" ]]; then",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "122522969",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 77,
        "pr_file": "script/test",
        "discussion_id": "122522969",
        "commented_code": "@@ -78,7 +87,11 @@ else\n   args+=(\"--reporter=singleline\")\n fi\n \n-make $target\n+if [[ ! -z \"$run_scan_build\" ]]; then",
        "comment_created_at": "2017-06-16T20:03:30+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "I think the combination `! -z` can be written `-n` (non-empty).",
        "pr_file_module": null
      }
    ]
  }
]