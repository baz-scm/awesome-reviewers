[
  {
    "discussion_id": "2051359438",
    "pr_number": 4205,
    "pr_file": "cli/src/main.rs",
    "created_at": "2025-04-19T03:03:47+00:00",
    "commented_code": "Parse(Parse),\n     /// Run a parser's tests\n     Test(Test),\n-    /// Increment the version of a grammar\n+    /// Print or increment the version of a grammar",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2051359438",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "cli/src/main.rs",
        "discussion_id": "2051359438",
        "commented_code": "@@ -53,7 +53,7 @@ enum Commands {\n     Parse(Parse),\n     /// Run a parser's tests\n     Test(Test),\n-    /// Increment the version of a grammar\n+    /// Print or increment the version of a grammar",
        "comment_created_at": "2025-04-19T03:03:47+00:00",
        "comment_author": "amaanq",
        "comment_body": "Nit, `display` over `print`\r\n\r\n```suggestion\r\n    /// Display or increment the version of a grammar\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051671975",
    "pr_number": 4205,
    "pr_file": "cli/src/main.rs",
    "created_at": "2025-04-20T08:48:43+00:00",
    "commented_code": "#[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Display or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n-    pub version: SemverVersion,\n+    #[arg(long_help = \"When present, the version to bump to\n\\\n+                       When absent with no flags present, displays the current version\n\\\n+                       When absent with the --bump flag present, bumps the current version\")]",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2051671975",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "cli/src/main.rs",
        "discussion_id": "2051671975",
        "commented_code": "@@ -290,11 +292,16 @@ struct Test {\n \n #[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Display or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n-    pub version: SemverVersion,\n+    #[arg(long_help = \"When present, the version to bump to\\n\\\n+                       When absent with no flags present, displays the current version\\n\\\n+                       When absent with the --bump flag present, bumps the current version\")]",
        "comment_created_at": "2025-04-20T08:48:43+00:00",
        "comment_author": "clason",
        "comment_body": "Is that still correct? If so, should specify _how_ the version is bumped.\r\n\r\n(Also, the description is a bit confusing, since the option makes no sense without the `--bump` flag. So the second line is impossible?)",
        "pr_file_module": null
      },
      {
        "comment_id": "2051705189",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "cli/src/main.rs",
        "discussion_id": "2051671975",
        "commented_code": "@@ -290,11 +292,16 @@ struct Test {\n \n #[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Display or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n-    pub version: SemverVersion,\n+    #[arg(long_help = \"When present, the version to bump to\\n\\\n+                       When absent with no flags present, displays the current version\\n\\\n+                       When absent with the --bump flag present, bumps the current version\")]",
        "comment_created_at": "2025-04-20T11:50:49+00:00",
        "comment_author": "jpt13653903",
        "comment_body": "Would it help to put examples into this help string?  Something like:\r\n\r\n```\r\ntree-sitter version: display the current version\r\ntree-sitter version <version>: bump to specified version\r\ntree-sitter version --bump <level>: automatic bump, see below for options\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2051816014",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "cli/src/main.rs",
        "discussion_id": "2051671975",
        "commented_code": "@@ -290,11 +292,16 @@ struct Test {\n \n #[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Display or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n-    pub version: SemverVersion,\n+    #[arg(long_help = \"When present, the version to bump to\\n\\\n+                       When absent with no flags present, displays the current version\\n\\\n+                       When absent with the --bump flag present, bumps the current version\")]",
        "comment_created_at": "2025-04-20T21:59:16+00:00",
        "comment_author": "jpt13653903",
        "comment_body": "Or maybe with less verbosity...\r\n\r\n```\r\nNo parameters: display the current version\r\n<version> only: bump to specified version\r\n--bump <level>: automatic bump, see below for options\r\n```\r\n?",
        "pr_file_module": null
      },
      {
        "comment_id": "2052053595",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "cli/src/main.rs",
        "discussion_id": "2051671975",
        "commented_code": "@@ -290,11 +292,16 @@ struct Test {\n \n #[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Display or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n-    pub version: SemverVersion,\n+    #[arg(long_help = \"When present, the version to bump to\\n\\\n+                       When absent with no flags present, displays the current version\\n\\\n+                       When absent with the --bump flag present, bumps the current version\")]",
        "comment_created_at": "2025-04-21T07:06:34+00:00",
        "comment_author": "jpt13653903",
        "comment_body": "I pushed an update...  It now renders the long help as:\r\n\r\n![image](https://github.com/user-attachments/assets/0cc45114-ab95-4269-ad47-5ad27723ca65)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2052923036",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "cli/src/main.rs",
        "discussion_id": "2051671975",
        "commented_code": "@@ -290,11 +292,16 @@ struct Test {\n \n #[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Display or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n-    pub version: SemverVersion,\n+    #[arg(long_help = \"When present, the version to bump to\\n\\\n+                       When absent with no flags present, displays the current version\\n\\\n+                       When absent with the --bump flag present, bumps the current version\")]",
        "comment_created_at": "2025-04-21T19:54:29+00:00",
        "comment_author": "jpt13653903",
        "comment_body": "I'm going to drop the \"see below for options\", and change \"Bump the version\" to \"Automatically bump from the current version\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2249189071",
    "pr_number": 4498,
    "pr_file": "crates/cli/src/main.rs",
    "created_at": "2025-08-02T09:57:41+00:00",
    "commented_code": "/// The path to the tree-sitter grammar directory\n     #[arg(long, short = 'p')]\n     pub grammar_path: Option<PathBuf>,\n+    /// Don't force rebuild the parser when `--grammar_path` is specified",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2249189071",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4498,
        "pr_file": "crates/cli/src/main.rs",
        "discussion_id": "2249189071",
        "commented_code": "@@ -170,6 +170,14 @@ struct Parse {\n     /// The path to the tree-sitter grammar directory\n     #[arg(long, short = 'p')]\n     pub grammar_path: Option<PathBuf>,\n+    /// Don't force rebuild the parser when `--grammar_path` is specified",
        "comment_created_at": "2025-08-02T09:57:41+00:00",
        "comment_author": "clason",
        "comment_body": "These comments are a bit misleading, if I understand the PR correctly. Isn't it more of a\n```rust\n/// `--grammar_path` implies force rebuild\n```\n?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1855545122",
    "pr_number": 3887,
    "pr_file": "cli/src/tests/query_test.rs",
    "created_at": "2024-11-24T21:43:42+00:00",
    "commented_code": "});\n }\n \n+#[test]\n+fn test_query_matches_capturing_missing_nodes() {\n+    allocations::record(|| {\n+        let language = get_language(\"javascript\");\n+        let query = Query::new(\n+            &language,\n+            \"\n+            (MISSING) @missing-node\n+            \",\n+        )\n+        .unwrap();\n+\n+        // Missing anonymous nodes\n+        assert_query_matches(\n+            &language,\n+            &query,\n+            \"if ({a: 'b'} {c: 'd'}) {\n+  x = function(a) { b; } function(c) { d; }\n+}\",",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1855545122",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3887,
        "pr_file": "cli/src/tests/query_test.rs",
        "discussion_id": "1855545122",
        "commented_code": "@@ -737,6 +737,57 @@ fn test_query_matches_capturing_error_nodes() {\n     });\n }\n \n+#[test]\n+fn test_query_matches_capturing_missing_nodes() {\n+    allocations::record(|| {\n+        let language = get_language(\"javascript\");\n+        let query = Query::new(\n+            &language,\n+            \"\n+            (MISSING) @missing-node\n+            \",\n+        )\n+        .unwrap();\n+\n+        // Missing anonymous nodes\n+        assert_query_matches(\n+            &language,\n+            &query,\n+            \"if ({a: 'b'} {c: 'd'}) {\n+  x = function(a) { b; } function(c) { d; }\n+}\",",
        "comment_created_at": "2024-11-24T21:43:42+00:00",
        "comment_author": "amaanq",
        "comment_body": "Can we comment what the missing node is and where with a carat? It's not immediately obvious to anyone else *what* exactly is missing in this test. Also, try to minimize the test case, there's too much going on that is not needed to test that querying a missing node works.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1299278413",
    "pr_number": 2538,
    "pr_file": "highlight/src/c_lib.rs",
    "created_at": "2023-08-19T23:19:21+00:00",
    "commented_code": "}))\n }\n \n+/// Deleteis a [`TSHighlighter`] instance.\n+///\n+/// # Safety\n+///\n+/// `this` must be non-null.\n #[no_mangle]\n-pub extern \"C\" fn ts_highlighter_delete(this: *mut TSHighlighter) {\n-    drop(unsafe { Box::from_raw(this) })\n+pub unsafe extern \"C\" fn ts_highlighter_delete(this: *mut TSHighlighter) {\n+    drop(Box::from_raw(this))\n }\n \n+/// Deleteis a [`TSHighlightBuffer`] instance.\n+///\n+/// # Safety\n+///\n+/// `this` must be non-null.",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1299278413",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 2538,
        "pr_file": "highlight/src/c_lib.rs",
        "discussion_id": "1299278413",
        "commented_code": "@@ -145,42 +152,60 @@ pub extern \"C\" fn ts_highlight_buffer_new() -> *mut TSHighlightBuffer {\n     }))\n }\n \n+/// Deleteis a [`TSHighlighter`] instance.\n+///\n+/// # Safety\n+///\n+/// `this` must be non-null.\n #[no_mangle]\n-pub extern \"C\" fn ts_highlighter_delete(this: *mut TSHighlighter) {\n-    drop(unsafe { Box::from_raw(this) })\n+pub unsafe extern \"C\" fn ts_highlighter_delete(this: *mut TSHighlighter) {\n+    drop(Box::from_raw(this))\n }\n \n+/// Deleteis a [`TSHighlightBuffer`] instance.\n+///\n+/// # Safety\n+///\n+/// `this` must be non-null.",
        "comment_created_at": "2023-08-19T23:19:21+00:00",
        "comment_author": "ahlinc",
        "comment_body": "If you don't have a tension to write a real docs for all this C API funcs right now I'd suggest to remove all such template doc messages because they don't provide useful meaning.",
        "pr_file_module": null
      }
    ]
  }
]