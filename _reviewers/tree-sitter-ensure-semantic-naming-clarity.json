[
  {
    "discussion_id": "1920710433",
    "pr_number": 4121,
    "pr_file": "lib/binding_web/test/node.test.ts",
    "created_at": "2025-01-17T20:35:34+00:00",
    "commented_code": "+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1920710433",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-17T20:35:34+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Why is the import called `TSParser`? I think it should just be `Parser`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1920809500",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-17T21:58:30+00:00",
        "comment_author": "amaanq",
        "comment_body": "Sure, but we have a variable called \"Parser\", which is of type \"Parser\" (but there is a conflict of names there, and we can call the default import whatever we want)",
        "pr_file_module": null
      },
      {
        "comment_id": "1920964506",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T05:11:37+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Didn\u2019t the default export used to be the Parser class? Seems like the the type and the class should be the same thing, not two different imports, similar to Node, Tree, etc.",
        "pr_file_module": null
      },
      {
        "comment_id": "1920985385",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T06:02:36+00:00",
        "comment_author": "amaanq",
        "comment_body": "The default export *is* the parser class, but when you import the default export, you can name it whatever you like. I did this because we have a declaration below, that looks like so:\r\n\r\n```ts\r\nimport TSParser from 'web-tree-sitter';\r\nconst Parser: typeof TSParser = await import('..').then(m => m.default);\r\n```\r\n\r\nBecause the variable, which is of type `Parser` from the `.d.ts` file, is *also* called `Parser`, we get a naming conflict. So I decided to just name the import `TSParser`. I'll swap them so it's a bit clearer.",
        "pr_file_module": null
      },
      {
        "comment_id": "1920991282",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T06:48:34+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "It might be better to ditch the default export.",
        "pr_file_module": null
      },
      {
        "comment_id": "1921000122",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T07:31:31+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "I still don\u2019t get what Parser is in this code. In that code you wrote, is Parser not identical to TSParser, since the helper just re-exports Parser?",
        "pr_file_module": null
      },
      {
        "comment_id": "1921000395",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T07:33:13+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Reading that, it looks like Parser and TSParser are just two different local names for the same class. Maybe I\u2019m missing something very subtle though?",
        "pr_file_module": null
      },
      {
        "comment_id": "1921004406",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T08:02:57+00:00",
        "comment_author": "amaanq",
        "comment_body": "one's used for type hinting/info (TSParser), and one's used as the type (Parser, declared later)",
        "pr_file_module": null
      },
      {
        "comment_id": "1921115232",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T17:35:34+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "I think the default export should just be the Parser class, which can be used as a type and also at runtime. I think that\u2019s usually how classes are in Typescript.\r\n\r\nand we can eliminate the separate type declarations file I think",
        "pr_file_module": null
      },
      {
        "comment_id": "1921117221",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T17:48:59+00:00",
        "comment_author": "amaanq",
        "comment_body": "Yeah the default export is the Parser class currently, the only reason we import 'web-tree-sitter' (which pulls in type info from `tree-sitter-web.d.ts`, is so we can annotate the \"Parser\" used in the tests with the type, since otherwise it's just given `any` when we import `..` (because we're importing the final compiled JS file). I'll push up some changes that should make it a lot clearer imo.",
        "pr_file_module": null
      },
      {
        "comment_id": "1921136182",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T19:15:04+00:00",
        "comment_author": "amaanq",
        "comment_body": "Also, I'd like to get rid of the type declarations file, but it's sorta hard. If we could restructure it a bit that'd work out, but the problem is, because every class/type is in its own file, tsc's generation of the types file throws each class in its own module like:\r\n\r\n```ts\r\ndeclare module \"language\" {\r\n    import { Internal } from \"constants\";\r\n    import { LookaheadIterator } from \"lookahead_iterator\";\r\n    import { Query } from \"query\";\r\n    export class Language {\r\n        private [0];\r\n        types: string[];\r\n        fields: (string | null)[];\r\n        constructor(internal: Internal, address: number);\r\n        get name(): string | null;\r\n        get version(): number;\r\n        get fieldCount(): number;\r\n        get stateCount(): number;\r\n        fieldIdForName(fieldName: string): number | null;\r\n        fieldNameForId(fieldId: number): string | null;\r\n        idForNodeType(type: string, named: boolean): number | null;\r\n        get nodeTypeCount(): number;\r\n        nodeTypeForId(typeId: number): string | null;\r\n        nodeTypeIsNamed(typeId: number): boolean;\r\n        nodeTypeIsVisible(typeId: number): boolean;\r\n        get supertypes(): number[];\r\n        subtypes(supertype: number): number[];\r\n        nextState(stateId: number, typeId: number): number;\r\n        lookaheadIterator(stateId: number): LookaheadIterator | null;\r\n        query(source: string): Query;\r\n        static load(input: string | Uint8Array): Promise<Language>;\r\n    }\r\n}\r\n```\r\n\r\nWhich is not what we want. I haven't been successful in wrangling this to throw everything under the Parser namespace, and remove \"internal\" stuff",
        "pr_file_module": null
      },
      {
        "comment_id": "1921269014",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T23:04:33+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "I think it\u2019s fine if it\u2019s not all part of the Parser namespace anymore. Maybe we stop having a default export, and just export all of the classes from the top-level module?",
        "pr_file_module": null
      },
      {
        "comment_id": "1921269605",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T23:05:39+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Sorry, I didn\u2019t mean to convey that I was attached to the default export in particular, I care more about the classes (including Parser) having a single way to import them, that works for both for type declarations and for runtime.",
        "pr_file_module": null
      },
      {
        "comment_id": "1921279020",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-18T23:44:18+00:00",
        "comment_author": "amaanq",
        "comment_body": "Oh yeah, I totally agree with that, and removing the default export + namespace mix would be a lot easier to manage w.r.t. generating the declaration file!",
        "pr_file_module": null
      },
      {
        "comment_id": "1921764249",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4121,
        "pr_file": "lib/binding_web/test/node.test.ts",
        "discussion_id": "1920710433",
        "commented_code": "@@ -0,0 +1,591 @@\n+import { describe, it, expect, beforeAll, beforeEach, afterEach } from 'vitest';\n+import TSParser, { type Language, type Tree, type SyntaxNode } from 'web-tree-sitter';",
        "comment_created_at": "2025-01-20T04:08:41+00:00",
        "comment_author": "amaanq",
        "comment_body": "Ok, this should be solved now, with some help from @savetheclocktower, [`dts-buddy`](https://github.com/Rich-Harris/dts-buddy) seems to be the best way to reliably generate a `.d.ts` file, and it also includes a sourcemap file, to enable rich goto def for users, going to the actual TypeScript source files and not just the `.d.ts` file.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "516306762",
    "pr_number": 787,
    "pr_file": "lib/binding_web/tree-sitter-web.d.ts",
    "created_at": "2020-11-02T22:51:37+00:00",
    "commented_code": "readonly version: number;\n       readonly fieldCount: number;\n \n-      fieldNameForId(fieldId: number): string | null\n-      fieldIdForName(fieldName: string): number | null\n+      fieldNameForId(fieldId: number): string | null;\n+      fieldIdForName(fieldName: string): number | null;\n+      query(source: string): Query;\n+    }\n+\n+    interface QueryResult {\n+      pattern: number;\n+      captures: { name: string; node: SyntaxNode }[];\n+    }\n+\n+    interface PredicateResult {\n+      operator: string;\n+      operands: { name: string; type: string }[];\n+    }\n+\n+    class Query {\n+      captureNames: string[];\n+\n+      delete(): void;\n+      matches(node: SyntaxNode, startPosition?: Point, endPosition?: Point): QueryResult[];\n+      captures(node: SyntaxNode, startPosition?: Point, endPosition?: Point): QueryResult[];",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "516306762",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 787,
        "pr_file": "lib/binding_web/tree-sitter-web.d.ts",
        "discussion_id": "516306762",
        "commented_code": "@@ -131,8 +132,28 @@ declare module 'web-tree-sitter' {\n       readonly version: number;\n       readonly fieldCount: number;\n \n-      fieldNameForId(fieldId: number): string | null\n-      fieldIdForName(fieldName: string): number | null\n+      fieldNameForId(fieldId: number): string | null;\n+      fieldIdForName(fieldName: string): number | null;\n+      query(source: string): Query;\n+    }\n+\n+    interface QueryResult {\n+      pattern: number;\n+      captures: { name: string; node: SyntaxNode }[];\n+    }\n+\n+    interface PredicateResult {\n+      operator: string;\n+      operands: { name: string; type: string }[];\n+    }\n+\n+    class Query {\n+      captureNames: string[];\n+\n+      delete(): void;\n+      matches(node: SyntaxNode, startPosition?: Point, endPosition?: Point): QueryResult[];\n+      captures(node: SyntaxNode, startPosition?: Point, endPosition?: Point): QueryResult[];",
        "comment_created_at": "2020-11-02T22:51:37+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "The `captures` and `matches` methods return arrays with different element types. I would call one of them `QueryCapture`, and one of them `QueryMatch`.\r\n\r\nA `QueryCapture` [has a `node` and a `name`](https://github.com/tree-sitter/tree-sitter/blob/99cd283e39d8dfb766fb365262fd08a419dd20a2/lib/binding_web/binding.js#L1044). A `QueryMatch` (as you wrote), has a `pattern` index, and a `captures` array, whose elements are `QueryCapture` objects.",
        "pr_file_module": null
      },
      {
        "comment_id": "516746913",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 787,
        "pr_file": "lib/binding_web/tree-sitter-web.d.ts",
        "discussion_id": "516306762",
        "commented_code": "@@ -131,8 +132,28 @@ declare module 'web-tree-sitter' {\n       readonly version: number;\n       readonly fieldCount: number;\n \n-      fieldNameForId(fieldId: number): string | null\n-      fieldIdForName(fieldName: string): number | null\n+      fieldNameForId(fieldId: number): string | null;\n+      fieldIdForName(fieldName: string): number | null;\n+      query(source: string): Query;\n+    }\n+\n+    interface QueryResult {\n+      pattern: number;\n+      captures: { name: string; node: SyntaxNode }[];\n+    }\n+\n+    interface PredicateResult {\n+      operator: string;\n+      operands: { name: string; type: string }[];\n+    }\n+\n+    class Query {\n+      captureNames: string[];\n+\n+      delete(): void;\n+      matches(node: SyntaxNode, startPosition?: Point, endPosition?: Point): QueryResult[];\n+      captures(node: SyntaxNode, startPosition?: Point, endPosition?: Point): QueryResult[];",
        "comment_created_at": "2020-11-03T15:20:50+00:00",
        "comment_author": "wingrunr21",
        "comment_body": "@maxbrunsfeld updated",
        "pr_file_module": null
      }
    ]
  }
]