[
  {
    "discussion_id": "2043666745",
    "pr_number": 4363,
    "pr_file": "lib/binding_web/lib/tree-sitter.c",
    "created_at": "2025-04-15T05:47:20+00:00",
    "commented_code": "buffer[4] = (const void *)node.context[3];\n }\n \n-static inline TSNode unmarshal_node(const TSTree *tree) {\n+static inline TSNode unmarshal_node(const void **buffer, const TSTree *tree) {\n   TSNode node;\n-  node.id = TRANSFER_BUFFER[0];\n-  node.context[0] = code_unit_to_byte((uint32_t)TRANSFER_BUFFER[1]);\n-  node.context[1] = (uint32_t)TRANSFER_BUFFER[2];\n-  node.context[2] = code_unit_to_byte((uint32_t)TRANSFER_BUFFER[3]);\n-  node.context[3] = (uint32_t)TRANSFER_BUFFER[4];\n+  node.id = buffer[0];\n+  node.context[0] = code_unit_to_byte((uint32_t)buffer[1]);\n+  node.context[1] = (uint32_t)buffer[2];\n+  node.context[2] = code_unit_to_byte((uint32_t)buffer[3]);\n+  node.context[3] = (uint32_t)buffer[4];\n   node.tree = tree;\n   return node;\n }",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2043666745",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4363,
        "pr_file": "lib/binding_web/lib/tree-sitter.c",
        "discussion_id": "2043666745",
        "commented_code": "@@ -44,13 +44,13 @@ static inline void marshal_node(const void **buffer, TSNode node) {\n   buffer[4] = (const void *)node.context[3];\n }\n \n-static inline TSNode unmarshal_node(const TSTree *tree) {\n+static inline TSNode unmarshal_node(const void **buffer, const TSTree *tree) {\n   TSNode node;\n-  node.id = TRANSFER_BUFFER[0];\n-  node.context[0] = code_unit_to_byte((uint32_t)TRANSFER_BUFFER[1]);\n-  node.context[1] = (uint32_t)TRANSFER_BUFFER[2];\n-  node.context[2] = code_unit_to_byte((uint32_t)TRANSFER_BUFFER[3]);\n-  node.context[3] = (uint32_t)TRANSFER_BUFFER[4];\n+  node.id = buffer[0];\n+  node.context[0] = code_unit_to_byte((uint32_t)buffer[1]);\n+  node.context[1] = (uint32_t)buffer[2];\n+  node.context[2] = code_unit_to_byte((uint32_t)buffer[3]);\n+  node.context[3] = (uint32_t)buffer[4];\n   node.tree = tree;\n   return node;\n }",
        "comment_created_at": "2025-04-15T05:47:20+00:00",
        "comment_author": "amaanq",
        "comment_body": "It'd be cheaper to take an index parameter instead - shift the offset to start indexing the `TRANSFER_BUFFER` by `index * SIZE_OF_NODE` ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "774146896",
    "pr_number": 1504,
    "pr_file": "lib/src/query.c",
    "created_at": "2021-12-22T20:08:57+00:00",
    "commented_code": "Array(Slice) slices;\n } SymbolTable;\n \n+/**\n+ * CaptureQuantififers - a data structure holding the quantifiers of pattern captures.\n+ */\n+typedef Array(TSQuantifier) CaptureQuantifiers;",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "774146896",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 1504,
        "pr_file": "lib/src/query.c",
        "discussion_id": "774146896",
        "commented_code": "@@ -119,6 +119,11 @@ typedef struct {\n   Array(Slice) slices;\n } SymbolTable;\n \n+/**\n+ * CaptureQuantififers - a data structure holding the quantifiers of pattern captures.\n+ */\n+typedef Array(TSQuantifier) CaptureQuantifiers;",
        "comment_created_at": "2021-12-22T20:08:57+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Optimization thoughts -\r\n\r\nCurrently, we allocate and free one of these lists on each sub-pattern of a query that contains a capture anywhere inside of it. And the length of the list is proportional to the numeric value of the largest capture id, so if a query has 50 captures, we'll allocate a 50-element list for any sub pattern *containing* the 50th capture.\r\n\r\nFor that reason, I wonder if it's worth making this `Array(uint8_t)`, and casting to `TSQuantifier` when reading from the array, so that we'll only use one byte per member. Currently, I think it'll represent `TSQuantifier` as an `int` (so 4 bytes).\r\n\r\nIt's a micro-optimization, but a pretty easy one to do. Thoughts?\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "782390436",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 1504,
        "pr_file": "lib/src/query.c",
        "discussion_id": "774146896",
        "commented_code": "@@ -119,6 +119,11 @@ typedef struct {\n   Array(Slice) slices;\n } SymbolTable;\n \n+/**\n+ * CaptureQuantififers - a data structure holding the quantifiers of pattern captures.\n+ */\n+typedef Array(TSQuantifier) CaptureQuantifiers;",
        "comment_created_at": "2022-01-11T17:44:23+00:00",
        "comment_author": "hendrikvanantwerpen",
        "comment_body": "That seems like it might be useful, and will be contained to the implementations of the `capture_quantifier*` procedures. I'll implement that change.",
        "pr_file_module": null
      }
    ]
  }
]