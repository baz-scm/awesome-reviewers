[
  {
    "discussion_id": "2051359028",
    "pr_number": 4205,
    "pr_file": "cli/src/main.rs",
    "created_at": "2025-04-19T03:01:09+00:00",
    "commented_code": "#[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Print or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n+    #[arg(\n+        default_value = \"0.0.0\",\n+        long_help = \"When present, the version to bump to\n\\\n+                     When absent with no flags present, prints the current version\n\\\n+                     When absent with flags present, bumps the current version\"\n+    )]\n     pub version: SemverVersion,",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2051359028",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "cli/src/main.rs",
        "discussion_id": "2051359028",
        "commented_code": "@@ -289,11 +289,25 @@ struct Test {\n \n #[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Print or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n+    #[arg(\n+        default_value = \"0.0.0\",\n+        long_help = \"When present, the version to bump to\\n\\\n+                     When absent with no flags present, prints the current version\\n\\\n+                     When absent with flags present, bumps the current version\"\n+    )]\n     pub version: SemverVersion,",
        "comment_created_at": "2025-04-19T03:01:09+00:00",
        "comment_author": "amaanq",
        "comment_body": "Make this an Option, and remove the default",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051359142",
    "pr_number": 4205,
    "pr_file": "cli/src/main.rs",
    "created_at": "2025-04-19T03:02:04+00:00",
    "commented_code": "#[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Print or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n+    #[arg(\n+        default_value = \"0.0.0\",\n+        long_help = \"When present, the version to bump to\n\\\n+                     When absent with no flags present, prints the current version\n\\\n+                     When absent with flags present, bumps the current version\"\n+    )]\n     pub version: SemverVersion,\n+    /// Bump the patch version\n+    #[arg(long)]\n+    pub bump: bool,\n+    /// Bump the minor version\n+    #[arg(long)]\n+    pub bump_minor: bool,\n+    /// Bump the major version\n+    #[arg(long)]\n+    pub bump_major: bool,",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2051359142",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "cli/src/main.rs",
        "discussion_id": "2051359142",
        "commented_code": "@@ -289,11 +289,25 @@ struct Test {\n \n #[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Print or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n+    #[arg(\n+        default_value = \"0.0.0\",\n+        long_help = \"When present, the version to bump to\\n\\\n+                     When absent with no flags present, prints the current version\\n\\\n+                     When absent with flags present, bumps the current version\"\n+    )]\n     pub version: SemverVersion,\n+    /// Bump the patch version\n+    #[arg(long)]\n+    pub bump: bool,\n+    /// Bump the minor version\n+    #[arg(long)]\n+    pub bump_minor: bool,\n+    /// Bump the major version\n+    #[arg(long)]\n+    pub bump_major: bool,",
        "comment_created_at": "2025-04-19T03:02:04+00:00",
        "comment_author": "amaanq",
        "comment_body": "Instead of 3 bool flags, this should be one argument, `bump`, that takes an enum, of which the enum has the major/minor/patch variants. Then, you can make patch the default variant.",
        "pr_file_module": null
      },
      {
        "comment_id": "2051442405",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "cli/src/main.rs",
        "discussion_id": "2051359142",
        "commented_code": "@@ -289,11 +289,25 @@ struct Test {\n \n #[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Print or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n+    #[arg(\n+        default_value = \"0.0.0\",\n+        long_help = \"When present, the version to bump to\\n\\\n+                     When absent with no flags present, prints the current version\\n\\\n+                     When absent with flags present, bumps the current version\"\n+    )]\n     pub version: SemverVersion,\n+    /// Bump the patch version\n+    #[arg(long)]\n+    pub bump: bool,\n+    /// Bump the minor version\n+    #[arg(long)]\n+    pub bump_minor: bool,\n+    /// Bump the major version\n+    #[arg(long)]\n+    pub bump_major: bool,",
        "comment_created_at": "2025-04-19T09:49:13+00:00",
        "comment_author": "jpt13653903",
        "comment_body": "I cannot get Rust to make \"patch\" the default variant.  The \"Optional\" wrapper is not playing along.\r\n\r\nI'm happy to leave it as explicit though.  You then say\r\n\r\n- `tree-sitter version` to display the current version\r\n- `tree-sitter version 1.2.3` to set it directly (current behaviour, which I do not want to change)\r\n- `tree-sitter version --bump patch` to bump the patch.\r\n- `tree-sitter version --bump minor` to bump the minor; etc.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2051442715",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4205,
        "pr_file": "cli/src/main.rs",
        "discussion_id": "2051359142",
        "commented_code": "@@ -289,11 +289,25 @@ struct Test {\n \n #[derive(Args)]\n #[command(alias = \"publish\")]\n-/// Increment the version of a grammar\n+/// Print or increment the version of a grammar\n struct Version {\n-    #[arg(num_args = 1)]\n     /// The version to bump to\n+    #[arg(\n+        default_value = \"0.0.0\",\n+        long_help = \"When present, the version to bump to\\n\\\n+                     When absent with no flags present, prints the current version\\n\\\n+                     When absent with flags present, bumps the current version\"\n+    )]\n     pub version: SemverVersion,\n+    /// Bump the patch version\n+    #[arg(long)]\n+    pub bump: bool,\n+    /// Bump the minor version\n+    #[arg(long)]\n+    pub bump_minor: bool,\n+    /// Bump the major version\n+    #[arg(long)]\n+    pub bump_major: bool,",
        "comment_created_at": "2025-04-19T09:50:44+00:00",
        "comment_author": "clason",
        "comment_body": "Works for me; the added default is only very minor QoL.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214723869",
    "pr_number": 4601,
    "pr_file": "crates/generate/src/generate.rs",
    "created_at": "2025-07-18T02:13:51+00:00",
    "commented_code": "mut abi_version: usize,\n     report_symbol_name: Option<&str>,\n     js_runtime: Option<&str>,\n+    json_only: bool,",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2214723869",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4601,
        "pr_file": "crates/generate/src/generate.rs",
        "discussion_id": "2214723869",
        "commented_code": "@@ -152,6 +164,7 @@ pub fn generate_parser_in_directory<T, U, V>(\n     mut abi_version: usize,\n     report_symbol_name: Option<&str>,\n     js_runtime: Option<&str>,\n+    json_only: bool,",
        "comment_created_at": "2025-07-18T02:13:51+00:00",
        "comment_author": "WillLillis",
        "comment_body": "I think just passing in the stage here would be better for readability. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2215744099",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4601,
        "pr_file": "crates/generate/src/generate.rs",
        "discussion_id": "2214723869",
        "commented_code": "@@ -152,6 +164,7 @@ pub fn generate_parser_in_directory<T, U, V>(\n     mut abi_version: usize,\n     report_symbol_name: Option<&str>,\n     js_runtime: Option<&str>,\n+    json_only: bool,",
        "comment_created_at": "2025-07-18T10:52:13+00:00",
        "comment_author": "wetneb",
        "comment_body": "I think it would imply moving the declaration of the `enum` to this crate. For it to `#[derive(ValueEnum)]` we would also need to add `clap` as a dependency to this crate, which doesn't sound so appropriate to me, does it? Or can you see a better solution?",
        "pr_file_module": null
      },
      {
        "comment_id": "2218038931",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4601,
        "pr_file": "crates/generate/src/generate.rs",
        "discussion_id": "2214723869",
        "commented_code": "@@ -152,6 +164,7 @@ pub fn generate_parser_in_directory<T, U, V>(\n     mut abi_version: usize,\n     report_symbol_name: Option<&str>,\n     js_runtime: Option<&str>,\n+    json_only: bool,",
        "comment_created_at": "2025-07-21T01:07:25+00:00",
        "comment_author": "WillLillis",
        "comment_body": "Ah good point. We definitely don't want to add the `clap` dependency to `generate`. We could make a wrapper type like this:\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/crates/cli/src/main.rs b/crates/cli/src/main.rs\r\nindex 89f254b0..94bfdea1 100644\r\n--- a/crates/cli/src/main.rs\r\n+++ b/crates/cli/src/main.rs\r\n@@ -85,7 +85,11 @@ struct Init {\r\n     pub grammar_path: Option<PathBuf>,\r\n }\r\n \r\n-#[derive(Clone, Debug, Default, ValueEnum, PartialEq, Eq)]\r\n+/// Defines the stages of parser generation that should be performed.\r\n+///\r\n+/// This serves as a serializable wrapper for [`tree_sitter_generate::Stage`], because\r\n+/// this needs to be passed in by the CLI tool.\r\n+#[derive(Copy, Clone, Debug, Default, ValueEnum, PartialEq, Eq)]\r\n enum GenerationStage {\r\n     /// Generate `grammar.json` and `node-types.json`\r\n     Json,\r\n@@ -96,6 +100,16 @@ enum GenerationStage {\r\n     Lib,\r\n }\r\n \r\n+impl Into<tree_sitter_generate::Stage> for GenerationStage {\r\n+    fn into(self) -> tree_sitter_generate::Stage {\r\n+        match self {\r\n+            GenerationStage::Json => tree_sitter_generate::Stage::Json,\r\n+            GenerationStage::Parser => tree_sitter_generate::Stage::Parser,\r\n+            GenerationStage::Lib => tree_sitter_generate::Stage::Lib,\r\n+        }\r\n+    }\r\n+}\r\n+\r\n #[derive(Args)]\r\n #[command(alias = \"gen\", alias = \"g\")]\r\n struct Generate {\r\n@@ -829,7 +843,7 @@ impl Generate {\r\n             abi_version,\r\n             self.report_states_for_rule.as_deref(),\r\n             self.js_runtime.as_deref(),\r\n-            stage == GenerationStage::Json,\r\n+            stage.into(),\r\n         ) {\r\n             if self.json {\r\n                 eprintln!(\"{}\", serde_json::to_string_pretty(&err)?);\r\ndiff --git a/crates/generate/src/generate.rs b/crates/generate/src/generate.rs\r\nindex d2fcb258..26774d1d 100644\r\n--- a/crates/generate/src/generate.rs\r\n+++ b/crates/generate/src/generate.rs\r\n@@ -157,6 +157,18 @@ impl From<semver::Error> for JSError {\r\n     }\r\n }\r\n \r\n+/// Defines the stages of parser generation that should be performed.\r\n+#[derive(Clone, Debug, Default, PartialEq, Eq)]\r\n+pub enum Stage {\r\n+    /// Generate `grammar.json` and `node-types.json`\r\n+    Json,\r\n+    /// Generate `parser.c` and related files\r\n+    #[default]\r\n+    Parser,\r\n+    /// Compile to a library\r\n+    Lib,\r\n+}\r\n+\r\n pub fn generate_parser_in_directory<T, U, V>(\r\n     repo_path: T,\r\n     out_path: Option<U>,\r\n@@ -164,7 +176,7 @@ pub fn generate_parser_in_directory<T, U, V>(\r\n     mut abi_version: usize,\r\n     report_symbol_name: Option<&str>,\r\n     js_runtime: Option<&str>,\r\n-    json_only: bool,\r\n+    stage: Stage,\r\n ) -> GenerateResult<()>\r\n where\r\n     T: Into<PathBuf>,\r\n@@ -211,7 +223,7 @@ where\r\n     // Parse and preprocess the grammar.\r\n     let input_grammar = parse_grammar(&grammar_json)?;\r\n \r\n-    if json_only {\r\n+    if stage == Stage::Json {\r\n         let node_types_json = generate_node_types_from_grammar(&input_grammar)?.node_types_json;\r\n         write_file(&src_path.join(\"node-types.json\"), node_types_json)?;\r\n         return Ok(());\r\n```\r\n\r\n</details>\r\n\r\nHowever after thinking on it some more I think going with a boolean parameter probably makes the most sense for this public API. I'm a still a bit unsure readability wise, since it's not super clear what `json_only` means by reading the function signature. How about instead we pass in `generate_parser` like so:\r\n\r\n```diff\r\ndiff --git a/crates/generate/src/generate.rs b/crates/generate/src/generate.rs\r\nindex d2fcb258..7ddbb1b1 100644\r\n--- a/crates/generate/src/generate.rs\r\n+++ b/crates/generate/src/generate.rs\r\n@@ -164,7 +164,7 @@ pub fn generate_parser_in_directory<T, U, V>(\r\n     mut abi_version: usize,\r\n     report_symbol_name: Option<&str>,\r\n     js_runtime: Option<&str>,\r\n-    json_only: bool,\r\n+    generate_parser: bool,\r\n ) -> GenerateResult<()>\r\n where\r\n     T: Into<PathBuf>,\r\n@@ -211,7 +211,7 @@ where\r\n     // Parse and preprocess the grammar.\r\n     let input_grammar = parse_grammar(&grammar_json)?;\r\n \r\n-    if json_only {\r\n+    if !generate_parser {\r\n         let node_types_json = generate_node_types_from_grammar(&input_grammar)?.node_types_json;\r\n         write_file(&src_path.join(\"node-types.json\"), node_types_json)?;\r\n         return Ok(());\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2218478882",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4601,
        "pr_file": "crates/generate/src/generate.rs",
        "discussion_id": "2214723869",
        "commented_code": "@@ -152,6 +164,7 @@ pub fn generate_parser_in_directory<T, U, V>(\n     mut abi_version: usize,\n     report_symbol_name: Option<&str>,\n     js_runtime: Option<&str>,\n+    json_only: bool,",
        "comment_created_at": "2025-07-21T08:10:03+00:00",
        "comment_author": "clason",
        "comment_body": "maybe simply `--parser=false` (default `true`)?",
        "pr_file_module": null
      },
      {
        "comment_id": "2233865712",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4601,
        "pr_file": "crates/generate/src/generate.rs",
        "discussion_id": "2214723869",
        "commented_code": "@@ -152,6 +164,7 @@ pub fn generate_parser_in_directory<T, U, V>(\n     mut abi_version: usize,\n     report_symbol_name: Option<&str>,\n     js_runtime: Option<&str>,\n+    json_only: bool,",
        "comment_created_at": "2025-07-27T08:35:18+00:00",
        "comment_author": "natalejoeraco1",
        "comment_body": "> I think it would imply moving the declaration of the `enum` to this crate. For it to `#[derive(ValueEnum)]` we would also need to add `clap` as a dependency to this crate, which doesn't sound so appropriate to me, does it? Or can you see a better solution?\n\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1300005897",
    "pr_number": 2545,
    "pr_file": "cli/loader/src/lib.rs",
    "created_at": "2023-08-21T11:51:02+00:00",
    "commented_code": "lib_path: &Path,\n     parser_c_path: &Path,\n     scanner_path: &Option<PathBuf>,\n+    external_files_paths: &[PathBuf],",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1300005897",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 2545,
        "pr_file": "cli/loader/src/lib.rs",
        "discussion_id": "1300005897",
        "commented_code": "@@ -929,6 +950,7 @@ fn needs_recompile(\n     lib_path: &Path,\n     parser_c_path: &Path,\n     scanner_path: &Option<PathBuf>,\n+    external_files_paths: &[PathBuf],",
        "comment_created_at": "2023-08-21T11:51:02+00:00",
        "comment_author": "ahlinc",
        "comment_body": "May be it's time to generalize this function and accept just a one paths related parameter:\r\n```rust\r\nchecking_paths: &[Path]\r\n```",
        "pr_file_module": null
      }
    ]
  }
]