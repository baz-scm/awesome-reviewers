[
  {
    "discussion_id": "2201448601",
    "pr_number": 4578,
    "pr_file": "crates/cli/src/templates/build.rs",
    "created_at": "2025-07-11T17:56:11+00:00",
    "commented_code": "let mut c_config = cc::Build::new();\n     c_config.std(\"c11\").include(src_dir);\n \n+    // Set a minimal C sysroot if building for wasm32-unknown-unknown.\n+    if std::env::var(\"TARGET\").unwrap() == \"wasm32-unknown-unknown\" {\n+        let sysroot_dir = std::path::Path::new(\"bindings/rust/wasm-sysroot\");\n+        c_config.include(sysroot_dir);\n+    }\n+\n     #[cfg(target_env = \"msvc\")]\n     c_config.flag(\"-utf-8\");",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2201448601",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4578,
        "pr_file": "crates/cli/src/templates/build.rs",
        "discussion_id": "2201448601",
        "commented_code": "@@ -4,6 +4,12 @@ fn main() {\n     let mut c_config = cc::Build::new();\n     c_config.std(\"c11\").include(src_dir);\n \n+    // Set a minimal C sysroot if building for wasm32-unknown-unknown.\n+    if std::env::var(\"TARGET\").unwrap() == \"wasm32-unknown-unknown\" {\n+        let sysroot_dir = std::path::Path::new(\"bindings/rust/wasm-sysroot\");\n+        c_config.include(sysroot_dir);\n+    }\n+\n     #[cfg(target_env = \"msvc\")]\n     c_config.flag(\"-utf-8\");",
        "comment_created_at": "2025-07-11T17:56:11+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "```suggestion\r\n    if cfg!(target_family = \"wasm\") {\r\n        let sysroot = std::path::Path::new(\"bindings/rust/wasm-sysroot\");\r\n        c_config.include(sysroot);\r\n    }\r\n\r\n    if cfg!(target_env = \"msvc\") {\r\n        c_config.flag(\"-utf-8\");\r\n    }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2201466874",
    "pr_number": 4578,
    "pr_file": "crates/cli/src/init.rs",
    "created_at": "2025-07-11T18:08:29+00:00",
    "commented_code": "generate_file(path, LIB_RS_TEMPLATE, language_name, &generate_opts)\n             })?;\n \n-            missing_path(path.join(\"build.rs\"), |path| {\n-                generate_file(path, BUILD_RS_TEMPLATE, language_name, &generate_opts)\n-            })?;\n+            missing_path_else(path.join(\"build.rs\"),\n+                allow_update,\n+                |path| {\n+                    generate_file(path, BUILD_RS_TEMPLATE, language_name, &generate_opts)\n+                },\n+                |path| {\n+                    let contents = fs::read_to_string(path)?;\n+                    if !contents.contains(\"wasm32-unknown-unknown\") {\n+                        generate_file(path, BUILD_RS_TEMPLATE, language_name, &generate_opts)?;\n+                    }",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "2201466874",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4578,
        "pr_file": "crates/cli/src/init.rs",
        "discussion_id": "2201466874",
        "commented_code": "@@ -369,9 +371,19 @@ pub fn generate_grammar_files(\n                 generate_file(path, LIB_RS_TEMPLATE, language_name, &generate_opts)\n             })?;\n \n-            missing_path(path.join(\"build.rs\"), |path| {\n-                generate_file(path, BUILD_RS_TEMPLATE, language_name, &generate_opts)\n-            })?;\n+            missing_path_else(path.join(\"build.rs\"),\n+                allow_update,\n+                |path| {\n+                    generate_file(path, BUILD_RS_TEMPLATE, language_name, &generate_opts)\n+                },\n+                |path| {\n+                    let contents = fs::read_to_string(path)?;\n+                    if !contents.contains(\"wasm32-unknown-unknown\") {\n+                        generate_file(path, BUILD_RS_TEMPLATE, language_name, &generate_opts)?;\n+                    }",
        "comment_created_at": "2025-07-11T18:08:29+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "```suggestion\r\n                    let mut contents = fs::read_to_string(path)?;\r\n                    if !contents.contains(\"wasm32-unknown-unknown\") {\r\n                        contents = contents\r\n                            .replace(\r\n                                indoc! {r#\"\r\n                                #[cfg(target_env = \"msvc\")]\r\n                                c_config.flag(\"-utf-8\");\r\n                                \"#},\r\n                                indoc! {r#\"\r\n                                if cfg!(target_family = \"wasm\") {\r\n                                    let sysroot = std::path::Path::new(\"bindings/rust/wasm-sysroot\");\r\n                                    c_config.include(sysroot);\r\n                                }\r\n\r\n                                if cfg!(target_env = \"msvc\") {\r\n                                    c_config.flag(\"-utf-8\");\r\n                                }\r\n                                \"#}\r\n                            );\r\n                        write_file(path, contents)?;\r\n                    }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1620313586",
    "pr_number": 3395,
    "pr_file": "lib/binding_rust/ffi.rs",
    "created_at": "2024-05-30T09:13:38+00:00",
    "commented_code": "include!(\"./bindings.rs\");\n \n #[cfg(any(unix, target_os = \"wasi\"))]\n+#[cfg(feature = \"std\")]",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1620313586",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3395,
        "pr_file": "lib/binding_rust/ffi.rs",
        "discussion_id": "1620313586",
        "commented_code": "@@ -9,6 +9,7 @@ include!(concat!(env!(\"OUT_DIR\"), \"/bindings.rs\"));\n include!(\"./bindings.rs\");\n \n #[cfg(any(unix, target_os = \"wasi\"))]\n+#[cfg(feature = \"std\")]",
        "comment_created_at": "2024-05-30T09:13:38+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "Should be merged with the above condition and also added to the windows version.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1620324085",
    "pr_number": 3395,
    "pr_file": "lib/binding_rust/lib.rs",
    "created_at": "2024-05-30T09:20:15+00:00",
    "commented_code": "#![doc = include_str!(\"./README.md\")]\n-\n+#![cfg_attr(not(feature = \"std\"), no_std)]\n pub mod ffi;\n mod util;\n \n+#[cfg(not(feature = \"std\"))]\n+extern crate alloc;",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1620324085",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3395,
        "pr_file": "lib/binding_rust/lib.rs",
        "discussion_id": "1620324085",
        "commented_code": "@@ -1,22 +1,32 @@\n #![doc = include_str!(\"./README.md\")]\n-\n+#![cfg_attr(not(feature = \"std\"), no_std)]\n pub mod ffi;\n mod util;\n \n+#[cfg(not(feature = \"std\"))]\n+extern crate alloc;",
        "comment_created_at": "2024-05-30T09:20:15+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "Is this required?",
        "pr_file_module": null
      },
      {
        "comment_id": "1620380661",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3395,
        "pr_file": "lib/binding_rust/lib.rs",
        "discussion_id": "1620324085",
        "commented_code": "@@ -1,22 +1,32 @@\n #![doc = include_str!(\"./README.md\")]\n-\n+#![cfg_attr(not(feature = \"std\"), no_std)]\n pub mod ffi;\n mod util;\n \n+#[cfg(not(feature = \"std\"))]\n+extern crate alloc;",
        "comment_created_at": "2024-05-30T09:49:47+00:00",
        "comment_author": "cathaysia",
        "comment_body": "yes, alloc crate not included by default, we need include it by hand.\r\n\r\nref: https://docs.rust-embedded.org/book/collections/index.html#using-alloc\r\n\r\n> [!NOTE]\r\n> rust seems has no `#![feature(alloc)]` at this time.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1540797944",
    "pr_number": 3223,
    "pr_file": "cli/src/generate/templates/build.rs",
    "created_at": "2024-03-27T10:04:44+00:00",
    "commented_code": "c_config.file(&parser_path);\n     println!(\"cargo:rerun-if-changed={}\", parser_path.to_str().unwrap());\n \n+    #[cfg(target_os = \"windows\")]\n+    c_config.flag(\"/utf-8\");",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1540797944",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3223,
        "pr_file": "cli/src/generate/templates/build.rs",
        "discussion_id": "1540797944",
        "commented_code": "@@ -8,6 +8,9 @@ fn main() {\n     c_config.file(&parser_path);\n     println!(\"cargo:rerun-if-changed={}\", parser_path.to_str().unwrap());\n \n+    #[cfg(target_os = \"windows\")]\n+    c_config.flag(\"/utf-8\");",
        "comment_created_at": "2024-03-27T10:04:44+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "```suggestion\r\n    #[cfg(target_env = \"msvc\")]\r\n    c_config.flag(\"-utf-8\");\r\n```\r\n\r\nThe flag should not be added in mingw and cc-rs uses dashes.",
        "pr_file_module": null
      },
      {
        "comment_id": "1547301537",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3223,
        "pr_file": "cli/src/generate/templates/build.rs",
        "discussion_id": "1540797944",
        "commented_code": "@@ -8,6 +8,9 @@ fn main() {\n     c_config.file(&parser_path);\n     println!(\"cargo:rerun-if-changed={}\", parser_path.to_str().unwrap());\n \n+    #[cfg(target_os = \"windows\")]\n+    c_config.flag(\"/utf-8\");",
        "comment_created_at": "2024-04-02T07:32:22+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "`msvc` not `windows`",
        "pr_file_module": null
      },
      {
        "comment_id": "1547324352",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3223,
        "pr_file": "cli/src/generate/templates/build.rs",
        "discussion_id": "1540797944",
        "commented_code": "@@ -8,6 +8,9 @@ fn main() {\n     c_config.file(&parser_path);\n     println!(\"cargo:rerun-if-changed={}\", parser_path.to_str().unwrap());\n \n+    #[cfg(target_os = \"windows\")]\n+    c_config.flag(\"/utf-8\");",
        "comment_created_at": "2024-04-02T07:47:47+00:00",
        "comment_author": "amaanq",
        "comment_body": "oops, sorry",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "482553962",
    "pr_number": 723,
    "pr_file": "cli/build.rs",
    "created_at": "2020-09-02T22:38:59+00:00",
    "commented_code": "-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::{env, fs};\n+use std::vec::Vec;\n \n fn main() {\n     if let Some(git_sha) = read_git_sha() {\n         println!(\"cargo:rustc-env={}={}\", \"BUILD_SHA\", git_sha);\n     }\n \n+    if wasm_files_present() {\n+        println!(\"cargo:rustc-cfg={}\", \"TREE_SITTER_EMBED_WASM_BINDING\");\n+    }\n+\n     println!(\n         \"cargo:rustc-env=BUILD_TARGET={}\",\n         std::env::var(\"TARGET\").unwrap()\n     );\n }\n \n+#[cfg(unix)]\n+fn required_files() -> Vec<&'static Path> {\n+    return vec![\n+        Path::new(\"../cli/src/web_ui.html\"),\n+        Path::new(\"../docs/assets/js/playground.js\"),\n+        Path::new(\"../lib/binding_web/tree-sitter.js\"),\n+        Path::new(\"../lib/binding_web/tree-sitter.wasm\")\n+        ];\n+}",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "482553962",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 723,
        "pr_file": "cli/build.rs",
        "discussion_id": "482553962",
        "commented_code": "@@ -1,17 +1,49 @@\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::{env, fs};\n+use std::vec::Vec;\n \n fn main() {\n     if let Some(git_sha) = read_git_sha() {\n         println!(\"cargo:rustc-env={}={}\", \"BUILD_SHA\", git_sha);\n     }\n \n+    if wasm_files_present() {\n+        println!(\"cargo:rustc-cfg={}\", \"TREE_SITTER_EMBED_WASM_BINDING\");\n+    }\n+\n     println!(\n         \"cargo:rustc-env=BUILD_TARGET={}\",\n         std::env::var(\"TARGET\").unwrap()\n     );\n }\n \n+#[cfg(unix)]\n+fn required_files() -> Vec<&'static Path> {\n+    return vec![\n+        Path::new(\"../cli/src/web_ui.html\"),\n+        Path::new(\"../docs/assets/js/playground.js\"),\n+        Path::new(\"../lib/binding_web/tree-sitter.js\"),\n+        Path::new(\"../lib/binding_web/tree-sitter.wasm\")\n+        ];\n+}",
        "comment_created_at": "2020-09-02T22:38:59+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "The files `web_ui.html` and `playground.js` are actually always present, and checked into the repo. So I think you only need to check for the existence of `tree-sitter.js` and `tree-sitter.wasm`.\r\n\r\nI actually don't think you need any platform-specific logic in this script. On Windows, `wasm_files_present` will return false, because we don't build the wasm binding on Windows (at least not on CI). If some windows user *does* have a working emscripten toolchain, they should be able to build Tree-sitter with the wasm binding embedded.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "482568923",
    "pr_number": 723,
    "pr_file": "cli/src/web_ui.rs",
    "created_at": "2020-09-02T22:51:25+00:00",
    "commented_code": "macro_rules! posix_resource {\n     ($name: tt, $path: tt) => {\n-        #[cfg(unix)]\n+        #[cfg(all(unix, TREE_SITTER_EMBED_WASM_BINDING))]",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "482568923",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 723,
        "pr_file": "cli/src/web_ui.rs",
        "discussion_id": "482568923",
        "commented_code": "@@ -22,7 +32,7 @@ macro_rules! resource {\n \n macro_rules! posix_resource {\n     ($name: tt, $path: tt) => {\n-        #[cfg(unix)]\n+        #[cfg(all(unix, TREE_SITTER_EMBED_WASM_BINDING))]",
        "comment_created_at": "2020-09-02T22:51:25+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "I think what we can do here is *replace* `#[cfg(unix)]` with `#[cfg(TREE_SITTER_EMBED_WASM_BINDING)]`. Basically, instead of a Posix/Windows distinction, we'll have the distinction between *embedded wasm files* and *non-embedded wasm files*.\r\n\r\nI think we can rename the `posix_resource` macro to something like `optional_resource` - a file which *may* or *may not* be embedded in the binary.",
        "pr_file_module": null
      }
    ]
  }
]