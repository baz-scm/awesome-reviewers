[
  {
    "discussion_id": "251285078",
    "pr_number": 260,
    "pr_file": "script/build-fuzzers",
    "created_at": "2019-01-28T05:25:03+00:00",
    "commented_code": "modes=(true halt false recover)\n   for i in 0 2; do\n-    $CXX $CXXFLAGS -std=c++11 -Iinclude -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n+    $CXX $CXXFLAGS -std=c++11 -I lib/include -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n       \"test/fuzz/fuzzer.cc\" \"${objects[@]}\" \\\n-      out/Fuzz/obj.target/libruntime.a \"$LIB_FUZZER_PATH\" \\\n+      libtree-sitter.a \"$LIB_FUZZER_PATH\" \\",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "251285078",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 260,
        "pr_file": "script/build-fuzzers",
        "discussion_id": "251285078",
        "commented_code": "@@ -56,9 +53,9 @@ for lang in ${languages[@]}; do\n \n   modes=(true halt false recover)\n   for i in 0 2; do\n-    $CXX $CXXFLAGS -std=c++11 -Iinclude -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n+    $CXX $CXXFLAGS -std=c++11 -I lib/include -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n       \"test/fuzz/fuzzer.cc\" \"${objects[@]}\" \\\n-      out/Fuzz/obj.target/libruntime.a \"$LIB_FUZZER_PATH\" \\\n+      libtree-sitter.a \"$LIB_FUZZER_PATH\" \\",
        "comment_created_at": "2019-01-28T05:25:03+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "/cc @philipturnbull - I don't have libfuzzer set up locally on my linux VM to try this, but I've attempted to adjust this script (`build-fuzzers`) and the fuzzing driver program (`fuzzer.cc`) so that they work with the new project structure.\r\n\r\nA summary of the changes:\r\n\r\n* We don't use `gyp` to create Makefiles anymore. Since the bulk of the project (the CLI code) is now built using Cargo, I don't think we need a \"build system\" for the C code anymore. Instead I just have a script (`script/build-lib`) which builds the C library. That script should respect the `CFLAGS` environment variable.\r\n\r\n    That script will produce a static library in the root directory: `./libtree-sitter.a`.\r\n\r\n* The headers are now located in `lib/include` instead of `include`.\r\n\r\n* I'm no longer using the term \"runtime\" to refer to the runtime library. The header file is now just called `tree_sitter/api.h`.",
        "pr_file_module": null
      },
      {
        "comment_id": "251285237",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 260,
        "pr_file": "script/build-fuzzers",
        "discussion_id": "251285078",
        "commented_code": "@@ -56,9 +53,9 @@ for lang in ${languages[@]}; do\n \n   modes=(true halt false recover)\n   for i in 0 2; do\n-    $CXX $CXXFLAGS -std=c++11 -Iinclude -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n+    $CXX $CXXFLAGS -std=c++11 -I lib/include -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n       \"test/fuzz/fuzzer.cc\" \"${objects[@]}\" \\\n-      out/Fuzz/obj.target/libruntime.a \"$LIB_FUZZER_PATH\" \\\n+      libtree-sitter.a \"$LIB_FUZZER_PATH\" \\",
        "comment_created_at": "2019-01-28T05:26:10+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "When you get a chance, would you mind taking a look at the new setup?",
        "pr_file_module": null
      },
      {
        "comment_id": "252741420",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 260,
        "pr_file": "script/build-fuzzers",
        "discussion_id": "251285078",
        "commented_code": "@@ -56,9 +53,9 @@ for lang in ${languages[@]}; do\n \n   modes=(true halt false recover)\n   for i in 0 2; do\n-    $CXX $CXXFLAGS -std=c++11 -Iinclude -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n+    $CXX $CXXFLAGS -std=c++11 -I lib/include -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n       \"test/fuzz/fuzzer.cc\" \"${objects[@]}\" \\\n-      out/Fuzz/obj.target/libruntime.a \"$LIB_FUZZER_PATH\" \\\n+      libtree-sitter.a \"$LIB_FUZZER_PATH\" \\",
        "comment_created_at": "2019-01-31T16:31:44+00:00",
        "comment_author": "philipturnbull",
        "comment_body": "I haven't got a libFuzzer setup to hand either \ud83d\ude13 The changes look sensible though. As long as the core library is implemented in C and we're able to override `$CFLAGS` everything should work correctly\r\n\r\nI should have some time next week to actually test this \ud83d\udc4d ",
        "pr_file_module": null
      },
      {
        "comment_id": "253962926",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 260,
        "pr_file": "script/build-fuzzers",
        "discussion_id": "251285078",
        "commented_code": "@@ -56,9 +53,9 @@ for lang in ${languages[@]}; do\n \n   modes=(true halt false recover)\n   for i in 0 2; do\n-    $CXX $CXXFLAGS -std=c++11 -Iinclude -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n+    $CXX $CXXFLAGS -std=c++11 -I lib/include -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n       \"test/fuzz/fuzzer.cc\" \"${objects[@]}\" \\\n-      out/Fuzz/obj.target/libruntime.a \"$LIB_FUZZER_PATH\" \\\n+      libtree-sitter.a \"$LIB_FUZZER_PATH\" \\",
        "comment_created_at": "2019-02-05T17:18:41+00:00",
        "comment_author": "philipturnbull",
        "comment_body": "Done, everything still works \ud83d\udc4d I pushed https://github.com/tree-sitter/tree-sitter/tree/rust-cli-fuzzing which contains three small changes unrelated to the rust changes. Feel free to merge/cherry-pick onto this branch",
        "pr_file_module": null
      },
      {
        "comment_id": "253968821",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 260,
        "pr_file": "script/build-fuzzers",
        "discussion_id": "251285078",
        "commented_code": "@@ -56,9 +53,9 @@ for lang in ${languages[@]}; do\n \n   modes=(true halt false recover)\n   for i in 0 2; do\n-    $CXX $CXXFLAGS -std=c++11 -Iinclude -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n+    $CXX $CXXFLAGS -std=c++11 -I lib/include -D TS_HALT_ON_ERROR=\"${modes[i]}\" -D TS_LANG=\"tree_sitter_$lang\" \\\n       \"test/fuzz/fuzzer.cc\" \"${objects[@]}\" \\\n-      out/Fuzz/obj.target/libruntime.a \"$LIB_FUZZER_PATH\" \\\n+      libtree-sitter.a \"$LIB_FUZZER_PATH\" \\",
        "comment_created_at": "2019-02-05T17:34:11+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Awesome! Thanks for those fixes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1269330400",
    "pr_number": 2411,
    "pr_file": "script/build-fuzzers",
    "created_at": "2023-07-20T11:31:32+00:00",
    "commented_code": "exit 1\n fi\n \n-if [[ -z \"$LIB_FUZZER_PATH\" ]]; then\n-  echo \"LIB_FUZZER_PATH not set\"\n-  exit 1\n-fi\n-\n-CC=${CC:-clang}\n-CXX=${CXX:-clang++}\n-LINK=${LINK:-clang++}\n+CC=clang\n+CXX=clang++",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1269330400",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 2411,
        "pr_file": "script/build-fuzzers",
        "discussion_id": "1269330400",
        "commented_code": "@@ -6,30 +6,30 @@ if [[ \"$(uname -s)\" != Linux ]]; then\n   exit 1\n fi\n \n-if [[ -z \"$LIB_FUZZER_PATH\" ]]; then\n-  echo \"LIB_FUZZER_PATH not set\"\n-  exit 1\n-fi\n-\n-CC=${CC:-clang}\n-CXX=${CXX:-clang++}\n-LINK=${LINK:-clang++}\n+CC=clang\n+CXX=clang++",
        "comment_created_at": "2023-07-20T11:31:32+00:00",
        "comment_author": "ahlinc",
        "comment_body": "Don't remove possibility to override from env",
        "pr_file_module": null
      },
      {
        "comment_id": "1269776548",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 2411,
        "pr_file": "script/build-fuzzers",
        "discussion_id": "1269330400",
        "commented_code": "@@ -6,30 +6,30 @@ if [[ \"$(uname -s)\" != Linux ]]; then\n   exit 1\n fi\n \n-if [[ -z \"$LIB_FUZZER_PATH\" ]]; then\n-  echo \"LIB_FUZZER_PATH not set\"\n-  exit 1\n-fi\n-\n-CC=${CC:-clang}\n-CXX=${CXX:-clang++}\n-LINK=${LINK:-clang++}\n+CC=clang\n+CXX=clang++",
        "comment_created_at": "2023-07-20T17:42:15+00:00",
        "comment_author": "amaanq",
        "comment_body": "right, was debugging why clang wasnt selected by the makefile, but LINK was unused",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "774735103",
    "pr_number": 1473,
    "pr_file": "lib/src/host.h",
    "created_at": "2021-12-23T18:53:33+00:00",
    "commented_code": "+\n+// Determine endian and pointer size based on known defines.\n+// TS_BIG_ENDIAN and TS_PTR_SIZE can be set as -D compiler arguments\n+// to override this.\n+\n+#if !defined(TS_BIG_ENDIAN)\n+#if (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__) \\\n+  || (defined( __APPLE_CC__) && (defined(__ppc__) || defined(__ppc64__)))\n+#define TS_BIG_ENDIAN 1\n+#else\n+#define TS_BIG_ENDIAN 0\n+#endif\n+#endif\n+\n+#if !defined(TS_PTR_SIZE)\n+#if UINTPTR_MAX == 0xFFFFFFFF",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "774735103",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 1473,
        "pr_file": "lib/src/host.h",
        "discussion_id": "774735103",
        "commented_code": "@@ -0,0 +1,21 @@\n+\n+// Determine endian and pointer size based on known defines.\n+// TS_BIG_ENDIAN and TS_PTR_SIZE can be set as -D compiler arguments\n+// to override this.\n+\n+#if !defined(TS_BIG_ENDIAN)\n+#if (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__) \\\n+  || (defined( __APPLE_CC__) && (defined(__ppc__) || defined(__ppc64__)))\n+#define TS_BIG_ENDIAN 1\n+#else\n+#define TS_BIG_ENDIAN 0\n+#endif\n+#endif\n+\n+#if !defined(TS_PTR_SIZE)\n+#if UINTPTR_MAX == 0xFFFFFFFF",
        "comment_created_at": "2021-12-23T18:53:33+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "This check seems reliable; do we need to allow `TS_PTR_SIZE` as a compiler argument?",
        "pr_file_module": null
      },
      {
        "comment_id": "775049901",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 1473,
        "pr_file": "lib/src/host.h",
        "discussion_id": "774735103",
        "commented_code": "@@ -0,0 +1,21 @@\n+\n+// Determine endian and pointer size based on known defines.\n+// TS_BIG_ENDIAN and TS_PTR_SIZE can be set as -D compiler arguments\n+// to override this.\n+\n+#if !defined(TS_BIG_ENDIAN)\n+#if (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__) \\\n+  || (defined( __APPLE_CC__) && (defined(__ppc__) || defined(__ppc64__)))\n+#define TS_BIG_ENDIAN 1\n+#else\n+#define TS_BIG_ENDIAN 0\n+#endif\n+#endif\n+\n+#if !defined(TS_PTR_SIZE)\n+#if UINTPTR_MAX == 0xFFFFFFFF",
        "comment_created_at": "2021-12-24T16:19:10+00:00",
        "comment_author": "thestr4ng3r",
        "comment_body": "From what I know, `uintptr_t` is part of C99, but an optional type, so I think it would be better to keep the option to set `TS_PTR_SIZE` from outside.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "412587042",
    "pr_number": 602,
    "pr_file": "Makefile",
    "created_at": "2020-04-22T00:42:01+00:00",
    "commented_code": "+VERSION := 0.16.5\n+\n+# install directory layout\n+PREFIX ?= /usr/local\n+INCLUDEDIR ?= $(PREFIX)/include\n+LIBDIR ?= $(PREFIX)/lib\n+PCLIBDIR ?= $(LIBDIR)/pkgconfig\n+\n+# collect sources\n+ifneq ($(AMALGAMATED),1)\n+\tSRC := $(wildcard lib/src/*.c)\n+\t# do not double-include amalgamation\n+\tSRC := $(filter-out lib/src/lib.c,$(SRC))\n+else\n+\t# use amalgamated build\n+\tSRC := lib/src/lib.c\n+endif\n+OBJ := $(SRC:.c=.o)\n+\n+# define default flags, and override to append mandatory flags\n+CFLAGS ?= -O3\n+override CFLAGS += -std=gnu99 -fPIC -Ilib/src -Ilib/include\n+LDFLAGS ?=\n+override LDFLAGS +=",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "412587042",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 602,
        "pr_file": "Makefile",
        "discussion_id": "412587042",
        "commented_code": "@@ -0,0 +1,68 @@\n+VERSION := 0.16.5\n+\n+# install directory layout\n+PREFIX ?= /usr/local\n+INCLUDEDIR ?= $(PREFIX)/include\n+LIBDIR ?= $(PREFIX)/lib\n+PCLIBDIR ?= $(LIBDIR)/pkgconfig\n+\n+# collect sources\n+ifneq ($(AMALGAMATED),1)\n+\tSRC := $(wildcard lib/src/*.c)\n+\t# do not double-include amalgamation\n+\tSRC := $(filter-out lib/src/lib.c,$(SRC))\n+else\n+\t# use amalgamated build\n+\tSRC := lib/src/lib.c\n+endif\n+OBJ := $(SRC:.c=.o)\n+\n+# define default flags, and override to append mandatory flags\n+CFLAGS ?= -O3\n+override CFLAGS += -std=gnu99 -fPIC -Ilib/src -Ilib/include\n+LDFLAGS ?=\n+override LDFLAGS +=",
        "comment_created_at": "2020-04-22T00:42:01+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Just curious - what is the effect of these two `LDFLAGS` lines (compared to not explicitly defining LDFLAGS at all)?",
        "pr_file_module": null
      },
      {
        "comment_id": "412608757",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 602,
        "pr_file": "Makefile",
        "discussion_id": "412587042",
        "commented_code": "@@ -0,0 +1,68 @@\n+VERSION := 0.16.5\n+\n+# install directory layout\n+PREFIX ?= /usr/local\n+INCLUDEDIR ?= $(PREFIX)/include\n+LIBDIR ?= $(PREFIX)/lib\n+PCLIBDIR ?= $(LIBDIR)/pkgconfig\n+\n+# collect sources\n+ifneq ($(AMALGAMATED),1)\n+\tSRC := $(wildcard lib/src/*.c)\n+\t# do not double-include amalgamation\n+\tSRC := $(filter-out lib/src/lib.c,$(SRC))\n+else\n+\t# use amalgamated build\n+\tSRC := lib/src/lib.c\n+endif\n+OBJ := $(SRC:.c=.o)\n+\n+# define default flags, and override to append mandatory flags\n+CFLAGS ?= -O3\n+override CFLAGS += -std=gnu99 -fPIC -Ilib/src -Ilib/include\n+LDFLAGS ?=\n+override LDFLAGS +=",
        "comment_created_at": "2020-04-22T01:47:19+00:00",
        "comment_author": "eli-schwartz",
        "comment_body": "Nothing at all, but they serve as documentation on how to do it properly if you ever do add something here.\r\n\r\nAs demonstrated by the CFLAGS handling, `FOO ?=` will set the default if you haven't specified it in the environment, and `override FOO +=` will append to FOO (the override keyword is needed to ensure this happens even the defaults were passed as `make FOO=...` rather than `FOO=... make`).\r\n\r\nIt could be removed and left to be inferred from the previous two lines, or if there are any LDFLAGS you'd like to use, they could be added here.",
        "pr_file_module": null
      },
      {
        "comment_id": "412637912",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 602,
        "pr_file": "Makefile",
        "discussion_id": "412587042",
        "commented_code": "@@ -0,0 +1,68 @@\n+VERSION := 0.16.5\n+\n+# install directory layout\n+PREFIX ?= /usr/local\n+INCLUDEDIR ?= $(PREFIX)/include\n+LIBDIR ?= $(PREFIX)/lib\n+PCLIBDIR ?= $(LIBDIR)/pkgconfig\n+\n+# collect sources\n+ifneq ($(AMALGAMATED),1)\n+\tSRC := $(wildcard lib/src/*.c)\n+\t# do not double-include amalgamation\n+\tSRC := $(filter-out lib/src/lib.c,$(SRC))\n+else\n+\t# use amalgamated build\n+\tSRC := lib/src/lib.c\n+endif\n+OBJ := $(SRC:.c=.o)\n+\n+# define default flags, and override to append mandatory flags\n+CFLAGS ?= -O3\n+override CFLAGS += -std=gnu99 -fPIC -Ilib/src -Ilib/include\n+LDFLAGS ?=\n+override LDFLAGS +=",
        "comment_created_at": "2020-04-22T03:16:10+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "I think I\u2019d slightly prefer to leave these out then. Thanks for the explanation.",
        "pr_file_module": null
      },
      {
        "comment_id": "412648318",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 602,
        "pr_file": "Makefile",
        "discussion_id": "412587042",
        "commented_code": "@@ -0,0 +1,68 @@\n+VERSION := 0.16.5\n+\n+# install directory layout\n+PREFIX ?= /usr/local\n+INCLUDEDIR ?= $(PREFIX)/include\n+LIBDIR ?= $(PREFIX)/lib\n+PCLIBDIR ?= $(LIBDIR)/pkgconfig\n+\n+# collect sources\n+ifneq ($(AMALGAMATED),1)\n+\tSRC := $(wildcard lib/src/*.c)\n+\t# do not double-include amalgamation\n+\tSRC := $(filter-out lib/src/lib.c,$(SRC))\n+else\n+\t# use amalgamated build\n+\tSRC := lib/src/lib.c\n+endif\n+OBJ := $(SRC:.c=.o)\n+\n+# define default flags, and override to append mandatory flags\n+CFLAGS ?= -O3\n+override CFLAGS += -std=gnu99 -fPIC -Ilib/src -Ilib/include\n+LDFLAGS ?=\n+override LDFLAGS +=",
        "comment_created_at": "2020-04-22T03:49:57+00:00",
        "comment_author": "eli-schwartz",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  }
]