[
  {
    "discussion_id": "1788537626",
    "pr_number": 3740,
    "pr_file": "lib/CMakeLists.txt",
    "created_at": "2024-10-05T08:17:01+00:00",
    "commented_code": "POSITION_INDEPENDENT_CODE ON\n                       SOVERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\")\n \n+add_definitions(-D_POSIX_C_SOURCE=200112L -D_DEFAULT_SOURCE)",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1788537626",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3740,
        "pr_file": "lib/CMakeLists.txt",
        "discussion_id": "1788537626",
        "commented_code": "@@ -71,6 +71,8 @@ set_target_properties(tree-sitter\n                       POSITION_INDEPENDENT_CODE ON\n                       SOVERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\")\n \n+add_definitions(-D_POSIX_C_SOURCE=200112L -D_DEFAULT_SOURCE)",
        "comment_created_at": "2024-10-05T08:17:01+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "```suggestion\r\ntarget_compile_definitions(tree-sitter PRIVATE _POSIX_C_SOURCE=200112L _DEFAULT_SOURCE)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1770564728",
    "pr_number": 3665,
    "pr_file": "lib/CMakeLists.txt",
    "created_at": "2024-09-22T14:16:49+00:00",
    "commented_code": "HOMEPAGE_URL \"https://tree-sitter.github.io/tree-sitter/\"\n         LANGUAGES C)\n \n-if(NOT MSVC)\n-  set(CMAKE_C_FLAGS \"-O3 -Wall -Wextra -Wshadow -Wno-unused-parameter -pedantic\")\n-endif(NOT MSVC)\n-\n option(BUILD_SHARED_LIBS \"Build using shared libraries\" ON)\n option(TREE_SITTER_FEATURE_WASM \"Enable the Wasm feature\" OFF)\n \n-file(GLOB TS_SOURCE_FILES src/*.c)\n-list(REMOVE_ITEM TS_SOURCE_FILES \"${PROJECT_SOURCE_DIR}/src/lib.c\")\n-\n-add_library(tree-sitter ${TS_SOURCE_FILES})\n+add_library(tree-sitter src/lib.c)\n \n target_include_directories(tree-sitter PRIVATE src src/wasm include)\n+if(NOT MSVC)\n+  target_compile_options(tree-sitter PRIVATE -O3 -Wall -Wextra -Wshadow -Wno-unused-parameter -pedantic)\n+endif()\n \n if(TREE_SITTER_FEATURE_WASM)\n-  if(NOT DEFINED CACHE{WASMTIME_INCLUDE_DIR})\n-    message(CHECK_START \"Looking for wasmtime headers\")\n-    find_path(WASMTIME_INCLUDE_DIR wasmtime.h\n-              PATHS ENV DEP_WASMTIME_C_API_INCLUDE\n-              REQUIRED)\n-    message(CHECK_PASS \"found\")\n-  endif(NOT DEFINED CACHE{WASMTIME_INCLUDE_DIR})\n-\n-  if(NOT DEFINED CACHE{WASMTIME_LIBRARY})\n-    message(CHECK_START \"Looking for wasmtime library\")\n-    find_library(WASMTIME_LIBRARY wasmtime\n-                 REQUIRED)\n-    message(CHECK_PASS \"found\")\n-  endif(NOT DEFINED CACHE{WASMTIME_LIBRARY})\n+  find_path(WASMTIME_INCLUDE_DIR wasmtime.h\n+            PATHS ENV DEP_WASMTIME_C_API_INCLUDE\n+            REQUIRED)\n+\n+  find_library(WASMTIME_LIBRARY wasmtime\n+               REQUIRED)",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1770564728",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3665,
        "pr_file": "lib/CMakeLists.txt",
        "discussion_id": "1770564728",
        "commented_code": "@@ -6,41 +6,29 @@ project(tree-sitter\n         HOMEPAGE_URL \"https://tree-sitter.github.io/tree-sitter/\"\n         LANGUAGES C)\n \n-if(NOT MSVC)\n-  set(CMAKE_C_FLAGS \"-O3 -Wall -Wextra -Wshadow -Wno-unused-parameter -pedantic\")\n-endif(NOT MSVC)\n-\n option(BUILD_SHARED_LIBS \"Build using shared libraries\" ON)\n option(TREE_SITTER_FEATURE_WASM \"Enable the Wasm feature\" OFF)\n \n-file(GLOB TS_SOURCE_FILES src/*.c)\n-list(REMOVE_ITEM TS_SOURCE_FILES \"${PROJECT_SOURCE_DIR}/src/lib.c\")\n-\n-add_library(tree-sitter ${TS_SOURCE_FILES})\n+add_library(tree-sitter src/lib.c)\n \n target_include_directories(tree-sitter PRIVATE src src/wasm include)\n+if(NOT MSVC)\n+  target_compile_options(tree-sitter PRIVATE -O3 -Wall -Wextra -Wshadow -Wno-unused-parameter -pedantic)\n+endif()\n \n if(TREE_SITTER_FEATURE_WASM)\n-  if(NOT DEFINED CACHE{WASMTIME_INCLUDE_DIR})\n-    message(CHECK_START \"Looking for wasmtime headers\")\n-    find_path(WASMTIME_INCLUDE_DIR wasmtime.h\n-              PATHS ENV DEP_WASMTIME_C_API_INCLUDE\n-              REQUIRED)\n-    message(CHECK_PASS \"found\")\n-  endif(NOT DEFINED CACHE{WASMTIME_INCLUDE_DIR})\n-\n-  if(NOT DEFINED CACHE{WASMTIME_LIBRARY})\n-    message(CHECK_START \"Looking for wasmtime library\")\n-    find_library(WASMTIME_LIBRARY wasmtime\n-                 REQUIRED)\n-    message(CHECK_PASS \"found\")\n-  endif(NOT DEFINED CACHE{WASMTIME_LIBRARY})\n+  find_path(WASMTIME_INCLUDE_DIR wasmtime.h\n+            PATHS ENV DEP_WASMTIME_C_API_INCLUDE\n+            REQUIRED)\n+\n+  find_library(WASMTIME_LIBRARY wasmtime\n+               REQUIRED)",
        "comment_created_at": "2024-09-22T14:16:49+00:00",
        "comment_author": "dundargoc",
        "comment_body": "We could use https://github.com/neovim/neovim/blob/master/cmake/FindWasmtime.cmake if we want to have a minimum/exact wasmtime version check. If I'm not mistaked then neovim and tree-sitter should require the same wasmtime versions, but pinging @clason for confirmation.",
        "pr_file_module": null
      },
      {
        "comment_id": "1774738593",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3665,
        "pr_file": "lib/CMakeLists.txt",
        "discussion_id": "1770564728",
        "commented_code": "@@ -6,41 +6,29 @@ project(tree-sitter\n         HOMEPAGE_URL \"https://tree-sitter.github.io/tree-sitter/\"\n         LANGUAGES C)\n \n-if(NOT MSVC)\n-  set(CMAKE_C_FLAGS \"-O3 -Wall -Wextra -Wshadow -Wno-unused-parameter -pedantic\")\n-endif(NOT MSVC)\n-\n option(BUILD_SHARED_LIBS \"Build using shared libraries\" ON)\n option(TREE_SITTER_FEATURE_WASM \"Enable the Wasm feature\" OFF)\n \n-file(GLOB TS_SOURCE_FILES src/*.c)\n-list(REMOVE_ITEM TS_SOURCE_FILES \"${PROJECT_SOURCE_DIR}/src/lib.c\")\n-\n-add_library(tree-sitter ${TS_SOURCE_FILES})\n+add_library(tree-sitter src/lib.c)\n \n target_include_directories(tree-sitter PRIVATE src src/wasm include)\n+if(NOT MSVC)\n+  target_compile_options(tree-sitter PRIVATE -O3 -Wall -Wextra -Wshadow -Wno-unused-parameter -pedantic)\n+endif()\n \n if(TREE_SITTER_FEATURE_WASM)\n-  if(NOT DEFINED CACHE{WASMTIME_INCLUDE_DIR})\n-    message(CHECK_START \"Looking for wasmtime headers\")\n-    find_path(WASMTIME_INCLUDE_DIR wasmtime.h\n-              PATHS ENV DEP_WASMTIME_C_API_INCLUDE\n-              REQUIRED)\n-    message(CHECK_PASS \"found\")\n-  endif(NOT DEFINED CACHE{WASMTIME_INCLUDE_DIR})\n-\n-  if(NOT DEFINED CACHE{WASMTIME_LIBRARY})\n-    message(CHECK_START \"Looking for wasmtime library\")\n-    find_library(WASMTIME_LIBRARY wasmtime\n-                 REQUIRED)\n-    message(CHECK_PASS \"found\")\n-  endif(NOT DEFINED CACHE{WASMTIME_LIBRARY})\n+  find_path(WASMTIME_INCLUDE_DIR wasmtime.h\n+            PATHS ENV DEP_WASMTIME_C_API_INCLUDE\n+            REQUIRED)\n+\n+  find_library(WASMTIME_LIBRARY wasmtime\n+               REQUIRED)",
        "comment_created_at": "2024-09-25T08:00:23+00:00",
        "comment_author": "clason",
        "comment_body": "Well, obviously the intersection of valid ranges cannot be empty... But it is a very good idea to ensure that a compatible version is found since distros will 1. require using system wasmtime and 2. yolo upgrade every chance they get (which is once a month on the 20th).\r\n\r\nFrom what it looks like, breaking changes are rare even in major version updates (unless we trigger them...) but you'll never know. If Neovim goes full wasm, then _not_ being able to rely on builds having a known-good version would be a dealbreaker.",
        "pr_file_module": null
      },
      {
        "comment_id": "1775049929",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3665,
        "pr_file": "lib/CMakeLists.txt",
        "discussion_id": "1770564728",
        "commented_code": "@@ -6,41 +6,29 @@ project(tree-sitter\n         HOMEPAGE_URL \"https://tree-sitter.github.io/tree-sitter/\"\n         LANGUAGES C)\n \n-if(NOT MSVC)\n-  set(CMAKE_C_FLAGS \"-O3 -Wall -Wextra -Wshadow -Wno-unused-parameter -pedantic\")\n-endif(NOT MSVC)\n-\n option(BUILD_SHARED_LIBS \"Build using shared libraries\" ON)\n option(TREE_SITTER_FEATURE_WASM \"Enable the Wasm feature\" OFF)\n \n-file(GLOB TS_SOURCE_FILES src/*.c)\n-list(REMOVE_ITEM TS_SOURCE_FILES \"${PROJECT_SOURCE_DIR}/src/lib.c\")\n-\n-add_library(tree-sitter ${TS_SOURCE_FILES})\n+add_library(tree-sitter src/lib.c)\n \n target_include_directories(tree-sitter PRIVATE src src/wasm include)\n+if(NOT MSVC)\n+  target_compile_options(tree-sitter PRIVATE -O3 -Wall -Wextra -Wshadow -Wno-unused-parameter -pedantic)\n+endif()\n \n if(TREE_SITTER_FEATURE_WASM)\n-  if(NOT DEFINED CACHE{WASMTIME_INCLUDE_DIR})\n-    message(CHECK_START \"Looking for wasmtime headers\")\n-    find_path(WASMTIME_INCLUDE_DIR wasmtime.h\n-              PATHS ENV DEP_WASMTIME_C_API_INCLUDE\n-              REQUIRED)\n-    message(CHECK_PASS \"found\")\n-  endif(NOT DEFINED CACHE{WASMTIME_INCLUDE_DIR})\n-\n-  if(NOT DEFINED CACHE{WASMTIME_LIBRARY})\n-    message(CHECK_START \"Looking for wasmtime library\")\n-    find_library(WASMTIME_LIBRARY wasmtime\n-                 REQUIRED)\n-    message(CHECK_PASS \"found\")\n-  endif(NOT DEFINED CACHE{WASMTIME_LIBRARY})\n+  find_path(WASMTIME_INCLUDE_DIR wasmtime.h\n+            PATHS ENV DEP_WASMTIME_C_API_INCLUDE\n+            REQUIRED)\n+\n+  find_library(WASMTIME_LIBRARY wasmtime\n+               REQUIRED)",
        "comment_created_at": "2024-09-25T11:24:29+00:00",
        "comment_author": "dundargoc",
        "comment_body": "Makes sense. Cmake requires using `find_package`/`FindWasmtime.cmake` but that makes the code somewhat more complex as seen here. If it's not strictly needed now but later then we can revisit this later on when we need this.",
        "pr_file_module": null
      }
    ]
  }
]