[
  {
    "discussion_id": "1898778144",
    "pr_number": 3938,
    "pr_file": "cli/generate/src/render.rs",
    "created_at": "2024-12-28T02:31:43+00:00",
    "commented_code": "add_line!(self, \".field_map_slices = ts_field_map_slices,\");\n             add_line!(self, \".field_map_entries = ts_field_map_entries,\");\n         }\n+        if !self.supertype_map.is_empty() && self.abi_version >= ABI_VERSION_WITH_SUPERTYPE_INFO {\n+            add_line!(self, \".supertype_map_slices = ts_supertype_map_slices,\");\n+            add_line!(self, \".supertype_map_entries = ts_supertype_map_entries,\");\n+            add_line!(self, \".supertypes = ts_supertypes,\");",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1898778144",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 3938,
        "pr_file": "cli/generate/src/render.rs",
        "discussion_id": "1898778144",
        "commented_code": "@@ -1483,6 +1565,11 @@ impl Generator {\n             add_line!(self, \".field_map_slices = ts_field_map_slices,\");\n             add_line!(self, \".field_map_entries = ts_field_map_entries,\");\n         }\n+        if !self.supertype_map.is_empty() && self.abi_version >= ABI_VERSION_WITH_SUPERTYPE_INFO {\n+            add_line!(self, \".supertype_map_slices = ts_supertype_map_slices,\");\n+            add_line!(self, \".supertype_map_entries = ts_supertype_map_entries,\");\n+            add_line!(self, \".supertypes = ts_supertypes,\");",
        "comment_created_at": "2024-12-28T02:31:43+00:00",
        "comment_author": "amaanq",
        "comment_body": "I think calling this field `supertype_symbols` would be clearer, and then the corresponding const array `ts_supertype_symbols`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1902196547",
    "pr_number": 4048,
    "pr_file": "cli/generate/src/parse_grammar.rs",
    "created_at": "2025-01-03T21:55:34+00:00",
    "commented_code": "reserved: Map<String, Value>,\n }\n \n+pub type ParseGrammarResult<T> = Result<T, ParseGrammarError>;\n+\n+#[derive(Debug, Error, Serialize)]\n+pub enum ParseGrammarError {\n+    #[error(\"{0}\")]\n+    Serialization(String),\n+    #[error(\"Rules in the `extras` array must not contain empty strings\")]\n+    ExtrasArrayEmptyStrings,\n+    #[error(\"Invalid rule in precedences array. Only strings and symbols are allowed\")]\n+    InvalidRule,\n+    #[error(\"reserved word sets must be arrays\")]\n+    ReservedWordSet,",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1902196547",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4048,
        "pr_file": "cli/generate/src/parse_grammar.rs",
        "discussion_id": "1902196547",
        "commented_code": "@@ -104,6 +105,26 @@ pub struct GrammarJSON {\n     reserved: Map<String, Value>,\n }\n \n+pub type ParseGrammarResult<T> = Result<T, ParseGrammarError>;\n+\n+#[derive(Debug, Error, Serialize)]\n+pub enum ParseGrammarError {\n+    #[error(\"{0}\")]\n+    Serialization(String),\n+    #[error(\"Rules in the `extras` array must not contain empty strings\")]\n+    ExtrasArrayEmptyStrings,\n+    #[error(\"Invalid rule in precedences array. Only strings and symbols are allowed\")]\n+    InvalidRule,\n+    #[error(\"reserved word sets must be arrays\")]\n+    ReservedWordSet,",
        "comment_created_at": "2025-01-03T21:55:34+00:00",
        "comment_author": "amaanq",
        "comment_body": "`ReservedWordSet` itself doesn't tell me much unless i look at the error message, let's call this `InvalidReservedWordSet` instead",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1902200606",
    "pr_number": 4048,
    "pr_file": "cli/generate/src/node_types.rs",
    "created_at": "2025-01-03T22:03:38+00:00",
    "commented_code": "for supertype_symbol in &syntax_grammar.supertype_symbols {\n         if result[supertype_symbol.index].has_multi_step_production {\n             let variable = &syntax_grammar.variables[supertype_symbol.index];\n-            return Err(anyhow!(\n-                concat!(\n-                    \"Grammar error: Supertype symbols must always \",\n-                    \"have a single visible child, but `{}` can have multiple\"\n-                ),\n-                variable.name\n-            ));\n+            Err(VariableInfoError::SuperTypeSymbol(variable.name.clone()))?;",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1902200606",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 4048,
        "pr_file": "cli/generate/src/node_types.rs",
        "discussion_id": "1902200606",
        "commented_code": "@@ -338,13 +347,7 @@ pub fn get_variable_info(\n     for supertype_symbol in &syntax_grammar.supertype_symbols {\n         if result[supertype_symbol.index].has_multi_step_production {\n             let variable = &syntax_grammar.variables[supertype_symbol.index];\n-            return Err(anyhow!(\n-                concat!(\n-                    \"Grammar error: Supertype symbols must always \",\n-                    \"have a single visible child, but `{}` can have multiple\"\n-                ),\n-                variable.name\n-            ));\n+            Err(VariableInfoError::SuperTypeSymbol(variable.name.clone()))?;",
        "comment_created_at": "2025-01-03T22:03:38+00:00",
        "comment_author": "amaanq",
        "comment_body": "Supertype not SuperType, and this could be named `InvalidSupertype`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1274147202",
    "pr_number": 2432,
    "pr_file": "lib/binding_rust/lib.rs",
    "created_at": "2023-07-25T21:38:47+00:00",
    "commented_code": "}\n \n /// A sequence of `QueryMatch`es associated with a given `QueryCursor`.\n-pub struct QueryMatches<'a, 'tree: 'a, T: TextProvider<'a>> {\n+pub struct QueryMatches<'a, 'tree: 'a, 'b: 'a, T: TextProvider<'b>> {",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1274147202",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 2432,
        "pr_file": "lib/binding_rust/lib.rs",
        "discussion_id": "1274147202",
        "commented_code": "@@ -172,23 +172,25 @@ pub struct QueryMatch<'cursor, 'tree> {\n }\n \n /// A sequence of `QueryMatch`es associated with a given `QueryCursor`.\n-pub struct QueryMatches<'a, 'tree: 'a, T: TextProvider<'a>> {\n+pub struct QueryMatches<'a, 'tree: 'a, 'b: 'a, T: TextProvider<'b>> {",
        "comment_created_at": "2023-07-25T21:38:47+00:00",
        "comment_author": "helixbass",
        "comment_body": "Maybe a more specific name than `'b`? Eg `'text_provider`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "513644664",
    "pr_number": 775,
    "pr_file": "cli/src/query_testing.rs",
    "created_at": "2020-10-28T17:47:10+00:00",
    "commented_code": "+use crate::error;\n+use crate::error::Result;\n+use lazy_static::lazy_static;\n+use regex::Regex;\n+use std::collections::hash_map::HashMap;\n+use std::fs;\n+use tree_sitter::{Language, Parser, Point};\n+\n+lazy_static! {\n+    static ref PROPERTY_NAME_REGEX: Regex = Regex::new(\"[\\\\w_\\\\-.]+\").unwrap();\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+pub struct CaptureInfo {\n+    pub name: String,\n+    pub position: Point,\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct Assertion {\n+    pub position: Point,\n+    pub expected: String,",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "513644664",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 775,
        "pr_file": "cli/src/query_testing.rs",
        "discussion_id": "513644664",
        "commented_code": "@@ -0,0 +1,154 @@\n+use crate::error;\n+use crate::error::Result;\n+use lazy_static::lazy_static;\n+use regex::Regex;\n+use std::collections::hash_map::HashMap;\n+use std::fs;\n+use tree_sitter::{Language, Parser, Point};\n+\n+lazy_static! {\n+    static ref PROPERTY_NAME_REGEX: Regex = Regex::new(\"[\\\\w_\\\\-.]+\").unwrap();\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+pub struct CaptureInfo {\n+    pub name: String,\n+    pub position: Point,\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct Assertion {\n+    pub position: Point,\n+    pub expected: String,",
        "comment_created_at": "2020-10-28T17:47:10+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "What do you think of calling this field `capture_name`, or `expected_capture_name`, to indicate what the string represents?",
        "pr_file_module": null
      }
    ]
  }
]