[
  {
    "discussion_id": "121196969",
    "pr_number": 76,
    "pr_file": "src/compiler/build_tables/build_parse_table.cc",
    "created_at": "2017-06-09T18:45:27+00:00",
    "commented_code": "} else {\n         ParseState &state = *iter;\n         state.each_referenced_state([&new_state_ids](ParseStateId *state_index) {\n-          *state_index = new_state_ids[*state_index];\n+          if (*state_index != (ParseStateId)(-1))\n+            *state_index = new_state_ids[*state_index];",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "121196969",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 76,
        "pr_file": "src/compiler/build_tables/build_parse_table.cc",
        "discussion_id": "121196969",
        "commented_code": "@@ -394,7 +394,8 @@ class ParseTableBuilder {\n       } else {\n         ParseState &state = *iter;\n         state.each_referenced_state([&new_state_ids](ParseStateId *state_index) {\n-          *state_index = new_state_ids[*state_index];\n+          if (*state_index != (ParseStateId)(-1))\n+            *state_index = new_state_ids[*state_index];",
        "comment_created_at": "2017-06-09T18:45:27+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "My intention was to for `each_referenced_state` to only call this callback with valid state indices, so we shouldn't have to check them here.\r\n\r\nI think all we need is your other fix to `each_referenced_state` itself, plus the one additional check I mention below.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "121197435",
    "pr_number": 76,
    "pr_file": "src/compiler/parse_table.cc",
    "created_at": "2017-06-09T18:47:38+00:00",
    "commented_code": "void ParseState::each_referenced_state(function<void(ParseStateId *)> fn) {\n   for (auto &entry : terminal_entries)\n     for (ParseAction &action : entry.second.actions)\n-      if (action.type == ParseActionTypeShift || ParseActionTypeRecover)\n+      if (action.type == ParseActionTypeShift || action.type == ParseActionTypeRecover)",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "121197435",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 76,
        "pr_file": "src/compiler/parse_table.cc",
        "discussion_id": "121197435",
        "commented_code": "@@ -151,7 +151,7 @@ bool ParseState::has_shift_action() const {\n void ParseState::each_referenced_state(function<void(ParseStateId *)> fn) {\n   for (auto &entry : terminal_entries)\n     for (ParseAction &action : entry.second.actions)\n-      if (action.type == ParseActionTypeShift || ParseActionTypeRecover)\n+      if (action.type == ParseActionTypeShift || action.type == ParseActionTypeRecover)",
        "comment_created_at": "2017-06-09T18:47:38+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "\ud83d\ude2c  Oh wow. Thanks for catching that.\r\n\r\nWe need to check one other condition here to ensure that `action` will have a meaningful `state_index` field:\r\n\r\n```cpp\r\nif ((action.type == ParseActionTypeShift && !action.extra) || action.type == ParseActionTypeRecover)\r\n  fn(&action.state_index)\r\n```\r\n\r\n**Background** - There's a special 'shift-extra' action that tells the parser to consume an 'extra token' (e.g. a comment). These actions don't change the parser's state, so they don't have a `state_index` field. I can't remember why I modeled these actions using a separate boolean `extra` field; it seems like there should just be a separate `ParseActionTypeShiftExtra` value for the `type` field. But anyway, with the current setup, only shift actions that are *not* `extra` will have a meaningful `state_index`.",
        "pr_file_module": null
      }
    ]
  }
]