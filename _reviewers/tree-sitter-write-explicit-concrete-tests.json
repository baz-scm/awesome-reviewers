[
  {
    "discussion_id": "1493375311",
    "pr_number": 2438,
    "pr_file": "cli/src/generate/templates/lib.rs",
    "created_at": "2024-02-17T17:35:15+00:00",
    "commented_code": "-//! This crate provides PARSER_NAME language support for the [tree-sitter][] parsing library.\n+//! This crate provides CAMEL_PARSER_NAME language support for the [tree-sitter][] parsing library.\n //!\n //! Typically, you will use the [language][language func] function to add this language to a\n //! tree-sitter [Parser][], and then use the parser to parse some code:\n //!\n //! ```\n //! let code = \"\";\n //! let mut parser = tree_sitter::Parser::new();\n-//! parser.set_language(tree_sitter_PARSER_NAME::language()).expect(\"Error loading PARSER_NAME grammar\");\n+//! parser.set_language(tree_sitter_PARSER_NAME::language()).expect(\"Error loading CAMEL_PARSER_NAME grammar\");\n //! let tree = parser.parse(code, None).unwrap();",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1493375311",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 2438,
        "pr_file": "cli/src/generate/templates/lib.rs",
        "discussion_id": "1493375311",
        "commented_code": "@@ -1,12 +1,12 @@\n-//! This crate provides PARSER_NAME language support for the [tree-sitter][] parsing library.\n+//! This crate provides CAMEL_PARSER_NAME language support for the [tree-sitter][] parsing library.\n //!\n //! Typically, you will use the [language][language func] function to add this language to a\n //! tree-sitter [Parser][], and then use the parser to parse some code:\n //!\n //! ```\n //! let code = \"\";\n //! let mut parser = tree_sitter::Parser::new();\n-//! parser.set_language(tree_sitter_PARSER_NAME::language()).expect(\"Error loading PARSER_NAME grammar\");\n+//! parser.set_language(tree_sitter_PARSER_NAME::language()).expect(\"Error loading CAMEL_PARSER_NAME grammar\");\n //! let tree = parser.parse(code, None).unwrap();",
        "comment_created_at": "2024-02-17T17:35:15+00:00",
        "comment_author": "ObserverOfTime",
        "comment_body": "Worth adding an assertion for the doc test.\r\n```suggestion\r\n//! let tree = parser.parse(code, None).unwrap();\r\n//! assert!(!tree.root_node().has_error());\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1260398484",
    "pr_number": 2281,
    "pr_file": "cli/src/tests/query_test.rs",
    "created_at": "2023-07-11T23:43:50+00:00",
    "commented_code": "}\n     );\n }\n+\n+#[test]\n+fn test_consecutive_zero_or_modifiers() {\n+    let language = get_language(\"javascript\");\n+    let mut parser = Parser::new();\n+    parser.set_language(language).unwrap();\n+\n+    let zero_source = \"\";\n+    let three_source = \"/**/ /**/ /**/\";\n+\n+    let zero_tree = parser.parse(zero_source, None).unwrap();\n+    let three_tree = parser.parse(three_source, None).unwrap();\n+\n+    for x in ['*', '?'] {\n+        for y in ['*', '?'] {\n+            for z in ['*', '?'] {\n+                let query = Query::new(language, &format!(\"(comment){x}{y}{z} @capture\")).unwrap();\n+\n+                let mut cursor = QueryCursor::new();\n+                let mut matches =\n+                    cursor.matches(&query, zero_tree.root_node(), zero_source.as_bytes());\n+                assert!(matches.next().is_some());\n+\n+                let mut cursor = QueryCursor::new();\n+                let matches =\n+                    cursor.matches(&query, three_tree.root_node(), three_source.as_bytes());\n+\n+                let mut len_3 = false;\n+                let mut len_1 = false;\n+\n+                for m in matches {\n+                    if m.captures.len() == 3 {\n+                        len_3 = true;\n+                    }\n+                    if m.captures.len() == 1 {\n+                        len_1 = true;\n+                    }\n+                }\n+\n+                assert_eq!(len_3, x == '*' || y == '*' || z == '*');\n+                assert_eq!(len_1, x == '?' && y == '?' && z == '?');\n+            }\n+        }\n+    }",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "1260398484",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 2281,
        "pr_file": "cli/src/tests/query_test.rs",
        "discussion_id": "1260398484",
        "commented_code": "@@ -4591,3 +4591,48 @@ fn test_query_error_does_not_oob() {\n         }\n     );\n }\n+\n+#[test]\n+fn test_consecutive_zero_or_modifiers() {\n+    let language = get_language(\"javascript\");\n+    let mut parser = Parser::new();\n+    parser.set_language(language).unwrap();\n+\n+    let zero_source = \"\";\n+    let three_source = \"/**/ /**/ /**/\";\n+\n+    let zero_tree = parser.parse(zero_source, None).unwrap();\n+    let three_tree = parser.parse(three_source, None).unwrap();\n+\n+    for x in ['*', '?'] {\n+        for y in ['*', '?'] {\n+            for z in ['*', '?'] {\n+                let query = Query::new(language, &format!(\"(comment){x}{y}{z} @capture\")).unwrap();\n+\n+                let mut cursor = QueryCursor::new();\n+                let mut matches =\n+                    cursor.matches(&query, zero_tree.root_node(), zero_source.as_bytes());\n+                assert!(matches.next().is_some());\n+\n+                let mut cursor = QueryCursor::new();\n+                let matches =\n+                    cursor.matches(&query, three_tree.root_node(), three_source.as_bytes());\n+\n+                let mut len_3 = false;\n+                let mut len_1 = false;\n+\n+                for m in matches {\n+                    if m.captures.len() == 3 {\n+                        len_3 = true;\n+                    }\n+                    if m.captures.len() == 1 {\n+                        len_1 = true;\n+                    }\n+                }\n+\n+                assert_eq!(len_3, x == '*' || y == '*' || z == '*');\n+                assert_eq!(len_1, x == '?' && y == '?' && z == '?');\n+            }\n+        }\n+    }",
        "comment_created_at": "2023-07-11T23:43:50+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "This is a stylistic thing, but personally, I'd prefer to see this test written in a more concrete way, with two or three different hand-written queries, instead of the queries being generated via the for loops. It'd be a bit longer, but that way, we could make specific assertions about which matches we expect, for each query.\r\n\r\nI think just `(comment)*** @capture` and `(comment)??? @capture` would be enough.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "265807138",
    "pr_number": 304,
    "pr_file": "cli/src/util.rs",
    "created_at": "2019-03-14T23:45:01+00:00",
    "commented_code": "{\n                 Command::new(\"open\").arg(&self.0).output().unwrap();\n             }\n+\n+            #[cfg(any(debug_assertions, test))]\n+            validate_graph_log(&self);",
    "repo_full_name": "tree-sitter/tree-sitter",
    "discussion_comments": [
      {
        "comment_id": "265807138",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 304,
        "pr_file": "cli/src/util.rs",
        "discussion_id": "265807138",
        "commented_code": "@@ -55,6 +55,9 @@ impl Drop for LogSession {\n             {\n                 Command::new(\"open\").arg(&self.0).output().unwrap();\n             }\n+\n+            #[cfg(any(debug_assertions, test))]\n+            validate_graph_log(&self);",
        "comment_created_at": "2019-03-14T23:45:01+00:00",
        "comment_author": "maxbrunsfeld",
        "comment_body": "Very cool that you're verifying the graph logs!\r\n\r\nMy only suggestion is that I think we should perform this check in an explicit unit test of this functionality. Right now, this `LogSession` struct isn't used during a normal test run; it's just a tool that we use to debug failing tests (via `script/test THE_TEST_NAME -D`). And it's kind of an optional feature of the test suite: you can only use it if you have Graphviz installed on your system.\r\n\r\nWhat do you think about adding a specific unit test in `parser_test.rs`, something like this:\r\n\r\n```rust\r\n#[test]\r\n#[cfg(unix)]\r\nfn test_parsing_with_debug_graph_enabled() {\r\n    let mut parser = Parser::new();\r\n    let mut debug_graph_file = tempfile::tempfile().unwrap();\r\n    parser.print_dot_graphs(&debug_graph_file);\r\n\r\n    // validate the debug graph \r\n}\t\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "265853890",
        "repo_full_name": "tree-sitter/tree-sitter",
        "pr_number": 304,
        "pr_file": "cli/src/util.rs",
        "discussion_id": "265807138",
        "commented_code": "@@ -55,6 +55,9 @@ impl Drop for LogSession {\n             {\n                 Command::new(\"open\").arg(&self.0).output().unwrap();\n             }\n+\n+            #[cfg(any(debug_assertions, test))]\n+            validate_graph_log(&self);",
        "comment_created_at": "2019-03-15T05:30:35+00:00",
        "comment_author": "jmitchell",
        "comment_body": "I like this approach much better. Pushed an update and waiting for CI feedback.",
        "pr_file_module": null
      }
    ]
  }
]