[
  {
    "discussion_id": "1888864345",
    "pr_number": 9512,
    "pr_file": "crates/turborepo-ui/src/tui/app.rs",
    "created_at": "2024-12-17T16:43:59+00:00",
    "commented_code": "})\n     }\n \n+    fn update_sidebar_toggle(&mut self) {\n+        let value = !self.preferences.is_task_list_visible();\n+        self.preferences.set_is_task_list_visible(Some(value));\n+    }\n+\n+    fn update_task_selection_pinned_state(&mut self) -> Result<(), Error> {\n+        // Preferences assume a pinned state when there is an active task.\n+        // This `None` creates \"un-pinned-ness\" on the next TUI startup.\n+        self.preferences.set_active_task(None)?;\n+        Ok(())\n+    }",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1888864345",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9512,
        "pr_file": "crates/turborepo-ui/src/tui/app.rs",
        "discussion_id": "1888864345",
        "commented_code": "@@ -126,6 +131,18 @@ impl<W> App<W> {\n         })\n     }\n \n+    fn update_sidebar_toggle(&mut self) {\n+        let value = !self.preferences.is_task_list_visible();\n+        self.preferences.set_is_task_list_visible(Some(value));\n+    }\n+\n+    fn update_task_selection_pinned_state(&mut self) -> Result<(), Error> {\n+        // Preferences assume a pinned state when there is an active task.\n+        // This `None` creates \"un-pinned-ness\" on the next TUI startup.\n+        self.preferences.set_active_task(None)?;\n+        Ok(())\n+    }",
        "comment_created_at": "2024-12-17T16:43:59+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "I find this name a little confusing. Does `clear_pinned_task` express the behavior better?\r\n```suggestion\r\n    fn update_task_selection_pinned_state(&mut self) {\r\n        // Preferences assume a pinned state when there is an active task.\r\n        // This `None` creates \"un-pinned-ness\" on the next TUI startup.\r\n        self.preferences.set_active_task(None);\r\n    }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1870087762",
    "pr_number": 9562,
    "pr_file": "crates/turborepo-lib/src/commands/mod.rs",
    "created_at": "2024-12-04T18:33:36+00:00",
    "commented_code": "}\n     }\n \n-    fn config_init(\n+    pub fn config_init(",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1870087762",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9562,
        "pr_file": "crates/turborepo-lib/src/commands/mod.rs",
        "discussion_id": "1870087762",
        "commented_code": "@@ -69,7 +69,7 @@ impl CommandBase {\n         }\n     }\n \n-    fn config_init(\n+    pub fn config_init(",
        "comment_created_at": "2024-12-04T18:33:36+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "Minor: can we rename to `create_config` instead of `config_init` if we're making this public? `config_init` naming only makes sense when we used it in `.get_or_init`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1795838556",
    "pr_number": 9240,
    "pr_file": "crates/turborepo-repository/src/change_mapper/mod.rs",
    "created_at": "2024-10-10T17:25:18+00:00",
    "commented_code": "WithContent(Vec<u8>),\n }\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Hash, Clone)]\n+pub enum PackageChangeReason {",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1795838556",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9240,
        "pr_file": "crates/turborepo-repository/src/change_mapper/mod.rs",
        "discussion_id": "1795838556",
        "commented_code": "@@ -23,19 +23,52 @@ pub enum LockfileChange {\n     WithContent(Vec<u8>),\n }\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Hash, Clone)]\n+pub enum PackageChangeReason {",
        "comment_created_at": "2024-10-10T17:25:18+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "Most of these variants seem more focused on why a package is included in a filter rather than \"what has changed\".  Is `PackagePresenceReason` maybe a more accurate name for this enum?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1747198507",
    "pr_number": 9114,
    "pr_file": "crates/turborepo-lib/src/query.rs",
    "created_at": "2024-09-06T14:14:03+00:00",
    "commented_code": "}\n \n     /// The downstream packages that directly depend on this package\n-    async fn immediate_dependencies(&self) -> Result<Vec<Package>, Error> {\n+    async fn dependencies(&self) -> Result<Vec<Package>, Error> {",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1747198507",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9114,
        "pr_file": "crates/turborepo-lib/src/query.rs",
        "discussion_id": "1747198507",
        "commented_code": "@@ -335,7 +335,7 @@ impl Package {\n     }\n \n     /// The downstream packages that directly depend on this package\n-    async fn immediate_dependencies(&self) -> Result<Vec<Package>, Error> {\n+    async fn dependencies(&self) -> Result<Vec<Package>, Error> {",
        "comment_created_at": "2024-09-06T14:14:03+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "Should this be `direct_dependencies`? Gives us the nice `direct_dependencies U indirect_dependencies = dependencies` relation",
        "pr_file_module": null
      },
      {
        "comment_id": "1747310087",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9114,
        "pr_file": "crates/turborepo-lib/src/query.rs",
        "discussion_id": "1747198507",
        "commented_code": "@@ -335,7 +335,7 @@ impl Package {\n     }\n \n     /// The downstream packages that directly depend on this package\n-    async fn immediate_dependencies(&self) -> Result<Vec<Package>, Error> {\n+    async fn dependencies(&self) -> Result<Vec<Package>, Error> {",
        "comment_created_at": "2024-09-06T15:29:11+00:00",
        "comment_author": "NicholasLYang",
        "comment_body": "Oh `indirect_dependencies` is all transitive dependencies so it's more `direct_dependencies \u2286 indirect_dependencies`. I'm down to rename it if that's clearer (cc @anthonyshew)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1696264136",
    "pr_number": 8872,
    "pr_file": "crates/turborepo-repository/src/change_mapper/mod.rs",
    "created_at": "2024-07-30T04:16:00+00:00",
    "commented_code": "WithContent(Vec<u8>),\n }\n \n+#[derive(Debug, PartialEq, Eq)]\n+pub enum AllPackageChangeReason {\n+    DefaultGlobalFileChanged,\n+    LockfileChangeDetectionFailed,\n+    LockfileChangedWithoutDetails,\n+    RootInternalDepChanged,\n+    NonPackageFileChanged,",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1696264136",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 8872,
        "pr_file": "crates/turborepo-repository/src/change_mapper/mod.rs",
        "discussion_id": "1696264136",
        "commented_code": "@@ -23,9 +23,18 @@ pub enum LockfileChange {\n     WithContent(Vec<u8>),\n }\n \n+#[derive(Debug, PartialEq, Eq)]\n+pub enum AllPackageChangeReason {\n+    DefaultGlobalFileChanged,\n+    LockfileChangeDetectionFailed,\n+    LockfileChangedWithoutDetails,\n+    RootInternalDepChanged,\n+    NonPackageFileChanged,",
        "comment_created_at": "2024-07-30T04:16:00+00:00",
        "comment_author": "mehulkar",
        "comment_body": "I called this reason \"NonPackageFileChanged\" instead of \"GlobalFileChanged\", because the latter is a little bit confusing. E.g. `.github/actions/whatever.yml` is a global file and so is `examples/some-app/whatever.js` if neither path falls in the workspace config. It's not always clear that these are \"global files\" as far as turbo is concerned. I'm open to better name though.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1697149462",
    "pr_number": 8873,
    "pr_file": "crates/turbopack-ecmascript/src/analyzer/mod.rs",
    "created_at": "2024-07-30T15:16:16+00:00",
    "commented_code": "Placeholder,\n }\n \n+#[derive(Debug, Clone, Copy, Hash, PartialEq, Eq)]\n+pub enum AdditionalProperty {",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1697149462",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 8873,
        "pr_file": "crates/turbopack-ecmascript/src/analyzer/mod.rs",
        "discussion_id": "1697149462",
        "commented_code": "@@ -350,6 +350,25 @@ enum JsValueMetaKind {\n     Placeholder,\n }\n \n+#[derive(Debug, Clone, Copy, Hash, PartialEq, Eq)]\n+pub enum AdditionalProperty {",
        "comment_created_at": "2024-07-30T15:16:16+00:00",
        "comment_author": "ForsakenHarmony",
        "comment_body": "Not a fan of this name, it's a bit too generic\r\n\r\nMaybe `LogicalProperty`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1698190430",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 8873,
        "pr_file": "crates/turbopack-ecmascript/src/analyzer/mod.rs",
        "discussion_id": "1697149462",
        "commented_code": "@@ -350,6 +350,25 @@ enum JsValueMetaKind {\n     Placeholder,\n }\n \n+#[derive(Debug, Clone, Copy, Hash, PartialEq, Eq)]\n+pub enum AdditionalProperty {",
        "comment_created_at": "2024-07-31T09:19:06+00:00",
        "comment_author": "sokra",
        "comment_body": "yeah, I changed it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1682786404",
    "pr_number": 8748,
    "pr_file": "crates/turbopack-core/src/resolve/options.rs",
    "created_at": "2024-07-18T12:53:35+00:00",
    "commented_code": "pub resolved_map: Option<Vc<ResolvedMap>>,\n     pub before_resolve_plugins: Vec<Vc<Box<dyn BeforeResolvePlugin>>>,\n     pub plugins: Vec<Vc<Box<dyn AfterResolvePlugin>>>,\n+    /// Support resolving *.js requests to *.ts files\n+    pub enable_js_ts_rewriting: bool,",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1682786404",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 8748,
        "pr_file": "crates/turbopack-core/src/resolve/options.rs",
        "discussion_id": "1682786404",
        "commented_code": "@@ -442,6 +442,9 @@ pub struct ResolveOptions {\n     pub resolved_map: Option<Vc<ResolvedMap>>,\n     pub before_resolve_plugins: Vec<Vc<Box<dyn BeforeResolvePlugin>>>,\n     pub plugins: Vec<Vc<Box<dyn AfterResolvePlugin>>>,\n+    /// Support resolving *.js requests to *.ts files\n+    pub enable_js_ts_rewriting: bool,",
        "comment_created_at": "2024-07-18T12:53:35+00:00",
        "comment_author": "sokra",
        "comment_body": "Maybe have a better name for that. Something with typescript.\r\n\r\n`enable_typescript_with_output_extension`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1686355628",
    "pr_number": 8781,
    "pr_file": "crates/turbopack-ecmascript/src/tree_shake/util.rs",
    "created_at": "2024-07-22T10:49:43+00:00",
    "commented_code": "}\n \n #[derive(Default)]\n-struct UseServerFinder {\n+struct ShouldAbort {",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1686355628",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 8781,
        "pr_file": "crates/turbopack-ecmascript/src/tree_shake/util.rs",
        "discussion_id": "1686355628",
        "commented_code": "@@ -492,11 +492,11 @@ pub fn should_skip_tree_shaking(m: &Program, special_exports: &[RcStr]) -> bool\n }\n \n #[derive(Default)]\n-struct UseServerFinder {\n+struct ShouldAbort {",
        "comment_created_at": "2024-07-22T10:49:43+00:00",
        "comment_author": "sokra",
        "comment_body": "Could you rename that to `ShouldSkip`?\r\n\r\n\"Abort\" as word could have a negative meaning in some contexts so we want to avoid it in general\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1686364940",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 8781,
        "pr_file": "crates/turbopack-ecmascript/src/tree_shake/util.rs",
        "discussion_id": "1686355628",
        "commented_code": "@@ -492,11 +492,11 @@ pub fn should_skip_tree_shaking(m: &Program, special_exports: &[RcStr]) -> bool\n }\n \n #[derive(Default)]\n-struct UseServerFinder {\n+struct ShouldAbort {",
        "comment_created_at": "2024-07-22T10:58:03+00:00",
        "comment_author": "kdy1",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]