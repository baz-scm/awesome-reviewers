[
  {
    "discussion_id": "1443358834",
    "pr_number": 6747,
    "pr_file": "packages/create-turbo/src/transforms/update-commands-in-readme.ts",
    "created_at": "2024-01-05T20:55:02+00:00",
    "commented_code": "+import path from \"node:path\";\n+import fs from \"node:fs/promises\";\n+import { TransformError } from \"./errors\";\n+import type { TransformInput, TransformResult} from \"./types\";\n+\n+const meta = {\n+  name: \"update-commands-in-readme\",\n+};\n+\n+export async function transform(args: TransformInput): TransformResult {\n+  const { prompts, example } = args;\n+\n+  const isOfficialStarter =\n+    !example.repo ||\n+    (example.repo.username === \"vercel\" && example.repo.name === \"turbo\");\n+\n+  if (!isOfficialStarter) {\n+    return { result: \"not-applicable\", ...meta };\n+  }\n+\n+  const selectedPackageManager = prompts.packageManager;\n+  const readmeFilePath = path.join(prompts.root, \"examples\", \"basic\", \"README.md\");\n+  try {\n+    // Read the content of the file\n+    let data = await fs.readFile(readmeFilePath, \"utf8\");\n+\n+    // an array of all the possible replacement strings.\n+    const replacements = ['pnpm run', 'npm run', 'yarn run', 'bun run', 'pnpm', 'npm', 'yarn', 'bun'];\n+    const replacementRegex = new RegExp(`\\\\b(?:${replacements.join('|')})\\\\b`, 'g');\n+\n+    // Replace all occurrences of regex with selectedPackageManager\n+    data = data.replace(replacementRegex, `${selectedPackageManager} run`);",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1443358834",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 6747,
        "pr_file": "packages/create-turbo/src/transforms/update-commands-in-readme.ts",
        "discussion_id": "1443358834",
        "commented_code": "@@ -0,0 +1,44 @@\n+import path from \"node:path\";\n+import fs from \"node:fs/promises\";\n+import { TransformError } from \"./errors\";\n+import type { TransformInput, TransformResult} from \"./types\";\n+\n+const meta = {\n+  name: \"update-commands-in-readme\",\n+};\n+\n+export async function transform(args: TransformInput): TransformResult {\n+  const { prompts, example } = args;\n+\n+  const isOfficialStarter =\n+    !example.repo ||\n+    (example.repo.username === \"vercel\" && example.repo.name === \"turbo\");\n+\n+  if (!isOfficialStarter) {\n+    return { result: \"not-applicable\", ...meta };\n+  }\n+\n+  const selectedPackageManager = prompts.packageManager;\n+  const readmeFilePath = path.join(prompts.root, \"examples\", \"basic\", \"README.md\");\n+  try {\n+    // Read the content of the file\n+    let data = await fs.readFile(readmeFilePath, \"utf8\");\n+\n+    // an array of all the possible replacement strings.\n+    const replacements = ['pnpm run', 'npm run', 'yarn run', 'bun run', 'pnpm', 'npm', 'yarn', 'bun'];\n+    const replacementRegex = new RegExp(`\\\\b(?:${replacements.join('|')})\\\\b`, 'g');\n+\n+    // Replace all occurrences of regex with selectedPackageManager\n+    data = data.replace(replacementRegex, `${selectedPackageManager} run`);",
        "comment_created_at": "2024-01-05T20:55:02+00:00",
        "comment_author": "tknickman",
        "comment_body": "Nice!\r\n\r\nI think this could still be improved a little bit. Right now, there is no differentiation between code, and non code. So, for example in our design-system example, we have a section about Versioning & Publishing Packages that mentions npm as the npm registry. \r\n\r\nWe don't want to change those as part of this transform. I think we should tighten the regex to only detect package managers that occur within backticks (or code blocks)\r\n\r\n\r\nThis will also fix occurrences within links (for example):\r\n> This Turborepo uses [yarn v2+ (berry)](https://yarnpkg.com/) as a packages manager. It includes the following packages/apps:\r\n\r\nThis would be a great spot to add in some unit tests. I would recommend splitting the transform itself to it's own function for easier testing - something like:\r\n\r\n`function replacePackageManager(packageManager, text) { ... }`\r\n\r\nThis will allow you to test it very easily without requiring any additional setup / teardown.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1465911351",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 6747,
        "pr_file": "packages/create-turbo/src/transforms/update-commands-in-readme.ts",
        "discussion_id": "1443358834",
        "commented_code": "@@ -0,0 +1,44 @@\n+import path from \"node:path\";\n+import fs from \"node:fs/promises\";\n+import { TransformError } from \"./errors\";\n+import type { TransformInput, TransformResult} from \"./types\";\n+\n+const meta = {\n+  name: \"update-commands-in-readme\",\n+};\n+\n+export async function transform(args: TransformInput): TransformResult {\n+  const { prompts, example } = args;\n+\n+  const isOfficialStarter =\n+    !example.repo ||\n+    (example.repo.username === \"vercel\" && example.repo.name === \"turbo\");\n+\n+  if (!isOfficialStarter) {\n+    return { result: \"not-applicable\", ...meta };\n+  }\n+\n+  const selectedPackageManager = prompts.packageManager;\n+  const readmeFilePath = path.join(prompts.root, \"examples\", \"basic\", \"README.md\");\n+  try {\n+    // Read the content of the file\n+    let data = await fs.readFile(readmeFilePath, \"utf8\");\n+\n+    // an array of all the possible replacement strings.\n+    const replacements = ['pnpm run', 'npm run', 'yarn run', 'bun run', 'pnpm', 'npm', 'yarn', 'bun'];\n+    const replacementRegex = new RegExp(`\\\\b(?:${replacements.join('|')})\\\\b`, 'g');\n+\n+    // Replace all occurrences of regex with selectedPackageManager\n+    data = data.replace(replacementRegex, `${selectedPackageManager} run`);",
        "comment_created_at": "2024-01-25T06:46:56+00:00",
        "comment_author": "DependerKumarSoni",
        "comment_body": "As per your suggestion, I have refactored the code and the regex has been updated.\r\nBelow is the link for the test case I considered to validate the working of regex:\r\nhttps://codefile.io/f/Svks01TyEk\r\n\r\nI tried to consider the possible cases but in case I missed something or there is any scope for further improvement, please let me know.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1915477136",
    "pr_number": 6747,
    "pr_file": "packages/create-turbo/src/transforms/update-commands-in-readme.ts",
    "created_at": "2025-01-14T19:18:55+00:00",
    "commented_code": "+import path from \"node:path\";\n+import fs from \"node:fs/promises\";\n+import { TransformError } from \"./errors\";\n+import type { TransformInput, TransformResult } from \"./types\";\n+\n+const meta = {\n+  name: \"update-commands-in-readme\",\n+};\n+\n+// an array of all the possible replacement strings.\n+const PACKAGE_MANAGER_REPLACEMENTS = [\n+  \"pnpm run\",\n+  \"npm run\",\n+  \"yarn run\",\n+  \"bun run\",\n+  \"pnpm\",\n+  \"npm\",\n+  \"yarn\",\n+  \"bun\",\n+];\n+\n+export async function transform(args: TransformInput): TransformResult {\n+  const { prompts } = args;\n+\n+  const selectedPackageManager = prompts.packageManager;\n+  const readmeFilePath = path.join(prompts.root, \"README.md\");\n+  try {\n+    // Read the content of the file\n+    const data = await fs.readFile(readmeFilePath, \"utf8\");\n+\n+    if (!selectedPackageManager) {\n+      throw new Error(\"A package manager was not selected.\");\n+    }\n+\n+    // replace package manager\n+    const updatedReadmeData = replacePackageManager(\n+      selectedPackageManager,\n+      data\n+    );\n+\n+    // Write the updated content back to the file\n+    await fs.writeFile(readmeFilePath, updatedReadmeData, \"utf8\");\n+  } catch (err) {\n+    throw new TransformError(\"Unable to update README.md\", {\n+      transform: meta.name,\n+      fatal: false,\n+    });\n+  }\n+  return { result: \"success\", ...meta };\n+}\n+\n+function replacePackageManager(",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1915477136",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 6747,
        "pr_file": "packages/create-turbo/src/transforms/update-commands-in-readme.ts",
        "discussion_id": "1915477136",
        "commented_code": "@@ -0,0 +1,83 @@\n+import path from \"node:path\";\n+import fs from \"node:fs/promises\";\n+import { TransformError } from \"./errors\";\n+import type { TransformInput, TransformResult } from \"./types\";\n+\n+const meta = {\n+  name: \"update-commands-in-readme\",\n+};\n+\n+// an array of all the possible replacement strings.\n+const PACKAGE_MANAGER_REPLACEMENTS = [\n+  \"pnpm run\",\n+  \"npm run\",\n+  \"yarn run\",\n+  \"bun run\",\n+  \"pnpm\",\n+  \"npm\",\n+  \"yarn\",\n+  \"bun\",\n+];\n+\n+export async function transform(args: TransformInput): TransformResult {\n+  const { prompts } = args;\n+\n+  const selectedPackageManager = prompts.packageManager;\n+  const readmeFilePath = path.join(prompts.root, \"README.md\");\n+  try {\n+    // Read the content of the file\n+    const data = await fs.readFile(readmeFilePath, \"utf8\");\n+\n+    if (!selectedPackageManager) {\n+      throw new Error(\"A package manager was not selected.\");\n+    }\n+\n+    // replace package manager\n+    const updatedReadmeData = replacePackageManager(\n+      selectedPackageManager,\n+      data\n+    );\n+\n+    // Write the updated content back to the file\n+    await fs.writeFile(readmeFilePath, updatedReadmeData, \"utf8\");\n+  } catch (err) {\n+    throw new TransformError(\"Unable to update README.md\", {\n+      transform: meta.name,\n+      fatal: false,\n+    });\n+  }\n+  return { result: \"success\", ...meta };\n+}\n+\n+function replacePackageManager(",
        "comment_created_at": "2025-01-14T19:18:55+00:00",
        "comment_author": "tknickman",
        "comment_body": "Let's add some test cases for this function just to make sure it's working as we expect. You can use it.each to make this simple. Something like:\r\n\r\n```\r\nconst testCases = [...]\r\n  \r\nit.each(testCases)(\r\n    'should replace placeholders correctly for packageManager: %p and text: \"%s\"',\r\n    (packageManager, text, expected) => {\r\n      const result = replacePackageManager(packageManager, text);\r\n      expect(result).toBe(expected);\r\n    }\r\n  );\r\n```",
        "pr_file_module": null
      }
    ]
  }
]