[
  {
    "discussion_id": "2068489573",
    "pr_number": 10409,
    "pr_file": "crates/turborepo-lib/src/turbo_json/mod.rs",
    "created_at": "2025-04-30T11:39:29+00:00",
    "commented_code": "timeout: remote_cache_opts.timeout,\n             upload_timeout: remote_cache_opts.upload_timeout,\n             enabled: remote_cache_opts.enabled,\n+            no_update_notifier: None, // Remote cache options don't include this",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "2068489573",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 10409,
        "pr_file": "crates/turborepo-lib/src/turbo_json/mod.rs",
        "discussion_id": "2068489573",
        "commented_code": "@@ -101,6 +101,7 @@ impl From<&RawRemoteCacheOptions> for ConfigurationOptions {\n             timeout: remote_cache_opts.timeout,\n             upload_timeout: remote_cache_opts.upload_timeout,\n             enabled: remote_cache_opts.enabled,\n+            no_update_notifier: None, // Remote cache options don't include this",
        "comment_created_at": "2025-04-30T11:39:29+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "Can you remove this line? This is already done by the `..Self::default()` on the following line.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2044321242",
    "pr_number": 10340,
    "pr_file": "crates/turborepo-lib/src/package_changes_watcher.rs",
    "created_at": "2025-04-15T11:34:23+00:00",
    "commented_code": "return None;\n         };\n \n+        // Check for both turbo.json and turbo.jsonc\n+        let turbo_json_path = self.repo_root.join_component(CONFIG_FILE);\n+        let turbo_jsonc_path = self.repo_root.join_component(CONFIG_FILE_JSONC);\n+\n+        let turbo_json_exists = turbo_json_path.exists();\n+        let turbo_jsonc_exists = turbo_jsonc_path.exists();\n+\n+        let config_path = match (turbo_json_exists, turbo_jsonc_exists) {\n+            (true, true) => {\n+                tracing::warn!(\n+                    \"Found both turbo.json and turbo.jsonc in {}. Using turbo.json for watching.\",\n+                    self.repo_root\n+                );\n+                turbo_json_path\n+            }\n+            (true, false) => turbo_json_path,\n+            (false, true) => turbo_jsonc_path,\n+            (false, false) => turbo_json_path, // Default to turbo.json if neither exists\n+        };",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "2044321242",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 10340,
        "pr_file": "crates/turborepo-lib/src/package_changes_watcher.rs",
        "discussion_id": "2044321242",
        "commented_code": "@@ -171,9 +171,29 @@ impl Subscriber {\n             return None;\n         };\n \n+        // Check for both turbo.json and turbo.jsonc\n+        let turbo_json_path = self.repo_root.join_component(CONFIG_FILE);\n+        let turbo_jsonc_path = self.repo_root.join_component(CONFIG_FILE_JSONC);\n+\n+        let turbo_json_exists = turbo_json_path.exists();\n+        let turbo_jsonc_exists = turbo_jsonc_path.exists();\n+\n+        let config_path = match (turbo_json_exists, turbo_jsonc_exists) {\n+            (true, true) => {\n+                tracing::warn!(\n+                    \"Found both turbo.json and turbo.jsonc in {}. Using turbo.json for watching.\",\n+                    self.repo_root\n+                );\n+                turbo_json_path\n+            }\n+            (true, false) => turbo_json_path,\n+            (false, true) => turbo_jsonc_path,\n+            (false, false) => turbo_json_path, // Default to turbo.json if neither exists\n+        };",
        "comment_created_at": "2025-04-15T11:34:23+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "Not blocking, but would love to dedupe this logic with `Config::root_turbo_json_path` instead of copy-pasta. Would need to break out the behavior to a new static function.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1888806134",
    "pr_number": 9512,
    "pr_file": "crates/turborepo-lib/src/run/mod.rs",
    "created_at": "2024-12-17T16:08:18+00:00",
    "commented_code": "let (sender, receiver) = TuiSender::new();\n         let color_config = self.color_config;\n+        let repo_root = self.repo_root.clone();",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1888806134",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9512,
        "pr_file": "crates/turborepo-lib/src/run/mod.rs",
        "discussion_id": "1888806134",
        "commented_code": "@@ -262,8 +262,9 @@ impl Run {\n \n         let (sender, receiver) = TuiSender::new();\n         let color_config = self.color_config;\n+        let repo_root = self.repo_root.clone();",
        "comment_created_at": "2024-12-17T16:08:18+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "We can just borrow here instead of cloning\r\n```suggestion\r\n        let repo_root = &self.repo_root;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1882268341",
    "pr_number": 9610,
    "pr_file": "crates/turborepo-ui/src/tui/pane.rs",
    "created_at": "2024-12-12T14:39:18+00:00",
    "commented_code": "};\n \n         match self.section {\n-            LayoutSections::Pane => build_message_vec(FOOTER_TEXT_ACTIVE),\n-            LayoutSections::TaskList => build_message_vec(FOOTER_TEXT_INACTIVE),\n+            LayoutSections::Pane => build_message_vec(EXIT_INTERACTIVE_HINT),\n+            LayoutSections::TaskList => {\n+                // Spaces are used to pad the footer text for aesthetics\n+                build_message_vec(format!(\"{}   {}\", ENTER_INTERACTIVE_HINT, SCROLL_LOGS).as_str())\n+            }",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1882268341",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9610,
        "pr_file": "crates/turborepo-ui/src/tui/pane.rs",
        "discussion_id": "1882268341",
        "commented_code": "@@ -57,8 +58,11 @@ impl<'a, W> TerminalPane<'a, W> {\n         };\n \n         match self.section {\n-            LayoutSections::Pane => build_message_vec(FOOTER_TEXT_ACTIVE),\n-            LayoutSections::TaskList => build_message_vec(FOOTER_TEXT_INACTIVE),\n+            LayoutSections::Pane => build_message_vec(EXIT_INTERACTIVE_HINT),\n+            LayoutSections::TaskList => {\n+                // Spaces are used to pad the footer text for aesthetics\n+                build_message_vec(format!(\"{}   {}\", ENTER_INTERACTIVE_HINT, SCROLL_LOGS).as_str())\n+            }",
        "comment_created_at": "2024-12-12T14:39:18+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "Up to you, but you can dedupe the spacing logic so it's only contained in `build_message_vec`:\r\n```\r\nlet build_message_vec = |footer_texts: &[&str]| -> Line {\r\n    let mut messages = Vec::new();\r\n    messages.extend_from_slice(footer_texts);\r\n```\r\n\r\n```suggestion\r\n            LayoutSections::Pane => build_message_vec(&[EXIT_INTERACTIVE_HINT]),\r\n            LayoutSections::TaskList => {\r\n                // Spaces are used to pad the footer text for aesthetics\r\n                build_message_vec(&[ENTER_INTERACTIVE_HINT, SCROLL_LOGS])\r\n            }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1882896872",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9610,
        "pr_file": "crates/turborepo-ui/src/tui/pane.rs",
        "discussion_id": "1882268341",
        "commented_code": "@@ -57,8 +58,11 @@ impl<'a, W> TerminalPane<'a, W> {\n         };\n \n         match self.section {\n-            LayoutSections::Pane => build_message_vec(FOOTER_TEXT_ACTIVE),\n-            LayoutSections::TaskList => build_message_vec(FOOTER_TEXT_INACTIVE),\n+            LayoutSections::Pane => build_message_vec(EXIT_INTERACTIVE_HINT),\n+            LayoutSections::TaskList => {\n+                // Spaces are used to pad the footer text for aesthetics\n+                build_message_vec(format!(\"{}   {}\", ENTER_INTERACTIVE_HINT, SCROLL_LOGS).as_str())\n+            }",
        "comment_created_at": "2024-12-12T21:16:36+00:00",
        "comment_author": "anthonyshew",
        "comment_body": "Some of my best \"past midnight with a screaming baby\" code, truly.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1521798404",
    "pr_number": 7697,
    "pr_file": "crates/turborepo-lib/src/run/summary/execution.rs",
    "created_at": "2024-03-12T16:39:23+00:00",
    "commented_code": "fn successful(&self) -> usize {\n         self.success + self.cached\n     }\n+\n+    fn add_cached(&mut self, source: CacheSource) {",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1521798404",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 7697,
        "pr_file": "crates/turborepo-lib/src/run/summary/execution.rs",
        "discussion_id": "1521798404",
        "commented_code": "@@ -159,14 +168,23 @@ impl<'a> ExecutionSummary<'a> {\n     fn successful(&self) -> usize {\n         self.success + self.cached\n     }\n+\n+    fn add_cached(&mut self, source: CacheSource) {",
        "comment_created_at": "2024-03-12T16:39:23+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "I don't see this used anywhere so I think it can get removed? In general I think we don't want to be changing the counts on the `ExecutionSummary` and have all modifications happen to `SummaryState`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1177927972",
    "pr_number": 4707,
    "pr_file": "crates/turbo-tasks-fs/src/lib.rs",
    "created_at": "2023-04-26T13:59:52+00:00",
    "commented_code": "let _lock = self.mutex_map.lock(full_path.clone()).await;\n \n+        // Make sure that there is only one authorative writer at a time.\n+        let conflict = {\n+            let own_invalidator = get_invalidator();\n+            let mut authorative_write_map = self.authorative_write_map.lock().unwrap();\n+            let inner_map = authorative_write_map.entry(full_path.clone()).or_default();\n+            let mut new_map = AutoMap::new();\n+            let mut has_own = false;\n+            // Remove all inactive invalidators.\n+            for (invalidator, state) in take(inner_map).into_iter() {\n+                if invalidator == own_invalidator {\n+                    has_own = true;\n+                    new_map.insert(invalidator, state);\n+                } else if invalidator.is_active() {\n+                    new_map.insert(invalidator, state);\n+                } else {\n+                    invalidator.invalidate();\n+                }\n+            }\n+            let conflict = if has_own {\n+                new_map.len() > 1\n+            } else {\n+                !new_map.is_empty()\n+            };\n+            if conflict {\n+                let inner_map = take(&mut new_map);\n+                for (invalidator, state) in inner_map.into_iter() {\n+                    match state {\n+                        WriterState::Authorative => {\n+                            invalidator.invalidate();\n+                        }\n+                        WriterState::InConflict => {\n+                            new_map.insert(invalidator, state);\n+                        }\n+                    }\n+                }\n+            }\n+            conflict\n+        };\n+        if conflict {\n+            bail!(\n+                \"File {} is written from multiple sources\",\n+                fs_path.to_string().await?\n+            )\n+        }\n+",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1177927972",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 4707,
        "pr_file": "crates/turbo-tasks-fs/src/lib.rs",
        "discussion_id": "1177927972",
        "commented_code": "@@ -678,6 +687,51 @@ impl FileSystem for DiskFileSystem {\n \n         let _lock = self.mutex_map.lock(full_path.clone()).await;\n \n+        // Make sure that there is only one authorative writer at a time.\n+        let conflict = {\n+            let own_invalidator = get_invalidator();\n+            let mut authorative_write_map = self.authorative_write_map.lock().unwrap();\n+            let inner_map = authorative_write_map.entry(full_path.clone()).or_default();\n+            let mut new_map = AutoMap::new();\n+            let mut has_own = false;\n+            // Remove all inactive invalidators.\n+            for (invalidator, state) in take(inner_map).into_iter() {\n+                if invalidator == own_invalidator {\n+                    has_own = true;\n+                    new_map.insert(invalidator, state);\n+                } else if invalidator.is_active() {\n+                    new_map.insert(invalidator, state);\n+                } else {\n+                    invalidator.invalidate();\n+                }\n+            }\n+            let conflict = if has_own {\n+                new_map.len() > 1\n+            } else {\n+                !new_map.is_empty()\n+            };\n+            if conflict {\n+                let inner_map = take(&mut new_map);\n+                for (invalidator, state) in inner_map.into_iter() {\n+                    match state {\n+                        WriterState::Authorative => {\n+                            invalidator.invalidate();\n+                        }\n+                        WriterState::InConflict => {\n+                            new_map.insert(invalidator, state);\n+                        }\n+                    }\n+                }\n+            }\n+            conflict\n+        };\n+        if conflict {\n+            bail!(\n+                \"File {} is written from multiple sources\",\n+                fs_path.to_string().await?\n+            )\n+        }\n+",
        "comment_created_at": "2023-04-26T13:59:52+00:00",
        "comment_author": "alexkirsz",
        "comment_body": "Move this to its own method, e.g. `check_write_conflict` ",
        "pr_file_module": null
      }
    ]
  }
]