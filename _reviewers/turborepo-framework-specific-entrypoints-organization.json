[
  {
    "discussion_id": "1904333305",
    "pr_number": 9222,
    "pr_file": "docs/repo-docs/guides/frameworks/framework-bindings.mdx",
    "created_at": "2025-01-06T16:00:56+00:00",
    "commented_code": "+---\n+title: Framework bindings in libraries\n+description: Learn how to create framework bindings in packages.\n+---\n+\n+import { PackageManagerTabs, Tab } from '#/components/tabs';\n+import { Callout } from '#/components/callout';\n+\n+Framework bindings in a [Library Package](/repo/docs/core-concepts/package-types#library-packages) integrate your library's code more deeply with a framework by leveraging APIs from the framework directly in the library.\n+\n+To do this, use the `peerDependencies` field in `package.json` of the library, which makes the framework APIs available in your library without installing it directly in the package.\n+\n+<Callout type=\"good-to-know\">\n+  On this page, we'll be using Next.js for examples, but the concepts below\n+  apply to any framework or other dependency.\n+</Callout>\n+\n+## Example\n+\n+Add a `peerDependency` to your library for the dependency that you intend to create bindings for.\n+\n+```json title=\"./packages/ui/package.json\"\n+{\n+  \"name\": \"@repo/ui\",\n+  \"peerDependencies\": {\n+    \"next\": \"*\"\n+  }\n+}\n+```\n+\n+<Callout type=\"good-to-know\">\n+  In the example above, the `peerDependency` for `next` accepts any version. You\n+  may want to specify a range (for example, `\">=15\"`) according to your needs.\n+</Callout>\n+\n+This will make the dependency available in your library, allowing you to write code like below. Note the `className` prop, which sets a default styling for this component in the monorepo and can be overridden in the `props` object.\n+\n+```tsx title=\"./packages/ui/src/link.tsx\"\n+import Link from 'next/link';\n+import type { ComponentProps } from 'react';\n+\n+type CustomLinkProps = ComponentProps<typeof Link>;\n+\n+export function CustomLink({ children, ...props }: CustomLinkProps) {\n+  return (\n+    <Link className=\"text-underline hover:text-green-400\" {...props}>\n+      {children}\n+    </Link>\n+  );\n+}\n+```\n+\n+The version of `next` that will be resolved for the package will come from the consumers of the library. For example, if Next.js 15 is installed in your applications, the TypeScript types and APIs for `next` will also be Next.js 15.\n+\n+## Splitting framework bindings using entrypoints\n+\n+Using export paths to split a package into framework-specific entrypoints is the simplest way to add bindings to a library that aims to support multiple frameworks. By splitting entrypoints, bundlers have an easier time understanding the framework you intend to target and you're less likely to see strange bundling errors.\n+\n+The example below shows a library with two entrypoints, each for a different type of link component. These abstractions likely contain your own styles, APIs, and other adjustments on top of the element they're wrapping.\n+\n+- `./link`: An `<a>` HTML tag with some default styles from your design system\n+- `./next-js/link`: A customized version of [the Next.js `Link` component](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#link-component) with props that are preset to your organization's preferences",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1904333305",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9222,
        "pr_file": "docs/repo-docs/guides/frameworks/framework-bindings.mdx",
        "discussion_id": "1904333305",
        "commented_code": "@@ -0,0 +1,81 @@\n+---\n+title: Framework bindings in libraries\n+description: Learn how to create framework bindings in packages.\n+---\n+\n+import { PackageManagerTabs, Tab } from '#/components/tabs';\n+import { Callout } from '#/components/callout';\n+\n+Framework bindings in a [Library Package](/repo/docs/core-concepts/package-types#library-packages) integrate your library's code more deeply with a framework by leveraging APIs from the framework directly in the library.\n+\n+To do this, use the `peerDependencies` field in `package.json` of the library, which makes the framework APIs available in your library without installing it directly in the package.\n+\n+<Callout type=\"good-to-know\">\n+  On this page, we'll be using Next.js for examples, but the concepts below\n+  apply to any framework or other dependency.\n+</Callout>\n+\n+## Example\n+\n+Add a `peerDependency` to your library for the dependency that you intend to create bindings for.\n+\n+```json title=\"./packages/ui/package.json\"\n+{\n+  \"name\": \"@repo/ui\",\n+  \"peerDependencies\": {\n+    \"next\": \"*\"\n+  }\n+}\n+```\n+\n+<Callout type=\"good-to-know\">\n+  In the example above, the `peerDependency` for `next` accepts any version. You\n+  may want to specify a range (for example, `\">=15\"`) according to your needs.\n+</Callout>\n+\n+This will make the dependency available in your library, allowing you to write code like below. Note the `className` prop, which sets a default styling for this component in the monorepo and can be overridden in the `props` object.\n+\n+```tsx title=\"./packages/ui/src/link.tsx\"\n+import Link from 'next/link';\n+import type { ComponentProps } from 'react';\n+\n+type CustomLinkProps = ComponentProps<typeof Link>;\n+\n+export function CustomLink({ children, ...props }: CustomLinkProps) {\n+  return (\n+    <Link className=\"text-underline hover:text-green-400\" {...props}>\n+      {children}\n+    </Link>\n+  );\n+}\n+```\n+\n+The version of `next` that will be resolved for the package will come from the consumers of the library. For example, if Next.js 15 is installed in your applications, the TypeScript types and APIs for `next` will also be Next.js 15.\n+\n+## Splitting framework bindings using entrypoints\n+\n+Using export paths to split a package into framework-specific entrypoints is the simplest way to add bindings to a library that aims to support multiple frameworks. By splitting entrypoints, bundlers have an easier time understanding the framework you intend to target and you're less likely to see strange bundling errors.\n+\n+The example below shows a library with two entrypoints, each for a different type of link component. These abstractions likely contain your own styles, APIs, and other adjustments on top of the element they're wrapping.\n+\n+- `./link`: An `<a>` HTML tag with some default styles from your design system\n+- `./next-js/link`: A customized version of [the Next.js `Link` component](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#link-component) with props that are preset to your organization's preferences",
        "comment_created_at": "2025-01-06T16:00:56+00:00",
        "comment_author": "tknickman",
        "comment_body": "This would sink in more for me if we added another framework:\r\n\r\n```\r\n- `./link`: ...\r\n- `./next-js/link`: ...\r\n- `./svelte/link`: ...\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1904674644",
    "pr_number": 9222,
    "pr_file": "docs/repo-docs/guides/frameworks/framework-bindings.mdx",
    "created_at": "2025-01-06T21:52:18+00:00",
    "commented_code": "+---\n+title: Framework bindings in libraries\n+description: Learn how to create framework bindings in packages.\n+---\n+\n+import { PackageManagerTabs, Tab } from '#/components/tabs';\n+import { Callout } from '#/components/callout';\n+\n+Framework bindings in a [Library Package](/repo/docs/core-concepts/package-types#library-packages) integrate your library's code more deeply with a framework by leveraging APIs from the framework directly in the library.\n+\n+To do this, use the `peerDependencies` field in `package.json` of the library, which makes the framework APIs available in your library without installing it directly in the package.\n+\n+<Callout type=\"good-to-know\">\n+  On this page, we'll be using Next.js for examples, but the concepts below\n+  apply to any framework or other dependency.\n+</Callout>\n+\n+## Example\n+\n+Add a `peerDependency` to your library for the dependency that you intend to create bindings for.\n+\n+```json title=\"./packages/ui/package.json\"\n+{\n+  \"name\": \"@repo/ui\",\n+  \"peerDependencies\": {\n+    \"next\": \"*\"\n+  }\n+}\n+```\n+\n+<Callout type=\"good-to-know\">\n+  In the example above, the `peerDependency` for `next` accepts any version. You\n+  may want to specify a range (for example, `\">=15\"`) according to your needs.\n+  \n+  Additionally, for older package managers, you may need to instruct your package manager to install peer dependencies with configuration, or add the dependency to `devDependencies` as a workaround.\n+</Callout>\n+\n+This will make the dependency available in your library, allowing you to write code like below. Note the `className` prop, which sets a default styling for this component in the monorepo and can be overridden in the `props` object.\n+\n+```tsx title=\"./packages/ui/src/link.tsx\"\n+import Link from 'next/link';\n+import type { ComponentProps } from 'react';\n+\n+type CustomLinkProps = ComponentProps<typeof Link>;\n+\n+export function CustomLink({ children, ...props }: CustomLinkProps) {\n+  return (\n+    <Link className=\"text-underline hover:text-green-400\" {...props}>\n+      {children}\n+    </Link>\n+  );\n+}\n+```\n+\n+The version of `next` that will be resolved for the package will come from the consumers of the library. For example, if Next.js 15 is installed in your applications, the TypeScript types and APIs for `next` will also be Next.js 15.\n+\n+## Splitting framework bindings using entrypoints\n+\n+Using export paths to split a package into framework-specific entrypoints is the simplest way to add bindings to a library that aims to support multiple frameworks. By splitting entrypoints, bundlers have an easier time understanding the framework you intend to target and you're less likely to see strange bundling errors.\n+\n+The example below shows a library with two entrypoints, each for a different type of link component. These abstractions likely contain your own styles, APIs, and other adjustments on top of the element they're wrapping.\n+\n+- `./link`: An `<a>` HTML tag with some default styles from your design system\n+- `./next-js/link`: A customized version of [the Next.js `Link` component](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#link-component) with props that are preset to your organization's preferences",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1904674644",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9222,
        "pr_file": "docs/repo-docs/guides/frameworks/framework-bindings.mdx",
        "discussion_id": "1904674644",
        "commented_code": "@@ -0,0 +1,83 @@\n+---\n+title: Framework bindings in libraries\n+description: Learn how to create framework bindings in packages.\n+---\n+\n+import { PackageManagerTabs, Tab } from '#/components/tabs';\n+import { Callout } from '#/components/callout';\n+\n+Framework bindings in a [Library Package](/repo/docs/core-concepts/package-types#library-packages) integrate your library's code more deeply with a framework by leveraging APIs from the framework directly in the library.\n+\n+To do this, use the `peerDependencies` field in `package.json` of the library, which makes the framework APIs available in your library without installing it directly in the package.\n+\n+<Callout type=\"good-to-know\">\n+  On this page, we'll be using Next.js for examples, but the concepts below\n+  apply to any framework or other dependency.\n+</Callout>\n+\n+## Example\n+\n+Add a `peerDependency` to your library for the dependency that you intend to create bindings for.\n+\n+```json title=\"./packages/ui/package.json\"\n+{\n+  \"name\": \"@repo/ui\",\n+  \"peerDependencies\": {\n+    \"next\": \"*\"\n+  }\n+}\n+```\n+\n+<Callout type=\"good-to-know\">\n+  In the example above, the `peerDependency` for `next` accepts any version. You\n+  may want to specify a range (for example, `\">=15\"`) according to your needs.\n+  \n+  Additionally, for older package managers, you may need to instruct your package manager to install peer dependencies with configuration, or add the dependency to `devDependencies` as a workaround.\n+</Callout>\n+\n+This will make the dependency available in your library, allowing you to write code like below. Note the `className` prop, which sets a default styling for this component in the monorepo and can be overridden in the `props` object.\n+\n+```tsx title=\"./packages/ui/src/link.tsx\"\n+import Link from 'next/link';\n+import type { ComponentProps } from 'react';\n+\n+type CustomLinkProps = ComponentProps<typeof Link>;\n+\n+export function CustomLink({ children, ...props }: CustomLinkProps) {\n+  return (\n+    <Link className=\"text-underline hover:text-green-400\" {...props}>\n+      {children}\n+    </Link>\n+  );\n+}\n+```\n+\n+The version of `next` that will be resolved for the package will come from the consumers of the library. For example, if Next.js 15 is installed in your applications, the TypeScript types and APIs for `next` will also be Next.js 15.\n+\n+## Splitting framework bindings using entrypoints\n+\n+Using export paths to split a package into framework-specific entrypoints is the simplest way to add bindings to a library that aims to support multiple frameworks. By splitting entrypoints, bundlers have an easier time understanding the framework you intend to target and you're less likely to see strange bundling errors.\n+\n+The example below shows a library with two entrypoints, each for a different type of link component. These abstractions likely contain your own styles, APIs, and other adjustments on top of the element they're wrapping.\n+\n+- `./link`: An `<a>` HTML tag with some default styles from your design system\n+- `./next-js/link`: A customized version of [the Next.js `Link` component](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#link-component) with props that are preset to your organization's preferences",
        "comment_created_at": "2025-01-06T21:52:18+00:00",
        "comment_author": "anthonyshew",
        "comment_body": "```suggestion\r\n- `./next-js/link`: A customized version of [the Next.js `Link` component](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#link-component) with props that are preset to your organization's preferences\r\n- `./svelte/link`: A customized version of an [`a` tag for Svelte](https://svelte.dev/docs/kit/link-options) with presets.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]