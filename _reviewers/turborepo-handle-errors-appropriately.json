[
  {
    "discussion_id": "1603698365",
    "pr_number": 8149,
    "pr_file": "packages/turbo-codemod/src/transforms/rename-output-mode.ts",
    "created_at": "2024-05-16T16:32:07+00:00",
    "commented_code": "+import path from \"node:path\";\n+import { readJsonSync, existsSync } from \"fs-extra\";\n+import { type PackageJson, getTurboConfigs } from \"@turbo/utils\";\n+import type { Schema as TurboJsonSchema, OutputMode } from \"@turbo/types\";\n+import type { TransformerArgs } from \"../types\";\n+import { getTransformerHelpers } from \"../utils/getTransformerHelpers\";\n+import type { TransformerResults } from \"../runner\";\n+\n+// transformer details\n+const TRANSFORMER = \"rename-output-mode\";\n+const DESCRIPTION =\n+  'Rename the \"outputMode\" key to \"outputLogs\" in `turbo.json`';\n+const INTRODUCED_IN = \"2.0.0\";\n+\n+function migrateConfig(config: TurboJsonSchema) {\n+  for (const [_, taskDef] of Object.entries(config.pipeline)) {\n+    if (Object.prototype.hasOwnProperty.call(taskDef, \"outputMode\")) {\n+      //@ts-expect-error - outputMode is no longer in the schema\n+      taskDef.outputLogs = taskDef.outputMode as OutputMode;\n+      //@ts-expect-error - outputMode is no longer in the schema\n+      delete taskDef.outputMode;\n+    }\n+  }\n+\n+  return config;\n+}\n+\n+export function transformer({\n+  root,\n+  options,\n+}: TransformerArgs): TransformerResults {\n+  const { log, runner } = getTransformerHelpers({\n+    transformer: TRANSFORMER,\n+    rootPath: root,\n+    options,\n+  });\n+\n+  // If `turbo` key is detected in package.json, require user to run the other codemod first.\n+  const packageJsonPath = path.join(root, \"package.json\");\n+  // package.json should always exist, but if it doesn't, it would be a silly place to blow up this codemod\n+  let packageJSON = {};\n+\n+  try {\n+    packageJSON = readJsonSync(packageJsonPath) as PackageJson;\n+  } catch (e) {\n+    // readJSONSync probably failed because the file doesn't exist",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1603698365",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 8149,
        "pr_file": "packages/turbo-codemod/src/transforms/rename-output-mode.ts",
        "discussion_id": "1603698365",
        "commented_code": "@@ -0,0 +1,91 @@\n+import path from \"node:path\";\n+import { readJsonSync, existsSync } from \"fs-extra\";\n+import { type PackageJson, getTurboConfigs } from \"@turbo/utils\";\n+import type { Schema as TurboJsonSchema, OutputMode } from \"@turbo/types\";\n+import type { TransformerArgs } from \"../types\";\n+import { getTransformerHelpers } from \"../utils/getTransformerHelpers\";\n+import type { TransformerResults } from \"../runner\";\n+\n+// transformer details\n+const TRANSFORMER = \"rename-output-mode\";\n+const DESCRIPTION =\n+  'Rename the \"outputMode\" key to \"outputLogs\" in `turbo.json`';\n+const INTRODUCED_IN = \"2.0.0\";\n+\n+function migrateConfig(config: TurboJsonSchema) {\n+  for (const [_, taskDef] of Object.entries(config.pipeline)) {\n+    if (Object.prototype.hasOwnProperty.call(taskDef, \"outputMode\")) {\n+      //@ts-expect-error - outputMode is no longer in the schema\n+      taskDef.outputLogs = taskDef.outputMode as OutputMode;\n+      //@ts-expect-error - outputMode is no longer in the schema\n+      delete taskDef.outputMode;\n+    }\n+  }\n+\n+  return config;\n+}\n+\n+export function transformer({\n+  root,\n+  options,\n+}: TransformerArgs): TransformerResults {\n+  const { log, runner } = getTransformerHelpers({\n+    transformer: TRANSFORMER,\n+    rootPath: root,\n+    options,\n+  });\n+\n+  // If `turbo` key is detected in package.json, require user to run the other codemod first.\n+  const packageJsonPath = path.join(root, \"package.json\");\n+  // package.json should always exist, but if it doesn't, it would be a silly place to blow up this codemod\n+  let packageJSON = {};\n+\n+  try {\n+    packageJSON = readJsonSync(packageJsonPath) as PackageJson;\n+  } catch (e) {\n+    // readJSONSync probably failed because the file doesn't exist",
        "comment_created_at": "2024-05-16T16:32:07+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "I think we would want to abort if we are missing/can't read the root `package.json`",
        "pr_file_module": null
      },
      {
        "comment_id": "1603871456",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 8149,
        "pr_file": "packages/turbo-codemod/src/transforms/rename-output-mode.ts",
        "discussion_id": "1603698365",
        "commented_code": "@@ -0,0 +1,91 @@\n+import path from \"node:path\";\n+import { readJsonSync, existsSync } from \"fs-extra\";\n+import { type PackageJson, getTurboConfigs } from \"@turbo/utils\";\n+import type { Schema as TurboJsonSchema, OutputMode } from \"@turbo/types\";\n+import type { TransformerArgs } from \"../types\";\n+import { getTransformerHelpers } from \"../utils/getTransformerHelpers\";\n+import type { TransformerResults } from \"../runner\";\n+\n+// transformer details\n+const TRANSFORMER = \"rename-output-mode\";\n+const DESCRIPTION =\n+  'Rename the \"outputMode\" key to \"outputLogs\" in `turbo.json`';\n+const INTRODUCED_IN = \"2.0.0\";\n+\n+function migrateConfig(config: TurboJsonSchema) {\n+  for (const [_, taskDef] of Object.entries(config.pipeline)) {\n+    if (Object.prototype.hasOwnProperty.call(taskDef, \"outputMode\")) {\n+      //@ts-expect-error - outputMode is no longer in the schema\n+      taskDef.outputLogs = taskDef.outputMode as OutputMode;\n+      //@ts-expect-error - outputMode is no longer in the schema\n+      delete taskDef.outputMode;\n+    }\n+  }\n+\n+  return config;\n+}\n+\n+export function transformer({\n+  root,\n+  options,\n+}: TransformerArgs): TransformerResults {\n+  const { log, runner } = getTransformerHelpers({\n+    transformer: TRANSFORMER,\n+    rootPath: root,\n+    options,\n+  });\n+\n+  // If `turbo` key is detected in package.json, require user to run the other codemod first.\n+  const packageJsonPath = path.join(root, \"package.json\");\n+  // package.json should always exist, but if it doesn't, it would be a silly place to blow up this codemod\n+  let packageJSON = {};\n+\n+  try {\n+    packageJSON = readJsonSync(packageJsonPath) as PackageJson;\n+  } catch (e) {\n+    // readJSONSync probably failed because the file doesn't exist",
        "comment_created_at": "2024-05-16T18:32:53+00:00",
        "comment_author": "NicholasLYang",
        "comment_body": "I copied this logic from the outputs codemod. I'm down to change it though",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1750937381",
    "pr_number": 9110,
    "pr_file": "packages/eslint-plugin-turbo/lib/rules/no-undeclared-env-vars.ts",
    "created_at": "2024-09-09T21:09:10+00:00",
    "commented_code": "}\n   });\n \n+  const filename = context.getFilename();\n+  debug(`Checking file: ${filename}`);\n+\n+  const matches = frameworkEnvMatches(filename);",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1750937381",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9110,
        "pr_file": "packages/eslint-plugin-turbo/lib/rules/no-undeclared-env-vars.ts",
        "discussion_id": "1750937381",
        "commented_code": "@@ -81,6 +172,17 @@ function create(context: RuleContextWithOptions): Rule.RuleListener {\n     }\n   });\n \n+  const filename = context.getFilename();\n+  debug(`Checking file: ${filename}`);\n+\n+  const matches = frameworkEnvMatches(filename);",
        "comment_created_at": "2024-09-09T21:09:10+00:00",
        "comment_author": "tknickman",
        "comment_body": "There's a lot of things in here that _could_ go wrong. Reading files / parsing JSON etc. We should probably try / catch this to be as defensive as we can, and if something goes wrong, log it - but continue. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1751018854",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9110,
        "pr_file": "packages/eslint-plugin-turbo/lib/rules/no-undeclared-env-vars.ts",
        "discussion_id": "1750937381",
        "commented_code": "@@ -81,6 +172,17 @@ function create(context: RuleContextWithOptions): Rule.RuleListener {\n     }\n   });\n \n+  const filename = context.getFilename();\n+  debug(`Checking file: ${filename}`);\n+\n+  const matches = frameworkEnvMatches(filename);",
        "comment_created_at": "2024-09-09T22:38:10+00:00",
        "comment_author": "dimitropoulos",
        "comment_body": "good call: upon re-inspection for this it was already fairly close, but there were two areas that needed attention.  addressed in 6a3807333acce67cd253ea5d258de285ba10852b",
        "pr_file_module": null
      }
    ]
  }
]