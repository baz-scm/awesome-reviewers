[
  {
    "discussion_id": "1981728252",
    "pr_number": 10092,
    "pr_file": "docs/repo-docs/guides/tools/vitest.mdx",
    "created_at": "2025-03-05T16:06:51+00:00",
    "commented_code": "```\n \n **Notably, the file inputs for a Root Task include all packages by default, so any change in any package will result in a cache miss.** While this does make for a simplified configuration to create merged coverage reports, you'll be missing out on opportunities to cache repeated work.\n+\n+### Using a hybrid approach\n+\n+You can combine the benefits of both approaches by implementing a hybrid solution. This involves maintaining local Vitest configurations in each package while also setting up a root Vitest workspace configuration. This approach gives you the best of both worlds: better local development experience with global watch mode, while preserving Turborepo's caching benefits in CI.",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1981728252",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 10092,
        "pr_file": "docs/repo-docs/guides/tools/vitest.mdx",
        "discussion_id": "1981728252",
        "commented_code": "@@ -212,3 +212,39 @@ Because of this, you'll need to use [Root Tasks](/repo/docs/crafting-your-reposi\n ```\n \n **Notably, the file inputs for a Root Task include all packages by default, so any change in any package will result in a cache miss.** While this does make for a simplified configuration to create merged coverage reports, you'll be missing out on opportunities to cache repeated work.\n+\n+### Using a hybrid approach\n+\n+You can combine the benefits of both approaches by implementing a hybrid solution. This involves maintaining local Vitest configurations in each package while also setting up a root Vitest workspace configuration. This approach gives you the best of both worlds: better local development experience with global watch mode, while preserving Turborepo's caching benefits in CI.",
        "comment_created_at": "2025-03-05T16:06:51+00:00",
        "comment_author": "anthonyshew",
        "comment_body": "```suggestion\r\nYou can combine the benefits of both approaches by implementing a hybrid solution.This approach unifies local development using Vitest's Workspace approach while preserving Turborepo's caching in CI.  This comes at the tradeoff of slightly more configuration and a mixed task running model in the repository.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1980033813",
    "pr_number": 10063,
    "pr_file": "docs/repo-docs/guides/tools/vitest.mdx",
    "created_at": "2025-03-04T18:45:42+00:00",
    "commented_code": "</Tab>\n \n </Tabs>\n+\n+#### Creating merged coverage reports\n+\n+[Vitest's Workspace feature](#using-vitests-workspace-feature) creates an out-of-the-box coverage report that merges all of your packages' tests coverage reports. Following the Turborepo strategy, though, you'll have to merge the coverage reports yourself.\n+\n+<Callout type=\"info\">\n+  The [`with-vitest`\n+  example](https://github.com/vercel/turborepo/tree/main/examples/with-vitest)\n+  shows a complete example that you may adapt for your needs. You can get\n+  started with it quickly using `npx create-turbo@latest --example with-vitest`.\n+</Callout>\n+\n+To do this, you'll follow a few general steps:\n+\n+1. Run `turbo run test` to create the coverage reports.\n+2. Merge the coverage reports with [`nyc merge`](https://github.com/istanbuljs/nyc?tab=readme-ov-file#what-about-nyc-merge).\n+3. Create a report using `nyc report`.\n+\n+Turborepo tasks to accomplish will look like:\n+\n+```json title=\"./turbo.json\"\n+{\n+  \"tasks\": {\n+    \"test\": {\n+      \"dependsOn\": [\"^test\", \"@repo/vitest-config#build\"],\n+      \"outputs\": [\"coverage.json\"]\n+    }\n+    \"merge-json-reports\": {\n+      \"inputs\": [\"coverage/raw/**\"],\n+      \"outputs\": [\"coverage/merged/**\"]\n+    },\n+    \"report\": {\n+      \"dependsOn\": [\"merge-json-reports\"],\n+      \"inputs\": [\"coverage/merge\"],\n+      \"outputs\": [\"coverage/report/**\"]\n+    },\n+  }\n+}\n+```\n+\n+With this in place, run `turbo test && turbo report` to create a merged coverage report.\n+\n+<Callout type=\"info\">\n+  The [`with-vitest`\n+  example](https://github.com/vercel/turborepo/tree/main/examples/with-vitest)\n+  shows a complete example that you may adapt for your needs. You can get\n+  started with it quickly using `npx create-turbo@latest --example with-vitest`.\n+</Callout>\n+\n+### Using Vitest's Workspace feature\n+\n+The Vitest Workspace feature doesn't follow the same model as a [package manager Workspace](/repo/docs/crafting-your-repository/structuring-a-repository). Instead, it uses a root script that then reaches out into each package in the repository to handle the tests in that repsective package.\n+\n+In this model, there aren't package boundaries, from a modern JavaScript ecosystem perspective. This means you can't rely on Turborepo's caching, since Turborepo leans on those package boundaries.\n+\n+Because of this, you'll need to use [Root Tasks](/repo/docs/crafting-your-repository/configuring-tasks#registering-root-tasks) if you want to run the tests using Turborepo. Once you've configured [a Vitest Workspace](https://vitest.dev/guide/workspace), create the Root Tasks for Turborepo:\n+\n+```json title=\"./turbo.json\"\n+{\n+  \"tasks\": {\n+    \"//#test\": {\n+      \"outputs\": [\"TODO\"]",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1980033813",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 10063,
        "pr_file": "docs/repo-docs/guides/tools/vitest.mdx",
        "discussion_id": "1980033813",
        "commented_code": "@@ -111,3 +140,75 @@ turbo test:watch\n </Tab>\n \n </Tabs>\n+\n+#### Creating merged coverage reports\n+\n+[Vitest's Workspace feature](#using-vitests-workspace-feature) creates an out-of-the-box coverage report that merges all of your packages' tests coverage reports. Following the Turborepo strategy, though, you'll have to merge the coverage reports yourself.\n+\n+<Callout type=\"info\">\n+  The [`with-vitest`\n+  example](https://github.com/vercel/turborepo/tree/main/examples/with-vitest)\n+  shows a complete example that you may adapt for your needs. You can get\n+  started with it quickly using `npx create-turbo@latest --example with-vitest`.\n+</Callout>\n+\n+To do this, you'll follow a few general steps:\n+\n+1. Run `turbo run test` to create the coverage reports.\n+2. Merge the coverage reports with [`nyc merge`](https://github.com/istanbuljs/nyc?tab=readme-ov-file#what-about-nyc-merge).\n+3. Create a report using `nyc report`.\n+\n+Turborepo tasks to accomplish will look like:\n+\n+```json title=\"./turbo.json\"\n+{\n+  \"tasks\": {\n+    \"test\": {\n+      \"dependsOn\": [\"^test\", \"@repo/vitest-config#build\"],\n+      \"outputs\": [\"coverage.json\"]\n+    }\n+    \"merge-json-reports\": {\n+      \"inputs\": [\"coverage/raw/**\"],\n+      \"outputs\": [\"coverage/merged/**\"]\n+    },\n+    \"report\": {\n+      \"dependsOn\": [\"merge-json-reports\"],\n+      \"inputs\": [\"coverage/merge\"],\n+      \"outputs\": [\"coverage/report/**\"]\n+    },\n+  }\n+}\n+```\n+\n+With this in place, run `turbo test && turbo report` to create a merged coverage report.\n+\n+<Callout type=\"info\">\n+  The [`with-vitest`\n+  example](https://github.com/vercel/turborepo/tree/main/examples/with-vitest)\n+  shows a complete example that you may adapt for your needs. You can get\n+  started with it quickly using `npx create-turbo@latest --example with-vitest`.\n+</Callout>\n+\n+### Using Vitest's Workspace feature\n+\n+The Vitest Workspace feature doesn't follow the same model as a [package manager Workspace](/repo/docs/crafting-your-repository/structuring-a-repository). Instead, it uses a root script that then reaches out into each package in the repository to handle the tests in that repsective package.\n+\n+In this model, there aren't package boundaries, from a modern JavaScript ecosystem perspective. This means you can't rely on Turborepo's caching, since Turborepo leans on those package boundaries.\n+\n+Because of this, you'll need to use [Root Tasks](/repo/docs/crafting-your-repository/configuring-tasks#registering-root-tasks) if you want to run the tests using Turborepo. Once you've configured [a Vitest Workspace](https://vitest.dev/guide/workspace), create the Root Tasks for Turborepo:\n+\n+```json title=\"./turbo.json\"\n+{\n+  \"tasks\": {\n+    \"//#test\": {\n+      \"outputs\": [\"TODO\"]",
        "comment_created_at": "2025-03-04T18:45:42+00:00",
        "comment_author": "anthonyshew",
        "comment_body": "```suggestion\r\n      \"outputs\": [\"coverage/**\"]\r\n```",
        "pr_file_module": null
      }
    ]
  }
]