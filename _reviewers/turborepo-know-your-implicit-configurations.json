[
  {
    "discussion_id": "2181792283",
    "pr_number": 10628,
    "pr_file": "docs/site/content/docs/reference/configuration.mdx",
    "created_at": "2025-07-03T05:31:13+00:00",
    "commented_code": "Default: `[]`, all files in the package that are checked into source control\n \n-A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. `turbo.json` is **always** considered an input.\n+A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. `turbo.json` and `package.json` are **always** considered inputs, even if you try to explicitly ignore them.",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "2181792283",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 10628,
        "pr_file": "docs/site/content/docs/reference/configuration.mdx",
        "discussion_id": "2181792283",
        "commented_code": "@@ -419,7 +419,7 @@ Defines if task outputs should be cached. Setting `cache` to false is useful for\n \n Default: `[]`, all files in the package that are checked into source control\n \n-A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. `turbo.json` is **always** considered an input.\n+A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. `turbo.json` and `package.json` are **always** considered inputs, even if you try to explicitly ignore them.",
        "comment_created_at": "2025-07-03T05:31:13+00:00",
        "comment_author": "breadadams",
        "comment_body": "**question:** Are there any other exceptions worth listing, lockfiles maybe?",
        "pr_file_module": null
      },
      {
        "comment_id": "2190460912",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 10628,
        "pr_file": "docs/site/content/docs/reference/configuration.mdx",
        "discussion_id": "2181792283",
        "commented_code": "@@ -419,7 +419,7 @@ Defines if task outputs should be cached. Setting `cache` to false is useful for\n \n Default: `[]`, all files in the package that are checked into source control\n \n-A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. `turbo.json` is **always** considered an input.\n+A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. `turbo.json` and `package.json` are **always** considered inputs, even if you try to explicitly ignore them.",
        "comment_created_at": "2025-07-07T15:50:50+00:00",
        "comment_author": "anthonyshew",
        "comment_body": "@chris-olszewski, I actually don't know this one. Can I ignore a lockfile? I'm figuring I can't since we go parse it separately from collecting file inputs.\r\n\r\n I shouldn't be able to, but can I? I'm trying to see if I can trick it into doing so and it doesn't look like it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2190481435",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 10628,
        "pr_file": "docs/site/content/docs/reference/configuration.mdx",
        "discussion_id": "2181792283",
        "commented_code": "@@ -419,7 +419,7 @@ Defines if task outputs should be cached. Setting `cache` to false is useful for\n \n Default: `[]`, all files in the package that are checked into source control\n \n-A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. `turbo.json` is **always** considered an input.\n+A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. `turbo.json` and `package.json` are **always** considered inputs, even if you try to explicitly ignore them.",
        "comment_created_at": "2025-07-07T16:00:13+00:00",
        "comment_author": "chris-olszewski",
        "comment_body": "No, we'll always parse the lockfile and fold the packages into a task hash.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2190483479",
    "pr_number": 10628,
    "pr_file": "docs/site/content/docs/reference/configuration.mdx",
    "created_at": "2025-07-07T16:01:13+00:00",
    "commented_code": "Default: `[]`, all files in the package that are checked into source control\n \n-A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. `turbo.json` is **always** considered an input.\n+A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. The following files are **always** considered inputs, even if you try to explicitly ignore them:\n+\n+- `package.json`\n+- `turbo.json`",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "2190483479",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 10628,
        "pr_file": "docs/site/content/docs/reference/configuration.mdx",
        "discussion_id": "2190483479",
        "commented_code": "@@ -419,7 +419,10 @@ Defines if task outputs should be cached. Setting `cache` to false is useful for\n \n Default: `[]`, all files in the package that are checked into source control\n \n-A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. `turbo.json` is **always** considered an input.\n+A list of file glob patterns relative to the package's `package.json` to consider when determining if a package has changed. The following files are **always** considered inputs, even if you try to explicitly ignore them:\n+\n+- `package.json`\n+- `turbo.json`",
        "comment_created_at": "2025-07-07T16:01:13+00:00",
        "comment_author": "anthonyshew",
        "comment_body": "```suggestion\n- `turbo.json`\n- Package manager lockfiles\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1904332193",
    "pr_number": 9222,
    "pr_file": "docs/repo-docs/guides/frameworks/framework-bindings.mdx",
    "created_at": "2025-01-06T16:00:03+00:00",
    "commented_code": "+---\n+title: Framework bindings in libraries\n+description: Learn how to create framework bindings in packages.\n+---\n+\n+import { PackageManagerTabs, Tab } from '#/components/tabs';\n+import { Callout } from '#/components/callout';\n+\n+Framework bindings in a [Library Package](/repo/docs/core-concepts/package-types#library-packages) integrate your library's code more deeply with a framework by leveraging APIs from the framework directly in the library.\n+\n+To do this, use the `peerDependencies` field in `package.json` of the library, which makes the framework APIs available in your library without installing it directly in the package.\n+\n+<Callout type=\"good-to-know\">\n+  On this page, we'll be using Next.js for examples, but the concepts below\n+  apply to any framework or other dependency.\n+</Callout>\n+\n+## Example\n+\n+Add a `peerDependency` to your library for the dependency that you intend to create bindings for.\n+\n+```json title=\"./packages/ui/package.json\"\n+{\n+  \"name\": \"@repo/ui\",\n+  \"peerDependencies\": {\n+    \"next\": \"*\"\n+  }\n+}\n+```\n+\n+<Callout type=\"good-to-know\">\n+  In the example above, the `peerDependency` for `next` accepts any version. You\n+  may want to specify a range (for example, `\">=15\"`) according to your needs.\n+</Callout>\n+\n+This will make the dependency available in your library, allowing you to write code like below. Note the `className` prop, which sets a default styling for this component in the monorepo and can be overridden in the `props` object.",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1904332193",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9222,
        "pr_file": "docs/repo-docs/guides/frameworks/framework-bindings.mdx",
        "discussion_id": "1904332193",
        "commented_code": "@@ -0,0 +1,81 @@\n+---\n+title: Framework bindings in libraries\n+description: Learn how to create framework bindings in packages.\n+---\n+\n+import { PackageManagerTabs, Tab } from '#/components/tabs';\n+import { Callout } from '#/components/callout';\n+\n+Framework bindings in a [Library Package](/repo/docs/core-concepts/package-types#library-packages) integrate your library's code more deeply with a framework by leveraging APIs from the framework directly in the library.\n+\n+To do this, use the `peerDependencies` field in `package.json` of the library, which makes the framework APIs available in your library without installing it directly in the package.\n+\n+<Callout type=\"good-to-know\">\n+  On this page, we'll be using Next.js for examples, but the concepts below\n+  apply to any framework or other dependency.\n+</Callout>\n+\n+## Example\n+\n+Add a `peerDependency` to your library for the dependency that you intend to create bindings for.\n+\n+```json title=\"./packages/ui/package.json\"\n+{\n+  \"name\": \"@repo/ui\",\n+  \"peerDependencies\": {\n+    \"next\": \"*\"\n+  }\n+}\n+```\n+\n+<Callout type=\"good-to-know\">\n+  In the example above, the `peerDependency` for `next` accepts any version. You\n+  may want to specify a range (for example, `\">=15\"`) according to your needs.\n+</Callout>\n+\n+This will make the dependency available in your library, allowing you to write code like below. Note the `className` prop, which sets a default styling for this component in the monorepo and can be overridden in the `props` object.",
        "comment_created_at": "2025-01-06T16:00:03+00:00",
        "comment_author": "tknickman",
        "comment_body": "We should add a note that older package managers (pnpm 7, npm v4-v6, etc.) will not install peers by default. Sometimes this is worked around by _also_ adding this dep to devDeps, or enabling the right \"install peers\" option of your package manager. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1904673406",
    "pr_number": 9222,
    "pr_file": "docs/repo-docs/guides/frameworks/framework-bindings.mdx",
    "created_at": "2025-01-06T21:50:36+00:00",
    "commented_code": "+---\n+title: Framework bindings in libraries\n+description: Learn how to create framework bindings in packages.\n+---\n+\n+import { PackageManagerTabs, Tab } from '#/components/tabs';\n+import { Callout } from '#/components/callout';\n+\n+Framework bindings in a [Library Package](/repo/docs/core-concepts/package-types#library-packages) integrate your library's code more deeply with a framework by leveraging APIs from the framework directly in the library.\n+\n+To do this, use the `peerDependencies` field in `package.json` of the library, which makes the framework APIs available in your library without installing it directly in the package.\n+\n+<Callout type=\"good-to-know\">\n+  On this page, we'll be using Next.js for examples, but the concepts below\n+  apply to any framework or other dependency.\n+</Callout>\n+\n+## Example\n+\n+Add a `peerDependency` to your library for the dependency that you intend to create bindings for.\n+\n+```json title=\"./packages/ui/package.json\"\n+{\n+  \"name\": \"@repo/ui\",\n+  \"peerDependencies\": {\n+    \"next\": \"*\"\n+  }\n+}\n+```\n+\n+<Callout type=\"good-to-know\">\n+  In the example above, the `peerDependency` for `next` accepts any version. You\n+  may want to specify a range (for example, `\">=15\"`) according to your needs.",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1904673406",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 9222,
        "pr_file": "docs/repo-docs/guides/frameworks/framework-bindings.mdx",
        "discussion_id": "1904673406",
        "commented_code": "@@ -0,0 +1,81 @@\n+---\n+title: Framework bindings in libraries\n+description: Learn how to create framework bindings in packages.\n+---\n+\n+import { PackageManagerTabs, Tab } from '#/components/tabs';\n+import { Callout } from '#/components/callout';\n+\n+Framework bindings in a [Library Package](/repo/docs/core-concepts/package-types#library-packages) integrate your library's code more deeply with a framework by leveraging APIs from the framework directly in the library.\n+\n+To do this, use the `peerDependencies` field in `package.json` of the library, which makes the framework APIs available in your library without installing it directly in the package.\n+\n+<Callout type=\"good-to-know\">\n+  On this page, we'll be using Next.js for examples, but the concepts below\n+  apply to any framework or other dependency.\n+</Callout>\n+\n+## Example\n+\n+Add a `peerDependency` to your library for the dependency that you intend to create bindings for.\n+\n+```json title=\"./packages/ui/package.json\"\n+{\n+  \"name\": \"@repo/ui\",\n+  \"peerDependencies\": {\n+    \"next\": \"*\"\n+  }\n+}\n+```\n+\n+<Callout type=\"good-to-know\">\n+  In the example above, the `peerDependency` for `next` accepts any version. You\n+  may want to specify a range (for example, `\">=15\"`) according to your needs.",
        "comment_created_at": "2025-01-06T21:50:36+00:00",
        "comment_author": "anthonyshew",
        "comment_body": "```suggestion\r\n  may want to specify a range (for example, `\">=15\"`) according to your needs.\r\n  \r\n  Additionally, for older package managers, you may need to instruct your package manager to install peer dependencies with configuration, or add the dependency to `devDependencies` as a workaround.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1676414662",
    "pr_number": 8739,
    "pr_file": "docs/repo-docs/reference/configuration.mdx",
    "created_at": "2024-07-12T20:09:35+00:00",
    "commented_code": "}\n ```\n \n+### `dangerouslyDisablePackageManagerCheck`\n+\n+Default: `false`\n+\n+Turborepo uses your repository's lockfile to determine caching behavior, [Package Graphs](https://turbo.build/repo/docs/core-concepts/internal-packages), and more. Because of this, we use [the `packageManager` field](https://nodejs.org/api/packages.html#packagemanager) to help you stabilize your Turborepo.\n+\n+To help with incremental migration or in situations where you can't use the `packageManager` field, you may use `--dangerously-disable-package-manager-check` to opt out of this check and assume the risks of unstable lockfiles producing unpredictable behavior.",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1676414662",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 8739,
        "pr_file": "docs/repo-docs/reference/configuration.mdx",
        "discussion_id": "1676414662",
        "commented_code": "@@ -95,6 +95,28 @@ Select a terminal UI for the repository.\n }\n ```\n \n+### `dangerouslyDisablePackageManagerCheck`\n+\n+Default: `false`\n+\n+Turborepo uses your repository's lockfile to determine caching behavior, [Package Graphs](https://turbo.build/repo/docs/core-concepts/internal-packages), and more. Because of this, we use [the `packageManager` field](https://nodejs.org/api/packages.html#packagemanager) to help you stabilize your Turborepo.\n+\n+To help with incremental migration or in situations where you can't use the `packageManager` field, you may use `--dangerously-disable-package-manager-check` to opt out of this check and assume the risks of unstable lockfiles producing unpredictable behavior.",
        "comment_created_at": "2024-07-12T20:09:35+00:00",
        "comment_author": "anthonyshew",
        "comment_body": "```suggestion\r\nTo help with incremental migration or in situations where you can't use the `packageManager` field, you may use `--dangerously-disable-package-manager-check` to opt out of this check and assume the risks of unstable lockfiles producing unpredictable behavior. When disabled, Turborepo will attempt a best-effort discovery of the intended package manager meant for the repository.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1676414900",
    "pr_number": 8739,
    "pr_file": "docs/repo-docs/reference/run.mdx",
    "created_at": "2024-07-12T20:09:49+00:00",
    "commented_code": "turbo run build --cwd=./somewhere/else/in/your/repo\n ```\n \n+### `--dangerously-disable-package-manager-check`\n+\n+Turborepo uses your repository's lockfile to determine caching behavior, [Package Graphs](https://turbo.build/repo/docs/core-concepts/internal-packages), and more. Because of this, we use [the `packageManager` field](https://nodejs.org/api/packages.html#packagemanager) to help you stabilize your Turborepo.\n+\n+To help with incremental migration or in situations where you cannot use the `packageManager` field, you may use `--dangerously-disable-package-manager-check` to opt out of this check and assume the risks of unstable lockfiles producing unpredictable behavior.",
    "repo_full_name": "vercel/turborepo",
    "discussion_comments": [
      {
        "comment_id": "1676414900",
        "repo_full_name": "vercel/turborepo",
        "pr_number": 8739,
        "pr_file": "docs/repo-docs/reference/run.mdx",
        "discussion_id": "1676414900",
        "commented_code": "@@ -82,6 +82,20 @@ Set the working directory of the command.\n turbo run build --cwd=./somewhere/else/in/your/repo\n ```\n \n+### `--dangerously-disable-package-manager-check`\n+\n+Turborepo uses your repository's lockfile to determine caching behavior, [Package Graphs](https://turbo.build/repo/docs/core-concepts/internal-packages), and more. Because of this, we use [the `packageManager` field](https://nodejs.org/api/packages.html#packagemanager) to help you stabilize your Turborepo.\n+\n+To help with incremental migration or in situations where you cannot use the `packageManager` field, you may use `--dangerously-disable-package-manager-check` to opt out of this check and assume the risks of unstable lockfiles producing unpredictable behavior.",
        "comment_created_at": "2024-07-12T20:09:49+00:00",
        "comment_author": "anthonyshew",
        "comment_body": "```suggestion\r\nTo help with incremental migration or in situations where you cannot use the `packageManager` field, you may use `--dangerously-disable-package-manager-check` to opt out of this check and assume the risks of unstable lockfiles producing unpredictable behavior. When disabled, Turborepo will attempt a best-effort discovery of the intended package manager meant for the repository.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]