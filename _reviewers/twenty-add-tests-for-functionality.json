[
  {
    "discussion_id": "2328865054",
    "pr_number": 14243,
    "pr_file": "packages/twenty-server/src/engine/core-modules/billing/services/billing-subscription.service.ts",
    "created_at": "2025-09-07T22:07:29+00:00",
    "commented_code": "return entitlement.value;\n   }\n \n-  async switchToYearlyInterval(workspace: Workspace) {\n+  async toggleInterval(workspace: Workspace) {\n     const billingSubscription = await this.getCurrentBillingSubscriptionOrThrow(\n       { workspaceId: workspace.id },\n     );\n \n-    if (billingSubscription.interval === SubscriptionInterval.Year) {\n-      throw new BillingException(\n-        'Cannot switch from yearly to monthly billing interval',\n-        BillingExceptionCode.BILLING_SUBSCRIPTION_INTERVAL_NOT_SWITCHABLE,\n+    return billingSubscription.interval === SubscriptionInterval.Year\n+      ? this.switchToMonthlyInterval(billingSubscription)\n+      : this.switchToYearlyInterval(billingSubscription);\n+  }\n+\n+  async switchToMonthlyInterval(billingSubscription: BillingSubscription) {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2328865054",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14243,
        "pr_file": "packages/twenty-server/src/engine/core-modules/billing/services/billing-subscription.service.ts",
        "discussion_id": "2328865054",
        "commented_code": "@@ -184,18 +186,108 @@ export class BillingSubscriptionService {\n     return entitlement.value;\n   }\n \n-  async switchToYearlyInterval(workspace: Workspace) {\n+  async toggleInterval(workspace: Workspace) {\n     const billingSubscription = await this.getCurrentBillingSubscriptionOrThrow(\n       { workspaceId: workspace.id },\n     );\n \n-    if (billingSubscription.interval === SubscriptionInterval.Year) {\n-      throw new BillingException(\n-        'Cannot switch from yearly to monthly billing interval',\n-        BillingExceptionCode.BILLING_SUBSCRIPTION_INTERVAL_NOT_SWITCHABLE,\n+    return billingSubscription.interval === SubscriptionInterval.Year\n+      ? this.switchToMonthlyInterval(billingSubscription)\n+      : this.switchToYearlyInterval(billingSubscription);\n+  }\n+\n+  async switchToMonthlyInterval(billingSubscription: BillingSubscription) {",
        "comment_created_at": "2025-09-07T22:07:29+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "would be great to add a test on this (maybe it would actually be worth it to extract it to an util to test it easily)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2329428404",
    "pr_number": 14005,
    "pr_file": "packages/twenty-server/src/engine/api/graphql/graphql-query-runner/utils/merge-emails-field-values.util.ts",
    "created_at": "2025-09-08T07:50:14+00:00",
    "commented_code": "+import { hasRecordFieldValue } from 'src/engine/api/graphql/graphql-query-runner/utils/has-record-field-value.util';\n+import { parseAdditionalItems } from 'src/engine/api/graphql/graphql-query-runner/utils/parse-additional-items.util';\n+import { type EmailsMetadata } from 'src/engine/metadata-modules/field-metadata/composite-types/emails.composite-type';\n+\n+export const mergeEmailsFieldValues = (\n+  recordsWithValues: { value: EmailsMetadata; recordId: string }[],\n+  priorityRecordId: string,\n+): EmailsMetadata | null => {\n+  if (recordsWithValues.length === 0) {\n+    return null;",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2329428404",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14005,
        "pr_file": "packages/twenty-server/src/engine/api/graphql/graphql-query-runner/utils/merge-emails-field-values.util.ts",
        "discussion_id": "2329428404",
        "commented_code": "@@ -0,0 +1,50 @@\n+import { hasRecordFieldValue } from 'src/engine/api/graphql/graphql-query-runner/utils/has-record-field-value.util';\n+import { parseAdditionalItems } from 'src/engine/api/graphql/graphql-query-runner/utils/parse-additional-items.util';\n+import { type EmailsMetadata } from 'src/engine/metadata-modules/field-metadata/composite-types/emails.composite-type';\n+\n+export const mergeEmailsFieldValues = (\n+  recordsWithValues: { value: EmailsMetadata; recordId: string }[],\n+  priorityRecordId: string,\n+): EmailsMetadata | null => {\n+  if (recordsWithValues.length === 0) {\n+    return null;",
        "comment_created_at": "2025-09-08T07:50:14+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "**change:** I think we should return something in the composite format here\r\nLet's also add tests",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2307353418",
    "pr_number": 14092,
    "pr_file": "packages/twenty-server/src/engine/core-modules/billing/services/billing-subscription-item.service.ts",
    "created_at": "2025-08-28T13:03:23+00:00",
    "commented_code": "import { JsonContains, Repository } from 'typeorm';\n \n+import { BillingPrice } from 'src/engine/core-modules/billing/entities/billing-price.entity';\n import {\n   BillingException,\n   BillingExceptionCode,\n } from 'src/engine/core-modules/billing/billing.exception';\n-import { type BillingPrice } from 'src/engine/core-modules/billing/entities/billing-price.entity';\n import { BillingSubscriptionItem } from 'src/engine/core-modules/billing/entities/billing-subscription-item.entity';\n import { BillingProductKey } from 'src/engine/core-modules/billing/enums/billing-product-key.enum';\n import { BillingUsageType } from 'src/engine/core-modules/billing/enums/billing-usage-type.enum';\n import { TwentyConfigService } from 'src/engine/core-modules/twenty-config/twenty-config.service';\n+import { StripeSubscriptionService } from 'src/engine/core-modules/billing/stripe/services/stripe-subscription.service';\n+import { billingValidator } from 'src/engine/core-modules/billing/billing.validate';\n \n @Injectable()\n export class BillingSubscriptionItemService {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2307353418",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14092,
        "pr_file": "packages/twenty-server/src/engine/core-modules/billing/services/billing-subscription-item.service.ts",
        "discussion_id": "2307353418",
        "commented_code": "@@ -3,27 +3,35 @@ import { InjectRepository } from '@nestjs/typeorm';\n \n import { JsonContains, Repository } from 'typeorm';\n \n+import { BillingPrice } from 'src/engine/core-modules/billing/entities/billing-price.entity';\n import {\n   BillingException,\n   BillingExceptionCode,\n } from 'src/engine/core-modules/billing/billing.exception';\n-import { type BillingPrice } from 'src/engine/core-modules/billing/entities/billing-price.entity';\n import { BillingSubscriptionItem } from 'src/engine/core-modules/billing/entities/billing-subscription-item.entity';\n import { BillingProductKey } from 'src/engine/core-modules/billing/enums/billing-product-key.enum';\n import { BillingUsageType } from 'src/engine/core-modules/billing/enums/billing-usage-type.enum';\n import { TwentyConfigService } from 'src/engine/core-modules/twenty-config/twenty-config.service';\n+import { StripeSubscriptionService } from 'src/engine/core-modules/billing/stripe/services/stripe-subscription.service';\n+import { billingValidator } from 'src/engine/core-modules/billing/billing.validate';\n \n @Injectable()\n export class BillingSubscriptionItemService {",
        "comment_created_at": "2025-08-28T13:03:23+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "would be great to add tests on this. maybe we can start with integration tests that are the most maintainable and easy to write (as there is almost nothing to mock), I believe we already have a few (billing-controller.integration-spec.ts) for isntance",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2310016804",
    "pr_number": 14144,
    "pr_file": "packages/twenty-server/src/modules/messaging/message-import-manager/drivers/gmail/services/gmail-get-all-folders.service.ts",
    "created_at": "2025-08-29T12:18:25+00:00",
    "commented_code": "+import { Injectable, Logger } from '@nestjs/common';\n+\n+import { gmail_v1 } from 'googleapis';\n+import { isDefined } from 'twenty-shared/utils';\n+\n+import { type ConnectedAccountWorkspaceEntity } from 'src/modules/connected-account/standard-objects/connected-account.workspace-entity';\n+import { MessageFolderWorkspaceEntity } from 'src/modules/messaging/common/standard-objects/message-folder.workspace-entity';\n+import { MESSAGING_GMAIL_EXCLUDED_CATEGORIES } from 'src/modules/messaging/message-import-manager/drivers/gmail/constants/messaging-gmail-excluded-categories';\n+import { GmailClientProvider } from 'src/modules/messaging/message-import-manager/drivers/gmail/providers/gmail-client.provider';\n+import { GmailHandleErrorService } from 'src/modules/messaging/message-import-manager/drivers/gmail/services/gmail-handle-error.service';\n+import { computeGmailCategoryLabelId } from 'src/modules/messaging/message-import-manager/drivers/gmail/utils/compute-gmail-category-label-id.util';\n+\n+type MessageFolder = Pick<\n+  MessageFolderWorkspaceEntity,\n+  'name' | 'isSynced' | 'isSentFolder' | 'externalId'\n+>;\n+\n+@Injectable()\n+export class GmailGetAllFoldersService {\n+  private readonly logger = new Logger(GmailGetAllFoldersService.name);\n+\n+  constructor(\n+    private readonly gmailClientProvider: GmailClientProvider,\n+    private readonly gmailHandleErrorService: GmailHandleErrorService,\n+  ) {}\n+\n+  private isExcludedCategoryFolder(labelId: string): boolean {\n+    const excludedCategoryIds = MESSAGING_GMAIL_EXCLUDED_CATEGORIES.map(\n+      (category) => computeGmailCategoryLabelId(category),\n+    );\n+\n+    return excludedCategoryIds.includes(labelId);\n+  }\n+\n+  private isIncludedFolder(label: gmail_v1.Schema$Label): boolean {\n+    if (!isDefined(label.id)) {\n+      return false;\n+    }\n+\n+    const isTargetSystemFolder =\n+      label.type === 'system' && (label.id === 'INBOX' || label.id === 'SENT');\n+    const isUserFolder = label.type === 'user';\n+\n+    return isTargetSystemFolder || isUserFolder;\n+  }\n+\n+  async getAllMessageFolders(\n+    connectedAccount: Pick<\n+      ConnectedAccountWorkspaceEntity,\n+      'provider' | 'refreshToken' | 'id' | 'handle'\n+    >,\n+  ): Promise<MessageFolder[]> {\n+    try {\n+      const gmailClient =\n+        await this.gmailClientProvider.getGmailClient(connectedAccount);\n+\n+      const response = await gmailClient.users.labels",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2310016804",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14144,
        "pr_file": "packages/twenty-server/src/modules/messaging/message-import-manager/drivers/gmail/services/gmail-get-all-folders.service.ts",
        "discussion_id": "2310016804",
        "commented_code": "@@ -0,0 +1,111 @@\n+import { Injectable, Logger } from '@nestjs/common';\n+\n+import { gmail_v1 } from 'googleapis';\n+import { isDefined } from 'twenty-shared/utils';\n+\n+import { type ConnectedAccountWorkspaceEntity } from 'src/modules/connected-account/standard-objects/connected-account.workspace-entity';\n+import { MessageFolderWorkspaceEntity } from 'src/modules/messaging/common/standard-objects/message-folder.workspace-entity';\n+import { MESSAGING_GMAIL_EXCLUDED_CATEGORIES } from 'src/modules/messaging/message-import-manager/drivers/gmail/constants/messaging-gmail-excluded-categories';\n+import { GmailClientProvider } from 'src/modules/messaging/message-import-manager/drivers/gmail/providers/gmail-client.provider';\n+import { GmailHandleErrorService } from 'src/modules/messaging/message-import-manager/drivers/gmail/services/gmail-handle-error.service';\n+import { computeGmailCategoryLabelId } from 'src/modules/messaging/message-import-manager/drivers/gmail/utils/compute-gmail-category-label-id.util';\n+\n+type MessageFolder = Pick<\n+  MessageFolderWorkspaceEntity,\n+  'name' | 'isSynced' | 'isSentFolder' | 'externalId'\n+>;\n+\n+@Injectable()\n+export class GmailGetAllFoldersService {\n+  private readonly logger = new Logger(GmailGetAllFoldersService.name);\n+\n+  constructor(\n+    private readonly gmailClientProvider: GmailClientProvider,\n+    private readonly gmailHandleErrorService: GmailHandleErrorService,\n+  ) {}\n+\n+  private isExcludedCategoryFolder(labelId: string): boolean {\n+    const excludedCategoryIds = MESSAGING_GMAIL_EXCLUDED_CATEGORIES.map(\n+      (category) => computeGmailCategoryLabelId(category),\n+    );\n+\n+    return excludedCategoryIds.includes(labelId);\n+  }\n+\n+  private isIncludedFolder(label: gmail_v1.Schema$Label): boolean {\n+    if (!isDefined(label.id)) {\n+      return false;\n+    }\n+\n+    const isTargetSystemFolder =\n+      label.type === 'system' && (label.id === 'INBOX' || label.id === 'SENT');\n+    const isUserFolder = label.type === 'user';\n+\n+    return isTargetSystemFolder || isUserFolder;\n+  }\n+\n+  async getAllMessageFolders(\n+    connectedAccount: Pick<\n+      ConnectedAccountWorkspaceEntity,\n+      'provider' | 'refreshToken' | 'id' | 'handle'\n+    >,\n+  ): Promise<MessageFolder[]> {\n+    try {\n+      const gmailClient =\n+        await this.gmailClientProvider.getGmailClient(connectedAccount);\n+\n+      const response = await gmailClient.users.labels",
        "comment_created_at": "2025-08-29T12:18:25+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "would be great if you could add tests with example payloads from gmail, not merging blocker",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2046761568",
    "pr_number": 11606,
    "pr_file": "packages/twenty-server/src/engine/metadata-modules/workspace-migration/factories/enum-column-action.factory.ts",
    "created_at": "2025-04-16T11:52:29+00:00",
    "commented_code": "? [...fieldMetadata.options.map((option) => option.value)]\n       : undefined;\n \n+    const validatedDefaultValue =",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2046761568",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 11606,
        "pr_file": "packages/twenty-server/src/engine/metadata-modules/workspace-migration/factories/enum-column-action.factory.ts",
        "discussion_id": "2046761568",
        "commented_code": "@@ -39,6 +39,13 @@ export class EnumColumnActionFactory extends ColumnActionAbstractFactory<EnumFie\n       ? [...fieldMetadata.options.map((option) => option.value)]\n       : undefined;\n \n+    const validatedDefaultValue =",
        "comment_created_at": "2025-04-16T11:52:29+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "could you add an integration test on this one?",
        "pr_file_module": null
      }
    ]
  }
]