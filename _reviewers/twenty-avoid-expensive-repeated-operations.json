[
  {
    "discussion_id": "2354814224",
    "pr_number": 14422,
    "pr_file": "packages/twenty-emails/src/utils/i18n.utils.ts",
    "created_at": "2025-09-17T08:57:33+00:00",
    "commented_code": "+import { setupI18n, type I18n, type Messages } from '@lingui/core';\n+import { type APP_LOCALES } from 'twenty-shared/translations';\n+import { messages as afMessages } from '../locales/generated/af-ZA';\n+import { messages as arMessages } from '../locales/generated/ar-SA';\n+import { messages as caMessages } from '../locales/generated/ca-ES';\n+import { messages as csMessages } from '../locales/generated/cs-CZ';\n+import { messages as daMessages } from '../locales/generated/da-DK';\n+import { messages as deMessages } from '../locales/generated/de-DE';\n+import { messages as elMessages } from '../locales/generated/el-GR';\n+import { messages as enMessages } from '../locales/generated/en';\n+import { messages as esMessages } from '../locales/generated/es-ES';\n+import { messages as fiMessages } from '../locales/generated/fi-FI';\n+import { messages as frMessages } from '../locales/generated/fr-FR';\n+import { messages as heMessages } from '../locales/generated/he-IL';\n+import { messages as huMessages } from '../locales/generated/hu-HU';\n+import { messages as itMessages } from '../locales/generated/it-IT';\n+import { messages as jaMessages } from '../locales/generated/ja-JP';\n+import { messages as koMessages } from '../locales/generated/ko-KR';\n+import { messages as nlMessages } from '../locales/generated/nl-NL';\n+import { messages as noMessages } from '../locales/generated/no-NO';\n+import { messages as plMessages } from '../locales/generated/pl-PL';\n+import { messages as pseudoEnMessages } from '../locales/generated/pseudo-en';\n+import { messages as ptBRMessages } from '../locales/generated/pt-BR';\n+import { messages as ptPTMessages } from '../locales/generated/pt-PT';\n+import { messages as roMessages } from '../locales/generated/ro-RO';\n+import { messages as ruMessages } from '../locales/generated/ru-RU';\n+import { messages as srMessages } from '../locales/generated/sr-Cyrl';\n+import { messages as svMessages } from '../locales/generated/sv-SE';\n+import { messages as trMessages } from '../locales/generated/tr-TR';\n+import { messages as ukMessages } from '../locales/generated/uk-UA';\n+import { messages as viMessages } from '../locales/generated/vi-VN';\n+import { messages as zhHansMessages } from '../locales/generated/zh-CN';\n+import { messages as zhHantMessages } from '../locales/generated/zh-TW';\n+\n+const messages: Record<keyof typeof APP_LOCALES, Messages> = {\n+  en: enMessages,\n+  'pseudo-en': pseudoEnMessages,\n+  'af-ZA': afMessages,\n+  'ar-SA': arMessages,\n+  'ca-ES': caMessages,\n+  'cs-CZ': csMessages,\n+  'da-DK': daMessages,\n+  'de-DE': deMessages,\n+  'el-GR': elMessages,\n+  'es-ES': esMessages,\n+  'fi-FI': fiMessages,\n+  'fr-FR': frMessages,\n+  'he-IL': heMessages,\n+  'hu-HU': huMessages,\n+  'it-IT': itMessages,\n+  'ja-JP': jaMessages,\n+  'ko-KR': koMessages,\n+  'nl-NL': nlMessages,\n+  'no-NO': noMessages,\n+  'pl-PL': plMessages,\n+  'pt-BR': ptBRMessages,\n+  'pt-PT': ptPTMessages,\n+  'ro-RO': roMessages,\n+  'ru-RU': ruMessages,\n+  'sr-Cyrl': srMessages,\n+  'sv-SE': svMessages,\n+  'tr-TR': trMessages,\n+  'uk-UA': ukMessages,\n+  'vi-VN': viMessages,\n+  'zh-CN': zhHansMessages,\n+  'zh-TW': zhHantMessages,\n+};\n+\n+export const createI18nInstance = (locale: keyof typeof APP_LOCALES): I18n => {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2354814224",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14422,
        "pr_file": "packages/twenty-emails/src/utils/i18n.utils.ts",
        "discussion_id": "2354814224",
        "commented_code": "@@ -0,0 +1,77 @@\n+import { setupI18n, type I18n, type Messages } from '@lingui/core';\n+import { type APP_LOCALES } from 'twenty-shared/translations';\n+import { messages as afMessages } from '../locales/generated/af-ZA';\n+import { messages as arMessages } from '../locales/generated/ar-SA';\n+import { messages as caMessages } from '../locales/generated/ca-ES';\n+import { messages as csMessages } from '../locales/generated/cs-CZ';\n+import { messages as daMessages } from '../locales/generated/da-DK';\n+import { messages as deMessages } from '../locales/generated/de-DE';\n+import { messages as elMessages } from '../locales/generated/el-GR';\n+import { messages as enMessages } from '../locales/generated/en';\n+import { messages as esMessages } from '../locales/generated/es-ES';\n+import { messages as fiMessages } from '../locales/generated/fi-FI';\n+import { messages as frMessages } from '../locales/generated/fr-FR';\n+import { messages as heMessages } from '../locales/generated/he-IL';\n+import { messages as huMessages } from '../locales/generated/hu-HU';\n+import { messages as itMessages } from '../locales/generated/it-IT';\n+import { messages as jaMessages } from '../locales/generated/ja-JP';\n+import { messages as koMessages } from '../locales/generated/ko-KR';\n+import { messages as nlMessages } from '../locales/generated/nl-NL';\n+import { messages as noMessages } from '../locales/generated/no-NO';\n+import { messages as plMessages } from '../locales/generated/pl-PL';\n+import { messages as pseudoEnMessages } from '../locales/generated/pseudo-en';\n+import { messages as ptBRMessages } from '../locales/generated/pt-BR';\n+import { messages as ptPTMessages } from '../locales/generated/pt-PT';\n+import { messages as roMessages } from '../locales/generated/ro-RO';\n+import { messages as ruMessages } from '../locales/generated/ru-RU';\n+import { messages as srMessages } from '../locales/generated/sr-Cyrl';\n+import { messages as svMessages } from '../locales/generated/sv-SE';\n+import { messages as trMessages } from '../locales/generated/tr-TR';\n+import { messages as ukMessages } from '../locales/generated/uk-UA';\n+import { messages as viMessages } from '../locales/generated/vi-VN';\n+import { messages as zhHansMessages } from '../locales/generated/zh-CN';\n+import { messages as zhHantMessages } from '../locales/generated/zh-TW';\n+\n+const messages: Record<keyof typeof APP_LOCALES, Messages> = {\n+  en: enMessages,\n+  'pseudo-en': pseudoEnMessages,\n+  'af-ZA': afMessages,\n+  'ar-SA': arMessages,\n+  'ca-ES': caMessages,\n+  'cs-CZ': csMessages,\n+  'da-DK': daMessages,\n+  'de-DE': deMessages,\n+  'el-GR': elMessages,\n+  'es-ES': esMessages,\n+  'fi-FI': fiMessages,\n+  'fr-FR': frMessages,\n+  'he-IL': heMessages,\n+  'hu-HU': huMessages,\n+  'it-IT': itMessages,\n+  'ja-JP': jaMessages,\n+  'ko-KR': koMessages,\n+  'nl-NL': nlMessages,\n+  'no-NO': noMessages,\n+  'pl-PL': plMessages,\n+  'pt-BR': ptBRMessages,\n+  'pt-PT': ptPTMessages,\n+  'ro-RO': roMessages,\n+  'ru-RU': ruMessages,\n+  'sr-Cyrl': srMessages,\n+  'sv-SE': svMessages,\n+  'tr-TR': trMessages,\n+  'uk-UA': ukMessages,\n+  'vi-VN': viMessages,\n+  'zh-CN': zhHansMessages,\n+  'zh-TW': zhHantMessages,\n+};\n+\n+export const createI18nInstance = (locale: keyof typeof APP_LOCALES): I18n => {",
        "comment_created_at": "2025-09-17T08:57:33+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "this will return a new i18n instance when we call the utils. This is not ideal but I don't see a good work around",
        "pr_file_module": null
      },
      {
        "comment_id": "2354814808",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14422,
        "pr_file": "packages/twenty-emails/src/utils/i18n.utils.ts",
        "discussion_id": "2354814224",
        "commented_code": "@@ -0,0 +1,77 @@\n+import { setupI18n, type I18n, type Messages } from '@lingui/core';\n+import { type APP_LOCALES } from 'twenty-shared/translations';\n+import { messages as afMessages } from '../locales/generated/af-ZA';\n+import { messages as arMessages } from '../locales/generated/ar-SA';\n+import { messages as caMessages } from '../locales/generated/ca-ES';\n+import { messages as csMessages } from '../locales/generated/cs-CZ';\n+import { messages as daMessages } from '../locales/generated/da-DK';\n+import { messages as deMessages } from '../locales/generated/de-DE';\n+import { messages as elMessages } from '../locales/generated/el-GR';\n+import { messages as enMessages } from '../locales/generated/en';\n+import { messages as esMessages } from '../locales/generated/es-ES';\n+import { messages as fiMessages } from '../locales/generated/fi-FI';\n+import { messages as frMessages } from '../locales/generated/fr-FR';\n+import { messages as heMessages } from '../locales/generated/he-IL';\n+import { messages as huMessages } from '../locales/generated/hu-HU';\n+import { messages as itMessages } from '../locales/generated/it-IT';\n+import { messages as jaMessages } from '../locales/generated/ja-JP';\n+import { messages as koMessages } from '../locales/generated/ko-KR';\n+import { messages as nlMessages } from '../locales/generated/nl-NL';\n+import { messages as noMessages } from '../locales/generated/no-NO';\n+import { messages as plMessages } from '../locales/generated/pl-PL';\n+import { messages as pseudoEnMessages } from '../locales/generated/pseudo-en';\n+import { messages as ptBRMessages } from '../locales/generated/pt-BR';\n+import { messages as ptPTMessages } from '../locales/generated/pt-PT';\n+import { messages as roMessages } from '../locales/generated/ro-RO';\n+import { messages as ruMessages } from '../locales/generated/ru-RU';\n+import { messages as srMessages } from '../locales/generated/sr-Cyrl';\n+import { messages as svMessages } from '../locales/generated/sv-SE';\n+import { messages as trMessages } from '../locales/generated/tr-TR';\n+import { messages as ukMessages } from '../locales/generated/uk-UA';\n+import { messages as viMessages } from '../locales/generated/vi-VN';\n+import { messages as zhHansMessages } from '../locales/generated/zh-CN';\n+import { messages as zhHantMessages } from '../locales/generated/zh-TW';\n+\n+const messages: Record<keyof typeof APP_LOCALES, Messages> = {\n+  en: enMessages,\n+  'pseudo-en': pseudoEnMessages,\n+  'af-ZA': afMessages,\n+  'ar-SA': arMessages,\n+  'ca-ES': caMessages,\n+  'cs-CZ': csMessages,\n+  'da-DK': daMessages,\n+  'de-DE': deMessages,\n+  'el-GR': elMessages,\n+  'es-ES': esMessages,\n+  'fi-FI': fiMessages,\n+  'fr-FR': frMessages,\n+  'he-IL': heMessages,\n+  'hu-HU': huMessages,\n+  'it-IT': itMessages,\n+  'ja-JP': jaMessages,\n+  'ko-KR': koMessages,\n+  'nl-NL': nlMessages,\n+  'no-NO': noMessages,\n+  'pl-PL': plMessages,\n+  'pt-BR': ptBRMessages,\n+  'pt-PT': ptPTMessages,\n+  'ro-RO': roMessages,\n+  'ru-RU': ruMessages,\n+  'sr-Cyrl': srMessages,\n+  'sv-SE': svMessages,\n+  'tr-TR': trMessages,\n+  'uk-UA': ukMessages,\n+  'vi-VN': viMessages,\n+  'zh-CN': zhHansMessages,\n+  'zh-TW': zhHantMessages,\n+};\n+\n+export const createI18nInstance = (locale: keyof typeof APP_LOCALES): I18n => {",
        "comment_created_at": "2025-09-17T08:57:46+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "This is likely to be a memory leak",
        "pr_file_module": null
      },
      {
        "comment_id": "2354817003",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14422,
        "pr_file": "packages/twenty-emails/src/utils/i18n.utils.ts",
        "discussion_id": "2354814224",
        "commented_code": "@@ -0,0 +1,77 @@\n+import { setupI18n, type I18n, type Messages } from '@lingui/core';\n+import { type APP_LOCALES } from 'twenty-shared/translations';\n+import { messages as afMessages } from '../locales/generated/af-ZA';\n+import { messages as arMessages } from '../locales/generated/ar-SA';\n+import { messages as caMessages } from '../locales/generated/ca-ES';\n+import { messages as csMessages } from '../locales/generated/cs-CZ';\n+import { messages as daMessages } from '../locales/generated/da-DK';\n+import { messages as deMessages } from '../locales/generated/de-DE';\n+import { messages as elMessages } from '../locales/generated/el-GR';\n+import { messages as enMessages } from '../locales/generated/en';\n+import { messages as esMessages } from '../locales/generated/es-ES';\n+import { messages as fiMessages } from '../locales/generated/fi-FI';\n+import { messages as frMessages } from '../locales/generated/fr-FR';\n+import { messages as heMessages } from '../locales/generated/he-IL';\n+import { messages as huMessages } from '../locales/generated/hu-HU';\n+import { messages as itMessages } from '../locales/generated/it-IT';\n+import { messages as jaMessages } from '../locales/generated/ja-JP';\n+import { messages as koMessages } from '../locales/generated/ko-KR';\n+import { messages as nlMessages } from '../locales/generated/nl-NL';\n+import { messages as noMessages } from '../locales/generated/no-NO';\n+import { messages as plMessages } from '../locales/generated/pl-PL';\n+import { messages as pseudoEnMessages } from '../locales/generated/pseudo-en';\n+import { messages as ptBRMessages } from '../locales/generated/pt-BR';\n+import { messages as ptPTMessages } from '../locales/generated/pt-PT';\n+import { messages as roMessages } from '../locales/generated/ro-RO';\n+import { messages as ruMessages } from '../locales/generated/ru-RU';\n+import { messages as srMessages } from '../locales/generated/sr-Cyrl';\n+import { messages as svMessages } from '../locales/generated/sv-SE';\n+import { messages as trMessages } from '../locales/generated/tr-TR';\n+import { messages as ukMessages } from '../locales/generated/uk-UA';\n+import { messages as viMessages } from '../locales/generated/vi-VN';\n+import { messages as zhHansMessages } from '../locales/generated/zh-CN';\n+import { messages as zhHantMessages } from '../locales/generated/zh-TW';\n+\n+const messages: Record<keyof typeof APP_LOCALES, Messages> = {\n+  en: enMessages,\n+  'pseudo-en': pseudoEnMessages,\n+  'af-ZA': afMessages,\n+  'ar-SA': arMessages,\n+  'ca-ES': caMessages,\n+  'cs-CZ': csMessages,\n+  'da-DK': daMessages,\n+  'de-DE': deMessages,\n+  'el-GR': elMessages,\n+  'es-ES': esMessages,\n+  'fi-FI': fiMessages,\n+  'fr-FR': frMessages,\n+  'he-IL': heMessages,\n+  'hu-HU': huMessages,\n+  'it-IT': itMessages,\n+  'ja-JP': jaMessages,\n+  'ko-KR': koMessages,\n+  'nl-NL': nlMessages,\n+  'no-NO': noMessages,\n+  'pl-PL': plMessages,\n+  'pt-BR': ptBRMessages,\n+  'pt-PT': ptPTMessages,\n+  'ro-RO': roMessages,\n+  'ru-RU': ruMessages,\n+  'sr-Cyrl': srMessages,\n+  'sv-SE': svMessages,\n+  'tr-TR': trMessages,\n+  'uk-UA': ukMessages,\n+  'vi-VN': viMessages,\n+  'zh-CN': zhHansMessages,\n+  'zh-TW': zhHantMessages,\n+};\n+\n+export const createI18nInstance = (locale: keyof typeof APP_LOCALES): I18n => {",
        "comment_created_at": "2025-09-17T08:58:37+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "actually, could we introduce a map of i18n instance here (like we have done in twenty-server)?\r\n\r\nif twe find the locale in the map we return the i18n instance, otherwise we create it and update the map",
        "pr_file_module": null
      },
      {
        "comment_id": "2354819133",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14422,
        "pr_file": "packages/twenty-emails/src/utils/i18n.utils.ts",
        "discussion_id": "2354814224",
        "commented_code": "@@ -0,0 +1,77 @@\n+import { setupI18n, type I18n, type Messages } from '@lingui/core';\n+import { type APP_LOCALES } from 'twenty-shared/translations';\n+import { messages as afMessages } from '../locales/generated/af-ZA';\n+import { messages as arMessages } from '../locales/generated/ar-SA';\n+import { messages as caMessages } from '../locales/generated/ca-ES';\n+import { messages as csMessages } from '../locales/generated/cs-CZ';\n+import { messages as daMessages } from '../locales/generated/da-DK';\n+import { messages as deMessages } from '../locales/generated/de-DE';\n+import { messages as elMessages } from '../locales/generated/el-GR';\n+import { messages as enMessages } from '../locales/generated/en';\n+import { messages as esMessages } from '../locales/generated/es-ES';\n+import { messages as fiMessages } from '../locales/generated/fi-FI';\n+import { messages as frMessages } from '../locales/generated/fr-FR';\n+import { messages as heMessages } from '../locales/generated/he-IL';\n+import { messages as huMessages } from '../locales/generated/hu-HU';\n+import { messages as itMessages } from '../locales/generated/it-IT';\n+import { messages as jaMessages } from '../locales/generated/ja-JP';\n+import { messages as koMessages } from '../locales/generated/ko-KR';\n+import { messages as nlMessages } from '../locales/generated/nl-NL';\n+import { messages as noMessages } from '../locales/generated/no-NO';\n+import { messages as plMessages } from '../locales/generated/pl-PL';\n+import { messages as pseudoEnMessages } from '../locales/generated/pseudo-en';\n+import { messages as ptBRMessages } from '../locales/generated/pt-BR';\n+import { messages as ptPTMessages } from '../locales/generated/pt-PT';\n+import { messages as roMessages } from '../locales/generated/ro-RO';\n+import { messages as ruMessages } from '../locales/generated/ru-RU';\n+import { messages as srMessages } from '../locales/generated/sr-Cyrl';\n+import { messages as svMessages } from '../locales/generated/sv-SE';\n+import { messages as trMessages } from '../locales/generated/tr-TR';\n+import { messages as ukMessages } from '../locales/generated/uk-UA';\n+import { messages as viMessages } from '../locales/generated/vi-VN';\n+import { messages as zhHansMessages } from '../locales/generated/zh-CN';\n+import { messages as zhHantMessages } from '../locales/generated/zh-TW';\n+\n+const messages: Record<keyof typeof APP_LOCALES, Messages> = {\n+  en: enMessages,\n+  'pseudo-en': pseudoEnMessages,\n+  'af-ZA': afMessages,\n+  'ar-SA': arMessages,\n+  'ca-ES': caMessages,\n+  'cs-CZ': csMessages,\n+  'da-DK': daMessages,\n+  'de-DE': deMessages,\n+  'el-GR': elMessages,\n+  'es-ES': esMessages,\n+  'fi-FI': fiMessages,\n+  'fr-FR': frMessages,\n+  'he-IL': heMessages,\n+  'hu-HU': huMessages,\n+  'it-IT': itMessages,\n+  'ja-JP': jaMessages,\n+  'ko-KR': koMessages,\n+  'nl-NL': nlMessages,\n+  'no-NO': noMessages,\n+  'pl-PL': plMessages,\n+  'pt-BR': ptBRMessages,\n+  'pt-PT': ptPTMessages,\n+  'ro-RO': roMessages,\n+  'ru-RU': ruMessages,\n+  'sr-Cyrl': srMessages,\n+  'sv-SE': svMessages,\n+  'tr-TR': trMessages,\n+  'uk-UA': ukMessages,\n+  'vi-VN': viMessages,\n+  'zh-CN': zhHansMessages,\n+  'zh-TW': zhHantMessages,\n+};\n+\n+export const createI18nInstance = (locale: keyof typeof APP_LOCALES): I18n => {",
        "comment_created_at": "2025-09-17T08:59:29+00:00",
        "comment_author": "ehconitin",
        "comment_body": "Yes can do!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2348321383",
    "pr_number": 14464,
    "pr_file": "packages/twenty-server/src/engine/core-modules/search/utils/unaccent-text.ts",
    "created_at": "2025-09-15T08:58:33+00:00",
    "commented_code": "+export const unaccentText = (text: string): string => {\n+  if (!text) return text;\n+  const specialChars: Record<string, string> = {\n+    \u00e6: 'ae',\n+    \u00c6: 'AE',\n+    \u0153: 'oe',\n+    \u0152: 'OE',\n+    \u00f8: 'o',\n+    \u00d8: 'O',\n+    \u0111: 'd',\n+    \u0110: 'D',\n+    \u0127: 'h',\n+    \u0126: 'H',\n+    \u0131: 'i',\n+    \u0142: 'l',\n+    \u0141: 'L',\n+    \u014b: 'n',\n+    \u014a: 'N',\n+    \u00df: 'ss',\n+    \u00fe: 'th',\n+    \u00de: 'TH',\n+  };\n+\n+  let result = text;\n+\n+  for (const [accented, unaccented] of Object.entries(specialChars)) {\n+    result = result.replace(new RegExp(accented, 'g'), unaccented);",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2348321383",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14464,
        "pr_file": "packages/twenty-server/src/engine/core-modules/search/utils/unaccent-text.ts",
        "discussion_id": "2348321383",
        "commented_code": "@@ -0,0 +1,34 @@\n+export const unaccentText = (text: string): string => {\n+  if (!text) return text;\n+  const specialChars: Record<string, string> = {\n+    \u00e6: 'ae',\n+    \u00c6: 'AE',\n+    \u0153: 'oe',\n+    \u0152: 'OE',\n+    \u00f8: 'o',\n+    \u00d8: 'O',\n+    \u0111: 'd',\n+    \u0110: 'D',\n+    \u0127: 'h',\n+    \u0126: 'H',\n+    \u0131: 'i',\n+    \u0142: 'l',\n+    \u0141: 'L',\n+    \u014b: 'n',\n+    \u014a: 'N',\n+    \u00df: 'ss',\n+    \u00fe: 'th',\n+    \u00de: 'TH',\n+  };\n+\n+  let result = text;\n+\n+  for (const [accented, unaccented] of Object.entries(specialChars)) {\n+    result = result.replace(new RegExp(accented, 'g'), unaccented);",
        "comment_created_at": "2025-09-15T08:58:33+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "Performance: Creating RegExp objects in a loop is probably inefficient.\n\nSomething like this would probably be more efficent:\n```\n  const specialChars: Record<string, string> = {\n    \u00e6: 'ae', \u00c6: 'AE', \u0153: 'oe', \u0152: 'OE',\n    \u00f8: 'o', \u00d8: 'O', \u0111: 'd', \u0110: 'D',\n    \u0127: 'h', \u0126: 'H', \u0131: 'i', \u0142: 'l', \u0141: 'L',\n    \u014b: 'n', \u014a: 'N', \u00df: 'ss', \u00fe: 'th', \u00de: 'TH',\n  };\n\n  // Create regex once with all special chars\n  const specialCharsRegex = new RegExp(`[${Object.keys(specialChars).join('')}]`, 'g');\n  \n  return text\n    .replace(specialCharsRegex, (match) => specialChars[match])\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2348332922",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14464,
        "pr_file": "packages/twenty-server/src/engine/core-modules/search/utils/unaccent-text.ts",
        "discussion_id": "2348321383",
        "commented_code": "@@ -0,0 +1,34 @@\n+export const unaccentText = (text: string): string => {\n+  if (!text) return text;\n+  const specialChars: Record<string, string> = {\n+    \u00e6: 'ae',\n+    \u00c6: 'AE',\n+    \u0153: 'oe',\n+    \u0152: 'OE',\n+    \u00f8: 'o',\n+    \u00d8: 'O',\n+    \u0111: 'd',\n+    \u0110: 'D',\n+    \u0127: 'h',\n+    \u0126: 'H',\n+    \u0131: 'i',\n+    \u0142: 'l',\n+    \u0141: 'L',\n+    \u014b: 'n',\n+    \u014a: 'N',\n+    \u00df: 'ss',\n+    \u00fe: 'th',\n+    \u00de: 'TH',\n+  };\n+\n+  let result = text;\n+\n+  for (const [accented, unaccented] of Object.entries(specialChars)) {\n+    result = result.replace(new RegExp(accented, 'g'), unaccented);",
        "comment_created_at": "2025-09-15T09:03:09+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "Ignore this comment since implementation should rather rely on Postgres' unaccent",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2349124230",
    "pr_number": 14507,
    "pr_file": "packages/twenty-front/src/modules/page-layout/widgets/graph/graphWidgetLineChart/hooks/useLineChartData.ts",
    "created_at": "2025-09-15T14:05:26+00:00",
    "commented_code": "+import { type LineChartEnrichedSeries } from '@/page-layout/widgets/graph/graphWidgetLineChart/types/LineChartEnrichedSeries';\n+import { type LineChartSeries } from '@/page-layout/widgets/graph/graphWidgetLineChart/types/LineChartSeries';\n+import { type GraphColorRegistry } from '@/page-layout/widgets/graph/types/GraphColorRegistry';\n+import { createGradientDef } from '@/page-layout/widgets/graph/utils/createGradientDef';\n+import { getColorScheme } from '@/page-layout/widgets/graph/utils/getColorScheme';\n+import {\n+  formatGraphValue,\n+  type GraphValueFormatOptions,\n+} from '@/page-layout/widgets/graph/utils/graphFormatters';\n+import { type LineSeries } from '@nivo/line';\n+import { useMemo } from 'react';\n+import { isDefined } from 'twenty-shared/utils';\n+import { type ThemeType } from 'twenty-ui/theme';\n+\n+type UseLineChartDataProps = {\n+  data: LineChartSeries[];\n+  colorRegistry: GraphColorRegistry;\n+  id: string;\n+  instanceId: string;\n+  enableArea: boolean;\n+  theme: ThemeType;\n+  formatOptions: GraphValueFormatOptions;\n+};\n+\n+export const useLineChartData = ({\n+  data,\n+  colorRegistry,\n+  id,\n+  instanceId,\n+  enableArea,\n+  theme,\n+  formatOptions,\n+}: UseLineChartDataProps) => {\n+  const dataMap: Record<string, LineChartSeries> = {};\n+  for (const series of data) {\n+    dataMap[series.id] = series;\n+  }\n+\n+  const enrichedSeries = useMemo((): LineChartEnrichedSeries[] => {\n+    return data.map((series, index) => {\n+      const colorScheme = getColorScheme(colorRegistry, series.color, index);\n+      const shouldEnableArea = series.enableArea ?? enableArea;\n+      const gradientId = `lineGradient-${id}-${instanceId}-${series.id}-${index}`;\n+\n+      return {\n+        ...series,\n+        colorScheme,\n+        gradientId,\n+        shouldEnableArea,\n+        label: series.label || series.id,\n+      };\n+    });\n+  }, [data, colorRegistry, id, instanceId, enableArea]);\n+\n+  const nivoData: LineSeries[] = data.map((series) => ({\n+    id: series.id,\n+    data: series.data.map((point) => ({\n+      x: point.x,\n+      y: point.y,\n+    })),\n+  }));\n+\n+  const defs = enrichedSeries\n+    .filter((series) => series.shouldEnableArea)",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2349124230",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14507,
        "pr_file": "packages/twenty-front/src/modules/page-layout/widgets/graph/graphWidgetLineChart/hooks/useLineChartData.ts",
        "discussion_id": "2349124230",
        "commented_code": "@@ -0,0 +1,108 @@\n+import { type LineChartEnrichedSeries } from '@/page-layout/widgets/graph/graphWidgetLineChart/types/LineChartEnrichedSeries';\n+import { type LineChartSeries } from '@/page-layout/widgets/graph/graphWidgetLineChart/types/LineChartSeries';\n+import { type GraphColorRegistry } from '@/page-layout/widgets/graph/types/GraphColorRegistry';\n+import { createGradientDef } from '@/page-layout/widgets/graph/utils/createGradientDef';\n+import { getColorScheme } from '@/page-layout/widgets/graph/utils/getColorScheme';\n+import {\n+  formatGraphValue,\n+  type GraphValueFormatOptions,\n+} from '@/page-layout/widgets/graph/utils/graphFormatters';\n+import { type LineSeries } from '@nivo/line';\n+import { useMemo } from 'react';\n+import { isDefined } from 'twenty-shared/utils';\n+import { type ThemeType } from 'twenty-ui/theme';\n+\n+type UseLineChartDataProps = {\n+  data: LineChartSeries[];\n+  colorRegistry: GraphColorRegistry;\n+  id: string;\n+  instanceId: string;\n+  enableArea: boolean;\n+  theme: ThemeType;\n+  formatOptions: GraphValueFormatOptions;\n+};\n+\n+export const useLineChartData = ({\n+  data,\n+  colorRegistry,\n+  id,\n+  instanceId,\n+  enableArea,\n+  theme,\n+  formatOptions,\n+}: UseLineChartDataProps) => {\n+  const dataMap: Record<string, LineChartSeries> = {};\n+  for (const series of data) {\n+    dataMap[series.id] = series;\n+  }\n+\n+  const enrichedSeries = useMemo((): LineChartEnrichedSeries[] => {\n+    return data.map((series, index) => {\n+      const colorScheme = getColorScheme(colorRegistry, series.color, index);\n+      const shouldEnableArea = series.enableArea ?? enableArea;\n+      const gradientId = `lineGradient-${id}-${instanceId}-${series.id}-${index}`;\n+\n+      return {\n+        ...series,\n+        colorScheme,\n+        gradientId,\n+        shouldEnableArea,\n+        label: series.label || series.id,\n+      };\n+    });\n+  }, [data, colorRegistry, id, instanceId, enableArea]);\n+\n+  const nivoData: LineSeries[] = data.map((series) => ({\n+    id: series.id,\n+    data: series.data.map((point) => ({\n+      x: point.x,\n+      y: point.y,\n+    })),\n+  }));\n+\n+  const defs = enrichedSeries\n+    .filter((series) => series.shouldEnableArea)",
        "comment_created_at": "2025-09-15T14:05:26+00:00",
        "comment_author": "bosiraphael",
        "comment_body": "`enrichedSeries` is filtered twice with the same filter, you could use an intermediate variable",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2348721085",
    "pr_number": 14496,
    "pr_file": "packages/twenty-front/src/modules/page-layout/widgets/graph/graphWidgetBarChart/hooks/useBarChartData.ts",
    "created_at": "2025-09-15T11:37:52+00:00",
    "commented_code": "+import { type BarChartConfig } from '@/page-layout/widgets/graph/graphWidgetBarChart/types/BarChartConfig';\n+import { type BarChartDataItem } from '@/page-layout/widgets/graph/graphWidgetBarChart/types/BarChartDataItem';\n+import { type BarChartEnrichedKey } from '@/page-layout/widgets/graph/graphWidgetBarChart/types/BarChartEnrichedKey';\n+import { type BarChartSeries } from '@/page-layout/widgets/graph/graphWidgetBarChart/types/BarChartSeries';\n+import { type GraphColorRegistry } from '@/page-layout/widgets/graph/types/GraphColorRegistry';\n+import { createGradientDef } from '@/page-layout/widgets/graph/utils/createGradientDef';\n+import { getColorScheme } from '@/page-layout/widgets/graph/utils/getColorScheme';\n+import { useMemo } from 'react';\n+\n+type UseBarChartDataProps = {\n+  data: BarChartDataItem[];\n+  indexBy: string;\n+  keys: string[];\n+  series?: BarChartSeries[];\n+  colorRegistry: GraphColorRegistry;\n+  id: string;\n+  instanceId: string;\n+  seriesLabels?: Record<string, string>;\n+  hoveredBar: { key: string; indexValue: string | number } | null;\n+  layout: 'vertical' | 'horizontal';\n+};\n+\n+export const useBarChartData = ({\n+  data,\n+  indexBy,\n+  keys,\n+  series,\n+  colorRegistry,\n+  id,\n+  instanceId,\n+  seriesLabels,\n+  hoveredBar,\n+  layout,\n+}: UseBarChartDataProps) => {\n+  const seriesConfigMap = useMemo(() => {\n+    const map = new Map<string, BarChartSeries>();\n+    series?.forEach((s) => map.set(s.key, s));\n+    return map;\n+  }, [series]);",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2348721085",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14496,
        "pr_file": "packages/twenty-front/src/modules/page-layout/widgets/graph/graphWidgetBarChart/hooks/useBarChartData.ts",
        "discussion_id": "2348721085",
        "commented_code": "@@ -0,0 +1,95 @@\n+import { type BarChartConfig } from '@/page-layout/widgets/graph/graphWidgetBarChart/types/BarChartConfig';\n+import { type BarChartDataItem } from '@/page-layout/widgets/graph/graphWidgetBarChart/types/BarChartDataItem';\n+import { type BarChartEnrichedKey } from '@/page-layout/widgets/graph/graphWidgetBarChart/types/BarChartEnrichedKey';\n+import { type BarChartSeries } from '@/page-layout/widgets/graph/graphWidgetBarChart/types/BarChartSeries';\n+import { type GraphColorRegistry } from '@/page-layout/widgets/graph/types/GraphColorRegistry';\n+import { createGradientDef } from '@/page-layout/widgets/graph/utils/createGradientDef';\n+import { getColorScheme } from '@/page-layout/widgets/graph/utils/getColorScheme';\n+import { useMemo } from 'react';\n+\n+type UseBarChartDataProps = {\n+  data: BarChartDataItem[];\n+  indexBy: string;\n+  keys: string[];\n+  series?: BarChartSeries[];\n+  colorRegistry: GraphColorRegistry;\n+  id: string;\n+  instanceId: string;\n+  seriesLabels?: Record<string, string>;\n+  hoveredBar: { key: string; indexValue: string | number } | null;\n+  layout: 'vertical' | 'horizontal';\n+};\n+\n+export const useBarChartData = ({\n+  data,\n+  indexBy,\n+  keys,\n+  series,\n+  colorRegistry,\n+  id,\n+  instanceId,\n+  seriesLabels,\n+  hoveredBar,\n+  layout,\n+}: UseBarChartDataProps) => {\n+  const seriesConfigMap = useMemo(() => {\n+    const map = new Map<string, BarChartSeries>();\n+    series?.forEach((s) => map.set(s.key, s));\n+    return map;\n+  }, [series]);",
        "comment_created_at": "2025-09-15T11:37:52+00:00",
        "comment_author": "bosiraphael",
        "comment_body": "```suggestion\n const seriesConfigMap = useMemo(\n    () => new Map<string, BarChartSeries>(series?.map((s) => [s.key, s]) || []),\n    [series],\n  );\n```",
        "pr_file_module": null
      }
    ]
  }
]