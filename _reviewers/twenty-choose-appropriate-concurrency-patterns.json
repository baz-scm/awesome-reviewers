[
  {
    "discussion_id": "2343357788",
    "pr_number": 14360,
    "pr_file": "packages/twenty-server/src/engine/core-modules/workspace-impersonation/services/workspace-impersonation.service.ts",
    "created_at": "2025-09-12T08:05:22+00:00",
    "commented_code": "+import { Injectable } from '@nestjs/common';\n+\n+import { randomUUID } from 'crypto';\n+\n+import { DataSource, EntityManager } from 'typeorm';\n+\n+import { AuditService } from 'src/engine/core-modules/audit/services/audit.service';\n+import {\n+  AuthException,\n+  AuthExceptionCode,\n+} from 'src/engine/core-modules/auth/auth.exception';\n+import { type AuthTokens } from 'src/engine/core-modules/auth/dto/token.entity';\n+import { AccessTokenService } from 'src/engine/core-modules/auth/token/services/access-token.service';\n+import { RefreshTokenService } from 'src/engine/core-modules/auth/token/services/refresh-token.service';\n+import { JwtTokenTypeEnum } from 'src/engine/core-modules/auth/types/auth-context.type';\n+import { UserWorkspace } from 'src/engine/core-modules/user-workspace/user-workspace.entity';\n+import { AuthProviderEnum } from 'src/engine/core-modules/workspace/types/workspace.type';\n+import { PermissionFlagType } from 'src/engine/metadata-modules/permissions/constants/permission-flag-type.constants';\n+import { PermissionsService } from 'src/engine/metadata-modules/permissions/permissions.service';\n+import { RoleTargetsEntity } from 'src/engine/metadata-modules/role/role-targets.entity';\n+import { RoleEntity } from 'src/engine/metadata-modules/role/role.entity';\n+import { TwentyORMGlobalManager } from 'src/engine/twenty-orm/twenty-orm-global.manager';\n+import { type WorkspaceMemberWorkspaceEntity } from 'src/modules/workspace-member/standard-objects/workspace-member.workspace-entity';\n+\n+@Injectable()\n+export class WorkspaceImpersonationService {\n+  constructor(\n+    private readonly permissionsService: PermissionsService,\n+    private readonly auditService: AuditService,\n+    private readonly accessTokenService: AccessTokenService,\n+    private readonly refreshTokenService: RefreshTokenService,\n+    private readonly dataSource: DataSource,\n+    private readonly twentyORMGlobalManager: TwentyORMGlobalManager,\n+  ) {}\n+\n+  async impersonateWorkspaceUser({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    targetUserWorkspaceId,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    targetUserWorkspaceId: string;\n+  }): Promise<AuthTokens> {\n+    return await this.impersonateCore({\n+      workspaceId,\n+      impersonatorUserWorkspaceId,\n+      resolveTarget: async (manager) =>\n+        await manager.findOne(UserWorkspace, {\n+          where: { id: targetUserWorkspaceId },\n+        }),\n+    });\n+  }\n+\n+  async impersonateWorkspaceUserByMemberId({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    targetWorkspaceMemberId,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    targetWorkspaceMemberId: string;\n+  }): Promise<AuthTokens> {\n+    return await this.impersonateCore({\n+      workspaceId,\n+      impersonatorUserWorkspaceId,\n+      resolveTarget: async (manager) => {\n+        const workspaceMemberRepository =\n+          await this.twentyORMGlobalManager.getRepositoryForWorkspace<WorkspaceMemberWorkspaceEntity>(\n+            workspaceId,\n+            'workspaceMember',\n+          );\n+        const workspaceMember = await workspaceMemberRepository.findOne({\n+          where: { id: targetWorkspaceMemberId },\n+        });\n+\n+        if (!workspaceMember) return null;\n+\n+        return await manager.findOne(UserWorkspace, {\n+          where: { userId: workspaceMember.userId, workspaceId },\n+        });\n+      },\n+    });\n+  }\n+\n+  private async impersonateCore({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    resolveTarget,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    resolveTarget: (manager: EntityManager) => Promise<UserWorkspace | null>;\n+  }): Promise<AuthTokens> {\n+    const { targetUserId, targetUserWorkspaceId, impersonatorUserId } =\n+      await this.dataSource.transaction(async (manager) => {\n+        const target = await resolveTarget(manager);\n+\n+        if (!target || target.workspaceId !== workspaceId) {\n+          throw new AuthException(\n+            'User workspace not found in current workspace',\n+            AuthExceptionCode.USER_WORKSPACE_NOT_FOUND,\n+          );\n+        }\n+\n+        const impersonatorUserWorkspace = await manager.findOne(UserWorkspace, {\n+          where: { id: impersonatorUserWorkspaceId },\n+        });\n+\n+        if (\n+          impersonatorUserWorkspace &&\n+          impersonatorUserWorkspace.userId === target.userId\n+        ) {\n+          throw new AuthException(\n+            'Cannot impersonate yourself',\n+            AuthExceptionCode.FORBIDDEN_EXCEPTION,\n+          );\n+        }\n+\n+        const roleTargetWithRole = await manager\n+          .createQueryBuilder(RoleTargetsEntity, 'rt')\n+          .innerJoinAndSelect('rt.role', 'role')\n+          .leftJoinAndSelect('role.permissionFlags', 'permissionFlags')\n+          .where('rt.userWorkspaceId = :userWorkspaceId', {\n+            userWorkspaceId: impersonatorUserWorkspaceId,\n+          })\n+          .andWhere('rt.workspaceId = :workspaceId', { workspaceId })\n+          .setLock('pessimistic_read', undefined, ['rt', 'role'])",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2343357788",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/workspace-impersonation/services/workspace-impersonation.service.ts",
        "discussion_id": "2343357788",
        "commented_code": "@@ -0,0 +1,195 @@\n+import { Injectable } from '@nestjs/common';\n+\n+import { randomUUID } from 'crypto';\n+\n+import { DataSource, EntityManager } from 'typeorm';\n+\n+import { AuditService } from 'src/engine/core-modules/audit/services/audit.service';\n+import {\n+  AuthException,\n+  AuthExceptionCode,\n+} from 'src/engine/core-modules/auth/auth.exception';\n+import { type AuthTokens } from 'src/engine/core-modules/auth/dto/token.entity';\n+import { AccessTokenService } from 'src/engine/core-modules/auth/token/services/access-token.service';\n+import { RefreshTokenService } from 'src/engine/core-modules/auth/token/services/refresh-token.service';\n+import { JwtTokenTypeEnum } from 'src/engine/core-modules/auth/types/auth-context.type';\n+import { UserWorkspace } from 'src/engine/core-modules/user-workspace/user-workspace.entity';\n+import { AuthProviderEnum } from 'src/engine/core-modules/workspace/types/workspace.type';\n+import { PermissionFlagType } from 'src/engine/metadata-modules/permissions/constants/permission-flag-type.constants';\n+import { PermissionsService } from 'src/engine/metadata-modules/permissions/permissions.service';\n+import { RoleTargetsEntity } from 'src/engine/metadata-modules/role/role-targets.entity';\n+import { RoleEntity } from 'src/engine/metadata-modules/role/role.entity';\n+import { TwentyORMGlobalManager } from 'src/engine/twenty-orm/twenty-orm-global.manager';\n+import { type WorkspaceMemberWorkspaceEntity } from 'src/modules/workspace-member/standard-objects/workspace-member.workspace-entity';\n+\n+@Injectable()\n+export class WorkspaceImpersonationService {\n+  constructor(\n+    private readonly permissionsService: PermissionsService,\n+    private readonly auditService: AuditService,\n+    private readonly accessTokenService: AccessTokenService,\n+    private readonly refreshTokenService: RefreshTokenService,\n+    private readonly dataSource: DataSource,\n+    private readonly twentyORMGlobalManager: TwentyORMGlobalManager,\n+  ) {}\n+\n+  async impersonateWorkspaceUser({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    targetUserWorkspaceId,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    targetUserWorkspaceId: string;\n+  }): Promise<AuthTokens> {\n+    return await this.impersonateCore({\n+      workspaceId,\n+      impersonatorUserWorkspaceId,\n+      resolveTarget: async (manager) =>\n+        await manager.findOne(UserWorkspace, {\n+          where: { id: targetUserWorkspaceId },\n+        }),\n+    });\n+  }\n+\n+  async impersonateWorkspaceUserByMemberId({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    targetWorkspaceMemberId,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    targetWorkspaceMemberId: string;\n+  }): Promise<AuthTokens> {\n+    return await this.impersonateCore({\n+      workspaceId,\n+      impersonatorUserWorkspaceId,\n+      resolveTarget: async (manager) => {\n+        const workspaceMemberRepository =\n+          await this.twentyORMGlobalManager.getRepositoryForWorkspace<WorkspaceMemberWorkspaceEntity>(\n+            workspaceId,\n+            'workspaceMember',\n+          );\n+        const workspaceMember = await workspaceMemberRepository.findOne({\n+          where: { id: targetWorkspaceMemberId },\n+        });\n+\n+        if (!workspaceMember) return null;\n+\n+        return await manager.findOne(UserWorkspace, {\n+          where: { userId: workspaceMember.userId, workspaceId },\n+        });\n+      },\n+    });\n+  }\n+\n+  private async impersonateCore({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    resolveTarget,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    resolveTarget: (manager: EntityManager) => Promise<UserWorkspace | null>;\n+  }): Promise<AuthTokens> {\n+    const { targetUserId, targetUserWorkspaceId, impersonatorUserId } =\n+      await this.dataSource.transaction(async (manager) => {\n+        const target = await resolveTarget(manager);\n+\n+        if (!target || target.workspaceId !== workspaceId) {\n+          throw new AuthException(\n+            'User workspace not found in current workspace',\n+            AuthExceptionCode.USER_WORKSPACE_NOT_FOUND,\n+          );\n+        }\n+\n+        const impersonatorUserWorkspace = await manager.findOne(UserWorkspace, {\n+          where: { id: impersonatorUserWorkspaceId },\n+        });\n+\n+        if (\n+          impersonatorUserWorkspace &&\n+          impersonatorUserWorkspace.userId === target.userId\n+        ) {\n+          throw new AuthException(\n+            'Cannot impersonate yourself',\n+            AuthExceptionCode.FORBIDDEN_EXCEPTION,\n+          );\n+        }\n+\n+        const roleTargetWithRole = await manager\n+          .createQueryBuilder(RoleTargetsEntity, 'rt')\n+          .innerJoinAndSelect('rt.role', 'role')\n+          .leftJoinAndSelect('role.permissionFlags', 'permissionFlags')\n+          .where('rt.userWorkspaceId = :userWorkspaceId', {\n+            userWorkspaceId: impersonatorUserWorkspaceId,\n+          })\n+          .andWhere('rt.workspaceId = :workspaceId', { workspaceId })\n+          .setLock('pessimistic_read', undefined, ['rt', 'role'])",
        "comment_created_at": "2025-09-12T08:05:22+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "Where does all this come from? why use a transatction?",
        "pr_file_module": null
      },
      {
        "comment_id": "2345506662",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/workspace-impersonation/services/workspace-impersonation.service.ts",
        "discussion_id": "2343357788",
        "commented_code": "@@ -0,0 +1,195 @@\n+import { Injectable } from '@nestjs/common';\n+\n+import { randomUUID } from 'crypto';\n+\n+import { DataSource, EntityManager } from 'typeorm';\n+\n+import { AuditService } from 'src/engine/core-modules/audit/services/audit.service';\n+import {\n+  AuthException,\n+  AuthExceptionCode,\n+} from 'src/engine/core-modules/auth/auth.exception';\n+import { type AuthTokens } from 'src/engine/core-modules/auth/dto/token.entity';\n+import { AccessTokenService } from 'src/engine/core-modules/auth/token/services/access-token.service';\n+import { RefreshTokenService } from 'src/engine/core-modules/auth/token/services/refresh-token.service';\n+import { JwtTokenTypeEnum } from 'src/engine/core-modules/auth/types/auth-context.type';\n+import { UserWorkspace } from 'src/engine/core-modules/user-workspace/user-workspace.entity';\n+import { AuthProviderEnum } from 'src/engine/core-modules/workspace/types/workspace.type';\n+import { PermissionFlagType } from 'src/engine/metadata-modules/permissions/constants/permission-flag-type.constants';\n+import { PermissionsService } from 'src/engine/metadata-modules/permissions/permissions.service';\n+import { RoleTargetsEntity } from 'src/engine/metadata-modules/role/role-targets.entity';\n+import { RoleEntity } from 'src/engine/metadata-modules/role/role.entity';\n+import { TwentyORMGlobalManager } from 'src/engine/twenty-orm/twenty-orm-global.manager';\n+import { type WorkspaceMemberWorkspaceEntity } from 'src/modules/workspace-member/standard-objects/workspace-member.workspace-entity';\n+\n+@Injectable()\n+export class WorkspaceImpersonationService {\n+  constructor(\n+    private readonly permissionsService: PermissionsService,\n+    private readonly auditService: AuditService,\n+    private readonly accessTokenService: AccessTokenService,\n+    private readonly refreshTokenService: RefreshTokenService,\n+    private readonly dataSource: DataSource,\n+    private readonly twentyORMGlobalManager: TwentyORMGlobalManager,\n+  ) {}\n+\n+  async impersonateWorkspaceUser({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    targetUserWorkspaceId,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    targetUserWorkspaceId: string;\n+  }): Promise<AuthTokens> {\n+    return await this.impersonateCore({\n+      workspaceId,\n+      impersonatorUserWorkspaceId,\n+      resolveTarget: async (manager) =>\n+        await manager.findOne(UserWorkspace, {\n+          where: { id: targetUserWorkspaceId },\n+        }),\n+    });\n+  }\n+\n+  async impersonateWorkspaceUserByMemberId({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    targetWorkspaceMemberId,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    targetWorkspaceMemberId: string;\n+  }): Promise<AuthTokens> {\n+    return await this.impersonateCore({\n+      workspaceId,\n+      impersonatorUserWorkspaceId,\n+      resolveTarget: async (manager) => {\n+        const workspaceMemberRepository =\n+          await this.twentyORMGlobalManager.getRepositoryForWorkspace<WorkspaceMemberWorkspaceEntity>(\n+            workspaceId,\n+            'workspaceMember',\n+          );\n+        const workspaceMember = await workspaceMemberRepository.findOne({\n+          where: { id: targetWorkspaceMemberId },\n+        });\n+\n+        if (!workspaceMember) return null;\n+\n+        return await manager.findOne(UserWorkspace, {\n+          where: { userId: workspaceMember.userId, workspaceId },\n+        });\n+      },\n+    });\n+  }\n+\n+  private async impersonateCore({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    resolveTarget,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    resolveTarget: (manager: EntityManager) => Promise<UserWorkspace | null>;\n+  }): Promise<AuthTokens> {\n+    const { targetUserId, targetUserWorkspaceId, impersonatorUserId } =\n+      await this.dataSource.transaction(async (manager) => {\n+        const target = await resolveTarget(manager);\n+\n+        if (!target || target.workspaceId !== workspaceId) {\n+          throw new AuthException(\n+            'User workspace not found in current workspace',\n+            AuthExceptionCode.USER_WORKSPACE_NOT_FOUND,\n+          );\n+        }\n+\n+        const impersonatorUserWorkspace = await manager.findOne(UserWorkspace, {\n+          where: { id: impersonatorUserWorkspaceId },\n+        });\n+\n+        if (\n+          impersonatorUserWorkspace &&\n+          impersonatorUserWorkspace.userId === target.userId\n+        ) {\n+          throw new AuthException(\n+            'Cannot impersonate yourself',\n+            AuthExceptionCode.FORBIDDEN_EXCEPTION,\n+          );\n+        }\n+\n+        const roleTargetWithRole = await manager\n+          .createQueryBuilder(RoleTargetsEntity, 'rt')\n+          .innerJoinAndSelect('rt.role', 'role')\n+          .leftJoinAndSelect('role.permissionFlags', 'permissionFlags')\n+          .where('rt.userWorkspaceId = :userWorkspaceId', {\n+            userWorkspaceId: impersonatorUserWorkspaceId,\n+          })\n+          .andWhere('rt.workspaceId = :workspaceId', { workspaceId })\n+          .setLock('pessimistic_read', undefined, ['rt', 'role'])",
        "comment_created_at": "2025-09-12T21:58:53+00:00",
        "comment_author": "harshit078",
        "comment_body": "I added the use of transaction here to mainly solve race conditions and ensure Atomicity. It locks the rows in roleTargets and role to prevent changes during the transaction. then we use `roleTargetWithRole` in `hasImpersonatePermission` to see if the IMPERSONATE flag is present.\r\nI added this to ensure all steps starting from the user that is being impersonted (target) to end follow single flow and if any step fails then no impersonation should occur.",
        "pr_file_module": null
      },
      {
        "comment_id": "2345927762",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/workspace-impersonation/services/workspace-impersonation.service.ts",
        "discussion_id": "2343357788",
        "commented_code": "@@ -0,0 +1,195 @@\n+import { Injectable } from '@nestjs/common';\n+\n+import { randomUUID } from 'crypto';\n+\n+import { DataSource, EntityManager } from 'typeorm';\n+\n+import { AuditService } from 'src/engine/core-modules/audit/services/audit.service';\n+import {\n+  AuthException,\n+  AuthExceptionCode,\n+} from 'src/engine/core-modules/auth/auth.exception';\n+import { type AuthTokens } from 'src/engine/core-modules/auth/dto/token.entity';\n+import { AccessTokenService } from 'src/engine/core-modules/auth/token/services/access-token.service';\n+import { RefreshTokenService } from 'src/engine/core-modules/auth/token/services/refresh-token.service';\n+import { JwtTokenTypeEnum } from 'src/engine/core-modules/auth/types/auth-context.type';\n+import { UserWorkspace } from 'src/engine/core-modules/user-workspace/user-workspace.entity';\n+import { AuthProviderEnum } from 'src/engine/core-modules/workspace/types/workspace.type';\n+import { PermissionFlagType } from 'src/engine/metadata-modules/permissions/constants/permission-flag-type.constants';\n+import { PermissionsService } from 'src/engine/metadata-modules/permissions/permissions.service';\n+import { RoleTargetsEntity } from 'src/engine/metadata-modules/role/role-targets.entity';\n+import { RoleEntity } from 'src/engine/metadata-modules/role/role.entity';\n+import { TwentyORMGlobalManager } from 'src/engine/twenty-orm/twenty-orm-global.manager';\n+import { type WorkspaceMemberWorkspaceEntity } from 'src/modules/workspace-member/standard-objects/workspace-member.workspace-entity';\n+\n+@Injectable()\n+export class WorkspaceImpersonationService {\n+  constructor(\n+    private readonly permissionsService: PermissionsService,\n+    private readonly auditService: AuditService,\n+    private readonly accessTokenService: AccessTokenService,\n+    private readonly refreshTokenService: RefreshTokenService,\n+    private readonly dataSource: DataSource,\n+    private readonly twentyORMGlobalManager: TwentyORMGlobalManager,\n+  ) {}\n+\n+  async impersonateWorkspaceUser({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    targetUserWorkspaceId,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    targetUserWorkspaceId: string;\n+  }): Promise<AuthTokens> {\n+    return await this.impersonateCore({\n+      workspaceId,\n+      impersonatorUserWorkspaceId,\n+      resolveTarget: async (manager) =>\n+        await manager.findOne(UserWorkspace, {\n+          where: { id: targetUserWorkspaceId },\n+        }),\n+    });\n+  }\n+\n+  async impersonateWorkspaceUserByMemberId({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    targetWorkspaceMemberId,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    targetWorkspaceMemberId: string;\n+  }): Promise<AuthTokens> {\n+    return await this.impersonateCore({\n+      workspaceId,\n+      impersonatorUserWorkspaceId,\n+      resolveTarget: async (manager) => {\n+        const workspaceMemberRepository =\n+          await this.twentyORMGlobalManager.getRepositoryForWorkspace<WorkspaceMemberWorkspaceEntity>(\n+            workspaceId,\n+            'workspaceMember',\n+          );\n+        const workspaceMember = await workspaceMemberRepository.findOne({\n+          where: { id: targetWorkspaceMemberId },\n+        });\n+\n+        if (!workspaceMember) return null;\n+\n+        return await manager.findOne(UserWorkspace, {\n+          where: { userId: workspaceMember.userId, workspaceId },\n+        });\n+      },\n+    });\n+  }\n+\n+  private async impersonateCore({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    resolveTarget,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    resolveTarget: (manager: EntityManager) => Promise<UserWorkspace | null>;\n+  }): Promise<AuthTokens> {\n+    const { targetUserId, targetUserWorkspaceId, impersonatorUserId } =\n+      await this.dataSource.transaction(async (manager) => {\n+        const target = await resolveTarget(manager);\n+\n+        if (!target || target.workspaceId !== workspaceId) {\n+          throw new AuthException(\n+            'User workspace not found in current workspace',\n+            AuthExceptionCode.USER_WORKSPACE_NOT_FOUND,\n+          );\n+        }\n+\n+        const impersonatorUserWorkspace = await manager.findOne(UserWorkspace, {\n+          where: { id: impersonatorUserWorkspaceId },\n+        });\n+\n+        if (\n+          impersonatorUserWorkspace &&\n+          impersonatorUserWorkspace.userId === target.userId\n+        ) {\n+          throw new AuthException(\n+            'Cannot impersonate yourself',\n+            AuthExceptionCode.FORBIDDEN_EXCEPTION,\n+          );\n+        }\n+\n+        const roleTargetWithRole = await manager\n+          .createQueryBuilder(RoleTargetsEntity, 'rt')\n+          .innerJoinAndSelect('rt.role', 'role')\n+          .leftJoinAndSelect('role.permissionFlags', 'permissionFlags')\n+          .where('rt.userWorkspaceId = :userWorkspaceId', {\n+            userWorkspaceId: impersonatorUserWorkspaceId,\n+          })\n+          .andWhere('rt.workspaceId = :workspaceId', { workspaceId })\n+          .setLock('pessimistic_read', undefined, ['rt', 'role'])",
        "comment_created_at": "2025-09-13T06:07:05+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "Permissions have a un-intended side effects. Since we use our own pooler for connections, they don't really work (one connection could commit on behalf of another). Also locking for a read seems extremely strange and a recipe for errors / slowness. Can you please rewrite this trying to follow the most frequent codebase patterns?",
        "pr_file_module": null
      },
      {
        "comment_id": "2345930775",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/workspace-impersonation/services/workspace-impersonation.service.ts",
        "discussion_id": "2343357788",
        "commented_code": "@@ -0,0 +1,195 @@\n+import { Injectable } from '@nestjs/common';\n+\n+import { randomUUID } from 'crypto';\n+\n+import { DataSource, EntityManager } from 'typeorm';\n+\n+import { AuditService } from 'src/engine/core-modules/audit/services/audit.service';\n+import {\n+  AuthException,\n+  AuthExceptionCode,\n+} from 'src/engine/core-modules/auth/auth.exception';\n+import { type AuthTokens } from 'src/engine/core-modules/auth/dto/token.entity';\n+import { AccessTokenService } from 'src/engine/core-modules/auth/token/services/access-token.service';\n+import { RefreshTokenService } from 'src/engine/core-modules/auth/token/services/refresh-token.service';\n+import { JwtTokenTypeEnum } from 'src/engine/core-modules/auth/types/auth-context.type';\n+import { UserWorkspace } from 'src/engine/core-modules/user-workspace/user-workspace.entity';\n+import { AuthProviderEnum } from 'src/engine/core-modules/workspace/types/workspace.type';\n+import { PermissionFlagType } from 'src/engine/metadata-modules/permissions/constants/permission-flag-type.constants';\n+import { PermissionsService } from 'src/engine/metadata-modules/permissions/permissions.service';\n+import { RoleTargetsEntity } from 'src/engine/metadata-modules/role/role-targets.entity';\n+import { RoleEntity } from 'src/engine/metadata-modules/role/role.entity';\n+import { TwentyORMGlobalManager } from 'src/engine/twenty-orm/twenty-orm-global.manager';\n+import { type WorkspaceMemberWorkspaceEntity } from 'src/modules/workspace-member/standard-objects/workspace-member.workspace-entity';\n+\n+@Injectable()\n+export class WorkspaceImpersonationService {\n+  constructor(\n+    private readonly permissionsService: PermissionsService,\n+    private readonly auditService: AuditService,\n+    private readonly accessTokenService: AccessTokenService,\n+    private readonly refreshTokenService: RefreshTokenService,\n+    private readonly dataSource: DataSource,\n+    private readonly twentyORMGlobalManager: TwentyORMGlobalManager,\n+  ) {}\n+\n+  async impersonateWorkspaceUser({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    targetUserWorkspaceId,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    targetUserWorkspaceId: string;\n+  }): Promise<AuthTokens> {\n+    return await this.impersonateCore({\n+      workspaceId,\n+      impersonatorUserWorkspaceId,\n+      resolveTarget: async (manager) =>\n+        await manager.findOne(UserWorkspace, {\n+          where: { id: targetUserWorkspaceId },\n+        }),\n+    });\n+  }\n+\n+  async impersonateWorkspaceUserByMemberId({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    targetWorkspaceMemberId,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    targetWorkspaceMemberId: string;\n+  }): Promise<AuthTokens> {\n+    return await this.impersonateCore({\n+      workspaceId,\n+      impersonatorUserWorkspaceId,\n+      resolveTarget: async (manager) => {\n+        const workspaceMemberRepository =\n+          await this.twentyORMGlobalManager.getRepositoryForWorkspace<WorkspaceMemberWorkspaceEntity>(\n+            workspaceId,\n+            'workspaceMember',\n+          );\n+        const workspaceMember = await workspaceMemberRepository.findOne({\n+          where: { id: targetWorkspaceMemberId },\n+        });\n+\n+        if (!workspaceMember) return null;\n+\n+        return await manager.findOne(UserWorkspace, {\n+          where: { userId: workspaceMember.userId, workspaceId },\n+        });\n+      },\n+    });\n+  }\n+\n+  private async impersonateCore({\n+    workspaceId,\n+    impersonatorUserWorkspaceId,\n+    resolveTarget,\n+  }: {\n+    workspaceId: string;\n+    impersonatorUserWorkspaceId: string;\n+    resolveTarget: (manager: EntityManager) => Promise<UserWorkspace | null>;\n+  }): Promise<AuthTokens> {\n+    const { targetUserId, targetUserWorkspaceId, impersonatorUserId } =\n+      await this.dataSource.transaction(async (manager) => {\n+        const target = await resolveTarget(manager);\n+\n+        if (!target || target.workspaceId !== workspaceId) {\n+          throw new AuthException(\n+            'User workspace not found in current workspace',\n+            AuthExceptionCode.USER_WORKSPACE_NOT_FOUND,\n+          );\n+        }\n+\n+        const impersonatorUserWorkspace = await manager.findOne(UserWorkspace, {\n+          where: { id: impersonatorUserWorkspaceId },\n+        });\n+\n+        if (\n+          impersonatorUserWorkspace &&\n+          impersonatorUserWorkspace.userId === target.userId\n+        ) {\n+          throw new AuthException(\n+            'Cannot impersonate yourself',\n+            AuthExceptionCode.FORBIDDEN_EXCEPTION,\n+          );\n+        }\n+\n+        const roleTargetWithRole = await manager\n+          .createQueryBuilder(RoleTargetsEntity, 'rt')\n+          .innerJoinAndSelect('rt.role', 'role')\n+          .leftJoinAndSelect('role.permissionFlags', 'permissionFlags')\n+          .where('rt.userWorkspaceId = :userWorkspaceId', {\n+            userWorkspaceId: impersonatorUserWorkspaceId,\n+          })\n+          .andWhere('rt.workspaceId = :workspaceId', { workspaceId })\n+          .setLock('pessimistic_read', undefined, ['rt', 'role'])",
        "comment_created_at": "2025-09-13T06:13:33+00:00",
        "comment_author": "harshit078",
        "comment_body": "Sure, I'll rewrite it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2309992153",
    "pr_number": 14144,
    "pr_file": "packages/twenty-server/src/engine/core-modules/auth/services/google-apis.service.ts",
    "created_at": "2025-08-29T12:05:46+00:00",
    "commented_code": "manager,\n           });\n \n-          await this.createMessageChannelService.createMessageChannel({\n+          const newMessageChannelId =\n+            await this.createMessageChannelService.createMessageChannel({\n+              workspaceId,\n+              connectedAccountId: newOrExistingConnectedAccountId,\n+              handle,\n+              messageVisibility,\n+              manager,\n+            });\n+\n+          await this.createMessageFolderService.createMessageFolders({",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2309992153",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14144,
        "pr_file": "packages/twenty-server/src/engine/core-modules/auth/services/google-apis.service.ts",
        "discussion_id": "2309992153",
        "commented_code": "@@ -137,11 +139,18 @@ export class GoogleAPIsService {\n             manager,\n           });\n \n-          await this.createMessageChannelService.createMessageChannel({\n+          const newMessageChannelId =\n+            await this.createMessageChannelService.createMessageChannel({\n+              workspaceId,\n+              connectedAccountId: newOrExistingConnectedAccountId,\n+              handle,\n+              messageVisibility,\n+              manager,\n+            });\n+\n+          await this.createMessageFolderService.createMessageFolders({",
        "comment_created_at": "2025-08-29T12:05:46+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "I think we should sync messageFolders everytime we start a sync :) should be the first step (if the user change their folder, we should detect it).\r\nLet's call your syncMessageFolder function in the get-message-list process",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2269539239",
    "pr_number": 13818,
    "pr_file": "packages/twenty-server/src/modules/workflow/workflow-runner/workflow-run-queue/cron/jobs/workflow-run-dequeue.cron.job.ts",
    "created_at": "2025-08-12T11:26:10+00:00",
    "commented_code": "+import { Logger } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { WorkspaceActivationStatus } from 'twenty-shared/workspace';\n+import { LessThan, Repository } from 'typeorm';\n+\n+import { SentryCronMonitor } from 'src/engine/core-modules/cron/sentry-cron-monitor.decorator';\n+import { Process } from 'src/engine/core-modules/message-queue/decorators/process.decorator';\n+import { Processor } from 'src/engine/core-modules/message-queue/decorators/processor.decorator';\n+import { MessageQueue } from 'src/engine/core-modules/message-queue/message-queue.constants';\n+import { Workspace } from 'src/engine/core-modules/workspace/workspace.entity';\n+import { TwentyORMGlobalManager } from 'src/engine/twenty-orm/twenty-orm-global.manager';\n+import {\n+  WorkflowRunStatus,\n+  WorkflowRunWorkspaceEntity,\n+} from 'src/modules/workflow/common/standard-objects/workflow-run.workspace-entity';\n+import { WorkflowRunQueueWorkspaceService } from 'src/modules/workflow/workflow-runner/workflow-run-queue/workspace-services/workflow-run-queue.workspace-service';\n+\n+export const WORKFLOW_RUN_DEQUEUE_CRON_PATTERN = '0 * * * *';\n+\n+@Processor(MessageQueue.cronQueue)\n+export class WorkflowRunDequeueJob {\n+  private readonly logger = new Logger(WorkflowRunDequeueJob.name);\n+\n+  constructor(\n+    @InjectRepository(Workspace, 'core')\n+    private readonly workspaceRepository: Repository<Workspace>,\n+    private readonly workflowRunQueueWorkspaceService: WorkflowRunQueueWorkspaceService,\n+    private readonly twentyORMGlobalManager: TwentyORMGlobalManager,\n+  ) {}\n+\n+  @Process(WorkflowRunDequeueJob.name)\n+  @SentryCronMonitor(\n+    WorkflowRunDequeueJob.name,\n+    WORKFLOW_RUN_DEQUEUE_CRON_PATTERN,\n+  )\n+  async handle() {\n+    const activeWorkspaces = await this.workspaceRepository.find({\n+      where: {\n+        activationStatus: WorkspaceActivationStatus.ACTIVE,\n+      },\n+    });\n+\n+    for (const activeWorkspace of activeWorkspaces) {\n+      try {\n+        const workflowRunRepository =\n+          await this.twentyORMGlobalManager.getRepositoryForWorkspace(",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2269539239",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 13818,
        "pr_file": "packages/twenty-server/src/modules/workflow/workflow-runner/workflow-run-queue/cron/jobs/workflow-run-dequeue.cron.job.ts",
        "discussion_id": "2269539239",
        "commented_code": "@@ -0,0 +1,86 @@\n+import { Logger } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { WorkspaceActivationStatus } from 'twenty-shared/workspace';\n+import { LessThan, Repository } from 'typeorm';\n+\n+import { SentryCronMonitor } from 'src/engine/core-modules/cron/sentry-cron-monitor.decorator';\n+import { Process } from 'src/engine/core-modules/message-queue/decorators/process.decorator';\n+import { Processor } from 'src/engine/core-modules/message-queue/decorators/processor.decorator';\n+import { MessageQueue } from 'src/engine/core-modules/message-queue/message-queue.constants';\n+import { Workspace } from 'src/engine/core-modules/workspace/workspace.entity';\n+import { TwentyORMGlobalManager } from 'src/engine/twenty-orm/twenty-orm-global.manager';\n+import {\n+  WorkflowRunStatus,\n+  WorkflowRunWorkspaceEntity,\n+} from 'src/modules/workflow/common/standard-objects/workflow-run.workspace-entity';\n+import { WorkflowRunQueueWorkspaceService } from 'src/modules/workflow/workflow-runner/workflow-run-queue/workspace-services/workflow-run-queue.workspace-service';\n+\n+export const WORKFLOW_RUN_DEQUEUE_CRON_PATTERN = '0 * * * *';\n+\n+@Processor(MessageQueue.cronQueue)\n+export class WorkflowRunDequeueJob {\n+  private readonly logger = new Logger(WorkflowRunDequeueJob.name);\n+\n+  constructor(\n+    @InjectRepository(Workspace, 'core')\n+    private readonly workspaceRepository: Repository<Workspace>,\n+    private readonly workflowRunQueueWorkspaceService: WorkflowRunQueueWorkspaceService,\n+    private readonly twentyORMGlobalManager: TwentyORMGlobalManager,\n+  ) {}\n+\n+  @Process(WorkflowRunDequeueJob.name)\n+  @SentryCronMonitor(\n+    WorkflowRunDequeueJob.name,\n+    WORKFLOW_RUN_DEQUEUE_CRON_PATTERN,\n+  )\n+  async handle() {\n+    const activeWorkspaces = await this.workspaceRepository.find({\n+      where: {\n+        activationStatus: WorkspaceActivationStatus.ACTIVE,\n+      },\n+    });\n+\n+    for (const activeWorkspace of activeWorkspaces) {\n+      try {\n+        const workflowRunRepository =\n+          await this.twentyORMGlobalManager.getRepositoryForWorkspace(",
        "comment_created_at": "2025-08-12T11:26:10+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "actually, let's enqueue 1 job for each workspace like we do in messaging stale job",
        "pr_file_module": null
      }
    ]
  }
]