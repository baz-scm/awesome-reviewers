[
  {
    "discussion_id": "2349212899",
    "pr_number": 14360,
    "pr_file": "packages/twenty-front/src/modules/settings/members/ManageMembersDropdownMenu.tsx",
    "created_at": "2025-09-15T14:32:04+00:00",
    "commented_code": "+import { useHasPermissionFlag } from '@/settings/roles/hooks/useHasPermissionFlag';\n+import { Dropdown } from '@/ui/layout/dropdown/components/Dropdown';\n+import { DropdownContent } from '@/ui/layout/dropdown/components/DropdownContent';\n+import { DropdownMenuItemsContainer } from '@/ui/layout/dropdown/components/DropdownMenuItemsContainer';\n+import { useCloseDropdown } from '@/ui/layout/dropdown/hooks/useCloseDropdown';\n+import { t } from '@lingui/core/macro';\n+import { IconDotsVertical, IconTrash, IconUser } from 'twenty-ui/display';\n+import { LightIconButton } from 'twenty-ui/input';\n+import { MenuItem } from 'twenty-ui/navigation';\n+import { PermissionFlagType } from '~/generated/graphql';\n+\n+type ManageMembersDropdownMenuProps = {\n+  dropdownId: string;\n+  workspaceMemberId: string;\n+  onDelete: (workspaceMemberId: string) => void;\n+  onImpersonate: (workspaceMemberId: string) => void;\n+};\n+\n+export const ManageMembersDropdownMenu = ({\n+  dropdownId,\n+  workspaceMemberId,\n+  onDelete,\n+  onImpersonate,\n+}: ManageMembersDropdownMenuProps) => {\n+  const { closeDropdown } = useCloseDropdown();\n+  const canImpersonate = useHasPermissionFlag(PermissionFlagType.IMPERSONATE);",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2349212899",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-front/src/modules/settings/members/ManageMembersDropdownMenu.tsx",
        "discussion_id": "2349212899",
        "commented_code": "@@ -0,0 +1,62 @@\n+import { useHasPermissionFlag } from '@/settings/roles/hooks/useHasPermissionFlag';\n+import { Dropdown } from '@/ui/layout/dropdown/components/Dropdown';\n+import { DropdownContent } from '@/ui/layout/dropdown/components/DropdownContent';\n+import { DropdownMenuItemsContainer } from '@/ui/layout/dropdown/components/DropdownMenuItemsContainer';\n+import { useCloseDropdown } from '@/ui/layout/dropdown/hooks/useCloseDropdown';\n+import { t } from '@lingui/core/macro';\n+import { IconDotsVertical, IconTrash, IconUser } from 'twenty-ui/display';\n+import { LightIconButton } from 'twenty-ui/input';\n+import { MenuItem } from 'twenty-ui/navigation';\n+import { PermissionFlagType } from '~/generated/graphql';\n+\n+type ManageMembersDropdownMenuProps = {\n+  dropdownId: string;\n+  workspaceMemberId: string;\n+  onDelete: (workspaceMemberId: string) => void;\n+  onImpersonate: (workspaceMemberId: string) => void;\n+};\n+\n+export const ManageMembersDropdownMenu = ({\n+  dropdownId,\n+  workspaceMemberId,\n+  onDelete,\n+  onImpersonate,\n+}: ManageMembersDropdownMenuProps) => {\n+  const { closeDropdown } = useCloseDropdown();\n+  const canImpersonate = useHasPermissionFlag(PermissionFlagType.IMPERSONATE);",
        "comment_created_at": "2025-09-15T14:32:04+00:00",
        "comment_author": "etiennejouan",
        "comment_body": "> If possible: Permission hierarchy enforcement: users can only impersonate those with equal or lower permissions // cannot impersonate users with higher role privileges ([source](https://github.com/twentyhq/core-team-issues/issues/1421))\n\nPermission hierarchy is not checked ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2349223073",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-front/src/modules/settings/members/ManageMembersDropdownMenu.tsx",
        "discussion_id": "2349212899",
        "commented_code": "@@ -0,0 +1,62 @@\n+import { useHasPermissionFlag } from '@/settings/roles/hooks/useHasPermissionFlag';\n+import { Dropdown } from '@/ui/layout/dropdown/components/Dropdown';\n+import { DropdownContent } from '@/ui/layout/dropdown/components/DropdownContent';\n+import { DropdownMenuItemsContainer } from '@/ui/layout/dropdown/components/DropdownMenuItemsContainer';\n+import { useCloseDropdown } from '@/ui/layout/dropdown/hooks/useCloseDropdown';\n+import { t } from '@lingui/core/macro';\n+import { IconDotsVertical, IconTrash, IconUser } from 'twenty-ui/display';\n+import { LightIconButton } from 'twenty-ui/input';\n+import { MenuItem } from 'twenty-ui/navigation';\n+import { PermissionFlagType } from '~/generated/graphql';\n+\n+type ManageMembersDropdownMenuProps = {\n+  dropdownId: string;\n+  workspaceMemberId: string;\n+  onDelete: (workspaceMemberId: string) => void;\n+  onImpersonate: (workspaceMemberId: string) => void;\n+};\n+\n+export const ManageMembersDropdownMenu = ({\n+  dropdownId,\n+  workspaceMemberId,\n+  onDelete,\n+  onImpersonate,\n+}: ManageMembersDropdownMenuProps) => {\n+  const { closeDropdown } = useCloseDropdown();\n+  const canImpersonate = useHasPermissionFlag(PermissionFlagType.IMPERSONATE);",
        "comment_created_at": "2025-09-15T14:35:37+00:00",
        "comment_author": "etiennejouan",
        "comment_body": "Any one having access to 'user' page can impersonate ? I have not find where you can enable impersonate on a given role.\nEdit: It seems you can impersonate if you have \"Ability to edit all settings\".",
        "pr_file_module": null
      },
      {
        "comment_id": "2351715849",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-front/src/modules/settings/members/ManageMembersDropdownMenu.tsx",
        "discussion_id": "2349212899",
        "commented_code": "@@ -0,0 +1,62 @@\n+import { useHasPermissionFlag } from '@/settings/roles/hooks/useHasPermissionFlag';\n+import { Dropdown } from '@/ui/layout/dropdown/components/Dropdown';\n+import { DropdownContent } from '@/ui/layout/dropdown/components/DropdownContent';\n+import { DropdownMenuItemsContainer } from '@/ui/layout/dropdown/components/DropdownMenuItemsContainer';\n+import { useCloseDropdown } from '@/ui/layout/dropdown/hooks/useCloseDropdown';\n+import { t } from '@lingui/core/macro';\n+import { IconDotsVertical, IconTrash, IconUser } from 'twenty-ui/display';\n+import { LightIconButton } from 'twenty-ui/input';\n+import { MenuItem } from 'twenty-ui/navigation';\n+import { PermissionFlagType } from '~/generated/graphql';\n+\n+type ManageMembersDropdownMenuProps = {\n+  dropdownId: string;\n+  workspaceMemberId: string;\n+  onDelete: (workspaceMemberId: string) => void;\n+  onImpersonate: (workspaceMemberId: string) => void;\n+};\n+\n+export const ManageMembersDropdownMenu = ({\n+  dropdownId,\n+  workspaceMemberId,\n+  onDelete,\n+  onImpersonate,\n+}: ManageMembersDropdownMenuProps) => {\n+  const { closeDropdown } = useCloseDropdown();\n+  const canImpersonate = useHasPermissionFlag(PermissionFlagType.IMPERSONATE);",
        "comment_created_at": "2025-09-16T09:43:39+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "> Permission hierarchy is not checked ?\r\n\r\nSeen with Harshit, this is expected\r\n\r\nGood point on displaying impersonate permissions on the sub-settings on the role edit page!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2318348740",
    "pr_number": 14251,
    "pr_file": "packages/twenty-front/src/modules/dashboards/widgets/iframe/components/IframeWidget.tsx",
    "created_at": "2025-09-03T09:19:59+00:00",
    "commented_code": "+import { SKELETON_LOADER_HEIGHT_SIZES } from '@/activities/components/SkeletonLoader';\n+import { useTheme } from '@emotion/react';\n+import styled from '@emotion/styled';\n+import { useState } from 'react';\n+import Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\n+\n+const StyledContainer = styled.div`\n+  background: ${({ theme }) => theme.background.transparent.lighter};\n+  border-radius: ${({ theme }) => theme.border.radius.md};\n+  display: flex;\n+  flex-direction: column;\n+  height: 100%;\n+  overflow: hidden;\n+  position: relative;\n+  width: 100%;\n+`;\n+\n+const StyledIframe = styled.iframe`\n+  border: none;\n+  flex: 1;\n+  height: 100%;\n+  width: 100%;\n+`;\n+\n+const StyledLoadingContainer = styled.div`\n+  position: absolute;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  bottom: 0;\n+  padding-top: ${({ theme }) => theme.spacing(2)};\n+  padding-left: ${({ theme }) => theme.spacing(2)};\n+  background: ${({ theme }) => theme.background.primary};\n+  pointer-events: none;\n+  z-index: 1;\n+`;\n+\n+const StyledErrorContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: center;\n+  justify-content: center;\n+  height: 100%;\n+  padding: ${({ theme }) => theme.spacing(4)};\n+  text-align: center;\n+`;\n+\n+const StyledErrorMessage = styled.div`\n+  color: ${({ theme }) => theme.font.color.secondary};\n+  font-size: ${({ theme }) => theme.font.size.md};\n+  margin-top: ${({ theme }) => theme.spacing(2)};\n+`;\n+\n+const StyledErrorUrl = styled.div`\n+  color: ${({ theme }) => theme.font.color.tertiary};\n+  font-size: ${({ theme }) => theme.font.size.sm};\n+  margin-top: ${({ theme }) => theme.spacing(1)};\n+  word-break: break-all;\n+`;\n+\n+export type IframeWidgetProps = {\n+  url: string;\n+  title?: string;\n+};\n+\n+export const IframeWidget = ({\n+  url,\n+  title = 'Embedded Content',\n+}: IframeWidgetProps) => {\n+  const theme = useTheme();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [hasError, setHasError] = useState(false);\n+\n+  const handleIframeLoad = () => {\n+    setIsLoading(false);\n+  };\n+\n+  const handleIframeError = () => {\n+    setIsLoading(false);\n+    setHasError(true);\n+  };\n+\n+  if (hasError) {\n+    return (\n+      <StyledContainer>\n+        <StyledErrorContainer>\n+          <StyledErrorMessage>Failed to load content</StyledErrorMessage>\n+          <StyledErrorUrl>{url}</StyledErrorUrl>\n+        </StyledErrorContainer>\n+      </StyledContainer>\n+    );\n+  }\n+\n+  return (\n+    <StyledContainer>\n+      {isLoading && (\n+        <StyledLoadingContainer>\n+          <SkeletonTheme\n+            baseColor={theme.background.tertiary}\n+            highlightColor={theme.background.transparent.lighter}\n+            borderRadius={4}\n+          >\n+            <Skeleton\n+              width={120}\n+              height={SKELETON_LOADER_HEIGHT_SIZES.standard.m}\n+            />\n+          </SkeletonTheme>\n+        </StyledLoadingContainer>\n+      )}\n+      <StyledIframe\n+        src={url}\n+        title={title}\n+        onLoad={handleIframeLoad}\n+        onError={handleIframeError}\n+        sandbox=\"allow-scripts allow-same-origin allow-forms allow-popups\" // open question - I am sure some of these props should be configurable and should have user control -- should we keep it simple now and add more complexity later?\n+        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" // same here\n+        allowFullScreen //same here",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2318348740",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14251,
        "pr_file": "packages/twenty-front/src/modules/dashboards/widgets/iframe/components/IframeWidget.tsx",
        "discussion_id": "2318348740",
        "commented_code": "@@ -0,0 +1,121 @@\n+import { SKELETON_LOADER_HEIGHT_SIZES } from '@/activities/components/SkeletonLoader';\n+import { useTheme } from '@emotion/react';\n+import styled from '@emotion/styled';\n+import { useState } from 'react';\n+import Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\n+\n+const StyledContainer = styled.div`\n+  background: ${({ theme }) => theme.background.transparent.lighter};\n+  border-radius: ${({ theme }) => theme.border.radius.md};\n+  display: flex;\n+  flex-direction: column;\n+  height: 100%;\n+  overflow: hidden;\n+  position: relative;\n+  width: 100%;\n+`;\n+\n+const StyledIframe = styled.iframe`\n+  border: none;\n+  flex: 1;\n+  height: 100%;\n+  width: 100%;\n+`;\n+\n+const StyledLoadingContainer = styled.div`\n+  position: absolute;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  bottom: 0;\n+  padding-top: ${({ theme }) => theme.spacing(2)};\n+  padding-left: ${({ theme }) => theme.spacing(2)};\n+  background: ${({ theme }) => theme.background.primary};\n+  pointer-events: none;\n+  z-index: 1;\n+`;\n+\n+const StyledErrorContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: center;\n+  justify-content: center;\n+  height: 100%;\n+  padding: ${({ theme }) => theme.spacing(4)};\n+  text-align: center;\n+`;\n+\n+const StyledErrorMessage = styled.div`\n+  color: ${({ theme }) => theme.font.color.secondary};\n+  font-size: ${({ theme }) => theme.font.size.md};\n+  margin-top: ${({ theme }) => theme.spacing(2)};\n+`;\n+\n+const StyledErrorUrl = styled.div`\n+  color: ${({ theme }) => theme.font.color.tertiary};\n+  font-size: ${({ theme }) => theme.font.size.sm};\n+  margin-top: ${({ theme }) => theme.spacing(1)};\n+  word-break: break-all;\n+`;\n+\n+export type IframeWidgetProps = {\n+  url: string;\n+  title?: string;\n+};\n+\n+export const IframeWidget = ({\n+  url,\n+  title = 'Embedded Content',\n+}: IframeWidgetProps) => {\n+  const theme = useTheme();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [hasError, setHasError] = useState(false);\n+\n+  const handleIframeLoad = () => {\n+    setIsLoading(false);\n+  };\n+\n+  const handleIframeError = () => {\n+    setIsLoading(false);\n+    setHasError(true);\n+  };\n+\n+  if (hasError) {\n+    return (\n+      <StyledContainer>\n+        <StyledErrorContainer>\n+          <StyledErrorMessage>Failed to load content</StyledErrorMessage>\n+          <StyledErrorUrl>{url}</StyledErrorUrl>\n+        </StyledErrorContainer>\n+      </StyledContainer>\n+    );\n+  }\n+\n+  return (\n+    <StyledContainer>\n+      {isLoading && (\n+        <StyledLoadingContainer>\n+          <SkeletonTheme\n+            baseColor={theme.background.tertiary}\n+            highlightColor={theme.background.transparent.lighter}\n+            borderRadius={4}\n+          >\n+            <Skeleton\n+              width={120}\n+              height={SKELETON_LOADER_HEIGHT_SIZES.standard.m}\n+            />\n+          </SkeletonTheme>\n+        </StyledLoadingContainer>\n+      )}\n+      <StyledIframe\n+        src={url}\n+        title={title}\n+        onLoad={handleIframeLoad}\n+        onError={handleIframeError}\n+        sandbox=\"allow-scripts allow-same-origin allow-forms allow-popups\" // open question - I am sure some of these props should be configurable and should have user control -- should we keep it simple now and add more complexity later?\n+        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" // same here\n+        allowFullScreen //same here",
        "comment_created_at": "2025-09-03T09:19:59+00:00",
        "comment_author": "bosiraphael",
        "comment_body": "I think we should keep it as restrictive as possible to avoid security/privacy issues:\nsandbox=\"allow-scripts allow-forms allow-popups\"\nallow=\"encrypted-media\"\nallowFullScreen\n",
        "pr_file_module": null
      }
    ]
  }
]