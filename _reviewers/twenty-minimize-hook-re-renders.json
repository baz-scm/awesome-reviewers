[
  {
    "discussion_id": "2328860094",
    "pr_number": 14243,
    "pr_file": "packages/twenty-front/src/modules/billing/hooks/useBillingPlan.ts",
    "created_at": "2025-09-07T21:50:23+00:00",
    "commented_code": "+import {\n+  type SubscriptionInterval,\n+  useListPlansQuery,\n+} from '~/generated-metadata/graphql';\n+import { currentWorkspaceState } from '@/auth/states/currentWorkspaceState';\n+import { findOrThrow } from '~/utils/array/findOrThrow';\n+import {\n+  type BillingPlanKey,\n+  type BillingPriceLicensedDto,\n+  type BillingPriceMeteredDto,\n+  BillingProductKey,\n+  BillingUsageType,\n+} from '~/generated/graphql';\n+import { type MeteredBillingPrice } from '@/billing/types/billing-price-tiers.type';\n+import { isDefined } from 'twenty-shared/utils';\n+import { useRecoilValue } from 'recoil';\n+\n+export const useBillingPlan = () => {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2328860094",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14243,
        "pr_file": "packages/twenty-front/src/modules/billing/hooks/useBillingPlan.ts",
        "discussion_id": "2328860094",
        "commented_code": "@@ -0,0 +1,239 @@\n+import {\n+  type SubscriptionInterval,\n+  useListPlansQuery,\n+} from '~/generated-metadata/graphql';\n+import { currentWorkspaceState } from '@/auth/states/currentWorkspaceState';\n+import { findOrThrow } from '~/utils/array/findOrThrow';\n+import {\n+  type BillingPlanKey,\n+  type BillingPriceLicensedDto,\n+  type BillingPriceMeteredDto,\n+  BillingProductKey,\n+  BillingUsageType,\n+} from '~/generated/graphql';\n+import { type MeteredBillingPrice } from '@/billing/types/billing-price-tiers.type';\n+import { isDefined } from 'twenty-shared/utils';\n+import { useRecoilValue } from 'recoil';\n+\n+export const useBillingPlan = () => {",
        "comment_created_at": "2025-09-07T21:50:23+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "this hook is problematic to me:\r\n- it's an umbrella hook doing many things, this means that using it will trigger a re-render nightmare!\r\n- all these getters are not idiomatic to me: the issue is that these are functions and that we use the function return in react which is new for react engine at each re-renders and therefore can trigger a re-render itself\r\n\r\nI would recommend creating hooks (maybe not one for everything but more and to return the things directly\r\nFor instance:\r\nusePlans()\r\nuseProducts()\r\n\r\nuseProduct(planKey)\r\netc...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2328860953",
    "pr_number": 14243,
    "pr_file": "packages/twenty-front/src/modules/billing/hooks/useFormatPrices.ts",
    "created_at": "2025-09-07T21:53:15+00:00",
    "commented_code": "+import { BillingPlanKey, SubscriptionInterval } from '~/generated/graphql';\n+import { useBillingPlan } from '@/billing/hooks/useBillingPlan';\n+\n+export const useFormatPrices = () => {\n+  const { getBaseLicensedPriceByPlanKeyAndInterval } = useBillingPlan();\n+\n+  const formatMonthlyPrices = () => {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2328860953",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14243,
        "pr_file": "packages/twenty-front/src/modules/billing/hooks/useFormatPrices.ts",
        "discussion_id": "2328860953",
        "commented_code": "@@ -0,0 +1,43 @@\n+import { BillingPlanKey, SubscriptionInterval } from '~/generated/graphql';\n+import { useBillingPlan } from '@/billing/hooks/useBillingPlan';\n+\n+export const useFormatPrices = () => {\n+  const { getBaseLicensedPriceByPlanKeyAndInterval } = useBillingPlan();\n+\n+  const formatMonthlyPrices = () => {",
        "comment_created_at": "2025-09-07T21:53:15+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "same here, let's return the prices as a return of a hook, this is not playing well with react IMO\r\n\r\nEither we have utils that take everything they need as input and they are defined out of react scope.\r\nEither we use hooks that will have stable references\r\n\r\nIf you have hooks retruning functions this will trigger re-renders unless you are using useCallback or useRecoilCallback. We are also trying to avoid using useCallback as we are building our code to be render agnostic, however let's not create too many re-renders when there is no point doing it!\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2328802090",
    "pr_number": 14341,
    "pr_file": "packages/twenty-front/src/modules/localization/utils/isRtl.ts",
    "created_at": "2025-09-07T18:49:38+00:00",
    "commented_code": "+import { i18n } from '@lingui/core';\n+import { isRtlLocale } from 'twenty-shared/utils';\n+\n+/**\n+ * Returns whether the currently active i18n locale is a RTL locale.\n+ */\n+export const isRtl = (): boolean => isRtlLocale(i18n.locale);",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2328802090",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14341,
        "pr_file": "packages/twenty-front/src/modules/localization/utils/isRtl.ts",
        "discussion_id": "2328802090",
        "commented_code": "@@ -0,0 +1,7 @@\n+import { i18n } from '@lingui/core';\n+import { isRtlLocale } from 'twenty-shared/utils';\n+\n+/**\n+ * Returns whether the currently active i18n locale is a RTL locale.\n+ */\n+export const isRtl = (): boolean => isRtlLocale(i18n.locale);",
        "comment_created_at": "2025-09-07T18:49:38+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "this is unlikely to behave well in react:\r\n- either we have a function like this and we will re-render everytime we call it (as react cannot identify that the return has not changed)\r\n- ==> I feel we should have a context at the top of the app that's set once we get the locale from the user (or default to the browser one if we don't have it yet)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2326697100",
    "pr_number": 14318,
    "pr_file": "packages/twenty-front/src/modules/settings/page-layout/hooks/usePageLayoutTabCreate.ts",
    "created_at": "2025-09-06T09:17:13+00:00",
    "commented_code": "+import { useRecoilCallback } from 'recoil';\n+import { v4 as uuidv4 } from 'uuid';\n+import { pageLayoutCurrentLayoutsState } from '../states/pageLayoutCurrentLayoutsState';\n+import { pageLayoutDraftState } from '../states/pageLayoutDraftState';\n+import { type PageLayoutTab } from '../states/savedPageLayoutsState';\n+import { createEmptyTabLayout } from '../utils/createEmptyTabLayout';\n+\n+export const usePageLayoutTabCreate = () => {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2326697100",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14318,
        "pr_file": "packages/twenty-front/src/modules/settings/page-layout/hooks/usePageLayoutTabCreate.ts",
        "discussion_id": "2326697100",
        "commented_code": "@@ -0,0 +1,45 @@\n+import { useRecoilCallback } from 'recoil';\n+import { v4 as uuidv4 } from 'uuid';\n+import { pageLayoutCurrentLayoutsState } from '../states/pageLayoutCurrentLayoutsState';\n+import { pageLayoutDraftState } from '../states/pageLayoutDraftState';\n+import { type PageLayoutTab } from '../states/savedPageLayoutsState';\n+import { createEmptyTabLayout } from '../utils/createEmptyTabLayout';\n+\n+export const usePageLayoutTabCreate = () => {",
        "comment_created_at": "2025-09-06T09:17:13+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "not related to this file but I don't know where to put the comment:\r\n- naming of hooks should be very explicit when it's an action (which is the case for most of the hooks that have been introduced)\r\n-  takes NO dependency that will trigger re-renders when being used. That's why we avoid \"umbrella hooks\" containing both read and write functions as read will subscribe on state and write are usually sync functions that do not need to be reactive on states. \r\n- usually only return one function: this usually eases naming + makes avoid depdencies\r\n\r\n==> in usePageLayoutDragSelection, we are listening on pageLayoutSelectedCells + exposing several functions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2313968024",
    "pr_number": 14184,
    "pr_file": "packages/twenty-front/src/modules/settings/page-layout/hooks/usePageLayoutWidgetCreate.ts",
    "created_at": "2025-09-01T13:29:25+00:00",
    "commented_code": "+import { useCallback } from 'react';\n+import { useRecoilState, useSetRecoilState } from 'recoil';\n+import { v4 as uuidv4 } from 'uuid';\n+import { type GraphSubType, type Widget } from '../mocks/mockWidgets';\n+import { pageLayoutCurrentLayoutsState } from '../states/pageLayoutCurrentLayoutsState';\n+import { pageLayoutDraftState } from '../states/pageLayoutDraftState';\n+import { pageLayoutDraggedAreaState } from '../states/pageLayoutDraggedAreaState';\n+import { pageLayoutWidgetsState } from '../states/pageLayoutWidgetsState';\n+import {\n+  getDefaultWidgetData,\n+  getWidgetSize,\n+  getWidgetTitle,\n+} from '../utils/getDefaultWidgetData';\n+import { getDefaultWidgetPosition } from '../utils/getDefaultWidgetPosition';\n+\n+export const usePageLayoutWidgetCreate = () => {\n+  const [pageLayoutWidgets, setPageLayoutWidgets] = useRecoilState(\n+    pageLayoutWidgetsState,\n+  );\n+  const [pageLayoutCurrentLayouts, setPageLayoutCurrentLayouts] =\n+    useRecoilState(pageLayoutCurrentLayoutsState);\n+  const [pageLayoutDraggedArea, setPageLayoutDraggedArea] = useRecoilState(\n+    pageLayoutDraggedAreaState,\n+  );\n+  const setPageLayoutDraft = useSetRecoilState(pageLayoutDraftState);\n+\n+  const handleCreateWidget = useCallback(",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2313968024",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14184,
        "pr_file": "packages/twenty-front/src/modules/settings/page-layout/hooks/usePageLayoutWidgetCreate.ts",
        "discussion_id": "2313968024",
        "commented_code": "@@ -0,0 +1,102 @@\n+import { useCallback } from 'react';\n+import { useRecoilState, useSetRecoilState } from 'recoil';\n+import { v4 as uuidv4 } from 'uuid';\n+import { type GraphSubType, type Widget } from '../mocks/mockWidgets';\n+import { pageLayoutCurrentLayoutsState } from '../states/pageLayoutCurrentLayoutsState';\n+import { pageLayoutDraftState } from '../states/pageLayoutDraftState';\n+import { pageLayoutDraggedAreaState } from '../states/pageLayoutDraggedAreaState';\n+import { pageLayoutWidgetsState } from '../states/pageLayoutWidgetsState';\n+import {\n+  getDefaultWidgetData,\n+  getWidgetSize,\n+  getWidgetTitle,\n+} from '../utils/getDefaultWidgetData';\n+import { getDefaultWidgetPosition } from '../utils/getDefaultWidgetPosition';\n+\n+export const usePageLayoutWidgetCreate = () => {\n+  const [pageLayoutWidgets, setPageLayoutWidgets] = useRecoilState(\n+    pageLayoutWidgetsState,\n+  );\n+  const [pageLayoutCurrentLayouts, setPageLayoutCurrentLayouts] =\n+    useRecoilState(pageLayoutCurrentLayoutsState);\n+  const [pageLayoutDraggedArea, setPageLayoutDraggedArea] = useRecoilState(\n+    pageLayoutDraggedAreaState,\n+  );\n+  const setPageLayoutDraft = useSetRecoilState(pageLayoutDraftState);\n+\n+  const handleCreateWidget = useCallback(",
        "comment_created_at": "2025-09-01T13:29:25+00:00",
        "comment_author": "bosiraphael",
        "comment_body": "You can use a recoil callback here and use `snapshot` to retrieve the current states and use `set` to set the states.\n\nBy doing so, we don't take dependencies on the states, so the components using `usePageLayoutWidgetCreate` won't rerender when these states are updated",
        "pr_file_module": null
      }
    ]
  }
]