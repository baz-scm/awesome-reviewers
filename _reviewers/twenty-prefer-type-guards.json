[
  {
    "discussion_id": "2332354287",
    "pr_number": 14360,
    "pr_file": "packages/twenty-front/src/modules/apollo/utils/getEffectiveTokenPair.ts",
    "created_at": "2025-09-09T07:49:59+00:00",
    "commented_code": "+import { isDefined } from 'twenty-shared/utils';\n+import { type AuthTokenPair } from '~/generated/graphql';\n+import { cookieStorage } from '~/utils/cookie-storage';\n+import { getTokenPair } from './getTokenPair';\n+\n+const getImpersonationTokenPair = (): AuthTokenPair | undefined => {\n+  const raw = cookieStorage.getItem('impersonationTokenPair');\n+  if (!isDefined(raw)) {\n+    return undefined;\n+  }\n+\n+  let parsed: any;\n+  try {\n+    parsed = JSON.parse(raw);\n+  } catch {\n+    cookieStorage.removeItem('impersonationTokenPair');\n+    return undefined;\n+  }\n+\n+  const isValid =\n+    parsed &&\n+    typeof parsed === 'object' &&",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2332354287",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-front/src/modules/apollo/utils/getEffectiveTokenPair.ts",
        "discussion_id": "2332354287",
        "commented_code": "@@ -0,0 +1,40 @@\n+import { isDefined } from 'twenty-shared/utils';\n+import { type AuthTokenPair } from '~/generated/graphql';\n+import { cookieStorage } from '~/utils/cookie-storage';\n+import { getTokenPair } from './getTokenPair';\n+\n+const getImpersonationTokenPair = (): AuthTokenPair | undefined => {\n+  const raw = cookieStorage.getItem('impersonationTokenPair');\n+  if (!isDefined(raw)) {\n+    return undefined;\n+  }\n+\n+  let parsed: any;\n+  try {\n+    parsed = JSON.parse(raw);\n+  } catch {\n+    cookieStorage.removeItem('impersonationTokenPair');\n+    return undefined;\n+  }\n+\n+  const isValid =\n+    parsed &&\n+    typeof parsed === 'object' &&",
        "comment_created_at": "2025-09-09T07:49:59+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "let's not use typeof. \r\nprefer type guards as isNonEmptyString or isArray...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2326719060",
    "pr_number": 14311,
    "pr_file": "packages/twenty-front/src/modules/workflow/workflow-variables/utils/filterOutputSchema.ts",
    "created_at": "2025-09-06T09:45:04+00:00",
    "commented_code": "filteredFields[key] = {\n         ...field,\n         value: validSubSchema,\n-      };\n+      } as FieldOutputSchemaV2;",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2326719060",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14311,
        "pr_file": "packages/twenty-front/src/modules/workflow/workflow-variables/utils/filterOutputSchema.ts",
        "discussion_id": "2326719060",
        "commented_code": "@@ -60,7 +63,7 @@ const filterRecordOutputSchema = ({\n       filteredFields[key] = {\n         ...field,\n         value: validSubSchema,\n-      };\n+      } as FieldOutputSchemaV2;",
        "comment_created_at": "2025-09-06T09:45:04+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "avoid as! \r\nShould be fixable properly: \r\n- if your as is added on top of a partial, this means that you can use Pick<> in the function using it\r\n- if it's because of union type, we should add something to discriminate the union on ts side",
        "pr_file_module": null
      },
      {
        "comment_id": "2333976828",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14311,
        "pr_file": "packages/twenty-front/src/modules/workflow/workflow-variables/utils/filterOutputSchema.ts",
        "discussion_id": "2326719060",
        "commented_code": "@@ -60,7 +63,7 @@ const filterRecordOutputSchema = ({\n       filteredFields[key] = {\n         ...field,\n         value: validSubSchema,\n-      };\n+      } as FieldOutputSchemaV2;",
        "comment_created_at": "2025-09-09T15:14:23+00:00",
        "comment_author": "thomtrp",
        "comment_body": "this file requires a refacto by itself. Will be for another time since I already spent too much time on that one",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2325111000",
    "pr_number": 14318,
    "pr_file": "packages/twenty-front/src/modules/settings/page-layout/hooks/usePageLayoutHandleLayoutChange.ts",
    "created_at": "2025-09-05T13:30:16+00:00",
    "commented_code": "import { type Layout, type Layouts } from 'react-grid-layout';\n import { useRecoilCallback } from 'recoil';\n+import { isDefined } from 'twenty-shared/utils';\n import { pageLayoutCurrentLayoutsState } from '../states/pageLayoutCurrentLayoutsState';\n import { pageLayoutDraftState } from '../states/pageLayoutDraftState';\n-import { pageLayoutWidgetsState } from '../states/pageLayoutWidgetsState';\n+import { type PageLayoutWidget } from '../states/savedPageLayoutsState';\n import { convertLayoutsToWidgets } from '../utils/convertLayoutsToWidgets';\n \n-export const usePageLayoutHandleLayoutChange = () => {\n+export const usePageLayoutHandleLayoutChange = (activeTabId: string | null) => {\n   const handleLayoutChange = useRecoilCallback(\n     ({ snapshot, set }) =>\n       (_: Layout[], allLayouts: Layouts) => {\n-        set(pageLayoutCurrentLayoutsState, allLayouts);\n+        if (!activeTabId) return;",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2325111000",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14318,
        "pr_file": "packages/twenty-front/src/modules/settings/page-layout/hooks/usePageLayoutHandleLayoutChange.ts",
        "discussion_id": "2325111000",
        "commented_code": "@@ -1,31 +1,73 @@\n import { type Layout, type Layouts } from 'react-grid-layout';\n import { useRecoilCallback } from 'recoil';\n+import { isDefined } from 'twenty-shared/utils';\n import { pageLayoutCurrentLayoutsState } from '../states/pageLayoutCurrentLayoutsState';\n import { pageLayoutDraftState } from '../states/pageLayoutDraftState';\n-import { pageLayoutWidgetsState } from '../states/pageLayoutWidgetsState';\n+import { type PageLayoutWidget } from '../states/savedPageLayoutsState';\n import { convertLayoutsToWidgets } from '../utils/convertLayoutsToWidgets';\n \n-export const usePageLayoutHandleLayoutChange = () => {\n+export const usePageLayoutHandleLayoutChange = (activeTabId: string | null) => {\n   const handleLayoutChange = useRecoilCallback(\n     ({ snapshot, set }) =>\n       (_: Layout[], allLayouts: Layouts) => {\n-        set(pageLayoutCurrentLayoutsState, allLayouts);\n+        if (!activeTabId) return;",
        "comment_created_at": "2025-09-05T13:30:16+00:00",
        "comment_author": "bosiraphael",
        "comment_body": "```suggestion\n        if (!isDefined(activeTabId)) return;\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2315523973",
    "pr_number": 14219,
    "pr_file": "packages/twenty-server/src/engine/core-modules/page-layout/services/page-layout.service.ts",
    "created_at": "2025-09-02T09:38:28+00:00",
    "commented_code": "+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { isDefined } from 'twenty-shared/utils';\n+import { IsNull, Repository } from 'typeorm';\n+\n+import { PageLayoutEntity } from 'src/engine/core-modules/page-layout/entities/page-layout.entity';\n+import {\n+  PageLayoutException,\n+  PageLayoutExceptionCode,\n+  PageLayoutExceptionMessageKey,\n+  generatePageLayoutExceptionMessage,\n+} from 'src/engine/core-modules/page-layout/exceptions/page-layout.exception';\n+\n+@Injectable()\n+export class PageLayoutService {\n+  constructor(\n+    @InjectRepository(PageLayoutEntity)\n+    private readonly pageLayoutRepository: Repository<PageLayoutEntity>,\n+  ) {}\n+\n+  async findByWorkspaceId(workspaceId: string): Promise<PageLayoutEntity[]> {\n+    return this.pageLayoutRepository.find({\n+      where: {\n+        workspaceId,\n+        deletedAt: IsNull(),\n+      },\n+      relations: ['tabs'],\n+    });\n+  }\n+\n+  async findByObjectMetadataId(\n+    workspaceId: string,\n+    objectMetadataId: string,\n+  ): Promise<PageLayoutEntity[]> {\n+    return this.pageLayoutRepository.find({\n+      where: {\n+        workspaceId,\n+        objectMetadataId,\n+        deletedAt: IsNull(),\n+      },\n+      relations: ['tabs'],\n+    });\n+  }\n+\n+  async findById(\n+    id: string,\n+    workspaceId: string,\n+  ): Promise<PageLayoutEntity | null> {\n+    const pageLayout = await this.pageLayoutRepository.findOne({\n+      where: {\n+        id,\n+        workspaceId,\n+        deletedAt: IsNull(),\n+      },\n+      relations: ['tabs'],\n+    });\n+\n+    return pageLayout || null;\n+  }\n+\n+  async create(\n+    pageLayoutData: Partial<PageLayoutEntity>,\n+    workspaceId: string,\n+  ): Promise<PageLayoutEntity> {\n+    if (!isDefined(pageLayoutData.name)) {\n+      throw new PageLayoutException(\n+        generatePageLayoutExceptionMessage(\n+          PageLayoutExceptionMessageKey.NAME_REQUIRED,\n+        ),\n+        PageLayoutExceptionCode.INVALID_PAGE_LAYOUT_DATA,\n+      );\n+    }\n+\n+    const pageLayout = this.pageLayoutRepository.create({\n+      ...pageLayoutData,\n+      workspaceId,\n+    });\n+\n+    return this.pageLayoutRepository.save(pageLayout);\n+  }\n+\n+  async update(\n+    id: string,\n+    workspaceId: string,\n+    updateData: Partial<PageLayoutEntity>,\n+  ): Promise<PageLayoutEntity> {\n+    const existingPageLayout = await this.findById(id, workspaceId);\n+\n+    if (!isDefined(existingPageLayout)) {\n+      throw new PageLayoutException(\n+        generatePageLayoutExceptionMessage(\n+          PageLayoutExceptionMessageKey.PAGE_LAYOUT_NOT_FOUND,\n+          id,\n+        ),\n+        PageLayoutExceptionCode.PAGE_LAYOUT_NOT_FOUND,\n+      );\n+    }\n+\n+    const updatedPageLayout = await this.pageLayoutRepository.save({\n+      ...existingPageLayout,\n+      ...updateData,\n+    });\n+\n+    return updatedPageLayout;\n+  }\n+\n+  async delete(id: string, workspaceId: string): Promise<PageLayoutEntity> {\n+    const pageLayout = await this.findById(id, workspaceId);\n+\n+    if (!isDefined(pageLayout)) {\n+      throw new PageLayoutException(\n+        generatePageLayoutExceptionMessage(\n+          PageLayoutExceptionMessageKey.PAGE_LAYOUT_NOT_FOUND,\n+          id,\n+        ),\n+        PageLayoutExceptionCode.PAGE_LAYOUT_NOT_FOUND,\n+      );\n+    }\n+\n+    await this.pageLayoutRepository.softDelete(id);\n+\n+    return pageLayout;\n+  }\n+\n+  async destroy(id: string, workspaceId: string): Promise<boolean> {\n+    const pageLayout = await this.pageLayoutRepository.findOne({\n+      where: {\n+        id,\n+        workspaceId,\n+      },\n+      withDeleted: true,\n+    });\n+\n+    if (!isDefined(pageLayout)) {\n+      throw new PageLayoutException(\n+        generatePageLayoutExceptionMessage(\n+          PageLayoutExceptionMessageKey.PAGE_LAYOUT_NOT_FOUND,\n+          id,\n+        ),\n+        PageLayoutExceptionCode.PAGE_LAYOUT_NOT_FOUND,\n+      );\n+    }\n+\n+    await this.pageLayoutRepository.delete(id);\n+\n+    return true;\n+  }\n+\n+  async restore(id: string, workspaceId: string): Promise<PageLayoutEntity> {\n+    const pageLayout = await this.pageLayoutRepository.findOne({\n+      where: {\n+        id,\n+        workspaceId,\n+      },\n+      withDeleted: true,\n+    });\n+\n+    if (!isDefined(pageLayout)) {\n+      throw new PageLayoutException(\n+        generatePageLayoutExceptionMessage(\n+          PageLayoutExceptionMessageKey.PAGE_LAYOUT_NOT_FOUND,\n+          id,\n+        ),\n+        PageLayoutExceptionCode.PAGE_LAYOUT_NOT_FOUND,\n+      );\n+    }\n+\n+    if (!isDefined(pageLayout.deletedAt)) {\n+      throw new PageLayoutException(\n+        'Page layout is not deleted and cannot be restored',\n+        PageLayoutExceptionCode.INVALID_PAGE_LAYOUT_DATA,\n+      );\n+    }\n+\n+    await this.pageLayoutRepository.restore(id);\n+\n+    const restoredPageLayout = await this.findById(id, workspaceId);\n+\n+    return restoredPageLayout!;",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2315523973",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14219,
        "pr_file": "packages/twenty-server/src/engine/core-modules/page-layout/services/page-layout.service.ts",
        "discussion_id": "2315523973",
        "commented_code": "@@ -0,0 +1,182 @@\n+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { isDefined } from 'twenty-shared/utils';\n+import { IsNull, Repository } from 'typeorm';\n+\n+import { PageLayoutEntity } from 'src/engine/core-modules/page-layout/entities/page-layout.entity';\n+import {\n+  PageLayoutException,\n+  PageLayoutExceptionCode,\n+  PageLayoutExceptionMessageKey,\n+  generatePageLayoutExceptionMessage,\n+} from 'src/engine/core-modules/page-layout/exceptions/page-layout.exception';\n+\n+@Injectable()\n+export class PageLayoutService {\n+  constructor(\n+    @InjectRepository(PageLayoutEntity)\n+    private readonly pageLayoutRepository: Repository<PageLayoutEntity>,\n+  ) {}\n+\n+  async findByWorkspaceId(workspaceId: string): Promise<PageLayoutEntity[]> {\n+    return this.pageLayoutRepository.find({\n+      where: {\n+        workspaceId,\n+        deletedAt: IsNull(),\n+      },\n+      relations: ['tabs'],\n+    });\n+  }\n+\n+  async findByObjectMetadataId(\n+    workspaceId: string,\n+    objectMetadataId: string,\n+  ): Promise<PageLayoutEntity[]> {\n+    return this.pageLayoutRepository.find({\n+      where: {\n+        workspaceId,\n+        objectMetadataId,\n+        deletedAt: IsNull(),\n+      },\n+      relations: ['tabs'],\n+    });\n+  }\n+\n+  async findById(\n+    id: string,\n+    workspaceId: string,\n+  ): Promise<PageLayoutEntity | null> {\n+    const pageLayout = await this.pageLayoutRepository.findOne({\n+      where: {\n+        id,\n+        workspaceId,\n+        deletedAt: IsNull(),\n+      },\n+      relations: ['tabs'],\n+    });\n+\n+    return pageLayout || null;\n+  }\n+\n+  async create(\n+    pageLayoutData: Partial<PageLayoutEntity>,\n+    workspaceId: string,\n+  ): Promise<PageLayoutEntity> {\n+    if (!isDefined(pageLayoutData.name)) {\n+      throw new PageLayoutException(\n+        generatePageLayoutExceptionMessage(\n+          PageLayoutExceptionMessageKey.NAME_REQUIRED,\n+        ),\n+        PageLayoutExceptionCode.INVALID_PAGE_LAYOUT_DATA,\n+      );\n+    }\n+\n+    const pageLayout = this.pageLayoutRepository.create({\n+      ...pageLayoutData,\n+      workspaceId,\n+    });\n+\n+    return this.pageLayoutRepository.save(pageLayout);\n+  }\n+\n+  async update(\n+    id: string,\n+    workspaceId: string,\n+    updateData: Partial<PageLayoutEntity>,\n+  ): Promise<PageLayoutEntity> {\n+    const existingPageLayout = await this.findById(id, workspaceId);\n+\n+    if (!isDefined(existingPageLayout)) {\n+      throw new PageLayoutException(\n+        generatePageLayoutExceptionMessage(\n+          PageLayoutExceptionMessageKey.PAGE_LAYOUT_NOT_FOUND,\n+          id,\n+        ),\n+        PageLayoutExceptionCode.PAGE_LAYOUT_NOT_FOUND,\n+      );\n+    }\n+\n+    const updatedPageLayout = await this.pageLayoutRepository.save({\n+      ...existingPageLayout,\n+      ...updateData,\n+    });\n+\n+    return updatedPageLayout;\n+  }\n+\n+  async delete(id: string, workspaceId: string): Promise<PageLayoutEntity> {\n+    const pageLayout = await this.findById(id, workspaceId);\n+\n+    if (!isDefined(pageLayout)) {\n+      throw new PageLayoutException(\n+        generatePageLayoutExceptionMessage(\n+          PageLayoutExceptionMessageKey.PAGE_LAYOUT_NOT_FOUND,\n+          id,\n+        ),\n+        PageLayoutExceptionCode.PAGE_LAYOUT_NOT_FOUND,\n+      );\n+    }\n+\n+    await this.pageLayoutRepository.softDelete(id);\n+\n+    return pageLayout;\n+  }\n+\n+  async destroy(id: string, workspaceId: string): Promise<boolean> {\n+    const pageLayout = await this.pageLayoutRepository.findOne({\n+      where: {\n+        id,\n+        workspaceId,\n+      },\n+      withDeleted: true,\n+    });\n+\n+    if (!isDefined(pageLayout)) {\n+      throw new PageLayoutException(\n+        generatePageLayoutExceptionMessage(\n+          PageLayoutExceptionMessageKey.PAGE_LAYOUT_NOT_FOUND,\n+          id,\n+        ),\n+        PageLayoutExceptionCode.PAGE_LAYOUT_NOT_FOUND,\n+      );\n+    }\n+\n+    await this.pageLayoutRepository.delete(id);\n+\n+    return true;\n+  }\n+\n+  async restore(id: string, workspaceId: string): Promise<PageLayoutEntity> {\n+    const pageLayout = await this.pageLayoutRepository.findOne({\n+      where: {\n+        id,\n+        workspaceId,\n+      },\n+      withDeleted: true,\n+    });\n+\n+    if (!isDefined(pageLayout)) {\n+      throw new PageLayoutException(\n+        generatePageLayoutExceptionMessage(\n+          PageLayoutExceptionMessageKey.PAGE_LAYOUT_NOT_FOUND,\n+          id,\n+        ),\n+        PageLayoutExceptionCode.PAGE_LAYOUT_NOT_FOUND,\n+      );\n+    }\n+\n+    if (!isDefined(pageLayout.deletedAt)) {\n+      throw new PageLayoutException(\n+        'Page layout is not deleted and cannot be restored',\n+        PageLayoutExceptionCode.INVALID_PAGE_LAYOUT_DATA,\n+      );\n+    }\n+\n+    await this.pageLayoutRepository.restore(id);\n+\n+    const restoredPageLayout = await this.findById(id, workspaceId);\n+\n+    return restoredPageLayout!;",
        "comment_created_at": "2025-09-02T09:38:28+00:00",
        "comment_author": "Weiko",
        "comment_body": "let's check the nullability here! You can also implement a findByIdOrThrow.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2307157784",
    "pr_number": 14113,
    "pr_file": "packages/twenty-front/src/modules/object-metadata/states/objectMetadataItemsSelector.ts",
    "created_at": "2025-08-28T11:46:39+00:00",
    "commented_code": "+import { selectorFamily } from 'recoil';\n+\n+import { objectMetadataItemsState } from '@/object-metadata/states/objectMetadataItemsState';\n+import { type ObjectMetadataItem } from '@/object-metadata/types/ObjectMetadataItem';\n+\n+export const objectMetadataItemsSelector = selectorFamily<\n+  (ObjectMetadataItem | null)[],\n+  string[]\n+>({\n+  key: 'objectMetadataItemsSelector',\n+  get:\n+    (objectNameSingulars: string[]) =>\n+    ({ get }) => {\n+      const objectMetadataItems = get(objectMetadataItemsState);\n+\n+      return objectNameSingulars.map(\n+        (objectNameSingular) =>\n+          objectMetadataItems.find(\n+            (objectMetadataItem) =>\n+              objectMetadataItem.nameSingular === objectNameSingular,\n+          ) ?? null,",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2307157784",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14113,
        "pr_file": "packages/twenty-front/src/modules/object-metadata/states/objectMetadataItemsSelector.ts",
        "discussion_id": "2307157784",
        "commented_code": "@@ -0,0 +1,24 @@\n+import { selectorFamily } from 'recoil';\n+\n+import { objectMetadataItemsState } from '@/object-metadata/states/objectMetadataItemsState';\n+import { type ObjectMetadataItem } from '@/object-metadata/types/ObjectMetadataItem';\n+\n+export const objectMetadataItemsSelector = selectorFamily<\n+  (ObjectMetadataItem | null)[],\n+  string[]\n+>({\n+  key: 'objectMetadataItemsSelector',\n+  get:\n+    (objectNameSingulars: string[]) =>\n+    ({ get }) => {\n+      const objectMetadataItems = get(objectMetadataItemsState);\n+\n+      return objectNameSingulars.map(\n+        (objectNameSingular) =>\n+          objectMetadataItems.find(\n+            (objectMetadataItem) =>\n+              objectMetadataItem.nameSingular === objectNameSingular,\n+          ) ?? null,",
        "comment_created_at": "2025-08-28T11:46:39+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "let's not return the one that are null?\r\n.filter(isDefined)",
        "pr_file_module": null
      }
    ]
  }
]