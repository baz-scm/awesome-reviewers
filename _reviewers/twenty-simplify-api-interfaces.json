[
  {
    "discussion_id": "2345391449",
    "pr_number": 14462,
    "pr_file": "packages/twenty-front/src/modules/views/hooks/internal/usePersistViewFilterRecords.ts",
    "created_at": "2025-09-12T20:41:53+00:00",
    "commented_code": "variables: {\n               id: viewFilter.id,\n               input: {\n-                value: parseJson(viewFilter.value),\n+                value: viewFilter.value,",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2345391449",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14462,
        "pr_file": "packages/twenty-front/src/modules/views/hooks/internal/usePersistViewFilterRecords.ts",
        "discussion_id": "2345391449",
        "commented_code": "@@ -86,7 +86,7 @@ export const usePersistViewFilterRecords = () => {\n             variables: {\n               id: viewFilter.id,\n               input: {\n-                value: parseJson(viewFilter.value),\n+                value: viewFilter.value,",
        "comment_created_at": "2025-09-12T20:41:53+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "this was a regression, viewFilter.value is a JSON in the backend and a string in the FE. We should align both on BE behavior",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2337762208",
    "pr_number": 14307,
    "pr_file": "packages/twenty-server/src/engine/core-modules/public-domain/public-domain.resolver.ts",
    "created_at": "2025-09-10T19:56:15+00:00",
    "commented_code": "+import { Args, Mutation, Resolver } from '@nestjs/graphql';\n+import { UseFilters, UseGuards, UsePipes } from '@nestjs/common';\n+\n+import { PreventNestToAutoLogGraphqlErrorsFilter } from 'src/engine/core-modules/graphql/filters/prevent-nest-to-auto-log-graphql-errors.filter';\n+import { WorkspaceAuthGuard } from 'src/engine/guards/workspace-auth.guard';\n+import { ResolverValidationPipe } from 'src/engine/core-modules/graphql/pipes/resolver-validation.pipe';\n+import { PublicDomainExceptionFilter } from 'src/engine/core-modules/public-domain/public-domain-exception-filter';\n+import { PublicDomainService } from 'src/engine/core-modules/public-domain/public-domain.service';\n+import { PublicDomainDTO } from 'src/engine/core-modules/public-domain/dtos/public-domain.dto';\n+import { PublicDomainInput } from 'src/engine/core-modules/public-domain/dtos/public-domain.input';\n+import { AuthWorkspace } from 'src/engine/decorators/auth/auth-workspace.decorator';\n+import { Workspace } from 'src/engine/core-modules/workspace/workspace.entity';\n+\n+@UseGuards(WorkspaceAuthGuard)\n+@UsePipes(ResolverValidationPipe)\n+@UseFilters(\n+  PublicDomainExceptionFilter,\n+  PreventNestToAutoLogGraphqlErrorsFilter,\n+)\n+@Resolver()\n+export class PublicDomainResolver {\n+  constructor(private readonly publicDomainService: PublicDomainService) {}\n+\n+  @Mutation(() => PublicDomainDTO)\n+  async createPublicDomain(\n+    @Args('input') { domain }: PublicDomainInput,",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2337762208",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14307,
        "pr_file": "packages/twenty-server/src/engine/core-modules/public-domain/public-domain.resolver.ts",
        "discussion_id": "2337762208",
        "commented_code": "@@ -0,0 +1,47 @@\n+import { Args, Mutation, Resolver } from '@nestjs/graphql';\n+import { UseFilters, UseGuards, UsePipes } from '@nestjs/common';\n+\n+import { PreventNestToAutoLogGraphqlErrorsFilter } from 'src/engine/core-modules/graphql/filters/prevent-nest-to-auto-log-graphql-errors.filter';\n+import { WorkspaceAuthGuard } from 'src/engine/guards/workspace-auth.guard';\n+import { ResolverValidationPipe } from 'src/engine/core-modules/graphql/pipes/resolver-validation.pipe';\n+import { PublicDomainExceptionFilter } from 'src/engine/core-modules/public-domain/public-domain-exception-filter';\n+import { PublicDomainService } from 'src/engine/core-modules/public-domain/public-domain.service';\n+import { PublicDomainDTO } from 'src/engine/core-modules/public-domain/dtos/public-domain.dto';\n+import { PublicDomainInput } from 'src/engine/core-modules/public-domain/dtos/public-domain.input';\n+import { AuthWorkspace } from 'src/engine/decorators/auth/auth-workspace.decorator';\n+import { Workspace } from 'src/engine/core-modules/workspace/workspace.entity';\n+\n+@UseGuards(WorkspaceAuthGuard)\n+@UsePipes(ResolverValidationPipe)\n+@UseFilters(\n+  PublicDomainExceptionFilter,\n+  PreventNestToAutoLogGraphqlErrorsFilter,\n+)\n+@Resolver()\n+export class PublicDomainResolver {\n+  constructor(private readonly publicDomainService: PublicDomainService) {}\n+\n+  @Mutation(() => PublicDomainDTO)\n+  async createPublicDomain(\n+    @Args('input') { domain }: PublicDomainInput,",
        "comment_created_at": "2025-09-10T19:56:15+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "Wrapping this into an input property probably does not make sense. AI tends to do this often. Let's put the properties directly at the root level, not wrap within an input field (same for the other method)",
        "pr_file_module": null
      },
      {
        "comment_id": "2339012151",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14307,
        "pr_file": "packages/twenty-server/src/engine/core-modules/public-domain/public-domain.resolver.ts",
        "discussion_id": "2337762208",
        "commented_code": "@@ -0,0 +1,47 @@\n+import { Args, Mutation, Resolver } from '@nestjs/graphql';\n+import { UseFilters, UseGuards, UsePipes } from '@nestjs/common';\n+\n+import { PreventNestToAutoLogGraphqlErrorsFilter } from 'src/engine/core-modules/graphql/filters/prevent-nest-to-auto-log-graphql-errors.filter';\n+import { WorkspaceAuthGuard } from 'src/engine/guards/workspace-auth.guard';\n+import { ResolverValidationPipe } from 'src/engine/core-modules/graphql/pipes/resolver-validation.pipe';\n+import { PublicDomainExceptionFilter } from 'src/engine/core-modules/public-domain/public-domain-exception-filter';\n+import { PublicDomainService } from 'src/engine/core-modules/public-domain/public-domain.service';\n+import { PublicDomainDTO } from 'src/engine/core-modules/public-domain/dtos/public-domain.dto';\n+import { PublicDomainInput } from 'src/engine/core-modules/public-domain/dtos/public-domain.input';\n+import { AuthWorkspace } from 'src/engine/decorators/auth/auth-workspace.decorator';\n+import { Workspace } from 'src/engine/core-modules/workspace/workspace.entity';\n+\n+@UseGuards(WorkspaceAuthGuard)\n+@UsePipes(ResolverValidationPipe)\n+@UseFilters(\n+  PublicDomainExceptionFilter,\n+  PreventNestToAutoLogGraphqlErrorsFilter,\n+)\n+@Resolver()\n+export class PublicDomainResolver {\n+  constructor(private readonly publicDomainService: PublicDomainService) {}\n+\n+  @Mutation(() => PublicDomainDTO)\n+  async createPublicDomain(\n+    @Args('input') { domain }: PublicDomainInput,",
        "comment_created_at": "2025-09-11T07:04:07+00:00",
        "comment_author": "martmull",
        "comment_body": "ok",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2336044678",
    "pr_number": 14383,
    "pr_file": "packages/twenty-server/src/engine/core-modules/view/services/view-field-v2.service.ts",
    "created_at": "2025-09-10T08:50:42+00:00",
    "commented_code": "+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { isDefined, removePropertiesFromRecord } from 'twenty-shared/utils';\n+import { Equal, Repository } from 'typeorm';\n+import { v4 } from 'uuid';\n+\n+import { addFlatEntityToFlatEntityMapsOrThrow } from 'src/engine/core-modules/common/utils/add-flat-entity-to-flat-entity-maps-or-throw.util';\n+import { deleteFlatEntityFromFlatEntityMapsOrThrow } from 'src/engine/core-modules/common/utils/delete-flat-entity-from-flat-entity-maps-or-throw.util';\n+import { replaceFlatEntityInFlatEntityMapsOrThrow } from 'src/engine/core-modules/common/utils/replace-flat-entity-in-flat-entity-maps-or-throw.util';\n+import { ViewFieldEntity } from 'src/engine/core-modules/view/entities/view-field.entity';\n+import {\n+  ViewFieldException,\n+  ViewFieldExceptionCode,\n+  ViewFieldExceptionMessageKey,\n+  generateViewFieldExceptionMessage,\n+  generateViewFieldUserFriendlyExceptionMessage,\n+} from 'src/engine/core-modules/view/exceptions/view-field.exception';\n+import { FlatViewFieldMaps } from 'src/engine/core-modules/view/types/flat-view-field-maps.type';\n+import { viewFieldEntityRelationProperties } from 'src/engine/core-modules/view/types/flat-view-field.type';\n+import { fromPartialFlatViewFieldToFlatViewFieldWithDefault } from 'src/engine/core-modules/view/utils/from-partial-flat-view-field-to-flat-view-field-with-default.util';\n+import { fromViewFieldEntityToFlatViewField } from 'src/engine/core-modules/view/utils/from-view-field-entity-to-flat-view-field.util';\n+import { WorkspaceMigrationOrchestratorException } from 'src/engine/workspace-manager/workspace-migration-v2/exceptions/workspace-migration-orchestrator-exception';\n+import { WorkspaceMigrationOrchestratorService } from 'src/engine/workspace-manager/workspace-migration-v2/services/workspace-migration-orchestrator.service';\n+\n+@Injectable()\n+export class ViewFieldV2Service {\n+  constructor(\n+    @InjectRepository(ViewFieldEntity)\n+    private readonly viewFieldRepository: Repository<ViewFieldEntity>,\n+    private readonly workspaceMigrationOrchestratorService: WorkspaceMigrationOrchestratorService,\n+  ) {}\n+\n+  // TODO: move to cache service\n+  private async getExistingFlatViewFieldMaps(\n+    workspaceId: string,\n+  ): Promise<FlatViewFieldMaps> {\n+    const existingViewFields = await this.viewFieldRepository.find({\n+      where: { workspaceId },\n+    });\n+\n+    const flatViewFieldMaps: FlatViewFieldMaps = {\n+      byId: {},\n+      idByUniversalIdentifier: {},\n+    };\n+\n+    for (const viewFieldEntity of existingViewFields) {\n+      const flatViewField = fromViewFieldEntityToFlatViewField(viewFieldEntity);\n+\n+      flatViewFieldMaps.byId[flatViewField.id] = flatViewField;\n+      flatViewFieldMaps.idByUniversalIdentifier[\n+        flatViewField.universalIdentifier\n+      ] = flatViewField.id;\n+    }\n+\n+    return flatViewFieldMaps;\n+  }\n+\n+  async createOne(\n+    viewFieldData: Partial<ViewFieldEntity>,",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2336044678",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14383,
        "pr_file": "packages/twenty-server/src/engine/core-modules/view/services/view-field-v2.service.ts",
        "discussion_id": "2336044678",
        "commented_code": "@@ -0,0 +1,244 @@\n+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { isDefined, removePropertiesFromRecord } from 'twenty-shared/utils';\n+import { Equal, Repository } from 'typeorm';\n+import { v4 } from 'uuid';\n+\n+import { addFlatEntityToFlatEntityMapsOrThrow } from 'src/engine/core-modules/common/utils/add-flat-entity-to-flat-entity-maps-or-throw.util';\n+import { deleteFlatEntityFromFlatEntityMapsOrThrow } from 'src/engine/core-modules/common/utils/delete-flat-entity-from-flat-entity-maps-or-throw.util';\n+import { replaceFlatEntityInFlatEntityMapsOrThrow } from 'src/engine/core-modules/common/utils/replace-flat-entity-in-flat-entity-maps-or-throw.util';\n+import { ViewFieldEntity } from 'src/engine/core-modules/view/entities/view-field.entity';\n+import {\n+  ViewFieldException,\n+  ViewFieldExceptionCode,\n+  ViewFieldExceptionMessageKey,\n+  generateViewFieldExceptionMessage,\n+  generateViewFieldUserFriendlyExceptionMessage,\n+} from 'src/engine/core-modules/view/exceptions/view-field.exception';\n+import { FlatViewFieldMaps } from 'src/engine/core-modules/view/types/flat-view-field-maps.type';\n+import { viewFieldEntityRelationProperties } from 'src/engine/core-modules/view/types/flat-view-field.type';\n+import { fromPartialFlatViewFieldToFlatViewFieldWithDefault } from 'src/engine/core-modules/view/utils/from-partial-flat-view-field-to-flat-view-field-with-default.util';\n+import { fromViewFieldEntityToFlatViewField } from 'src/engine/core-modules/view/utils/from-view-field-entity-to-flat-view-field.util';\n+import { WorkspaceMigrationOrchestratorException } from 'src/engine/workspace-manager/workspace-migration-v2/exceptions/workspace-migration-orchestrator-exception';\n+import { WorkspaceMigrationOrchestratorService } from 'src/engine/workspace-manager/workspace-migration-v2/services/workspace-migration-orchestrator.service';\n+\n+@Injectable()\n+export class ViewFieldV2Service {\n+  constructor(\n+    @InjectRepository(ViewFieldEntity)\n+    private readonly viewFieldRepository: Repository<ViewFieldEntity>,\n+    private readonly workspaceMigrationOrchestratorService: WorkspaceMigrationOrchestratorService,\n+  ) {}\n+\n+  // TODO: move to cache service\n+  private async getExistingFlatViewFieldMaps(\n+    workspaceId: string,\n+  ): Promise<FlatViewFieldMaps> {\n+    const existingViewFields = await this.viewFieldRepository.find({\n+      where: { workspaceId },\n+    });\n+\n+    const flatViewFieldMaps: FlatViewFieldMaps = {\n+      byId: {},\n+      idByUniversalIdentifier: {},\n+    };\n+\n+    for (const viewFieldEntity of existingViewFields) {\n+      const flatViewField = fromViewFieldEntityToFlatViewField(viewFieldEntity);\n+\n+      flatViewFieldMaps.byId[flatViewField.id] = flatViewField;\n+      flatViewFieldMaps.idByUniversalIdentifier[\n+        flatViewField.universalIdentifier\n+      ] = flatViewField.id;\n+    }\n+\n+    return flatViewFieldMaps;\n+  }\n+\n+  async createOne(\n+    viewFieldData: Partial<ViewFieldEntity>,",
        "comment_created_at": "2025-09-10T08:50:42+00:00",
        "comment_author": "prastoin",
        "comment_body": "***Remark:*** unless i'm mistaken should be `CreateViewFieldInput`, also I would tend to extract `workspaceId` outside the input as its quite weird for it to be merged in the input IMO",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2324544593",
    "pr_number": 14315,
    "pr_file": "packages/twenty-server/src/engine/core-modules/page-layout/dtos/page-layout-widget.dto.ts",
    "created_at": "2025-09-05T09:09:56+00:00",
    "commented_code": "+import { Field, ObjectType, registerEnumType } from '@nestjs/graphql';\n+\n+import { IDField } from '@ptc-org/nestjs-query-graphql';\n+import { GraphQLJSON } from 'graphql-type-json';\n+\n+import { UUIDScalarType } from 'src/engine/api/graphql/workspace-schema-builder/graphql-types/scalars';\n+import { WidgetType } from 'src/engine/core-modules/page-layout/enums/widget-type.enum';\n+\n+registerEnumType(WidgetType, { name: 'WidgetType' });\n+\n+@ObjectType('GridPosition')\n+export class GridPositionDTO {\n+  @Field()\n+  row: number;\n+\n+  @Field()\n+  column: number;\n+\n+  @Field()\n+  rowSpan: number;\n+\n+  @Field()\n+  columnSpan: number;\n+}\n+\n+@ObjectType('PageLayoutWidget')\n+export class PageLayoutWidgetDTO {\n+  @IDField(() => UUIDScalarType)\n+  id: string;\n+\n+  @Field(() => UUIDScalarType, { nullable: false })\n+  pageLayoutTabId: string;\n+\n+  @Field(() => UUIDScalarType, { nullable: false })\n+  workspaceId: string;",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2324544593",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14315,
        "pr_file": "packages/twenty-server/src/engine/core-modules/page-layout/dtos/page-layout-widget.dto.ts",
        "discussion_id": "2324544593",
        "commented_code": "@@ -0,0 +1,60 @@\n+import { Field, ObjectType, registerEnumType } from '@nestjs/graphql';\n+\n+import { IDField } from '@ptc-org/nestjs-query-graphql';\n+import { GraphQLJSON } from 'graphql-type-json';\n+\n+import { UUIDScalarType } from 'src/engine/api/graphql/workspace-schema-builder/graphql-types/scalars';\n+import { WidgetType } from 'src/engine/core-modules/page-layout/enums/widget-type.enum';\n+\n+registerEnumType(WidgetType, { name: 'WidgetType' });\n+\n+@ObjectType('GridPosition')\n+export class GridPositionDTO {\n+  @Field()\n+  row: number;\n+\n+  @Field()\n+  column: number;\n+\n+  @Field()\n+  rowSpan: number;\n+\n+  @Field()\n+  columnSpan: number;\n+}\n+\n+@ObjectType('PageLayoutWidget')\n+export class PageLayoutWidgetDTO {\n+  @IDField(() => UUIDScalarType)\n+  id: string;\n+\n+  @Field(() => UUIDScalarType, { nullable: false })\n+  pageLayoutTabId: string;\n+\n+  @Field(() => UUIDScalarType, { nullable: false })\n+  workspaceId: string;",
        "comment_created_at": "2025-09-05T09:09:56+00:00",
        "comment_author": "Weiko",
        "comment_body": "I don't think we need the workspaceId exposed to the API (I probably missed that in the other page layout dtos btw). API users don't need that info",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2324574095",
    "pr_number": 14315,
    "pr_file": "packages/twenty-server/src/engine/core-modules/page-layout/services/page-layout-widget.service.ts",
    "created_at": "2025-09-05T09:23:46+00:00",
    "commented_code": "+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { isDefined } from 'twenty-shared/utils';\n+import { IsNull, Repository } from 'typeorm';\n+import { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\n+\n+import { PageLayoutWidgetEntity } from 'src/engine/core-modules/page-layout/entities/page-layout-widget.entity';\n+import {\n+  PageLayoutTabException,\n+  PageLayoutTabExceptionCode,\n+} from 'src/engine/core-modules/page-layout/exceptions/page-layout-tab.exception';\n+import {\n+  PageLayoutWidgetException,\n+  PageLayoutWidgetExceptionCode,\n+  PageLayoutWidgetExceptionMessageKey,\n+  generatePageLayoutWidgetExceptionMessage,\n+} from 'src/engine/core-modules/page-layout/exceptions/page-layout-widget.exception';\n+import { PageLayoutTabService } from 'src/engine/core-modules/page-layout/services/page-layout-tab.service';\n+\n+@Injectable()\n+export class PageLayoutWidgetService {\n+  constructor(\n+    @InjectRepository(PageLayoutWidgetEntity)\n+    private readonly pageLayoutWidgetRepository: Repository<PageLayoutWidgetEntity>,\n+    private readonly pageLayoutTabService: PageLayoutTabService,\n+  ) {}\n+\n+  async findByPageLayoutTabId(\n+    workspaceId: string,\n+    pageLayoutTabId: string,\n+  ): Promise<PageLayoutWidgetEntity[]> {\n+    return this.pageLayoutWidgetRepository.find({\n+      where: {\n+        pageLayoutTabId,\n+        workspaceId,\n+        deletedAt: IsNull(),\n+      },\n+      order: { createdAt: 'ASC' },\n+    });\n+  }\n+\n+  async findByIdOrThrow(\n+    id: string,\n+    workspaceId: string,\n+  ): Promise<PageLayoutWidgetEntity> {\n+    const pageLayoutWidget = await this.pageLayoutWidgetRepository.findOne({\n+      where: {\n+        id,\n+        workspaceId,\n+        deletedAt: IsNull(),\n+      },\n+    });\n+\n+    if (!isDefined(pageLayoutWidget)) {\n+      throw new PageLayoutWidgetException(\n+        generatePageLayoutWidgetExceptionMessage(\n+          PageLayoutWidgetExceptionMessageKey.PAGE_LAYOUT_WIDGET_NOT_FOUND,\n+          id,\n+        ),\n+        PageLayoutWidgetExceptionCode.PAGE_LAYOUT_WIDGET_NOT_FOUND,\n+      );\n+    }\n+\n+    return pageLayoutWidget;\n+  }\n+\n+  async create(\n+    pageLayoutWidgetData: Partial<PageLayoutWidgetEntity>,\n+    workspaceId: string,\n+  ): Promise<PageLayoutWidgetEntity> {\n+    if (!isDefined(pageLayoutWidgetData.title)) {\n+      throw new PageLayoutWidgetException(\n+        generatePageLayoutWidgetExceptionMessage(\n+          PageLayoutWidgetExceptionMessageKey.TITLE_REQUIRED,\n+        ),\n+        PageLayoutWidgetExceptionCode.INVALID_PAGE_LAYOUT_WIDGET_DATA,\n+      );\n+    }\n+\n+    if (!isDefined(pageLayoutWidgetData.pageLayoutTabId)) {\n+      throw new PageLayoutWidgetException(\n+        generatePageLayoutWidgetExceptionMessage(\n+          PageLayoutWidgetExceptionMessageKey.PAGE_LAYOUT_TAB_ID_REQUIRED,\n+        ),\n+        PageLayoutWidgetExceptionCode.INVALID_PAGE_LAYOUT_WIDGET_DATA,\n+      );\n+    }\n+\n+    if (!isDefined(pageLayoutWidgetData.gridPosition)) {\n+      throw new PageLayoutWidgetException(\n+        generatePageLayoutWidgetExceptionMessage(\n+          PageLayoutWidgetExceptionMessageKey.GRID_POSITION_REQUIRED,\n+        ),\n+        PageLayoutWidgetExceptionCode.INVALID_PAGE_LAYOUT_WIDGET_DATA,\n+      );\n+    }\n+\n+    try {\n+      await this.pageLayoutTabService.findByIdOrThrow(\n+        pageLayoutWidgetData.pageLayoutTabId,\n+        workspaceId,\n+      );\n+\n+      const pageLayoutWidget = this.pageLayoutWidgetRepository.create({\n+        ...pageLayoutWidgetData,\n+        workspaceId,\n+      });\n+\n+      return this.pageLayoutWidgetRepository.save(pageLayoutWidget);\n+    } catch (error) {\n+      if (\n+        error instanceof PageLayoutTabException &&\n+        error.code === PageLayoutTabExceptionCode.PAGE_LAYOUT_TAB_NOT_FOUND\n+      ) {\n+        throw new PageLayoutWidgetException(\n+          generatePageLayoutWidgetExceptionMessage(\n+            PageLayoutWidgetExceptionMessageKey.PAGE_LAYOUT_TAB_NOT_FOUND,\n+          ),\n+          PageLayoutWidgetExceptionCode.INVALID_PAGE_LAYOUT_WIDGET_DATA,\n+        );\n+      }\n+      throw error;\n+    }\n+  }\n+\n+  async update(\n+    id: string,\n+    workspaceId: string,\n+    updateData: QueryDeepPartialEntity<PageLayoutWidgetEntity>,",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2324574095",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14315,
        "pr_file": "packages/twenty-server/src/engine/core-modules/page-layout/services/page-layout-widget.service.ts",
        "discussion_id": "2324574095",
        "commented_code": "@@ -0,0 +1,234 @@\n+import { Injectable } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { isDefined } from 'twenty-shared/utils';\n+import { IsNull, Repository } from 'typeorm';\n+import { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\n+\n+import { PageLayoutWidgetEntity } from 'src/engine/core-modules/page-layout/entities/page-layout-widget.entity';\n+import {\n+  PageLayoutTabException,\n+  PageLayoutTabExceptionCode,\n+} from 'src/engine/core-modules/page-layout/exceptions/page-layout-tab.exception';\n+import {\n+  PageLayoutWidgetException,\n+  PageLayoutWidgetExceptionCode,\n+  PageLayoutWidgetExceptionMessageKey,\n+  generatePageLayoutWidgetExceptionMessage,\n+} from 'src/engine/core-modules/page-layout/exceptions/page-layout-widget.exception';\n+import { PageLayoutTabService } from 'src/engine/core-modules/page-layout/services/page-layout-tab.service';\n+\n+@Injectable()\n+export class PageLayoutWidgetService {\n+  constructor(\n+    @InjectRepository(PageLayoutWidgetEntity)\n+    private readonly pageLayoutWidgetRepository: Repository<PageLayoutWidgetEntity>,\n+    private readonly pageLayoutTabService: PageLayoutTabService,\n+  ) {}\n+\n+  async findByPageLayoutTabId(\n+    workspaceId: string,\n+    pageLayoutTabId: string,\n+  ): Promise<PageLayoutWidgetEntity[]> {\n+    return this.pageLayoutWidgetRepository.find({\n+      where: {\n+        pageLayoutTabId,\n+        workspaceId,\n+        deletedAt: IsNull(),\n+      },\n+      order: { createdAt: 'ASC' },\n+    });\n+  }\n+\n+  async findByIdOrThrow(\n+    id: string,\n+    workspaceId: string,\n+  ): Promise<PageLayoutWidgetEntity> {\n+    const pageLayoutWidget = await this.pageLayoutWidgetRepository.findOne({\n+      where: {\n+        id,\n+        workspaceId,\n+        deletedAt: IsNull(),\n+      },\n+    });\n+\n+    if (!isDefined(pageLayoutWidget)) {\n+      throw new PageLayoutWidgetException(\n+        generatePageLayoutWidgetExceptionMessage(\n+          PageLayoutWidgetExceptionMessageKey.PAGE_LAYOUT_WIDGET_NOT_FOUND,\n+          id,\n+        ),\n+        PageLayoutWidgetExceptionCode.PAGE_LAYOUT_WIDGET_NOT_FOUND,\n+      );\n+    }\n+\n+    return pageLayoutWidget;\n+  }\n+\n+  async create(\n+    pageLayoutWidgetData: Partial<PageLayoutWidgetEntity>,\n+    workspaceId: string,\n+  ): Promise<PageLayoutWidgetEntity> {\n+    if (!isDefined(pageLayoutWidgetData.title)) {\n+      throw new PageLayoutWidgetException(\n+        generatePageLayoutWidgetExceptionMessage(\n+          PageLayoutWidgetExceptionMessageKey.TITLE_REQUIRED,\n+        ),\n+        PageLayoutWidgetExceptionCode.INVALID_PAGE_LAYOUT_WIDGET_DATA,\n+      );\n+    }\n+\n+    if (!isDefined(pageLayoutWidgetData.pageLayoutTabId)) {\n+      throw new PageLayoutWidgetException(\n+        generatePageLayoutWidgetExceptionMessage(\n+          PageLayoutWidgetExceptionMessageKey.PAGE_LAYOUT_TAB_ID_REQUIRED,\n+        ),\n+        PageLayoutWidgetExceptionCode.INVALID_PAGE_LAYOUT_WIDGET_DATA,\n+      );\n+    }\n+\n+    if (!isDefined(pageLayoutWidgetData.gridPosition)) {\n+      throw new PageLayoutWidgetException(\n+        generatePageLayoutWidgetExceptionMessage(\n+          PageLayoutWidgetExceptionMessageKey.GRID_POSITION_REQUIRED,\n+        ),\n+        PageLayoutWidgetExceptionCode.INVALID_PAGE_LAYOUT_WIDGET_DATA,\n+      );\n+    }\n+\n+    try {\n+      await this.pageLayoutTabService.findByIdOrThrow(\n+        pageLayoutWidgetData.pageLayoutTabId,\n+        workspaceId,\n+      );\n+\n+      const pageLayoutWidget = this.pageLayoutWidgetRepository.create({\n+        ...pageLayoutWidgetData,\n+        workspaceId,\n+      });\n+\n+      return this.pageLayoutWidgetRepository.save(pageLayoutWidget);\n+    } catch (error) {\n+      if (\n+        error instanceof PageLayoutTabException &&\n+        error.code === PageLayoutTabExceptionCode.PAGE_LAYOUT_TAB_NOT_FOUND\n+      ) {\n+        throw new PageLayoutWidgetException(\n+          generatePageLayoutWidgetExceptionMessage(\n+            PageLayoutWidgetExceptionMessageKey.PAGE_LAYOUT_TAB_NOT_FOUND,\n+          ),\n+          PageLayoutWidgetExceptionCode.INVALID_PAGE_LAYOUT_WIDGET_DATA,\n+        );\n+      }\n+      throw error;\n+    }\n+  }\n+\n+  async update(\n+    id: string,\n+    workspaceId: string,\n+    updateData: QueryDeepPartialEntity<PageLayoutWidgetEntity>,",
        "comment_created_at": "2025-09-05T09:23:46+00:00",
        "comment_author": "Weiko",
        "comment_body": "I wouldn't use this `QueryDeepPartialEntity` type here, probably needed because your entity has relations but I don't expect the update method to be called with relations (unless you want to do a deep update).\r\nUpdatePageLayoutWidgetInput would be more accurate (or you can create a new type if you want to isole API types and the service).\r\nThis is probably why you need to do type assertion in the controller/resolver \ud83e\udd14 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2307340405",
    "pr_number": 14092,
    "pr_file": "packages/twenty-server/src/engine/core-modules/billing/billing.resolver.ts",
    "created_at": "2025-08-28T12:58:32+00:00",
    "commented_code": "return { success: true };\n   }\n \n+  @Mutation(() => BillingUpdateOutput)\n+  @UseGuards(\n+    WorkspaceAuthGuard,\n+    SettingsPermissionsGuard(PermissionFlagType.WORKSPACE),\n+  )\n+  async updateSubscriptionItemPrice(",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2307340405",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14092,
        "pr_file": "packages/twenty-server/src/engine/core-modules/billing/billing.resolver.ts",
        "discussion_id": "2307340405",
        "commented_code": "@@ -157,6 +160,23 @@ export class BillingResolver {\n     return { success: true };\n   }\n \n+  @Mutation(() => BillingUpdateOutput)\n+  @UseGuards(\n+    WorkspaceAuthGuard,\n+    SettingsPermissionsGuard(PermissionFlagType.WORKSPACE),\n+  )\n+  async updateSubscriptionItemPrice(",
        "comment_created_at": "2025-08-28T12:58:32+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "This API seems too open to me, do we really want to allow our user to have such flexibility. On engine side, we usually want to be as close as possible: \"switchToYearly\", \"cancel\", ... but not expose too much our data model, this could open the door to security issues",
        "pr_file_module": null
      }
    ]
  }
]