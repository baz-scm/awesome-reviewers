[
  {
    "discussion_id": "2349408216",
    "pr_number": 14360,
    "pr_file": "packages/twenty-server/src/engine/core-modules/auth/token/services/access-token.service.ts",
    "created_at": "2025-09-15T15:38:35+00:00",
    "commented_code": "userId,\n     workspaceId,\n     authProvider,\n+    isImpersonating,\n+    impersonatorUserWorkspaceId,\n+    impersonatedUserWorkspaceId,\n   }: Omit<\n     AccessTokenJwtPayload,\n     'type' | 'workspaceMemberId' | 'userWorkspaceId' | 'sub'\n   >): Promise<AuthToken> {\n+    const isImpersonatingToken = isImpersonating ? true : false;\n+    const hasImpersonationFields =\n+      impersonatorUserWorkspaceId !== undefined ||\n+      impersonatedUserWorkspaceId !== undefined;\n+\n+    if (!isImpersonatingToken && hasImpersonationFields) {\n+      throw new AuthException(\n+        'Invalid impersonation parameters',\n+        AuthExceptionCode.INVALID_INPUT,\n+      );\n+    }\n+\n+    if (isImpersonatingToken) {\n+      const impersonatorUserWorkspaceIdValid =",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2349408216",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/auth/token/services/access-token.service.ts",
        "discussion_id": "2349408216",
        "commented_code": "@@ -48,10 +48,51 @@ export class AccessTokenService {\n     userId,\n     workspaceId,\n     authProvider,\n+    isImpersonating,\n+    impersonatorUserWorkspaceId,\n+    impersonatedUserWorkspaceId,\n   }: Omit<\n     AccessTokenJwtPayload,\n     'type' | 'workspaceMemberId' | 'userWorkspaceId' | 'sub'\n   >): Promise<AuthToken> {\n+    const isImpersonatingToken = isImpersonating ? true : false;\n+    const hasImpersonationFields =\n+      impersonatorUserWorkspaceId !== undefined ||\n+      impersonatedUserWorkspaceId !== undefined;\n+\n+    if (!isImpersonatingToken && hasImpersonationFields) {\n+      throw new AuthException(\n+        'Invalid impersonation parameters',\n+        AuthExceptionCode.INVALID_INPUT,\n+      );\n+    }\n+\n+    if (isImpersonatingToken) {\n+      const impersonatorUserWorkspaceIdValid =",
        "comment_created_at": "2025-09-15T15:38:35+00:00",
        "comment_author": "etiennejouan",
        "comment_body": "nitpick : `isImpersonatorUserWorkspaceIdValid`",
        "pr_file_module": null
      },
      {
        "comment_id": "2349412882",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/auth/token/services/access-token.service.ts",
        "discussion_id": "2349408216",
        "commented_code": "@@ -48,10 +48,51 @@ export class AccessTokenService {\n     userId,\n     workspaceId,\n     authProvider,\n+    isImpersonating,\n+    impersonatorUserWorkspaceId,\n+    impersonatedUserWorkspaceId,\n   }: Omit<\n     AccessTokenJwtPayload,\n     'type' | 'workspaceMemberId' | 'userWorkspaceId' | 'sub'\n   >): Promise<AuthToken> {\n+    const isImpersonatingToken = isImpersonating ? true : false;\n+    const hasImpersonationFields =\n+      impersonatorUserWorkspaceId !== undefined ||\n+      impersonatedUserWorkspaceId !== undefined;\n+\n+    if (!isImpersonatingToken && hasImpersonationFields) {\n+      throw new AuthException(\n+        'Invalid impersonation parameters',\n+        AuthExceptionCode.INVALID_INPUT,\n+      );\n+    }\n+\n+    if (isImpersonatingToken) {\n+      const impersonatorUserWorkspaceIdValid =",
        "comment_created_at": "2025-09-15T15:40:29+00:00",
        "comment_author": "etiennejouan",
        "comment_body": "You can also use `isValidUuid` util",
        "pr_file_module": null
      },
      {
        "comment_id": "2353627799",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14360,
        "pr_file": "packages/twenty-server/src/engine/core-modules/auth/token/services/access-token.service.ts",
        "discussion_id": "2349408216",
        "commented_code": "@@ -48,10 +48,51 @@ export class AccessTokenService {\n     userId,\n     workspaceId,\n     authProvider,\n+    isImpersonating,\n+    impersonatorUserWorkspaceId,\n+    impersonatedUserWorkspaceId,\n   }: Omit<\n     AccessTokenJwtPayload,\n     'type' | 'workspaceMemberId' | 'userWorkspaceId' | 'sub'\n   >): Promise<AuthToken> {\n+    const isImpersonatingToken = isImpersonating ? true : false;\n+    const hasImpersonationFields =\n+      impersonatorUserWorkspaceId !== undefined ||\n+      impersonatedUserWorkspaceId !== undefined;\n+\n+    if (!isImpersonatingToken && hasImpersonationFields) {\n+      throw new AuthException(\n+        'Invalid impersonation parameters',\n+        AuthExceptionCode.INVALID_INPUT,\n+      );\n+    }\n+\n+    if (isImpersonatingToken) {\n+      const impersonatorUserWorkspaceIdValid =",
        "comment_created_at": "2025-09-16T20:51:59+00:00",
        "comment_author": "harshit078",
        "comment_body": "yes, I'll use `isValidUuid` and rename it to `isImpersonatorUserWorkspaceIdValid`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2352170538",
    "pr_number": 14508,
    "pr_file": "packages/twenty-server/src/engine/core-modules/common/services/flat-entity-maps-cache.service.ts",
    "created_at": "2025-09-16T11:47:05+00:00",
    "commented_code": "+import { Injectable, Logger } from '@nestjs/common';\n+\n+import { isDefined } from 'twenty-shared/utils';\n+\n+import { ALL_FLAT_ENTITY_MAPS_PROPERTIES } from 'src/engine/core-modules/common/constant/all-flat-entity-maps-properties.constant';\n+import { EMPTY_ALL_FLAT_ENTITY_MAPS } from 'src/engine/core-modules/common/constant/empty-all-flat-entity-maps.constant';\n+import { AllFlatEntityMaps } from 'src/engine/core-modules/common/types/all-flat-entity-maps.type';\n+import {\n+  WorkspaceFlatMapCacheException,\n+  WorkspaceFlatMapCacheExceptionCode,\n+} from 'src/engine/workspace-flat-map-cache/exceptions/workspace-flat-map-cache.exception';\n+import { WorkspaceFlatMapCacheRegistryService } from 'src/engine/workspace-flat-map-cache/services/workspace-flat-map-cache-registry.service';\n+\n+@Injectable()\n+export class FlatEntityMapsCacheService {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2352170538",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14508,
        "pr_file": "packages/twenty-server/src/engine/core-modules/common/services/flat-entity-maps-cache.service.ts",
        "discussion_id": "2352170538",
        "commented_code": "@@ -0,0 +1,103 @@\n+import { Injectable, Logger } from '@nestjs/common';\n+\n+import { isDefined } from 'twenty-shared/utils';\n+\n+import { ALL_FLAT_ENTITY_MAPS_PROPERTIES } from 'src/engine/core-modules/common/constant/all-flat-entity-maps-properties.constant';\n+import { EMPTY_ALL_FLAT_ENTITY_MAPS } from 'src/engine/core-modules/common/constant/empty-all-flat-entity-maps.constant';\n+import { AllFlatEntityMaps } from 'src/engine/core-modules/common/types/all-flat-entity-maps.type';\n+import {\n+  WorkspaceFlatMapCacheException,\n+  WorkspaceFlatMapCacheExceptionCode,\n+} from 'src/engine/workspace-flat-map-cache/exceptions/workspace-flat-map-cache.exception';\n+import { WorkspaceFlatMapCacheRegistryService } from 'src/engine/workspace-flat-map-cache/services/workspace-flat-map-cache-registry.service';\n+\n+@Injectable()\n+export class FlatEntityMapsCacheService {",
        "comment_created_at": "2025-09-16T11:47:05+00:00",
        "comment_author": "Weiko",
        "comment_body": "Not sure about the naming, could be confusing with WorkspaceFlatMapCacheService \ud83e\udd14. Maybe WorkspaceAllFlatEntityMapsCacheService?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2321275815",
    "pr_number": 14298,
    "pr_file": "packages/twenty-front/src/pages/settings/data-model/utils/compute-metadata-name-from-label.utils.ts",
    "created_at": "2025-09-06T10:36:04+00:00",
    "commented_code": "return '';\n   }\n \n+  if (/[^A-Za-z0-9\\s]/.test(prefixedLabel)) {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2326858524",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14298,
        "pr_file": "packages/twenty-front/src/pages/settings/data-model/utils/compute-metadata-name-from-label.utils.ts",
        "discussion_id": "2321275815",
        "commented_code": "@@ -8,6 +8,11 @@ export const computeMetadataNameFromLabel = (label: string): string => {\n     return '';\n   }\n \n+  if (/[^A-Za-z0-9\\s]/.test(prefixedLabel)) {",
        "comment_created_at": "2025-09-06T10:36:04+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "I feel this should not be here, the slugify function will already remove all special characters during conversion",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2344302993",
    "pr_number": 14437,
    "pr_file": "packages/twenty-server/src/modules/virtual-fields/utils/metadata-resolver.util.ts",
    "created_at": "2025-09-12T13:42:11+00:00",
    "commented_code": "+import { type ObjectMetadataMaps } from 'src/engine/metadata-modules/types/object-metadata-maps';\n+import { getObjectMetadataMapItemByNameSingular } from 'src/engine/metadata-modules/utils/get-object-metadata-map-item-by-name-singular.util';\n+import { type AllStandardFieldIds } from 'src/modules/virtual-fields/types/AllStandardFieldIds';\n+import { type AllStandardObjectIds } from 'src/modules/virtual-fields/types/AllStandardObjectIds';\n+\n+export type FieldResolution = {\n+  objectName: string;\n+  fieldName: string;\n+};\n+\n+export type FieldResolutionOptions = {\n+  shouldThrowOnError?: boolean;\n+};\n+\n+export function resolveFieldByStandardId(\n+  standardFieldId: AllStandardFieldIds,\n+  objectMetadataMaps: ObjectMetadataMaps,\n+): FieldResolution | null {\n+  for (const objectMetadata of Object.values(objectMetadataMaps.byId)) {\n+    if (!objectMetadata) continue;\n+\n+    for (const fieldMetadata of Object.values(objectMetadata.fieldsById)) {\n+      if (fieldMetadata.standardId === standardFieldId) {\n+        return {\n+          objectName: objectMetadata.nameSingular,\n+          fieldName: fieldMetadata.name,\n+        };\n+      }\n+    }\n+  }\n+\n+  return null;\n+}\n+",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2344302993",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14437,
        "pr_file": "packages/twenty-server/src/modules/virtual-fields/utils/metadata-resolver.util.ts",
        "discussion_id": "2344302993",
        "commented_code": "@@ -0,0 +1,133 @@\n+import { type ObjectMetadataMaps } from 'src/engine/metadata-modules/types/object-metadata-maps';\n+import { getObjectMetadataMapItemByNameSingular } from 'src/engine/metadata-modules/utils/get-object-metadata-map-item-by-name-singular.util';\n+import { type AllStandardFieldIds } from 'src/modules/virtual-fields/types/AllStandardFieldIds';\n+import { type AllStandardObjectIds } from 'src/modules/virtual-fields/types/AllStandardObjectIds';\n+\n+export type FieldResolution = {\n+  objectName: string;\n+  fieldName: string;\n+};\n+\n+export type FieldResolutionOptions = {\n+  shouldThrowOnError?: boolean;\n+};\n+\n+export function resolveFieldByStandardId(\n+  standardFieldId: AllStandardFieldIds,\n+  objectMetadataMaps: ObjectMetadataMaps,\n+): FieldResolution | null {\n+  for (const objectMetadata of Object.values(objectMetadataMaps.byId)) {\n+    if (!objectMetadata) continue;\n+\n+    for (const fieldMetadata of Object.values(objectMetadata.fieldsById)) {\n+      if (fieldMetadata.standardId === standardFieldId) {\n+        return {\n+          objectName: objectMetadata.nameSingular,\n+          fieldName: fieldMetadata.name,\n+        };\n+      }\n+    }\n+  }\n+\n+  return null;\n+}\n+",
        "comment_created_at": "2025-09-12T13:42:11+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "Let's do one util per file (not always respected in the codebase but it should be the case).\nLet's also be careful with util naming (your utils are in virtualFields folder but their naming make it sound like they are much more generic and should be somewhere else? If they are specific to virtual field for some reason then it should appear clearly in the name)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2326777781",
    "pr_number": 14307,
    "pr_file": "packages/twenty-server/src/engine/core-modules/dns-manager/dns-manager.module.ts",
    "created_at": "2025-09-06T10:05:40+00:00",
    "commented_code": "+import { Module } from '@nestjs/common';\n+\n+import { DnsManagerService } from 'src/engine/core-modules/dns-manager/services/dns-manager.service';\n+import { DomainManagerModule } from 'src/engine/core-modules/domain-manager/domain-manager.module';\n+import { CloudflareController } from 'src/engine/core-modules/dns-manager/controllers/cloudflare.controller';\n+\n+@Module({\n+  imports: [DomainManagerModule],\n+  providers: [DnsManagerService],\n+  controllers: [CloudflareController],",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2326777781",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14307,
        "pr_file": "packages/twenty-server/src/engine/core-modules/dns-manager/dns-manager.module.ts",
        "discussion_id": "2326777781",
        "commented_code": "@@ -0,0 +1,13 @@\n+import { Module } from '@nestjs/common';\n+\n+import { DnsManagerService } from 'src/engine/core-modules/dns-manager/services/dns-manager.service';\n+import { DomainManagerModule } from 'src/engine/core-modules/domain-manager/domain-manager.module';\n+import { CloudflareController } from 'src/engine/core-modules/dns-manager/controllers/cloudflare.controller';\n+\n+@Module({\n+  imports: [DomainManagerModule],\n+  providers: [DnsManagerService],\n+  controllers: [CloudflareController],",
        "comment_created_at": "2025-09-06T10:05:40+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "**polish:** I would also add \"Dns\" to Cloudflare controller naming",
        "pr_file_module": null
      },
      {
        "comment_id": "2329434867",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14307,
        "pr_file": "packages/twenty-server/src/engine/core-modules/dns-manager/dns-manager.module.ts",
        "discussion_id": "2326777781",
        "commented_code": "@@ -0,0 +1,13 @@\n+import { Module } from '@nestjs/common';\n+\n+import { DnsManagerService } from 'src/engine/core-modules/dns-manager/services/dns-manager.service';\n+import { DomainManagerModule } from 'src/engine/core-modules/domain-manager/domain-manager.module';\n+import { CloudflareController } from 'src/engine/core-modules/dns-manager/controllers/cloudflare.controller';\n+\n+@Module({\n+  imports: [DomainManagerModule],\n+  providers: [DnsManagerService],\n+  controllers: [CloudflareController],",
        "comment_created_at": "2025-09-08T07:52:49+00:00",
        "comment_author": "martmull",
        "comment_body": "I did a lot of refacto in this PR so I did not go further. But this dns-manager should use a driver and cloudflare should be one of the drivers. We should use the same structure as we do for serverless or file storage. I am not sure \"DNS\" naming describes properly what cloudflare does. We may use \"CDN\" (Content Delivery Network) or something. What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "2330476794",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14307,
        "pr_file": "packages/twenty-server/src/engine/core-modules/dns-manager/dns-manager.module.ts",
        "discussion_id": "2326777781",
        "commented_code": "@@ -0,0 +1,13 @@\n+import { Module } from '@nestjs/common';\n+\n+import { DnsManagerService } from 'src/engine/core-modules/dns-manager/services/dns-manager.service';\n+import { DomainManagerModule } from 'src/engine/core-modules/domain-manager/domain-manager.module';\n+import { CloudflareController } from 'src/engine/core-modules/dns-manager/controllers/cloudflare.controller';\n+\n+@Module({\n+  imports: [DomainManagerModule],\n+  providers: [DnsManagerService],\n+  controllers: [CloudflareController],",
        "comment_created_at": "2025-09-08T14:43:30+00:00",
        "comment_author": "martmull",
        "comment_body": "`dns-cloudflare.controller.ts`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2328795223",
    "pr_number": 14341,
    "pr_file": "packages/twenty-shared/src/utils/isRtlLocale.ts",
    "created_at": "2025-09-07T18:27:19+00:00",
    "commented_code": "+import { isDefined } from './validation/isDefined';\n+\n+/**\n+ * Determines whether a given locale is a Right-To-Left (RTL) locale.\n+ *\n+ * The check is performed using a list of common RTL language codes. The\n+ * comparison is case-insensitive and matches locale prefixes, so `fa` and\n+ * `fa-IR` will both return `true`.\n+ */\n+export const isRtlLocale = (locale: string | undefined | null): boolean => {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2328795223",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14341,
        "pr_file": "packages/twenty-shared/src/utils/isRtlLocale.ts",
        "discussion_id": "2328795223",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { isDefined } from './validation/isDefined';\n+\n+/**\n+ * Determines whether a given locale is a Right-To-Left (RTL) locale.\n+ *\n+ * The check is performed using a list of common RTL language codes. The\n+ * comparison is case-insensitive and matches locale prefixes, so `fa` and\n+ * `fa-IR` will both return `true`.\n+ */\n+export const isRtlLocale = (locale: string | undefined | null): boolean => {",
        "comment_created_at": "2025-09-07T18:27:19+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "**change**: could you use full name, we don't add abreviations on the project: isRightToLeftLocale\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2307179852",
    "pr_number": 14113,
    "pr_file": "packages/twenty-front/src/modules/object-record/hooks/useUpdateManyRecordsFromManyObjects.ts",
    "created_at": "2025-08-28T11:56:30+00:00",
    "commented_code": "+import { triggerUpdateRecordOptimisticEffect } from '@/apollo/optimistic-effect/utils/triggerUpdateRecordOptimisticEffect';\n+import { currentWorkspaceMemberState } from '@/auth/states/currentWorkspaceMemberState';\n+import { CustomError } from '@/error-handler/CustomError';\n+import { useApolloCoreClient } from '@/object-metadata/hooks/useApolloCoreClient';\n+import { useObjectMetadataItems } from '@/object-metadata/hooks/useObjectMetadataItems';\n+import { getObjectTypename } from '@/object-record/cache/utils/getObjectTypename';\n+import { getRecordFromCache } from '@/object-record/cache/utils/getRecordFromCache';\n+import { getRecordNodeFromRecord } from '@/object-record/cache/utils/getRecordNodeFromRecord';\n+import { updateRecordFromCache } from '@/object-record/cache/utils/updateRecordFromCache';\n+import { computeDepthOneRecordGqlFieldsFromRecord } from '@/object-record/graphql/utils/computeDepthOneRecordGqlFieldsFromRecord';\n+import { generateDepthOneRecordGqlFields } from '@/object-record/graphql/utils/generateDepthOneRecordGqlFields';\n+import { useObjectPermissions } from '@/object-record/hooks/useObjectPermissions';\n+import { generateUpdateOneRecordMutation } from '@/object-record/multiple-objects/utils/generateUpdateOneRecordMutation';\n+import { getTargetFieldMetadataName } from '@/object-record/multiple-objects/utils/getTargetFieldMetadataName';\n+import { FieldContext } from '@/object-record/record-field/ui/contexts/FieldContext';\n+import { isFieldMorphRelation } from '@/object-record/record-field/ui/types/guards/isFieldMorphRelation';\n+import { isFieldRelation } from '@/object-record/record-field/ui/types/guards/isFieldRelation';\n+import { type ObjectRecord } from '@/object-record/types/ObjectRecord';\n+import { computeOptimisticRecordFromInput } from '@/object-record/utils/computeOptimisticRecordFromInput';\n+import { getAggregateQueryName } from '@/object-record/utils/getAggregateQueryName';\n+import { getUpdateOneRecordMutationResponseField } from '@/object-record/utils/getUpdateOneRecordMutationResponseField';\n+import { sanitizeRecordInput } from '@/object-record/utils/sanitizeRecordInput';\n+import { isNull } from '@sniptt/guards';\n+import { useContext } from 'react';\n+import { useRecoilValue } from 'recoil';\n+import { isDefined } from 'twenty-shared/utils';\n+import { buildRecordFromKeysWithSameValue } from '~/utils/array/buildRecordFromKeysWithSameValue';\n+\n+type UpdateManyRecordArgs = {\n+  idToUpdate: string;\n+  relatedRecordId: string | null;\n+  objectNameSingulars: string[];\n+  recordGqlFields?: Record<string, any>;\n+};\n+\n+export const useUpdateManyRecordsFromManyObjects = () => {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2307179852",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14113,
        "pr_file": "packages/twenty-front/src/modules/object-record/hooks/useUpdateManyRecordsFromManyObjects.ts",
        "discussion_id": "2307179852",
        "commented_code": "@@ -0,0 +1,285 @@\n+import { triggerUpdateRecordOptimisticEffect } from '@/apollo/optimistic-effect/utils/triggerUpdateRecordOptimisticEffect';\n+import { currentWorkspaceMemberState } from '@/auth/states/currentWorkspaceMemberState';\n+import { CustomError } from '@/error-handler/CustomError';\n+import { useApolloCoreClient } from '@/object-metadata/hooks/useApolloCoreClient';\n+import { useObjectMetadataItems } from '@/object-metadata/hooks/useObjectMetadataItems';\n+import { getObjectTypename } from '@/object-record/cache/utils/getObjectTypename';\n+import { getRecordFromCache } from '@/object-record/cache/utils/getRecordFromCache';\n+import { getRecordNodeFromRecord } from '@/object-record/cache/utils/getRecordNodeFromRecord';\n+import { updateRecordFromCache } from '@/object-record/cache/utils/updateRecordFromCache';\n+import { computeDepthOneRecordGqlFieldsFromRecord } from '@/object-record/graphql/utils/computeDepthOneRecordGqlFieldsFromRecord';\n+import { generateDepthOneRecordGqlFields } from '@/object-record/graphql/utils/generateDepthOneRecordGqlFields';\n+import { useObjectPermissions } from '@/object-record/hooks/useObjectPermissions';\n+import { generateUpdateOneRecordMutation } from '@/object-record/multiple-objects/utils/generateUpdateOneRecordMutation';\n+import { getTargetFieldMetadataName } from '@/object-record/multiple-objects/utils/getTargetFieldMetadataName';\n+import { FieldContext } from '@/object-record/record-field/ui/contexts/FieldContext';\n+import { isFieldMorphRelation } from '@/object-record/record-field/ui/types/guards/isFieldMorphRelation';\n+import { isFieldRelation } from '@/object-record/record-field/ui/types/guards/isFieldRelation';\n+import { type ObjectRecord } from '@/object-record/types/ObjectRecord';\n+import { computeOptimisticRecordFromInput } from '@/object-record/utils/computeOptimisticRecordFromInput';\n+import { getAggregateQueryName } from '@/object-record/utils/getAggregateQueryName';\n+import { getUpdateOneRecordMutationResponseField } from '@/object-record/utils/getUpdateOneRecordMutationResponseField';\n+import { sanitizeRecordInput } from '@/object-record/utils/sanitizeRecordInput';\n+import { isNull } from '@sniptt/guards';\n+import { useContext } from 'react';\n+import { useRecoilValue } from 'recoil';\n+import { isDefined } from 'twenty-shared/utils';\n+import { buildRecordFromKeysWithSameValue } from '~/utils/array/buildRecordFromKeysWithSameValue';\n+\n+type UpdateManyRecordArgs = {\n+  idToUpdate: string;\n+  relatedRecordId: string | null;\n+  objectNameSingulars: string[];\n+  recordGqlFields?: Record<string, any>;\n+};\n+\n+export const useUpdateManyRecordsFromManyObjects = () => {",
        "comment_created_at": "2025-08-28T11:56:30+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "useUpdateMultipleRecordsFromManyObjects to avoid confusion with UpdateManyRecords (which is an update of many records with the same payload)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1965669825",
    "pr_number": 10370,
    "pr_file": "packages/twenty-server/src/modules/workflow/workflow-executor/workspace-services/workflow-executor.workspace-service.ts",
    "created_at": "2025-02-21T15:19:39+00:00",
    "commented_code": "this.sendWorkflowNodeRunEvent();\n     }\n \n-    const updatedStepOutput = {\n+    const stepOutput = {\n       id: step.id,\n-      outputs: [\n-        ...(stepOutput?.outputs ?? []),\n-        {\n-          attemptCount,\n-          result: result.result,\n-          error,\n-        },\n-      ],\n+      output: {\n+        result: result.result,\n+        error,\n+      },\n     };\n \n-    const updatedStepsOutput = {\n-      ...workflowExecutorState.stepsOutput,\n-      [step.id]: updatedStepOutput,\n+    if (result.result) {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "1965669825",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 10370,
        "pr_file": "packages/twenty-server/src/modules/workflow/workflow-executor/workspace-services/workflow-executor.workspace-service.ts",
        "discussion_id": "1965669825",
        "commented_code": "@@ -80,94 +118,186 @@ export class WorkflowExecutorWorkspaceService {\n       this.sendWorkflowNodeRunEvent();\n     }\n \n-    const updatedStepOutput = {\n+    const stepOutput = {\n       id: step.id,\n-      outputs: [\n-        ...(stepOutput?.outputs ?? []),\n-        {\n-          attemptCount,\n-          result: result.result,\n-          error,\n-        },\n-      ],\n+      output: {\n+        result: result.result,\n+        error,\n+      },\n     };\n \n-    const updatedStepsOutput = {\n-      ...workflowExecutorState.stepsOutput,\n-      [step.id]: updatedStepOutput,\n+    if (result.result) {",
        "comment_created_at": "2025-02-21T15:19:39+00:00",
        "comment_author": "Devessier",
        "comment_body": "\r\n<!-- Nitpicks are small, trivial, but necessary changes. Distinguishing nitpick comments significantly helps direct the reader's attention to comments requiring more involvement.  -->\r\n**\ud83e\udd13 nitpick:** \u200f`result.result`. Maybe we can rename the `result` variable to read `stepExecution.result`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2298431383",
    "pr_number": 14069,
    "pr_file": "packages/twenty-server/src/modules/messaging/message-import-manager/drivers/imap/utils/get-sent-folder-candidates-by-regex.util.ts",
    "created_at": "2025-08-25T15:28:50+00:00",
    "commented_code": "+import { type ListResponse } from 'imapflow';\n+\n+export function getSentFolderCandidatesByRegex(list: ListResponse[]): string[] {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2298431383",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14069,
        "pr_file": "packages/twenty-server/src/modules/messaging/message-import-manager/drivers/imap/utils/get-sent-folder-candidates-by-regex.util.ts",
        "discussion_id": "2298431383",
        "commented_code": "@@ -0,0 +1,51 @@\n+import { type ListResponse } from 'imapflow';\n+\n+export function getSentFolderCandidatesByRegex(list: ListResponse[]): string[] {",
        "comment_created_at": "2025-08-25T15:28:50+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "**polish**: getSentFolderCandidatesByRegex could be named after messaging / imap (if imap specific). Even if we have put it in a folder below imap, we want filenames to be as specific as possible to ease devXP: when you auto import in your IDE, you want to avoid naming conflict or help auto completion",
        "pr_file_module": null
      }
    ]
  }
]