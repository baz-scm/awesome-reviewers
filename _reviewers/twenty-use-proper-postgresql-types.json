[
  {
    "discussion_id": "2354599441",
    "pr_number": 14414,
    "pr_file": "packages/twenty-server/src/engine/metadata-modules/agent/utils/constructAssistantMessageContentFromStream.ts",
    "created_at": "2025-09-17T07:35:06+00:00",
    "commented_code": "+import { type TextPart } from 'ai';\n+\n+type ReasoningPart = {\n+  type: 'reasoning';\n+  text: string;\n+  signature: string;\n+};\n+\n+export const constructAssistantMessageContentFromStream = (\n+  rawContent: string,\n+) => {\n+  const lines = rawContent.trim().split('\n');\n+\n+  const output: Array<TextPart | ReasoningPart> = [];\n+  let reasoningText = '';\n+  let textContent = '';\n+\n+  for (const line of lines) {\n+    let event;\n+\n+    try {\n+      event = JSON.parse(line);\n+    } catch {\n+      continue;\n+    }\n+\n+    switch (event.type) {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2354599441",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14414,
        "pr_file": "packages/twenty-server/src/engine/metadata-modules/agent/utils/constructAssistantMessageContentFromStream.ts",
        "discussion_id": "2354599441",
        "commented_code": "@@ -0,0 +1,60 @@\n+import { type TextPart } from 'ai';\n+\n+type ReasoningPart = {\n+  type: 'reasoning';\n+  text: string;\n+  signature: string;\n+};\n+\n+export const constructAssistantMessageContentFromStream = (\n+  rawContent: string,\n+) => {\n+  const lines = rawContent.trim().split('\\n');\n+\n+  const output: Array<TextPart | ReasoningPart> = [];\n+  let reasoningText = '';\n+  let textContent = '';\n+\n+  for (const line of lines) {\n+    let event;\n+\n+    try {\n+      event = JSON.parse(line);\n+    } catch {\n+      continue;\n+    }\n+\n+    switch (event.type) {",
        "comment_created_at": "2025-09-17T07:35:06+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "I kind of understand why you need this in both places but the purpose seems to be very similar to stream-parsing on the frontend. Could you move some logic to twenty-shared? Probably the types, maybe some utils are shared, etc?",
        "pr_file_module": null
      },
      {
        "comment_id": "2354610564",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14414,
        "pr_file": "packages/twenty-server/src/engine/metadata-modules/agent/utils/constructAssistantMessageContentFromStream.ts",
        "discussion_id": "2354599441",
        "commented_code": "@@ -0,0 +1,60 @@\n+import { type TextPart } from 'ai';\n+\n+type ReasoningPart = {\n+  type: 'reasoning';\n+  text: string;\n+  signature: string;\n+};\n+\n+export const constructAssistantMessageContentFromStream = (\n+  rawContent: string,\n+) => {\n+  const lines = rawContent.trim().split('\\n');\n+\n+  const output: Array<TextPart | ReasoningPart> = [];\n+  let reasoningText = '';\n+  let textContent = '';\n+\n+  for (const line of lines) {\n+    let event;\n+\n+    try {\n+      event = JSON.parse(line);\n+    } catch {\n+      continue;\n+    }\n+\n+    switch (event.type) {",
        "comment_created_at": "2025-09-17T07:39:04+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "To be honest I feel like storing raw content on the backend is dirty and not the right path :(. \n\nOn initial page load it should get data in the right format. So I'd go with the JSONB option, I'm pretty sure this is the right path (better retrieval performance, ability to do cool Postgres query on the underlying data, better type safety, etc.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2328797225",
    "pr_number": 14341,
    "pr_file": "packages/twenty-server/src/engine/core-modules/user-workspace/user-workspace.entity.ts",
    "created_at": "2025-09-07T18:33:43+00:00",
    "commented_code": "@Column({ nullable: false, default: SOURCE_LOCALE, type: 'varchar' })\n   locale: keyof typeof APP_LOCALES;\n \n+  @Field(() => PreferredCalendar, { nullable: false })\n+  @Column({ type: 'varchar', default: PreferredCalendar.Gregorian })",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2328797225",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14341,
        "pr_file": "packages/twenty-server/src/engine/core-modules/user-workspace/user-workspace.entity.ts",
        "discussion_id": "2328797225",
        "commented_code": "@@ -79,6 +88,10 @@ export class UserWorkspace {\n   @Column({ nullable: false, default: SOURCE_LOCALE, type: 'varchar' })\n   locale: keyof typeof APP_LOCALES;\n \n+  @Field(() => PreferredCalendar, { nullable: false })\n+  @Column({ type: 'varchar', default: PreferredCalendar.Gregorian })",
        "comment_created_at": "2025-09-07T18:33:43+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "column should be non nullable too (which is fine for existing rows as long as we have a default)",
        "pr_file_module": null
      },
      {
        "comment_id": "2328797654",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14341,
        "pr_file": "packages/twenty-server/src/engine/core-modules/user-workspace/user-workspace.entity.ts",
        "discussion_id": "2328797225",
        "commented_code": "@@ -79,6 +88,10 @@ export class UserWorkspace {\n   @Column({ nullable: false, default: SOURCE_LOCALE, type: 'varchar' })\n   locale: keyof typeof APP_LOCALES;\n \n+  @Field(() => PreferredCalendar, { nullable: false })\n+  @Column({ type: 'varchar', default: PreferredCalendar.Gregorian })",
        "comment_created_at": "2025-09-07T18:35:06+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "we should also use an enum on postgres side (we only register it in graphql here if I'm not mistaken)",
        "pr_file_module": null
      },
      {
        "comment_id": "2328797657",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14341,
        "pr_file": "packages/twenty-server/src/engine/core-modules/user-workspace/user-workspace.entity.ts",
        "discussion_id": "2328797225",
        "commented_code": "@@ -79,6 +88,10 @@ export class UserWorkspace {\n   @Column({ nullable: false, default: SOURCE_LOCALE, type: 'varchar' })\n   locale: keyof typeof APP_LOCALES;\n \n+  @Field(() => PreferredCalendar, { nullable: false })\n+  @Column({ type: 'varchar', default: PreferredCalendar.Gregorian })",
        "comment_created_at": "2025-09-07T18:35:06+00:00",
        "comment_author": "charlesBochet",
        "comment_body": "we should also use an enum on postgres side (we only register it in graphql here if I'm not mistaken)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2074788897",
    "pr_number": 11860,
    "pr_file": "packages/twenty-server/src/engine/core-modules/external-event/services/external-event.service.ts",
    "created_at": "2025-05-06T06:13:01+00:00",
    "commented_code": "+import { Injectable } from '@nestjs/common';\n+\n+import { ClickHouseService } from 'src/database/clickHouse/clickHouse.service';\n+import { TwentyConfigService } from 'src/engine/core-modules/twenty-config/twenty-config.service';\n+\n+import { EventMetadataService } from './event-metadata.service';\n+\n+/**\n+ * Interface for external event input, matching the ClickHouse schema\n+ */\n+export interface ExternalEventInput {\n+  // The event name/type (maps to 'event' column in ClickHouse)\n+  event: string;\n+\n+  // ID of the object related to this event\n+  objectId: string;\n+\n+  // Type of the object related to this event (e.g., 'company', 'person', 'opportunity')\n+  objectType?: string;\n+\n+  // User ID related to this event (optional)\n+  userId?: string;",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2074788897",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 11860,
        "pr_file": "packages/twenty-server/src/engine/core-modules/external-event/services/external-event.service.ts",
        "discussion_id": "2074788897",
        "commented_code": "@@ -0,0 +1,94 @@\n+import { Injectable } from '@nestjs/common';\n+\n+import { ClickHouseService } from 'src/database/clickHouse/clickHouse.service';\n+import { TwentyConfigService } from 'src/engine/core-modules/twenty-config/twenty-config.service';\n+\n+import { EventMetadataService } from './event-metadata.service';\n+\n+/**\n+ * Interface for external event input, matching the ClickHouse schema\n+ */\n+export interface ExternalEventInput {\n+  // The event name/type (maps to 'event' column in ClickHouse)\n+  event: string;\n+\n+  // ID of the object related to this event\n+  objectId: string;\n+\n+  // Type of the object related to this event (e.g., 'company', 'person', 'opportunity')\n+  objectType?: string;\n+\n+  // User ID related to this event (optional)\n+  userId?: string;",
        "comment_created_at": "2025-05-06T06:13:01+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "I think instead of \"objectId\"/\"objectType\", we want to have recordId (which is the id of the instance), and objectMetadataId which points to the metadata table",
        "pr_file_module": null
      }
    ]
  }
]