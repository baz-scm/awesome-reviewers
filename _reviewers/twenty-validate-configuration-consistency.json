[
  {
    "discussion_id": "2337779044",
    "pr_number": 14403,
    "pr_file": "packages/twenty-front/src/modules/localization/states/dateTimeFormatState.ts",
    "created_at": "2025-09-10T20:05:36+00:00",
    "commented_code": "import { DateFormat } from '@/localization/constants/DateFormat';\n import { TimeFormat } from '@/localization/constants/TimeFormat';\n+import { NumberFormat } from '@/localization/constants/NumberFormat';\n import { detectTimeZone } from '@/localization/utils/detectTimeZone';\n import { createState } from 'twenty-ui/utilities';\n \n export const dateTimeFormatState = createState<{\n   timeZone: string;\n   dateFormat: DateFormat;\n   timeFormat: TimeFormat;\n+  numberFormat: NumberFormat;\n }>({\n   key: 'dateTimeFormatState',\n   defaultValue: {\n     timeZone: detectTimeZone(),\n     dateFormat: DateFormat.MONTH_FIRST,\n     timeFormat: TimeFormat['HOUR_24'],\n+    numberFormat: NumberFormat.COMMAS_AND_DOT,",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2337779044",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14403,
        "pr_file": "packages/twenty-front/src/modules/localization/states/dateTimeFormatState.ts",
        "discussion_id": "2337779044",
        "commented_code": "@@ -1,17 +1,20 @@\n import { DateFormat } from '@/localization/constants/DateFormat';\n import { TimeFormat } from '@/localization/constants/TimeFormat';\n+import { NumberFormat } from '@/localization/constants/NumberFormat';\n import { detectTimeZone } from '@/localization/utils/detectTimeZone';\n import { createState } from 'twenty-ui/utilities';\n \n export const dateTimeFormatState = createState<{\n   timeZone: string;\n   dateFormat: DateFormat;\n   timeFormat: TimeFormat;\n+  numberFormat: NumberFormat;\n }>({\n   key: 'dateTimeFormatState',\n   defaultValue: {\n     timeZone: detectTimeZone(),\n     dateFormat: DateFormat.MONTH_FIRST,\n     timeFormat: TimeFormat['HOUR_24'],\n+    numberFormat: NumberFormat.COMMAS_AND_DOT,",
        "comment_created_at": "2025-09-10T20:05:36+00:00",
        "comment_author": "FelixMalfait",
        "comment_body": "Like for other settings let's introduce a system value  (default value) and when it's that system then it's our job based on browser info available to guess what's the most likely/best format to use \n\n(that's what we do already for the first day of the week or time/date format)",
        "pr_file_module": null
      },
      {
        "comment_id": "2342377586",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14403,
        "pr_file": "packages/twenty-front/src/modules/localization/states/dateTimeFormatState.ts",
        "discussion_id": "2337779044",
        "commented_code": "@@ -1,17 +1,20 @@\n import { DateFormat } from '@/localization/constants/DateFormat';\n import { TimeFormat } from '@/localization/constants/TimeFormat';\n+import { NumberFormat } from '@/localization/constants/NumberFormat';\n import { detectTimeZone } from '@/localization/utils/detectTimeZone';\n import { createState } from 'twenty-ui/utilities';\n \n export const dateTimeFormatState = createState<{\n   timeZone: string;\n   dateFormat: DateFormat;\n   timeFormat: TimeFormat;\n+  numberFormat: NumberFormat;\n }>({\n   key: 'dateTimeFormatState',\n   defaultValue: {\n     timeZone: detectTimeZone(),\n     dateFormat: DateFormat.MONTH_FIRST,\n     timeFormat: TimeFormat['HOUR_24'],\n+    numberFormat: NumberFormat.COMMAS_AND_DOT,",
        "comment_created_at": "2025-09-11T21:27:00+00:00",
        "comment_author": "ketanMehtaa",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2335821116",
    "pr_number": 14382,
    "pr_file": "packages/twenty-server/src/engine/core-modules/application/services/application-sync.service.ts",
    "created_at": "2025-09-10T07:25:32+00:00",
    "commented_code": "+import { Injectable, Logger } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { Repository } from 'typeorm';\n+\n+import { ApplicationEntity } from 'src/engine/core-modules/application/application.entity';\n+import { ApplicationService } from 'src/engine/core-modules/application/application.service';\n+import { LocalApplicationSourceProvider } from 'src/engine/core-modules/application/providers/local-application-source.provider';\n+import { ApplicationSyncAgentService } from 'src/engine/core-modules/application/services/application-sync-agent.service';\n+\n+export interface ApplicationSyncContext {\n+  workspaceId: string;\n+  featureFlags: Record<string, boolean>;\n+  applicationId: string;\n+}\n+\n+interface ApplicationManifest {",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2335821116",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14382,
        "pr_file": "packages/twenty-server/src/engine/core-modules/application/services/application-sync.service.ts",
        "discussion_id": "2335821116",
        "commented_code": "@@ -0,0 +1,128 @@\n+import { Injectable, Logger } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { Repository } from 'typeorm';\n+\n+import { ApplicationEntity } from 'src/engine/core-modules/application/application.entity';\n+import { ApplicationService } from 'src/engine/core-modules/application/application.service';\n+import { LocalApplicationSourceProvider } from 'src/engine/core-modules/application/providers/local-application-source.provider';\n+import { ApplicationSyncAgentService } from 'src/engine/core-modules/application/services/application-sync-agent.service';\n+\n+export interface ApplicationSyncContext {\n+  workspaceId: string;\n+  featureFlags: Record<string, boolean>;\n+  applicationId: string;\n+}\n+\n+interface ApplicationManifest {",
        "comment_created_at": "2025-09-10T07:25:32+00:00",
        "comment_author": "prastoin",
        "comment_body": "***Remark:*** Interesting ! I would to tend use zod schema here, contained in twenty-shared and also consumned in the cli in order to run basic manifest structure validation locally",
        "pr_file_module": null
      },
      {
        "comment_id": "2335842264",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14382,
        "pr_file": "packages/twenty-server/src/engine/core-modules/application/services/application-sync.service.ts",
        "discussion_id": "2335821116",
        "commented_code": "@@ -0,0 +1,128 @@\n+import { Injectable, Logger } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { Repository } from 'typeorm';\n+\n+import { ApplicationEntity } from 'src/engine/core-modules/application/application.entity';\n+import { ApplicationService } from 'src/engine/core-modules/application/application.service';\n+import { LocalApplicationSourceProvider } from 'src/engine/core-modules/application/providers/local-application-source.provider';\n+import { ApplicationSyncAgentService } from 'src/engine/core-modules/application/services/application-sync-agent.service';\n+\n+export interface ApplicationSyncContext {\n+  workspaceId: string;\n+  featureFlags: Record<string, boolean>;\n+  applicationId: string;\n+}\n+\n+interface ApplicationManifest {",
        "comment_created_at": "2025-09-10T07:34:29+00:00",
        "comment_author": "prastoin",
        "comment_body": "***Question:*** @FelixMalfait when adding a twenty-app to my current twenty instance. When exporting my twenty instance ( in the end a twenty-app :P ), do we agree on the fact that there will be an `apps` section in the manifest listing all required twenty-app dependencies ?\r\nVision here is not clear for me, I would tend to think we should avoid nested twenty-app depedency and flatten them all ( merge strictly duplicated ones )\r\n\r\nFor example given the following apps:\r\n- my-twenty-app\r\n    - apps/\r\n        - twenty-whatsapp-app\r\n        - twenty-mass-emailer-app\r\n- Twenty-whatsapp-app\r\n    - apps/\r\n        - twenty-meta-auth\r\n        - twenty-browser-notifications\r\n- Twenty-mass-emailer-app\r\n    - apps/\r\n        - twenty-emails-viewer\r\n        - twenty-browser-notifications\r\n\r\n## `my-twenty-app` manifest would like something:\r\n```\r\n{\r\n    name: 'my-twenty-app'\r\n    apps: {\r\n        \"twenty-whatsapp-app\",\r\n        \"twenty-mass-email-app\",\r\n        \"twenty-emails-viewer\",\r\n        \"twenty-browser-notifications\"\r\n    }\r\n}\r\n```\r\n\r\nReferences to twenty-apps if versioned using git under the hood, might contain the commit hash of the consumed version ( such as for github actions )\r\n\r\nThat's not for the v0 but we should still take this aspect in consideration",
        "pr_file_module": null
      },
      {
        "comment_id": "2335888449",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14382,
        "pr_file": "packages/twenty-server/src/engine/core-modules/application/services/application-sync.service.ts",
        "discussion_id": "2335821116",
        "commented_code": "@@ -0,0 +1,128 @@\n+import { Injectable, Logger } from '@nestjs/common';\n+import { InjectRepository } from '@nestjs/typeorm';\n+\n+import { Repository } from 'typeorm';\n+\n+import { ApplicationEntity } from 'src/engine/core-modules/application/application.entity';\n+import { ApplicationService } from 'src/engine/core-modules/application/application.service';\n+import { LocalApplicationSourceProvider } from 'src/engine/core-modules/application/providers/local-application-source.provider';\n+import { ApplicationSyncAgentService } from 'src/engine/core-modules/application/services/application-sync-agent.service';\n+\n+export interface ApplicationSyncContext {\n+  workspaceId: string;\n+  featureFlags: Record<string, boolean>;\n+  applicationId: string;\n+}\n+\n+interface ApplicationManifest {",
        "comment_created_at": "2025-09-10T07:52:38+00:00",
        "comment_author": "prastoin",
        "comment_body": "@Weiko we should also be able to determine if a given twetny-app specific version is already installed in a given workspace \ud83e\udd14 Which mean we should have a catalog of installed tweny-app + version for a given workspace ?\r\n@FelixMalfait could this also server as twenty-app main mirror in order to prevent app spoofing ? Or should this be a cloud-production agnostical source of truth consumable by the self hosters too ( sounds overkill )",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2335860674",
    "pr_number": 14382,
    "pr_file": "packages/twenty-cli/src/services/config.service.ts",
    "created_at": "2025-09-10T07:41:50+00:00",
    "commented_code": "+import * as fs from 'fs-extra';\n+import * as os from 'os';\n+import * as path from 'path';\n+import { TwentyConfig } from '../types/config.types';\n+\n+export class ConfigService {\n+  private configPath: string;\n+\n+  constructor() {\n+    this.configPath = path.join(os.homedir(), '.twenty', 'config.json');",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "2335860674",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 14382,
        "pr_file": "packages/twenty-cli/src/services/config.service.ts",
        "discussion_id": "2335860674",
        "commented_code": "@@ -0,0 +1,54 @@\n+import * as fs from 'fs-extra';\n+import * as os from 'os';\n+import * as path from 'path';\n+import { TwentyConfig } from '../types/config.types';\n+\n+export class ConfigService {\n+  private configPath: string;\n+\n+  constructor() {\n+    this.configPath = path.join(os.homedir(), '.twenty', 'config.json');",
        "comment_created_at": "2025-09-10T07:41:50+00:00",
        "comment_author": "prastoin",
        "comment_body": "***Remark:*** IMO twenty-cli will have both env variables and public configuration, configuration path could also be defined in the env variable allowing dynamic config computation within cicd or test env",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1852502147",
    "pr_number": 8656,
    "pr_file": "packages/twenty-server/src/engine/core-modules/environment/environment-variables.ts",
    "created_at": "2024-11-21T16:46:19+00:00",
    "commented_code": "@IsOptional()\n   ENTERPRISE_KEY: string;\n \n+  @CastToBoolean()\n+  @IsOptional()\n+  @IsBoolean()\n+  IS_MULTIWORKSPACE_ENABLED = false;",
    "repo_full_name": "twentyhq/twenty",
    "discussion_comments": [
      {
        "comment_id": "1852502147",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 8656,
        "pr_file": "packages/twenty-server/src/engine/core-modules/environment/environment-variables.ts",
        "discussion_id": "1852502147",
        "commented_code": "@@ -232,6 +232,11 @@ export class EnvironmentVariables {\n   @IsOptional()\n   ENTERPRISE_KEY: string;\n \n+  @CastToBoolean()\n+  @IsOptional()\n+  @IsBoolean()\n+  IS_MULTIWORKSPACE_ENABLED = false;",
        "comment_created_at": "2024-11-21T16:46:19+00:00",
        "comment_author": "martmull",
        "comment_body": "conflict with the recoil default value (false vs true)\r\n![image](https://github.com/user-attachments/assets/cdd7753c-0fde-433b-b363-1222d181c7d2)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1852502660",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 8656,
        "pr_file": "packages/twenty-server/src/engine/core-modules/environment/environment-variables.ts",
        "discussion_id": "1852502147",
        "commented_code": "@@ -232,6 +232,11 @@ export class EnvironmentVariables {\n   @IsOptional()\n   ENTERPRISE_KEY: string;\n \n+  @CastToBoolean()\n+  @IsOptional()\n+  @IsBoolean()\n+  IS_MULTIWORKSPACE_ENABLED = false;",
        "comment_created_at": "2024-11-21T16:46:38+00:00",
        "comment_author": "martmull",
        "comment_body": "we shoudl unify, probably default recoil value to false",
        "pr_file_module": null
      },
      {
        "comment_id": "1852520562",
        "repo_full_name": "twentyhq/twenty",
        "pr_number": 8656,
        "pr_file": "packages/twenty-server/src/engine/core-modules/environment/environment-variables.ts",
        "discussion_id": "1852502147",
        "commented_code": "@@ -232,6 +232,11 @@ export class EnvironmentVariables {\n   @IsOptional()\n   ENTERPRISE_KEY: string;\n \n+  @CastToBoolean()\n+  @IsOptional()\n+  @IsBoolean()\n+  IS_MULTIWORKSPACE_ENABLED = false;",
        "comment_created_at": "2024-11-21T16:57:14+00:00",
        "comment_author": "AMoreaux",
        "comment_body": "Done \ud83d\udc4c",
        "pr_file_module": null
      }
    ]
  }
]