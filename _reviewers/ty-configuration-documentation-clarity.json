[
  {
    "discussion_id": "2256988140",
    "pr_number": 944,
    "pr_file": "docs/reference/editor-settings.md",
    "created_at": "2025-08-06T12:26:47+00:00",
    "commented_code": "# Editor settings\n \n-The editor settings supported by ty's language server, as well as the settings specific to [ty's VS Code extension](https://github.com/astral-sh/ty-vscode/).\n+The editor settings supported by ty's language server, as well as the settings specific to [ty's VS\n+Code extension][ty-vscode].\n \n-## `python.ty.disableLanguageServices`\n+## Runtime settings\n+\n+These settings define the behavior of the language server while it is running. They can be changed\n+dynamically without needing to restart the server.\n+\n+### `disableLanguageServices`\n+\n+Whether to disable the language services for the ty language server like code completion, hover,\n+go to definition, etc.\n+\n+This is useful if you want to use ty exclusively for type checking and want to use another language\n+server for features like code completion, hover, go to definition, etc.",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2256988140",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 944,
        "pr_file": "docs/reference/editor-settings.md",
        "discussion_id": "2256988140",
        "commented_code": "@@ -1,8 +1,79 @@\n # Editor settings\n \n-The editor settings supported by ty's language server, as well as the settings specific to [ty's VS Code extension](https://github.com/astral-sh/ty-vscode/).\n+The editor settings supported by ty's language server, as well as the settings specific to [ty's VS\n+Code extension][ty-vscode].\n \n-## `python.ty.disableLanguageServices`\n+## Runtime settings\n+\n+These settings define the behavior of the language server while it is running. They can be changed\n+dynamically without needing to restart the server.\n+\n+### `disableLanguageServices`\n+\n+Whether to disable the language services for the ty language server like code completion, hover,\n+go to definition, etc.\n+\n+This is useful if you want to use ty exclusively for type checking and want to use another language\n+server for features like code completion, hover, go to definition, etc.",
        "comment_created_at": "2025-08-06T12:26:47+00:00",
        "comment_author": "MichaReiser",
        "comment_body": "```suggestion\r\nThis is useful if you want to use ty exclusively for type checking in combination with another language\r\nserver for features like code completion, hover, go to definition, etc.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146671757",
    "pr_number": 647,
    "pr_file": "docs/README.md",
    "created_at": "2025-06-14T07:28:04+00:00",
    "commented_code": "## Excluding files\n \n-By default, ty ignores files listed in an `.ignore` or `.gitignore` file.\n+ty automatically discovers all Python files in your project. You can customize where ty searches by using the [`src.include`](./reference/configuration.md#include) and [`src.exclude`](./reference/configuration.md#exclude) settings.\n \n-To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n+For example, with the following configuration, ty checks all Python files in the `src` and `tests` directories except those in the `src/generated` directory:\n+\n+```toml\n+[tool.ty.src]\n+include = [\"src\", \"tests\"]\n+exclude = [\"src/generated\"]\n+```\n+\n+By default, ty excludes a [variety of commonly ignored directories](./reference/configuration.md#exclude). If you want to include one of these directories, you can do so by adding a negative `exclude`:\n+\n+```toml\n+[tool.ty.src]\n+# Remove `build` from the excluded directories.\n+exclude = [\"!build\"]\n+```\n+\n+By default, ty ignores files listed in an `.ignore` or `.gitignore` file. To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n \n You may also explicitly pass the paths that ty should check, e.g.:\n \n ```shell\n ty check src scripts/benchmark.py\n ```\n \n-We plan on adding dedicated options for including and excluding files in future releases.\n+Paths passed explicitly are checked even if they are otherwise ignored by an `exclude` or ignore file.",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2146671757",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 647,
        "pr_file": "docs/README.md",
        "discussion_id": "2146671757",
        "commented_code": "@@ -168,17 +170,54 @@ The Python version may also be explicitly specified using the\n \n ## Excluding files\n \n-By default, ty ignores files listed in an `.ignore` or `.gitignore` file.\n+ty automatically discovers all Python files in your project. You can customize where ty searches by using the [`src.include`](./reference/configuration.md#include) and [`src.exclude`](./reference/configuration.md#exclude) settings.\n \n-To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n+For example, with the following configuration, ty checks all Python files in the `src` and `tests` directories except those in the `src/generated` directory:\n+\n+```toml\n+[tool.ty.src]\n+include = [\"src\", \"tests\"]\n+exclude = [\"src/generated\"]\n+```\n+\n+By default, ty excludes a [variety of commonly ignored directories](./reference/configuration.md#exclude). If you want to include one of these directories, you can do so by adding a negative `exclude`:\n+\n+```toml\n+[tool.ty.src]\n+# Remove `build` from the excluded directories.\n+exclude = [\"!build\"]\n+```\n+\n+By default, ty ignores files listed in an `.ignore` or `.gitignore` file. To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n \n You may also explicitly pass the paths that ty should check, e.g.:\n \n ```shell\n ty check src scripts/benchmark.py\n ```\n \n-We plan on adding dedicated options for including and excluding files in future releases.\n+Paths passed explicitly are checked even if they are otherwise ignored by an `exclude` or ignore file.",
        "comment_created_at": "2025-06-14T07:28:04+00:00",
        "comment_author": "sharkdp",
        "comment_body": "Maybe\r\n```suggestion\r\nPaths that are passed as positional arguments to `ty check` are included even if they would otherwise be ignored through `exclude` filters or an ignore-file.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146679138",
    "pr_number": 647,
    "pr_file": "docs/README.md",
    "created_at": "2025-06-14T07:32:40+00:00",
    "commented_code": "## Excluding files\n \n-By default, ty ignores files listed in an `.ignore` or `.gitignore` file.\n+ty automatically discovers all Python files in your project. You can customize where ty searches by using the [`src.include`](./reference/configuration.md#include) and [`src.exclude`](./reference/configuration.md#exclude) settings.\n \n-To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n+For example, with the following configuration, ty checks all Python files in the `src` and `tests` directories except those in the `src/generated` directory:\n+\n+```toml\n+[tool.ty.src]\n+include = [\"src\", \"tests\"]\n+exclude = [\"src/generated\"]\n+```\n+\n+By default, ty excludes a [variety of commonly ignored directories](./reference/configuration.md#exclude). If you want to include one of these directories, you can do so by adding a negative `exclude`:\n+\n+```toml\n+[tool.ty.src]\n+# Remove `build` from the excluded directories.\n+exclude = [\"!build\"]\n+```\n+\n+By default, ty ignores files listed in an `.ignore` or `.gitignore` file. To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n \n You may also explicitly pass the paths that ty should check, e.g.:\n \n ```shell\n ty check src scripts/benchmark.py\n ```\n \n-We plan on adding dedicated options for including and excluding files in future releases.\n+Paths passed explicitly are checked even if they are otherwise ignored by an `exclude` or ignore file.\n+\n+### Include and exclude syntax\n+\n+Both `include` and `exclude` support gitignore like glob patterns:\n+\n+- `src/` matches only a directory\n+- `src` matches both files and directories\n+- `src` matches files or directories named `src`\n+- `*` matches any (possibly empty) sequence of characters (except `/`).\n+- `**` matches zero or more path components.\n+    This sequence **must** form a single path component, so both `**a` and `b**` are invalid and will result in an error.\n+    A sequence of more than two consecutive `*` characters is also invalid.\n+- `?` matches any single character except `/`\n+- `[abc]` matches any character inside the brackets. Character sequences can also specify ranges of characters, as ordered by Unicode,\n+    so e.g. `[0-9]` specifies any character between `0` and `9` inclusive. An unclosed bracket is invalid.\n+\n+Include patterns are anchored: `src` includes only `<project_root>/src` and not `<project_root>/test/src`. To include any directory named `src`, use a prefix match like so: `**/src`, but note that these can notably slow down the Python file discovery.",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2146679138",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 647,
        "pr_file": "docs/README.md",
        "discussion_id": "2146679138",
        "commented_code": "@@ -168,17 +170,54 @@ The Python version may also be explicitly specified using the\n \n ## Excluding files\n \n-By default, ty ignores files listed in an `.ignore` or `.gitignore` file.\n+ty automatically discovers all Python files in your project. You can customize where ty searches by using the [`src.include`](./reference/configuration.md#include) and [`src.exclude`](./reference/configuration.md#exclude) settings.\n \n-To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n+For example, with the following configuration, ty checks all Python files in the `src` and `tests` directories except those in the `src/generated` directory:\n+\n+```toml\n+[tool.ty.src]\n+include = [\"src\", \"tests\"]\n+exclude = [\"src/generated\"]\n+```\n+\n+By default, ty excludes a [variety of commonly ignored directories](./reference/configuration.md#exclude). If you want to include one of these directories, you can do so by adding a negative `exclude`:\n+\n+```toml\n+[tool.ty.src]\n+# Remove `build` from the excluded directories.\n+exclude = [\"!build\"]\n+```\n+\n+By default, ty ignores files listed in an `.ignore` or `.gitignore` file. To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n \n You may also explicitly pass the paths that ty should check, e.g.:\n \n ```shell\n ty check src scripts/benchmark.py\n ```\n \n-We plan on adding dedicated options for including and excluding files in future releases.\n+Paths passed explicitly are checked even if they are otherwise ignored by an `exclude` or ignore file.\n+\n+### Include and exclude syntax\n+\n+Both `include` and `exclude` support gitignore like glob patterns:\n+\n+- `src/` matches only a directory\n+- `src` matches both files and directories\n+- `src` matches files or directories named `src`\n+- `*` matches any (possibly empty) sequence of characters (except `/`).\n+- `**` matches zero or more path components.\n+    This sequence **must** form a single path component, so both `**a` and `b**` are invalid and will result in an error.\n+    A sequence of more than two consecutive `*` characters is also invalid.\n+- `?` matches any single character except `/`\n+- `[abc]` matches any character inside the brackets. Character sequences can also specify ranges of characters, as ordered by Unicode,\n+    so e.g. `[0-9]` specifies any character between `0` and `9` inclusive. An unclosed bracket is invalid.\n+\n+Include patterns are anchored: `src` includes only `<project_root>/src` and not `<project_root>/test/src`. To include any directory named `src`, use a prefix match like so: `**/src`, but note that these can notably slow down the Python file discovery.",
        "comment_created_at": "2025-06-14T07:32:40+00:00",
        "comment_author": "sharkdp",
        "comment_body": "Maybe\r\n```suggestion\r\nInclude patterns are anchored: The pattern `src` only includes `<project_root>/src` but not something like `<project_root>/test/src`. To include any directory named `src`, use the `**/src` prefix match. However, note that these can notably slow down the Python file discovery.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146684426",
    "pr_number": 647,
    "pr_file": "docs/README.md",
    "created_at": "2025-06-14T07:35:09+00:00",
    "commented_code": "## Excluding files\n \n-By default, ty ignores files listed in an `.ignore` or `.gitignore` file.\n+ty automatically discovers all Python files in your project. You can customize where ty searches by using the [`src.include`](./reference/configuration.md#include) and [`src.exclude`](./reference/configuration.md#exclude) settings.\n \n-To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n+For example, with the following configuration, ty checks all Python files in the `src` and `tests` directories except those in the `src/generated` directory:\n+\n+```toml\n+[tool.ty.src]\n+include = [\"src\", \"tests\"]\n+exclude = [\"src/generated\"]\n+```\n+\n+By default, ty excludes a [variety of commonly ignored directories](./reference/configuration.md#exclude). If you want to include one of these directories, you can do so by adding a negative `exclude`:\n+\n+```toml\n+[tool.ty.src]\n+# Remove `build` from the excluded directories.\n+exclude = [\"!build\"]\n+```\n+\n+By default, ty ignores files listed in an `.ignore` or `.gitignore` file. To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n \n You may also explicitly pass the paths that ty should check, e.g.:\n \n ```shell\n ty check src scripts/benchmark.py\n ```\n \n-We plan on adding dedicated options for including and excluding files in future releases.\n+Paths passed explicitly are checked even if they are otherwise ignored by an `exclude` or ignore file.\n+\n+### Include and exclude syntax\n+\n+Both `include` and `exclude` support gitignore like glob patterns:\n+\n+- `src/` matches only a directory\n+- `src` matches both files and directories\n+- `src` matches files or directories named `src`\n+- `*` matches any (possibly empty) sequence of characters (except `/`).\n+- `**` matches zero or more path components.\n+    This sequence **must** form a single path component, so both `**a` and `b**` are invalid and will result in an error.\n+    A sequence of more than two consecutive `*` characters is also invalid.\n+- `?` matches any single character except `/`\n+- `[abc]` matches any character inside the brackets. Character sequences can also specify ranges of characters, as ordered by Unicode,\n+    so e.g. `[0-9]` specifies any character between `0` and `9` inclusive. An unclosed bracket is invalid.\n+\n+Include patterns are anchored: `src` includes only `<project_root>/src` and not `<project_root>/test/src`. To include any directory named `src`, use a prefix match like so: `**/src`, but note that these can notably slow down the Python file discovery.\n+\n+Unlike include patterns, exclude patterns aren't anchored unless they contain a `/`: `venv` excludes any directory named `venv`, e.g. it excludes `<project_root>/venv` and `<project_root>/sub/venv`.",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2146684426",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 647,
        "pr_file": "docs/README.md",
        "discussion_id": "2146684426",
        "commented_code": "@@ -168,17 +170,54 @@ The Python version may also be explicitly specified using the\n \n ## Excluding files\n \n-By default, ty ignores files listed in an `.ignore` or `.gitignore` file.\n+ty automatically discovers all Python files in your project. You can customize where ty searches by using the [`src.include`](./reference/configuration.md#include) and [`src.exclude`](./reference/configuration.md#exclude) settings.\n \n-To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n+For example, with the following configuration, ty checks all Python files in the `src` and `tests` directories except those in the `src/generated` directory:\n+\n+```toml\n+[tool.ty.src]\n+include = [\"src\", \"tests\"]\n+exclude = [\"src/generated\"]\n+```\n+\n+By default, ty excludes a [variety of commonly ignored directories](./reference/configuration.md#exclude). If you want to include one of these directories, you can do so by adding a negative `exclude`:\n+\n+```toml\n+[tool.ty.src]\n+# Remove `build` from the excluded directories.\n+exclude = [\"!build\"]\n+```\n+\n+By default, ty ignores files listed in an `.ignore` or `.gitignore` file. To disable this functionality, set [`respect-ignore-files`](./reference/configuration.md#respect-ignore-files) to `false`.\n \n You may also explicitly pass the paths that ty should check, e.g.:\n \n ```shell\n ty check src scripts/benchmark.py\n ```\n \n-We plan on adding dedicated options for including and excluding files in future releases.\n+Paths passed explicitly are checked even if they are otherwise ignored by an `exclude` or ignore file.\n+\n+### Include and exclude syntax\n+\n+Both `include` and `exclude` support gitignore like glob patterns:\n+\n+- `src/` matches only a directory\n+- `src` matches both files and directories\n+- `src` matches files or directories named `src`\n+- `*` matches any (possibly empty) sequence of characters (except `/`).\n+- `**` matches zero or more path components.\n+    This sequence **must** form a single path component, so both `**a` and `b**` are invalid and will result in an error.\n+    A sequence of more than two consecutive `*` characters is also invalid.\n+- `?` matches any single character except `/`\n+- `[abc]` matches any character inside the brackets. Character sequences can also specify ranges of characters, as ordered by Unicode,\n+    so e.g. `[0-9]` specifies any character between `0` and `9` inclusive. An unclosed bracket is invalid.\n+\n+Include patterns are anchored: `src` includes only `<project_root>/src` and not `<project_root>/test/src`. To include any directory named `src`, use a prefix match like so: `**/src`, but note that these can notably slow down the Python file discovery.\n+\n+Unlike include patterns, exclude patterns aren't anchored unless they contain a `/`: `venv` excludes any directory named `venv`, e.g. it excludes `<project_root>/venv` and `<project_root>/sub/venv`.",
        "comment_created_at": "2025-06-14T07:35:09+00:00",
        "comment_author": "sharkdp",
        "comment_body": "> unless they contain a `/`\r\n\r\nThis is interesting. I think I would expect something like `src/generated` to apply at arbitrary depths, and only something like `/src/generated` with a leading `/` to be anchored. Maybe it's worth clarifying?\r\n\r\nI think the examples here might not be needed?\r\n```suggestion\r\nExclude patterns are *not* anchored, unless they contain a `/`: `venv` excludes all directories named `venv`, at arbitrary depths.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107724679",
    "pr_number": 516,
    "pr_file": "CHANGELOG.md",
    "created_at": "2025-05-26T18:24:01+00:00",
    "commented_code": "# Changelog\n \n+## 0.0.1-alpha.7\n+\n+### Bug fixes\n+\n+- Implement Python's floor division semantics for `Literal` `int`s ([#18249](https://github.com/astral-sh/ruff/pull/18249))\n+- Don't warn `yield` not in function when `yield` is in function ([#18008](https://github.com/astral-sh/ruff/pull/18008))\n+- Fix attribute writes to unions/intersections including modules ([#18313](https://github.com/astral-sh/ruff/pull/18313))\n+- Fix binary intersection comparison inference logic ([#18266](https://github.com/astral-sh/ruff/pull/18266))\n+- Fix instance vs callable subtyping/assignability ([#18260](https://github.com/astral-sh/ruff/pull/18260))\n+- Ignore `ClassVar` declarations when resolving instance members ([#18241](https://github.com/astral-sh/ruff/pull/18241))\n+- Infer types for `ty_extensions.Intersection[A, B]` tuple expressions ([#18321](https://github.com/astral-sh/ruff/pull/18321))\n+- Respect `MRO_NO_OBJECT_FALLBACK` policy when looking up symbols on `type` instances ([#18312](https://github.com/astral-sh/ruff/pull/18312))\n+- `get_protocol_members` returns a frozenset, not a tuple ([#18284](https://github.com/astral-sh/ruff/pull/18284))\n+\n+### Typing semantics and features\n+\n+- Support `import <namespace>` and `from <namespace> import module` ([#18137](https://github.com/astral-sh/ruff/pull/18137))\n+- Support frozen dataclasses ([#17974](https://github.com/astral-sh/ruff/pull/17974))\n+- Use `__getattribute__` to lookup unknown members on a type ([#18280](https://github.com/astral-sh/ruff/pull/18280))\n+- Add a subdiagnostic if `invalid-return-type` is emitted on a method with an empty body on a non-protocol subclass of a protocol class ([#18243](https://github.com/astral-sh/ruff/pull/18243))\n+- Do not carry the generic context of `Protocol` or `Generic` in the `ClassBase` enum ([#17989](https://github.com/astral-sh/ruff/pull/17989))\n+- Improve `invalid-type-form` diagnostic where a module-literal type is used in a type expression and the module has a member which would be valid in a type expression ([#18244](https://github.com/astral-sh/ruff/pull/18244))\n+- Split `invalid-base` error code into two error codes ([#18245](https://github.com/astral-sh/ruff/pull/18245))\n+- Rename `call-possibly-unbound-method` to `possibly-unbound-implicit-call` ([#18017](https://github.com/astral-sh/ruff/pull/18017))\n+\n+### Configuration\n+\n+- Add `tests` to `src.root` if it exists and is not a package ([#18286](https://github.com/astral-sh/ruff/pull/18286))",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2107724679",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 516,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2107724679",
        "commented_code": "@@ -1,5 +1,75 @@\n # Changelog\n \n+## 0.0.1-alpha.7\n+\n+### Bug fixes\n+\n+- Implement Python's floor division semantics for `Literal` `int`s ([#18249](https://github.com/astral-sh/ruff/pull/18249))\n+- Don't warn `yield` not in function when `yield` is in function ([#18008](https://github.com/astral-sh/ruff/pull/18008))\n+- Fix attribute writes to unions/intersections including modules ([#18313](https://github.com/astral-sh/ruff/pull/18313))\n+- Fix binary intersection comparison inference logic ([#18266](https://github.com/astral-sh/ruff/pull/18266))\n+- Fix instance vs callable subtyping/assignability ([#18260](https://github.com/astral-sh/ruff/pull/18260))\n+- Ignore `ClassVar` declarations when resolving instance members ([#18241](https://github.com/astral-sh/ruff/pull/18241))\n+- Infer types for `ty_extensions.Intersection[A, B]` tuple expressions ([#18321](https://github.com/astral-sh/ruff/pull/18321))\n+- Respect `MRO_NO_OBJECT_FALLBACK` policy when looking up symbols on `type` instances ([#18312](https://github.com/astral-sh/ruff/pull/18312))\n+- `get_protocol_members` returns a frozenset, not a tuple ([#18284](https://github.com/astral-sh/ruff/pull/18284))\n+\n+### Typing semantics and features\n+\n+- Support `import <namespace>` and `from <namespace> import module` ([#18137](https://github.com/astral-sh/ruff/pull/18137))\n+- Support frozen dataclasses ([#17974](https://github.com/astral-sh/ruff/pull/17974))\n+- Use `__getattribute__` to lookup unknown members on a type ([#18280](https://github.com/astral-sh/ruff/pull/18280))\n+- Add a subdiagnostic if `invalid-return-type` is emitted on a method with an empty body on a non-protocol subclass of a protocol class ([#18243](https://github.com/astral-sh/ruff/pull/18243))\n+- Do not carry the generic context of `Protocol` or `Generic` in the `ClassBase` enum ([#17989](https://github.com/astral-sh/ruff/pull/17989))\n+- Improve `invalid-type-form` diagnostic where a module-literal type is used in a type expression and the module has a member which would be valid in a type expression ([#18244](https://github.com/astral-sh/ruff/pull/18244))\n+- Split `invalid-base` error code into two error codes ([#18245](https://github.com/astral-sh/ruff/pull/18245))\n+- Rename `call-possibly-unbound-method` to `possibly-unbound-implicit-call` ([#18017](https://github.com/astral-sh/ruff/pull/18017))\n+\n+### Configuration\n+\n+- Add `tests` to `src.root` if it exists and is not a package ([#18286](https://github.com/astral-sh/ruff/pull/18286))",
        "comment_created_at": "2025-05-26T18:24:01+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "```suggestion\r\n- Add `tests` to `src.root` by default if a `tests/` directory exists and is not a package ([#18286](https://github.com/astral-sh/ruff/pull/18286))\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107725232",
    "pr_number": 516,
    "pr_file": "CHANGELOG.md",
    "created_at": "2025-05-26T18:24:41+00:00",
    "commented_code": "# Changelog\n \n+## 0.0.1-alpha.7\n+\n+### Bug fixes\n+\n+- Implement Python's floor division semantics for `Literal` `int`s ([#18249](https://github.com/astral-sh/ruff/pull/18249))\n+- Don't warn `yield` not in function when `yield` is in function ([#18008](https://github.com/astral-sh/ruff/pull/18008))\n+- Fix attribute writes to unions/intersections including modules ([#18313](https://github.com/astral-sh/ruff/pull/18313))\n+- Fix binary intersection comparison inference logic ([#18266](https://github.com/astral-sh/ruff/pull/18266))\n+- Fix instance vs callable subtyping/assignability ([#18260](https://github.com/astral-sh/ruff/pull/18260))\n+- Ignore `ClassVar` declarations when resolving instance members ([#18241](https://github.com/astral-sh/ruff/pull/18241))\n+- Infer types for `ty_extensions.Intersection[A, B]` tuple expressions ([#18321](https://github.com/astral-sh/ruff/pull/18321))\n+- Respect `MRO_NO_OBJECT_FALLBACK` policy when looking up symbols on `type` instances ([#18312](https://github.com/astral-sh/ruff/pull/18312))\n+- `get_protocol_members` returns a frozenset, not a tuple ([#18284](https://github.com/astral-sh/ruff/pull/18284))\n+\n+### Typing semantics and features\n+\n+- Support `import <namespace>` and `from <namespace> import module` ([#18137](https://github.com/astral-sh/ruff/pull/18137))\n+- Support frozen dataclasses ([#17974](https://github.com/astral-sh/ruff/pull/17974))\n+- Use `__getattribute__` to lookup unknown members on a type ([#18280](https://github.com/astral-sh/ruff/pull/18280))\n+- Add a subdiagnostic if `invalid-return-type` is emitted on a method with an empty body on a non-protocol subclass of a protocol class ([#18243](https://github.com/astral-sh/ruff/pull/18243))\n+- Do not carry the generic context of `Protocol` or `Generic` in the `ClassBase` enum ([#17989](https://github.com/astral-sh/ruff/pull/17989))\n+- Improve `invalid-type-form` diagnostic where a module-literal type is used in a type expression and the module has a member which would be valid in a type expression ([#18244](https://github.com/astral-sh/ruff/pull/18244))\n+- Split `invalid-base` error code into two error codes ([#18245](https://github.com/astral-sh/ruff/pull/18245))\n+- Rename `call-possibly-unbound-method` to `possibly-unbound-implicit-call` ([#18017](https://github.com/astral-sh/ruff/pull/18017))\n+\n+### Configuration\n+\n+- Add `tests` to `src.root` if it exists and is not a package ([#18286](https://github.com/astral-sh/ruff/pull/18286))\n+- Tell the user why we inferred the Python version we inferred ([#18082](https://github.com/astral-sh/ruff/pull/18082))\n+- Resolving Python path using `CONDA_PREFIX` variable to support Conda and Pixi ([#18267](https://github.com/astral-sh/ruff/pull/18267))",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2107725232",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 516,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2107725232",
        "commented_code": "@@ -1,5 +1,75 @@\n # Changelog\n \n+## 0.0.1-alpha.7\n+\n+### Bug fixes\n+\n+- Implement Python's floor division semantics for `Literal` `int`s ([#18249](https://github.com/astral-sh/ruff/pull/18249))\n+- Don't warn `yield` not in function when `yield` is in function ([#18008](https://github.com/astral-sh/ruff/pull/18008))\n+- Fix attribute writes to unions/intersections including modules ([#18313](https://github.com/astral-sh/ruff/pull/18313))\n+- Fix binary intersection comparison inference logic ([#18266](https://github.com/astral-sh/ruff/pull/18266))\n+- Fix instance vs callable subtyping/assignability ([#18260](https://github.com/astral-sh/ruff/pull/18260))\n+- Ignore `ClassVar` declarations when resolving instance members ([#18241](https://github.com/astral-sh/ruff/pull/18241))\n+- Infer types for `ty_extensions.Intersection[A, B]` tuple expressions ([#18321](https://github.com/astral-sh/ruff/pull/18321))\n+- Respect `MRO_NO_OBJECT_FALLBACK` policy when looking up symbols on `type` instances ([#18312](https://github.com/astral-sh/ruff/pull/18312))\n+- `get_protocol_members` returns a frozenset, not a tuple ([#18284](https://github.com/astral-sh/ruff/pull/18284))\n+\n+### Typing semantics and features\n+\n+- Support `import <namespace>` and `from <namespace> import module` ([#18137](https://github.com/astral-sh/ruff/pull/18137))\n+- Support frozen dataclasses ([#17974](https://github.com/astral-sh/ruff/pull/17974))\n+- Use `__getattribute__` to lookup unknown members on a type ([#18280](https://github.com/astral-sh/ruff/pull/18280))\n+- Add a subdiagnostic if `invalid-return-type` is emitted on a method with an empty body on a non-protocol subclass of a protocol class ([#18243](https://github.com/astral-sh/ruff/pull/18243))\n+- Do not carry the generic context of `Protocol` or `Generic` in the `ClassBase` enum ([#17989](https://github.com/astral-sh/ruff/pull/17989))\n+- Improve `invalid-type-form` diagnostic where a module-literal type is used in a type expression and the module has a member which would be valid in a type expression ([#18244](https://github.com/astral-sh/ruff/pull/18244))\n+- Split `invalid-base` error code into two error codes ([#18245](https://github.com/astral-sh/ruff/pull/18245))\n+- Rename `call-possibly-unbound-method` to `possibly-unbound-implicit-call` ([#18017](https://github.com/astral-sh/ruff/pull/18017))\n+\n+### Configuration\n+\n+- Add `tests` to `src.root` if it exists and is not a package ([#18286](https://github.com/astral-sh/ruff/pull/18286))\n+- Tell the user why we inferred the Python version we inferred ([#18082](https://github.com/astral-sh/ruff/pull/18082))\n+- Resolving Python path using `CONDA_PREFIX` variable to support Conda and Pixi ([#18267](https://github.com/astral-sh/ruff/pull/18267))",
        "comment_created_at": "2025-05-26T18:24:41+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "```suggestion\r\n- Add support for detecting activated Conda and Pixi environments ([#18267](https://github.com/astral-sh/ruff/pull/18267))\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2085538039",
    "pr_number": 335,
    "pr_file": "docs/README.md",
    "created_at": "2025-05-12T21:23:53+00:00",
    "commented_code": "### First-party modules\n \n-First-party modules are Python files that are part of your own project\u2019s codebase, unlike modules from the standard library modules or third-party packages installed via a package manager like uv or pip. By default, ty searches for first-party modules in the project's root folder or the `src` folder (if present). If your project uses a different layout, configure the project's [`src.root`](./reference/configuration.md#root) in your `pyproject.toml`. For example, if your project's code is in the `app` directory, like so:\n+First-party modules are Python files that are part of your project source code.\n+\n+By default, ty searches for first-party modules in the project's root directory or the `src`\n+directory, if present.\n+\n+If your project uses a different layout, configure the project's\n+[`src.root`](./reference/configuration.md#root) in your `pyproject.toml`. For example, if your\n+project's code is in the `app` directory, like so:",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2085538039",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085538039",
        "commented_code": "@@ -50,7 +50,14 @@ pip install ty\n \n ### First-party modules\n \n-First-party modules are Python files that are part of your own project\u2019s codebase, unlike modules from the standard library modules or third-party packages installed via a package manager like uv or pip. By default, ty searches for first-party modules in the project's root folder or the `src` folder (if present). If your project uses a different layout, configure the project's [`src.root`](./reference/configuration.md#root) in your `pyproject.toml`. For example, if your project's code is in the `app` directory, like so:\n+First-party modules are Python files that are part of your project source code.\n+\n+By default, ty searches for first-party modules in the project's root directory or the `src`\n+directory, if present.\n+\n+If your project uses a different layout, configure the project's\n+[`src.root`](./reference/configuration.md#root) in your `pyproject.toml`. For example, if your\n+project's code is in the `app` directory, like so:",
        "comment_created_at": "2025-05-12T21:23:53+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "```suggestion\r\nproject's code is in an `app/` directory:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2085544465",
    "pr_number": 335,
    "pr_file": "docs/README.md",
    "created_at": "2025-05-12T21:26:24+00:00",
    "commented_code": "### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2085544465",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085544465",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.",
        "comment_created_at": "2025-05-12T21:26:24+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "```suggestion\r\nThese are usually declared as project dependencies in a `pyproject.toml` file or similar,\r\nand are installed using a package manager like uv or pip. Examples of popular third-party\r\nlibraries are `requests`, `numpy` and `django`.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2085585583",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085544465",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.",
        "comment_created_at": "2025-05-12T21:46:15+00:00",
        "comment_author": "zanieb",
        "comment_body": "I'm hesitant to go into more detail here, it seems like a bit of a distraction and \"or similar\" is pretty load bearing. What's they key point we're trying to establish here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2085587659",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085544465",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.",
        "comment_created_at": "2025-05-12T21:48:16+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "I wasn't really sure what \"these are usually dependencies of your project\" really meant in your current text. It feels almost tautological -- third-party modules are dependencies, yes, but what's the definition of a dependency? It's a third-party module.",
        "pr_file_module": null
      },
      {
        "comment_id": "2085590842",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085544465",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.",
        "comment_created_at": "2025-05-12T21:51:20+00:00",
        "comment_author": "zanieb",
        "comment_body": "Haha see, I think the point is to provide that sort of tautological \"third-party modules is just a fancy word for dependencies\" statement since we're explaining to a beginner what we mean by this concept. I expect people to know what a \"dependency\" is. I can play with this language though...",
        "pr_file_module": null
      },
      {
        "comment_id": "2085593262",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085544465",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.",
        "comment_created_at": "2025-05-12T21:54:02+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "> I expect people to know what a \"dependency\" is\r\n\r\nAh, I do not!! I've seen lots of Python noobs who've been forced to type checkers by the company they're working for, and who know very little at all about Python packaging \ud83d\ude04",
        "pr_file_module": null
      },
      {
        "comment_id": "2085597382",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085544465",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.",
        "comment_created_at": "2025-05-12T21:58:27+00:00",
        "comment_author": "zanieb",
        "comment_body": "```suggestion\r\nThese are usually declared as dependencies in a `pyproject.toml` or `requirements.txt` file\r\nand installed using a package manager like uv or pip. Examples of popular third-party\r\nmodules are `requests`, `numpy` and `django`.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2085598134",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085544465",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.",
        "comment_created_at": "2025-05-12T21:59:07+00:00",
        "comment_author": "zanieb",
        "comment_body": "That's sort of not the target audience for _this_ documentation, but anyway I'm fine with changing it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2085598658",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085544465",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.",
        "comment_created_at": "2025-05-12T21:59:44+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "that LGTM!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2085555468",
    "pr_number": 335,
    "pr_file": "docs/README.md",
    "created_at": "2025-05-12T21:31:13+00:00",
    "commented_code": "### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.\n \n ## Python version\n \n-The supported Python syntax and standard library functions differ between Python versions. For example, Python 3.10 introduced support for `match` statements and the `sys.stdlib_module_names` symbol. While these features enhance the language, using them in a project targeting an older Python version can lead to compatibility issues.\n-ty helps you avoid such compatibility issues by checking your code against the Python version your project targets, and flagging any use of features or standard library symbols not available in that version.\n+The Python version affects allowed syntax, type definitions of the standard library, and type\n+definitions of first- and third-party modules that are conditional on the Python version.\n+\n+For example, Python 3.10 introduced support for `match` statements and added the the\n+`sys.stdlib_module_names` symbol. However, if your project also supports Python 3.9, you cannot use\n+these new features.",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2085555468",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085555468",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.\n \n ## Python version\n \n-The supported Python syntax and standard library functions differ between Python versions. For example, Python 3.10 introduced support for `match` statements and the `sys.stdlib_module_names` symbol. While these features enhance the language, using them in a project targeting an older Python version can lead to compatibility issues.\n-ty helps you avoid such compatibility issues by checking your code against the Python version your project targets, and flagging any use of features or standard library symbols not available in that version.\n+The Python version affects allowed syntax, type definitions of the standard library, and type\n+definitions of first- and third-party modules that are conditional on the Python version.\n+\n+For example, Python 3.10 introduced support for `match` statements and added the the\n+`sys.stdlib_module_names` symbol. However, if your project also supports Python 3.9, you cannot use\n+these new features.",
        "comment_created_at": "2025-05-12T21:31:13+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "````suggestion\r\n`sys.stdlib_module_names` symbol to the standard library. However, if your project also supports\r\nPython 3.9, you cannot use these new features unless they are inside an `if sys.version_info >= (3, 10)` branch:\r\n\r\n```python\r\nimport sys\r\n\r\nif sys.version_info >= (3, 10):\r\n    print(sys.stdlib_module_names)  # okay whatever your python-version is set to, because of the `sys.version_info` condition\r\nelse:\r\n    print(sys.stdlib_module_names)  # ty will emit an error here if the configured `python-version` is <3.10\r\n```\r\n````",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2081756378",
    "pr_number": 294,
    "pr_file": "README.md",
    "created_at": "2025-05-09T13:59:49+00:00",
    "commented_code": "## Configuration\n \n-<!-- ### Configuration files -->\n+### Configuration files\n+\n+ty supports persistent configuration files at both the project- and user-level.\n+\n+Specifically, ty will search for a `pyproject.toml` or `ty.toml` file in the current directory, or in the nearest parent directory.\n+\n+If a `pyproject.toml` file is found, ty will read configuration from the [tool.ty] table. For example, to ignore the `index-out-of-bounds` rule, add the following to a `pyproject.toml`:\n+\n+**`pyproject.toml`**:\n+\n+```toml\n+[tool.ty.rules]\n+index-out-of-bounds = \"ignore\"\n+```\n+\n+(If there is no `tool.ty` table, the `pyproject.toml` file will be ignored, and ty will continue searching in the directory hierarchy.)\n+\n+ty will also search for `ty.toml` files, which follow an identical structure, but omit the [tool.ty] prefix. For example:\n+\n+**`ty.toml`**:\n+\n+```toml\n+[rules]\n+index-out-of-bounds = \"ignore\"\n+```\n+\n+> [!NOTE]\n+> `ty.toml` files take precedence over `pyproject.toml` files, so if both `ty.toml` and `pyproject.toml` files are present in a directory, configuration will be read from `ty.toml`, and the `[tool.ty]` section in the accompanying `pyproject.toml` will be ignored.\n+\n+ty will also discover user-level configuration at `~/.config/ty/ty.toml` (or `$XDG_CONFIG_HOME/ty/ty.toml`) on macOS and Linux, or `%APPDATA%\\ty\\ty.toml` on Windows. User-level configuration must use the `ty.toml` format, rather than the `pyproject.toml` format, as a `pyproject.toml` is intended to define a Python project.\n+\n+If project- and user--level configuration files are found, the settings will be merged, with project-level configuration taking precedence over the user-level configuration.",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2081756378",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 294,
        "pr_file": "README.md",
        "discussion_id": "2081756378",
        "commented_code": "@@ -74,7 +74,44 @@ to learn how to connect to an LSP server.\n \n ## Configuration\n \n-<!-- ### Configuration files -->\n+### Configuration files\n+\n+ty supports persistent configuration files at both the project- and user-level.\n+\n+Specifically, ty will search for a `pyproject.toml` or `ty.toml` file in the current directory, or in the nearest parent directory.\n+\n+If a `pyproject.toml` file is found, ty will read configuration from the [tool.ty] table. For example, to ignore the `index-out-of-bounds` rule, add the following to a `pyproject.toml`:\n+\n+**`pyproject.toml`**:\n+\n+```toml\n+[tool.ty.rules]\n+index-out-of-bounds = \"ignore\"\n+```\n+\n+(If there is no `tool.ty` table, the `pyproject.toml` file will be ignored, and ty will continue searching in the directory hierarchy.)\n+\n+ty will also search for `ty.toml` files, which follow an identical structure, but omit the [tool.ty] prefix. For example:\n+\n+**`ty.toml`**:\n+\n+```toml\n+[rules]\n+index-out-of-bounds = \"ignore\"\n+```\n+\n+> [!NOTE]\n+> `ty.toml` files take precedence over `pyproject.toml` files, so if both `ty.toml` and `pyproject.toml` files are present in a directory, configuration will be read from `ty.toml`, and the `[tool.ty]` section in the accompanying `pyproject.toml` will be ignored.\n+\n+ty will also discover user-level configuration at `~/.config/ty/ty.toml` (or `$XDG_CONFIG_HOME/ty/ty.toml`) on macOS and Linux, or `%APPDATA%\\ty\\ty.toml` on Windows. User-level configuration must use the `ty.toml` format, rather than the `pyproject.toml` format, as a `pyproject.toml` is intended to define a Python project.\n+\n+If project- and user--level configuration files are found, the settings will be merged, with project-level configuration taking precedence over the user-level configuration.",
        "comment_created_at": "2025-05-09T13:59:49+00:00",
        "comment_author": "carljm",
        "comment_body": "```suggestion\r\nIf project- and user-level configuration files are found, the settings will be merged, with project-level configuration taking precedence over the user-level configuration.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]