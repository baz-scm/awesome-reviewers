[
  {
    "discussion_id": "2256505832",
    "pr_number": 944,
    "pr_file": "docs/reference/editor-settings.md",
    "created_at": "2025-08-06T09:12:57+00:00",
    "commented_code": "# Editor settings\n \n-The editor settings supported by ty's language server, as well as the settings specific to [ty's VS Code extension](https://github.com/astral-sh/ty-vscode/).\n+The editor settings supported by ty's language server, as well as the settings specific to [ty's VS\n+Code extension][ty-vscode].\n \n-## `python.ty.disableLanguageServices`\n+## Runtime settings\n+\n+These settings define the behavior of the language server while it is running. They can be changed\n+dynamically without needing to restart the server.",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2256505832",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 944,
        "pr_file": "docs/reference/editor-settings.md",
        "discussion_id": "2256505832",
        "commented_code": "@@ -1,8 +1,79 @@\n # Editor settings\n \n-The editor settings supported by ty's language server, as well as the settings specific to [ty's VS Code extension](https://github.com/astral-sh/ty-vscode/).\n+The editor settings supported by ty's language server, as well as the settings specific to [ty's VS\n+Code extension][ty-vscode].\n \n-## `python.ty.disableLanguageServices`\n+## Runtime settings\n+\n+These settings define the behavior of the language server while it is running. They can be changed\n+dynamically without needing to restart the server.",
        "comment_created_at": "2025-08-06T09:12:57+00:00",
        "comment_author": "dhruvmanila",
        "comment_body": "I'm not sure if we want to provide this kind of information to the user facing docs, happy to hear others thoughts.",
        "pr_file_module": null
      },
      {
        "comment_id": "2256971303",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 944,
        "pr_file": "docs/reference/editor-settings.md",
        "discussion_id": "2256505832",
        "commented_code": "@@ -1,8 +1,79 @@\n # Editor settings\n \n-The editor settings supported by ty's language server, as well as the settings specific to [ty's VS Code extension](https://github.com/astral-sh/ty-vscode/).\n+The editor settings supported by ty's language server, as well as the settings specific to [ty's VS\n+Code extension][ty-vscode].\n \n-## `python.ty.disableLanguageServices`\n+## Runtime settings\n+\n+These settings define the behavior of the language server while it is running. They can be changed\n+dynamically without needing to restart the server.",
        "comment_created_at": "2025-08-06T12:20:28+00:00",
        "comment_author": "MichaReiser",
        "comment_body": "I'd remove it. It's a nice feature, but not really relevant when configuring the editor (it only describes how ty will respond to configuration changes).\r\n\r\nI think the bigger question here is if and how we want to group the settings.\r\n\r\nI think I would remove *Runtime settings* but keep *Initialization options*. I'm not a huge fan of the terminology because it isn't really clear for users what initialization options are. Given that the only supported options are logging related, should we rename the section to `Logging options` (and maybe move it to the very bottom?)",
        "pr_file_module": null
      },
      {
        "comment_id": "2259012065",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 944,
        "pr_file": "docs/reference/editor-settings.md",
        "discussion_id": "2256505832",
        "commented_code": "@@ -1,8 +1,79 @@\n # Editor settings\n \n-The editor settings supported by ty's language server, as well as the settings specific to [ty's VS Code extension](https://github.com/astral-sh/ty-vscode/).\n+The editor settings supported by ty's language server, as well as the settings specific to [ty's VS\n+Code extension][ty-vscode].\n \n-## `python.ty.disableLanguageServices`\n+## Runtime settings\n+\n+These settings define the behavior of the language server while it is running. They can be changed\n+dynamically without needing to restart the server.",
        "comment_created_at": "2025-08-07T04:35:47+00:00",
        "comment_author": "dhruvmanila",
        "comment_body": "> I think I would remove _Runtime settings_ but keep _Initialization options_. I'm not a huge fan of the terminology because it isn't really clear for users what initialization options are. Given that the only supported options are logging related, should we rename the section to `Logging options` (and maybe move it to the very bottom?)\r\n\r\nThis is a good idea but I'm worried in the future we might have to rename it if there's anything other than logging related options that gets added. I think I'd keep it \"initialization options\" for now but I've updated the brief at the start to avoid using \"language server\" and change the language to be more towards using ty in an editor.",
        "pr_file_module": null
      },
      {
        "comment_id": "2259015393",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 944,
        "pr_file": "docs/reference/editor-settings.md",
        "discussion_id": "2256505832",
        "commented_code": "@@ -1,8 +1,79 @@\n # Editor settings\n \n-The editor settings supported by ty's language server, as well as the settings specific to [ty's VS Code extension](https://github.com/astral-sh/ty-vscode/).\n+The editor settings supported by ty's language server, as well as the settings specific to [ty's VS\n+Code extension][ty-vscode].\n \n-## `python.ty.disableLanguageServices`\n+## Runtime settings\n+\n+These settings define the behavior of the language server while it is running. They can be changed\n+dynamically without needing to restart the server.",
        "comment_created_at": "2025-08-07T04:37:07+00:00",
        "comment_author": "dhruvmanila",
        "comment_body": "Another reason to avoid the \"Logging options\" section is that the `ty.trace.server` should also be part of that section but it's only specific to VS Code.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2192184489",
    "pr_number": 778,
    "pr_file": "CHANGELOG.md",
    "created_at": "2025-07-08T11:03:09+00:00",
    "commented_code": "# Changelog\n \n+## 0.0.1-alpha.14\n+\n+### Bug fixes\n+\n+- Fix descriptor lookups for most types that overlap with `None` ([#19120](https://github.com/astral-sh/ruff/pull/19120)).\n+    This means that e.g. `object().__str__()` now correctly binds the `self` argument of the `__str__`\n+    method, as the `object` type overlaps with `None`.\n+- Don't allow first-party code to shadow the stdlib `types` module ([#19128](https://github.com/astral-sh/ruff/pull/19128)).\n+    This fixes a possible source of stack overflows.\n+- Add cycle detection to our ty's implementation of disjointness, preventing another possible source of stack overflows when analysing recursive types ([#19139](https://github.com/astral-sh/ruff/pull/19139))\n+\n+### Server\n+\n+- Filter a symbol from a stub file in autocomplete suggestions if it is an implementation detail of the stub ([#19121](https://github.com/astral-sh/ruff/pull/19121))\n+\n+- Add initial support for [semantic tokens](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_semanticTokens). This feature allows editors to apply more advanced syntax highlighting. ([#19108](https://github.com/astral-sh/ruff/pull/19108)).\n+\n+    Currently, the supported tokens are:\n+\n+    - `Namespace`\n+    - `Class`\n+    - `Parameter`\n+    - `SelfParameter`\n+    - `ClsParameter`\n+    - `Variable`\n+    - `Property`\n+    - `Function`\n+    - `Method`\n+    - `Keyword`\n+    - `String`\n+    - `Number`\n+    - `Decorator`\n+    - `BuiltinConstant`\n+    - `TypeParameter`\n+\n+- Initial support for [workspace diagnostics](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_diagnostic) ([#18939](https://github.com/astral-sh/ruff/pull/18939))\n+\n+- Use Python syntax highlighting for Markdown code fences in on-hover content ([#19082](https://github.com/astral-sh/ruff/pull/19082))\n+\n+### Other changes",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2192184489",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 778,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2192184489",
        "commented_code": "@@ -1,5 +1,68 @@\n # Changelog\n \n+## 0.0.1-alpha.14\n+\n+### Bug fixes\n+\n+- Fix descriptor lookups for most types that overlap with `None` ([#19120](https://github.com/astral-sh/ruff/pull/19120)).\n+    This means that e.g. `object().__str__()` now correctly binds the `self` argument of the `__str__`\n+    method, as the `object` type overlaps with `None`.\n+- Don't allow first-party code to shadow the stdlib `types` module ([#19128](https://github.com/astral-sh/ruff/pull/19128)).\n+    This fixes a possible source of stack overflows.\n+- Add cycle detection to our ty's implementation of disjointness, preventing another possible source of stack overflows when analysing recursive types ([#19139](https://github.com/astral-sh/ruff/pull/19139))\n+\n+### Server\n+\n+- Filter a symbol from a stub file in autocomplete suggestions if it is an implementation detail of the stub ([#19121](https://github.com/astral-sh/ruff/pull/19121))\n+\n+- Add initial support for [semantic tokens](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_semanticTokens). This feature allows editors to apply more advanced syntax highlighting. ([#19108](https://github.com/astral-sh/ruff/pull/19108)).\n+\n+    Currently, the supported tokens are:\n+\n+    - `Namespace`\n+    - `Class`\n+    - `Parameter`\n+    - `SelfParameter`\n+    - `ClsParameter`\n+    - `Variable`\n+    - `Property`\n+    - `Function`\n+    - `Method`\n+    - `Keyword`\n+    - `String`\n+    - `Number`\n+    - `Decorator`\n+    - `BuiltinConstant`\n+    - `TypeParameter`\n+\n+- Initial support for [workspace diagnostics](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_diagnostic) ([#18939](https://github.com/astral-sh/ruff/pull/18939))\n+\n+- Use Python syntax highlighting for Markdown code fences in on-hover content ([#19082](https://github.com/astral-sh/ruff/pull/19082))\n+\n+### Other changes",
        "comment_created_at": "2025-07-08T11:03:09+00:00",
        "comment_author": "sharkdp",
        "comment_body": "We tried to avoid \"Other changes\" elsewhere. Should this be\r\n```suggestion\r\n### Typing semantics and features\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2192187985",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 778,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2192184489",
        "commented_code": "@@ -1,5 +1,68 @@\n # Changelog\n \n+## 0.0.1-alpha.14\n+\n+### Bug fixes\n+\n+- Fix descriptor lookups for most types that overlap with `None` ([#19120](https://github.com/astral-sh/ruff/pull/19120)).\n+    This means that e.g. `object().__str__()` now correctly binds the `self` argument of the `__str__`\n+    method, as the `object` type overlaps with `None`.\n+- Don't allow first-party code to shadow the stdlib `types` module ([#19128](https://github.com/astral-sh/ruff/pull/19128)).\n+    This fixes a possible source of stack overflows.\n+- Add cycle detection to our ty's implementation of disjointness, preventing another possible source of stack overflows when analysing recursive types ([#19139](https://github.com/astral-sh/ruff/pull/19139))\n+\n+### Server\n+\n+- Filter a symbol from a stub file in autocomplete suggestions if it is an implementation detail of the stub ([#19121](https://github.com/astral-sh/ruff/pull/19121))\n+\n+- Add initial support for [semantic tokens](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_semanticTokens). This feature allows editors to apply more advanced syntax highlighting. ([#19108](https://github.com/astral-sh/ruff/pull/19108)).\n+\n+    Currently, the supported tokens are:\n+\n+    - `Namespace`\n+    - `Class`\n+    - `Parameter`\n+    - `SelfParameter`\n+    - `ClsParameter`\n+    - `Variable`\n+    - `Property`\n+    - `Function`\n+    - `Method`\n+    - `Keyword`\n+    - `String`\n+    - `Number`\n+    - `Decorator`\n+    - `BuiltinConstant`\n+    - `TypeParameter`\n+\n+- Initial support for [workspace diagnostics](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_diagnostic) ([#18939](https://github.com/astral-sh/ruff/pull/18939))\n+\n+- Use Python syntax highlighting for Markdown code fences in on-hover content ([#19082](https://github.com/astral-sh/ruff/pull/19082))\n+\n+### Other changes",
        "comment_created_at": "2025-07-08T11:05:00+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "I think that works well here!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2085554331",
    "pr_number": 335,
    "pr_file": "docs/README.md",
    "created_at": "2025-05-12T21:30:34+00:00",
    "commented_code": "### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
    "repo_full_name": "astral-sh/ty",
    "discussion_comments": [
      {
        "comment_id": "2085554331",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T21:30:34+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "I find the order in which the information is presented here a little confusing because you mention `--python` after `VIRTUAL_ENV` and `.venv`, but the first thing ty checks is whether it was set explicitly using `--python` or the `environment.python` config option. I think it would be easier to follow if we listed the fallbacks in the order ty considers them: first detail the explicit ways of configuring this, then detail the fallbacks it uses.\r\n\r\nI think it's also important to state that the `VIRTUAL_ENV` variable will be implicitly set:\r\n- if you're using `uv run` or an equivalent from pdm/poetry/hatch/etc.\r\n- if you explicitly activate the virtual environment in your shell",
        "pr_file_module": null
      },
      {
        "comment_id": "2085583487",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T21:44:24+00:00",
        "comment_author": "zanieb",
        "comment_body": "I think the existing structure of covering the default behavior (which is what most people will use) makes sense before discussing the fact that you can override that behavior? I am generally hesitant to cover the explicit options first here.\r\n\r\n> I think it's also important to state that the VIRTUAL_ENV variable will be implicitly set:\r\n\r\nThis makes sense to me.",
        "pr_file_module": null
      },
      {
        "comment_id": "2085597857",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T21:58:52+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "What about something like this:\r\n\r\n```md\r\nThe Python environment ty should use can be explicitly specified, but ty can also automatically\r\ninfer your project's environment in many cases.\r\n\r\nty only supports _automatic_ discovery of virtual environments at this time.\r\n\r\nWhen discovering virtual environments, ty first checks for an active environment using the `VIRTUAL_ENV`\r\nenvironment variable. If not set, ty will search for a `.venv` folder in the project root or\r\nworking directory.\r\n\r\nThe Python environment may be explicitly specified using the\r\n[`environment.python`](./reference/configuration.md#python) setting or\r\n[`--python`](./reference/cli.md#ty-check--python) flag. When setting\r\nthe environment explicitly, non-virtual environments can be provided.\r\n```\r\n\r\nSo, we still detail the automatic discovery before the explicit config options, but we make it slightly clearer upfront that explicit config is supported and non-virtual environments are supported.",
        "pr_file_module": null
      },
      {
        "comment_id": "2085599325",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T22:00:30+00:00",
        "comment_author": "zanieb",
        "comment_body": "I don't love it :D ",
        "pr_file_module": null
      },
      {
        "comment_id": "2085604618",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T22:06:53+00:00",
        "comment_author": "zanieb",
        "comment_body": "I'm trying to rephrase it for you, but this pattern is used in each section haha",
        "pr_file_module": null
      },
      {
        "comment_id": "2085605271",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T22:07:34+00:00",
        "comment_author": "zanieb",
        "comment_body": "I think if we wanted them to be used by most users, I'd list them first, but the idea is that you don't need the setting.",
        "pr_file_module": null
      },
      {
        "comment_id": "2085607082",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T22:09:57+00:00",
        "comment_author": "zanieb",
        "comment_body": "In the same way that we don't lead with \"here's how to use `src.root`\"",
        "pr_file_module": null
      },
      {
        "comment_id": "2085607829",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T22:10:51+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "yeah I get that... maybe something like this...?\r\n\r\n```md\r\nIn many cases, ty can also automatically infer your project's environment.\r\nty only supports _automatic_ discovery of virtual environments at this time.\r\n\r\nWhen discovering virtual environments, ty first checks for an active environment using the `VIRTUAL_ENV`\r\nenvironment variable. If not set, ty will search for a `.venv` folder in the project root or\r\nworking directory.\r\n\r\nThe Python environment can also be explicitly specified using the\r\n[`environment.python`](./reference/configuration.md#python) setting or\r\n[`--python`](./reference/cli.md#ty-check--python) flag. If either of these\r\nare set, they will take precedence over ty's automatic environment discovery.\r\n\r\nWhen setting the environment explicitly, non-virtual environments can be provided.",
        "pr_file_module": null
      },
      {
        "comment_id": "2085609287",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T22:12:37+00:00",
        "comment_author": "zanieb",
        "comment_body": "I pushed a tweak, maybe it's a bit better?\r\n\r\nI'm trying to use the same language as the rest of the sections, e.g., \"By default, ...\" ",
        "pr_file_module": null
      },
      {
        "comment_id": "2085612598",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T22:16:50+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "Yeah, the new language looks great, thanks!",
        "pr_file_module": null
      },
      {
        "comment_id": "2085614701",
        "repo_full_name": "astral-sh/ty",
        "pr_number": 335,
        "pr_file": "docs/README.md",
        "discussion_id": "2085554331",
        "commented_code": "@@ -70,41 +77,85 @@ root = \"./app\"\n \n ### Third-party modules\n \n-Third-party modules are external Python packages that are not part of the standard library or your own project\u2019s code. These are typically installed using a package manager like uv or pip and include libraries such as `requests`, `numpy`, or `django`.\n+Third-party modules are Python packages that are not part of your project or the standard library.\n+These are usually dependencies of your project, and are installed using a package manager like uv or\n+pip. Common examples include libraries such as `requests`, `numpy`, or `django`.\n+\n+ty searches for third-party modules in the configured [Python environment](#python-environment).\n+\n+### Python environment\n+\n+ty only supports automatic discovery of virtual environments at this time.\n+\n+First, ty checks for an active environment using the `VIRTUAL_ENV` environment variable. If not set,\n+ty will search for a `.venv` folder in the project root or working directory.\n \n-ty searches third-party modules in your project's virtual environment. By default, it looks for a virtual environment in a `.venv` folder located at the project root. If the `VIRTUAL_ENV` environment variable is set, ty will use the path specified there instead. If your project uses a different location for your virtual environment, specify the location by setting the [`environment.python`](./reference/configuration.md#python) configuration or [`--python`](./reference/cli.md#ty-check--python) CLI option.\n+The Python environment may be explicitly specified using the\n+[`environment.python`](./reference/configuration.md#python) setting or\n+[`--python`](./reference/cli.md#ty-check--python) flag.\n+\n+When setting the environment explicitly, non-virtual environments can be provided.",
        "comment_created_at": "2025-05-12T22:19:25+00:00",
        "comment_author": "zanieb",
        "comment_body": "Thanks for your lenience :) haha",
        "pr_file_module": null
      }
    ]
  }
]