[
  {
    "discussion_id": "2152817116",
    "pr_number": 61861,
    "pr_file": "tests/baselines/reference/tsserver/moduleResolution/alternateResult.js",
    "created_at": "2025-06-17T17:37:33+00:00",
    "commented_code": "\"line\": 2,\n               \"offset\": 26\n             },\n-            \"text\": \"Could not find a declaration file for module 'bar'. '/home/src/projects/project/node_modules/bar/index.mjs' implicitly has an 'any' type.\n  Try `npm i --save-dev @types/bar` if it exists or add a new declaration (.d.ts) file containing `declare module 'bar';`\",",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2152817116",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61861,
        "pr_file": "tests/baselines/reference/tsserver/moduleResolution/alternateResult.js",
        "discussion_id": "2152817116",
        "commented_code": "@@ -998,7 +801,7 @@ Info seq  [hh:mm:ss:mss] event:\n               \"line\": 2,\n               \"offset\": 26\n             },\n-            \"text\": \"Could not find a declaration file for module 'bar'. '/home/src/projects/project/node_modules/bar/index.mjs' implicitly has an 'any' type.\\n  Try `npm i --save-dev @types/bar` if it exists or add a new declaration (.d.ts) file containing `declare module 'bar';`\",",
        "comment_created_at": "2025-06-17T17:37:33+00:00",
        "comment_author": "sheetalkamat",
        "comment_body": "This is the error message given if module resolution fails: and then the message changes based of if we can find the resolution using node10 or not. With not watching this location (the resolution was to \".js\" file) we wil not change the error based on whether you later install `@types` which is incorrectly typed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1771876087",
    "pr_number": 59767,
    "pr_file": "tests/baselines/reference/emit(jsx=preserve).js",
    "created_at": "2024-09-23T18:05:31+00:00",
    "commented_code": "+//// [tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/emit.ts] ////\r\n+\r\n+//// [globals.d.ts]\r\n+declare function require(module: string): any;\n+\r\n+//// [main.ts]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import foo = require(\"./foo.ts\");\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+//Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+import(\"\" + \"./foo.ts\");\r\n+//// [js.js]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+// Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+require(\"./foo.ts\");\n+{\n+  require(\"./foo.ts\");\n+  require(getPath());\n+}\n+\n+// No rewrite or shim\r\n+//// [no.ts]\r\n+import {} from \"./foo.ts/foo.js\";\n+import {} from \"foo.ts\";\n+import {} from \"pkg/foo.ts\";\n+import {} from \".foo.ts\";\n+import {} from \"./foo.d.ts\";\n+import {} from \"./foo.d.mts\";\n+import {} from \"./foo.d.css.ts\";\n+import {} from \"#internal/foo.ts\";\n+import {} from \"node:foo.ts\";\n+(require)(\"./foo.ts\");\n+import(\"node:path\");\n+require(\"node:path\");\n+\r\n+//// [lol.ts]\r\n+// Sad face https://github.com/microsoft/TypeScript/blob/6b04f5039429b9d412696fe2febe39ecc69ad365/src/testRunner/compilerRunner.ts#L207\n+\r\n+\r\n+//// [main.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+const foo = require(\"./foo.js\");\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+//Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true), { with: { attr: \"value\" } });\r\n+import(__rewriteRelativeImportExtension(\"\" + \"./foo.ts\", true));\r\n+//// [js.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+// Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "1771876087",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 59767,
        "pr_file": "tests/baselines/reference/emit(jsx=preserve).js",
        "discussion_id": "1771876087",
        "commented_code": "@@ -0,0 +1,131 @@\n+//// [tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/emit.ts] ////\r\n+\r\n+//// [globals.d.ts]\r\n+declare function require(module: string): any;\n+\r\n+//// [main.ts]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import foo = require(\"./foo.ts\");\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+//Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+import(\"\" + \"./foo.ts\");\r\n+//// [js.js]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+// Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+require(\"./foo.ts\");\n+{\n+  require(\"./foo.ts\");\n+  require(getPath());\n+}\n+\n+// No rewrite or shim\r\n+//// [no.ts]\r\n+import {} from \"./foo.ts/foo.js\";\n+import {} from \"foo.ts\";\n+import {} from \"pkg/foo.ts\";\n+import {} from \".foo.ts\";\n+import {} from \"./foo.d.ts\";\n+import {} from \"./foo.d.mts\";\n+import {} from \"./foo.d.css.ts\";\n+import {} from \"#internal/foo.ts\";\n+import {} from \"node:foo.ts\";\n+(require)(\"./foo.ts\");\n+import(\"node:path\");\n+require(\"node:path\");\n+\r\n+//// [lol.ts]\r\n+// Sad face https://github.com/microsoft/TypeScript/blob/6b04f5039429b9d412696fe2febe39ecc69ad365/src/testRunner/compilerRunner.ts#L207\n+\r\n+\r\n+//// [main.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+const foo = require(\"./foo.js\");\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+//Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true), { with: { attr: \"value\" } });\r\n+import(__rewriteRelativeImportExtension(\"\" + \"./foo.ts\", true));\r\n+//// [js.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+// Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r",
        "comment_created_at": "2024-09-23T18:05:31+00:00",
        "comment_author": "weswigham",
        "comment_body": "Minor potential UX optimization: You think it'd be worth building in knowledge in the checker/binder that `import(__rewriteRelativeImportExtension(\"./foo.ts\"))` can be bound/checked the same as `import(\"./foo.ts\")`, just so LS operations on emitted files work a bit better?",
        "pr_file_module": null
      },
      {
        "comment_id": "1772377741",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 59767,
        "pr_file": "tests/baselines/reference/emit(jsx=preserve).js",
        "discussion_id": "1771876087",
        "commented_code": "@@ -0,0 +1,131 @@\n+//// [tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/emit.ts] ////\r\n+\r\n+//// [globals.d.ts]\r\n+declare function require(module: string): any;\n+\r\n+//// [main.ts]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import foo = require(\"./foo.ts\");\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+//Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+import(\"\" + \"./foo.ts\");\r\n+//// [js.js]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+// Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+require(\"./foo.ts\");\n+{\n+  require(\"./foo.ts\");\n+  require(getPath());\n+}\n+\n+// No rewrite or shim\r\n+//// [no.ts]\r\n+import {} from \"./foo.ts/foo.js\";\n+import {} from \"foo.ts\";\n+import {} from \"pkg/foo.ts\";\n+import {} from \".foo.ts\";\n+import {} from \"./foo.d.ts\";\n+import {} from \"./foo.d.mts\";\n+import {} from \"./foo.d.css.ts\";\n+import {} from \"#internal/foo.ts\";\n+import {} from \"node:foo.ts\";\n+(require)(\"./foo.ts\");\n+import(\"node:path\");\n+require(\"node:path\");\n+\r\n+//// [lol.ts]\r\n+// Sad face https://github.com/microsoft/TypeScript/blob/6b04f5039429b9d412696fe2febe39ecc69ad365/src/testRunner/compilerRunner.ts#L207\n+\r\n+\r\n+//// [main.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+const foo = require(\"./foo.js\");\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+//Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true), { with: { attr: \"value\" } });\r\n+import(__rewriteRelativeImportExtension(\"\" + \"./foo.ts\", true));\r\n+//// [js.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+// Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r",
        "comment_created_at": "2024-09-24T00:29:56+00:00",
        "comment_author": "jakebailey",
        "comment_body": "Yeah, I guess I thought we'd not emit the helper when we know statically that it's a literal, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "1773823953",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 59767,
        "pr_file": "tests/baselines/reference/emit(jsx=preserve).js",
        "discussion_id": "1771876087",
        "commented_code": "@@ -0,0 +1,131 @@\n+//// [tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/emit.ts] ////\r\n+\r\n+//// [globals.d.ts]\r\n+declare function require(module: string): any;\n+\r\n+//// [main.ts]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import foo = require(\"./foo.ts\");\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+//Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+import(\"\" + \"./foo.ts\");\r\n+//// [js.js]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+// Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+require(\"./foo.ts\");\n+{\n+  require(\"./foo.ts\");\n+  require(getPath());\n+}\n+\n+// No rewrite or shim\r\n+//// [no.ts]\r\n+import {} from \"./foo.ts/foo.js\";\n+import {} from \"foo.ts\";\n+import {} from \"pkg/foo.ts\";\n+import {} from \".foo.ts\";\n+import {} from \"./foo.d.ts\";\n+import {} from \"./foo.d.mts\";\n+import {} from \"./foo.d.css.ts\";\n+import {} from \"#internal/foo.ts\";\n+import {} from \"node:foo.ts\";\n+(require)(\"./foo.ts\");\n+import(\"node:path\");\n+require(\"node:path\");\n+\r\n+//// [lol.ts]\r\n+// Sad face https://github.com/microsoft/TypeScript/blob/6b04f5039429b9d412696fe2febe39ecc69ad365/src/testRunner/compilerRunner.ts#L207\n+\r\n+\r\n+//// [main.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+const foo = require(\"./foo.js\");\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+//Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true), { with: { attr: \"value\" } });\r\n+import(__rewriteRelativeImportExtension(\"\" + \"./foo.ts\", true));\r\n+//// [js.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+// Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r",
        "comment_created_at": "2024-09-24T18:22:51+00:00",
        "comment_author": "andrewbranch",
        "comment_body": "> Yeah, I guess I thought we'd not emit the helper when we know statically that it's a literal, right?\r\n\r\nIt was suggested that import/require calls be shimmed unconditionally so someone debugging the emitted code can understand what happened",
        "pr_file_module": null
      },
      {
        "comment_id": "1773828276",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 59767,
        "pr_file": "tests/baselines/reference/emit(jsx=preserve).js",
        "discussion_id": "1771876087",
        "commented_code": "@@ -0,0 +1,131 @@\n+//// [tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/emit.ts] ////\r\n+\r\n+//// [globals.d.ts]\r\n+declare function require(module: string): any;\n+\r\n+//// [main.ts]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import foo = require(\"./foo.ts\");\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+//Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+import(\"\" + \"./foo.ts\");\r\n+//// [js.js]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+// Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+require(\"./foo.ts\");\n+{\n+  require(\"./foo.ts\");\n+  require(getPath());\n+}\n+\n+// No rewrite or shim\r\n+//// [no.ts]\r\n+import {} from \"./foo.ts/foo.js\";\n+import {} from \"foo.ts\";\n+import {} from \"pkg/foo.ts\";\n+import {} from \".foo.ts\";\n+import {} from \"./foo.d.ts\";\n+import {} from \"./foo.d.mts\";\n+import {} from \"./foo.d.css.ts\";\n+import {} from \"#internal/foo.ts\";\n+import {} from \"node:foo.ts\";\n+(require)(\"./foo.ts\");\n+import(\"node:path\");\n+require(\"node:path\");\n+\r\n+//// [lol.ts]\r\n+// Sad face https://github.com/microsoft/TypeScript/blob/6b04f5039429b9d412696fe2febe39ecc69ad365/src/testRunner/compilerRunner.ts#L207\n+\r\n+\r\n+//// [main.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+const foo = require(\"./foo.js\");\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+//Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true), { with: { attr: \"value\" } });\r\n+import(__rewriteRelativeImportExtension(\"\" + \"./foo.ts\", true));\r\n+//// [js.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+// Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r",
        "comment_created_at": "2024-09-24T18:26:37+00:00",
        "comment_author": "andrewbranch",
        "comment_body": "But, _not_ taking that suggestion would be a much easier way of making the emitted code work in the LS. I’m a bit concerned about how far the increased complexity of changing what imports/requires can be considered a module reference would reach into the LS.",
        "pr_file_module": null
      },
      {
        "comment_id": "1774171486",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 59767,
        "pr_file": "tests/baselines/reference/emit(jsx=preserve).js",
        "discussion_id": "1771876087",
        "commented_code": "@@ -0,0 +1,131 @@\n+//// [tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/emit.ts] ////\r\n+\r\n+//// [globals.d.ts]\r\n+declare function require(module: string): any;\n+\r\n+//// [main.ts]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import foo = require(\"./foo.ts\");\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+//Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+import(\"\" + \"./foo.ts\");\r\n+//// [js.js]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+// Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+require(\"./foo.ts\");\n+{\n+  require(\"./foo.ts\");\n+  require(getPath());\n+}\n+\n+// No rewrite or shim\r\n+//// [no.ts]\r\n+import {} from \"./foo.ts/foo.js\";\n+import {} from \"foo.ts\";\n+import {} from \"pkg/foo.ts\";\n+import {} from \".foo.ts\";\n+import {} from \"./foo.d.ts\";\n+import {} from \"./foo.d.mts\";\n+import {} from \"./foo.d.css.ts\";\n+import {} from \"#internal/foo.ts\";\n+import {} from \"node:foo.ts\";\n+(require)(\"./foo.ts\");\n+import(\"node:path\");\n+require(\"node:path\");\n+\r\n+//// [lol.ts]\r\n+// Sad face https://github.com/microsoft/TypeScript/blob/6b04f5039429b9d412696fe2febe39ecc69ad365/src/testRunner/compilerRunner.ts#L207\n+\r\n+\r\n+//// [main.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+const foo = require(\"./foo.js\");\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+//Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true), { with: { attr: \"value\" } });\r\n+import(__rewriteRelativeImportExtension(\"\" + \"./foo.ts\", true));\r\n+//// [js.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+// Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r",
        "comment_created_at": "2024-09-24T22:37:27+00:00",
        "comment_author": "weswigham",
        "comment_body": "🤷 Maybe one day we'll change `require`/`import` inference logic to operate on resolved types and not just literals, so declaring `declare function __rewriteRelativeImportExtension<T extends string>(arg: T): T;` makes an `import`/`resolve` of the call on the literal still work (since the function is defined as a pass-thru, type-wise) and we shouldn't bother special-casing it now.",
        "pr_file_module": null
      },
      {
        "comment_id": "1774172326",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 59767,
        "pr_file": "tests/baselines/reference/emit(jsx=preserve).js",
        "discussion_id": "1771876087",
        "commented_code": "@@ -0,0 +1,131 @@\n+//// [tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/emit.ts] ////\r\n+\r\n+//// [globals.d.ts]\r\n+declare function require(module: string): any;\n+\r\n+//// [main.ts]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import foo = require(\"./foo.ts\");\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+//Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+import(\"\" + \"./foo.ts\");\r\n+//// [js.js]\r\n+// Rewrite\n+import {} from \"./foo.ts\";\n+import {} from \"../foo.mts\";\n+import {} from \"../../foo.cts\";\n+import {} from \"./foo.tsx\";\n+import \"./foo.ts\";\n+export * from \"./foo.ts\";\n+// Shim\n+import(\"./foo.ts\");\n+import(\"./foo.ts\", { with: { attr: \"value\" } });\n+require(\"./foo.ts\");\n+{\n+  require(\"./foo.ts\");\n+  require(getPath());\n+}\n+\n+// No rewrite or shim\r\n+//// [no.ts]\r\n+import {} from \"./foo.ts/foo.js\";\n+import {} from \"foo.ts\";\n+import {} from \"pkg/foo.ts\";\n+import {} from \".foo.ts\";\n+import {} from \"./foo.d.ts\";\n+import {} from \"./foo.d.mts\";\n+import {} from \"./foo.d.css.ts\";\n+import {} from \"#internal/foo.ts\";\n+import {} from \"node:foo.ts\";\n+(require)(\"./foo.ts\");\n+import(\"node:path\");\n+require(\"node:path\");\n+\r\n+//// [lol.ts]\r\n+// Sad face https://github.com/microsoft/TypeScript/blob/6b04f5039429b9d412696fe2febe39ecc69ad365/src/testRunner/compilerRunner.ts#L207\n+\r\n+\r\n+//// [main.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+const foo = require(\"./foo.js\");\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+//Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true), { with: { attr: \"value\" } });\r\n+import(__rewriteRelativeImportExtension(\"\" + \"./foo.ts\", true));\r\n+//// [js.js]\r\n+var __rewriteRelativeImportExtension = (this && this.__rewriteRelativeImportExtension) || function (path, preserveJsx) {\r\n+    if (typeof path === \"string\" && path[0] === \".\" && (path[1] === \"/\" || path[1] === \".\" && path[2] === \"/\")) {\r\n+        if (path.substring(path.length - 4) === \".tsx\") {\r\n+            return path.substring(0, path.length - 4) + (preserveJsx ? \".jsx\" : \".js\");\r\n+        }\r\n+        if (path.substring(path.length - 3) === \".ts\") {\r\n+            var dot = path.lastIndexOf(\".\", path.length - 4);\r\n+            if (dot >= 0 && (path.substring(dot - 2, dot) === \".d\" || path.substring(dot, dot + 2) === \".d\")) {\r\n+                return path;\r\n+            }\r\n+            return path.substring(0, path.length - 3) + \".js\";\r\n+        }\r\n+        return path.replace(/(?<!\\.d)\\.[cm]ts$/, function (ext) { return ext === \".mts\" ? \".mjs\" : \".cjs\"; });\r\n+    }\r\n+    return path;\r\n+};\r\n+// Rewrite\r\n+import {} from \"./foo.js\";\r\n+import {} from \"../foo.mjs\";\r\n+import {} from \"../../foo.cjs\";\r\n+import {} from \"./foo.jsx\";\r\n+import \"./foo.js\";\r\n+export * from \"./foo.js\";\r\n+// Shim\r\n+import(__rewriteRelativeImportExtension(\"./foo.ts\", true));\r",
        "comment_created_at": "2024-09-24T22:38:32+00:00",
        "comment_author": "andrewbranch",
        "comment_body": "I’m going to push a commit that changes the literal case from shimming to rewriting—I think losing the explicitness of what happened in the emit is the least bad of the tradeoffs discussed here. We can always emit a synthesized comment if we want to make it more clear that something happened in the emit. (Might not be a bad idea for all the rewrites.) I won’t have time to get to that before I leave, but can come back to it for the RC if that’s something we want to do.",
        "pr_file_module": null
      }
    ]
  }
]