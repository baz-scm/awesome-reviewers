[
  {
    "discussion_id": "1058539142",
    "pr_number": 49218,
    "pr_file": "tests/baselines/reference/genericRestParameters3.errors.txt",
    "created_at": "2022-12-28T19:04:01+00:00",
    "commented_code": "~~\r\n !!! error TS2322: Type '(x: string, y: string) => void' is not assignable to type '(x: string, ...args: [string] | [number, boolean]) => void'.\r\n !!! error TS2322:   Types of parameters 'y' and 'args' are incompatible.\r\n-!!! error TS2322:     Type '[string] | [number, boolean]' is not assignable to type '[y: string]'.\r\n-!!! error TS2322:       Type '[number, boolean]' is not assignable to type '[y: string]'.\r\n-!!! error TS2322:         Source has 2 element(s) but target allows only 1.\r\n+!!! error TS2322:     Type '[string] | [number]' is not assignable to type '[y: string]'.\r\n+!!! error TS2322:       Type '[number]' is not assignable to type '[y: string]'.\r\n+!!! error TS2322:         Type 'number' is not assignable to type 'string'.\r\n     f1 = f3;  // Error\r\n     ~~\r\n !!! error TS2322: Type '(x: string, y: number, z: boolean) => void' is not assignable to type '(x: string, ...args: [string] | [number, boolean]) => void'.\r\n !!! error TS2322:   Types of parameters 'y' and 'args' are incompatible.\r\n-!!! error TS2322:     Type '[string] | [number, boolean]' is not assignable to type '[y: number, z: boolean]'.\r\n-!!! error TS2322:       Type '[string]' is not assignable to type '[y: number, z: boolean]'.\r\n-!!! error TS2322:         Source has 1 element(s) but target requires 2.\r\n+!!! error TS2322:     Type '[number, boolean] | [string, undefined]' is not assignable to type '[y: number, z: boolean]'.\r\n+!!! error TS2322:       Type '[string, undefined]' is not assignable to type '[y: number, z: boolean]'.\r\n+!!! error TS2322:         Type at position 0 in source is not compatible with type at position 0 in target.\r\n+!!! error TS2322:           Type 'string' is not assignable to type 'number'.",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "1058539142",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 49218,
        "pr_file": "tests/baselines/reference/genericRestParameters3.errors.txt",
        "discussion_id": "1058539142",
        "commented_code": "@@ -69,16 +70,17 @@ tests/cases/conformance/types/rest/genericRestParameters3.ts(59,5): error TS2345\n     ~~\r\n !!! error TS2322: Type '(x: string, y: string) => void' is not assignable to type '(x: string, ...args: [string] | [number, boolean]) => void'.\r\n !!! error TS2322:   Types of parameters 'y' and 'args' are incompatible.\r\n-!!! error TS2322:     Type '[string] | [number, boolean]' is not assignable to type '[y: string]'.\r\n-!!! error TS2322:       Type '[number, boolean]' is not assignable to type '[y: string]'.\r\n-!!! error TS2322:         Source has 2 element(s) but target allows only 1.\r\n+!!! error TS2322:     Type '[string] | [number]' is not assignable to type '[y: string]'.\r\n+!!! error TS2322:       Type '[number]' is not assignable to type '[y: string]'.\r\n+!!! error TS2322:         Type 'number' is not assignable to type 'string'.\r\n     f1 = f3;  // Error\r\n     ~~\r\n !!! error TS2322: Type '(x: string, y: number, z: boolean) => void' is not assignable to type '(x: string, ...args: [string] | [number, boolean]) => void'.\r\n !!! error TS2322:   Types of parameters 'y' and 'args' are incompatible.\r\n-!!! error TS2322:     Type '[string] | [number, boolean]' is not assignable to type '[y: number, z: boolean]'.\r\n-!!! error TS2322:       Type '[string]' is not assignable to type '[y: number, z: boolean]'.\r\n-!!! error TS2322:         Source has 1 element(s) but target requires 2.\r\n+!!! error TS2322:     Type '[number, boolean] | [string, undefined]' is not assignable to type '[y: number, z: boolean]'.\r\n+!!! error TS2322:       Type '[string, undefined]' is not assignable to type '[y: number, z: boolean]'.\r\n+!!! error TS2322:         Type at position 0 in source is not compatible with type at position 0 in target.\r\n+!!! error TS2322:           Type 'string' is not assignable to type 'number'.\r",
        "comment_created_at": "2022-12-28T19:04:01+00:00",
        "comment_author": "Andarist",
        "comment_body": "This error change comes from the fact that I fill the slice of the target type with undefineds here (when it's shorter than the source's slice):\r\nhttps://github.dev/microsoft/TypeScript/blob/6c5383d701417e8a98398b4171af0f201ee593c5/src/compiler/checker.ts#L19394-L19402\r\n\r\nI think this is a good change. This will allow more patterns to be assignable, especially with target signatures using unions of tuples for their rest parameter. After all, the implementation is free to ignore any of the provided arguments etc. This is also already just fine in TS:\r\n```ts\r\ndeclare let f1: (a: string) => void\r\ndeclare let f2: (a: string, b: number) => void\r\n\r\nf2 = f1\r\n```\r\n\r\nAnd since this is OK I think that this one should be too:\r\n```ts\r\ndeclare let f1: (x: string, ...args: [string] | [number, boolean]) => void;\r\n\r\n// Type '(a: string, b: string | number, c: boolean | undefined) => void' is not assignable to type '(x: string, ...args: [string] | [number, boolean]) => void'.\r\n//   Types of parameters 'b' and 'args' are incompatible.\r\n//     Type '[string] | [number, boolean]' is not assignable to type '[b: string | number, c: boolean | undefined]'.\r\n//       Type '[string]' is not assignable to type '[b: string | number, c: boolean | undefined]'.\r\n//         Source has 1 element(s) but target requires 2.\r\nf1 = (a, b, c) => {}\r\n```\r\n\r\nSo with this change that caused this particular error here to be reported differently we now allow the example above and I added a test case for it:\r\nhttps://github.com/microsoft/TypeScript/blob/46f2e57d76f26b74f596f2acb5d04a30572f13a7/tests/cases/compiler/restTupleUnionWithRestContextualParams.ts#L6",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "819996430",
    "pr_number": 46265,
    "pr_file": "tests/baselines/reference/tupleIntersectionArity.errors.txt",
    "created_at": "2022-03-05T00:24:11+00:00",
    "commented_code": "+tests/cases/conformance/types/rest/tupleIntersectionArity.ts(6,4): error TS2556: A spread argument must either have a tuple type or be passed to a rest parameter.\r\n+\r\n+\r\n+==== tests/cases/conformance/types/rest/tupleIntersectionArity.ts (1 errors) ====\r\n+    declare const tuple1: [number, number, number] & { _nominal_a: never };\r\n+    declare const tuple2: [number, number, number] & [string, string, string];\r\n+    \r\n+    declare const f1: (...params: [number, number, number]) => void;\r\n+    f1(...tuple1);\r\n+    f1(...tuple2); // Error",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "819996430",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 46265,
        "pr_file": "tests/baselines/reference/tupleIntersectionArity.errors.txt",
        "discussion_id": "819996430",
        "commented_code": "@@ -0,0 +1,14 @@\n+tests/cases/conformance/types/rest/tupleIntersectionArity.ts(6,4): error TS2556: A spread argument must either have a tuple type or be passed to a rest parameter.\r\n+\r\n+\r\n+==== tests/cases/conformance/types/rest/tupleIntersectionArity.ts (1 errors) ====\r\n+    declare const tuple1: [number, number, number] & { _nominal_a: never };\r\n+    declare const tuple2: [number, number, number] & [string, string, string];\r\n+    \r\n+    declare const f1: (...params: [number, number, number]) => void;\r\n+    f1(...tuple1);\r\n+    f1(...tuple2); // Error\r",
        "comment_created_at": "2022-03-05T00:24:11+00:00",
        "comment_author": "weswigham",
        "comment_body": "Hum, an intersection of two tuples is largely nonsensical when they're differing lengths (after all, the conflicting `length` properties intersect to `never`), however when they're the same length like this I think I'd actually prefer to see this work - it's effectively the same as the tuple where each position is an intersection of the input tuple's types at those positions.\r\nLike if I have a `[{x: 1}]` and a `[{y: 0}]`, a `[{x: 1, y: 0}]` pretty handily satisfies both. This does extend a bit to tuples with rests, where tuples like `[{x: 1}]` and `[...{y: 0}[]]` also safely combines to `[{x: 1, y: 0}]` since there are shared possible lengths between the tuples.",
        "pr_file_module": null
      },
      {
        "comment_id": "835700494",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 46265,
        "pr_file": "tests/baselines/reference/tupleIntersectionArity.errors.txt",
        "discussion_id": "819996430",
        "commented_code": "@@ -0,0 +1,14 @@\n+tests/cases/conformance/types/rest/tupleIntersectionArity.ts(6,4): error TS2556: A spread argument must either have a tuple type or be passed to a rest parameter.\r\n+\r\n+\r\n+==== tests/cases/conformance/types/rest/tupleIntersectionArity.ts (1 errors) ====\r\n+    declare const tuple1: [number, number, number] & { _nominal_a: never };\r\n+    declare const tuple2: [number, number, number] & [string, string, string];\r\n+    \r\n+    declare const f1: (...params: [number, number, number]) => void;\r\n+    f1(...tuple1);\r\n+    f1(...tuple2); // Error\r",
        "comment_created_at": "2022-03-26T02:33:33+00:00",
        "comment_author": "Fireboltofdeath",
        "comment_body": "All of that sounds good to me!\r\n\r\nI do have one concern though which is that my PR currently only handles this when checking call expression arity (which is what the linked issue refers to), not when doing type-level/array spread which would still not spread properly as a tuple.\r\n\r\nI'm not sure if changing that is in-scope for this PR or not but it might be weird to not support it everywhere.",
        "pr_file_module": null
      },
      {
        "comment_id": "840988490",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 46265,
        "pr_file": "tests/baselines/reference/tupleIntersectionArity.errors.txt",
        "discussion_id": "819996430",
        "commented_code": "@@ -0,0 +1,14 @@\n+tests/cases/conformance/types/rest/tupleIntersectionArity.ts(6,4): error TS2556: A spread argument must either have a tuple type or be passed to a rest parameter.\r\n+\r\n+\r\n+==== tests/cases/conformance/types/rest/tupleIntersectionArity.ts (1 errors) ====\r\n+    declare const tuple1: [number, number, number] & { _nominal_a: never };\r\n+    declare const tuple2: [number, number, number] & [string, string, string];\r\n+    \r\n+    declare const f1: (...params: [number, number, number]) => void;\r\n+    f1(...tuple1);\r\n+    f1(...tuple2); // Error\r",
        "comment_created_at": "2022-04-02T01:24:54+00:00",
        "comment_author": "Fireboltofdeath",
        "comment_body": "I've made the requested changes.\r\n\r\nI'm not sure if you wanted tuples like `[{ x: string }, { y: string }] & [{ x: string }, ...{ z: string }[]]` to include a rest type at the end but that's what I've done as it makes the most sense to me though I'd like confirmation on that.\r\n\r\nNumeric indexers (like `Array<T>` or `[...T[]]`) won't apply a rest argument but again I'd like confirmation on whether that is the correct behavior.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1177629209",
    "pr_number": 54029,
    "pr_file": "tests/baselines/reference/intraExpressionInferencesReverseMappedTypes.errors.txt",
    "created_at": "2023-04-26T09:46:26+00:00",
    "commented_code": "+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(67,21): error TS18046: 'x' is of type 'unknown'.\r\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(71,21): error TS18046: 'x' is of type 'unknown'.\r\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(80,21): error TS18046: 'x' is of type 'unknown'.\r\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(86,21): error TS18046: 'x' is of type 'unknown'.\r\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(95,21): error TS18046: 'x' is of type 'unknown'.\r\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(101,21): error TS18046: 'x' is of type 'unknown'.",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "1177629209",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 54029,
        "pr_file": "tests/baselines/reference/intraExpressionInferencesReverseMappedTypes.errors.txt",
        "discussion_id": "1177629209",
        "commented_code": "@@ -0,0 +1,148 @@\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(67,21): error TS18046: 'x' is of type 'unknown'.\r\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(71,21): error TS18046: 'x' is of type 'unknown'.\r\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(80,21): error TS18046: 'x' is of type 'unknown'.\r\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(86,21): error TS18046: 'x' is of type 'unknown'.\r\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(95,21): error TS18046: 'x' is of type 'unknown'.\r\n+tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesReverseMappedTypes.ts(101,21): error TS18046: 'x' is of type 'unknown'.\r",
        "comment_created_at": "2023-04-26T09:46:26+00:00",
        "comment_author": "Andarist",
        "comment_body": "All of those relate to the tuple-based tests that I added and those are **not** expected. \r\n\r\nIt doesn't work because in tuples both `T` and `T[K]` are **not** reverse mapped symbols/types and thus the `inferReverseMappedType` isn't called from within `checkExpressionWithContextualType` (and only within that call `intraExpressionInferenceSites` and \"pushed inference contexts\" are available).\r\n\r\nWith objects `createReverseMappedType` only creates a `ReverseMapped` type and doesn't do much else. `inferReverseMappedType` gets called for properties later from `getTypeOfReverseMappedSymbol`). However, with tuples it calls `inferReverseMappedType` eagerly:\r\nhttps://github.dev/microsoft/TypeScript/blob/eb014a26522dd809ae4d0e85634a62eabda2755a/src/compiler/checker.ts#L24090-L24101\r\n\r\nI could try to fix this in this PR but I also feel like this would require changes that could be moved to a separate followup PR. This PR could focus on the base mechanism for this improvement and on object-based cases.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1797706885",
    "pr_number": 60208,
    "pr_file": "tests/baselines/reference/mixinWithBaseDependingOnSelfNoCrash1.errors.txt",
    "created_at": "2024-10-12T14:02:25+00:00",
    "commented_code": "+mixinWithBaseDependingOnSelfNoCrash1.ts(11,48): error TS2345: Argument of type 'typeof BaseItem' is not assignable to parameter of type 'new (...args: any[]) => any'.\r\n+  Type 'typeof BaseItem' provides no match for the signature 'new (...args: any[]): any'.\r\n+\r\n+\r\n+==== mixinWithBaseDependingOnSelfNoCrash1.ts (1 errors) ====\r\n+    // https://github.com/microsoft/TypeScript/issues/60202\r\n+    \r\n+    declare class Document<Parent> {}\r\n+    \r\n+    declare class BaseItem extends Document<typeof Item> {}\r\n+    \r\n+    declare function ClientDocumentMixin<\r\n+      BaseClass extends new (...args: any[]) => any,\r\n+    >(Base: BaseClass): any;\r\n+    \r\n+    declare class Item extends ClientDocumentMixin(BaseItem) {}",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "1797706885",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 60208,
        "pr_file": "tests/baselines/reference/mixinWithBaseDependingOnSelfNoCrash1.errors.txt",
        "discussion_id": "1797706885",
        "commented_code": "@@ -0,0 +1,22 @@\n+mixinWithBaseDependingOnSelfNoCrash1.ts(11,48): error TS2345: Argument of type 'typeof BaseItem' is not assignable to parameter of type 'new (...args: any[]) => any'.\r\n+  Type 'typeof BaseItem' provides no match for the signature 'new (...args: any[]): any'.\r\n+\r\n+\r\n+==== mixinWithBaseDependingOnSelfNoCrash1.ts (1 errors) ====\r\n+    // https://github.com/microsoft/TypeScript/issues/60202\r\n+    \r\n+    declare class Document<Parent> {}\r\n+    \r\n+    declare class BaseItem extends Document<typeof Item> {}\r\n+    \r\n+    declare function ClientDocumentMixin<\r\n+      BaseClass extends new (...args: any[]) => any,\r\n+    >(Base: BaseClass): any;\r\n+    \r\n+    declare class Item extends ClientDocumentMixin(BaseItem) {}\r",
        "comment_created_at": "2024-10-12T14:02:25+00:00",
        "comment_author": "Andarist",
        "comment_body": "due to the circular nature of this example, the compiler goes into `resolveCall` for the same node **twice** in a nested manner\r\n\r\n1. the first `getResolvedSignature` ends up calling `resolveAnonymousTypeMembers` for `typeof BaseItem`\r\n2. in the process it preemptively sets empty signatures, members, index infos on that type [here](https://github.dev/microsoft/TypeScript/blob/c003609d59db75974796cec737c98f6c8e603bd6/src/compiler/checker.ts#L13911)\r\n3. but then it also computes real construct signatures [here](https://github.dev/microsoft/TypeScript/blob/c003609d59db75974796cec737c98f6c8e603bd6/src/compiler/checker.ts#L13963-L13965)\r\n4. this in turn leads to calling `getResolvedSignature` *again* for the same node and all\r\n5. in that inner call we see no construct signatures on `typeof BaseItem` (those were set to an empty array) so the error is raised because `signaturesRelatedTo` fails to determine that this source (`typeof BaseItem`) has the required target signatures\r\n6. this inner call errors and exits, caching the `getCandidateForOverloadFailure`'s result as the `links.resolvedSignature`. That signature is `(Base: new (...args: any[]) => any): any`\r\n7. this leads to resolving `(): BaseItem` as `getDefaultConstructSignatures` and that **replaces** the empty construct signatures preemptively set by `resolveAnonymousTypeMembers`\r\n8. now we climb up the stack, going back to the first/outer `getResolvedSignature` call for this. When calling `getSignatureApplicabilityError` the compiler returns an error because it reuses cached `RelationComparisonResult.Failed` that was cached when relating the argument and parameter types in that inner call\r\n9. so now the compiler computes `getCandidateForOverloadFailure` again and tries to elaborate this error (again!).\r\n10. this time it succeeds when relating those 2 types because the construct signatures of `typeof BaseItem` changed \"in-between\". So the debug assert kicks finally kicks in and the compiler crashes",
        "pr_file_module": null
      },
      {
        "comment_id": "1797771684",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 60208,
        "pr_file": "tests/baselines/reference/mixinWithBaseDependingOnSelfNoCrash1.errors.txt",
        "discussion_id": "1797706885",
        "commented_code": "@@ -0,0 +1,22 @@\n+mixinWithBaseDependingOnSelfNoCrash1.ts(11,48): error TS2345: Argument of type 'typeof BaseItem' is not assignable to parameter of type 'new (...args: any[]) => any'.\r\n+  Type 'typeof BaseItem' provides no match for the signature 'new (...args: any[]): any'.\r\n+\r\n+\r\n+==== mixinWithBaseDependingOnSelfNoCrash1.ts (1 errors) ====\r\n+    // https://github.com/microsoft/TypeScript/issues/60202\r\n+    \r\n+    declare class Document<Parent> {}\r\n+    \r\n+    declare class BaseItem extends Document<typeof Item> {}\r\n+    \r\n+    declare function ClientDocumentMixin<\r\n+      BaseClass extends new (...args: any[]) => any,\r\n+    >(Base: BaseClass): any;\r\n+    \r\n+    declare class Item extends ClientDocumentMixin(BaseItem) {}\r",
        "comment_created_at": "2024-10-12T20:22:14+00:00",
        "comment_author": "LukeAbby",
        "comment_body": "Thanks a ton for this PR and the explanation! It makes the crash make much more sense to me now.\r\n\r\nI will say some of these steps still seem to have a bit of concerning logic and seem to help explain something else weird I noted on my issue, namely that there doesn't have to be a \"real\" loop in the base type for you to get an error like `Argument of type 'typeof BaseItem' is not assignable to parameter of type 'new (...args: any[]) => any'.`\r\n\r\n[Playground](https://www.typescriptlang.org/play/?#code/KYDwDg9gTgLgBAbwL4G4BQaAmwDGAbAQymDnwIGdy4ARCHAVwFtgA7GAHgAUjWYA+REgwwAnmBIBhCC0wBLGLOkE8ACWB5xUdgBUxJUDFaYqnKBE2iA0sBECAvIjgBJQ4wBccUeIgAzZ67gkOAMjKgQ4AG1LOFkWOF1xAF0PWJ9gKDgANWV6EiCAfjgWYAA3dLgPYrKodCxcQmJSQko4ACEKYBdgRmCQQxkqWgZmNnYpGXlFFmU1DXT2ACIAQRwYaAW+AWQMbDJGn3oWVam4CTxZXiGmXgBZWRBY9nbyYDOKKhCBouAAdzgACgAdMCiABzcgeAgsEQRRIASjgdgEUNs-2ewA86LelDhkOhtV2DRIZBaXR6n2Mp3Olzo1zYdweLDRHTJCO2QA) (make sure to make any edit to overcome the crash and view an error!)",
        "pr_file_module": null
      },
      {
        "comment_id": "1798528402",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 60208,
        "pr_file": "tests/baselines/reference/mixinWithBaseDependingOnSelfNoCrash1.errors.txt",
        "discussion_id": "1797706885",
        "commented_code": "@@ -0,0 +1,22 @@\n+mixinWithBaseDependingOnSelfNoCrash1.ts(11,48): error TS2345: Argument of type 'typeof BaseItem' is not assignable to parameter of type 'new (...args: any[]) => any'.\r\n+  Type 'typeof BaseItem' provides no match for the signature 'new (...args: any[]): any'.\r\n+\r\n+\r\n+==== mixinWithBaseDependingOnSelfNoCrash1.ts (1 errors) ====\r\n+    // https://github.com/microsoft/TypeScript/issues/60202\r\n+    \r\n+    declare class Document<Parent> {}\r\n+    \r\n+    declare class BaseItem extends Document<typeof Item> {}\r\n+    \r\n+    declare function ClientDocumentMixin<\r\n+      BaseClass extends new (...args: any[]) => any,\r\n+    >(Base: BaseClass): any;\r\n+    \r\n+    declare class Item extends ClientDocumentMixin(BaseItem) {}\r",
        "comment_created_at": "2024-10-13T19:45:48+00:00",
        "comment_author": "Andarist",
        "comment_body": "tbh your example is somewhat convoluted to the point that I'm not sure if it should error or not. It's definitely outside of the \"regular TS\" territory 😅 so all I was after here was to fix the crash. Once this gets fixed you might want to raise a new issue about the circularity issue if you thing it shouldn't be reported",
        "pr_file_module": null
      }
    ]
  }
]