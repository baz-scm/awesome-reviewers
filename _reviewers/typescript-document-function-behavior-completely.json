[
  {
    "discussion_id": "1919333439",
    "pr_number": 60757,
    "pr_file": "src/compiler/types.ts",
    "created_at": "2025-01-16T22:42:32+00:00",
    "commented_code": "export interface ImportClause extends NamedDeclaration {\r\n     readonly kind: SyntaxKind.ImportClause;\r\n     readonly parent: ImportDeclaration | JSDocImportTag;\r\n-    readonly isTypeOnly: boolean;\r\n+    /** @deprecated */ readonly isTypeOnly: boolean;",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "1919333439",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 60757,
        "pr_file": "src/compiler/types.ts",
        "discussion_id": "1919333439",
        "commented_code": "@@ -3711,11 +3718,14 @@ export type NamedExportBindings =\n export interface ImportClause extends NamedDeclaration {\r\n     readonly kind: SyntaxKind.ImportClause;\r\n     readonly parent: ImportDeclaration | JSDocImportTag;\r\n-    readonly isTypeOnly: boolean;\r\n+    /** @deprecated */ readonly isTypeOnly: boolean;\r",
        "comment_created_at": "2025-01-16T22:42:32+00:00",
        "comment_author": "rbuckton",
        "comment_body": "```suggestion\r\n    /** @deprecated Use `phaseModifier` instead. */\r\n    readonly isTypeOnly: boolean;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2067083105",
    "pr_number": 61596,
    "pr_file": "src/lib/es5.d.ts",
    "created_at": "2025-04-29T18:10:12+00:00",
    "commented_code": "* @param text A valid JSON string.\r\n      * @param reviver A function that transforms the results. This function is called for each member of the object.\r\n      * If a member contains nested objects, the nested objects are transformed before the parent object is.\r\n+     * @throws {SyntaxError} If `text` is not valid JSON.\r\n      */\r\n     parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;\r\n     /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer A function that transforms the results.\r\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n+     * @throws {TypeError} If a circular reference is found or a BigInt value is encountered.",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2067083105",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61596,
        "pr_file": "src/lib/es5.d.ts",
        "discussion_id": "2067083105",
        "commented_code": "@@ -1140,20 +1140,23 @@ interface JSON {\n      * @param text A valid JSON string.\r\n      * @param reviver A function that transforms the results. This function is called for each member of the object.\r\n      * If a member contains nested objects, the nested objects are transformed before the parent object is.\r\n+     * @throws {SyntaxError} If `text` is not valid JSON.\r\n      */\r\n     parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;\r\n     /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer A function that transforms the results.\r\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n+     * @throws {TypeError} If a circular reference is found or a BigInt value is encountered.\r",
        "comment_created_at": "2025-04-29T18:10:12+00:00",
        "comment_author": "sandersn",
        "comment_body": "What do you think about this wording?\r\n```suggestion\r\n     * @throws {TypeError} If a circular reference or a BigInt value is found.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2069771936",
    "pr_number": 61636,
    "pr_file": "src/compiler/binder.ts",
    "created_at": "2025-05-01T02:13:54+00:00",
    "commented_code": "let excludes = SymbolFlags.None;\r\n         // Method-like\r\n         if (isFunctionLikeDeclaration(getAssignedExpandoInitializer(declaration)!)) {\r\n-            includes = SymbolFlags.Method;\r\n-            excludes = SymbolFlags.MethodExcludes;\r\n+            if (isPrototypeProperty) {\r\n+                includes = SymbolFlags.Method;\r\n+                excludes = SymbolFlags.MethodExcludes;\r\n+            }\r\n+            else {\r\n+                includes = SymbolFlags.Method | SymbolFlags.Property;\r\n+                excludes = SymbolFlags.PropertyExcludes;\r\n+            }\r\n         }",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2072189225",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61636,
        "pr_file": "src/compiler/binder.ts",
        "discussion_id": "2069771936",
        "commented_code": "@@ -3491,8 +3491,14 @@ function createBinder(): (file: SourceFile, options: CompilerOptions) => void {\n         let excludes = SymbolFlags.None;\r\n         // Method-like\r\n         if (isFunctionLikeDeclaration(getAssignedExpandoInitializer(declaration)!)) {\r\n-            includes = SymbolFlags.Method;\r\n-            excludes = SymbolFlags.MethodExcludes;\r\n+            if (isPrototypeProperty) {\r\n+                includes = SymbolFlags.Method;\r\n+                excludes = SymbolFlags.MethodExcludes;\r\n+            }\r\n+            else {\r\n+                includes = SymbolFlags.Method | SymbolFlags.Property;\r\n+                excludes = SymbolFlags.PropertyExcludes;\r\n+            }\r\n         }\r",
        "comment_created_at": "2025-05-02T21:57:30+00:00",
        "comment_author": "sandersn",
        "comment_body": "Copilot, we are waaaaaaay past any kind of intent being clear to *anybody* in this code.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1387257283",
    "pr_number": 48889,
    "pr_file": "src/compiler/tsbuildPublic.ts",
    "created_at": "2023-11-08T22:14:26+00:00",
    "commented_code": ");\r\n     }\r\n \r\n+    function getPackageJsonsFromConfig(state: SolutionBuilderState, resolved: ResolvedConfigFileName, parsed: ParsedCommandLine): string[] {\r\n+        const result: string[] = [getPackageJsonPathFromConfig(state, resolved)];\r\n+        parsed.projectReferences?.forEach(ref => result.push(getPackageJsonPathFromConfig(state, resolveProjectName(state, ref.path))));\r\n+        return result;\r\n+    }\r\n+\r\n+    function getPackageJsonPathFromConfig(state: SolutionBuilderState, resolved: ResolvedConfigFileName) {\r\n+        const { resolvedPackageJsonPaths } = state;\r\n+        const path = resolvedPackageJsonPaths.get(resolved);\r\n+        if (path !== undefined) return path;\r\n+\r\n+        const packageJsonPath = combinePaths(getDirectoryPath(resolved), \"package.json\");\r\n+        resolvedPackageJsonPaths.set(resolved, packageJsonPath);\r\n+        return packageJsonPath;\r\n+    }\r\n+\r\n     function watchPackageJsonFiles(state: SolutionBuilderState, resolved: ResolvedConfigFileName, resolvedPath: ResolvedConfigFilePath, parsed: ParsedCommandLine) {",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "1387257283",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 48889,
        "pr_file": "src/compiler/tsbuildPublic.ts",
        "discussion_id": "1387257283",
        "commented_code": "@@ -2164,23 +2167,44 @@ namespace ts {\n         );\r\n     }\r\n \r\n+    function getPackageJsonsFromConfig(state: SolutionBuilderState, resolved: ResolvedConfigFileName, parsed: ParsedCommandLine): string[] {\r\n+        const result: string[] = [getPackageJsonPathFromConfig(state, resolved)];\r\n+        parsed.projectReferences?.forEach(ref => result.push(getPackageJsonPathFromConfig(state, resolveProjectName(state, ref.path))));\r\n+        return result;\r\n+    }\r\n+\r\n+    function getPackageJsonPathFromConfig(state: SolutionBuilderState, resolved: ResolvedConfigFileName) {\r\n+        const { resolvedPackageJsonPaths } = state;\r\n+        const path = resolvedPackageJsonPaths.get(resolved);\r\n+        if (path !== undefined) return path;\r\n+\r\n+        const packageJsonPath = combinePaths(getDirectoryPath(resolved), \"package.json\");\r\n+        resolvedPackageJsonPaths.set(resolved, packageJsonPath);\r\n+        return packageJsonPath;\r\n+    }\r\n+\r\n     function watchPackageJsonFiles(state: SolutionBuilderState, resolved: ResolvedConfigFileName, resolvedPath: ResolvedConfigFilePath, parsed: ParsedCommandLine) {\r",
        "comment_created_at": "2023-11-08T22:14:26+00:00",
        "comment_author": "Mifrill",
        "comment_body": "Could you please specify the return type for this function?",
        "pr_file_module": null
      }
    ]
  }
]