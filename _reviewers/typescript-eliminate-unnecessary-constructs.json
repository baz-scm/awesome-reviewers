[
  {
    "discussion_id": "2167579173",
    "pr_number": 61934,
    "pr_file": "tests/baselines/reference/awaitUsingDeclarationsInForAwaitOf(target=es2015).js",
    "created_at": "2025-06-25T20:33:58+00:00",
    "commented_code": "const env_1 = { stack: [], error: void 0, hasError: false };\r\n                 try {\r\n                     const d1 = __addDisposableResource(env_1, d1_1, true);\r\n+                    {",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2167579173",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61934,
        "pr_file": "tests/baselines/reference/awaitUsingDeclarationsInForAwaitOf(target=es2015).js",
        "discussion_id": "2167579173",
        "commented_code": "@@ -88,6 +88,8 @@ function main() {\n                 const env_1 = { stack: [], error: void 0, hasError: false };\r\n                 try {\r\n                     const d1 = __addDisposableResource(env_1, d1_1, true);\r\n+                    {\r",
        "comment_created_at": "2025-06-25T20:33:58+00:00",
        "comment_author": "weswigham",
        "comment_body": "If the existing block is empty, we shouldn't bother adding a new, empty block.",
        "pr_file_module": null
      },
      {
        "comment_id": "2167603678",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61934,
        "pr_file": "tests/baselines/reference/awaitUsingDeclarationsInForAwaitOf(target=es2015).js",
        "discussion_id": "2167579173",
        "commented_code": "@@ -88,6 +88,8 @@ function main() {\n                 const env_1 = { stack: [], error: void 0, hasError: false };\r\n                 try {\r\n                     const d1 = __addDisposableResource(env_1, d1_1, true);\r\n+                    {\r",
        "comment_created_at": "2025-06-25T20:46:35+00:00",
        "comment_author": "Copilot",
        "comment_body": "Fixed in commit 0b3bf33. The implementation now checks if the loop body is empty and skips adding the extra wrapping block in those cases. Empty using for-of loops no longer generate redundant empty blocks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167620966",
    "pr_number": 61934,
    "pr_file": "tests/baselines/reference/awaitUsingDeclarationsInForAwaitOf.3(target=es5).js",
    "created_at": "2025-06-25T20:58:06+00:00",
    "commented_code": "var env_1 = { stack: [], error: void 0, hasError: false };\r\n         try {\r\n             var _e = __addDisposableResource(env_1, _e_1, true);\r\n-            ;\r\n+            {\r\n+                ;",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2167620966",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61934,
        "pr_file": "tests/baselines/reference/awaitUsingDeclarationsInForAwaitOf.3(target=es5).js",
        "discussion_id": "2167620966",
        "commented_code": "@@ -118,7 +118,9 @@ try {\n         var env_1 = { stack: [], error: void 0, hasError: false };\r\n         try {\r\n             var _e = __addDisposableResource(env_1, _e_1, true);\r\n-            ;\r\n+            {\r\n+                ;\r",
        "comment_created_at": "2025-06-25T20:58:06+00:00",
        "comment_author": "weswigham",
        "comment_body": "We should consider a block with just an empty statement the same as an empty block and avoid emitting the new block.",
        "pr_file_module": null
      },
      {
        "comment_id": "2167639344",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61934,
        "pr_file": "tests/baselines/reference/awaitUsingDeclarationsInForAwaitOf.3(target=es5).js",
        "discussion_id": "2167620966",
        "commented_code": "@@ -118,7 +118,9 @@ try {\n         var env_1 = { stack: [], error: void 0, hasError: false };\r\n         try {\r\n             var _e = __addDisposableResource(env_1, _e_1, true);\r\n-            ;\r\n+            {\r\n+                ;\r",
        "comment_created_at": "2025-06-25T21:09:20+00:00",
        "comment_author": "Copilot",
        "comment_body": "Fixed in commit 957cf793. The implementation now considers blocks containing only empty statements as effectively empty and avoids generating the extra wrapping block in those cases.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1384017141",
    "pr_number": 46293,
    "pr_file": "tests/baselines/reference/checkDashedJsxAttributes.js",
    "created_at": "2023-11-06T21:30:09+00:00",
    "commented_code": "+//// [checkDashedJsxAttributes.tsx]\r\n+/// <reference path=\"/.lib/react16.d.ts\" />\n+\n+// Repro from #44797\n+\n+import * as React from \"react\";\n+\n+interface Props {\n+    foo: string;\n+    bar: number;\n+    [dataProp: `data-${string}`]: string;\n+}\n+\n+function Yadda(props: Props) {\n+    return <div />;\n+}\n+\n+let props: Props = {\n+    foo: \"\",\n+    bar: 0,\n+    \"data-yadda\": 42,\n+};\n+\n+let x1 = <Yadda foo=\"hello\" bar={42} data-yadda={42} />;\n+\n+\n+\n+let propsObj1: Props = {\n+    foo: \"\",\n+    bar: 0,\n+    \"data-yadda\": 42,\n+};\n+\n+// Should error on data-yadda\n+let x2 = <Yadda foo=\"hello\" bar={42} data-yadda={42} />;\n+\n+/////////\n+\n+let propsObj2 = {\n+    foo: \"\",\n+    bar: 0,\n+    \"data-yadda\": 42,\n+};\n+\n+// Should error on data-yadda\n+let y = <Yadda {...propsObj2} />\n+\n+propsObj1 = propsObj2;\r\n+\r\n+//// [checkDashedJsxAttributes.js]\r\n+\"use strict\";\r\n+/// <reference path=\"react16.d.ts\" />\r\n+var __assign = (this && this.__assign) || function () {\r\n+    __assign = Object.assign || function(t) {\r\n+        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n+            s = arguments[i];\r\n+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n+                t[p] = s[p];\r\n+        }\r\n+        return t;",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "1384017141",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 46293,
        "pr_file": "tests/baselines/reference/checkDashedJsxAttributes.js",
        "discussion_id": "1384017141",
        "commented_code": "@@ -0,0 +1,91 @@\n+//// [checkDashedJsxAttributes.tsx]\r\n+/// <reference path=\"/.lib/react16.d.ts\" />\n+\n+// Repro from #44797\n+\n+import * as React from \"react\";\n+\n+interface Props {\n+    foo: string;\n+    bar: number;\n+    [dataProp: `data-${string}`]: string;\n+}\n+\n+function Yadda(props: Props) {\n+    return <div />;\n+}\n+\n+let props: Props = {\n+    foo: \"\",\n+    bar: 0,\n+    \"data-yadda\": 42,\n+};\n+\n+let x1 = <Yadda foo=\"hello\" bar={42} data-yadda={42} />;\n+\n+\n+\n+let propsObj1: Props = {\n+    foo: \"\",\n+    bar: 0,\n+    \"data-yadda\": 42,\n+};\n+\n+// Should error on data-yadda\n+let x2 = <Yadda foo=\"hello\" bar={42} data-yadda={42} />;\n+\n+/////////\n+\n+let propsObj2 = {\n+    foo: \"\",\n+    bar: 0,\n+    \"data-yadda\": 42,\n+};\n+\n+// Should error on data-yadda\n+let y = <Yadda {...propsObj2} />\n+\n+propsObj1 = propsObj2;\r\n+\r\n+//// [checkDashedJsxAttributes.js]\r\n+\"use strict\";\r\n+/// <reference path=\"react16.d.ts\" />\r\n+var __assign = (this && this.__assign) || function () {\r\n+    __assign = Object.assign || function(t) {\r\n+        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n+            s = arguments[i];\r\n+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n+                t[p] = s[p];\r\n+        }\r\n+        return t;\r",
        "comment_created_at": "2023-11-06T21:30:09+00:00",
        "comment_author": "Mifrill",
        "comment_body": "\u2699\ufe0f (optional) If you want to make the code slightly more concise, you can remove some of the unnecessary variables:\r\n```suggestion\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            var source = arguments[i];\r\n            for (var key in source) {\r\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n```\r\nThis version has the same functionality but with fewer variables. It's a matter of style preference, and both versions are valid.",
        "pr_file_module": null
      }
    ]
  }
]