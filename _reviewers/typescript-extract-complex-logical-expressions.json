[
  {
    "discussion_id": "1020598552",
    "pr_number": 50996,
    "pr_file": "tests/cases/fourslash/fullCaseCompletions1.ts",
    "created_at": "2022-11-11T22:45:18+00:00",
    "commented_code": "+/// <reference path=\"fourslash.ts\" />\r\n+\r\n+// Basic tests\r\n+\r\n+// @newline: LF\r\n+//// enum E {\r\n+////     A = 0,\r\n+////     B = \"B\",\r\n+////     C = \"C\",\r\n+//// }\r\n+//// // Mixed union\r\n+//// declare const u: E.A | E.B | 1;\r\n+//// switch (u) {\r\n+////     case/*1*/\r\n+//// }\r\n+//// // Union enum\r\n+//// declare const e: E;\r\n+//// switch (e) {\r\n+////     case/*2*/\r\n+//// }\r\n+//// enum F {\r\n+////     D = 1 << 0,\r\n+////     E = 1 << 1,\r\n+////     F = 1 << 2,\r\n+//// }\r\n+////\r\n+//// declare const f: F;\r\n+//// switch (f) {\r\n+////     case/*3*/\r\n+//// }\r\n+\r\n+verify.completions(\r\n+    {\r\n+        marker: \"1\",\r\n+        isNewIdentifierLocation: false,\r\n+        includes: [\r\n+            {\r\n+                name: \"case E.A: ...\",\r\n+                source: completion.CompletionSource.SwitchCases,\r\n+                sortText: completion.SortText.GlobalsOrKeywords,\r\n+                insertText:\r\n+`case E.A:\r\n+case E.B:\r\n+case 1:`,",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "1020598552",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 50996,
        "pr_file": "tests/cases/fourslash/fullCaseCompletions1.ts",
        "discussion_id": "1020598552",
        "commented_code": "@@ -0,0 +1,87 @@\n+/// <reference path=\"fourslash.ts\" />\r\n+\r\n+// Basic tests\r\n+\r\n+// @newline: LF\r\n+//// enum E {\r\n+////     A = 0,\r\n+////     B = \"B\",\r\n+////     C = \"C\",\r\n+//// }\r\n+//// // Mixed union\r\n+//// declare const u: E.A | E.B | 1;\r\n+//// switch (u) {\r\n+////     case/*1*/\r\n+//// }\r\n+//// // Union enum\r\n+//// declare const e: E;\r\n+//// switch (e) {\r\n+////     case/*2*/\r\n+//// }\r\n+//// enum F {\r\n+////     D = 1 << 0,\r\n+////     E = 1 << 1,\r\n+////     F = 1 << 2,\r\n+//// }\r\n+////\r\n+//// declare const f: F;\r\n+//// switch (f) {\r\n+////     case/*3*/\r\n+//// }\r\n+\r\n+verify.completions(\r\n+    {\r\n+        marker: \"1\",\r\n+        isNewIdentifierLocation: false,\r\n+        includes: [\r\n+            {\r\n+                name: \"case E.A: ...\",\r\n+                source: completion.CompletionSource.SwitchCases,\r\n+                sortText: completion.SortText.GlobalsOrKeywords,\r\n+                insertText:\r\n+`case E.A:\r\n+case E.B:\r\n+case 1:`,\r",
        "comment_created_at": "2022-11-11T22:45:18+00:00",
        "comment_author": "andrewbranch",
        "comment_body": "I feel like I would expect snippet tab stops after each `:`; what do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1021971181",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 50996,
        "pr_file": "tests/cases/fourslash/fullCaseCompletions1.ts",
        "discussion_id": "1020598552",
        "commented_code": "@@ -0,0 +1,87 @@\n+/// <reference path=\"fourslash.ts\" />\r\n+\r\n+// Basic tests\r\n+\r\n+// @newline: LF\r\n+//// enum E {\r\n+////     A = 0,\r\n+////     B = \"B\",\r\n+////     C = \"C\",\r\n+//// }\r\n+//// // Mixed union\r\n+//// declare const u: E.A | E.B | 1;\r\n+//// switch (u) {\r\n+////     case/*1*/\r\n+//// }\r\n+//// // Union enum\r\n+//// declare const e: E;\r\n+//// switch (e) {\r\n+////     case/*2*/\r\n+//// }\r\n+//// enum F {\r\n+////     D = 1 << 0,\r\n+////     E = 1 << 1,\r\n+////     F = 1 << 2,\r\n+//// }\r\n+////\r\n+//// declare const f: F;\r\n+//// switch (f) {\r\n+////     case/*3*/\r\n+//// }\r\n+\r\n+verify.completions(\r\n+    {\r\n+        marker: \"1\",\r\n+        isNewIdentifierLocation: false,\r\n+        includes: [\r\n+            {\r\n+                name: \"case E.A: ...\",\r\n+                source: completion.CompletionSource.SwitchCases,\r\n+                sortText: completion.SortText.GlobalsOrKeywords,\r\n+                insertText:\r\n+`case E.A:\r\n+case E.B:\r\n+case 1:`,\r",
        "comment_created_at": "2022-11-14T19:24:59+00:00",
        "comment_author": "gabritto",
        "comment_body": "I haven't considered that before. I guess I'll add this and try it out and ask others to try it to see if it's annoying or not.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136598421",
    "pr_number": 61828,
    "pr_file": "src/services/codefixes/importFixes.ts",
    "created_at": "2025-06-09T22:28:11+00:00",
    "commented_code": ");\r\n \r\n         let fix: FixAddNewImport | ImportFixWithModuleSpecifier;\r\n-        if (existingFix && importKind !== ImportKind.Namespace) {\r\n+        if (existingFix && importKind !== ImportKind.Namespace && existingFix.kind !== ImportFixKind.UseNamespace && existingFix.kind !== ImportFixKind.JsdocTypeImport) {",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2136598421",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61828,
        "pr_file": "src/services/codefixes/importFixes.ts",
        "discussion_id": "2136598421",
        "commented_code": "@@ -370,7 +370,7 @@ function createImportAdderWorker(sourceFile: SourceFile | FutureSourceFile, prog\n         );\r\n \r\n         let fix: FixAddNewImport | ImportFixWithModuleSpecifier;\r\n-        if (existingFix && importKind !== ImportKind.Namespace) {\r\n+        if (existingFix && importKind !== ImportKind.Namespace && existingFix.kind !== ImportFixKind.UseNamespace && existingFix.kind !== ImportFixKind.JsdocTypeImport) {\r",
        "comment_created_at": "2025-06-09T22:28:11+00:00",
        "comment_author": "Copilot",
        "comment_body": "[nitpick] This boolean condition is getting lengthy and complex; consider extracting the kind checks into a well-named helper function (e.g., `shouldReuseImportFix(existingFix, importKind)`) for readability.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2121655561",
    "pr_number": 61805,
    "pr_file": "src/compiler/checker.ts",
    "created_at": "2025-06-02T16:34:18+00:00",
    "commented_code": "getExternalModuleRequireArgument(node) || getExternalModuleImportEqualsDeclarationExpression(node),\r\n             );\r\n             const resolved = resolveExternalModuleSymbol(immediate);\r\n+            if (resolved && ModuleKind.Node20 <= moduleKind && moduleKind <= ModuleKind.NodeNext) {\r\n+                const moduleExports = getExportOfModule(resolved, \"module.exports\" as __String, node, dontResolveAlias);\r\n+                if (moduleExports) {\r\n+                    return moduleExports;\r\n+                }\r\n+            }",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2121655561",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61805,
        "pr_file": "src/compiler/checker.ts",
        "discussion_id": "2121655561",
        "commented_code": "@@ -3683,6 +3683,12 @@ export function createTypeChecker(host: TypeCheckerHost): TypeChecker {\n                 getExternalModuleRequireArgument(node) || getExternalModuleImportEqualsDeclarationExpression(node),\r\n             );\r\n             const resolved = resolveExternalModuleSymbol(immediate);\r\n+            if (resolved && ModuleKind.Node20 <= moduleKind && moduleKind <= ModuleKind.NodeNext) {\r\n+                const moduleExports = getExportOfModule(resolved, \"module.exports\" as __String, node, dontResolveAlias);\r\n+                if (moduleExports) {\r\n+                    return moduleExports;\r\n+                }\r\n+            }\r",
        "comment_created_at": "2025-06-02T16:34:18+00:00",
        "comment_author": "Copilot",
        "comment_body": "[nitpick] The condition 'ModuleKind.Node20 <= moduleKind && moduleKind <= ModuleKind.NodeNext' appears in multiple locations. Consider extracting this check into a helper function or named constant to improve readability and reduce duplication.\n```suggestion\n            if (resolved && isNodeModuleKind(moduleKind)) {\n                const moduleExports = getExportOfModule(resolved, \"module.exports\" as __String, node, dontResolveAlias);\n                if (moduleExports) {\n                    return moduleExports;\n                }\n            }\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2116550478",
    "pr_number": 61787,
    "pr_file": "src/compiler/checker.ts",
    "created_at": "2025-05-30T19:54:26+00:00",
    "commented_code": "if (result) {\r\n             return result;\r\n         }\r\n-        result = getCandidateForOverloadFailure(node, candidates, args, !!candidatesOutArray, checkMode);\r\n+        checkNodeDeferred(node);\r\n+        result = candidates.length === 1 && candidatesForArgumentError?.length === 1 ? candidatesForArgumentError[0] : getCandidateForOverloadFailure(node, candidates, args, !!candidatesOutArray, checkMode);",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2116550478",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61787,
        "pr_file": "src/compiler/checker.ts",
        "discussion_id": "2116550478",
        "commented_code": "@@ -36385,7 +36385,8 @@ export function createTypeChecker(host: TypeCheckerHost): TypeChecker {\n         if (result) {\r\n             return result;\r\n         }\r\n-        result = getCandidateForOverloadFailure(node, candidates, args, !!candidatesOutArray, checkMode);\r\n+        checkNodeDeferred(node);\r\n+        result = candidates.length === 1 && candidatesForArgumentError?.length === 1 ? candidatesForArgumentError[0] : getCandidateForOverloadFailure(node, candidates, args, !!candidatesOutArray, checkMode);\r",
        "comment_created_at": "2025-05-30T19:54:26+00:00",
        "comment_author": "Copilot",
        "comment_body": "[nitpick] Extract the inline condition (`candidates.length === 1 && candidatesForArgumentError?.length === 1`) into a well-named boolean (e.g., `hasSingleErroredCandidate`) before assigning to `result`, improving readability and making future logic changes clearer.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2098853319",
    "pr_number": 61739,
    "pr_file": "src/compiler/program.ts",
    "created_at": "2025-05-20T20:50:08+00:00",
    "commented_code": "function getSourceOfProjectReferenceRedirect(path: Path) {\r\n         if (!isDeclarationFileName(path)) return undefined;\r\n+        if (!hasResolvedReferencencesInNodeModules && pathContainsNodeModules(path)) return undefined;\r\n         if (mapFromToProjectReferenceRedirectSource === undefined) {",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2098853319",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61739,
        "pr_file": "src/compiler/program.ts",
        "discussion_id": "2098853319",
        "commented_code": "@@ -3823,6 +3824,7 @@ export function createProgram(_rootNamesOrOptions: readonly string[] | CreatePro\n \r\n     function getSourceOfProjectReferenceRedirect(path: Path) {\r\n         if (!isDeclarationFileName(path)) return undefined;\r\n+        if (!hasResolvedReferencencesInNodeModules && pathContainsNodeModules(path)) return undefined;\r\n         if (mapFromToProjectReferenceRedirectSource === undefined) {\r",
        "comment_created_at": "2025-05-20T20:50:08+00:00",
        "comment_author": "Copilot",
        "comment_body": "[nitpick] The `pathContainsNodeModules` check appears in multiple places. Extracting it into a well-named helper (e.g., `isInNodeModules(path)`) could reduce duplication and improve readability.\n```suggestion\n    function isInNodeModules(path: Path): boolean {\n        return pathContainsNodeModules(path);\n    }\n\n    function getSourceOfProjectReferenceRedirect(path: Path) {\n        if (!isDeclarationFileName(path)) return undefined;\n        if (!hasResolvedReferencencesInNodeModules && isInNodeModules(path)) return undefined;\n        if (mapFromToProjectReferenceRedirectSource === undefined) {\n```",
        "pr_file_module": null
      }
    ]
  }
]