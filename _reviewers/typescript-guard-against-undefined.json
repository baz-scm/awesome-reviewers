[
  {
    "discussion_id": "2217397827",
    "pr_number": 62091,
    "pr_file": "src/compiler/checker.ts",
    "created_at": "2025-07-19T18:00:35+00:00",
    "commented_code": "verbosityLevel?: number,\r\n         out?: WriterContextOut,\r\n     ): string {\r\n-        const noTruncation = compilerOptions.noErrorTruncation ||\r\n+        const noTruncation = !maximumLength && compilerOptions.noErrorTruncation ||",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2217397827",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 62091,
        "pr_file": "src/compiler/checker.ts",
        "discussion_id": "2217397827",
        "commented_code": "@@ -6156,7 +6156,7 @@ export function createTypeChecker(host: TypeCheckerHost): TypeChecker {\n         verbosityLevel?: number,\r\n         out?: WriterContextOut,\r\n     ): string {\r\n-        const noTruncation = compilerOptions.noErrorTruncation ||\r\n+        const noTruncation = !maximumLength && compilerOptions.noErrorTruncation ||\r",
        "comment_created_at": "2025-07-19T18:00:35+00:00",
        "comment_author": "Andarist",
        "comment_body": "alternatively, `compilerOptions.noErrorTruncation` could increase the `maximumLength` to its usual limit - but I think this small solution is a better way out of this",
        "pr_file_module": null
      },
      {
        "comment_id": "2217398652",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 62091,
        "pr_file": "src/compiler/checker.ts",
        "discussion_id": "2217397827",
        "commented_code": "@@ -6156,7 +6156,7 @@ export function createTypeChecker(host: TypeCheckerHost): TypeChecker {\n         verbosityLevel?: number,\r\n         out?: WriterContextOut,\r\n     ): string {\r\n-        const noTruncation = compilerOptions.noErrorTruncation ||\r\n+        const noTruncation = !maximumLength && compilerOptions.noErrorTruncation ||\r",
        "comment_created_at": "2025-07-19T18:03:48+00:00",
        "comment_author": "Andarist",
        "comment_body": "with this, the another user who reported the problem [here](https://github.com/microsoft/TypeScript/issues/62090) gets:\r\n<img width=\"1090\" height=\"592\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1df07f7a-9783-4fea-9305-3d1ab1193e98\" />\r\n\r\nand they agree it's an improvement but they still can't expand this type in VS Code - when they can expand other types",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1744355785",
    "pr_number": 59788,
    "pr_file": "src/compiler/parser.ts",
    "created_at": "2024-09-04T20:11:03+00:00",
    "commented_code": "}\r\n \r\n                     if (pos >= 0) {\r\n+                        // skip all statements in range already completely consumed by the reparsed statement\r\n+                        while (sourceFile.statements[pos].end < statement.end) {",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "1744355785",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 59788,
        "pr_file": "src/compiler/parser.ts",
        "discussion_id": "1744355785",
        "commented_code": "@@ -1891,6 +1891,10 @@ namespace Parser {\n                     }\r\n \r\n                     if (pos >= 0) {\r\n+                        // skip all statements in range already completely consumed by the reparsed statement\r\n+                        while (sourceFile.statements[pos].end < statement.end) {\r",
        "comment_created_at": "2024-09-04T20:11:03+00:00",
        "comment_author": "sandersn",
        "comment_body": "I missed this before, but this no longer checks that `pos < sourceFile.statements.length`, but it still should",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1615773913",
    "pr_number": 58669,
    "pr_file": "src/compiler/checker.ts",
    "created_at": "2024-05-27T09:27:12+00:00",
    "commented_code": "const cache = (links.accessibleChainCache ||= new Map());\r\n         // Go from enclosingDeclaration to the first scope we check, so the cache is keyed off the scope and thus shared more\r\n         const firstRelevantLocation = forEachSymbolTableInScope(enclosingDeclaration, (_, __, ___, node) => node);\r\n-        const key = `${useOnlyExternalAliasing ? 0 : 1}|${firstRelevantLocation && getNodeId(firstRelevantLocation)}|${meaning}`;\r\n+        const key = `${useOnlyExternalAliasing ? 0 : 1}|${firstRelevantLocation ? getNodeId(firstRelevantLocation) : 0}|${meaning}`;",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "1615773913",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 58669,
        "pr_file": "src/compiler/checker.ts",
        "discussion_id": "1615773913",
        "commented_code": "@@ -5473,7 +5473,7 @@ export function createTypeChecker(host: TypeCheckerHost): TypeChecker {\n         const cache = (links.accessibleChainCache ||= new Map());\r\n         // Go from enclosingDeclaration to the first scope we check, so the cache is keyed off the scope and thus shared more\r\n         const firstRelevantLocation = forEachSymbolTableInScope(enclosingDeclaration, (_, __, ___, node) => node);\r\n-        const key = `${useOnlyExternalAliasing ? 0 : 1}|${firstRelevantLocation && getNodeId(firstRelevantLocation)}|${meaning}`;\r\n+        const key = `${useOnlyExternalAliasing ? 0 : 1}|${firstRelevantLocation ? getNodeId(firstRelevantLocation) : 0}|${meaning}`;\r",
        "comment_created_at": "2024-05-27T09:27:12+00:00",
        "comment_author": "Andarist",
        "comment_body": "I noticed that those keys could look smth like `'0|undefined|788968'` (I spotted an instance of that in the debugger). It bugged me enough to create this PR ;p \r\n\r\n0 should be a safe fallback here as the lowest possible node id is 1",
        "pr_file_module": null
      }
    ]
  }
]