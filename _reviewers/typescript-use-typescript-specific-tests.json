[
  {
    "discussion_id": "2155449837",
    "pr_number": 61900,
    "pr_file": ".github/copilot-instructions.md",
    "created_at": "2025-06-18T20:36:31+00:00",
    "commented_code": "+# TypeScript Test Writing Guide for Copilot\n+\n+This document provides a concise guide for writing TypeScript fourslash tests and compiler tests, along with build instructions.\n+\n+## Build Instructions Summary\n+\n+### Setup\n+1. Install Node.js (current or LTS)\n+2. Install hereby: `npm install -g hereby`\n+3. Clone the repository: `git clone --depth=1 https://github.com/microsoft/TypeScript`\n+4. Install dependencies: `npm ci`\n+\n+### Common Build Tasks\n+```bash\n+hereby local             # Build the compiler into built/local\n+hereby clean             # Delete the built compiler  \n+hereby tests             # Build the test infrastructure\n+hereby runtests          # Run all tests\n+hereby runtests-parallel # Run tests in parallel (recommended)\n+hereby runtests --runner=fourslash # Run only fourslash tests\n+hereby runtests --runner=compiler # Run only compiler tests\n+hereby runtests --tests=<testPath> # Run specific test\n+hereby baseline-accept   # Accept new test baselines\n+hereby lint              # Run eslint\n+```\n+\n+## Fourslash Test Syntax Guide\n+\n+Fourslash tests are interactive TypeScript language service tests. They validate IDE features like completions, quick info, navigation, and refactoring.\n+\n+### Basic Structure\n+```typescript\n+/// <reference path='fourslash.ts'/>\n+\n+////code goes here with /*markers*/\n+\n+// Test assertions go here\n+```\n+\n+### Key Syntax Elements\n+\n+#### 1. Source Code Definition\n+Use `////` to define source code lines:\n+```typescript\n+////function foo(x: number) {\n+////    return x + 1;\n+////}\n+////let result = foo(/*marker*/42);\n+```\n+\n+#### 2. Markers for Positioning\n+Use `/**/` for anonymous markers or `/*name*/` for named markers:\n+```typescript\n+////let x = /*1*/someValue;\n+////let y = /*cursor*/anotherValue;\n+```\n+\n+#### 3. Multi-file Tests\n+Use `// @Filename:` to define multiple files:\n+```typescript\n+// @Filename: /a.ts\n+////export const value = 42;\n+\n+// @Filename: /b.ts  \n+////import { value } from './a';\n+////console.log(/*marker*/value);\n+```\n+\n+#### 4. Ranges\n+Use `[|text|]` to define text ranges:\n+```typescript\n+////function test() {\n+////    [|return 42;|]\n+////}\n+```\n+\n+### Common API Patterns\n+\n+#### Navigation & Positioning\n+```typescript\n+goTo.marker(\"markerName\");         // Navigate to marker\n+goTo.marker();                     // Navigate to anonymous marker /**/\n+```\n+\n+#### Verification (Prefer these over baselines)\n+```typescript\n+verify.currentLineContentIs(\"expected content\");\n+verify.completions({ includes: \"itemName\" });\n+verify.completions({ excludes: \"itemName\" });\n+verify.quickInfoIs(\"expected info\");\n+verify.codeFix({\n+    description: \"Fix description\",\n+    newFileContent: \"expected content after fix\"\n+});\n+```\n+\n+#### Completions Testing\n+```typescript\n+verify.completions({ \n+    marker: \"1\",\n+    includes: { name: \"foo\", source: \"/a\", hasAction: true },\n+    isNewIdentifierLocation: true,\n+    preferences: { includeCompletionsForModuleExports: true }\n+});\n+```\n+\n+#### Code Fixes Testing\n+```typescript\n+verify.codeFix({\n+    description: \"Add missing property\",\n+    index: 0,\n+    newFileContent: `class C {\n+    property: string;\n+    method() { this.property = \"value\"; }\n+}`\n+});\n+```\n+\n+#### Formatting\n+```typescript\n+format.document();\n+verify.currentLineContentIs(\"formatted content\");\n+```\n+\n+### Simple Example\n+```typescript\n+/// <reference path='fourslash.ts'/>\n+\n+////interface User {\n+////    name: string;\n+////}\n+////\n+////const user: User = {\n+////    /*completion*/\n+////};\n+\n+verify.completions({\n+    marker: \"completion\",\n+    includes: { name: \"name\", sortText: \"0\" }\n+});\n+```\n+\n+## Compiler Test Syntax Guide\n+\n+Compiler tests validate TypeScript compilation behavior, type checking, and error reporting.\n+\n+### Basic Structure\n+- Simple `.ts` files in `tests/cases/compiler/`\n+- Use comments to indicate expected behavior\n+- No special test harness - just TypeScript code\n+\n+### Compiler Directives\n+Use `// @directive: value` for compiler options:\n+```typescript\n+// @strict: true\n+// @target: ES2015\n+// @lib: ES2015,DOM\n+\n+let x: string = 42; // Error expected\n+```\n+\n+### Common Directives\n+```typescript\n+// @strict: true/false\n+// @noImplicitAny: true/false  \n+// @target: ES5/ES2015/ES2020/ESNext\n+// @module: commonjs/amd/es6/esnext\n+// @lib: ES5,DOM/ES2015/ES2020\n+// @declaration: true/false\n+// @skipLibCheck: true/false\n+```\n+\n+### Multi-file Tests\n+```typescript\n+// @Filename: helper.ts\n+export function helper(x: number): string {\n+    return x.toString();\n+}\n+\n+// @Filename: main.ts  \n+import { helper } from \"./helper\";\n+const result = helper(42);\n+```\n+\n+### Error Expectations\n+Use comments to document expected behavior:\n+```typescript\n+abstract class Base {\n+    abstract method(): void;\n+}\n+\n+class Derived extends Base {\n+    // Missing implementation - should error\n+}\n+\n+new Base(); // Should error - cannot instantiate abstract class\n+```\n+\n+### Type Testing Patterns\n+```typescript\n+// Test type inference\n+let inferred = [1, 2, 3]; // Should infer number[]\n+\n+// Test type compatibility  \n+type A = { x: number };\n+type B = { x: number; y: string };\n+let a: A = { x: 1 };\n+let b: B = { x: 1, y: \"hello\" };\n+a = b; // Should work - B is assignable to A\n+b = a; // Should error - A missing property y\n+```\n+\n+### Simple Example\n+```typescript\n+// Test that optional properties work correctly\n+interface Config {\n+    required: string;\n+    optional?: number;\n+}\n+\n+const config1: Config = { required: \"test\" }; // Should work\n+const config2: Config = { required: \"test\", optional: 42 }; // Should work  \n+const config3: Config = { optional: 42 }; // Should error - missing required\n+```\n+\n+## Test Writing Best Practices\n+\n+### For Fourslash Tests\n+1. **Prefer validation over baselines** - Use `verify.currentLineContentIs()` instead of `verify.baseline*()`\n+2. **Use simple, focused examples** - Test one feature at a time\n+3. **Name markers clearly** - Use descriptive marker names like `/*completion*/`\n+4. **Test the simplest form first** - Start with basic cases before complex scenarios\n+\n+### For Compiler Tests  \n+1. **Use clear file names** - Name tests after the feature being tested\n+2. **Add explanatory comments** - Document expected behavior with comments\n+3. **Test error cases** - Include both valid and invalid code examples\n+4. **Keep tests focused** - One primary feature per test file\n+\n+### General Guidelines\n+1. **Make tests deterministic** - Avoid random or environment-dependent behavior\n+2. **Use realistic examples** - Test scenarios developers actually encounter  \n+3. **Start simple** - Begin with the most basic case of a feature\n+4. **Test edge cases** - Include boundary conditions and error scenarios\n+\n+## Running Specific Tests\n+\n+```bash\n+# Run a specific fourslash test\n+hereby runtests --tests=tests/cases/fourslash/completionForObjectProperty.ts\n+\n+# Run a specific compiler test  \n+hereby runtests --tests=tests/cases/compiler/abstractClassUnionInstantiation.ts\n+\n+# Run tests matching a pattern\n+hereby runtests --tests=tests/cases/fourslash/completion*.ts\n+```\n+\n+This guide focuses on the most common and idiomatic patterns for writing TypeScript tests. For complex scenarios, refer to existing tests in the codebase for additional patterns and techniques.",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2155449837",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61900,
        "pr_file": ".github/copilot-instructions.md",
        "discussion_id": "2155449837",
        "commented_code": "@@ -0,0 +1,259 @@\n+# TypeScript Test Writing Guide for Copilot\n+\n+This document provides a concise guide for writing TypeScript fourslash tests and compiler tests, along with build instructions.\n+\n+## Build Instructions Summary\n+\n+### Setup\n+1. Install Node.js (current or LTS)\n+2. Install hereby: `npm install -g hereby`\n+3. Clone the repository: `git clone --depth=1 https://github.com/microsoft/TypeScript`\n+4. Install dependencies: `npm ci`\n+\n+### Common Build Tasks\n+```bash\n+hereby local             # Build the compiler into built/local\n+hereby clean             # Delete the built compiler  \n+hereby tests             # Build the test infrastructure\n+hereby runtests          # Run all tests\n+hereby runtests-parallel # Run tests in parallel (recommended)\n+hereby runtests --runner=fourslash # Run only fourslash tests\n+hereby runtests --runner=compiler # Run only compiler tests\n+hereby runtests --tests=<testPath> # Run specific test\n+hereby baseline-accept   # Accept new test baselines\n+hereby lint              # Run eslint\n+```\n+\n+## Fourslash Test Syntax Guide\n+\n+Fourslash tests are interactive TypeScript language service tests. They validate IDE features like completions, quick info, navigation, and refactoring.\n+\n+### Basic Structure\n+```typescript\n+/// <reference path='fourslash.ts'/>\n+\n+////code goes here with /*markers*/\n+\n+// Test assertions go here\n+```\n+\n+### Key Syntax Elements\n+\n+#### 1. Source Code Definition\n+Use `////` to define source code lines:\n+```typescript\n+////function foo(x: number) {\n+////    return x + 1;\n+////}\n+////let result = foo(/*marker*/42);\n+```\n+\n+#### 2. Markers for Positioning\n+Use `/**/` for anonymous markers or `/*name*/` for named markers:\n+```typescript\n+////let x = /*1*/someValue;\n+////let y = /*cursor*/anotherValue;\n+```\n+\n+#### 3. Multi-file Tests\n+Use `// @Filename:` to define multiple files:\n+```typescript\n+// @Filename: /a.ts\n+////export const value = 42;\n+\n+// @Filename: /b.ts  \n+////import { value } from './a';\n+////console.log(/*marker*/value);\n+```\n+\n+#### 4. Ranges\n+Use `[|text|]` to define text ranges:\n+```typescript\n+////function test() {\n+////    [|return 42;|]\n+////}\n+```\n+\n+### Common API Patterns\n+\n+#### Navigation & Positioning\n+```typescript\n+goTo.marker(\"markerName\");         // Navigate to marker\n+goTo.marker();                     // Navigate to anonymous marker /**/\n+```\n+\n+#### Verification (Prefer these over baselines)\n+```typescript\n+verify.currentLineContentIs(\"expected content\");\n+verify.completions({ includes: \"itemName\" });\n+verify.completions({ excludes: \"itemName\" });\n+verify.quickInfoIs(\"expected info\");\n+verify.codeFix({\n+    description: \"Fix description\",\n+    newFileContent: \"expected content after fix\"\n+});\n+```\n+\n+#### Completions Testing\n+```typescript\n+verify.completions({ \n+    marker: \"1\",\n+    includes: { name: \"foo\", source: \"/a\", hasAction: true },\n+    isNewIdentifierLocation: true,\n+    preferences: { includeCompletionsForModuleExports: true }\n+});\n+```\n+\n+#### Code Fixes Testing\n+```typescript\n+verify.codeFix({\n+    description: \"Add missing property\",\n+    index: 0,\n+    newFileContent: `class C {\n+    property: string;\n+    method() { this.property = \"value\"; }\n+}`\n+});\n+```\n+\n+#### Formatting\n+```typescript\n+format.document();\n+verify.currentLineContentIs(\"formatted content\");\n+```\n+\n+### Simple Example\n+```typescript\n+/// <reference path='fourslash.ts'/>\n+\n+////interface User {\n+////    name: string;\n+////}\n+////\n+////const user: User = {\n+////    /*completion*/\n+////};\n+\n+verify.completions({\n+    marker: \"completion\",\n+    includes: { name: \"name\", sortText: \"0\" }\n+});\n+```\n+\n+## Compiler Test Syntax Guide\n+\n+Compiler tests validate TypeScript compilation behavior, type checking, and error reporting.\n+\n+### Basic Structure\n+- Simple `.ts` files in `tests/cases/compiler/`\n+- Use comments to indicate expected behavior\n+- No special test harness - just TypeScript code\n+\n+### Compiler Directives\n+Use `// @directive: value` for compiler options:\n+```typescript\n+// @strict: true\n+// @target: ES2015\n+// @lib: ES2015,DOM\n+\n+let x: string = 42; // Error expected\n+```\n+\n+### Common Directives\n+```typescript\n+// @strict: true/false\n+// @noImplicitAny: true/false  \n+// @target: ES5/ES2015/ES2020/ESNext\n+// @module: commonjs/amd/es6/esnext\n+// @lib: ES5,DOM/ES2015/ES2020\n+// @declaration: true/false\n+// @skipLibCheck: true/false\n+```\n+\n+### Multi-file Tests\n+```typescript\n+// @Filename: helper.ts\n+export function helper(x: number): string {\n+    return x.toString();\n+}\n+\n+// @Filename: main.ts  \n+import { helper } from \"./helper\";\n+const result = helper(42);\n+```\n+\n+### Error Expectations\n+Use comments to document expected behavior:\n+```typescript\n+abstract class Base {\n+    abstract method(): void;\n+}\n+\n+class Derived extends Base {\n+    // Missing implementation - should error\n+}\n+\n+new Base(); // Should error - cannot instantiate abstract class\n+```\n+\n+### Type Testing Patterns\n+```typescript\n+// Test type inference\n+let inferred = [1, 2, 3]; // Should infer number[]\n+\n+// Test type compatibility  \n+type A = { x: number };\n+type B = { x: number; y: string };\n+let a: A = { x: 1 };\n+let b: B = { x: 1, y: \"hello\" };\n+a = b; // Should work - B is assignable to A\n+b = a; // Should error - A missing property y\n+```\n+\n+### Simple Example\n+```typescript\n+// Test that optional properties work correctly\n+interface Config {\n+    required: string;\n+    optional?: number;\n+}\n+\n+const config1: Config = { required: \"test\" }; // Should work\n+const config2: Config = { required: \"test\", optional: 42 }; // Should work  \n+const config3: Config = { optional: 42 }; // Should error - missing required\n+```\n+\n+## Test Writing Best Practices\n+\n+### For Fourslash Tests\n+1. **Prefer validation over baselines** - Use `verify.currentLineContentIs()` instead of `verify.baseline*()`\n+2. **Use simple, focused examples** - Test one feature at a time\n+3. **Name markers clearly** - Use descriptive marker names like `/*completion*/`\n+4. **Test the simplest form first** - Start with basic cases before complex scenarios\n+\n+### For Compiler Tests  \n+1. **Use clear file names** - Name tests after the feature being tested\n+2. **Add explanatory comments** - Document expected behavior with comments\n+3. **Test error cases** - Include both valid and invalid code examples\n+4. **Keep tests focused** - One primary feature per test file\n+\n+### General Guidelines\n+1. **Make tests deterministic** - Avoid random or environment-dependent behavior\n+2. **Use realistic examples** - Test scenarios developers actually encounter  \n+3. **Start simple** - Begin with the most basic case of a feature\n+4. **Test edge cases** - Include boundary conditions and error scenarios\n+\n+## Running Specific Tests\n+\n+```bash\n+# Run a specific fourslash test\n+hereby runtests --tests=tests/cases/fourslash/completionForObjectProperty.ts\n+\n+# Run a specific compiler test  \n+hereby runtests --tests=tests/cases/compiler/abstractClassUnionInstantiation.ts\n+\n+# Run tests matching a pattern\n+hereby runtests --tests=tests/cases/fourslash/completion*.ts\n+```\n+\n+This guide focuses on the most common and idiomatic patterns for writing TypeScript tests. For complex scenarios, refer to existing tests in the codebase for additional patterns and techniques.",
        "comment_created_at": "2025-06-18T20:36:31+00:00",
        "comment_author": "RyanCavanaugh",
        "comment_body": "```suggestion\nAll fixes should use one of these two test formats. Do not use unit tests as they are almost never the correct test format for our repo.\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2155243088",
    "pr_number": 61896,
    "pr_file": ".github/copilot-instructions.md",
    "created_at": "2025-06-18T18:29:46+00:00",
    "commented_code": "+ * Read the contents of CONTRIBUTING.md, it has instructions on how to run a single test, handling baselines, etc\n+ * Run `hereby lint` and `hereby format` before you're done\n+ * Only add testcases in `test/cases/compiler` or `tests/cases/fourslash`. Do not write direct unit tests.",
    "repo_full_name": "microsoft/TypeScript",
    "discussion_comments": [
      {
        "comment_id": "2155243088",
        "repo_full_name": "microsoft/TypeScript",
        "pr_number": 61896,
        "pr_file": ".github/copilot-instructions.md",
        "discussion_id": "2155243088",
        "commented_code": "@@ -0,0 +1,13 @@\n+ * Read the contents of CONTRIBUTING.md, it has instructions on how to run a single test, handling baselines, etc\n+ * Run `hereby lint` and `hereby format` before you're done\n+ * Only add testcases in `test/cases/compiler` or `tests/cases/fourslash`. Do not write direct unit tests.",
        "comment_created_at": "2025-06-18T18:29:46+00:00",
        "comment_author": "RyanCavanaugh",
        "comment_body": "```suggestion\n * Only add testcases in `tests/cases/compiler` or `tests/cases/fourslash`. Do not write direct unit tests.\n```",
        "pr_file_module": null
      }
    ]
  }
]