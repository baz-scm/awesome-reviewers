[
  {
    "discussion_id": "1659973559",
    "pr_number": 318,
    "pr_file": "apps/www/registry/default/ui/stepper.tsx",
    "created_at": "2024-06-29T20:36:09+00:00",
    "commented_code": "+\"use client\"\n+\n+import * as React from \"react\"\n+import { cva } from \"class-variance-authority\"\n+import { CheckIcon, Loader2, LucideIcon, X } from \"lucide-react\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Button } from \"@/registry/default/ui/button\"\n+import {\n+  Collapsible,\n+  CollapsibleContent,\n+} from \"@/registry/default/ui/collapsible\"\n+\n+// <---------- CONTEXT ---------->\n+\n+interface StepperContextValue extends StepperProps {\n+  clickable?: boolean\n+  isError?: boolean\n+  isLoading?: boolean\n+  isVertical?: boolean\n+  stepCount?: number\n+  expandVerticalSteps?: boolean\n+  activeStep: number\n+  initialStep: number\n+}\n+\n+const StepperContext = React.createContext<\n+  StepperContextValue & {\n+    nextStep: () => void\n+    prevStep: () => void\n+    resetSteps: () => void\n+    setStep: (step: number) => void\n+  }\n+>({\n+  steps: [],\n+  activeStep: 0,\n+  initialStep: 0,\n+  nextStep: () => {},\n+  prevStep: () => {},\n+  resetSteps: () => {},\n+  setStep: () => {},\n+})\n+\n+type StepperContextProviderProps = {\n+  value: Omit<StepperContextValue, \"activeStep\">\n+  children: React.ReactNode\n+}\n+\n+const StepperProvider = ({ value, children }: StepperContextProviderProps) => {\n+  const isError = value.state === \"error\"\n+  const isLoading = value.state === \"loading\"\n+\n+  const [activeStep, setActiveStep] = React.useState(value.initialStep)\n+\n+  const nextStep = () => {\n+    setActiveStep((prev) => prev + 1)\n+  }\n+\n+  const prevStep = () => {\n+    setActiveStep((prev) => prev - 1)\n+  }\n+\n+  const resetSteps = () => {\n+    setActiveStep(value.initialStep)\n+  }\n+\n+  const setStep = (step: number) => {\n+    setActiveStep(step)\n+  }\n+\n+  return (\n+    <StepperContext.Provider\n+      value={{\n+        ...value,\n+        isError,\n+        isLoading,\n+        activeStep,\n+        nextStep,\n+        prevStep,\n+        resetSteps,\n+        setStep,\n+      }}\n+    >\n+      {children}\n+    </StepperContext.Provider>\n+  )\n+}\n+\n+// <---------- HOOKS ---------->\n+\n+function usePrevious<T>(value: T): T | undefined {\n+  const ref = React.useRef<T>()\n+\n+  React.useEffect(() => {\n+    ref.current = value\n+  }, [value])\n+\n+  return ref.current\n+}\n+\n+function useStepper() {\n+  const context = React.useContext(StepperContext)\n+\n+  if (context === undefined) {\n+    throw new Error(\"useStepper must be used within a StepperProvider\")\n+  }\n+\n+  const { children, className, ...rest } = context\n+\n+  const isLastStep = context.activeStep === context.steps.length - 1\n+  const hasCompletedAllSteps = context.activeStep === context.steps.length\n+\n+  const previousActiveStep = usePrevious(context.activeStep)\n+\n+  const currentStep = context.steps[context.activeStep]\n+  const isOptionalStep = !!currentStep?.optional\n+\n+  const isDisabledStep = context.activeStep === 0\n+\n+  return {\n+    ...rest,\n+    isLastStep,\n+    hasCompletedAllSteps,\n+    isOptionalStep,\n+    isDisabledStep,\n+    currentStep,\n+    previousActiveStep,\n+  }\n+}\n+\n+function useMediaQuery(query: string) {\n+  const [value, setValue] = React.useState(false)\n+\n+  React.useEffect(() => {\n+    function onChange(event: MediaQueryListEvent) {\n+      setValue(event.matches)\n+    }\n+\n+    const result = matchMedia(query)\n+    result.addEventListener(\"change\", onChange)\n+    setValue(result.matches)\n+\n+    return () => result.removeEventListener(\"change\", onChange)\n+  }, [query])\n+\n+  return value\n+}\n+\n+// <---------- STEPS ---------->\n+\n+type StepItem = {\n+  id?: string\n+  label?: string\n+  description?: string\n+  icon?: IconType\n+  optional?: boolean\n+}\n+\n+interface StepOptions {\n+  orientation?: \"vertical\" | \"horizontal\"\n+  state?: \"loading\" | \"error\"\n+  responsive?: boolean\n+  checkIcon?: IconType\n+  errorIcon?: IconType\n+  onClickStep?: (step: number, setStep: (step: number) => void) => void\n+  mobileBreakpoint?: string\n+  variant?: \"circle\" | \"circle-alt\" | \"line\"\n+  expandVerticalSteps?: boolean\n+  size?: \"sm\" | \"md\" | \"lg\"\n+  styles?: {\n+    /** Styles for the main container */\n+    \"main-container\"?: string\n+    /** Styles for the horizontal step */\n+    \"horizontal-step\"?: string\n+    /** Styles for the horizontal step container (button and labels) */\n+    \"horizontal-step-container\"?: string\n+    /** Styles for the vertical step */\n+    \"vertical-step\"?: string\n+    /** Styles for the vertical step container (button and labels) */\n+    \"vertical-step-container\"?: string\n+    /** Styles for the vertical step content */\n+    \"vertical-step-content\"?: string\n+    /** Styles for the step button container */\n+    \"step-button-container\"?: string\n+    /** Styles for the label and description container */\n+    \"step-label-container\"?: string\n+    /** Styles for the step label */\n+    \"step-label\"?: string\n+    /** Styles for the step description */\n+    \"step-description\"?: string\n+  }\n+  variables?: {\n+    \"--step-icon-size\"?: string\n+    \"--step-gap\"?: string\n+  }\n+  scrollTracking?: boolean\n+}\n+interface StepperProps extends StepOptions {\n+  children?: React.ReactNode\n+  className?: string\n+  initialStep: number\n+  steps: StepItem[]\n+}\n+\n+const VARIABLE_SIZES = {\n+  sm: \"36px\",\n+  md: \"40px\",\n+  lg: \"44px\",\n+}\n+\n+const Stepper = React.forwardRef<HTMLDivElement, StepperProps>(\n+  (props, ref: React.Ref<HTMLDivElement>) => {\n+    const {\n+      className,\n+      children,\n+      orientation: orientationProp,\n+      state,\n+      responsive,\n+      checkIcon,\n+      errorIcon,\n+      onClickStep,\n+      mobileBreakpoint,\n+      expandVerticalSteps = false,\n+      initialStep = 0,\n+      size,\n+      steps,\n+      variant,\n+      styles,\n+      variables,\n+      scrollTracking = false,\n+      ...rest\n+    } = props\n+\n+    const childArr = React.Children.toArray(children)\n+\n+    const items = [] as React.ReactElement[]\n+\n+    const footer = childArr.map((child, _index) => {\n+      if (!React.isValidElement(child)) {\n+        throw new Error(\"Stepper children must be valid React elements.\")\n+      }\n+      if (child.type === Step) {\n+        items.push(child)\n+        return null\n+      }\n+\n+      return child\n+    })\n+\n+    const stepCount = items.length\n+\n+    const isMobile = useMediaQuery(\n+      `(max-width: ${mobileBreakpoint || \"768px\"})`\n+    )\n+\n+    const clickable = !!onClickStep\n+\n+    const orientation = isMobile && responsive ? \"vertical\" : orientationProp\n+\n+    const isVertical = orientation === \"vertical\"\n+\n+    return (\n+      <StepperProvider\n+        value={{\n+          initialStep,\n+          orientation,\n+          state,\n+          size,\n+          responsive,\n+          checkIcon,\n+          errorIcon,\n+          onClickStep,\n+          clickable,\n+          stepCount,\n+          isVertical,\n+          variant: variant || \"circle\",\n+          expandVerticalSteps,\n+          steps,\n+          scrollTracking,\n+          styles,\n+        }}\n+      >\n+        <div\n+          ref={ref}\n+          className={cn(\n+            \"stepper__main-container\",\n+            \"flex w-full flex-wrap\",\n+            stepCount === 1 ? \"justify-end\" : \"justify-between\",\n+            orientation === \"vertical\" ? \"flex-col\" : \"flex-row\",\n+            variant === \"line\" && orientation === \"horizontal\" && \"gap-4\",\n+            className,\n+            styles?.[\"main-container\"]\n+          )}\n+          style={\n+            {\n+              \"--step-icon-size\":\n+                variables?.[\"--step-icon-size\"] ||\n+                `${VARIABLE_SIZES[size || \"md\"]}`,\n+              \"--step-gap\": variables?.[\"--step-gap\"] || \"8px\",\n+            } as React.CSSProperties\n+          }\n+          {...rest}\n+        >\n+          <VerticalContent>{items}</VerticalContent>\n+        </div>\n+        {orientation === \"horizontal\" && (\n+          <HorizontalContent>{items}</HorizontalContent>\n+        )}\n+        {footer}\n+      </StepperProvider>\n+    )\n+  }\n+)\n+\n+Stepper.defaultProps = {\n+  size: \"md\",\n+  orientation: \"horizontal\",\n+  responsive: true,\n+}\n+\n+const VerticalContent = ({ children }: { children: React.ReactNode }) => {\n+  const { activeStep } = useStepper()\n+\n+  const childArr = React.Children.toArray(children)\n+  const stepCount = childArr.length\n+\n+  return (\n+    <>\n+      {React.Children.map(children, (child, i) => {\n+        const isCompletedStep =\n+          (React.isValidElement(child) &&\n+            (child.props as any).isCompletedStep) ??\n+          i < activeStep\n+        const isLastStep = i === stepCount - 1\n+        const isCurrentStep = i === activeStep\n+\n+        const stepProps = {\n+          index: i,\n+          isCompletedStep,\n+          isCurrentStep,\n+          isLastStep,\n+        }\n+\n+        if (React.isValidElement(child)) {\n+          return React.cloneElement(child, stepProps)\n+        }\n+        return null\n+      })}\n+    </>\n+  )\n+}\n+\n+const HorizontalContent = ({ children }: { children: React.ReactNode }) => {\n+  const { activeStep } = useStepper()\n+  const childArr = React.Children.toArray(children)\n+\n+  if (activeStep > childArr.length) {\n+    return null\n+  }\n+\n+  return (\n+    <>\n+      {React.Children.map(childArr[activeStep], (node) => {\n+        if (!React.isValidElement(node)) {\n+          return null\n+        }\n+        return React.Children.map(node.props.children, (childNode) => childNode)\n+      })}\n+    </>\n+  )\n+}\n+\n+// <---------- STEP ---------->\n+\n+interface StepProps extends React.HTMLAttributes<HTMLLIElement> {\n+  label?: string | React.ReactNode\n+  description?: string\n+  icon?: IconType\n+  state?: \"loading\" | \"error\"\n+  checkIcon?: IconType\n+  errorIcon?: IconType\n+  isCompletedStep?: boolean\n+  isKeepError?: boolean\n+  onClickStep?: (step: number, setStep: (step: number) => void) => void\n+}\n+\n+interface StepSharedProps extends StepProps {\n+  isLastStep?: boolean\n+  isCurrentStep?: boolean\n+  index?: number\n+  hasVisited: boolean | undefined\n+  isError?: boolean\n+  isLoading?: boolean\n+}\n+\n+// Props which shouldn't be passed to to the Step component from the user\n+interface StepInternalConfig {\n+  index: number\n+  isCompletedStep?: boolean\n+  isCurrentStep?: boolean\n+  isLastStep?: boolean\n+}\n+\n+interface FullStepProps extends StepProps, StepInternalConfig {}\n+\n+const Step = React.forwardRef<HTMLLIElement, StepProps>(\n+  (props, ref: React.Ref<any>) => {\n+    const {\n+      children,\n+      description,\n+      icon,\n+      state,\n+      checkIcon,\n+      errorIcon,\n+      index,\n+      isCompletedStep,\n+      isCurrentStep,\n+      isLastStep,\n+      isKeepError,\n+      label,\n+      onClickStep,\n+    } = props as FullStepProps\n+\n+    const { isVertical, isError, isLoading, clickable } = useStepper()\n+\n+    const hasVisited = isCurrentStep || isCompletedStep\n+\n+    const sharedProps = {\n+      isLastStep,\n+      isCompletedStep,\n+      isCurrentStep,\n+      index,\n+      isError,\n+      isLoading,\n+      clickable,\n+      label,\n+      description,\n+      hasVisited,\n+      icon,\n+      isKeepError,\n+      checkIcon,\n+      state,\n+      errorIcon,\n+      onClickStep,\n+    }\n+\n+    const renderStep = () => {\n+      switch (isVertical) {\n+        case true:\n+          return (\n+            <VerticalStep ref={ref} {...sharedProps}>\n+              {children}\n+            </VerticalStep>\n+          )\n+        default:\n+          return <HorizontalStep ref={ref} {...sharedProps} />\n+      }\n+    }\n+\n+    return renderStep()\n+  }\n+)\n+\n+// <---------- VERTICAL STEP ---------->\n+\n+type VerticalStepProps = StepSharedProps & {\n+  children?: React.ReactNode\n+}\n+\n+const verticalStepVariants = cva(\n+  [\n+    \"flex flex-col relative transition-all duration-200\",\n+    \"data-[completed=true]:[&:not(:last-child)]:after:bg-primary\",\n+    \"data-[invalid=true]:[&:not(:last-child)]:after:bg-destructive\",\n+  ],\n+  {\n+    variants: {\n+      variant: {\n+        circle: cn(\n+          \"[&:not(:last-child)]:pb-[var(--step-gap)] [&:not(:last-child)]:gap-[var(--step-gap)]\",\n+          \"[&:not(:last-child)]:after:content-[''] [&:not(:last-child)]:after:w-[2px] [&:not(:last-child)]:after:bg-border\",\n+          \"[&:not(:last-child)]:after:inset-x-[calc(var(--step-icon-size)/2)]\",\n+          \"[&:not(:last-child)]:after:absolute\",\n+          \"[&:not(:last-child)]:after:top-[calc(var(--step-icon-size)+var(--step-gap))]\",\n+          \"[&:not(:last-child)]:after:bottom-[var(--step-gap)]\",\n+          \"[&:not(:last-child)]:after:transition-all [&:not(:last-child)]:after:duration-200\"\n+        ),\n+        line: \"flex-1 border-t-0 mb-4\",\n+      },\n+    },\n+  }\n+)\n+\n+const VerticalStep = React.forwardRef<HTMLDivElement, VerticalStepProps>(\n+  (props, ref) => {\n+    const {\n+      children,\n+      index,\n+      isCompletedStep,\n+      isCurrentStep,\n+      label,\n+      description,\n+      icon,\n+      hasVisited,\n+      state,\n+      checkIcon: checkIconProp,\n+      errorIcon: errorIconProp,\n+      onClickStep,\n+    } = props\n+\n+    const {\n+      checkIcon: checkIconContext,\n+      errorIcon: errorIconContext,\n+      isError,\n+      isLoading,\n+      variant,\n+      onClickStep: onClickStepGeneral,\n+      clickable,\n+      expandVerticalSteps,\n+      styles,\n+      scrollTracking,\n+      orientation,\n+      steps,\n+      setStep,\n+      isLastStep: isLastStepCurrentStep,\n+      previousActiveStep,\n+    } = useStepper()\n+\n+    const opacity = hasVisited ? 1 : 0.8\n+    const localIsLoading = isLoading || state === \"loading\"\n+    const localIsError = isError || state === \"error\"\n+\n+    const isLastStep = index === steps.length - 1\n+\n+    const active =\n+      variant === \"line\" ? isCompletedStep || isCurrentStep : isCompletedStep\n+    const checkIcon = checkIconProp || checkIconContext\n+    const errorIcon = errorIconProp || errorIconContext\n+\n+    const renderChildren = () => {\n+      if (!expandVerticalSteps) {\n+        return (\n+          <Collapsible open={isCurrentStep}>\n+            <CollapsibleContent\n+              ref={(node) => {\n+                if (\n+                  // If the step is the first step and the previous step\n+                  // was the last step or if the step is not the first step\n+                  // This prevents initial scrolling when the stepper\n+                  // is located anywhere other than the top of the view.\n+                  scrollTracking &&\n+                  ((index === 0 &&\n+                    previousActiveStep &&\n+                    previousActiveStep === steps.length) ||\n+                    (index && index > 0))\n+                ) {\n+                  node?.scrollIntoView({\n+                    behavior: \"smooth\",\n+                    block: \"center\",\n+                  })\n+                }\n+              }}\n+              className=\"overflow-hidden data-[state=open]:animate-collapsible-down data-[state=closed]:animate-collapsible-up\"\n+            >\n+              {children}\n+            </CollapsibleContent>\n+          </Collapsible>\n+        )\n+      }\n+      return children\n+    }\n+\n+    return (\n+      <div\n+        ref={ref}\n+        className={cn(\n+          \"stepper__vertical-step\",\n+          verticalStepVariants({\n+            variant: variant?.includes(\"circle\") ? \"circle\" : \"line\",\n+          }),\n+          isLastStepCurrentStep && \"gap-[var(--step-gap)]\",\n+          styles?.[\"vertical-step\"]\n+        )}\n+        data-optional={steps[index || 0]?.optional}\n+        data-completed={isCompletedStep}\n+        data-active={active}\n+        data-clickable={clickable || !!onClickStep}\n+        data-invalid={localIsError}\n+        onClick={() =>",
    "repo_full_name": "shadcn-ui/ui",
    "discussion_comments": [
      {
        "comment_id": "1659973559",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 318,
        "pr_file": "apps/www/registry/default/ui/stepper.tsx",
        "discussion_id": "1659973559",
        "commented_code": "@@ -0,0 +1,1021 @@\n+\"use client\"\n+\n+import * as React from \"react\"\n+import { cva } from \"class-variance-authority\"\n+import { CheckIcon, Loader2, LucideIcon, X } from \"lucide-react\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Button } from \"@/registry/default/ui/button\"\n+import {\n+  Collapsible,\n+  CollapsibleContent,\n+} from \"@/registry/default/ui/collapsible\"\n+\n+// <---------- CONTEXT ---------->\n+\n+interface StepperContextValue extends StepperProps {\n+  clickable?: boolean\n+  isError?: boolean\n+  isLoading?: boolean\n+  isVertical?: boolean\n+  stepCount?: number\n+  expandVerticalSteps?: boolean\n+  activeStep: number\n+  initialStep: number\n+}\n+\n+const StepperContext = React.createContext<\n+  StepperContextValue & {\n+    nextStep: () => void\n+    prevStep: () => void\n+    resetSteps: () => void\n+    setStep: (step: number) => void\n+  }\n+>({\n+  steps: [],\n+  activeStep: 0,\n+  initialStep: 0,\n+  nextStep: () => {},\n+  prevStep: () => {},\n+  resetSteps: () => {},\n+  setStep: () => {},\n+})\n+\n+type StepperContextProviderProps = {\n+  value: Omit<StepperContextValue, \"activeStep\">\n+  children: React.ReactNode\n+}\n+\n+const StepperProvider = ({ value, children }: StepperContextProviderProps) => {\n+  const isError = value.state === \"error\"\n+  const isLoading = value.state === \"loading\"\n+\n+  const [activeStep, setActiveStep] = React.useState(value.initialStep)\n+\n+  const nextStep = () => {\n+    setActiveStep((prev) => prev + 1)\n+  }\n+\n+  const prevStep = () => {\n+    setActiveStep((prev) => prev - 1)\n+  }\n+\n+  const resetSteps = () => {\n+    setActiveStep(value.initialStep)\n+  }\n+\n+  const setStep = (step: number) => {\n+    setActiveStep(step)\n+  }\n+\n+  return (\n+    <StepperContext.Provider\n+      value={{\n+        ...value,\n+        isError,\n+        isLoading,\n+        activeStep,\n+        nextStep,\n+        prevStep,\n+        resetSteps,\n+        setStep,\n+      }}\n+    >\n+      {children}\n+    </StepperContext.Provider>\n+  )\n+}\n+\n+// <---------- HOOKS ---------->\n+\n+function usePrevious<T>(value: T): T | undefined {\n+  const ref = React.useRef<T>()\n+\n+  React.useEffect(() => {\n+    ref.current = value\n+  }, [value])\n+\n+  return ref.current\n+}\n+\n+function useStepper() {\n+  const context = React.useContext(StepperContext)\n+\n+  if (context === undefined) {\n+    throw new Error(\"useStepper must be used within a StepperProvider\")\n+  }\n+\n+  const { children, className, ...rest } = context\n+\n+  const isLastStep = context.activeStep === context.steps.length - 1\n+  const hasCompletedAllSteps = context.activeStep === context.steps.length\n+\n+  const previousActiveStep = usePrevious(context.activeStep)\n+\n+  const currentStep = context.steps[context.activeStep]\n+  const isOptionalStep = !!currentStep?.optional\n+\n+  const isDisabledStep = context.activeStep === 0\n+\n+  return {\n+    ...rest,\n+    isLastStep,\n+    hasCompletedAllSteps,\n+    isOptionalStep,\n+    isDisabledStep,\n+    currentStep,\n+    previousActiveStep,\n+  }\n+}\n+\n+function useMediaQuery(query: string) {\n+  const [value, setValue] = React.useState(false)\n+\n+  React.useEffect(() => {\n+    function onChange(event: MediaQueryListEvent) {\n+      setValue(event.matches)\n+    }\n+\n+    const result = matchMedia(query)\n+    result.addEventListener(\"change\", onChange)\n+    setValue(result.matches)\n+\n+    return () => result.removeEventListener(\"change\", onChange)\n+  }, [query])\n+\n+  return value\n+}\n+\n+// <---------- STEPS ---------->\n+\n+type StepItem = {\n+  id?: string\n+  label?: string\n+  description?: string\n+  icon?: IconType\n+  optional?: boolean\n+}\n+\n+interface StepOptions {\n+  orientation?: \"vertical\" | \"horizontal\"\n+  state?: \"loading\" | \"error\"\n+  responsive?: boolean\n+  checkIcon?: IconType\n+  errorIcon?: IconType\n+  onClickStep?: (step: number, setStep: (step: number) => void) => void\n+  mobileBreakpoint?: string\n+  variant?: \"circle\" | \"circle-alt\" | \"line\"\n+  expandVerticalSteps?: boolean\n+  size?: \"sm\" | \"md\" | \"lg\"\n+  styles?: {\n+    /** Styles for the main container */\n+    \"main-container\"?: string\n+    /** Styles for the horizontal step */\n+    \"horizontal-step\"?: string\n+    /** Styles for the horizontal step container (button and labels) */\n+    \"horizontal-step-container\"?: string\n+    /** Styles for the vertical step */\n+    \"vertical-step\"?: string\n+    /** Styles for the vertical step container (button and labels) */\n+    \"vertical-step-container\"?: string\n+    /** Styles for the vertical step content */\n+    \"vertical-step-content\"?: string\n+    /** Styles for the step button container */\n+    \"step-button-container\"?: string\n+    /** Styles for the label and description container */\n+    \"step-label-container\"?: string\n+    /** Styles for the step label */\n+    \"step-label\"?: string\n+    /** Styles for the step description */\n+    \"step-description\"?: string\n+  }\n+  variables?: {\n+    \"--step-icon-size\"?: string\n+    \"--step-gap\"?: string\n+  }\n+  scrollTracking?: boolean\n+}\n+interface StepperProps extends StepOptions {\n+  children?: React.ReactNode\n+  className?: string\n+  initialStep: number\n+  steps: StepItem[]\n+}\n+\n+const VARIABLE_SIZES = {\n+  sm: \"36px\",\n+  md: \"40px\",\n+  lg: \"44px\",\n+}\n+\n+const Stepper = React.forwardRef<HTMLDivElement, StepperProps>(\n+  (props, ref: React.Ref<HTMLDivElement>) => {\n+    const {\n+      className,\n+      children,\n+      orientation: orientationProp,\n+      state,\n+      responsive,\n+      checkIcon,\n+      errorIcon,\n+      onClickStep,\n+      mobileBreakpoint,\n+      expandVerticalSteps = false,\n+      initialStep = 0,\n+      size,\n+      steps,\n+      variant,\n+      styles,\n+      variables,\n+      scrollTracking = false,\n+      ...rest\n+    } = props\n+\n+    const childArr = React.Children.toArray(children)\n+\n+    const items = [] as React.ReactElement[]\n+\n+    const footer = childArr.map((child, _index) => {\n+      if (!React.isValidElement(child)) {\n+        throw new Error(\"Stepper children must be valid React elements.\")\n+      }\n+      if (child.type === Step) {\n+        items.push(child)\n+        return null\n+      }\n+\n+      return child\n+    })\n+\n+    const stepCount = items.length\n+\n+    const isMobile = useMediaQuery(\n+      `(max-width: ${mobileBreakpoint || \"768px\"})`\n+    )\n+\n+    const clickable = !!onClickStep\n+\n+    const orientation = isMobile && responsive ? \"vertical\" : orientationProp\n+\n+    const isVertical = orientation === \"vertical\"\n+\n+    return (\n+      <StepperProvider\n+        value={{\n+          initialStep,\n+          orientation,\n+          state,\n+          size,\n+          responsive,\n+          checkIcon,\n+          errorIcon,\n+          onClickStep,\n+          clickable,\n+          stepCount,\n+          isVertical,\n+          variant: variant || \"circle\",\n+          expandVerticalSteps,\n+          steps,\n+          scrollTracking,\n+          styles,\n+        }}\n+      >\n+        <div\n+          ref={ref}\n+          className={cn(\n+            \"stepper__main-container\",\n+            \"flex w-full flex-wrap\",\n+            stepCount === 1 ? \"justify-end\" : \"justify-between\",\n+            orientation === \"vertical\" ? \"flex-col\" : \"flex-row\",\n+            variant === \"line\" && orientation === \"horizontal\" && \"gap-4\",\n+            className,\n+            styles?.[\"main-container\"]\n+          )}\n+          style={\n+            {\n+              \"--step-icon-size\":\n+                variables?.[\"--step-icon-size\"] ||\n+                `${VARIABLE_SIZES[size || \"md\"]}`,\n+              \"--step-gap\": variables?.[\"--step-gap\"] || \"8px\",\n+            } as React.CSSProperties\n+          }\n+          {...rest}\n+        >\n+          <VerticalContent>{items}</VerticalContent>\n+        </div>\n+        {orientation === \"horizontal\" && (\n+          <HorizontalContent>{items}</HorizontalContent>\n+        )}\n+        {footer}\n+      </StepperProvider>\n+    )\n+  }\n+)\n+\n+Stepper.defaultProps = {\n+  size: \"md\",\n+  orientation: \"horizontal\",\n+  responsive: true,\n+}\n+\n+const VerticalContent = ({ children }: { children: React.ReactNode }) => {\n+  const { activeStep } = useStepper()\n+\n+  const childArr = React.Children.toArray(children)\n+  const stepCount = childArr.length\n+\n+  return (\n+    <>\n+      {React.Children.map(children, (child, i) => {\n+        const isCompletedStep =\n+          (React.isValidElement(child) &&\n+            (child.props as any).isCompletedStep) ??\n+          i < activeStep\n+        const isLastStep = i === stepCount - 1\n+        const isCurrentStep = i === activeStep\n+\n+        const stepProps = {\n+          index: i,\n+          isCompletedStep,\n+          isCurrentStep,\n+          isLastStep,\n+        }\n+\n+        if (React.isValidElement(child)) {\n+          return React.cloneElement(child, stepProps)\n+        }\n+        return null\n+      })}\n+    </>\n+  )\n+}\n+\n+const HorizontalContent = ({ children }: { children: React.ReactNode }) => {\n+  const { activeStep } = useStepper()\n+  const childArr = React.Children.toArray(children)\n+\n+  if (activeStep > childArr.length) {\n+    return null\n+  }\n+\n+  return (\n+    <>\n+      {React.Children.map(childArr[activeStep], (node) => {\n+        if (!React.isValidElement(node)) {\n+          return null\n+        }\n+        return React.Children.map(node.props.children, (childNode) => childNode)\n+      })}\n+    </>\n+  )\n+}\n+\n+// <---------- STEP ---------->\n+\n+interface StepProps extends React.HTMLAttributes<HTMLLIElement> {\n+  label?: string | React.ReactNode\n+  description?: string\n+  icon?: IconType\n+  state?: \"loading\" | \"error\"\n+  checkIcon?: IconType\n+  errorIcon?: IconType\n+  isCompletedStep?: boolean\n+  isKeepError?: boolean\n+  onClickStep?: (step: number, setStep: (step: number) => void) => void\n+}\n+\n+interface StepSharedProps extends StepProps {\n+  isLastStep?: boolean\n+  isCurrentStep?: boolean\n+  index?: number\n+  hasVisited: boolean | undefined\n+  isError?: boolean\n+  isLoading?: boolean\n+}\n+\n+// Props which shouldn't be passed to to the Step component from the user\n+interface StepInternalConfig {\n+  index: number\n+  isCompletedStep?: boolean\n+  isCurrentStep?: boolean\n+  isLastStep?: boolean\n+}\n+\n+interface FullStepProps extends StepProps, StepInternalConfig {}\n+\n+const Step = React.forwardRef<HTMLLIElement, StepProps>(\n+  (props, ref: React.Ref<any>) => {\n+    const {\n+      children,\n+      description,\n+      icon,\n+      state,\n+      checkIcon,\n+      errorIcon,\n+      index,\n+      isCompletedStep,\n+      isCurrentStep,\n+      isLastStep,\n+      isKeepError,\n+      label,\n+      onClickStep,\n+    } = props as FullStepProps\n+\n+    const { isVertical, isError, isLoading, clickable } = useStepper()\n+\n+    const hasVisited = isCurrentStep || isCompletedStep\n+\n+    const sharedProps = {\n+      isLastStep,\n+      isCompletedStep,\n+      isCurrentStep,\n+      index,\n+      isError,\n+      isLoading,\n+      clickable,\n+      label,\n+      description,\n+      hasVisited,\n+      icon,\n+      isKeepError,\n+      checkIcon,\n+      state,\n+      errorIcon,\n+      onClickStep,\n+    }\n+\n+    const renderStep = () => {\n+      switch (isVertical) {\n+        case true:\n+          return (\n+            <VerticalStep ref={ref} {...sharedProps}>\n+              {children}\n+            </VerticalStep>\n+          )\n+        default:\n+          return <HorizontalStep ref={ref} {...sharedProps} />\n+      }\n+    }\n+\n+    return renderStep()\n+  }\n+)\n+\n+// <---------- VERTICAL STEP ---------->\n+\n+type VerticalStepProps = StepSharedProps & {\n+  children?: React.ReactNode\n+}\n+\n+const verticalStepVariants = cva(\n+  [\n+    \"flex flex-col relative transition-all duration-200\",\n+    \"data-[completed=true]:[&:not(:last-child)]:after:bg-primary\",\n+    \"data-[invalid=true]:[&:not(:last-child)]:after:bg-destructive\",\n+  ],\n+  {\n+    variants: {\n+      variant: {\n+        circle: cn(\n+          \"[&:not(:last-child)]:pb-[var(--step-gap)] [&:not(:last-child)]:gap-[var(--step-gap)]\",\n+          \"[&:not(:last-child)]:after:content-[''] [&:not(:last-child)]:after:w-[2px] [&:not(:last-child)]:after:bg-border\",\n+          \"[&:not(:last-child)]:after:inset-x-[calc(var(--step-icon-size)/2)]\",\n+          \"[&:not(:last-child)]:after:absolute\",\n+          \"[&:not(:last-child)]:after:top-[calc(var(--step-icon-size)+var(--step-gap))]\",\n+          \"[&:not(:last-child)]:after:bottom-[var(--step-gap)]\",\n+          \"[&:not(:last-child)]:after:transition-all [&:not(:last-child)]:after:duration-200\"\n+        ),\n+        line: \"flex-1 border-t-0 mb-4\",\n+      },\n+    },\n+  }\n+)\n+\n+const VerticalStep = React.forwardRef<HTMLDivElement, VerticalStepProps>(\n+  (props, ref) => {\n+    const {\n+      children,\n+      index,\n+      isCompletedStep,\n+      isCurrentStep,\n+      label,\n+      description,\n+      icon,\n+      hasVisited,\n+      state,\n+      checkIcon: checkIconProp,\n+      errorIcon: errorIconProp,\n+      onClickStep,\n+    } = props\n+\n+    const {\n+      checkIcon: checkIconContext,\n+      errorIcon: errorIconContext,\n+      isError,\n+      isLoading,\n+      variant,\n+      onClickStep: onClickStepGeneral,\n+      clickable,\n+      expandVerticalSteps,\n+      styles,\n+      scrollTracking,\n+      orientation,\n+      steps,\n+      setStep,\n+      isLastStep: isLastStepCurrentStep,\n+      previousActiveStep,\n+    } = useStepper()\n+\n+    const opacity = hasVisited ? 1 : 0.8\n+    const localIsLoading = isLoading || state === \"loading\"\n+    const localIsError = isError || state === \"error\"\n+\n+    const isLastStep = index === steps.length - 1\n+\n+    const active =\n+      variant === \"line\" ? isCompletedStep || isCurrentStep : isCompletedStep\n+    const checkIcon = checkIconProp || checkIconContext\n+    const errorIcon = errorIconProp || errorIconContext\n+\n+    const renderChildren = () => {\n+      if (!expandVerticalSteps) {\n+        return (\n+          <Collapsible open={isCurrentStep}>\n+            <CollapsibleContent\n+              ref={(node) => {\n+                if (\n+                  // If the step is the first step and the previous step\n+                  // was the last step or if the step is not the first step\n+                  // This prevents initial scrolling when the stepper\n+                  // is located anywhere other than the top of the view.\n+                  scrollTracking &&\n+                  ((index === 0 &&\n+                    previousActiveStep &&\n+                    previousActiveStep === steps.length) ||\n+                    (index && index > 0))\n+                ) {\n+                  node?.scrollIntoView({\n+                    behavior: \"smooth\",\n+                    block: \"center\",\n+                  })\n+                }\n+              }}\n+              className=\"overflow-hidden data-[state=open]:animate-collapsible-down data-[state=closed]:animate-collapsible-up\"\n+            >\n+              {children}\n+            </CollapsibleContent>\n+          </Collapsible>\n+        )\n+      }\n+      return children\n+    }\n+\n+    return (\n+      <div\n+        ref={ref}\n+        className={cn(\n+          \"stepper__vertical-step\",\n+          verticalStepVariants({\n+            variant: variant?.includes(\"circle\") ? \"circle\" : \"line\",\n+          }),\n+          isLastStepCurrentStep && \"gap-[var(--step-gap)]\",\n+          styles?.[\"vertical-step\"]\n+        )}\n+        data-optional={steps[index || 0]?.optional}\n+        data-completed={isCompletedStep}\n+        data-active={active}\n+        data-clickable={clickable || !!onClickStep}\n+        data-invalid={localIsError}\n+        onClick={() =>",
        "comment_created_at": "2024-06-29T20:36:09+00:00",
        "comment_author": "leog",
        "comment_body": "@damianricobelli I was specifically talking about having `onClick` on a `div` element, warned by ESLint to require a `role` property to make it valid.",
        "pr_file_module": null
      },
      {
        "comment_id": "1660042547",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 318,
        "pr_file": "apps/www/registry/default/ui/stepper.tsx",
        "discussion_id": "1659973559",
        "commented_code": "@@ -0,0 +1,1021 @@\n+\"use client\"\n+\n+import * as React from \"react\"\n+import { cva } from \"class-variance-authority\"\n+import { CheckIcon, Loader2, LucideIcon, X } from \"lucide-react\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Button } from \"@/registry/default/ui/button\"\n+import {\n+  Collapsible,\n+  CollapsibleContent,\n+} from \"@/registry/default/ui/collapsible\"\n+\n+// <---------- CONTEXT ---------->\n+\n+interface StepperContextValue extends StepperProps {\n+  clickable?: boolean\n+  isError?: boolean\n+  isLoading?: boolean\n+  isVertical?: boolean\n+  stepCount?: number\n+  expandVerticalSteps?: boolean\n+  activeStep: number\n+  initialStep: number\n+}\n+\n+const StepperContext = React.createContext<\n+  StepperContextValue & {\n+    nextStep: () => void\n+    prevStep: () => void\n+    resetSteps: () => void\n+    setStep: (step: number) => void\n+  }\n+>({\n+  steps: [],\n+  activeStep: 0,\n+  initialStep: 0,\n+  nextStep: () => {},\n+  prevStep: () => {},\n+  resetSteps: () => {},\n+  setStep: () => {},\n+})\n+\n+type StepperContextProviderProps = {\n+  value: Omit<StepperContextValue, \"activeStep\">\n+  children: React.ReactNode\n+}\n+\n+const StepperProvider = ({ value, children }: StepperContextProviderProps) => {\n+  const isError = value.state === \"error\"\n+  const isLoading = value.state === \"loading\"\n+\n+  const [activeStep, setActiveStep] = React.useState(value.initialStep)\n+\n+  const nextStep = () => {\n+    setActiveStep((prev) => prev + 1)\n+  }\n+\n+  const prevStep = () => {\n+    setActiveStep((prev) => prev - 1)\n+  }\n+\n+  const resetSteps = () => {\n+    setActiveStep(value.initialStep)\n+  }\n+\n+  const setStep = (step: number) => {\n+    setActiveStep(step)\n+  }\n+\n+  return (\n+    <StepperContext.Provider\n+      value={{\n+        ...value,\n+        isError,\n+        isLoading,\n+        activeStep,\n+        nextStep,\n+        prevStep,\n+        resetSteps,\n+        setStep,\n+      }}\n+    >\n+      {children}\n+    </StepperContext.Provider>\n+  )\n+}\n+\n+// <---------- HOOKS ---------->\n+\n+function usePrevious<T>(value: T): T | undefined {\n+  const ref = React.useRef<T>()\n+\n+  React.useEffect(() => {\n+    ref.current = value\n+  }, [value])\n+\n+  return ref.current\n+}\n+\n+function useStepper() {\n+  const context = React.useContext(StepperContext)\n+\n+  if (context === undefined) {\n+    throw new Error(\"useStepper must be used within a StepperProvider\")\n+  }\n+\n+  const { children, className, ...rest } = context\n+\n+  const isLastStep = context.activeStep === context.steps.length - 1\n+  const hasCompletedAllSteps = context.activeStep === context.steps.length\n+\n+  const previousActiveStep = usePrevious(context.activeStep)\n+\n+  const currentStep = context.steps[context.activeStep]\n+  const isOptionalStep = !!currentStep?.optional\n+\n+  const isDisabledStep = context.activeStep === 0\n+\n+  return {\n+    ...rest,\n+    isLastStep,\n+    hasCompletedAllSteps,\n+    isOptionalStep,\n+    isDisabledStep,\n+    currentStep,\n+    previousActiveStep,\n+  }\n+}\n+\n+function useMediaQuery(query: string) {\n+  const [value, setValue] = React.useState(false)\n+\n+  React.useEffect(() => {\n+    function onChange(event: MediaQueryListEvent) {\n+      setValue(event.matches)\n+    }\n+\n+    const result = matchMedia(query)\n+    result.addEventListener(\"change\", onChange)\n+    setValue(result.matches)\n+\n+    return () => result.removeEventListener(\"change\", onChange)\n+  }, [query])\n+\n+  return value\n+}\n+\n+// <---------- STEPS ---------->\n+\n+type StepItem = {\n+  id?: string\n+  label?: string\n+  description?: string\n+  icon?: IconType\n+  optional?: boolean\n+}\n+\n+interface StepOptions {\n+  orientation?: \"vertical\" | \"horizontal\"\n+  state?: \"loading\" | \"error\"\n+  responsive?: boolean\n+  checkIcon?: IconType\n+  errorIcon?: IconType\n+  onClickStep?: (step: number, setStep: (step: number) => void) => void\n+  mobileBreakpoint?: string\n+  variant?: \"circle\" | \"circle-alt\" | \"line\"\n+  expandVerticalSteps?: boolean\n+  size?: \"sm\" | \"md\" | \"lg\"\n+  styles?: {\n+    /** Styles for the main container */\n+    \"main-container\"?: string\n+    /** Styles for the horizontal step */\n+    \"horizontal-step\"?: string\n+    /** Styles for the horizontal step container (button and labels) */\n+    \"horizontal-step-container\"?: string\n+    /** Styles for the vertical step */\n+    \"vertical-step\"?: string\n+    /** Styles for the vertical step container (button and labels) */\n+    \"vertical-step-container\"?: string\n+    /** Styles for the vertical step content */\n+    \"vertical-step-content\"?: string\n+    /** Styles for the step button container */\n+    \"step-button-container\"?: string\n+    /** Styles for the label and description container */\n+    \"step-label-container\"?: string\n+    /** Styles for the step label */\n+    \"step-label\"?: string\n+    /** Styles for the step description */\n+    \"step-description\"?: string\n+  }\n+  variables?: {\n+    \"--step-icon-size\"?: string\n+    \"--step-gap\"?: string\n+  }\n+  scrollTracking?: boolean\n+}\n+interface StepperProps extends StepOptions {\n+  children?: React.ReactNode\n+  className?: string\n+  initialStep: number\n+  steps: StepItem[]\n+}\n+\n+const VARIABLE_SIZES = {\n+  sm: \"36px\",\n+  md: \"40px\",\n+  lg: \"44px\",\n+}\n+\n+const Stepper = React.forwardRef<HTMLDivElement, StepperProps>(\n+  (props, ref: React.Ref<HTMLDivElement>) => {\n+    const {\n+      className,\n+      children,\n+      orientation: orientationProp,\n+      state,\n+      responsive,\n+      checkIcon,\n+      errorIcon,\n+      onClickStep,\n+      mobileBreakpoint,\n+      expandVerticalSteps = false,\n+      initialStep = 0,\n+      size,\n+      steps,\n+      variant,\n+      styles,\n+      variables,\n+      scrollTracking = false,\n+      ...rest\n+    } = props\n+\n+    const childArr = React.Children.toArray(children)\n+\n+    const items = [] as React.ReactElement[]\n+\n+    const footer = childArr.map((child, _index) => {\n+      if (!React.isValidElement(child)) {\n+        throw new Error(\"Stepper children must be valid React elements.\")\n+      }\n+      if (child.type === Step) {\n+        items.push(child)\n+        return null\n+      }\n+\n+      return child\n+    })\n+\n+    const stepCount = items.length\n+\n+    const isMobile = useMediaQuery(\n+      `(max-width: ${mobileBreakpoint || \"768px\"})`\n+    )\n+\n+    const clickable = !!onClickStep\n+\n+    const orientation = isMobile && responsive ? \"vertical\" : orientationProp\n+\n+    const isVertical = orientation === \"vertical\"\n+\n+    return (\n+      <StepperProvider\n+        value={{\n+          initialStep,\n+          orientation,\n+          state,\n+          size,\n+          responsive,\n+          checkIcon,\n+          errorIcon,\n+          onClickStep,\n+          clickable,\n+          stepCount,\n+          isVertical,\n+          variant: variant || \"circle\",\n+          expandVerticalSteps,\n+          steps,\n+          scrollTracking,\n+          styles,\n+        }}\n+      >\n+        <div\n+          ref={ref}\n+          className={cn(\n+            \"stepper__main-container\",\n+            \"flex w-full flex-wrap\",\n+            stepCount === 1 ? \"justify-end\" : \"justify-between\",\n+            orientation === \"vertical\" ? \"flex-col\" : \"flex-row\",\n+            variant === \"line\" && orientation === \"horizontal\" && \"gap-4\",\n+            className,\n+            styles?.[\"main-container\"]\n+          )}\n+          style={\n+            {\n+              \"--step-icon-size\":\n+                variables?.[\"--step-icon-size\"] ||\n+                `${VARIABLE_SIZES[size || \"md\"]}`,\n+              \"--step-gap\": variables?.[\"--step-gap\"] || \"8px\",\n+            } as React.CSSProperties\n+          }\n+          {...rest}\n+        >\n+          <VerticalContent>{items}</VerticalContent>\n+        </div>\n+        {orientation === \"horizontal\" && (\n+          <HorizontalContent>{items}</HorizontalContent>\n+        )}\n+        {footer}\n+      </StepperProvider>\n+    )\n+  }\n+)\n+\n+Stepper.defaultProps = {\n+  size: \"md\",\n+  orientation: \"horizontal\",\n+  responsive: true,\n+}\n+\n+const VerticalContent = ({ children }: { children: React.ReactNode }) => {\n+  const { activeStep } = useStepper()\n+\n+  const childArr = React.Children.toArray(children)\n+  const stepCount = childArr.length\n+\n+  return (\n+    <>\n+      {React.Children.map(children, (child, i) => {\n+        const isCompletedStep =\n+          (React.isValidElement(child) &&\n+            (child.props as any).isCompletedStep) ??\n+          i < activeStep\n+        const isLastStep = i === stepCount - 1\n+        const isCurrentStep = i === activeStep\n+\n+        const stepProps = {\n+          index: i,\n+          isCompletedStep,\n+          isCurrentStep,\n+          isLastStep,\n+        }\n+\n+        if (React.isValidElement(child)) {\n+          return React.cloneElement(child, stepProps)\n+        }\n+        return null\n+      })}\n+    </>\n+  )\n+}\n+\n+const HorizontalContent = ({ children }: { children: React.ReactNode }) => {\n+  const { activeStep } = useStepper()\n+  const childArr = React.Children.toArray(children)\n+\n+  if (activeStep > childArr.length) {\n+    return null\n+  }\n+\n+  return (\n+    <>\n+      {React.Children.map(childArr[activeStep], (node) => {\n+        if (!React.isValidElement(node)) {\n+          return null\n+        }\n+        return React.Children.map(node.props.children, (childNode) => childNode)\n+      })}\n+    </>\n+  )\n+}\n+\n+// <---------- STEP ---------->\n+\n+interface StepProps extends React.HTMLAttributes<HTMLLIElement> {\n+  label?: string | React.ReactNode\n+  description?: string\n+  icon?: IconType\n+  state?: \"loading\" | \"error\"\n+  checkIcon?: IconType\n+  errorIcon?: IconType\n+  isCompletedStep?: boolean\n+  isKeepError?: boolean\n+  onClickStep?: (step: number, setStep: (step: number) => void) => void\n+}\n+\n+interface StepSharedProps extends StepProps {\n+  isLastStep?: boolean\n+  isCurrentStep?: boolean\n+  index?: number\n+  hasVisited: boolean | undefined\n+  isError?: boolean\n+  isLoading?: boolean\n+}\n+\n+// Props which shouldn't be passed to to the Step component from the user\n+interface StepInternalConfig {\n+  index: number\n+  isCompletedStep?: boolean\n+  isCurrentStep?: boolean\n+  isLastStep?: boolean\n+}\n+\n+interface FullStepProps extends StepProps, StepInternalConfig {}\n+\n+const Step = React.forwardRef<HTMLLIElement, StepProps>(\n+  (props, ref: React.Ref<any>) => {\n+    const {\n+      children,\n+      description,\n+      icon,\n+      state,\n+      checkIcon,\n+      errorIcon,\n+      index,\n+      isCompletedStep,\n+      isCurrentStep,\n+      isLastStep,\n+      isKeepError,\n+      label,\n+      onClickStep,\n+    } = props as FullStepProps\n+\n+    const { isVertical, isError, isLoading, clickable } = useStepper()\n+\n+    const hasVisited = isCurrentStep || isCompletedStep\n+\n+    const sharedProps = {\n+      isLastStep,\n+      isCompletedStep,\n+      isCurrentStep,\n+      index,\n+      isError,\n+      isLoading,\n+      clickable,\n+      label,\n+      description,\n+      hasVisited,\n+      icon,\n+      isKeepError,\n+      checkIcon,\n+      state,\n+      errorIcon,\n+      onClickStep,\n+    }\n+\n+    const renderStep = () => {\n+      switch (isVertical) {\n+        case true:\n+          return (\n+            <VerticalStep ref={ref} {...sharedProps}>\n+              {children}\n+            </VerticalStep>\n+          )\n+        default:\n+          return <HorizontalStep ref={ref} {...sharedProps} />\n+      }\n+    }\n+\n+    return renderStep()\n+  }\n+)\n+\n+// <---------- VERTICAL STEP ---------->\n+\n+type VerticalStepProps = StepSharedProps & {\n+  children?: React.ReactNode\n+}\n+\n+const verticalStepVariants = cva(\n+  [\n+    \"flex flex-col relative transition-all duration-200\",\n+    \"data-[completed=true]:[&:not(:last-child)]:after:bg-primary\",\n+    \"data-[invalid=true]:[&:not(:last-child)]:after:bg-destructive\",\n+  ],\n+  {\n+    variants: {\n+      variant: {\n+        circle: cn(\n+          \"[&:not(:last-child)]:pb-[var(--step-gap)] [&:not(:last-child)]:gap-[var(--step-gap)]\",\n+          \"[&:not(:last-child)]:after:content-[''] [&:not(:last-child)]:after:w-[2px] [&:not(:last-child)]:after:bg-border\",\n+          \"[&:not(:last-child)]:after:inset-x-[calc(var(--step-icon-size)/2)]\",\n+          \"[&:not(:last-child)]:after:absolute\",\n+          \"[&:not(:last-child)]:after:top-[calc(var(--step-icon-size)+var(--step-gap))]\",\n+          \"[&:not(:last-child)]:after:bottom-[var(--step-gap)]\",\n+          \"[&:not(:last-child)]:after:transition-all [&:not(:last-child)]:after:duration-200\"\n+        ),\n+        line: \"flex-1 border-t-0 mb-4\",\n+      },\n+    },\n+  }\n+)\n+\n+const VerticalStep = React.forwardRef<HTMLDivElement, VerticalStepProps>(\n+  (props, ref) => {\n+    const {\n+      children,\n+      index,\n+      isCompletedStep,\n+      isCurrentStep,\n+      label,\n+      description,\n+      icon,\n+      hasVisited,\n+      state,\n+      checkIcon: checkIconProp,\n+      errorIcon: errorIconProp,\n+      onClickStep,\n+    } = props\n+\n+    const {\n+      checkIcon: checkIconContext,\n+      errorIcon: errorIconContext,\n+      isError,\n+      isLoading,\n+      variant,\n+      onClickStep: onClickStepGeneral,\n+      clickable,\n+      expandVerticalSteps,\n+      styles,\n+      scrollTracking,\n+      orientation,\n+      steps,\n+      setStep,\n+      isLastStep: isLastStepCurrentStep,\n+      previousActiveStep,\n+    } = useStepper()\n+\n+    const opacity = hasVisited ? 1 : 0.8\n+    const localIsLoading = isLoading || state === \"loading\"\n+    const localIsError = isError || state === \"error\"\n+\n+    const isLastStep = index === steps.length - 1\n+\n+    const active =\n+      variant === \"line\" ? isCompletedStep || isCurrentStep : isCompletedStep\n+    const checkIcon = checkIconProp || checkIconContext\n+    const errorIcon = errorIconProp || errorIconContext\n+\n+    const renderChildren = () => {\n+      if (!expandVerticalSteps) {\n+        return (\n+          <Collapsible open={isCurrentStep}>\n+            <CollapsibleContent\n+              ref={(node) => {\n+                if (\n+                  // If the step is the first step and the previous step\n+                  // was the last step or if the step is not the first step\n+                  // This prevents initial scrolling when the stepper\n+                  // is located anywhere other than the top of the view.\n+                  scrollTracking &&\n+                  ((index === 0 &&\n+                    previousActiveStep &&\n+                    previousActiveStep === steps.length) ||\n+                    (index && index > 0))\n+                ) {\n+                  node?.scrollIntoView({\n+                    behavior: \"smooth\",\n+                    block: \"center\",\n+                  })\n+                }\n+              }}\n+              className=\"overflow-hidden data-[state=open]:animate-collapsible-down data-[state=closed]:animate-collapsible-up\"\n+            >\n+              {children}\n+            </CollapsibleContent>\n+          </Collapsible>\n+        )\n+      }\n+      return children\n+    }\n+\n+    return (\n+      <div\n+        ref={ref}\n+        className={cn(\n+          \"stepper__vertical-step\",\n+          verticalStepVariants({\n+            variant: variant?.includes(\"circle\") ? \"circle\" : \"line\",\n+          }),\n+          isLastStepCurrentStep && \"gap-[var(--step-gap)]\",\n+          styles?.[\"vertical-step\"]\n+        )}\n+        data-optional={steps[index || 0]?.optional}\n+        data-completed={isCompletedStep}\n+        data-active={active}\n+        data-clickable={clickable || !!onClickStep}\n+        data-invalid={localIsError}\n+        onClick={() =>",
        "comment_created_at": "2024-06-30T00:00:50+00:00",
        "comment_author": "ImanMahmoudinasab",
        "comment_body": "@damianricobelli you can find more details here: \r\nhttps://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/no-static-element-interactions.md",
        "pr_file_module": null
      },
      {
        "comment_id": "1660043332",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 318,
        "pr_file": "apps/www/registry/default/ui/stepper.tsx",
        "discussion_id": "1659973559",
        "commented_code": "@@ -0,0 +1,1021 @@\n+\"use client\"\n+\n+import * as React from \"react\"\n+import { cva } from \"class-variance-authority\"\n+import { CheckIcon, Loader2, LucideIcon, X } from \"lucide-react\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Button } from \"@/registry/default/ui/button\"\n+import {\n+  Collapsible,\n+  CollapsibleContent,\n+} from \"@/registry/default/ui/collapsible\"\n+\n+// <---------- CONTEXT ---------->\n+\n+interface StepperContextValue extends StepperProps {\n+  clickable?: boolean\n+  isError?: boolean\n+  isLoading?: boolean\n+  isVertical?: boolean\n+  stepCount?: number\n+  expandVerticalSteps?: boolean\n+  activeStep: number\n+  initialStep: number\n+}\n+\n+const StepperContext = React.createContext<\n+  StepperContextValue & {\n+    nextStep: () => void\n+    prevStep: () => void\n+    resetSteps: () => void\n+    setStep: (step: number) => void\n+  }\n+>({\n+  steps: [],\n+  activeStep: 0,\n+  initialStep: 0,\n+  nextStep: () => {},\n+  prevStep: () => {},\n+  resetSteps: () => {},\n+  setStep: () => {},\n+})\n+\n+type StepperContextProviderProps = {\n+  value: Omit<StepperContextValue, \"activeStep\">\n+  children: React.ReactNode\n+}\n+\n+const StepperProvider = ({ value, children }: StepperContextProviderProps) => {\n+  const isError = value.state === \"error\"\n+  const isLoading = value.state === \"loading\"\n+\n+  const [activeStep, setActiveStep] = React.useState(value.initialStep)\n+\n+  const nextStep = () => {\n+    setActiveStep((prev) => prev + 1)\n+  }\n+\n+  const prevStep = () => {\n+    setActiveStep((prev) => prev - 1)\n+  }\n+\n+  const resetSteps = () => {\n+    setActiveStep(value.initialStep)\n+  }\n+\n+  const setStep = (step: number) => {\n+    setActiveStep(step)\n+  }\n+\n+  return (\n+    <StepperContext.Provider\n+      value={{\n+        ...value,\n+        isError,\n+        isLoading,\n+        activeStep,\n+        nextStep,\n+        prevStep,\n+        resetSteps,\n+        setStep,\n+      }}\n+    >\n+      {children}\n+    </StepperContext.Provider>\n+  )\n+}\n+\n+// <---------- HOOKS ---------->\n+\n+function usePrevious<T>(value: T): T | undefined {\n+  const ref = React.useRef<T>()\n+\n+  React.useEffect(() => {\n+    ref.current = value\n+  }, [value])\n+\n+  return ref.current\n+}\n+\n+function useStepper() {\n+  const context = React.useContext(StepperContext)\n+\n+  if (context === undefined) {\n+    throw new Error(\"useStepper must be used within a StepperProvider\")\n+  }\n+\n+  const { children, className, ...rest } = context\n+\n+  const isLastStep = context.activeStep === context.steps.length - 1\n+  const hasCompletedAllSteps = context.activeStep === context.steps.length\n+\n+  const previousActiveStep = usePrevious(context.activeStep)\n+\n+  const currentStep = context.steps[context.activeStep]\n+  const isOptionalStep = !!currentStep?.optional\n+\n+  const isDisabledStep = context.activeStep === 0\n+\n+  return {\n+    ...rest,\n+    isLastStep,\n+    hasCompletedAllSteps,\n+    isOptionalStep,\n+    isDisabledStep,\n+    currentStep,\n+    previousActiveStep,\n+  }\n+}\n+\n+function useMediaQuery(query: string) {\n+  const [value, setValue] = React.useState(false)\n+\n+  React.useEffect(() => {\n+    function onChange(event: MediaQueryListEvent) {\n+      setValue(event.matches)\n+    }\n+\n+    const result = matchMedia(query)\n+    result.addEventListener(\"change\", onChange)\n+    setValue(result.matches)\n+\n+    return () => result.removeEventListener(\"change\", onChange)\n+  }, [query])\n+\n+  return value\n+}\n+\n+// <---------- STEPS ---------->\n+\n+type StepItem = {\n+  id?: string\n+  label?: string\n+  description?: string\n+  icon?: IconType\n+  optional?: boolean\n+}\n+\n+interface StepOptions {\n+  orientation?: \"vertical\" | \"horizontal\"\n+  state?: \"loading\" | \"error\"\n+  responsive?: boolean\n+  checkIcon?: IconType\n+  errorIcon?: IconType\n+  onClickStep?: (step: number, setStep: (step: number) => void) => void\n+  mobileBreakpoint?: string\n+  variant?: \"circle\" | \"circle-alt\" | \"line\"\n+  expandVerticalSteps?: boolean\n+  size?: \"sm\" | \"md\" | \"lg\"\n+  styles?: {\n+    /** Styles for the main container */\n+    \"main-container\"?: string\n+    /** Styles for the horizontal step */\n+    \"horizontal-step\"?: string\n+    /** Styles for the horizontal step container (button and labels) */\n+    \"horizontal-step-container\"?: string\n+    /** Styles for the vertical step */\n+    \"vertical-step\"?: string\n+    /** Styles for the vertical step container (button and labels) */\n+    \"vertical-step-container\"?: string\n+    /** Styles for the vertical step content */\n+    \"vertical-step-content\"?: string\n+    /** Styles for the step button container */\n+    \"step-button-container\"?: string\n+    /** Styles for the label and description container */\n+    \"step-label-container\"?: string\n+    /** Styles for the step label */\n+    \"step-label\"?: string\n+    /** Styles for the step description */\n+    \"step-description\"?: string\n+  }\n+  variables?: {\n+    \"--step-icon-size\"?: string\n+    \"--step-gap\"?: string\n+  }\n+  scrollTracking?: boolean\n+}\n+interface StepperProps extends StepOptions {\n+  children?: React.ReactNode\n+  className?: string\n+  initialStep: number\n+  steps: StepItem[]\n+}\n+\n+const VARIABLE_SIZES = {\n+  sm: \"36px\",\n+  md: \"40px\",\n+  lg: \"44px\",\n+}\n+\n+const Stepper = React.forwardRef<HTMLDivElement, StepperProps>(\n+  (props, ref: React.Ref<HTMLDivElement>) => {\n+    const {\n+      className,\n+      children,\n+      orientation: orientationProp,\n+      state,\n+      responsive,\n+      checkIcon,\n+      errorIcon,\n+      onClickStep,\n+      mobileBreakpoint,\n+      expandVerticalSteps = false,\n+      initialStep = 0,\n+      size,\n+      steps,\n+      variant,\n+      styles,\n+      variables,\n+      scrollTracking = false,\n+      ...rest\n+    } = props\n+\n+    const childArr = React.Children.toArray(children)\n+\n+    const items = [] as React.ReactElement[]\n+\n+    const footer = childArr.map((child, _index) => {\n+      if (!React.isValidElement(child)) {\n+        throw new Error(\"Stepper children must be valid React elements.\")\n+      }\n+      if (child.type === Step) {\n+        items.push(child)\n+        return null\n+      }\n+\n+      return child\n+    })\n+\n+    const stepCount = items.length\n+\n+    const isMobile = useMediaQuery(\n+      `(max-width: ${mobileBreakpoint || \"768px\"})`\n+    )\n+\n+    const clickable = !!onClickStep\n+\n+    const orientation = isMobile && responsive ? \"vertical\" : orientationProp\n+\n+    const isVertical = orientation === \"vertical\"\n+\n+    return (\n+      <StepperProvider\n+        value={{\n+          initialStep,\n+          orientation,\n+          state,\n+          size,\n+          responsive,\n+          checkIcon,\n+          errorIcon,\n+          onClickStep,\n+          clickable,\n+          stepCount,\n+          isVertical,\n+          variant: variant || \"circle\",\n+          expandVerticalSteps,\n+          steps,\n+          scrollTracking,\n+          styles,\n+        }}\n+      >\n+        <div\n+          ref={ref}\n+          className={cn(\n+            \"stepper__main-container\",\n+            \"flex w-full flex-wrap\",\n+            stepCount === 1 ? \"justify-end\" : \"justify-between\",\n+            orientation === \"vertical\" ? \"flex-col\" : \"flex-row\",\n+            variant === \"line\" && orientation === \"horizontal\" && \"gap-4\",\n+            className,\n+            styles?.[\"main-container\"]\n+          )}\n+          style={\n+            {\n+              \"--step-icon-size\":\n+                variables?.[\"--step-icon-size\"] ||\n+                `${VARIABLE_SIZES[size || \"md\"]}`,\n+              \"--step-gap\": variables?.[\"--step-gap\"] || \"8px\",\n+            } as React.CSSProperties\n+          }\n+          {...rest}\n+        >\n+          <VerticalContent>{items}</VerticalContent>\n+        </div>\n+        {orientation === \"horizontal\" && (\n+          <HorizontalContent>{items}</HorizontalContent>\n+        )}\n+        {footer}\n+      </StepperProvider>\n+    )\n+  }\n+)\n+\n+Stepper.defaultProps = {\n+  size: \"md\",\n+  orientation: \"horizontal\",\n+  responsive: true,\n+}\n+\n+const VerticalContent = ({ children }: { children: React.ReactNode }) => {\n+  const { activeStep } = useStepper()\n+\n+  const childArr = React.Children.toArray(children)\n+  const stepCount = childArr.length\n+\n+  return (\n+    <>\n+      {React.Children.map(children, (child, i) => {\n+        const isCompletedStep =\n+          (React.isValidElement(child) &&\n+            (child.props as any).isCompletedStep) ??\n+          i < activeStep\n+        const isLastStep = i === stepCount - 1\n+        const isCurrentStep = i === activeStep\n+\n+        const stepProps = {\n+          index: i,\n+          isCompletedStep,\n+          isCurrentStep,\n+          isLastStep,\n+        }\n+\n+        if (React.isValidElement(child)) {\n+          return React.cloneElement(child, stepProps)\n+        }\n+        return null\n+      })}\n+    </>\n+  )\n+}\n+\n+const HorizontalContent = ({ children }: { children: React.ReactNode }) => {\n+  const { activeStep } = useStepper()\n+  const childArr = React.Children.toArray(children)\n+\n+  if (activeStep > childArr.length) {\n+    return null\n+  }\n+\n+  return (\n+    <>\n+      {React.Children.map(childArr[activeStep], (node) => {\n+        if (!React.isValidElement(node)) {\n+          return null\n+        }\n+        return React.Children.map(node.props.children, (childNode) => childNode)\n+      })}\n+    </>\n+  )\n+}\n+\n+// <---------- STEP ---------->\n+\n+interface StepProps extends React.HTMLAttributes<HTMLLIElement> {\n+  label?: string | React.ReactNode\n+  description?: string\n+  icon?: IconType\n+  state?: \"loading\" | \"error\"\n+  checkIcon?: IconType\n+  errorIcon?: IconType\n+  isCompletedStep?: boolean\n+  isKeepError?: boolean\n+  onClickStep?: (step: number, setStep: (step: number) => void) => void\n+}\n+\n+interface StepSharedProps extends StepProps {\n+  isLastStep?: boolean\n+  isCurrentStep?: boolean\n+  index?: number\n+  hasVisited: boolean | undefined\n+  isError?: boolean\n+  isLoading?: boolean\n+}\n+\n+// Props which shouldn't be passed to to the Step component from the user\n+interface StepInternalConfig {\n+  index: number\n+  isCompletedStep?: boolean\n+  isCurrentStep?: boolean\n+  isLastStep?: boolean\n+}\n+\n+interface FullStepProps extends StepProps, StepInternalConfig {}\n+\n+const Step = React.forwardRef<HTMLLIElement, StepProps>(\n+  (props, ref: React.Ref<any>) => {\n+    const {\n+      children,\n+      description,\n+      icon,\n+      state,\n+      checkIcon,\n+      errorIcon,\n+      index,\n+      isCompletedStep,\n+      isCurrentStep,\n+      isLastStep,\n+      isKeepError,\n+      label,\n+      onClickStep,\n+    } = props as FullStepProps\n+\n+    const { isVertical, isError, isLoading, clickable } = useStepper()\n+\n+    const hasVisited = isCurrentStep || isCompletedStep\n+\n+    const sharedProps = {\n+      isLastStep,\n+      isCompletedStep,\n+      isCurrentStep,\n+      index,\n+      isError,\n+      isLoading,\n+      clickable,\n+      label,\n+      description,\n+      hasVisited,\n+      icon,\n+      isKeepError,\n+      checkIcon,\n+      state,\n+      errorIcon,\n+      onClickStep,\n+    }\n+\n+    const renderStep = () => {\n+      switch (isVertical) {\n+        case true:\n+          return (\n+            <VerticalStep ref={ref} {...sharedProps}>\n+              {children}\n+            </VerticalStep>\n+          )\n+        default:\n+          return <HorizontalStep ref={ref} {...sharedProps} />\n+      }\n+    }\n+\n+    return renderStep()\n+  }\n+)\n+\n+// <---------- VERTICAL STEP ---------->\n+\n+type VerticalStepProps = StepSharedProps & {\n+  children?: React.ReactNode\n+}\n+\n+const verticalStepVariants = cva(\n+  [\n+    \"flex flex-col relative transition-all duration-200\",\n+    \"data-[completed=true]:[&:not(:last-child)]:after:bg-primary\",\n+    \"data-[invalid=true]:[&:not(:last-child)]:after:bg-destructive\",\n+  ],\n+  {\n+    variants: {\n+      variant: {\n+        circle: cn(\n+          \"[&:not(:last-child)]:pb-[var(--step-gap)] [&:not(:last-child)]:gap-[var(--step-gap)]\",\n+          \"[&:not(:last-child)]:after:content-[''] [&:not(:last-child)]:after:w-[2px] [&:not(:last-child)]:after:bg-border\",\n+          \"[&:not(:last-child)]:after:inset-x-[calc(var(--step-icon-size)/2)]\",\n+          \"[&:not(:last-child)]:after:absolute\",\n+          \"[&:not(:last-child)]:after:top-[calc(var(--step-icon-size)+var(--step-gap))]\",\n+          \"[&:not(:last-child)]:after:bottom-[var(--step-gap)]\",\n+          \"[&:not(:last-child)]:after:transition-all [&:not(:last-child)]:after:duration-200\"\n+        ),\n+        line: \"flex-1 border-t-0 mb-4\",\n+      },\n+    },\n+  }\n+)\n+\n+const VerticalStep = React.forwardRef<HTMLDivElement, VerticalStepProps>(\n+  (props, ref) => {\n+    const {\n+      children,\n+      index,\n+      isCompletedStep,\n+      isCurrentStep,\n+      label,\n+      description,\n+      icon,\n+      hasVisited,\n+      state,\n+      checkIcon: checkIconProp,\n+      errorIcon: errorIconProp,\n+      onClickStep,\n+    } = props\n+\n+    const {\n+      checkIcon: checkIconContext,\n+      errorIcon: errorIconContext,\n+      isError,\n+      isLoading,\n+      variant,\n+      onClickStep: onClickStepGeneral,\n+      clickable,\n+      expandVerticalSteps,\n+      styles,\n+      scrollTracking,\n+      orientation,\n+      steps,\n+      setStep,\n+      isLastStep: isLastStepCurrentStep,\n+      previousActiveStep,\n+    } = useStepper()\n+\n+    const opacity = hasVisited ? 1 : 0.8\n+    const localIsLoading = isLoading || state === \"loading\"\n+    const localIsError = isError || state === \"error\"\n+\n+    const isLastStep = index === steps.length - 1\n+\n+    const active =\n+      variant === \"line\" ? isCompletedStep || isCurrentStep : isCompletedStep\n+    const checkIcon = checkIconProp || checkIconContext\n+    const errorIcon = errorIconProp || errorIconContext\n+\n+    const renderChildren = () => {\n+      if (!expandVerticalSteps) {\n+        return (\n+          <Collapsible open={isCurrentStep}>\n+            <CollapsibleContent\n+              ref={(node) => {\n+                if (\n+                  // If the step is the first step and the previous step\n+                  // was the last step or if the step is not the first step\n+                  // This prevents initial scrolling when the stepper\n+                  // is located anywhere other than the top of the view.\n+                  scrollTracking &&\n+                  ((index === 0 &&\n+                    previousActiveStep &&\n+                    previousActiveStep === steps.length) ||\n+                    (index && index > 0))\n+                ) {\n+                  node?.scrollIntoView({\n+                    behavior: \"smooth\",\n+                    block: \"center\",\n+                  })\n+                }\n+              }}\n+              className=\"overflow-hidden data-[state=open]:animate-collapsible-down data-[state=closed]:animate-collapsible-up\"\n+            >\n+              {children}\n+            </CollapsibleContent>\n+          </Collapsible>\n+        )\n+      }\n+      return children\n+    }\n+\n+    return (\n+      <div\n+        ref={ref}\n+        className={cn(\n+          \"stepper__vertical-step\",\n+          verticalStepVariants({\n+            variant: variant?.includes(\"circle\") ? \"circle\" : \"line\",\n+          }),\n+          isLastStepCurrentStep && \"gap-[var(--step-gap)]\",\n+          styles?.[\"vertical-step\"]\n+        )}\n+        data-optional={steps[index || 0]?.optional}\n+        data-completed={isCompletedStep}\n+        data-active={active}\n+        data-clickable={clickable || !!onClickStep}\n+        data-invalid={localIsError}\n+        onClick={() =>",
        "comment_created_at": "2024-06-30T00:09:25+00:00",
        "comment_author": "damianricobelli",
        "comment_body": "Thank you for the details! I can review this and improve it in the coming weeks",
        "pr_file_module": null
      }
    ]
  }
]