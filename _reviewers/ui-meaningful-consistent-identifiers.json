[
  {
    "discussion_id": "1984712326",
    "pr_number": 6868,
    "pr_file": "apps/v4/registry/new-york-v4/ui/badge.tsx",
    "created_at": "2025-03-07T09:14:30+00:00",
    "commented_code": "import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n import { cva, type VariantProps } from \"class-variance-authority\"\n+import { Slot } from \"radix-ui\"",
    "repo_full_name": "shadcn-ui/ui",
    "discussion_comments": [
      {
        "comment_id": "1984712326",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 6868,
        "pr_file": "apps/v4/registry/new-york-v4/ui/badge.tsx",
        "discussion_id": "1984712326",
        "commented_code": "@@ -1,6 +1,6 @@\n import * as React from \"react\"\n-import { Slot } from \"@radix-ui/react-slot\"\n import { cva, type VariantProps } from \"class-variance-authority\"\n+import { Slot } from \"radix-ui\"",
        "comment_created_at": "2025-03-07T09:14:30+00:00",
        "comment_author": "Kamahl19",
        "comment_body": "to keep it consistent i would do import { Slot as SlotPrimitive } . Also it looks weird to do Slot.Slot",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1413157608",
    "pr_number": 1616,
    "pr_file": "apps/www/registry/default/ui/multi-select.tsx",
    "created_at": "2023-12-03T17:16:36+00:00",
    "commented_code": "+import * as React from \"react\"\n+import { cn } from \"lib/utils\"\n+import { Check, ChevronsUpDown, X } from \"lucide-react\"\n+\n+import { Badge } from \"@/registry/default/ui/badge\"\n+import { Button } from \"@/registry/default/ui/button\"\n+import {\n+  Command,\n+  CommandEmpty,\n+  CommandGroup,\n+  CommandInput,\n+  CommandItem,\n+} from \"@/registry/default/ui/command\"\n+import {\n+  Popover,\n+  PopoverContent,\n+  PopoverTrigger,\n+} from \"@/registry/default/ui/popover\"\n+\n+export type OptionType = Record<\"value\" | \"label\", string>\n+\n+interface MultiSelectProps {\n+  options: Record<\"value\" | \"label\", string>[]",
    "repo_full_name": "shadcn-ui/ui",
    "discussion_comments": [
      {
        "comment_id": "1413157608",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 1616,
        "pr_file": "apps/www/registry/default/ui/multi-select.tsx",
        "discussion_id": "1413157608",
        "commented_code": "@@ -0,0 +1,161 @@\n+import * as React from \"react\"\n+import { cn } from \"lib/utils\"\n+import { Check, ChevronsUpDown, X } from \"lucide-react\"\n+\n+import { Badge } from \"@/registry/default/ui/badge\"\n+import { Button } from \"@/registry/default/ui/button\"\n+import {\n+  Command,\n+  CommandEmpty,\n+  CommandGroup,\n+  CommandInput,\n+  CommandItem,\n+} from \"@/registry/default/ui/command\"\n+import {\n+  Popover,\n+  PopoverContent,\n+  PopoverTrigger,\n+} from \"@/registry/default/ui/popover\"\n+\n+export type OptionType = Record<\"value\" | \"label\", string>\n+\n+interface MultiSelectProps {\n+  options: Record<\"value\" | \"label\", string>[]",
        "comment_created_at": "2023-12-03T17:16:36+00:00",
        "comment_author": "jonatan-kruse",
        "comment_body": "Why not use the `OptionType` here that is defined just above?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1583736846",
    "pr_number": 3374,
    "pr_file": "apps/www/registry/default/ui/timeline.tsx",
    "created_at": "2024-04-29T20:45:11+00:00",
    "commented_code": "+import React from \"react\"\n+import { VariantProps, cva } from \"class-variance-authority\"\n+import { Check, Circle, X } from \"lucide-react\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const timelineVariants = cva(\"flex flex-col items-stretch\", {\n+  variants: {\n+    positions: {\n+      left: \"[&>li]:grid-cols-[0_min-content_1fr]\",\n+      right: \"[&>li]:grid-cols-[1fr_min-content]\",\n+      center: \"[&>li]:grid-cols-[1fr_min-content_1fr]\",\n+    },\n+  },\n+  defaultVariants: {\n+    positions: \"left\",\n+  },\n+})\n+\n+interface TimelineProps\n+  extends React.HTMLAttributes<HTMLUListElement>,\n+    VariantProps<typeof timelineVariants> {}\n+\n+const Timeline = React.forwardRef<HTMLUListElement, TimelineProps>(\n+  ({ children, className, positions, ...props }, ref) => {\n+    return (\n+      <ul\n+        className={cn(timelineVariants({ positions }), className)}\n+        ref={ref}\n+        {...props}\n+      >\n+        {children}\n+      </ul>\n+    )\n+  }\n+)\n+Timeline.displayName = \"Timeline\"\n+\n+const timelineItemVariants = cva(\"grid items-center gap-x-2\", {\n+  variants: {\n+    status: {\n+      done: \"text-primary\",\n+      default: \"text-muted-foreground\",\n+    },\n+  },\n+  defaultVariants: {\n+    status: \"default\",\n+  },\n+})\n+\n+interface TimelineItemProps\n+  extends React.HTMLAttributes<HTMLLIElement>,\n+    VariantProps<typeof timelineItemVariants> {}\n+\n+const TimelineItem = React.forwardRef<HTMLLIElement, TimelineItemProps>(\n+  ({ className, status, ...props }, ref) => (\n+    <li\n+      className={cn(timelineItemVariants({ status }), className)}\n+      ref={ref}\n+      {...props}\n+    />\n+  )\n+)\n+TimelineItem.displayName = \"TimelineItem\"\n+\n+const timelineDotVariants = cva(\n+  \"col-start-2 col-end-3 row-start-1 row-end-1 flex size-4 items-center justify-center rounded-full border border-current\",\n+  {\n+    variants: {\n+      status: {\n+        default: \"[&>svg]:hidden\",\n+        current:\n+          \"[&>.lucide-circle]:fill-current [&>.lucide-circle]:text-current [&>svg:not(.lucide-circle)]:hidden\",\n+        done: \"bg-primary [&>.lucide-check]:text-background [&>svg:not(.lucide-check)]:hidden\",\n+        error:\n+          \"border-destructive bg-destructive [&>.lucide-x]:text-background [&>svg:not(.lucide-x)]:hidden\",\n+      },\n+    },\n+    defaultVariants: {\n+      status: \"default\",\n+    },\n+  }\n+)\n+\n+interface TimelineDotProps\n+  extends React.HTMLAttributes<HTMLDivElement>,\n+    VariantProps<typeof timelineDotVariants> {\n+  customIcon?: React.ReactNode\n+}\n+\n+const TimelineDot = React.forwardRef<HTMLDivElement, TimelineDotProps>(\n+  ({ className, status, customIcon, ...props }, ref) => (\n+    <div\n+      role=\"status\"\n+      className={cn(\"timeline-dot\", timelineDotVariants({ status }), className)}\n+      ref={ref}\n+      {...props}\n+    >\n+      <Circle className=\"size-2.5\" />\n+      <Check className=\"size-3\" />\n+      <X className=\"size-3\" />\n+      {customIcon}\n+    </div>\n+  )\n+)\n+TimelineDot.displayName = \"TimelineDot\"\n+\n+const timelineContentVariants = cva(\n+  \"row-start-2 row-end-2 pb-8 text-muted-foreground\",\n+  {\n+    variants: {\n+      side: {\n+        right: \"col-start-3 col-end-4 mr-auto text-left\",\n+        left: \"col-start-1 col-end-2 ml-auto text-right\",\n+      },\n+    },\n+    defaultVariants: {\n+      side: \"right\",\n+    },\n+  }\n+)\n+\n+interface TimelineConent\n+  extends React.HTMLAttributes<HTMLParagraphElement>,\n+    VariantProps<typeof timelineContentVariants> {}\n+\n+const TimelineContent = React.forwardRef<HTMLParagraphElement, TimelineConent>(\n+  ({ className, side, ...props }, ref) => (\n+    <p\n+      className={cn(timelineContentVariants({ side }), className)}\n+      ref={ref}\n+      {...props}\n+    />\n+  )\n+)\n+TimelineContent.displayName = \"TimelineContent\"\n+\n+const timelineHeadingVariants = cva(\n+  \"row-start-1 row-end-1 line-clamp-1 max-w-full truncate\",\n+  {\n+    variants: {\n+      side: {\n+        right: \"col-start-3 col-end-4 mr-auto text-left\",\n+        left: \"col-start-1 col-end-2 ml-auto text-right\",\n+      },\n+      variant: {\n+        primary: \"text-base font-medium text-primary\",\n+        secondary: \"text-sm font-light text-muted-foreground\",\n+      },\n+    },\n+    defaultVariants: {\n+      side: \"right\",\n+      variant: \"primary\",\n+    },\n+  }\n+)\n+\n+interface TimelineConent\n+  extends React.HTMLAttributes<HTMLParagraphElement>,\n+    VariantProps<typeof timelineHeadingVariants> {}\n+\n+const TimelineHeading = React.forwardRef<HTMLParagraphElement, TimelineConent>(",
    "repo_full_name": "shadcn-ui/ui",
    "discussion_comments": [
      {
        "comment_id": "1583736846",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 3374,
        "pr_file": "apps/www/registry/default/ui/timeline.tsx",
        "discussion_id": "1583736846",
        "commented_code": "@@ -0,0 +1,205 @@\n+import React from \"react\"\n+import { VariantProps, cva } from \"class-variance-authority\"\n+import { Check, Circle, X } from \"lucide-react\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const timelineVariants = cva(\"flex flex-col items-stretch\", {\n+  variants: {\n+    positions: {\n+      left: \"[&>li]:grid-cols-[0_min-content_1fr]\",\n+      right: \"[&>li]:grid-cols-[1fr_min-content]\",\n+      center: \"[&>li]:grid-cols-[1fr_min-content_1fr]\",\n+    },\n+  },\n+  defaultVariants: {\n+    positions: \"left\",\n+  },\n+})\n+\n+interface TimelineProps\n+  extends React.HTMLAttributes<HTMLUListElement>,\n+    VariantProps<typeof timelineVariants> {}\n+\n+const Timeline = React.forwardRef<HTMLUListElement, TimelineProps>(\n+  ({ children, className, positions, ...props }, ref) => {\n+    return (\n+      <ul\n+        className={cn(timelineVariants({ positions }), className)}\n+        ref={ref}\n+        {...props}\n+      >\n+        {children}\n+      </ul>\n+    )\n+  }\n+)\n+Timeline.displayName = \"Timeline\"\n+\n+const timelineItemVariants = cva(\"grid items-center gap-x-2\", {\n+  variants: {\n+    status: {\n+      done: \"text-primary\",\n+      default: \"text-muted-foreground\",\n+    },\n+  },\n+  defaultVariants: {\n+    status: \"default\",\n+  },\n+})\n+\n+interface TimelineItemProps\n+  extends React.HTMLAttributes<HTMLLIElement>,\n+    VariantProps<typeof timelineItemVariants> {}\n+\n+const TimelineItem = React.forwardRef<HTMLLIElement, TimelineItemProps>(\n+  ({ className, status, ...props }, ref) => (\n+    <li\n+      className={cn(timelineItemVariants({ status }), className)}\n+      ref={ref}\n+      {...props}\n+    />\n+  )\n+)\n+TimelineItem.displayName = \"TimelineItem\"\n+\n+const timelineDotVariants = cva(\n+  \"col-start-2 col-end-3 row-start-1 row-end-1 flex size-4 items-center justify-center rounded-full border border-current\",\n+  {\n+    variants: {\n+      status: {\n+        default: \"[&>svg]:hidden\",\n+        current:\n+          \"[&>.lucide-circle]:fill-current [&>.lucide-circle]:text-current [&>svg:not(.lucide-circle)]:hidden\",\n+        done: \"bg-primary [&>.lucide-check]:text-background [&>svg:not(.lucide-check)]:hidden\",\n+        error:\n+          \"border-destructive bg-destructive [&>.lucide-x]:text-background [&>svg:not(.lucide-x)]:hidden\",\n+      },\n+    },\n+    defaultVariants: {\n+      status: \"default\",\n+    },\n+  }\n+)\n+\n+interface TimelineDotProps\n+  extends React.HTMLAttributes<HTMLDivElement>,\n+    VariantProps<typeof timelineDotVariants> {\n+  customIcon?: React.ReactNode\n+}\n+\n+const TimelineDot = React.forwardRef<HTMLDivElement, TimelineDotProps>(\n+  ({ className, status, customIcon, ...props }, ref) => (\n+    <div\n+      role=\"status\"\n+      className={cn(\"timeline-dot\", timelineDotVariants({ status }), className)}\n+      ref={ref}\n+      {...props}\n+    >\n+      <Circle className=\"size-2.5\" />\n+      <Check className=\"size-3\" />\n+      <X className=\"size-3\" />\n+      {customIcon}\n+    </div>\n+  )\n+)\n+TimelineDot.displayName = \"TimelineDot\"\n+\n+const timelineContentVariants = cva(\n+  \"row-start-2 row-end-2 pb-8 text-muted-foreground\",\n+  {\n+    variants: {\n+      side: {\n+        right: \"col-start-3 col-end-4 mr-auto text-left\",\n+        left: \"col-start-1 col-end-2 ml-auto text-right\",\n+      },\n+    },\n+    defaultVariants: {\n+      side: \"right\",\n+    },\n+  }\n+)\n+\n+interface TimelineConent\n+  extends React.HTMLAttributes<HTMLParagraphElement>,\n+    VariantProps<typeof timelineContentVariants> {}\n+\n+const TimelineContent = React.forwardRef<HTMLParagraphElement, TimelineConent>(\n+  ({ className, side, ...props }, ref) => (\n+    <p\n+      className={cn(timelineContentVariants({ side }), className)}\n+      ref={ref}\n+      {...props}\n+    />\n+  )\n+)\n+TimelineContent.displayName = \"TimelineContent\"\n+\n+const timelineHeadingVariants = cva(\n+  \"row-start-1 row-end-1 line-clamp-1 max-w-full truncate\",\n+  {\n+    variants: {\n+      side: {\n+        right: \"col-start-3 col-end-4 mr-auto text-left\",\n+        left: \"col-start-1 col-end-2 ml-auto text-right\",\n+      },\n+      variant: {\n+        primary: \"text-base font-medium text-primary\",\n+        secondary: \"text-sm font-light text-muted-foreground\",\n+      },\n+    },\n+    defaultVariants: {\n+      side: \"right\",\n+      variant: \"primary\",\n+    },\n+  }\n+)\n+\n+interface TimelineConent\n+  extends React.HTMLAttributes<HTMLParagraphElement>,\n+    VariantProps<typeof timelineHeadingVariants> {}\n+\n+const TimelineHeading = React.forwardRef<HTMLParagraphElement, TimelineConent>(",
        "comment_created_at": "2024-04-29T20:45:11+00:00",
        "comment_author": "zorro-ftw",
        "comment_body": "An interface with same name is already defined at line 123. In addition, I believe updating this one also works better to align with rest of the interface definitions in the file. Please consider this comment valid for `new-york` version as well.\r\n\r\n```suggestion\r\ninterface TimelineHeadingProps\r\n  extends React.HTMLAttributes<HTMLParagraphElement>,\r\n    VariantProps<typeof timelineHeadingVariants> {}\r\n\r\nconst TimelineHeading = React.forwardRef<HTMLParagraphElement, TimelineHeadingProps>(\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1585915822",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 3374,
        "pr_file": "apps/www/registry/default/ui/timeline.tsx",
        "discussion_id": "1583736846",
        "commented_code": "@@ -0,0 +1,205 @@\n+import React from \"react\"\n+import { VariantProps, cva } from \"class-variance-authority\"\n+import { Check, Circle, X } from \"lucide-react\"\n+\n+import { cn } from \"@/lib/utils\"\n+\n+const timelineVariants = cva(\"flex flex-col items-stretch\", {\n+  variants: {\n+    positions: {\n+      left: \"[&>li]:grid-cols-[0_min-content_1fr]\",\n+      right: \"[&>li]:grid-cols-[1fr_min-content]\",\n+      center: \"[&>li]:grid-cols-[1fr_min-content_1fr]\",\n+    },\n+  },\n+  defaultVariants: {\n+    positions: \"left\",\n+  },\n+})\n+\n+interface TimelineProps\n+  extends React.HTMLAttributes<HTMLUListElement>,\n+    VariantProps<typeof timelineVariants> {}\n+\n+const Timeline = React.forwardRef<HTMLUListElement, TimelineProps>(\n+  ({ children, className, positions, ...props }, ref) => {\n+    return (\n+      <ul\n+        className={cn(timelineVariants({ positions }), className)}\n+        ref={ref}\n+        {...props}\n+      >\n+        {children}\n+      </ul>\n+    )\n+  }\n+)\n+Timeline.displayName = \"Timeline\"\n+\n+const timelineItemVariants = cva(\"grid items-center gap-x-2\", {\n+  variants: {\n+    status: {\n+      done: \"text-primary\",\n+      default: \"text-muted-foreground\",\n+    },\n+  },\n+  defaultVariants: {\n+    status: \"default\",\n+  },\n+})\n+\n+interface TimelineItemProps\n+  extends React.HTMLAttributes<HTMLLIElement>,\n+    VariantProps<typeof timelineItemVariants> {}\n+\n+const TimelineItem = React.forwardRef<HTMLLIElement, TimelineItemProps>(\n+  ({ className, status, ...props }, ref) => (\n+    <li\n+      className={cn(timelineItemVariants({ status }), className)}\n+      ref={ref}\n+      {...props}\n+    />\n+  )\n+)\n+TimelineItem.displayName = \"TimelineItem\"\n+\n+const timelineDotVariants = cva(\n+  \"col-start-2 col-end-3 row-start-1 row-end-1 flex size-4 items-center justify-center rounded-full border border-current\",\n+  {\n+    variants: {\n+      status: {\n+        default: \"[&>svg]:hidden\",\n+        current:\n+          \"[&>.lucide-circle]:fill-current [&>.lucide-circle]:text-current [&>svg:not(.lucide-circle)]:hidden\",\n+        done: \"bg-primary [&>.lucide-check]:text-background [&>svg:not(.lucide-check)]:hidden\",\n+        error:\n+          \"border-destructive bg-destructive [&>.lucide-x]:text-background [&>svg:not(.lucide-x)]:hidden\",\n+      },\n+    },\n+    defaultVariants: {\n+      status: \"default\",\n+    },\n+  }\n+)\n+\n+interface TimelineDotProps\n+  extends React.HTMLAttributes<HTMLDivElement>,\n+    VariantProps<typeof timelineDotVariants> {\n+  customIcon?: React.ReactNode\n+}\n+\n+const TimelineDot = React.forwardRef<HTMLDivElement, TimelineDotProps>(\n+  ({ className, status, customIcon, ...props }, ref) => (\n+    <div\n+      role=\"status\"\n+      className={cn(\"timeline-dot\", timelineDotVariants({ status }), className)}\n+      ref={ref}\n+      {...props}\n+    >\n+      <Circle className=\"size-2.5\" />\n+      <Check className=\"size-3\" />\n+      <X className=\"size-3\" />\n+      {customIcon}\n+    </div>\n+  )\n+)\n+TimelineDot.displayName = \"TimelineDot\"\n+\n+const timelineContentVariants = cva(\n+  \"row-start-2 row-end-2 pb-8 text-muted-foreground\",\n+  {\n+    variants: {\n+      side: {\n+        right: \"col-start-3 col-end-4 mr-auto text-left\",\n+        left: \"col-start-1 col-end-2 ml-auto text-right\",\n+      },\n+    },\n+    defaultVariants: {\n+      side: \"right\",\n+    },\n+  }\n+)\n+\n+interface TimelineConent\n+  extends React.HTMLAttributes<HTMLParagraphElement>,\n+    VariantProps<typeof timelineContentVariants> {}\n+\n+const TimelineContent = React.forwardRef<HTMLParagraphElement, TimelineConent>(\n+  ({ className, side, ...props }, ref) => (\n+    <p\n+      className={cn(timelineContentVariants({ side }), className)}\n+      ref={ref}\n+      {...props}\n+    />\n+  )\n+)\n+TimelineContent.displayName = \"TimelineContent\"\n+\n+const timelineHeadingVariants = cva(\n+  \"row-start-1 row-end-1 line-clamp-1 max-w-full truncate\",\n+  {\n+    variants: {\n+      side: {\n+        right: \"col-start-3 col-end-4 mr-auto text-left\",\n+        left: \"col-start-1 col-end-2 ml-auto text-right\",\n+      },\n+      variant: {\n+        primary: \"text-base font-medium text-primary\",\n+        secondary: \"text-sm font-light text-muted-foreground\",\n+      },\n+    },\n+    defaultVariants: {\n+      side: \"right\",\n+      variant: \"primary\",\n+    },\n+  }\n+)\n+\n+interface TimelineConent\n+  extends React.HTMLAttributes<HTMLParagraphElement>,\n+    VariantProps<typeof timelineHeadingVariants> {}\n+\n+const TimelineHeading = React.forwardRef<HTMLParagraphElement, TimelineConent>(",
        "comment_created_at": "2024-05-01T05:55:15+00:00",
        "comment_author": "flixlix",
        "comment_body": "Also fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1496328820",
    "pr_number": 2799,
    "pr_file": "apps/www/components/icons.tsx",
    "created_at": "2024-02-20T18:42:23+00:00",
    "commented_code": "type IconProps = React.HTMLAttributes<SVGElement>\n \n-export const Icons = {\n-  logo: (props: IconProps) => (\n+type IconComponents = {\n+  [key: string]: (props: IconProps) => JSX.Element",
    "repo_full_name": "shadcn-ui/ui",
    "discussion_comments": [
      {
        "comment_id": "1496328820",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 2799,
        "pr_file": "apps/www/components/icons.tsx",
        "discussion_id": "1496328820",
        "commented_code": "@@ -1,7 +1,11 @@\n type IconProps = React.HTMLAttributes<SVGElement>\n \n-export const Icons = {\n-  logo: (props: IconProps) => (\n+type IconComponents = {\n+  [key: string]: (props: IconProps) => JSX.Element",
        "comment_created_at": "2024-02-20T18:42:23+00:00",
        "comment_author": "AhmedBaset",
        "comment_body": "`[key: string]` will disable TypeScript intellesence auto-completion.\r\n\r\nTry writing `Icons.l`. It won't suggest `logo`. why? because It could be any string.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1155470090",
    "pr_number": 135,
    "pr_file": "apps/www/components/site-header.tsx",
    "created_at": "2023-04-03T04:28:11+00:00",
    "commented_code": "import { Icons } from \"@/components/icons\"\n import { MainNav } from \"@/components/main-nav\"\n import { MobileNav } from \"@/components/mobile-nav\"\n-import { ModeToggle } from \"@/components/mode-toggle\"\n+import { ThemeToggle } from \"@/components/theme-toggle\"",
    "repo_full_name": "shadcn-ui/ui",
    "discussion_comments": [
      {
        "comment_id": "1155470090",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 135,
        "pr_file": "apps/www/components/site-header.tsx",
        "discussion_id": "1155470090",
        "commented_code": "@@ -5,7 +5,7 @@ import { CommandMenu } from \"@/components/command-menu\"\n import { Icons } from \"@/components/icons\"\n import { MainNav } from \"@/components/main-nav\"\n import { MobileNav } from \"@/components/mobile-nav\"\n-import { ModeToggle } from \"@/components/mode-toggle\"\n+import { ThemeToggle } from \"@/components/theme-toggle\"",
        "comment_created_at": "2023-04-03T04:28:11+00:00",
        "comment_author": "shadcn",
        "comment_body": "What are your thoughts on keeping the name to **Mode**Toggle? Here's how I think of it (given that I'll be adding CSS variables soon). \r\n\r\n* Mode is for light and dark mode.\r\n* Theme is for visual like colors, typography...etc.\r\n* A theme can exist in light or dark mode.",
        "pr_file_module": null
      },
      {
        "comment_id": "1155499515",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 135,
        "pr_file": "apps/www/components/site-header.tsx",
        "discussion_id": "1155470090",
        "commented_code": "@@ -5,7 +5,7 @@ import { CommandMenu } from \"@/components/command-menu\"\n import { Icons } from \"@/components/icons\"\n import { MainNav } from \"@/components/main-nav\"\n import { MobileNav } from \"@/components/mobile-nav\"\n-import { ModeToggle } from \"@/components/mode-toggle\"\n+import { ThemeToggle } from \"@/components/theme-toggle\"",
        "comment_created_at": "2023-04-03T05:38:48+00:00",
        "comment_author": "its-monotype",
        "comment_body": "Sounds good, but the name \"ModeToggle\" may not be clear enough to indicate its purpose. To make it more descriptive, you could consider renaming it as \"ColorModeToggle\" or \"LightDarkToggle\". Perhaps you plan to add more predefined themes, such as \"Coffee Light\", \"Coffee Dark\", \"Midnight Light\", and \"Midnight Dark\", so you should also consider this when naming the feature. In that case, you could keep the name \"ThemeToggle\" for changing the theme.\n\nFor customizing colors, you could use a name like \"ThemeGenerator\" or \"ThemeSettings\". \n\nHowever, if you only plan to offer dark and light modes, then \"Mode\" would be suitable. In this case, you could rename it to \"ColorModeToggle\" or something similar.\n\nIt may also be helpful to check how this feature is named in other design systems to ensure consistency and clarity.",
        "pr_file_module": null
      }
    ]
  }
]