[
  {
    "discussion_id": "1992217880",
    "pr_number": 2773,
    "pr_file": "apps/www/registry/default/ui/multi-select.tsx",
    "created_at": "2025-03-12T20:07:11+00:00",
    "commented_code": "+\"use client\"\n+\n+import React from \"react\"\n+import * as PopoverPrimitive from \"@radix-ui/react-popover\"\n+import {\n+  Primitive,\n+  type ComponentPropsWithoutRef,\n+} from \"@radix-ui/react-primitive\"\n+import { useControllableState } from \"@radix-ui/react-use-controllable-state\"\n+import { Check, ChevronsUpDown, X } from \"lucide-react\"\n+import { createPortal } from \"react-dom\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Badge } from \"@/registry/default/ui/badge\"\n+import {\n+  Command,\n+  CommandEmpty,\n+  CommandGroup,\n+  CommandInput,\n+  CommandItem,\n+  CommandList,\n+  CommandSeparator,\n+} from \"@/registry/default/ui/command\"\n+import {\n+  Tooltip,\n+  TooltipContent,\n+  TooltipProvider,\n+  TooltipTrigger,\n+} from \"@/registry/default/ui/tooltip\"\n+\n+export interface MultiSelectOptionItem {\n+  value: string\n+  label?: React.ReactNode\n+}\n+\n+interface MultiSelectContextValue {\n+  value: string[]\n+\n+  open: boolean\n+\n+  onSelect(value: string, item: MultiSelectOptionItem): void\n+\n+  onDeselect(value: string, item: MultiSelectOptionItem): void\n+\n+  onSearch?(keyword: string | undefined): void\n+\n+  filter?: boolean | ((keyword: string, current: string) => boolean)\n+\n+  disabled?: boolean\n+\n+  maxCount?: number\n+\n+  itemCache: Map<string, MultiSelectOptionItem>\n+}\n+\n+const MultiSelectContext = React.createContext<\n+  MultiSelectContextValue | undefined\n+>(undefined)\n+\n+const useMultiSelect = () => {\n+  const context = React.useContext(MultiSelectContext)\n+\n+  if (!context) {\n+    throw new Error(\"useMultiSelect must be used within MultiSelectProvider\")\n+  }\n+\n+  return context\n+}\n+\n+type MultiSelectProps = React.ComponentPropsWithoutRef<\n+  typeof PopoverPrimitive.Root\n+> & {\n+  value?: string[]\n+  onValueChange?(value: string[], items: MultiSelectOptionItem[]): void\n+  onSelect?(value: string, item: MultiSelectOptionItem): void\n+  onDeselect?(value: string, item: MultiSelectOptionItem): void\n+  defaultValue?: string[]\n+  onSearch?(keyword: string | undefined): void\n+  filter?: boolean | ((keyword: string, current: string) => boolean)\n+  disabled?: boolean\n+  maxCount?: number\n+}\n+\n+const MultiSelect: React.FC<MultiSelectProps> = ({\n+  value: valueProp,\n+  onValueChange: onValueChangeProp,\n+  onDeselect: onDeselectProp,\n+  onSelect: onSelectProp,\n+  defaultValue,\n+  open: openProp,\n+  onOpenChange,\n+  defaultOpen,\n+  onSearch,\n+  filter,\n+  disabled,\n+  maxCount,\n+  ...popoverProps\n+}) => {\n+  const itemCache = React.useRef(\n+    new Map<string, MultiSelectOptionItem>()\n+  ).current\n+\n+  const handleValueChange = React.useCallback(\n+    (state: string[]) => {\n+      if (onValueChangeProp) {\n+        const items = state.map((value) => itemCache.get(value)!)\n+\n+        onValueChangeProp(state, items)\n+      }\n+    },\n+    [onValueChangeProp]\n+  )\n+\n+  const [value, setValue] = useControllableState({\n+    prop: valueProp,\n+    defaultProp: defaultValue,\n+    onChange: handleValueChange,\n+  })\n+\n+  const [open, setOpen] = useControllableState({\n+    prop: openProp,\n+    defaultProp: defaultOpen,\n+    onChange: onOpenChange,\n+  })\n+\n+  const handleSelect = React.useCallback(\n+    (value: string, item: MultiSelectOptionItem) => {\n+      setValue((prev) => {\n+        if (prev?.includes(value)) {\n+          return prev\n+        }\n+\n+        onSelectProp?.(value, item)\n+\n+        return prev ? [...prev, value] : [value]\n+      })\n+    },\n+    [onSelectProp, setValue]\n+  )\n+\n+  const handleDeselect = React.useCallback(\n+    (value: string, item: MultiSelectOptionItem) => {\n+      setValue((prev) => {\n+        if (!prev || !prev.includes(value)) {\n+          return prev\n+        }\n+\n+        onDeselectProp?.(value, item)\n+\n+        return prev.filter((v) => v !== value)\n+      })\n+    },\n+    [onDeselectProp, setValue]\n+  )\n+\n+  const contextValue = React.useMemo(() => {\n+    return {\n+      value: value || [],\n+      open: open || false,\n+      onSearch,\n+      filter,\n+      disabled,\n+      maxCount,\n+      onSelect: handleSelect,\n+      onDeselect: handleDeselect,\n+      itemCache,\n+    }\n+  }, [\n+    value,\n+    open,\n+    onSearch,\n+    filter,\n+    disabled,\n+    maxCount,\n+    handleSelect,\n+    handleDeselect,\n+  ])\n+\n+  return (\n+    <MultiSelectContext.Provider value={contextValue}>\n+      <PopoverPrimitive.Root\n+        {...popoverProps}\n+        open={open}\n+        onOpenChange={setOpen}\n+      />\n+    </MultiSelectContext.Provider>\n+  )\n+}\n+\n+MultiSelect.displayName = \"MultiSelect\"\n+\n+type MultiSelectTriggerElement = React.ElementRef<typeof Primitive.div>\n+\n+interface MultiSelectTriggerProps\n+  extends ComponentPropsWithoutRef<typeof Primitive.div> {}\n+\n+const PreventClick = (e: React.MouseEvent | React.TouchEvent) => {\n+  e.preventDefault()\n+  e.stopPropagation()\n+}\n+\n+const MultiSelectTrigger = React.forwardRef<\n+  MultiSelectTriggerElement,\n+  MultiSelectTriggerProps\n+>(({ className, children, ...props }, forwardedRef) => {\n+  const { disabled } = useMultiSelect()\n+\n+  return (\n+    <PopoverPrimitive.Trigger ref={forwardedRef as any} asChild>\n+      <div\n+        aria-disabled={disabled}\n+        data-disabled={disabled}\n+        {...props}\n+        className={cn(\n+          \"flex h-full min-h-10 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background focus:outline-none focus:ring-1 focus:ring-ring [&>span]:line-clamp-1\",\n+          disabled ? \"cursor-not-allowed opacity-50\" : \"cursor-text\",\n+          className\n+        )}\n+        onClick={disabled ? PreventClick : props.onClick}\n+        onTouchStart={disabled ? PreventClick : props.onTouchStart}\n+      >\n+        {children}\n+        <ChevronsUpDown aria-hidden className=\"h-4 w-4 opacity-50 shrink-0\" />\n+      </div>\n+    </PopoverPrimitive.Trigger>\n+  )\n+})\n+\n+MultiSelectTrigger.displayName = \"MultiSelectTrigger\"\n+\n+interface MultiSelectValueProps\n+  extends ComponentPropsWithoutRef<typeof Primitive.div> {\n+  placeholder?: string\n+  maxDisplay?: number\n+  maxItemLength?: number\n+}\n+\n+const MultiSelectValue = React.forwardRef<\n+  React.ElementRef<typeof Primitive.div>,\n+  MultiSelectValueProps\n+>(\n+  (\n+    { className, placeholder, maxDisplay, maxItemLength, ...props },\n+    forwardRef\n+  ) => {\n+    const { value, itemCache, onDeselect } = useMultiSelect()\n+    const [firstRendered, setFirstRendered] = React.useState(false)\n+\n+    const renderRemain =\n+      maxDisplay && value.length > maxDisplay ? value.length - maxDisplay : 0\n+    const renderItems = renderRemain ? value.slice(0, maxDisplay) : value\n+\n+    React.useLayoutEffect(() => {\n+      setFirstRendered(true)\n+    }, [])\n+\n+    if (!value.length || !firstRendered) {\n+      return (\n+        <span className=\"pointer-events-none text-muted-foreground\">\n+          {placeholder}\n+        </span>\n+      )\n+    }\n+\n+    return (\n+      <TooltipProvider delayDuration={300}>\n+        <div\n+          className={cn(\n+            \"flex flex-1 overflow-x-hidden flex-wrap items-center gap-1.5\",\n+            className\n+          )}\n+          {...props}\n+          ref={forwardRef}\n+        >\n+          {renderItems.map((value) => {\n+            const item = itemCache.get(value)\n+\n+            const content = item?.label || value\n+\n+            const child =\n+              maxItemLength &&\n+              typeof content === \"string\" &&\n+              content.length > maxItemLength\n+                ? `${content.slice(0, maxItemLength)}...`\n+                : content\n+\n+            const el = (\n+              <Badge\n+                variant=\"outline\"\n+                key={value}\n+                className=\"pr-1.5 group/multi-select-badge cursor-pointer rounded-full\"\n+                onClick={(e) => {\n+                  e.preventDefault()\n+                  e.stopPropagation()\n+                  onDeselect(value, item!)\n+                }}\n+              >\n+                <span>{child}</span>\n+                <X className=\"h-3 w-3 ml-1 text-muted-foreground group-hover/multi-select-badge:text-foreground\" />\n+              </Badge>\n+            )\n+\n+            if (child !== content) {\n+              return (\n+                <Tooltip key={value}>\n+                  <TooltipTrigger className=\"inline-flex\">{el}</TooltipTrigger>\n+                  <TooltipContent\n+                    side=\"bottom\"\n+                    align=\"start\"\n+                    className=\"z-[51]\"\n+                  >\n+                    {content}\n+                  </TooltipContent>\n+                </Tooltip>\n+              )\n+            }\n+\n+            return el\n+          })}\n+          {renderRemain ? (\n+            <span className=\"text-muted-foreground text-xs leading-4 py-.5\">\n+              +{renderRemain}\n+            </span>\n+          ) : null}\n+        </div>\n+      </TooltipProvider>\n+    )\n+  }\n+)\n+\n+const MultiSelectSearch = React.forwardRef<\n+  React.ElementRef<typeof CommandInput>,\n+  ComponentPropsWithoutRef<typeof CommandInput>\n+>((props, ref) => {\n+  const { onSearch } = useMultiSelect()\n+\n+  return <CommandInput ref={ref} {...props} onValueChange={onSearch} />\n+})\n+\n+MultiSelectSearch.displayName = \"MultiSelectSearch\"\n+\n+const MultiSelectList = React.forwardRef<\n+  React.ElementRef<typeof CommandList>,\n+  ComponentPropsWithoutRef<typeof CommandList>\n+>(({ className, ...props }, ref) => {\n+  return (\n+    <CommandList\n+      ref={ref}\n+      className={cn(\"py-1 px-0 max-h-[unset]\", className)}\n+      {...props}\n+    />\n+  )\n+})\n+\n+MultiSelectList.displayName = \"MultiSelectList\"\n+\n+interface MultiSelectContentProps\n+  extends ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> {}\n+\n+const MultiSelectContent = React.forwardRef<\n+  React.ElementRef<typeof PopoverPrimitive.Content>,\n+  MultiSelectContentProps\n+>(({ className, children, ...props }, ref) => {\n+  const context = useMultiSelect()\n+\n+  const fragmentRef = React.useRef<DocumentFragment>()\n+\n+  if (!fragmentRef.current && typeof window !== \"undefined\") {\n+    fragmentRef.current = document.createDocumentFragment()\n+  }\n+\n+  if (!context.open) {\n+    return fragmentRef.current\n+      ? createPortal(<Command>{children}</Command>, fragmentRef.current)\n+      : null\n+  }",
    "repo_full_name": "shadcn-ui/ui",
    "discussion_comments": [
      {
        "comment_id": "1992217880",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 2773,
        "pr_file": "apps/www/registry/default/ui/multi-select.tsx",
        "discussion_id": "1992217880",
        "commented_code": "@@ -0,0 +1,593 @@\n+\"use client\"\n+\n+import React from \"react\"\n+import * as PopoverPrimitive from \"@radix-ui/react-popover\"\n+import {\n+  Primitive,\n+  type ComponentPropsWithoutRef,\n+} from \"@radix-ui/react-primitive\"\n+import { useControllableState } from \"@radix-ui/react-use-controllable-state\"\n+import { Check, ChevronsUpDown, X } from \"lucide-react\"\n+import { createPortal } from \"react-dom\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Badge } from \"@/registry/default/ui/badge\"\n+import {\n+  Command,\n+  CommandEmpty,\n+  CommandGroup,\n+  CommandInput,\n+  CommandItem,\n+  CommandList,\n+  CommandSeparator,\n+} from \"@/registry/default/ui/command\"\n+import {\n+  Tooltip,\n+  TooltipContent,\n+  TooltipProvider,\n+  TooltipTrigger,\n+} from \"@/registry/default/ui/tooltip\"\n+\n+export interface MultiSelectOptionItem {\n+  value: string\n+  label?: React.ReactNode\n+}\n+\n+interface MultiSelectContextValue {\n+  value: string[]\n+\n+  open: boolean\n+\n+  onSelect(value: string, item: MultiSelectOptionItem): void\n+\n+  onDeselect(value: string, item: MultiSelectOptionItem): void\n+\n+  onSearch?(keyword: string | undefined): void\n+\n+  filter?: boolean | ((keyword: string, current: string) => boolean)\n+\n+  disabled?: boolean\n+\n+  maxCount?: number\n+\n+  itemCache: Map<string, MultiSelectOptionItem>\n+}\n+\n+const MultiSelectContext = React.createContext<\n+  MultiSelectContextValue | undefined\n+>(undefined)\n+\n+const useMultiSelect = () => {\n+  const context = React.useContext(MultiSelectContext)\n+\n+  if (!context) {\n+    throw new Error(\"useMultiSelect must be used within MultiSelectProvider\")\n+  }\n+\n+  return context\n+}\n+\n+type MultiSelectProps = React.ComponentPropsWithoutRef<\n+  typeof PopoverPrimitive.Root\n+> & {\n+  value?: string[]\n+  onValueChange?(value: string[], items: MultiSelectOptionItem[]): void\n+  onSelect?(value: string, item: MultiSelectOptionItem): void\n+  onDeselect?(value: string, item: MultiSelectOptionItem): void\n+  defaultValue?: string[]\n+  onSearch?(keyword: string | undefined): void\n+  filter?: boolean | ((keyword: string, current: string) => boolean)\n+  disabled?: boolean\n+  maxCount?: number\n+}\n+\n+const MultiSelect: React.FC<MultiSelectProps> = ({\n+  value: valueProp,\n+  onValueChange: onValueChangeProp,\n+  onDeselect: onDeselectProp,\n+  onSelect: onSelectProp,\n+  defaultValue,\n+  open: openProp,\n+  onOpenChange,\n+  defaultOpen,\n+  onSearch,\n+  filter,\n+  disabled,\n+  maxCount,\n+  ...popoverProps\n+}) => {\n+  const itemCache = React.useRef(\n+    new Map<string, MultiSelectOptionItem>()\n+  ).current\n+\n+  const handleValueChange = React.useCallback(\n+    (state: string[]) => {\n+      if (onValueChangeProp) {\n+        const items = state.map((value) => itemCache.get(value)!)\n+\n+        onValueChangeProp(state, items)\n+      }\n+    },\n+    [onValueChangeProp]\n+  )\n+\n+  const [value, setValue] = useControllableState({\n+    prop: valueProp,\n+    defaultProp: defaultValue,\n+    onChange: handleValueChange,\n+  })\n+\n+  const [open, setOpen] = useControllableState({\n+    prop: openProp,\n+    defaultProp: defaultOpen,\n+    onChange: onOpenChange,\n+  })\n+\n+  const handleSelect = React.useCallback(\n+    (value: string, item: MultiSelectOptionItem) => {\n+      setValue((prev) => {\n+        if (prev?.includes(value)) {\n+          return prev\n+        }\n+\n+        onSelectProp?.(value, item)\n+\n+        return prev ? [...prev, value] : [value]\n+      })\n+    },\n+    [onSelectProp, setValue]\n+  )\n+\n+  const handleDeselect = React.useCallback(\n+    (value: string, item: MultiSelectOptionItem) => {\n+      setValue((prev) => {\n+        if (!prev || !prev.includes(value)) {\n+          return prev\n+        }\n+\n+        onDeselectProp?.(value, item)\n+\n+        return prev.filter((v) => v !== value)\n+      })\n+    },\n+    [onDeselectProp, setValue]\n+  )\n+\n+  const contextValue = React.useMemo(() => {\n+    return {\n+      value: value || [],\n+      open: open || false,\n+      onSearch,\n+      filter,\n+      disabled,\n+      maxCount,\n+      onSelect: handleSelect,\n+      onDeselect: handleDeselect,\n+      itemCache,\n+    }\n+  }, [\n+    value,\n+    open,\n+    onSearch,\n+    filter,\n+    disabled,\n+    maxCount,\n+    handleSelect,\n+    handleDeselect,\n+  ])\n+\n+  return (\n+    <MultiSelectContext.Provider value={contextValue}>\n+      <PopoverPrimitive.Root\n+        {...popoverProps}\n+        open={open}\n+        onOpenChange={setOpen}\n+      />\n+    </MultiSelectContext.Provider>\n+  )\n+}\n+\n+MultiSelect.displayName = \"MultiSelect\"\n+\n+type MultiSelectTriggerElement = React.ElementRef<typeof Primitive.div>\n+\n+interface MultiSelectTriggerProps\n+  extends ComponentPropsWithoutRef<typeof Primitive.div> {}\n+\n+const PreventClick = (e: React.MouseEvent | React.TouchEvent) => {\n+  e.preventDefault()\n+  e.stopPropagation()\n+}\n+\n+const MultiSelectTrigger = React.forwardRef<\n+  MultiSelectTriggerElement,\n+  MultiSelectTriggerProps\n+>(({ className, children, ...props }, forwardedRef) => {\n+  const { disabled } = useMultiSelect()\n+\n+  return (\n+    <PopoverPrimitive.Trigger ref={forwardedRef as any} asChild>\n+      <div\n+        aria-disabled={disabled}\n+        data-disabled={disabled}\n+        {...props}\n+        className={cn(\n+          \"flex h-full min-h-10 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background focus:outline-none focus:ring-1 focus:ring-ring [&>span]:line-clamp-1\",\n+          disabled ? \"cursor-not-allowed opacity-50\" : \"cursor-text\",\n+          className\n+        )}\n+        onClick={disabled ? PreventClick : props.onClick}\n+        onTouchStart={disabled ? PreventClick : props.onTouchStart}\n+      >\n+        {children}\n+        <ChevronsUpDown aria-hidden className=\"h-4 w-4 opacity-50 shrink-0\" />\n+      </div>\n+    </PopoverPrimitive.Trigger>\n+  )\n+})\n+\n+MultiSelectTrigger.displayName = \"MultiSelectTrigger\"\n+\n+interface MultiSelectValueProps\n+  extends ComponentPropsWithoutRef<typeof Primitive.div> {\n+  placeholder?: string\n+  maxDisplay?: number\n+  maxItemLength?: number\n+}\n+\n+const MultiSelectValue = React.forwardRef<\n+  React.ElementRef<typeof Primitive.div>,\n+  MultiSelectValueProps\n+>(\n+  (\n+    { className, placeholder, maxDisplay, maxItemLength, ...props },\n+    forwardRef\n+  ) => {\n+    const { value, itemCache, onDeselect } = useMultiSelect()\n+    const [firstRendered, setFirstRendered] = React.useState(false)\n+\n+    const renderRemain =\n+      maxDisplay && value.length > maxDisplay ? value.length - maxDisplay : 0\n+    const renderItems = renderRemain ? value.slice(0, maxDisplay) : value\n+\n+    React.useLayoutEffect(() => {\n+      setFirstRendered(true)\n+    }, [])\n+\n+    if (!value.length || !firstRendered) {\n+      return (\n+        <span className=\"pointer-events-none text-muted-foreground\">\n+          {placeholder}\n+        </span>\n+      )\n+    }\n+\n+    return (\n+      <TooltipProvider delayDuration={300}>\n+        <div\n+          className={cn(\n+            \"flex flex-1 overflow-x-hidden flex-wrap items-center gap-1.5\",\n+            className\n+          )}\n+          {...props}\n+          ref={forwardRef}\n+        >\n+          {renderItems.map((value) => {\n+            const item = itemCache.get(value)\n+\n+            const content = item?.label || value\n+\n+            const child =\n+              maxItemLength &&\n+              typeof content === \"string\" &&\n+              content.length > maxItemLength\n+                ? `${content.slice(0, maxItemLength)}...`\n+                : content\n+\n+            const el = (\n+              <Badge\n+                variant=\"outline\"\n+                key={value}\n+                className=\"pr-1.5 group/multi-select-badge cursor-pointer rounded-full\"\n+                onClick={(e) => {\n+                  e.preventDefault()\n+                  e.stopPropagation()\n+                  onDeselect(value, item!)\n+                }}\n+              >\n+                <span>{child}</span>\n+                <X className=\"h-3 w-3 ml-1 text-muted-foreground group-hover/multi-select-badge:text-foreground\" />\n+              </Badge>\n+            )\n+\n+            if (child !== content) {\n+              return (\n+                <Tooltip key={value}>\n+                  <TooltipTrigger className=\"inline-flex\">{el}</TooltipTrigger>\n+                  <TooltipContent\n+                    side=\"bottom\"\n+                    align=\"start\"\n+                    className=\"z-[51]\"\n+                  >\n+                    {content}\n+                  </TooltipContent>\n+                </Tooltip>\n+              )\n+            }\n+\n+            return el\n+          })}\n+          {renderRemain ? (\n+            <span className=\"text-muted-foreground text-xs leading-4 py-.5\">\n+              +{renderRemain}\n+            </span>\n+          ) : null}\n+        </div>\n+      </TooltipProvider>\n+    )\n+  }\n+)\n+\n+const MultiSelectSearch = React.forwardRef<\n+  React.ElementRef<typeof CommandInput>,\n+  ComponentPropsWithoutRef<typeof CommandInput>\n+>((props, ref) => {\n+  const { onSearch } = useMultiSelect()\n+\n+  return <CommandInput ref={ref} {...props} onValueChange={onSearch} />\n+})\n+\n+MultiSelectSearch.displayName = \"MultiSelectSearch\"\n+\n+const MultiSelectList = React.forwardRef<\n+  React.ElementRef<typeof CommandList>,\n+  ComponentPropsWithoutRef<typeof CommandList>\n+>(({ className, ...props }, ref) => {\n+  return (\n+    <CommandList\n+      ref={ref}\n+      className={cn(\"py-1 px-0 max-h-[unset]\", className)}\n+      {...props}\n+    />\n+  )\n+})\n+\n+MultiSelectList.displayName = \"MultiSelectList\"\n+\n+interface MultiSelectContentProps\n+  extends ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> {}\n+\n+const MultiSelectContent = React.forwardRef<\n+  React.ElementRef<typeof PopoverPrimitive.Content>,\n+  MultiSelectContentProps\n+>(({ className, children, ...props }, ref) => {\n+  const context = useMultiSelect()\n+\n+  const fragmentRef = React.useRef<DocumentFragment>()\n+\n+  if (!fragmentRef.current && typeof window !== \"undefined\") {\n+    fragmentRef.current = document.createDocumentFragment()\n+  }\n+\n+  if (!context.open) {\n+    return fragmentRef.current\n+      ? createPortal(<Command>{children}</Command>, fragmentRef.current)\n+      : null\n+  }",
        "comment_created_at": "2025-03-12T20:07:11+00:00",
        "comment_author": "ilbertt",
        "comment_body": "This piece of code is giving me some troubles:\r\n1. the component is throwing hydration errors in Next.js\r\n2. when the values are pre-selected (e.g. in an edit form where the values are fetched from the server before rendering), the cache is not populated and hence the `MultiSelectValue` doesn't show anything. Opening the dropdown actually renders the items and updates the `itemCache`, making the `MultiSelectValue` render the selected items.\r\n\r\nThe solution I propose here is working for me:\r\n\r\n```suggestion\r\n  const [isMounted, setMounted] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    setMounted(true);\r\n\r\n    // if the cache is empty and there are children, we need to populate the cache\r\n    if (context.itemCache.size === 0 && React.Children.count(children) > 0) {\r\n      const multiSelectList = React.Children.toArray(children).find(\r\n        child => React.isValidElement(child) && child.type === MultiSelectList,\r\n      ) as\r\n        | React.ReactElement<\r\n            React.ComponentPropsWithoutRef<typeof MultiSelectList>\r\n          >\r\n        | undefined;\r\n\r\n      if (!multiSelectList) {\r\n        return;\r\n      }\r\n\r\n      React.Children.forEach(multiSelectList.props.children, child => {\r\n        if (!React.isValidElement(child) || child.type !== MultiSelectItem) {\r\n          return;\r\n        }\r\n\r\n        const typedChild = child as React.ReactElement<\r\n          React.ComponentPropsWithoutRef<typeof MultiSelectItem>\r\n        >;\r\n\r\n        if (typedChild.props.value) {\r\n          const { value, label, children: itemChildren } = typedChild.props;\r\n          const itemLabel =\r\n            label ||\r\n            (typeof itemChildren === 'string' ? itemChildren : undefined);\r\n          if (value) {\r\n            context.itemCache.set(value, { value, label: itemLabel });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [children, context.itemCache]);\r\n\r\n  if (!isMounted) {\r\n    // to avoid hydration errors\r\n    return null;\r\n  }\r\n```\r\n\r\nI'm open to more efficient and cleaner alternatives!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1496928239",
    "pr_number": 1561,
    "pr_file": "apps/www/.storybook/tokens/color.stories.tsx",
    "created_at": "2024-02-21T05:24:13+00:00",
    "commented_code": "+import React from \"react\"\n+import type { Meta, StoryObj } from \"@storybook/react\"\n+import resolveConfig from \"tailwindcss/resolveConfig\"\n+\n+import tailwindConfig from \"../../tailwind.config.cjs\"\n+import { hexToHSL, hslToHex } from \"./util\"\n+\n+const meta: Meta<{\n+  swatch: {\n+    name: string\n+    colors: Record<string, string>\n+  }[]\n+}> = {\n+  title: \"design/Color\",\n+  argTypes: {},\n+  render: (args) => (\n+    <table className=\"w-full table-auto text-left text-sm text-foreground rtl:text-right\">\n+      <thead className=\"text-x bg-muted uppercase\">\n+        <tr>\n+          <th scope=\"col\" className=\"px-6 py-3\">\n+            Name\n+          </th>\n+          <th scope=\"col\" className=\"px-6 py-3\">\n+            <span className=\"sr-only\">Swatch</span>\n+          </th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        {args.swatch.map(({ name, colors }) => (\n+          <tr key={name} className=\"border-b bg-card\">\n+            <td className=\"px-6 py-4\">{name}</td>\n+            <td className=\"px-6 py-4\">\n+              <div className=\"flex overflow-x-clip rounded-md border shadow\">\n+                {Object.entries(colors).map(([name, value]) => {\n+                  const isHex = value.startsWith(\"#\")\n+                  const style = window.getComputedStyle(document.body)\n+                  const variable = value.match(/var\\(([^)]+)\\)/)?.[1] ?? \"\"\n+                  const [h, s, l] =\n+                    style.getPropertyValue(variable).match(/\\d+/g) ?? []\n+                  const colorHSL = isHex\n+                    ? hexToHSL(value)\n+                    : `hsl(${h}, ${s}%, ${l}%)`\n+                  const colorHex = isHex\n+                    ? value\n+                    : hslToHex(Number(h), Number(s), Number(l))\n+                  return (\n+                    <div className=\"flex w-full flex-col pb-2\">",
    "repo_full_name": "shadcn-ui/ui",
    "discussion_comments": [
      {
        "comment_id": "1496928239",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 1561,
        "pr_file": "apps/www/.storybook/tokens/color.stories.tsx",
        "discussion_id": "1496928239",
        "commented_code": "@@ -0,0 +1,125 @@\n+import React from \"react\"\n+import type { Meta, StoryObj } from \"@storybook/react\"\n+import resolveConfig from \"tailwindcss/resolveConfig\"\n+\n+import tailwindConfig from \"../../tailwind.config.cjs\"\n+import { hexToHSL, hslToHex } from \"./util\"\n+\n+const meta: Meta<{\n+  swatch: {\n+    name: string\n+    colors: Record<string, string>\n+  }[]\n+}> = {\n+  title: \"design/Color\",\n+  argTypes: {},\n+  render: (args) => (\n+    <table className=\"w-full table-auto text-left text-sm text-foreground rtl:text-right\">\n+      <thead className=\"text-x bg-muted uppercase\">\n+        <tr>\n+          <th scope=\"col\" className=\"px-6 py-3\">\n+            Name\n+          </th>\n+          <th scope=\"col\" className=\"px-6 py-3\">\n+            <span className=\"sr-only\">Swatch</span>\n+          </th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        {args.swatch.map(({ name, colors }) => (\n+          <tr key={name} className=\"border-b bg-card\">\n+            <td className=\"px-6 py-4\">{name}</td>\n+            <td className=\"px-6 py-4\">\n+              <div className=\"flex overflow-x-clip rounded-md border shadow\">\n+                {Object.entries(colors).map(([name, value]) => {\n+                  const isHex = value.startsWith(\"#\")\n+                  const style = window.getComputedStyle(document.body)\n+                  const variable = value.match(/var\\(([^)]+)\\)/)?.[1] ?? \"\"\n+                  const [h, s, l] =\n+                    style.getPropertyValue(variable).match(/\\d+/g) ?? []\n+                  const colorHSL = isHex\n+                    ? hexToHSL(value)\n+                    : `hsl(${h}, ${s}%, ${l}%)`\n+                  const colorHex = isHex\n+                    ? value\n+                    : hslToHex(Number(h), Number(s), Number(l))\n+                  return (\n+                    <div className=\"flex w-full flex-col pb-2\">",
        "comment_created_at": "2024-02-21T05:24:13+00:00",
        "comment_author": "simon-v-swyftx",
        "comment_body": "missing key\r\n```suggestion\r\n                    <div className=\"flex w-full flex-col pb-2\">\r\n                    <div key={name} className=\"flex w-full flex-col pb-2\">\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1916924863",
    "pr_number": 6361,
    "pr_file": "apps/www/registry/default/ui/chart.tsx",
    "created_at": "2025-01-15T16:01:20+00:00",
    "commented_code": "className\n         )}\n       >\n-        {payload.map((item) => {\n+        {payload.map((item, index) => {\n           const key = `${nameKey || item.dataKey || \"value\"}`\n           const itemConfig = getPayloadConfigFromPayload(config, item, key)\n \n           return (\n             <div\n-              key={item.value}\n+              key={item.value || index}",
    "repo_full_name": "shadcn-ui/ui",
    "discussion_comments": [
      {
        "comment_id": "1916924863",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 6361,
        "pr_file": "apps/www/registry/default/ui/chart.tsx",
        "discussion_id": "1916924863",
        "commented_code": "@@ -285,13 +285,13 @@ const ChartLegendContent = React.forwardRef<\n           className\n         )}\n       >\n-        {payload.map((item) => {\n+        {payload.map((item, index) => {\n           const key = `${nameKey || item.dataKey || \"value\"}`\n           const itemConfig = getPayloadConfigFromPayload(config, item, key)\n \n           return (\n             <div\n-              key={item.value}\n+              key={item.value || index}",
        "comment_created_at": "2025-01-15T16:01:20+00:00",
        "comment_author": "youneshenniwrites",
        "comment_body": "Using the `index` as a key can lead to re-render issues and state loss (as stated by the React docs [here](https://legacy.reactjs.org/docs/lists-and-keys.html#:~:text=We%20don't%20recommend%20using,cause%20issues%20with%20component%20state.)).\r\n\r\nInstead, consider combining the index with another unique identifier:\r\n\r\n```jsx\r\nkey={`${index}-${Math.random().toString(36).substr(2, 9)}`}\r\n```\r\nOr preferably, use `item.dataKey` as in lin 289.",
        "pr_file_module": null
      },
      {
        "comment_id": "1917609387",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 6361,
        "pr_file": "apps/www/registry/default/ui/chart.tsx",
        "discussion_id": "1916924863",
        "commented_code": "@@ -285,13 +285,13 @@ const ChartLegendContent = React.forwardRef<\n           className\n         )}\n       >\n-        {payload.map((item) => {\n+        {payload.map((item, index) => {\n           const key = `${nameKey || item.dataKey || \"value\"}`\n           const itemConfig = getPayloadConfigFromPayload(config, item, key)\n \n           return (\n             <div\n-              key={item.value}\n+              key={item.value || index}",
        "comment_created_at": "2025-01-16T03:18:51+00:00",
        "comment_author": "sanghyoLe",
        "comment_body": "Some chart items don't have dataKey available, so we can't use it as a unique identifier. \r\nI'll check if there are other consistent unique identifiers we could use instead and update accordingly.",
        "pr_file_module": null
      },
      {
        "comment_id": "1924521385",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 6361,
        "pr_file": "apps/www/registry/default/ui/chart.tsx",
        "discussion_id": "1916924863",
        "commented_code": "@@ -285,13 +285,13 @@ const ChartLegendContent = React.forwardRef<\n           className\n         )}\n       >\n-        {payload.map((item) => {\n+        {payload.map((item, index) => {\n           const key = `${nameKey || item.dataKey || \"value\"}`\n           const itemConfig = getPayloadConfigFromPayload(config, item, key)\n \n           return (\n             <div\n-              key={item.value}\n+              key={item.value || index}",
        "comment_created_at": "2025-01-22T00:19:03+00:00",
        "comment_author": "sanghyoLe",
        "comment_body": "I found that for some chart types like RadialChart, the value is passed through `item.payload.value` instead of `item.value`. I've updated the code to use both `item.value || item.payload?.value` as the key to handle these cases, providing a more reliable unique identifier than the index.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1537007810",
    "pr_number": 2694,
    "pr_file": "apps/www/registry/default/ui/phone-input.tsx",
    "created_at": "2024-03-25T03:03:41+00:00",
    "commented_code": "+import * as React from \"react\"\n+import { Check, ChevronsUpDown } from \"lucide-react\"\n+import * as RPNInput from \"react-phone-number-input\"\n+import flags from \"react-phone-number-input/flags\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Button } from \"@/registry/default/ui/button\"\n+import {\n+  Command,\n+  CommandEmpty,\n+  CommandGroup,\n+  CommandInput,\n+  CommandItem,\n+  CommandList,\n+} from \"@/registry/default/ui/command\"\n+import { Input, InputProps } from \"@/registry/default/ui/input\"\n+import {\n+  Popover,\n+  PopoverContent,\n+  PopoverTrigger,\n+} from \"@/registry/default/ui/popover\"\n+\n+type PhoneInputProps = Omit<\n+  React.InputHTMLAttributes<HTMLInputElement>,\n+  \"onChange\" | \"value\"\n+> &\n+  Omit<RPNInput.Props<typeof RPNInput.default>, \"onChange\"> & {\n+    onChange?: (value: RPNInput.Value) => void\n+  }\n+\n+const PhoneInput: React.ForwardRefExoticComponent<PhoneInputProps> =\n+  React.forwardRef<React.ElementRef<typeof RPNInput.default>, PhoneInputProps>(\n+    ({ className, onChange, ...props }, ref) => (\n+      <RPNInput.default\n+        ref={ref}\n+        className={cn(\"flex\", className)}\n+        flagComponent={FlagComponent}\n+        countrySelectComponent={CountrySelect}\n+        inputComponent={InputComponent}\n+        /**\n+         * Handles the onChange event.\n+         *\n+         * react-phone-number-input might trigger the onChange event as undefined\n+         * when a valid phone number is not entered. To prevent this,\n+         * the value is coerced to an empty string.\n+         *\n+         * @param {E164Number | undefined} value - The entered value\n+         */\n+        onChange={(value) => onChange?.(value || \"\")}\n+        {...props}\n+      />\n+    )\n+  )\n+PhoneInput.displayName = \"PhoneInput\"\n+\n+const InputComponent = React.forwardRef<HTMLInputElement, InputProps>(\n+  ({ className, ...props }, ref) => (\n+    <Input\n+      className={cn(\"rounded-s-none rounded-e-lg\", className)}\n+      {...props}\n+      ref={ref}\n+    />\n+  )\n+)\n+InputComponent.displayName = \"InputComponent\"\n+\n+type CountrySelectOption = { label: string; value: RPNInput.Country }\n+\n+type CountrySelectProps = {\n+  disabled?: boolean\n+  value: RPNInput.Country\n+  onChange: (value: RPNInput.Country) => void\n+  options: CountrySelectOption[]\n+}\n+\n+const CountrySelect = ({\n+  disabled,\n+  value,\n+  onChange,\n+  options,\n+}: CountrySelectProps) => {\n+  const handleSelect = React.useCallback(\n+    (country: RPNInput.Country) => {\n+      onChange(country)\n+    },\n+    [onChange]\n+  )\n+\n+  return (\n+    <Popover>\n+      <PopoverTrigger asChild>\n+        <Button\n+          type=\"button\"\n+          variant={\"outline\"}\n+          className={cn(\"flex gap-1 rounded-e-none rounded-s-lg px-3\")}\n+          disabled={disabled}\n+        >\n+          <FlagComponent country={value} countryName={value} />\n+          <ChevronsUpDown\n+            className={cn(\n+              \"h-4 w-4 opacity-50 -mr-2\",\n+              disabled ? \"hidden\" : \"opacity-100\"\n+            )}\n+          />\n+        </Button>\n+      </PopoverTrigger>\n+      <PopoverContent className=\"p-0 w-[300px]\">\n+        <Command>\n+          <CommandList>\n+            <CommandInput placeholder=\"Search country...\" />\n+            <CommandEmpty>No country found.</CommandEmpty>\n+            <CommandGroup>\n+              {options.map((option) => (\n+                <CommandItem\n+                  className=\"gap-2\"\n+                  key={option.value}",
    "repo_full_name": "shadcn-ui/ui",
    "discussion_comments": [
      {
        "comment_id": "1537007810",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 2694,
        "pr_file": "apps/www/registry/default/ui/phone-input.tsx",
        "discussion_id": "1537007810",
        "commented_code": "@@ -0,0 +1,156 @@\n+import * as React from \"react\"\n+import { Check, ChevronsUpDown } from \"lucide-react\"\n+import * as RPNInput from \"react-phone-number-input\"\n+import flags from \"react-phone-number-input/flags\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Button } from \"@/registry/default/ui/button\"\n+import {\n+  Command,\n+  CommandEmpty,\n+  CommandGroup,\n+  CommandInput,\n+  CommandItem,\n+  CommandList,\n+} from \"@/registry/default/ui/command\"\n+import { Input, InputProps } from \"@/registry/default/ui/input\"\n+import {\n+  Popover,\n+  PopoverContent,\n+  PopoverTrigger,\n+} from \"@/registry/default/ui/popover\"\n+\n+type PhoneInputProps = Omit<\n+  React.InputHTMLAttributes<HTMLInputElement>,\n+  \"onChange\" | \"value\"\n+> &\n+  Omit<RPNInput.Props<typeof RPNInput.default>, \"onChange\"> & {\n+    onChange?: (value: RPNInput.Value) => void\n+  }\n+\n+const PhoneInput: React.ForwardRefExoticComponent<PhoneInputProps> =\n+  React.forwardRef<React.ElementRef<typeof RPNInput.default>, PhoneInputProps>(\n+    ({ className, onChange, ...props }, ref) => (\n+      <RPNInput.default\n+        ref={ref}\n+        className={cn(\"flex\", className)}\n+        flagComponent={FlagComponent}\n+        countrySelectComponent={CountrySelect}\n+        inputComponent={InputComponent}\n+        /**\n+         * Handles the onChange event.\n+         *\n+         * react-phone-number-input might trigger the onChange event as undefined\n+         * when a valid phone number is not entered. To prevent this,\n+         * the value is coerced to an empty string.\n+         *\n+         * @param {E164Number | undefined} value - The entered value\n+         */\n+        onChange={(value) => onChange?.(value || \"\")}\n+        {...props}\n+      />\n+    )\n+  )\n+PhoneInput.displayName = \"PhoneInput\"\n+\n+const InputComponent = React.forwardRef<HTMLInputElement, InputProps>(\n+  ({ className, ...props }, ref) => (\n+    <Input\n+      className={cn(\"rounded-s-none rounded-e-lg\", className)}\n+      {...props}\n+      ref={ref}\n+    />\n+  )\n+)\n+InputComponent.displayName = \"InputComponent\"\n+\n+type CountrySelectOption = { label: string; value: RPNInput.Country }\n+\n+type CountrySelectProps = {\n+  disabled?: boolean\n+  value: RPNInput.Country\n+  onChange: (value: RPNInput.Country) => void\n+  options: CountrySelectOption[]\n+}\n+\n+const CountrySelect = ({\n+  disabled,\n+  value,\n+  onChange,\n+  options,\n+}: CountrySelectProps) => {\n+  const handleSelect = React.useCallback(\n+    (country: RPNInput.Country) => {\n+      onChange(country)\n+    },\n+    [onChange]\n+  )\n+\n+  return (\n+    <Popover>\n+      <PopoverTrigger asChild>\n+        <Button\n+          type=\"button\"\n+          variant={\"outline\"}\n+          className={cn(\"flex gap-1 rounded-e-none rounded-s-lg px-3\")}\n+          disabled={disabled}\n+        >\n+          <FlagComponent country={value} countryName={value} />\n+          <ChevronsUpDown\n+            className={cn(\n+              \"h-4 w-4 opacity-50 -mr-2\",\n+              disabled ? \"hidden\" : \"opacity-100\"\n+            )}\n+          />\n+        </Button>\n+      </PopoverTrigger>\n+      <PopoverContent className=\"p-0 w-[300px]\">\n+        <Command>\n+          <CommandList>\n+            <CommandInput placeholder=\"Search country...\" />\n+            <CommandEmpty>No country found.</CommandEmpty>\n+            <CommandGroup>\n+              {options.map((option) => (\n+                <CommandItem\n+                  className=\"gap-2\"\n+                  key={option.value}",
        "comment_created_at": "2024-03-25T03:03:41+00:00",
        "comment_author": "NebraskaCoder",
        "comment_body": "Something is not right with the values as I get a warning about duplicate keys:\r\n\r\n![React Warning About Duplicate Keys](https://github.com/shadcn-ui/ui/assets/64073162/dac41103-b7ef-4dbe-9faf-12d9d0809eb1)\r\n\r\n```\r\nWarning: Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.\r\n    at eval (webpack-internal:///(ssr)/./components/ui/command.tsx:128:84)\r\n    at CountrySelect (webpack-internal:///(ssr)/./components/ui/custom/phone-input.tsx:76:26)\r\n    at div\r\n    at PhoneNumberInput_ (webpack-internal:///(ssr)/./node_modules/react-phone-number-input/modules/PhoneInputWithCountry.js:243:9)\r\n    at eval (webpack-internal:///(ssr)/./node_modules/react-phone-number-input/modules/PhoneInputWithCountryDefault.js:62:34)\r\n    at div\r\n    at eval (webpack-internal:///(ssr)/./components/ui/custom/phone-input.tsx:27:83)\r\n    at eval (webpack-internal:///(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs:42:23)\r\n    at eval (webpack-internal:///(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs:16:23)\r\n    at eval (webpack-internal:///(ssr)/./components/ui/form.tsx:100:87)\r\n    at div\r\n    at eval (webpack-internal:///(ssr)/./components/ui/form.tsx:65:84)\r\n    at Controller (webpack-internal:///(ssr)/./node_modules/react-hook-form/dist/index.esm.mjs:511:39)\r\n    at FormField (webpack-internal:///(ssr)/./components/ui/form.tsx:28:25)\r\n    at div\r\n    at div\r\n    at eval (webpack-internal:///(ssr)/./components/ui/card.tsx:58:84)\r\n    at div\r\n    at eval (webpack-internal:///(ssr)/./components/ui/card.tsx:18:77)\r\n    at div\r\n    ...\r\n```\r\n\r\nI fixed it for now by changing the key to `key={option.label + option.value}`, although I don't like that method.",
        "pr_file_module": null
      },
      {
        "comment_id": "1537206714",
        "repo_full_name": "shadcn-ui/ui",
        "pr_number": 2694,
        "pr_file": "apps/www/registry/default/ui/phone-input.tsx",
        "discussion_id": "1537007810",
        "commented_code": "@@ -0,0 +1,156 @@\n+import * as React from \"react\"\n+import { Check, ChevronsUpDown } from \"lucide-react\"\n+import * as RPNInput from \"react-phone-number-input\"\n+import flags from \"react-phone-number-input/flags\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Button } from \"@/registry/default/ui/button\"\n+import {\n+  Command,\n+  CommandEmpty,\n+  CommandGroup,\n+  CommandInput,\n+  CommandItem,\n+  CommandList,\n+} from \"@/registry/default/ui/command\"\n+import { Input, InputProps } from \"@/registry/default/ui/input\"\n+import {\n+  Popover,\n+  PopoverContent,\n+  PopoverTrigger,\n+} from \"@/registry/default/ui/popover\"\n+\n+type PhoneInputProps = Omit<\n+  React.InputHTMLAttributes<HTMLInputElement>,\n+  \"onChange\" | \"value\"\n+> &\n+  Omit<RPNInput.Props<typeof RPNInput.default>, \"onChange\"> & {\n+    onChange?: (value: RPNInput.Value) => void\n+  }\n+\n+const PhoneInput: React.ForwardRefExoticComponent<PhoneInputProps> =\n+  React.forwardRef<React.ElementRef<typeof RPNInput.default>, PhoneInputProps>(\n+    ({ className, onChange, ...props }, ref) => (\n+      <RPNInput.default\n+        ref={ref}\n+        className={cn(\"flex\", className)}\n+        flagComponent={FlagComponent}\n+        countrySelectComponent={CountrySelect}\n+        inputComponent={InputComponent}\n+        /**\n+         * Handles the onChange event.\n+         *\n+         * react-phone-number-input might trigger the onChange event as undefined\n+         * when a valid phone number is not entered. To prevent this,\n+         * the value is coerced to an empty string.\n+         *\n+         * @param {E164Number | undefined} value - The entered value\n+         */\n+        onChange={(value) => onChange?.(value || \"\")}\n+        {...props}\n+      />\n+    )\n+  )\n+PhoneInput.displayName = \"PhoneInput\"\n+\n+const InputComponent = React.forwardRef<HTMLInputElement, InputProps>(\n+  ({ className, ...props }, ref) => (\n+    <Input\n+      className={cn(\"rounded-s-none rounded-e-lg\", className)}\n+      {...props}\n+      ref={ref}\n+    />\n+  )\n+)\n+InputComponent.displayName = \"InputComponent\"\n+\n+type CountrySelectOption = { label: string; value: RPNInput.Country }\n+\n+type CountrySelectProps = {\n+  disabled?: boolean\n+  value: RPNInput.Country\n+  onChange: (value: RPNInput.Country) => void\n+  options: CountrySelectOption[]\n+}\n+\n+const CountrySelect = ({\n+  disabled,\n+  value,\n+  onChange,\n+  options,\n+}: CountrySelectProps) => {\n+  const handleSelect = React.useCallback(\n+    (country: RPNInput.Country) => {\n+      onChange(country)\n+    },\n+    [onChange]\n+  )\n+\n+  return (\n+    <Popover>\n+      <PopoverTrigger asChild>\n+        <Button\n+          type=\"button\"\n+          variant={\"outline\"}\n+          className={cn(\"flex gap-1 rounded-e-none rounded-s-lg px-3\")}\n+          disabled={disabled}\n+        >\n+          <FlagComponent country={value} countryName={value} />\n+          <ChevronsUpDown\n+            className={cn(\n+              \"h-4 w-4 opacity-50 -mr-2\",\n+              disabled ? \"hidden\" : \"opacity-100\"\n+            )}\n+          />\n+        </Button>\n+      </PopoverTrigger>\n+      <PopoverContent className=\"p-0 w-[300px]\">\n+        <Command>\n+          <CommandList>\n+            <CommandInput placeholder=\"Search country...\" />\n+            <CommandEmpty>No country found.</CommandEmpty>\n+            <CommandGroup>\n+              {options.map((option) => (\n+                <CommandItem\n+                  className=\"gap-2\"\n+                  key={option.value}",
        "comment_created_at": "2024-03-25T08:33:02+00:00",
        "comment_author": "omeralpi",
        "comment_body": "@NebraskaCoder \r\n\r\n![Screenshot 2024-03-25 at 11 36 19](https://github.com/shadcn-ui/ui/assets/19254700/4dab8f74-b496-4ab0-94a5-c9e2cd615bc3)\r\n\r\nAnd then as the solution; `key={option.value || \"ZZ\"}`.\r\n\"ZZ\" means \"International\" ([see](https://github.com/catamphetamine/react-phone-number-input?tab=readme-ov-file#localization)).\r\n\r\nThank you for the review.  \ud83d\ude0a\r\n",
        "pr_file_module": null
      }
    ]
  }
]