[
  {
    "discussion_id": "2307545229",
    "pr_number": 5052,
    "pr_file": "cosmwasm/cw-u/src/error.rs",
    "created_at": "2025-08-28T14:12:09+00:00",
    "commented_code": "+use cosmwasm_std::StdError;\n+use frissitheto::UpgradeError;\n+use ibc_union_spec::ChannelId;\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum Error {\n+    #[error(transparent)]\n+    StdError(#[from] StdError),\n+\n+    #[error(\"migration error: {0}\")]",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2307545229",
        "repo_full_name": "unionlabs/union",
        "pr_number": 5052,
        "pr_file": "cosmwasm/cw-u/src/error.rs",
        "discussion_id": "2307545229",
        "commented_code": "@@ -0,0 +1,39 @@\n+use cosmwasm_std::StdError;\n+use frissitheto::UpgradeError;\n+use ibc_union_spec::ChannelId;\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum Error {\n+    #[error(transparent)]\n+    StdError(#[from] StdError),\n+\n+    #[error(\"migration error: {0}\")]",
        "comment_created_at": "2025-08-28T14:12:09+00:00",
        "comment_author": "benluelo",
        "comment_body": "don't use both from and display otherwise the error will be double printed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049588992",
    "pr_number": 4369,
    "pr_file": "hubble/src/abi_fetcher/fetcher.rs",
    "created_at": "2025-04-17T20:16:05+00:00",
    "commented_code": "+use std::thread::sleep;\n+\n+use sqlx::{Acquire, Postgres};\n+use tracing::{debug, error, info, warn};\n+\n+use crate::{\n+    abi_fetcher::{\n+        self,\n+        client::{build_abis_with_commit_hash, AbiResult, BuildError},\n+        postgres::{get_missing_abi_dependencies, insert_download},\n+        AbiDependency, Attempt, Download,\n+    },\n+    github_client::commit_details::CommitDetailsError,\n+};\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum FetchAbiError {\n+    #[error(\"database error creation transaction for dependency {0}: {1}\")]\n+    CreateTransaction(AbiDependency, #[source] sqlx::Error),",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2049588992",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4369,
        "pr_file": "hubble/src/abi_fetcher/fetcher.rs",
        "discussion_id": "2049588992",
        "commented_code": "@@ -0,0 +1,117 @@\n+use std::thread::sleep;\n+\n+use sqlx::{Acquire, Postgres};\n+use tracing::{debug, error, info, warn};\n+\n+use crate::{\n+    abi_fetcher::{\n+        self,\n+        client::{build_abis_with_commit_hash, AbiResult, BuildError},\n+        postgres::{get_missing_abi_dependencies, insert_download},\n+        AbiDependency, Attempt, Download,\n+    },\n+    github_client::commit_details::CommitDetailsError,\n+};\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum FetchAbiError {\n+    #[error(\"database error creation transaction for dependency {0}: {1}\")]\n+    CreateTransaction(AbiDependency, #[source] sqlx::Error),",
        "comment_created_at": "2025-04-17T20:16:05+00:00",
        "comment_author": "benluelo",
        "comment_body": "don't print an error in the display if it's also a source, otherwise you'll get duplicated messages when printing the full trace",
        "pr_file_module": null
      },
      {
        "comment_id": "2050427631",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4369,
        "pr_file": "hubble/src/abi_fetcher/fetcher.rs",
        "discussion_id": "2049588992",
        "commented_code": "@@ -0,0 +1,117 @@\n+use std::thread::sleep;\n+\n+use sqlx::{Acquire, Postgres};\n+use tracing::{debug, error, info, warn};\n+\n+use crate::{\n+    abi_fetcher::{\n+        self,\n+        client::{build_abis_with_commit_hash, AbiResult, BuildError},\n+        postgres::{get_missing_abi_dependencies, insert_download},\n+        AbiDependency, Attempt, Download,\n+    },\n+    github_client::commit_details::CommitDetailsError,\n+};\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum FetchAbiError {\n+    #[error(\"database error creation transaction for dependency {0}: {1}\")]\n+    CreateTransaction(AbiDependency, #[source] sqlx::Error),",
        "comment_created_at": "2025-04-18T09:46:10+00:00",
        "comment_author": "qlp",
        "comment_body": "but you won't see it if you're not printing the trace?",
        "pr_file_module": null
      },
      {
        "comment_id": "2050965845",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4369,
        "pr_file": "hubble/src/abi_fetcher/fetcher.rs",
        "discussion_id": "2049588992",
        "commented_code": "@@ -0,0 +1,117 @@\n+use std::thread::sleep;\n+\n+use sqlx::{Acquire, Postgres};\n+use tracing::{debug, error, info, warn};\n+\n+use crate::{\n+    abi_fetcher::{\n+        self,\n+        client::{build_abis_with_commit_hash, AbiResult, BuildError},\n+        postgres::{get_missing_abi_dependencies, insert_download},\n+        AbiDependency, Attempt, Download,\n+    },\n+    github_client::commit_details::CommitDetailsError,\n+};\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum FetchAbiError {\n+    #[error(\"database error creation transaction for dependency {0}: {1}\")]\n+    CreateTransaction(AbiDependency, #[source] sqlx::Error),",
        "comment_created_at": "2025-04-18T18:23:09+00:00",
        "comment_author": "benluelo",
        "comment_body": "you either need to set the source or print it in display, but not both. i have [this type](https://github.com/unionlabs/union/blob/752d7221d5725012a215e6795f5d89957212d257/lib/unionlabs/src/lib.rs#L243) that can be used to print the entire error trace in display.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2042724787",
    "pr_number": 4336,
    "pr_file": "hubble/src/github_fetcher/fetcher.rs",
    "created_at": "2025-04-14T18:43:03+00:00",
    "commented_code": "+use std::thread::sleep;\n+\n+use serde::Serialize;\n+use sqlx::{Acquire, Postgres};\n+use tracing::{debug, error, info, warn};\n+\n+use crate::github_fetcher::{\n+    self,\n+    client::{fetch_commit_details, fetch_file_contents, CommitDetails, FileDownloadError},\n+    postgres::get_subscriptions,\n+    Attempt, Download, Subscription,\n+};\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum UpdateSubscriptionError {\n+    #[error(\"database error creation transaction for subscription {0}: {1}\")]",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2042724787",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4336,
        "pr_file": "hubble/src/github_fetcher/fetcher.rs",
        "discussion_id": "2042724787",
        "commented_code": "@@ -0,0 +1,142 @@\n+use std::thread::sleep;\n+\n+use serde::Serialize;\n+use sqlx::{Acquire, Postgres};\n+use tracing::{debug, error, info, warn};\n+\n+use crate::github_fetcher::{\n+    self,\n+    client::{fetch_commit_details, fetch_file_contents, CommitDetails, FileDownloadError},\n+    postgres::get_subscriptions,\n+    Attempt, Download, Subscription,\n+};\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum UpdateSubscriptionError {\n+    #[error(\"database error creation transaction for subscription {0}: {1}\")]",
        "comment_created_at": "2025-04-14T18:43:03+00:00",
        "comment_author": "benluelo",
        "comment_body": "minor nit, non blocking: prefer to use `#[source]` instead of displaying the error (`sqlx::Error` in this case) as you will lose all sources other than the top level error",
        "pr_file_module": null
      },
      {
        "comment_id": "2042767858",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4336,
        "pr_file": "hubble/src/github_fetcher/fetcher.rs",
        "discussion_id": "2042724787",
        "commented_code": "@@ -0,0 +1,142 @@\n+use std::thread::sleep;\n+\n+use serde::Serialize;\n+use sqlx::{Acquire, Postgres};\n+use tracing::{debug, error, info, warn};\n+\n+use crate::github_fetcher::{\n+    self,\n+    client::{fetch_commit_details, fetch_file_contents, CommitDetails, FileDownloadError},\n+    postgres::get_subscriptions,\n+    Attempt, Download, Subscription,\n+};\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum UpdateSubscriptionError {\n+    #[error(\"database error creation transaction for subscription {0}: {1}\")]",
        "comment_created_at": "2025-04-14T19:01:50+00:00",
        "comment_author": "qlp",
        "comment_body": "fixed",
        "pr_file_module": null
      }
    ]
  }
]