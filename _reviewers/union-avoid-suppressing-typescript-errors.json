[
  {
    "discussion_id": "1876100546",
    "pr_number": 3334,
    "pr_file": "app/src/routes/transfer-new/+page.svelte",
    "created_at": "2024-12-09T14:44:11+00:00",
    "commented_code": "+<script lang=\"ts\">\n+import {\n+  createQuery,\n+  queryOptions,\n+  QueryObserver,\n+  useQueryClient,\n+  keepPreviousData\n+} from \"@tanstack/svelte-query\"\n+import {\n+  http,\n+  type ChainId,\n+  createPfmMemo,\n+  type EvmChainId,\n+  createUnionClient,\n+  type CosmosChainId,\n+  evmChainFromChainId,\n+  bech32ToBech32Address,\n+  type AptosBrowserWallet,\n+  type TransferAssetsParameters\n+} from \"@unionlabs/client\"\n+import * as v from \"valibot\"\n+import { page } from \"$app/stores\"\n+import { toast } from \"svelte-sonner\"\n+import { goto } from \"$app/navigation\"\n+import { onDestroy, onMount } from \"svelte\"\n+import { cn } from \"$lib/utilities/shadcn.ts\"\n+import { userAddrEvm } from \"$lib/wallet/evm\"\n+import { config } from \"$lib/wallet/evm/config\"\n+import { toIsoString } from \"$lib/utilities/date\"\n+import { truncate } from \"$lib/utilities/format.ts\"\n+import { userAddrCosmos } from \"$lib/wallet/cosmos\"\n+import Chevron from \"./(components)/chevron.svelte\"\n+import { userBalancesQuery } from \"$lib/queries/balance\"\n+import * as Card from \"$lib/components/ui/card/index.ts\"\n+import type { Chain, UserAddresses } from \"$lib/types.ts\"\n+import { Input } from \"$lib/components/ui/input/index.js\"\n+import { userAddrOnChain } from \"$lib/utilities/address.ts\"\n+import { Button } from \"$lib/components/ui/button/index.ts\"\n+import ChainDialog from \"./(components)/chain-dialog.svelte\"\n+import ChainButton from \"./(components)/chain-button.svelte\"\n+import AssetsDialog from \"./(components)/assets-dialog.svelte\"\n+import { getSupportedAsset } from \"$lib/utilities/helpers.ts\"\n+import { debounce, raise, sleep } from \"$lib/utilities/index.ts\"\n+import ArrowLeftRight from \"virtual:icons/lucide/arrow-left-right\"\n+import { transferSchema, type TransferSchema } from \"./validation.ts\"\n+import { getCosmosChainInfo } from \"$lib/wallet/cosmos/chain-info.ts\"\n+import { submittedTransfers } from \"$lib/stores/submitted-transfers.ts\"\n+import { parseUnits, formatUnits, type HttpTransport, getAddress } from \"viem\"\n+import { aptosStore, userAddressAptos, getAptosWallet } from \"$lib/wallet/aptos\"\n+import { cosmosStore, getCosmosOfflineSigner } from \"$/lib/wallet/cosmos/config.ts\"\n+import { type Writable, writable, derived, get, type Readable } from \"svelte/store\"\n+import { custom, switchChain, getConnectorClient, waitForTransactionReceipt } from \"@wagmi/core\"\n+\n+type SearchParams = { [key: string]: string }\n+\n+const querClient = useQueryClient()\n+\n+function queryData<T extends Array<unknown>>(\n+  key: Array<string>,\n+  filter?: (value: T[number]) => boolean\n+): T {\n+  const data = querClient.getQueryData<T>(key) ?? []\n+  return (filter ? data.filter(filter) : data) as T\n+}\n+\n+let chains = queryData<Array<Chain>>([\"chains\"], chain => chain.enabled_staging)\n+\n+let transferQueryOptions = queryOptions<SearchParams>({\n+  enabled: query => false,\n+  placeholderData: keepPreviousData,\n+  queryKey: [\"transfer-state\", $page.url.toString()],\n+  initialData: Object.fromEntries($page.url.searchParams),\n+  queryFn: ({ queryKey, signal, meta }) => Object.fromEntries($page.url.searchParams)\n+})\n+\n+let state = createQuery(transferQueryOptions)\n+\n+const observer = new QueryObserver<SearchParams>(querClient, {\n+  enabled: query => false,\n+  queryKey: [\"transfer-state\"]\n+})\n+\n+let userAddress = derived(\n+  [userAddrCosmos, userAddrEvm, userAddressAptos],\n+  ([$cosmos, $evm, $aptos]) => ({ evm: $evm, aptos: $aptos, cosmos: $cosmos })\n+)\n+\n+$: asset = $page.url.searchParams.get(\"asset\") || $state.data?.asset\n+$: amount = $page.url.searchParams.get(\"amount\") || $state.data?.amount\n+$: receiver = $page.url.searchParams.get(\"receiver\") || $state.data?.receiver\n+$: source = $page.url.searchParams.get(\"source\") || $state.data?.source\n+$: destination = $page.url.searchParams.get(\"destination\") || $state.data?.destination\n+\n+$: sourceChain = writable(chains.find(chain => chain.chain_id === source))\n+$: destinationChain = writable(chains.find(chain => chain.chain_id === destination))",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1876100546",
        "repo_full_name": "unionlabs/union",
        "pr_number": 3334,
        "pr_file": "app/src/routes/transfer-new/+page.svelte",
        "discussion_id": "1876100546",
        "commented_code": "@@ -0,0 +1,306 @@\n+<script lang=\"ts\">\n+import {\n+  createQuery,\n+  queryOptions,\n+  QueryObserver,\n+  useQueryClient,\n+  keepPreviousData\n+} from \"@tanstack/svelte-query\"\n+import {\n+  http,\n+  type ChainId,\n+  createPfmMemo,\n+  type EvmChainId,\n+  createUnionClient,\n+  type CosmosChainId,\n+  evmChainFromChainId,\n+  bech32ToBech32Address,\n+  type AptosBrowserWallet,\n+  type TransferAssetsParameters\n+} from \"@unionlabs/client\"\n+import * as v from \"valibot\"\n+import { page } from \"$app/stores\"\n+import { toast } from \"svelte-sonner\"\n+import { goto } from \"$app/navigation\"\n+import { onDestroy, onMount } from \"svelte\"\n+import { cn } from \"$lib/utilities/shadcn.ts\"\n+import { userAddrEvm } from \"$lib/wallet/evm\"\n+import { config } from \"$lib/wallet/evm/config\"\n+import { toIsoString } from \"$lib/utilities/date\"\n+import { truncate } from \"$lib/utilities/format.ts\"\n+import { userAddrCosmos } from \"$lib/wallet/cosmos\"\n+import Chevron from \"./(components)/chevron.svelte\"\n+import { userBalancesQuery } from \"$lib/queries/balance\"\n+import * as Card from \"$lib/components/ui/card/index.ts\"\n+import type { Chain, UserAddresses } from \"$lib/types.ts\"\n+import { Input } from \"$lib/components/ui/input/index.js\"\n+import { userAddrOnChain } from \"$lib/utilities/address.ts\"\n+import { Button } from \"$lib/components/ui/button/index.ts\"\n+import ChainDialog from \"./(components)/chain-dialog.svelte\"\n+import ChainButton from \"./(components)/chain-button.svelte\"\n+import AssetsDialog from \"./(components)/assets-dialog.svelte\"\n+import { getSupportedAsset } from \"$lib/utilities/helpers.ts\"\n+import { debounce, raise, sleep } from \"$lib/utilities/index.ts\"\n+import ArrowLeftRight from \"virtual:icons/lucide/arrow-left-right\"\n+import { transferSchema, type TransferSchema } from \"./validation.ts\"\n+import { getCosmosChainInfo } from \"$lib/wallet/cosmos/chain-info.ts\"\n+import { submittedTransfers } from \"$lib/stores/submitted-transfers.ts\"\n+import { parseUnits, formatUnits, type HttpTransport, getAddress } from \"viem\"\n+import { aptosStore, userAddressAptos, getAptosWallet } from \"$lib/wallet/aptos\"\n+import { cosmosStore, getCosmosOfflineSigner } from \"$/lib/wallet/cosmos/config.ts\"\n+import { type Writable, writable, derived, get, type Readable } from \"svelte/store\"\n+import { custom, switchChain, getConnectorClient, waitForTransactionReceipt } from \"@wagmi/core\"\n+\n+type SearchParams = { [key: string]: string }\n+\n+const querClient = useQueryClient()\n+\n+function queryData<T extends Array<unknown>>(\n+  key: Array<string>,\n+  filter?: (value: T[number]) => boolean\n+): T {\n+  const data = querClient.getQueryData<T>(key) ?? []\n+  return (filter ? data.filter(filter) : data) as T\n+}\n+\n+let chains = queryData<Array<Chain>>([\"chains\"], chain => chain.enabled_staging)\n+\n+let transferQueryOptions = queryOptions<SearchParams>({\n+  enabled: query => false,\n+  placeholderData: keepPreviousData,\n+  queryKey: [\"transfer-state\", $page.url.toString()],\n+  initialData: Object.fromEntries($page.url.searchParams),\n+  queryFn: ({ queryKey, signal, meta }) => Object.fromEntries($page.url.searchParams)\n+})\n+\n+let state = createQuery(transferQueryOptions)\n+\n+const observer = new QueryObserver<SearchParams>(querClient, {\n+  enabled: query => false,\n+  queryKey: [\"transfer-state\"]\n+})\n+\n+let userAddress = derived(\n+  [userAddrCosmos, userAddrEvm, userAddressAptos],\n+  ([$cosmos, $evm, $aptos]) => ({ evm: $evm, aptos: $aptos, cosmos: $cosmos })\n+)\n+\n+$: asset = $page.url.searchParams.get(\"asset\") || $state.data?.asset\n+$: amount = $page.url.searchParams.get(\"amount\") || $state.data?.amount\n+$: receiver = $page.url.searchParams.get(\"receiver\") || $state.data?.receiver\n+$: source = $page.url.searchParams.get(\"source\") || $state.data?.source\n+$: destination = $page.url.searchParams.get(\"destination\") || $state.data?.destination\n+\n+$: sourceChain = writable(chains.find(chain => chain.chain_id === source))\n+$: destinationChain = writable(chains.find(chain => chain.chain_id === destination))",
        "comment_created_at": "2024-12-09T14:44:11+00:00",
        "comment_author": "cor",
        "comment_body": "This is derived info that should never be written to. Let's use a `let destinationChain = derived(...)` which is of type `Readable<T>` rather than `Writable<T>`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1746676372",
    "pr_number": 2902,
    "pr_file": "app/src/lib/components/chains-gate.svelte",
    "created_at": "2024-09-06T08:01:21+00:00",
    "commented_code": "forwards\n         }\n \n+        // @ts-expect-error",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1746676372",
        "repo_full_name": "unionlabs/union",
        "pr_number": 2902,
        "pr_file": "app/src/lib/components/chains-gate.svelte",
        "discussion_id": "1746676372",
        "commented_code": "@@ -56,6 +57,7 @@ let checkedChains: Readable<Array<Chain>> = derived(chains, $chains => {\n           forwards\n         }\n \n+        // @ts-expect-error",
        "comment_created_at": "2024-09-06T08:01:21+00:00",
        "comment_author": "cor",
        "comment_body": "why?",
        "pr_file_module": null
      },
      {
        "comment_id": "1747230329",
        "repo_full_name": "unionlabs/union",
        "pr_number": 2902,
        "pr_file": "app/src/lib/components/chains-gate.svelte",
        "discussion_id": "1746676372",
        "commented_code": "@@ -56,6 +57,7 @@ let checkedChains: Readable<Array<Chain>> = derived(chains, $chains => {\n           forwards\n         }\n \n+        // @ts-expect-error",
        "comment_created_at": "2024-09-06T14:37:07+00:00",
        "comment_author": "o-az",
        "comment_body": "it's a type error so we use this comment in a similar fashion to a `TODO fix me` comment. The comment also silences squiggly errors red lines",
        "pr_file_module": null
      }
    ]
  }
]