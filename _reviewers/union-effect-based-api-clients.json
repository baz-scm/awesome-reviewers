[
  {
    "discussion_id": "2105893804",
    "pr_number": 4609,
    "pr_file": "app2/src/lib/graphql/error.ts",
    "created_at": "2025-05-24T17:50:30+00:00",
    "commented_code": "+import { Schema as S } from \"effect\"\n+import type { ClientError } from \"graphql-request\"\n+\n+export class GraphQLError extends S.TaggedError<GraphQLError>(\"GraphQLError\")(\"GraphQLError\", {",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2105893804",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4609,
        "pr_file": "app2/src/lib/graphql/error.ts",
        "discussion_id": "2105893804",
        "commented_code": "@@ -0,0 +1,20 @@\n+import { Schema as S } from \"effect\"\n+import type { ClientError } from \"graphql-request\"\n+\n+export class GraphQLError extends S.TaggedError<GraphQLError>(\"GraphQLError\")(\"GraphQLError\", {",
        "comment_created_at": "2025-05-24T17:50:30+00:00",
        "comment_author": "ehegnes",
        "comment_body": "So we can get meaningful errors from GraphQL rather than `UnknownException`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2105894362",
    "pr_number": 4609,
    "pr_file": "app2/src/lib/utils/queries.ts",
    "created_at": "2025-05-24T17:53:30+00:00",
    "commented_code": "Effect.withLogSpan(\"fetchDecode\"),\n   )\n \n-export type FetchDecodeGraphqlError = UnknownException | ParseError\n+export type FetchDecodeGraphqlError = GraphQLError | Persistence.PersistenceError | ParseError\n /**\n+ * TODO: Adjust calling convention to be `GraphQL` dependency injeciton.\n  * @deprecated Migrate to `@unionlabs/sdk` query functions.\n  */\n-export const fetchDecodeGraphql = <S, E, D, V extends object | undefined>(\n+export const fetchDecodeGraphql = <S, E, D, V extends Variables = Variables>(\n   schema: Schema.Schema<S, E>,\n   document: TadaDocumentNode<D, V>,\n   variables?: V,\n-): Effect.Effect<S, FetchDecodeGraphqlError, never> => {\n-  const operationName = pipe(\n-    document,\n-    operationNamesFromDocumentNode,\n-    A.head,\n-    Option.getOrElse(() => \"unknown\"),\n+): Effect.Effect<S, FetchDecodeGraphqlError, GraphQL> =>\n+  Effect.andThen(\n+    GraphQL,\n+    ({ fetch }) =>\n+      pipe(\n+        fetch(new GraphQLRequest({ document, variables })),",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2105894362",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4609,
        "pr_file": "app2/src/lib/utils/queries.ts",
        "discussion_id": "2105894362",
        "commented_code": "@@ -29,36 +33,25 @@ export const fetchDecode = <S>(schema: Schema.Schema<S>, url: string) =>\n     Effect.withLogSpan(\"fetchDecode\"),\n   )\n \n-export type FetchDecodeGraphqlError = UnknownException | ParseError\n+export type FetchDecodeGraphqlError = GraphQLError | Persistence.PersistenceError | ParseError\n /**\n+ * TODO: Adjust calling convention to be `GraphQL` dependency injeciton.\n  * @deprecated Migrate to `@unionlabs/sdk` query functions.\n  */\n-export const fetchDecodeGraphql = <S, E, D, V extends object | undefined>(\n+export const fetchDecodeGraphql = <S, E, D, V extends Variables = Variables>(\n   schema: Schema.Schema<S, E>,\n   document: TadaDocumentNode<D, V>,\n   variables?: V,\n-): Effect.Effect<S, FetchDecodeGraphqlError, never> => {\n-  const operationName = pipe(\n-    document,\n-    operationNamesFromDocumentNode,\n-    A.head,\n-    Option.getOrElse(() => \"unknown\"),\n+): Effect.Effect<S, FetchDecodeGraphqlError, GraphQL> =>\n+  Effect.andThen(\n+    GraphQL,\n+    ({ fetch }) =>\n+      pipe(\n+        fetch(new GraphQLRequest({ document, variables })),",
        "comment_created_at": "2025-05-24T17:53:30+00:00",
        "comment_author": "ehegnes",
        "comment_body": "`GraphQL` service is only be responsible for querying, not schema transforms.\r\n\r\nThis may change if/when we migrate to declaring requests/results with more `Schema` classes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2081444784",
    "pr_number": 4516,
    "pr_file": "ts-sdk/src/cosmos/extended-cw-client.ts",
    "created_at": "2025-05-09T10:59:41+00:00",
    "commented_code": "+import { CosmWasmClient, type HttpEndpoint } from \"@cosmjs/cosmwasm-stargate\"\n+import { Tendermint34Client } from \"@cosmjs/tendermint-rpc\"\n+import axios from \"axios\"",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2081444784",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4516,
        "pr_file": "ts-sdk/src/cosmos/extended-cw-client.ts",
        "discussion_id": "2081444784",
        "commented_code": "@@ -0,0 +1,61 @@\n+import { CosmWasmClient, type HttpEndpoint } from \"@cosmjs/cosmwasm-stargate\"\n+import { Tendermint34Client } from \"@cosmjs/tendermint-rpc\"\n+import axios from \"axios\"",
        "comment_created_at": "2025-05-09T10:59:41+00:00",
        "comment_author": "cor",
        "comment_body": "we're not using axios in our sdk. we have effectful wrappers to make http calls",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2081450539",
    "pr_number": 4516,
    "pr_file": "ts-sdk/src/cosmos/extended-cw-client.ts",
    "created_at": "2025-05-09T11:04:12+00:00",
    "commented_code": "+import { CosmWasmClient, type HttpEndpoint } from \"@cosmjs/cosmwasm-stargate\"\n+import { Tendermint34Client } from \"@cosmjs/tendermint-rpc\"\n+import axios from \"axios\"\n+\n+export class ExtendedCosmWasmClient extends CosmWasmClient {\n+  private restUrl!: string\n+\n+  static async connectWithHeightSupport(endpoint: HttpEndpoint | string, restEndpoint: string) {\n+    const tmClient = await Tendermint34Client.connect(endpoint)\n+    const client = new ExtendedCosmWasmClient(tmClient)\n+\n+    client.restUrl = restEndpoint.replace(/\\/+$/, \"\")\n+    return client\n+  }\n+\n+  async queryContractSmartAtHeight(\n+    contract: string,\n+    queryMsg: Record<string, unknown>,\n+    height: number,\n+  ) {\n+    const base = this.restUrl\n+    const encoded = btoa(JSON.stringify(queryMsg))\n+    const url = `${base}/cosmwasm/wasm/v1/contract/${contract}/smart/${encoded}`\n+\n+    const resp = await axios.get(url, {\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+        \"x-cosmos-block-height\": height.toString(),\n+      },\n+    })\n+    if (resp.status < 200 || resp.status >= 300) {\n+      throw new Error(`HTTP ${resp.status}: ${JSON.stringify(resp.data)}`)\n+    }\n+\n+    return resp.data\n+  }\n+\n+  async getBalanceAtHeight(address: string, denom: string, height: number) {\n+    const base = this.restUrl\n+    const url = `${base}/cosmos/bank/v1beta1/balances/${address}`\n+    const resp = await fetch(url, {",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2081450539",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4516,
        "pr_file": "ts-sdk/src/cosmos/extended-cw-client.ts",
        "discussion_id": "2081450539",
        "commented_code": "@@ -0,0 +1,61 @@\n+import { CosmWasmClient, type HttpEndpoint } from \"@cosmjs/cosmwasm-stargate\"\n+import { Tendermint34Client } from \"@cosmjs/tendermint-rpc\"\n+import axios from \"axios\"\n+\n+export class ExtendedCosmWasmClient extends CosmWasmClient {\n+  private restUrl!: string\n+\n+  static async connectWithHeightSupport(endpoint: HttpEndpoint | string, restEndpoint: string) {\n+    const tmClient = await Tendermint34Client.connect(endpoint)\n+    const client = new ExtendedCosmWasmClient(tmClient)\n+\n+    client.restUrl = restEndpoint.replace(/\\/+$/, \"\")\n+    return client\n+  }\n+\n+  async queryContractSmartAtHeight(\n+    contract: string,\n+    queryMsg: Record<string, unknown>,\n+    height: number,\n+  ) {\n+    const base = this.restUrl\n+    const encoded = btoa(JSON.stringify(queryMsg))\n+    const url = `${base}/cosmwasm/wasm/v1/contract/${contract}/smart/${encoded}`\n+\n+    const resp = await axios.get(url, {\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+        \"x-cosmos-block-height\": height.toString(),\n+      },\n+    })\n+    if (resp.status < 200 || resp.status >= 300) {\n+      throw new Error(`HTTP ${resp.status}: ${JSON.stringify(resp.data)}`)\n+    }\n+\n+    return resp.data\n+  }\n+\n+  async getBalanceAtHeight(address: string, denom: string, height: number) {\n+    const base = this.restUrl\n+    const url = `${base}/cosmos/bank/v1beta1/balances/${address}`\n+    const resp = await fetch(url, {",
        "comment_created_at": "2025-05-09T11:04:12+00:00",
        "comment_author": "cor",
        "comment_body": "i recommend not going for this approach of extending `CosmWasmClient`, at all and to instead just write simple functions that make the Http call and return an Effect with proper error types rather than throwing errors. Using the client here is basically  useless because all that we're doing is just extracting the restURL from the client and then making a simple http request. Because we're doing it this way we lose valuable error information as we're not using our Effectful methods of making http calls that we have elsewhere in the sdk",
        "pr_file_module": null
      }
    ]
  }
]