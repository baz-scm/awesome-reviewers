[
  {
    "discussion_id": "2208663457",
    "pr_number": 4781,
    "pr_file": "uniond/app/upgrades/v1_2_0/upgrade.go",
    "created_at": "2025-07-15T20:58:49+00:00",
    "commented_code": "+package v1_2_0\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"math/big\"\n+\n+\t\"cosmossdk.io/math\"\n+\n+\tupgradetypes \"cosmossdk.io/x/upgrade/types\"\n+\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n+\t\"github.com/cosmos/cosmos-sdk/types/module\"\n+\tbanktypes \"github.com/cosmos/cosmos-sdk/x/bank/types\"\n+\tcrisistypes \"github.com/cosmos/cosmos-sdk/x/crisis/types\"\n+\tdistributiontypes \"github.com/cosmos/cosmos-sdk/x/distribution/types\"\n+\tgovtypes \"github.com/cosmos/cosmos-sdk/x/gov/types\"\n+\tminttypes \"github.com/cosmos/cosmos-sdk/x/mint/types\"\n+\tstakingtypes \"github.com/cosmos/cosmos-sdk/x/staking/types\"\n+\n+\t\"github.com/unionlabs/union/uniond/app/upgrades\"\n+)\n+\n+const U_BASE_DENOM = \"au\"\n+\n+// One U in `au`\n+const ONE_U = 1000000000000000000\n+\n+// Total supply of U (note, not in `au`)\n+const U_TOTAL_SUPPLY = 10000000000000\n+\n+// Union foundation multisig address\n+const UNION_FOUNDATION_MULTI_SIG = \"union1cpz5fhesgjcv2q0640uxtyur5ju65av6r8fem0\"",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2208663457",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4781,
        "pr_file": "uniond/app/upgrades/v1_2_0/upgrade.go",
        "discussion_id": "2208663457",
        "commented_code": "@@ -0,0 +1,240 @@\n+package v1_2_0\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"math/big\"\n+\n+\t\"cosmossdk.io/math\"\n+\n+\tupgradetypes \"cosmossdk.io/x/upgrade/types\"\n+\tsdk \"github.com/cosmos/cosmos-sdk/types\"\n+\t\"github.com/cosmos/cosmos-sdk/types/module\"\n+\tbanktypes \"github.com/cosmos/cosmos-sdk/x/bank/types\"\n+\tcrisistypes \"github.com/cosmos/cosmos-sdk/x/crisis/types\"\n+\tdistributiontypes \"github.com/cosmos/cosmos-sdk/x/distribution/types\"\n+\tgovtypes \"github.com/cosmos/cosmos-sdk/x/gov/types\"\n+\tminttypes \"github.com/cosmos/cosmos-sdk/x/mint/types\"\n+\tstakingtypes \"github.com/cosmos/cosmos-sdk/x/staking/types\"\n+\n+\t\"github.com/unionlabs/union/uniond/app/upgrades\"\n+)\n+\n+const U_BASE_DENOM = \"au\"\n+\n+// One U in `au`\n+const ONE_U = 1000000000000000000\n+\n+// Total supply of U (note, not in `au`)\n+const U_TOTAL_SUPPLY = 10000000000000\n+\n+// Union foundation multisig address\n+const UNION_FOUNDATION_MULTI_SIG = \"union1cpz5fhesgjcv2q0640uxtyur5ju65av6r8fem0\"",
        "comment_created_at": "2025-07-15T20:58:49+00:00",
        "comment_author": "benluelo",
        "comment_body": "note that we need to add a branch for testnet vs mainnet here before we upgrade mainnet",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2149744084",
    "pr_number": 4694,
    "pr_file": "uniond/cmd/uniond/cmd/root.go",
    "created_at": "2025-06-16T11:43:23+00:00",
    "commented_code": "clientCtx          client.Context\n \t)\n \n-\tif err := depinject.Inject(\n+\tif err := depinject.InjectDebug(\n+\t\tdepinject.Visualizer(func(dotGraph string) {\n+\t\t\tif depinjectOutPath, ok := os.LookupEnv(\"DEPINJECT_OUT_PATH\"); ok {\n+\t\t\t\tos.WriteFile(depinjectOutPath, []byte(dotGraph), 0644)",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2149744084",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4694,
        "pr_file": "uniond/cmd/uniond/cmd/root.go",
        "discussion_id": "2149744084",
        "commented_code": "@@ -31,7 +31,12 @@ func NewRootCmd() *cobra.Command {\n \t\tclientCtx          client.Context\n \t)\n \n-\tif err := depinject.Inject(\n+\tif err := depinject.InjectDebug(\n+\t\tdepinject.Visualizer(func(dotGraph string) {\n+\t\t\tif depinjectOutPath, ok := os.LookupEnv(\"DEPINJECT_OUT_PATH\"); ok {\n+\t\t\t\tos.WriteFile(depinjectOutPath, []byte(dotGraph), 0644)",
        "comment_created_at": "2025-06-16T11:43:23+00:00",
        "comment_author": "benluelo",
        "comment_body": "this allows us to dump the depinject graph on startup",
        "pr_file_module": null
      }
    ]
  }
]