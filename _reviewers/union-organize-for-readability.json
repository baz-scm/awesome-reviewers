[
  {
    "discussion_id": "2081431590",
    "pr_number": 4516,
    "pr_file": "ts-sdk/examples/cosmos-read-contract-at-height.ts",
    "created_at": "2025-05-09T10:52:03+00:00",
    "commented_code": "+import { Effect } from \"effect\"\n+import {\n+  CosmWasmClientContext,\n+  createCosmWasmClient,\n+  createExtendedCosmWasmClient,\n+  ExtendedCosmWasmClientContext,\n+} from \"../src/cosmos/client.js\"\n+import { readCw20TotalSupply, readCw20TotalSupplyAtHeight } from \"../src/cosmos/cw20.js\"\n+\n+// @ts-ignore\n+BigInt[\"prototype\"].toJSON = function() {\n+  return this.toString()\n+}\n+// Example CW20 token balance query\n+// Effect.runPromiseExit(\n+//   Effect.gen(function* () {\n+//     // Create a CosmWasm client\n+//     const rpc = \"https://rpc.bbn-test-5.babylon.chain.kitchen\"\n+//     const client = yield* createCosmWasmClient(rpc)\n+//     const contractAddr = \"bbn1zsrv23akkgxdnwul72sftgv2xjt5khsnt3wwjhp0ffh683hzp5aq5a0h6n\"\n+//     const minter = \"bbn1sakazthycqgzer50nqgr5ta4vy3gwz8wxla3s8rd8pql4ctmz5qssg39sf\"\n+//     const ucs03Addr = \"bbn1336jj8ertl8h7rdvnz4dh5rqahd09cy0x43guhsxx6xyrztx292q77945h\"\n+//     // Query a CW20 token contract for a balance\n+\n+//     const balanceNow = yield* channelBalance(0n, \"ubbn\").pipe(\n+//       Effect.provideService(CosmWasmClientDestination, { client }),\n+//       Effect.provideService(CosmosChannelDestination, {\n+//         ucs03address: ucs03Addr,\n+//         channelId: 3\n+//       }),\n+//       Effect.tapError(e => Effect.logError(\"Error fetching channel balance:\", e))\n+//     )\n+//     console.info(\"balance\", balanceNow)\n+\n+//     const rest = \"https://rest.bbn-test-5.babylon.chain.kitchen\"\n+//     const extClient = yield* createExtendedCosmWasmClient(rpc, rest)\n+\n+//     const balanceAtBlock123 = yield* channelBalanceAtHeight(0n, \"ubbn\", 912421).pipe(\n+//       Effect.provideService(ExtendedCosmWasmClientContext, { client: extClient }),\n+//       Effect.provideService(CosmosChannelDestination, {\n+//         ucs03address: ucs03Addr,\n+//         channelId: 3\n+//       }),\n+//       Effect.tapError(e => Effect.logError(\"height-query failed:\", e))\n+//     )\n+\n+//     console.info(\"Balance at 233799:\", balanceAtBlock123)\n+\n+//     const withClient = Effect.provideService(CosmWasmClientContext, { client })\n+\n+//     const cw20balance = yield* readCw20Balance(contractAddr, minter).pipe(withClient)\n+\n+//     console.info(\"cw20balance\", cw20balance)\n+\n+//     const withExtClient = Effect.provideService(ExtendedCosmWasmClientContext, {\n+//       client: extClient\n+//     })\n+//     const cw20BalanceAtHeight = yield* readCw20BalanceAtHeight(contractAddr, minter, 912421).pipe(\n+//       withExtClient\n+//     )\n+//     console.info(\"cw20BalanceAtHeight\", cw20BalanceAtHeight)\n+\n+//     const cw20TotalSupply = yield* readCw20TotalSupply(contractAddr).pipe(withClient)\n+\n+//     console.info(\"cw20TotalSupply\", cw20TotalSupply)\n+\n+//     const cw20TotalSupplyAtHeight = yield* readCw20TotalSupplyAtHeight(contractAddr, 912421).pipe(\n+//       withExtClient\n+//     )\n+\n+//     console.info(\"cw20TotalSupplyAtHeight\", cw20TotalSupplyAtHeight)\n+\n+//     return balanceAtBlock123\n+//   })\n+// ).then(exit => console.log(JSON.stringify(exit, null, 2)))\n+\n+Effect.runPromiseExit(\n+  Effect.gen(function*() {\n+    // Create a CosmWasm client\n+    const rpc = \"https://rpc.xion-testnet-2.xion.chain.cooking\"\n+    const client = yield* createCosmWasmClient(rpc)\n+    const tokenDenom = \"xion100jj57u4rna4wcdnn8pxvnacxvm0fx6zaazj5xqq555syvvae2wsqsum0y\"\n+    const latest = yield* Effect.tryPromise({\n+      try: () => {\n+        return client.getHeight()\n+      },\n+      catch: e => new Error(`Failed to fetch blockNumber for ${rpc}: ${String(e)}`),\n+    })\n+    console.info(\"height: \", latest)\n+\n+    const totalSupplyNow = yield* readCw20TotalSupply(tokenDenom).pipe(\n+      Effect.provideService(CosmWasmClientContext, { client }),\n+      Effect.tapError(e => Effect.logError(\"Error fetching channel balance:\", e)),\n+    )\n+    console.info(\"totalSupplyNow\", totalSupplyNow)\n+\n+    const rest = \"https://rest.xion-testnet-2.xion.chain.cooking\"\n+    const extClient = yield* createExtendedCosmWasmClient(rpc, rest)\n+\n+    const totalSupplyAtHeight = yield* readCw20TotalSupplyAtHeight(tokenDenom, Number(latest)).pipe(\n+      Effect.provideService(ExtendedCosmWasmClientContext, { client: extClient }),\n+      Effect.tapError(e => Effect.logError(\"height-query failed:\", e)),\n+    )\n+\n+    console.info(\"totalSupplyAtHeight:\", totalSupplyAtHeight)\n+\n+    const minter = \"xion1egp7k30mskfxmhy2awk677tnqdl6lfkfxhrwsv\"\n+    const { amount } = yield* Effect.tryPromise({\n+      try: () => client.getBalance(minter, \"uxion\"),\n+      catch: e => {\n+        console.error(`Failed to fetch balance for ${minter}: ${String(e)}`)\n+      },\n+    })\n+    console.info(\"Balance: \", amount)\n+\n+    const amountAtHeight = yield* Effect.tryPromise({\n+      try: () => extClient.getBalanceAtHeight(minter, \"uxion\", 3250775),\n+      catch: e => {\n+        console.error(`Failed to fetch balance for ${minter}: ${String(e)}`)\n+      },\n+    })",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2081431590",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4516,
        "pr_file": "ts-sdk/examples/cosmos-read-contract-at-height.ts",
        "discussion_id": "2081431590",
        "commented_code": "@@ -0,0 +1,124 @@\n+import { Effect } from \"effect\"\n+import {\n+  CosmWasmClientContext,\n+  createCosmWasmClient,\n+  createExtendedCosmWasmClient,\n+  ExtendedCosmWasmClientContext,\n+} from \"../src/cosmos/client.js\"\n+import { readCw20TotalSupply, readCw20TotalSupplyAtHeight } from \"../src/cosmos/cw20.js\"\n+\n+// @ts-ignore\n+BigInt[\"prototype\"].toJSON = function() {\n+  return this.toString()\n+}\n+// Example CW20 token balance query\n+// Effect.runPromiseExit(\n+//   Effect.gen(function* () {\n+//     // Create a CosmWasm client\n+//     const rpc = \"https://rpc.bbn-test-5.babylon.chain.kitchen\"\n+//     const client = yield* createCosmWasmClient(rpc)\n+//     const contractAddr = \"bbn1zsrv23akkgxdnwul72sftgv2xjt5khsnt3wwjhp0ffh683hzp5aq5a0h6n\"\n+//     const minter = \"bbn1sakazthycqgzer50nqgr5ta4vy3gwz8wxla3s8rd8pql4ctmz5qssg39sf\"\n+//     const ucs03Addr = \"bbn1336jj8ertl8h7rdvnz4dh5rqahd09cy0x43guhsxx6xyrztx292q77945h\"\n+//     // Query a CW20 token contract for a balance\n+\n+//     const balanceNow = yield* channelBalance(0n, \"ubbn\").pipe(\n+//       Effect.provideService(CosmWasmClientDestination, { client }),\n+//       Effect.provideService(CosmosChannelDestination, {\n+//         ucs03address: ucs03Addr,\n+//         channelId: 3\n+//       }),\n+//       Effect.tapError(e => Effect.logError(\"Error fetching channel balance:\", e))\n+//     )\n+//     console.info(\"balance\", balanceNow)\n+\n+//     const rest = \"https://rest.bbn-test-5.babylon.chain.kitchen\"\n+//     const extClient = yield* createExtendedCosmWasmClient(rpc, rest)\n+\n+//     const balanceAtBlock123 = yield* channelBalanceAtHeight(0n, \"ubbn\", 912421).pipe(\n+//       Effect.provideService(ExtendedCosmWasmClientContext, { client: extClient }),\n+//       Effect.provideService(CosmosChannelDestination, {\n+//         ucs03address: ucs03Addr,\n+//         channelId: 3\n+//       }),\n+//       Effect.tapError(e => Effect.logError(\"height-query failed:\", e))\n+//     )\n+\n+//     console.info(\"Balance at 233799:\", balanceAtBlock123)\n+\n+//     const withClient = Effect.provideService(CosmWasmClientContext, { client })\n+\n+//     const cw20balance = yield* readCw20Balance(contractAddr, minter).pipe(withClient)\n+\n+//     console.info(\"cw20balance\", cw20balance)\n+\n+//     const withExtClient = Effect.provideService(ExtendedCosmWasmClientContext, {\n+//       client: extClient\n+//     })\n+//     const cw20BalanceAtHeight = yield* readCw20BalanceAtHeight(contractAddr, minter, 912421).pipe(\n+//       withExtClient\n+//     )\n+//     console.info(\"cw20BalanceAtHeight\", cw20BalanceAtHeight)\n+\n+//     const cw20TotalSupply = yield* readCw20TotalSupply(contractAddr).pipe(withClient)\n+\n+//     console.info(\"cw20TotalSupply\", cw20TotalSupply)\n+\n+//     const cw20TotalSupplyAtHeight = yield* readCw20TotalSupplyAtHeight(contractAddr, 912421).pipe(\n+//       withExtClient\n+//     )\n+\n+//     console.info(\"cw20TotalSupplyAtHeight\", cw20TotalSupplyAtHeight)\n+\n+//     return balanceAtBlock123\n+//   })\n+// ).then(exit => console.log(JSON.stringify(exit, null, 2)))\n+\n+Effect.runPromiseExit(\n+  Effect.gen(function*() {\n+    // Create a CosmWasm client\n+    const rpc = \"https://rpc.xion-testnet-2.xion.chain.cooking\"\n+    const client = yield* createCosmWasmClient(rpc)\n+    const tokenDenom = \"xion100jj57u4rna4wcdnn8pxvnacxvm0fx6zaazj5xqq555syvvae2wsqsum0y\"\n+    const latest = yield* Effect.tryPromise({\n+      try: () => {\n+        return client.getHeight()\n+      },\n+      catch: e => new Error(`Failed to fetch blockNumber for ${rpc}: ${String(e)}`),\n+    })\n+    console.info(\"height: \", latest)\n+\n+    const totalSupplyNow = yield* readCw20TotalSupply(tokenDenom).pipe(\n+      Effect.provideService(CosmWasmClientContext, { client }),\n+      Effect.tapError(e => Effect.logError(\"Error fetching channel balance:\", e)),\n+    )\n+    console.info(\"totalSupplyNow\", totalSupplyNow)\n+\n+    const rest = \"https://rest.xion-testnet-2.xion.chain.cooking\"\n+    const extClient = yield* createExtendedCosmWasmClient(rpc, rest)\n+\n+    const totalSupplyAtHeight = yield* readCw20TotalSupplyAtHeight(tokenDenom, Number(latest)).pipe(\n+      Effect.provideService(ExtendedCosmWasmClientContext, { client: extClient }),\n+      Effect.tapError(e => Effect.logError(\"height-query failed:\", e)),\n+    )\n+\n+    console.info(\"totalSupplyAtHeight:\", totalSupplyAtHeight)\n+\n+    const minter = \"xion1egp7k30mskfxmhy2awk677tnqdl6lfkfxhrwsv\"\n+    const { amount } = yield* Effect.tryPromise({\n+      try: () => client.getBalance(minter, \"uxion\"),\n+      catch: e => {\n+        console.error(`Failed to fetch balance for ${minter}: ${String(e)}`)\n+      },\n+    })\n+    console.info(\"Balance: \", amount)\n+\n+    const amountAtHeight = yield* Effect.tryPromise({\n+      try: () => extClient.getBalanceAtHeight(minter, \"uxion\", 3250775),\n+      catch: e => {\n+        console.error(`Failed to fetch balance for ${minter}: ${String(e)}`)\n+      },\n+    })",
        "comment_created_at": "2025-05-09T10:52:03+00:00",
        "comment_author": "cor",
        "comment_body": "same for these, let's also make wrappers for these that we expose so that in the examples we can simply yield* without having to wrap in a tryPromise here",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2017484549",
    "pr_number": 4126,
    "pr_file": "ts-sdk/examples/ucs03-encode-instruction.ts",
    "created_at": "2025-03-27T19:26:32+00:00",
    "commented_code": "import { toHex } from \"viem\"\n-import {\n-  Batch,\n-  encodeAbi,\n-  Forward,\n-  FungibleAssetOrder,\n-  Multiplex\n-} from \"../src/ucs03/instruction.js\"\n+import * as Instruction from \"../src/ucs03/instruction.js\"",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2017484549",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4126,
        "pr_file": "ts-sdk/examples/ucs03-encode-instruction.ts",
        "discussion_id": "2017484549",
        "commented_code": "@@ -1,38 +1,36 @@\n import { toHex } from \"viem\"\n-import {\n-  Batch,\n-  encodeAbi,\n-  Forward,\n-  FungibleAssetOrder,\n-  Multiplex\n-} from \"../src/ucs03/instruction.js\"\n+import * as Instruction from \"../src/ucs03/instruction.js\"",
        "comment_created_at": "2025-03-27T19:26:32+00:00",
        "comment_author": "ehegnes",
        "comment_body": "Import qualified given ADT export structure exposed by new `Instructions` module refactor.",
        "pr_file_module": null
      }
    ]
  }
]