[
  {
    "discussion_id": "2178932734",
    "pr_number": 4757,
    "pr_file": "app2/src/lib/dashboard/queries/private.ts",
    "created_at": "2025-07-02T03:40:29+00:00",
    "commented_code": "export const removeUserWallet = (userId: string, address: string) =>\n   pipe(\n-    getSupabaseClient(),\n+    SupabaseClient,",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2178932734",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4757,
        "pr_file": "app2/src/lib/dashboard/queries/private.ts",
        "discussion_id": "2178932734",
        "commented_code": "@@ -180,7 +180,7 @@ export const getWalletsByUserId = (userId: string) =>\n \n export const removeUserWallet = (userId: string, address: string) =>\n   pipe(\n-    getSupabaseClient(),\n+    SupabaseClient,",
        "comment_created_at": "2025-07-02T03:40:29+00:00",
        "comment_author": "ehegnes",
        "comment_body": "Replace client getter with service injection in all instances.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178936719",
    "pr_number": 4757,
    "pr_file": "app2/src/lib/dashboard/client.ts",
    "created_at": "2025-07-02T03:46:09+00:00",
    "commented_code": "+import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from \"$env/static/public\"\n import type { Database } from \"$lib/dashboard/database.types.ts\"\n import { createClient } from \"@supabase/supabase-js\"\n-import { Effect } from \"effect\"\n+import { Effect, Schema as S } from \"effect\"\n import { SupabaseClientError } from \"./errors\"\n \n export type Entity<T extends keyof (Database[\"public\"][\"Tables\"] & Database[\"public\"][\"Views\"])> =\n   (Database[\"public\"][\"Tables\"] & Database[\"public\"][\"Views\"])[T][\"Row\"]\n \n-let client: ReturnType<typeof createClient<Database>> | null = null\n+export type SupabaseOptions = NonNullable<Parameters<typeof createClient<Database>>[2]>\n \n-export const getSupabaseClient = () =>\n-  Effect.gen(function*() {\n-    if (client) {\n-      return client\n-    }\n-\n-    const url = import.meta.env.VITE_SUPABASE_URL\n-    const anonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n-\n-    if (!url || !anonKey) {\n-      return yield* Effect.fail(\n-        new SupabaseClientError({\n-          cause: \"Missing Supabase URL or anonymous key\",\n-          operation: \"init\",\n-        }),\n+export class SupabaseClient extends Effect.Service<SupabaseClient>()(\"SupabaseClient\", {\n+  scoped: (options?: SupabaseOptions | undefined) =>\n+    Effect.gen(function*() {\n+      const url = yield* S.decode(S.URL)(PUBLIC_SUPABASE_URL).pipe(\n+        Effect.mapError((cause) =>\n+          new SupabaseClientError({\n+            operation: \"init\",\n+            message: \"Could not decode PUBLIC_SUPABASE_URL to URL\",\n+            cause,\n+          })\n+        ),\n+      )\n+      const anonKey = yield* S.decode(S.NonEmptyString)(PUBLIC_SUPABASE_ANON_KEY).pipe(\n+        Effect.mapError((cause) =>\n+          new SupabaseClientError({\n+            operation: \"init\",\n+            message: \"Could not decode PUBLIC_SUPABASE_ANON_KEY to non-empty string\",\n+            cause,\n+          })\n+        ),\n       )\n-    }\n-\n-    client = createClient<Database>(url, anonKey, {\n-      auth: {\n-        autoRefreshToken: true,\n-      },\n-    })\n \n-    return client\n-  })\n+      return createClient<Database>(url.toString(), anonKey, options)\n+    }),\n+}) {}",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2178936719",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4757,
        "pr_file": "app2/src/lib/dashboard/client.ts",
        "discussion_id": "2178936719",
        "commented_code": "@@ -1,36 +1,36 @@\n+import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from \"$env/static/public\"\n import type { Database } from \"$lib/dashboard/database.types.ts\"\n import { createClient } from \"@supabase/supabase-js\"\n-import { Effect } from \"effect\"\n+import { Effect, Schema as S } from \"effect\"\n import { SupabaseClientError } from \"./errors\"\n \n export type Entity<T extends keyof (Database[\"public\"][\"Tables\"] & Database[\"public\"][\"Views\"])> =\n   (Database[\"public\"][\"Tables\"] & Database[\"public\"][\"Views\"])[T][\"Row\"]\n \n-let client: ReturnType<typeof createClient<Database>> | null = null\n+export type SupabaseOptions = NonNullable<Parameters<typeof createClient<Database>>[2]>\n \n-export const getSupabaseClient = () =>\n-  Effect.gen(function*() {\n-    if (client) {\n-      return client\n-    }\n-\n-    const url = import.meta.env.VITE_SUPABASE_URL\n-    const anonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n-\n-    if (!url || !anonKey) {\n-      return yield* Effect.fail(\n-        new SupabaseClientError({\n-          cause: \"Missing Supabase URL or anonymous key\",\n-          operation: \"init\",\n-        }),\n+export class SupabaseClient extends Effect.Service<SupabaseClient>()(\"SupabaseClient\", {\n+  scoped: (options?: SupabaseOptions | undefined) =>\n+    Effect.gen(function*() {\n+      const url = yield* S.decode(S.URL)(PUBLIC_SUPABASE_URL).pipe(\n+        Effect.mapError((cause) =>\n+          new SupabaseClientError({\n+            operation: \"init\",\n+            message: \"Could not decode PUBLIC_SUPABASE_URL to URL\",\n+            cause,\n+          })\n+        ),\n+      )\n+      const anonKey = yield* S.decode(S.NonEmptyString)(PUBLIC_SUPABASE_ANON_KEY).pipe(\n+        Effect.mapError((cause) =>\n+          new SupabaseClientError({\n+            operation: \"init\",\n+            message: \"Could not decode PUBLIC_SUPABASE_ANON_KEY to non-empty string\",\n+            cause,\n+          })\n+        ),\n       )\n-    }\n-\n-    client = createClient<Database>(url, anonKey, {\n-      auth: {\n-        autoRefreshToken: true,\n-      },\n-    })\n \n-    return client\n-  })\n+      return createClient<Database>(url.toString(), anonKey, options)\n+    }),\n+}) {}",
        "comment_created_at": "2025-07-02T03:46:09+00:00",
        "comment_author": "ehegnes",
        "comment_body": "This service provides the `SupabaseClient` from `@supabase/supabase-js` without any indirection.\r\n\r\nThis Effect service will guarantee that the Supabase client is initialized with the `AppRuntime` layer, which will remove possibility of race conditions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094382331",
    "pr_number": 4538,
    "pr_file": "app2/src/lib/runtime.ts",
    "created_at": "2025-05-18T05:53:17+00:00",
    "commented_code": "+import { runForkWithRuntime, runPromiseExitWithRuntime } from \"$lib/utils/effect.svelte.js\"\n+import { Layer, ManagedRuntime, Match, pipe } from \"effect\"\n+import { isNotUndefined } from \"effect/Predicate\"\n+\n+const IS_VITEST = isNotUndefined(import.meta.vitest)\n+\n+type AppLayer = Layer.Layer<never, never, never>\n+\n+const make = async () => {\n+  const AppLayer = (await pipe(\n+    Match.value(IS_VITEST),\n+    Match.when(true, () => import(\"$lib/layers/test.js\")),\n+    Match.when(false, () => import(\"$lib/layers/live.js\")),\n+    Match.exhaustive,\n+  )).default satisfies AppLayer\n+\n+  const {\n+    runFork,\n+    runPromise,\n+    runPromiseExit,\n+    runSync,\n+    runSyncExit,\n+    runtime: _runtime,\n+  } = ManagedRuntime.make(AppLayer)\n+\n+  const runtime = await _runtime()\n+\n+  const runFork$ = runForkWithRuntime(runtime)\n+  const runPromiseExit$ = runPromiseExitWithRuntime(runtime)\n+\n+  return {\n+    runFork$,\n+    runFork,\n+    runPromise,\n+    runPromiseExit$,\n+    runPromiseExit,\n+    runSync,\n+    runSyncExit,\n+  } as const\n+}\n+\n+type Runtime = Awaited<ReturnType<typeof make>>\n+\n+export let runFork$: Runtime[\"runFork$\"]\n+export let runFork: Runtime[\"runFork\"]\n+export let runPromise: Runtime[\"runPromise\"]\n+export let runPromiseExit$: Runtime[\"runPromiseExit$\"]\n+export let runPromiseExit: Runtime[\"runPromiseExit\"]\n+export let runSync: Runtime[\"runSync\"]\n+export let runSyncExit: Runtime[\"runSyncExit\"]\n+\n+export const __init = async () => {\n+  const runtime = await make()\n+  ;({\n+    runFork$,\n+    runFork,\n+    runPromise,\n+    runPromiseExit$,\n+    runPromiseExit,\n+    runSync,\n+    runSyncExit,\n+  } = runtime)",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2094382331",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4538,
        "pr_file": "app2/src/lib/runtime.ts",
        "discussion_id": "2094382331",
        "commented_code": "@@ -0,0 +1,63 @@\n+import { runForkWithRuntime, runPromiseExitWithRuntime } from \"$lib/utils/effect.svelte.js\"\n+import { Layer, ManagedRuntime, Match, pipe } from \"effect\"\n+import { isNotUndefined } from \"effect/Predicate\"\n+\n+const IS_VITEST = isNotUndefined(import.meta.vitest)\n+\n+type AppLayer = Layer.Layer<never, never, never>\n+\n+const make = async () => {\n+  const AppLayer = (await pipe(\n+    Match.value(IS_VITEST),\n+    Match.when(true, () => import(\"$lib/layers/test.js\")),\n+    Match.when(false, () => import(\"$lib/layers/live.js\")),\n+    Match.exhaustive,\n+  )).default satisfies AppLayer\n+\n+  const {\n+    runFork,\n+    runPromise,\n+    runPromiseExit,\n+    runSync,\n+    runSyncExit,\n+    runtime: _runtime,\n+  } = ManagedRuntime.make(AppLayer)\n+\n+  const runtime = await _runtime()\n+\n+  const runFork$ = runForkWithRuntime(runtime)\n+  const runPromiseExit$ = runPromiseExitWithRuntime(runtime)\n+\n+  return {\n+    runFork$,\n+    runFork,\n+    runPromise,\n+    runPromiseExit$,\n+    runPromiseExit,\n+    runSync,\n+    runSyncExit,\n+  } as const\n+}\n+\n+type Runtime = Awaited<ReturnType<typeof make>>\n+\n+export let runFork$: Runtime[\"runFork$\"]\n+export let runFork: Runtime[\"runFork\"]\n+export let runPromise: Runtime[\"runPromise\"]\n+export let runPromiseExit$: Runtime[\"runPromiseExit$\"]\n+export let runPromiseExit: Runtime[\"runPromiseExit\"]\n+export let runSync: Runtime[\"runSync\"]\n+export let runSyncExit: Runtime[\"runSyncExit\"]\n+\n+export const __init = async () => {\n+  const runtime = await make()\n+  ;({\n+    runFork$,\n+    runFork,\n+    runPromise,\n+    runPromiseExit$,\n+    runPromiseExit,\n+    runSync,\n+    runSyncExit,\n+  } = runtime)",
        "comment_created_at": "2025-05-18T05:53:17+00:00",
        "comment_author": "ehegnes",
        "comment_body": "Horrible mutable sins given that [\"top-level-await\" support is not stable in some browsers](https://caniuse.com/mdn-javascript_operators_await_top_level), and we need a module singleton. Safety pseudo-guaranteed by virtue of importing this module first in the client `init` hook.\r\n\r\nThis likely means that the runtime is not available in server hooks\u2014could use some testing, but feasible to add if needed in future.",
        "pr_file_module": null
      }
    ]
  }
]