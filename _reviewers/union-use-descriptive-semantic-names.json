[
  {
    "discussion_id": "2338208822",
    "pr_number": 4981,
    "pr_file": "cosmwasm/deployer/src/main.rs",
    "created_at": "2025-09-11T00:13:14+00:00",
    "commented_code": ".unwrap();\n \n                     let minter_init_params = match ucs03_config.token_minter_config {\n-                        TokenMinterConfig::Cw20 { cw20_base } => {\n+                        TokenMinterConfig::Cw20 {\n+                            cw20_impl: cw20_base,",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2338208822",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4981,
        "pr_file": "cosmwasm/deployer/src/main.rs",
        "discussion_id": "2338208822",
        "commented_code": "@@ -672,7 +672,9 @@ async fn do_main() -> Result<()> {\n                     .unwrap();\n \n                     let minter_init_params = match ucs03_config.token_minter_config {\n-                        TokenMinterConfig::Cw20 { cw20_base } => {\n+                        TokenMinterConfig::Cw20 {\n+                            cw20_impl: cw20_base,",
        "comment_created_at": "2025-09-11T00:13:14+00:00",
        "comment_author": "aeryz",
        "comment_body": "Nit: use cw20_impl as the name",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2227787490",
    "pr_number": 4859,
    "pr_file": "cosmwasm/ibc-union/core/msg/src/query.rs",
    "created_at": "2025-07-24T08:12:11+00:00",
    "commented_code": "GetClientState { client_id: ClientId },\n     #[cfg_attr(feature = \"cw-orch-interface\", returns(unionlabs_primitives::Bytes))]\n     GetConsensusState { client_id: ClientId, height: u64 },\n-    #[cfg_attr(feature = \"cw-orch-interface\", returns(crate::lightclient::Status))]\n+    #[cfg_attr(feature = \"cw-orch-interface\", returns(ibc_union_spec::path::Status))]\n     GetStatus { client_id: ClientId },\n+    #[cfg_attr(feature = \"cw-orch-interface\", returns(ibc_union_spec::path::Status))]\n+    GetCommittedStatus { client_id: ClientId },",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2227787490",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4859,
        "pr_file": "cosmwasm/ibc-union/core/msg/src/query.rs",
        "discussion_id": "2227787490",
        "commented_code": "@@ -16,8 +16,10 @@ pub enum QueryMsg {\n     GetClientState { client_id: ClientId },\n     #[cfg_attr(feature = \"cw-orch-interface\", returns(unionlabs_primitives::Bytes))]\n     GetConsensusState { client_id: ClientId, height: u64 },\n-    #[cfg_attr(feature = \"cw-orch-interface\", returns(crate::lightclient::Status))]\n+    #[cfg_attr(feature = \"cw-orch-interface\", returns(ibc_union_spec::path::Status))]\n     GetStatus { client_id: ClientId },\n+    #[cfg_attr(feature = \"cw-orch-interface\", returns(ibc_union_spec::path::Status))]\n+    GetCommittedStatus { client_id: ClientId },",
        "comment_created_at": "2025-07-24T08:12:11+00:00",
        "comment_author": "aeryz",
        "comment_body": "`GetStatusCommitment` is more correct because we are not getting the `Status` that are committed. We are getting the commitment of the `Status` which is a hash of the encoded `Status`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2058938474",
    "pr_number": 4402,
    "pr_file": "cosmwasm/ibc-union/app/ucs06-funded-dispatch/src/types.rs",
    "created_at": "2025-04-24T17:38:44+00:00",
    "commented_code": "+use alloy::primitives::U256;\n+use cosmwasm_std::{Addr, Uint128};\n+\n+pub const FLAG_ALLOW_FAILURE: U256 = U256::from_be_slice(&[1]);\n+pub const FLAG_ALLOW_MARKET_MAKER: U256 = U256::from_be_slice(&[2]);\n+\n+alloy::sol! {\n+    #[derive(Debug)]\n+    struct FundedDispatchFund {\n+        bytes token;\n+        uint256 amount;\n+    }\n+\n+    #[derive(Debug)]\n+    struct FundedDispatchParameters {\n+        uint256 flags;\n+        FundedDispatchFund[] funds;\n+        bytes contractAddress;",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2058938474",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4402,
        "pr_file": "cosmwasm/ibc-union/app/ucs06-funded-dispatch/src/types.rs",
        "discussion_id": "2058938474",
        "commented_code": "@@ -0,0 +1,50 @@\n+use alloy::primitives::U256;\n+use cosmwasm_std::{Addr, Uint128};\n+\n+pub const FLAG_ALLOW_FAILURE: U256 = U256::from_be_slice(&[1]);\n+pub const FLAG_ALLOW_MARKET_MAKER: U256 = U256::from_be_slice(&[2]);\n+\n+alloy::sol! {\n+    #[derive(Debug)]\n+    struct FundedDispatchFund {\n+        bytes token;\n+        uint256 amount;\n+    }\n+\n+    #[derive(Debug)]\n+    struct FundedDispatchParameters {\n+        uint256 flags;\n+        FundedDispatchFund[] funds;\n+        bytes contractAddress;",
        "comment_created_at": "2025-04-24T17:38:44+00:00",
        "comment_author": "aeryz",
        "comment_body": "NIT: Make these fields snake case to be consistent with ZKGM and Rust conventions",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1914691107",
    "pr_number": 3474,
    "pr_file": "lib/create3/src/lib.rs",
    "created_at": "2025-01-14T11:50:04+00:00",
    "commented_code": "+use alloy_primitives::hex;\n+use sha3::{Digest, Keccak256};\n+\n+const PROXY_INITCODE_HASH: [u8; 32] =\n+    hex!(\"21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f\");\n+\n+/// Use to obtain the address using the CREATE3 algorithm from solady's assembly optimized implementation\n+/// https://github.com/Vectorized/solady/blob/de9aee59648862bb98affd578248d1e75c7073ad/src/utils/CREATE3.sol#L106\n+pub fn predict_deterministic_address(deployer: &[u8], salt: &[u8; 32]) -> [u8; 20] {",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1914691107",
        "repo_full_name": "unionlabs/union",
        "pr_number": 3474,
        "pr_file": "lib/create3/src/lib.rs",
        "discussion_id": "1914691107",
        "commented_code": "@@ -0,0 +1,73 @@\n+use alloy_primitives::hex;\n+use sha3::{Digest, Keccak256};\n+\n+const PROXY_INITCODE_HASH: [u8; 32] =\n+    hex!(\"21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f\");\n+\n+/// Use to obtain the address using the CREATE3 algorithm from solady's assembly optimized implementation\n+/// https://github.com/Vectorized/solady/blob/de9aee59648862bb98affd578248d1e75c7073ad/src/utils/CREATE3.sol#L106\n+pub fn predict_deterministic_address(deployer: &[u8], salt: &[u8; 32]) -> [u8; 20] {",
        "comment_created_at": "2025-01-14T11:50:04+00:00",
        "comment_author": "benluelo",
        "comment_body": "deployer should be an address, salt should be b256, and this should return an address\r\n\r\nhttps://docs.rs/alloy-primitives/latest/alloy_primitives/struct.Address.html\r\nhttps://docs.rs/alloy-primitives/latest/alloy_primitives/aliases/type.B256.html",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1823099692",
    "pr_number": 3175,
    "pr_file": "light-clients/ethereum-light-client/types/src/light_client_update_data.rs",
    "created_at": "2024-10-30T17:31:36+00:00",
    "commented_code": "pub signature_slot: u64,\n }\n \n+impl LightClientUpdateData {\n+    pub fn new_beacon_light_client_update(",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1823099692",
        "repo_full_name": "unionlabs/union",
        "pr_number": 3175,
        "pr_file": "light-clients/ethereum-light-client/types/src/light_client_update_data.rs",
        "discussion_id": "1823099692",
        "commented_code": "@@ -15,6 +18,24 @@ pub struct LightClientUpdateData {\n     pub signature_slot: u64,\n }\n \n+impl LightClientUpdateData {\n+    pub fn new_beacon_light_client_update(",
        "comment_created_at": "2024-10-30T17:31:36+00:00",
        "comment_author": "benluelo",
        "comment_body": "new* typically means constructor - if you want this method, it should be `into_beacon_light_client_update`",
        "pr_file_module": null
      },
      {
        "comment_id": "1823102541",
        "repo_full_name": "unionlabs/union",
        "pr_number": 3175,
        "pr_file": "light-clients/ethereum-light-client/types/src/light_client_update_data.rs",
        "discussion_id": "1823099692",
        "commented_code": "@@ -15,6 +18,24 @@ pub struct LightClientUpdateData {\n     pub signature_slot: u64,\n }\n \n+impl LightClientUpdateData {\n+    pub fn new_beacon_light_client_update(",
        "comment_created_at": "2024-10-30T17:33:26+00:00",
        "comment_author": "aeryz",
        "comment_body": "correct",
        "pr_file_module": null
      },
      {
        "comment_id": "1823128712",
        "repo_full_name": "unionlabs/union",
        "pr_number": 3175,
        "pr_file": "light-clients/ethereum-light-client/types/src/light_client_update_data.rs",
        "discussion_id": "1823099692",
        "commented_code": "@@ -15,6 +18,24 @@ pub struct LightClientUpdateData {\n     pub signature_slot: u64,\n }\n \n+impl LightClientUpdateData {\n+    pub fn new_beacon_light_client_update(",
        "comment_created_at": "2024-10-30T17:51:32+00:00",
        "comment_author": "aeryz",
        "comment_body": "will fix this in the new pr after this",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1719971759",
    "pr_number": 2693,
    "pr_file": "hubble/src/chain_id_query.rs",
    "created_at": "2024-08-16T15:05:04+00:00",
    "commented_code": "traits::ClientState,\n     WasmClientType,\n };\n+sol! {\n+    contract IbcHandler {\n+        function CreateClient(MsgCreateClient calldata) returns (string memory);\n+    }\n \n+    struct MsgCreateClient {\n+        string client_type;\n+        bytes client_state_bytes;\n+        bytes consensusStateBytes;\n+        address relayer;\n+    }\n+}",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1719971759",
        "repo_full_name": "unionlabs/union",
        "pr_number": 2693,
        "pr_file": "hubble/src/chain_id_query.rs",
        "discussion_id": "1719971759",
        "commented_code": "@@ -14,7 +17,18 @@ use unionlabs::{\n     traits::ClientState,\n     WasmClientType,\n };\n+sol! {\n+    contract IbcHandler {\n+        function CreateClient(MsgCreateClient calldata) returns (string memory);\n+    }\n \n+    struct MsgCreateClient {\n+        string client_type;\n+        bytes client_state_bytes;\n+        bytes consensusStateBytes;\n+        address relayer;\n+    }\n+}",
        "comment_created_at": "2024-08-16T15:05:04+00:00",
        "comment_author": "rohankokkulabito",
        "comment_body": "<div>\n\n<strong>Bito Code Review Agent Run</strong> <a href=https://github.com/unionlabs/union/pull/2693#issuecomment-2293655644>#ef6b49</a><span> - 08/16/2024, 03:05 pm</span>\n<br>\n\n<div><small>\ud83d\udd34</small> High importance</div>\n\n<div id=\"suggestion\">\n<div id=\"issue\">\n<b>Issue:</b> The field names in the 'MsgCreateClient' struct do not follow Rust's naming conventions. Rust conventionally uses snake_case for field names, but the fields here use camelCase.\n</div>\n<div id=\"fix\">\n<b>Fix:</b> Rename the fields in the 'MsgCreateClient' struct to follow Rust's snake_case naming convention.\n</div>\n<details>\n<summary>\n<b>Code suggestion</b>\n</summary>\n<div id=\"code\">\n\n```\n @@ -25,7 +25,7 @@\n      struct MsgCreateClient {\n          string client_type;\n          bytes client_state_bytes;\n -        bytes consensusStateBytes;\n +        bytes consensus_state_bytes;\n          address relayer;\n      }\n  }\n```\n</div>\n</details>\n</div>\n<br>\n\n\n</div>\n\nIs this a valid issue, or was it incorrectly flagged by the Agent?\n- [ ] it was incorrectly flagged",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1683279986",
    "pr_number": 2472,
    "pr_file": "hubble/src/eth/client.rs",
    "created_at": "2024-07-18T18:06:26+00:00",
    "commented_code": "+#![allow(clippy::disallowed_types)]\n+use ethers::{\n+    core::types::BlockId,\n+    providers::{Http, Middleware, Provider, ProviderError},\n+    types::{Block, BlockNumber, TransactionReceipt, TxHash, U256},\n+};\n+\n+use crate::raceclient::RaceClient;",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1683279986",
        "repo_full_name": "unionlabs/union",
        "pr_number": 2472,
        "pr_file": "hubble/src/eth/client.rs",
        "discussion_id": "1683279986",
        "commented_code": "@@ -0,0 +1,32 @@\n+#![allow(clippy::disallowed_types)]\n+use ethers::{\n+    core::types::BlockId,\n+    providers::{Http, Middleware, Provider, ProviderError},\n+    types::{Block, BlockNumber, TransactionReceipt, TxHash, U256},\n+};\n+\n+use crate::raceclient::RaceClient;",
        "comment_created_at": "2024-07-18T18:06:26+00:00",
        "comment_author": "benluelo",
        "comment_body": "`race_client` instead of `raceclient`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1649701502",
    "pr_number": 2127,
    "pr_file": "sentinel/src/context.rs",
    "created_at": "2024-06-22T13:44:06+00:00",
    "commented_code": "+use std::{collections::HashMap, sync::Arc, time::Duration};\n+\n+use rand::{rngs::StdRng, seq::SliceRandom, Rng, SeedableRng};\n+use tokio::{sync::Mutex, task::JoinHandle, time::interval};\n+\n+use crate::{\n+    chains::{Chain, Cosmos, Ethereum, IbcListen as _, IbcTransfer as _},\n+    config::{AnyChainConfig, Config, IbcInteraction},\n+};\n+type InnerInnerMap = HashMap<i32, (bool, Option<chrono::DateTime<chrono::Utc>>)>;\n+type InnerMap = HashMap<i32, InnerInnerMap>;\n+pub type SharedMap = Arc<Mutex<HashMap<String, InnerMap>>>;",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1649701502",
        "repo_full_name": "unionlabs/union",
        "pr_number": 2127,
        "pr_file": "sentinel/src/context.rs",
        "discussion_id": "1649701502",
        "commented_code": "@@ -0,0 +1,274 @@\n+use std::{collections::HashMap, sync::Arc, time::Duration};\n+\n+use rand::{rngs::StdRng, seq::SliceRandom, Rng, SeedableRng};\n+use tokio::{sync::Mutex, task::JoinHandle, time::interval};\n+\n+use crate::{\n+    chains::{Chain, Cosmos, Ethereum, IbcListen as _, IbcTransfer as _},\n+    config::{AnyChainConfig, Config, IbcInteraction},\n+};\n+type InnerInnerMap = HashMap<i32, (bool, Option<chrono::DateTime<chrono::Utc>>)>;\n+type InnerMap = HashMap<i32, InnerInnerMap>;\n+pub type SharedMap = Arc<Mutex<HashMap<String, InnerMap>>>;",
        "comment_created_at": "2024-06-22T13:44:06+00:00",
        "comment_author": "benluelo",
        "comment_body": "you may want to use https://docs.rs/dashmap/latest/dashmap/",
        "pr_file_module": null
      },
      {
        "comment_id": "1649701589",
        "repo_full_name": "unionlabs/union",
        "pr_number": 2127,
        "pr_file": "sentinel/src/context.rs",
        "discussion_id": "1649701502",
        "commented_code": "@@ -0,0 +1,274 @@\n+use std::{collections::HashMap, sync::Arc, time::Duration};\n+\n+use rand::{rngs::StdRng, seq::SliceRandom, Rng, SeedableRng};\n+use tokio::{sync::Mutex, task::JoinHandle, time::interval};\n+\n+use crate::{\n+    chains::{Chain, Cosmos, Ethereum, IbcListen as _, IbcTransfer as _},\n+    config::{AnyChainConfig, Config, IbcInteraction},\n+};\n+type InnerInnerMap = HashMap<i32, (bool, Option<chrono::DateTime<chrono::Utc>>)>;\n+type InnerMap = HashMap<i32, InnerInnerMap>;\n+pub type SharedMap = Arc<Mutex<HashMap<String, InnerMap>>>;",
        "comment_created_at": "2024-06-22T13:44:53+00:00",
        "comment_author": "benluelo",
        "comment_body": "also, what are these maps to/from? `SharedMap` could probably use a better name and documentation in general would be good",
        "pr_file_module": null
      },
      {
        "comment_id": "1649701795",
        "repo_full_name": "unionlabs/union",
        "pr_number": 2127,
        "pr_file": "sentinel/src/context.rs",
        "discussion_id": "1649701502",
        "commented_code": "@@ -0,0 +1,274 @@\n+use std::{collections::HashMap, sync::Arc, time::Duration};\n+\n+use rand::{rngs::StdRng, seq::SliceRandom, Rng, SeedableRng};\n+use tokio::{sync::Mutex, task::JoinHandle, time::interval};\n+\n+use crate::{\n+    chains::{Chain, Cosmos, Ethereum, IbcListen as _, IbcTransfer as _},\n+    config::{AnyChainConfig, Config, IbcInteraction},\n+};\n+type InnerInnerMap = HashMap<i32, (bool, Option<chrono::DateTime<chrono::Utc>>)>;\n+type InnerMap = HashMap<i32, InnerInnerMap>;\n+pub type SharedMap = Arc<Mutex<HashMap<String, InnerMap>>>;",
        "comment_created_at": "2024-06-22T13:46:11+00:00",
        "comment_author": "benluelo",
        "comment_body": "very minor nit as well, but prefer to follow parent > child ordering, put the top-most type first, then the types contained in that, etc\r\n\r\n```rs\r\npub type SharedMap = Arc<Mutex<HashMap<String, InnerMap>>>;\r\ntype InnerMap = HashMap<i32, InnerInnerMap>;\r\ntype InnerInnerMap = HashMap<i32, (bool, Option<chrono::DateTime<chrono::Utc>>)>;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1649701832",
        "repo_full_name": "unionlabs/union",
        "pr_number": 2127,
        "pr_file": "sentinel/src/context.rs",
        "discussion_id": "1649701502",
        "commented_code": "@@ -0,0 +1,274 @@\n+use std::{collections::HashMap, sync::Arc, time::Duration};\n+\n+use rand::{rngs::StdRng, seq::SliceRandom, Rng, SeedableRng};\n+use tokio::{sync::Mutex, task::JoinHandle, time::interval};\n+\n+use crate::{\n+    chains::{Chain, Cosmos, Ethereum, IbcListen as _, IbcTransfer as _},\n+    config::{AnyChainConfig, Config, IbcInteraction},\n+};\n+type InnerInnerMap = HashMap<i32, (bool, Option<chrono::DateTime<chrono::Utc>>)>;\n+type InnerMap = HashMap<i32, InnerInnerMap>;\n+pub type SharedMap = Arc<Mutex<HashMap<String, InnerMap>>>;",
        "comment_created_at": "2024-06-22T13:46:29+00:00",
        "comment_author": "benluelo",
        "comment_body": "also, if these type aliases aren't used anywhere else, its fine to inline them here",
        "pr_file_module": null
      }
    ]
  }
]