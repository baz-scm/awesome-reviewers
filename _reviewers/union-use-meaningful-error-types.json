[
  {
    "discussion_id": "2098425429",
    "pr_number": 4576,
    "pr_file": "app2/src/lib/queries/transfer-by-hash.svelte.ts",
    "created_at": "2025-05-20T16:36:31+00:00",
    "commented_code": "refetchInterval: \"1 second\",\n     writeData: data => {\n       if (data.pipe(Option.map(d => d.v2_transfers.length)).pipe(Option.getOrElse(() => 0)) === 0) {\n-        transferDetails.error = Option.some({ _tag: \"NotFound\", message: \"Transfer not found\" })\n+        transferDetails.error = Option.some(new NoSuchElementException())",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2098425429",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4576,
        "pr_file": "app2/src/lib/queries/transfer-by-hash.svelte.ts",
        "discussion_id": "2098425429",
        "commented_code": "@@ -47,7 +48,7 @@ export const transferByPacketHashQuery = (packetHash: string) =>\n     refetchInterval: \"1 second\",\n     writeData: data => {\n       if (data.pipe(Option.map(d => d.v2_transfers.length)).pipe(Option.getOrElse(() => 0)) === 0) {\n-        transferDetails.error = Option.some({ _tag: \"NotFound\", message: \"Transfer not found\" })\n+        transferDetails.error = Option.some(new NoSuchElementException())",
        "comment_created_at": "2025-05-20T16:36:31+00:00",
        "comment_author": "ehegnes",
        "comment_body": "This already exists. We'll eventually move away from `NoSuchElementException` by mapping onto our own types so this class of errors has meaningful context.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2081428611",
    "pr_number": 4516,
    "pr_file": "ts-sdk/examples/cosmos-read-contract-at-height.ts",
    "created_at": "2025-05-09T10:50:22+00:00",
    "commented_code": "+import { Effect } from \"effect\"\n+import {\n+  CosmWasmClientContext,\n+  createCosmWasmClient,\n+  createExtendedCosmWasmClient,\n+  ExtendedCosmWasmClientContext,\n+} from \"../src/cosmos/client.js\"\n+import { readCw20TotalSupply, readCw20TotalSupplyAtHeight } from \"../src/cosmos/cw20.js\"\n+\n+// @ts-ignore\n+BigInt[\"prototype\"].toJSON = function() {\n+  return this.toString()\n+}\n+// Example CW20 token balance query\n+// Effect.runPromiseExit(\n+//   Effect.gen(function* () {\n+//     // Create a CosmWasm client\n+//     const rpc = \"https://rpc.bbn-test-5.babylon.chain.kitchen\"\n+//     const client = yield* createCosmWasmClient(rpc)\n+//     const contractAddr = \"bbn1zsrv23akkgxdnwul72sftgv2xjt5khsnt3wwjhp0ffh683hzp5aq5a0h6n\"\n+//     const minter = \"bbn1sakazthycqgzer50nqgr5ta4vy3gwz8wxla3s8rd8pql4ctmz5qssg39sf\"\n+//     const ucs03Addr = \"bbn1336jj8ertl8h7rdvnz4dh5rqahd09cy0x43guhsxx6xyrztx292q77945h\"\n+//     // Query a CW20 token contract for a balance\n+\n+//     const balanceNow = yield* channelBalance(0n, \"ubbn\").pipe(\n+//       Effect.provideService(CosmWasmClientDestination, { client }),\n+//       Effect.provideService(CosmosChannelDestination, {\n+//         ucs03address: ucs03Addr,\n+//         channelId: 3\n+//       }),\n+//       Effect.tapError(e => Effect.logError(\"Error fetching channel balance:\", e))\n+//     )\n+//     console.info(\"balance\", balanceNow)\n+\n+//     const rest = \"https://rest.bbn-test-5.babylon.chain.kitchen\"\n+//     const extClient = yield* createExtendedCosmWasmClient(rpc, rest)\n+\n+//     const balanceAtBlock123 = yield* channelBalanceAtHeight(0n, \"ubbn\", 912421).pipe(\n+//       Effect.provideService(ExtendedCosmWasmClientContext, { client: extClient }),\n+//       Effect.provideService(CosmosChannelDestination, {\n+//         ucs03address: ucs03Addr,\n+//         channelId: 3\n+//       }),\n+//       Effect.tapError(e => Effect.logError(\"height-query failed:\", e))\n+//     )\n+\n+//     console.info(\"Balance at 233799:\", balanceAtBlock123)\n+\n+//     const withClient = Effect.provideService(CosmWasmClientContext, { client })\n+\n+//     const cw20balance = yield* readCw20Balance(contractAddr, minter).pipe(withClient)\n+\n+//     console.info(\"cw20balance\", cw20balance)\n+\n+//     const withExtClient = Effect.provideService(ExtendedCosmWasmClientContext, {\n+//       client: extClient\n+//     })\n+//     const cw20BalanceAtHeight = yield* readCw20BalanceAtHeight(contractAddr, minter, 912421).pipe(\n+//       withExtClient\n+//     )\n+//     console.info(\"cw20BalanceAtHeight\", cw20BalanceAtHeight)\n+\n+//     const cw20TotalSupply = yield* readCw20TotalSupply(contractAddr).pipe(withClient)\n+\n+//     console.info(\"cw20TotalSupply\", cw20TotalSupply)\n+\n+//     const cw20TotalSupplyAtHeight = yield* readCw20TotalSupplyAtHeight(contractAddr, 912421).pipe(\n+//       withExtClient\n+//     )\n+\n+//     console.info(\"cw20TotalSupplyAtHeight\", cw20TotalSupplyAtHeight)\n+\n+//     return balanceAtBlock123\n+//   })\n+// ).then(exit => console.log(JSON.stringify(exit, null, 2)))\n+\n+Effect.runPromiseExit(\n+  Effect.gen(function*() {\n+    // Create a CosmWasm client\n+    const rpc = \"https://rpc.xion-testnet-2.xion.chain.cooking\"\n+    const client = yield* createCosmWasmClient(rpc)\n+    const tokenDenom = \"xion100jj57u4rna4wcdnn8pxvnacxvm0fx6zaazj5xqq555syvvae2wsqsum0y\"\n+    const latest = yield* Effect.tryPromise({\n+      try: () => {\n+        return client.getHeight()\n+      },\n+      catch: e => new Error(`Failed to fetch blockNumber for ${rpc}: ${String(e)}`),\n+    })",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2081428611",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4516,
        "pr_file": "ts-sdk/examples/cosmos-read-contract-at-height.ts",
        "discussion_id": "2081428611",
        "commented_code": "@@ -0,0 +1,124 @@\n+import { Effect } from \"effect\"\n+import {\n+  CosmWasmClientContext,\n+  createCosmWasmClient,\n+  createExtendedCosmWasmClient,\n+  ExtendedCosmWasmClientContext,\n+} from \"../src/cosmos/client.js\"\n+import { readCw20TotalSupply, readCw20TotalSupplyAtHeight } from \"../src/cosmos/cw20.js\"\n+\n+// @ts-ignore\n+BigInt[\"prototype\"].toJSON = function() {\n+  return this.toString()\n+}\n+// Example CW20 token balance query\n+// Effect.runPromiseExit(\n+//   Effect.gen(function* () {\n+//     // Create a CosmWasm client\n+//     const rpc = \"https://rpc.bbn-test-5.babylon.chain.kitchen\"\n+//     const client = yield* createCosmWasmClient(rpc)\n+//     const contractAddr = \"bbn1zsrv23akkgxdnwul72sftgv2xjt5khsnt3wwjhp0ffh683hzp5aq5a0h6n\"\n+//     const minter = \"bbn1sakazthycqgzer50nqgr5ta4vy3gwz8wxla3s8rd8pql4ctmz5qssg39sf\"\n+//     const ucs03Addr = \"bbn1336jj8ertl8h7rdvnz4dh5rqahd09cy0x43guhsxx6xyrztx292q77945h\"\n+//     // Query a CW20 token contract for a balance\n+\n+//     const balanceNow = yield* channelBalance(0n, \"ubbn\").pipe(\n+//       Effect.provideService(CosmWasmClientDestination, { client }),\n+//       Effect.provideService(CosmosChannelDestination, {\n+//         ucs03address: ucs03Addr,\n+//         channelId: 3\n+//       }),\n+//       Effect.tapError(e => Effect.logError(\"Error fetching channel balance:\", e))\n+//     )\n+//     console.info(\"balance\", balanceNow)\n+\n+//     const rest = \"https://rest.bbn-test-5.babylon.chain.kitchen\"\n+//     const extClient = yield* createExtendedCosmWasmClient(rpc, rest)\n+\n+//     const balanceAtBlock123 = yield* channelBalanceAtHeight(0n, \"ubbn\", 912421).pipe(\n+//       Effect.provideService(ExtendedCosmWasmClientContext, { client: extClient }),\n+//       Effect.provideService(CosmosChannelDestination, {\n+//         ucs03address: ucs03Addr,\n+//         channelId: 3\n+//       }),\n+//       Effect.tapError(e => Effect.logError(\"height-query failed:\", e))\n+//     )\n+\n+//     console.info(\"Balance at 233799:\", balanceAtBlock123)\n+\n+//     const withClient = Effect.provideService(CosmWasmClientContext, { client })\n+\n+//     const cw20balance = yield* readCw20Balance(contractAddr, minter).pipe(withClient)\n+\n+//     console.info(\"cw20balance\", cw20balance)\n+\n+//     const withExtClient = Effect.provideService(ExtendedCosmWasmClientContext, {\n+//       client: extClient\n+//     })\n+//     const cw20BalanceAtHeight = yield* readCw20BalanceAtHeight(contractAddr, minter, 912421).pipe(\n+//       withExtClient\n+//     )\n+//     console.info(\"cw20BalanceAtHeight\", cw20BalanceAtHeight)\n+\n+//     const cw20TotalSupply = yield* readCw20TotalSupply(contractAddr).pipe(withClient)\n+\n+//     console.info(\"cw20TotalSupply\", cw20TotalSupply)\n+\n+//     const cw20TotalSupplyAtHeight = yield* readCw20TotalSupplyAtHeight(contractAddr, 912421).pipe(\n+//       withExtClient\n+//     )\n+\n+//     console.info(\"cw20TotalSupplyAtHeight\", cw20TotalSupplyAtHeight)\n+\n+//     return balanceAtBlock123\n+//   })\n+// ).then(exit => console.log(JSON.stringify(exit, null, 2)))\n+\n+Effect.runPromiseExit(\n+  Effect.gen(function*() {\n+    // Create a CosmWasm client\n+    const rpc = \"https://rpc.xion-testnet-2.xion.chain.cooking\"\n+    const client = yield* createCosmWasmClient(rpc)\n+    const tokenDenom = \"xion100jj57u4rna4wcdnn8pxvnacxvm0fx6zaazj5xqq555syvvae2wsqsum0y\"\n+    const latest = yield* Effect.tryPromise({\n+      try: () => {\n+        return client.getHeight()\n+      },\n+      catch: e => new Error(`Failed to fetch blockNumber for ${rpc}: ${String(e)}`),\n+    })",
        "comment_created_at": "2025-05-09T10:50:22+00:00",
        "comment_author": "cor",
        "comment_body": "We should make a dedicated cosmos function for this that wraps this in an effect and returns a nice TaggedError while also extracting error details",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2007355738",
    "pr_number": 4074,
    "pr_file": "app2/src/lib/services/aptos/balances.ts",
    "created_at": "2025-03-21T11:10:05+00:00",
    "commented_code": "+import { Data, Effect, Option } from \"effect\"\n+import { RawTokenBalance, TokenRawAmount, type TokenRawDenom } from \"$lib/schema/token\"\n+import type { Chain } from \"$lib/schema/chain\"\n+// You can import a retry schedule specific for Aptos; here we assume one exists.\n+import { aptosBalanceRetrySchedule } from \"$lib/constants/schedules\"\n+import { getPublicClient } from \"$lib/services/aptos/clients\"\n+import type { Aptos } from \"@aptos-labs/ts-sdk\"\n+import type { ReadContractErrorType } from \"viem\"\n+\n+export type FetchAptosBalanceError = FetchAptosTokenBalanceError\n+\n+export class FetchAptosTokenBalanceError extends Data.TaggedError(\"FetchAptosTokenBalanceError\")<{\n+  cause: unknown\n+}> {}\n+\n+const fetchFABalance = ({\n+  aptosClient,\n+  tokenAddress,\n+  walletAddress\n+}: {\n+  aptosClient: Aptos\n+  tokenAddress: TokenRawDenom\n+  walletAddress: string\n+}) =>\n+  Effect.tryPromise({\n+    try: () =>\n+      aptosClient.view({\n+        payload: {\n+          function: `0x1::primary_fungible_store::balance`,\n+          typeArguments: [\"0x1::fungible_asset::Metadata\"],\n+          functionArguments: [walletAddress.toString(), tokenAddress.toString()]\n+        }\n+      }),\n+    catch: err => new FetchAptosTokenBalanceError({ cause: err as ReadContractErrorType })",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2007355738",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4074,
        "pr_file": "app2/src/lib/services/aptos/balances.ts",
        "discussion_id": "2007355738",
        "commented_code": "@@ -0,0 +1,75 @@\n+import { Data, Effect, Option } from \"effect\"\n+import { RawTokenBalance, TokenRawAmount, type TokenRawDenom } from \"$lib/schema/token\"\n+import type { Chain } from \"$lib/schema/chain\"\n+// You can import a retry schedule specific for Aptos; here we assume one exists.\n+import { aptosBalanceRetrySchedule } from \"$lib/constants/schedules\"\n+import { getPublicClient } from \"$lib/services/aptos/clients\"\n+import type { Aptos } from \"@aptos-labs/ts-sdk\"\n+import type { ReadContractErrorType } from \"viem\"\n+\n+export type FetchAptosBalanceError = FetchAptosTokenBalanceError\n+\n+export class FetchAptosTokenBalanceError extends Data.TaggedError(\"FetchAptosTokenBalanceError\")<{\n+  cause: unknown\n+}> {}\n+\n+const fetchFABalance = ({\n+  aptosClient,\n+  tokenAddress,\n+  walletAddress\n+}: {\n+  aptosClient: Aptos\n+  tokenAddress: TokenRawDenom\n+  walletAddress: string\n+}) =>\n+  Effect.tryPromise({\n+    try: () =>\n+      aptosClient.view({\n+        payload: {\n+          function: `0x1::primary_fungible_store::balance`,\n+          typeArguments: [\"0x1::fungible_asset::Metadata\"],\n+          functionArguments: [walletAddress.toString(), tokenAddress.toString()]\n+        }\n+      }),\n+    catch: err => new FetchAptosTokenBalanceError({ cause: err as ReadContractErrorType })",
        "comment_created_at": "2025-03-21T11:10:05+00:00",
        "comment_author": "cor",
        "comment_body": "this is incorrect, as this is a type from viem (see imports). check the aptos lib if they export an error type. also whenever wrapping errors from external libs use extractErrorDetails",
        "pr_file_module": null
      }
    ]
  }
]