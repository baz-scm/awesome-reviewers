[
  {
    "discussion_id": "2304501911",
    "pr_number": 5048,
    "pr_file": "docs/src/content/docs/ucs/03.mdx",
    "created_at": "2025-08-27T16:06:51+00:00",
    "commented_code": "3. A staking position NFT is minted to the beneficiary\n 4. The NFT represents ownership of the staked position and can be used to manage it\n \n+:::note\n+The `path` field in the packet must be zero for staking operations. The staked token must match the governance token configured for the channel.",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "2304501911",
        "repo_full_name": "unionlabs/union",
        "pr_number": 5048,
        "pr_file": "docs/src/content/docs/ucs/03.mdx",
        "discussion_id": "2304501911",
        "commented_code": "@@ -992,6 +991,10 @@ The stake instruction allows cross-chain staking of governance tokens with valid\n 3. A staking position NFT is minted to the beneficiary\n 4. The NFT represents ownership of the staked position and can be used to manage it\n \n+:::note\n+The `path` field in the packet must be zero for staking operations. The staked token must match the governance token configured for the channel.",
        "comment_created_at": "2025-08-27T16:06:51+00:00",
        "comment_author": "benluelo",
        "comment_body": "why do we check against the configured gov token, rather than just use the configured value?",
        "pr_file_module": null
      },
      {
        "comment_id": "2304523882",
        "repo_full_name": "unionlabs/union",
        "pr_number": 5048,
        "pr_file": "docs/src/content/docs/ucs/03.mdx",
        "discussion_id": "2304501911",
        "commented_code": "@@ -992,6 +991,10 @@ The stake instruction allows cross-chain staking of governance tokens with valid\n 3. A staking position NFT is minted to the beneficiary\n 4. The NFT represents ownership of the staked position and can be used to manage it\n \n+:::note\n+The `path` field in the packet must be zero for staking operations. The staked token must match the governance token configured for the channel.",
        "comment_created_at": "2025-08-27T16:11:47+00:00",
        "comment_author": "hussein-aitlahcen",
        "comment_body": "because the packet is immutable",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1996646159",
    "pr_number": 4050,
    "pr_file": "hubble/hubble.nix",
    "created_at": "2025-03-15T08:15:05+00:00",
    "commented_code": "example = 1;\n                 default = 200;\n               };\n+              options.testnet = mkOption {\n+                type = types.nullOr types.bool;\n+                default = null;\n+                description = \"Testnet (default false)\";",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1996646159",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4050,
        "pr_file": "hubble/hubble.nix",
        "discussion_id": "1996646159",
        "commented_code": "@@ -101,6 +101,11 @@\n                 example = 1;\n                 default = 200;\n               };\n+              options.testnet = mkOption {\n+                type = types.nullOr types.bool;\n+                default = null;\n+                description = \"Testnet (default false)\";",
        "comment_created_at": "2025-03-15T08:15:05+00:00",
        "comment_author": "benluelo",
        "comment_body": "default = null (default false)",
        "pr_file_module": null
      },
      {
        "comment_id": "1996656829",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4050,
        "pr_file": "hubble/hubble.nix",
        "discussion_id": "1996646159",
        "commented_code": "@@ -101,6 +101,11 @@\n                 example = 1;\n                 default = 200;\n               };\n+              options.testnet = mkOption {\n+                type = types.nullOr types.bool;\n+                default = null;\n+                description = \"Testnet (default false)\";",
        "comment_created_at": "2025-03-15T08:30:17+00:00",
        "comment_author": "qlp",
        "comment_body": "default value in produced json is null. hubbles default is false.\r\n\r\nreason is that I don't want a big json file and let hubble control what's the default",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1988841181",
    "pr_number": 4020,
    "pr_file": "voyager/voyager.nix",
    "created_at": "2025-03-11T09:49:57+00:00",
    "commented_code": "}\n           );\n         };\n-        optimize_batch_limit = mkOption {\n-          type = types.int;\n-          default = 100;\n-        };\n-        workers = mkOption {\n-          type = types.int;\n-          default = 20;\n-        };\n+        voyager =\n+          let\n+            durationType = types.submodule {\n+              options = {\n+                secs = mkOption { type = types.int; };\n+                nanos = mkOption { type = types.int; };\n+              };\n+            };\n+            cacheType = types.submodule {\n+              options = {\n+                capacity = mkOption { type = types.int; };\n+                time_to_live = mkOption { type = types.int; };\n+                time_to_idle = mkOption { type = types.int; };\n+              };\n+            };\n+          in\n+          mkOption {\n+            type = types.submodule {\n+              options = {\n+                num_workers = mkOption {\n+                  type = types.int;\n+                };\n+                rest_laddr = mkOption {\n+                  type = types.nullOr types.str;\n+                  default = null;\n+                  example = \"0.0.0.0:7177\";\n+                };\n+                rpc_laddr = mkOption {\n+                  type = types.nullOr types.str;\n+                  default = null;\n+                  example = \"0.0.0.0:7178\";\n+                };\n+                queue = mkOption {\n+                  type = types.submodule {\n+                    options = {\n+                      database_url = mkOption {\n+                        type = types.str;\n+                        default = \"postgres://voyager:voyager@localhost/voyager\";\n+                      };\n+                      max_connections = mkOption {\n+                        type = types.int;",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1988841181",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4020,
        "pr_file": "voyager/voyager.nix",
        "discussion_id": "1988841181",
        "commented_code": "@@ -101,30 +153,95 @@\n             }\n           );\n         };\n-        optimize_batch_limit = mkOption {\n-          type = types.int;\n-          default = 100;\n-        };\n-        workers = mkOption {\n-          type = types.int;\n-          default = 20;\n-        };\n+        voyager =\n+          let\n+            durationType = types.submodule {\n+              options = {\n+                secs = mkOption { type = types.int; };\n+                nanos = mkOption { type = types.int; };\n+              };\n+            };\n+            cacheType = types.submodule {\n+              options = {\n+                capacity = mkOption { type = types.int; };\n+                time_to_live = mkOption { type = types.int; };\n+                time_to_idle = mkOption { type = types.int; };\n+              };\n+            };\n+          in\n+          mkOption {\n+            type = types.submodule {\n+              options = {\n+                num_workers = mkOption {\n+                  type = types.int;\n+                };\n+                rest_laddr = mkOption {\n+                  type = types.nullOr types.str;\n+                  default = null;\n+                  example = \"0.0.0.0:7177\";\n+                };\n+                rpc_laddr = mkOption {\n+                  type = types.nullOr types.str;\n+                  default = null;\n+                  example = \"0.0.0.0:7178\";\n+                };\n+                queue = mkOption {\n+                  type = types.submodule {\n+                    options = {\n+                      database_url = mkOption {\n+                        type = types.str;\n+                        default = \"postgres://voyager:voyager@localhost/voyager\";\n+                      };\n+                      max_connections = mkOption {\n+                        type = types.int;",
        "comment_created_at": "2025-03-11T09:49:57+00:00",
        "comment_author": "qlp",
        "comment_body": "required field? PgQueueConfig has default value?",
        "pr_file_module": null
      },
      {
        "comment_id": "1988849651",
        "repo_full_name": "unionlabs/union",
        "pr_number": 4020,
        "pr_file": "voyager/voyager.nix",
        "discussion_id": "1988841181",
        "commented_code": "@@ -101,30 +153,95 @@\n             }\n           );\n         };\n-        optimize_batch_limit = mkOption {\n-          type = types.int;\n-          default = 100;\n-        };\n-        workers = mkOption {\n-          type = types.int;\n-          default = 20;\n-        };\n+        voyager =\n+          let\n+            durationType = types.submodule {\n+              options = {\n+                secs = mkOption { type = types.int; };\n+                nanos = mkOption { type = types.int; };\n+              };\n+            };\n+            cacheType = types.submodule {\n+              options = {\n+                capacity = mkOption { type = types.int; };\n+                time_to_live = mkOption { type = types.int; };\n+                time_to_idle = mkOption { type = types.int; };\n+              };\n+            };\n+          in\n+          mkOption {\n+            type = types.submodule {\n+              options = {\n+                num_workers = mkOption {\n+                  type = types.int;\n+                };\n+                rest_laddr = mkOption {\n+                  type = types.nullOr types.str;\n+                  default = null;\n+                  example = \"0.0.0.0:7177\";\n+                };\n+                rpc_laddr = mkOption {\n+                  type = types.nullOr types.str;\n+                  default = null;\n+                  example = \"0.0.0.0:7178\";\n+                };\n+                queue = mkOption {\n+                  type = types.submodule {\n+                    options = {\n+                      database_url = mkOption {\n+                        type = types.str;\n+                        default = \"postgres://voyager:voyager@localhost/voyager\";\n+                      };\n+                      max_connections = mkOption {\n+                        type = types.int;",
        "comment_created_at": "2025-03-11T09:54:02+00:00",
        "comment_author": "benluelo",
        "comment_body": "required BC the default is intended for local devnet (minimal config) scenarios, and is not viable for production. just removing a potential footgun by making it not optional",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1848795324",
    "pr_number": 3280,
    "pr_file": "evm/contracts/core/24-host/IBCStore.sol",
    "created_at": "2024-11-19T17:42:03+00:00",
    "commented_code": "import \"../Types.sol\";\n \n library IBCStoreLib {\n-    bytes32 public constant COMMITMENT_PREFIX = keccak256(\"ethibc\");\n+    bytes32 public constant COMMITMENT_PREFIX = keccak256(\"wasm\");",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1848795324",
        "repo_full_name": "unionlabs/union",
        "pr_number": 3280,
        "pr_file": "evm/contracts/core/24-host/IBCStore.sol",
        "discussion_id": "1848795324",
        "commented_code": "@@ -5,12 +5,11 @@ import \"../05-port/IIBCModule.sol\";\n import \"../Types.sol\";\n \n library IBCStoreLib {\n-    bytes32 public constant COMMITMENT_PREFIX = keccak256(\"ethibc\");\n+    bytes32 public constant COMMITMENT_PREFIX = keccak256(\"wasm\");",
        "comment_created_at": "2024-11-19T17:42:03+00:00",
        "comment_author": "benluelo",
        "comment_body": "its not keccak(wasm) right? just wasm?",
        "pr_file_module": null
      },
      {
        "comment_id": "1848805086",
        "repo_full_name": "unionlabs/union",
        "pr_number": 3280,
        "pr_file": "evm/contracts/core/24-host/IBCStore.sol",
        "discussion_id": "1848795324",
        "commented_code": "@@ -5,12 +5,11 @@ import \"../05-port/IIBCModule.sol\";\n import \"../Types.sol\";\n \n library IBCStoreLib {\n-    bytes32 public constant COMMITMENT_PREFIX = keccak256(\"ethibc\");\n+    bytes32 public constant COMMITMENT_PREFIX = keccak256(\"wasm\");",
        "comment_created_at": "2024-11-19T17:49:47+00:00",
        "comment_author": "hussein-aitlahcen",
        "comment_body": "yep good catch!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1799793210",
    "pr_number": 3099,
    "pr_file": "docs/src/content/docs/integrations/ucs01/cosmwasm/index.mdx",
    "created_at": "2024-10-14T16:24:43+00:00",
    "commented_code": "+---\n+title: \"UCS01 Relay Rust Integration\"\n+description: \"Example showcasing how to create a CosmWasm contract that leverages UCS01 Relay to execute cross-chain asset transfer.\"\n+---\n+\n+import Code from '#/components/Code.astro'\n+import { Tabs, TabItem, FileTree, Steps } from '@astrojs/starlight/components'\n+\n+This example demonstrates how to create a CosmWasm contract that calls Union's UCS01 Relay to execute a cross-chain asset transfer.\n+\n+```sh frame=\"none\"\n+UCS01_RELAY=\n+```\n+\n+Source code for this example can be found her: [example-ucs01-cosmwasm](https://github.com/unionlabs/example-ucs01-cosmwasm)\n+\n+For this example we will be using [Rust](https://rustup.rs) to write the smart contract and [CosmWasm](https://cosmwasm.com) as the smart contract platform.\n+\n+# Prerequisites\n+\n+Install [Rust](https://rustup.rs)\n+```sh frame=\"none\"\n+curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n+```\n+\n+<FileTree>\n+- src\n+  - lib.rs\n+- Cargo.toml\n+- Cargo.lock\n+</FileTree>\n+\n+## Basic Contract\n+\n+Let's write a dead simple contract that transfers an asset from a CosmWasm contract to an evm contract.\n+\n+### Contract Source\n+\n+```rust title=\"src/lib.rs\"\n+use cosmwasm_std::{\n+    entry_point, to_json_binary, Coin, DepsMut, Env, MessageInfo, Response, StdResult, WasmMsg,\n+};\n+use serde::{Deserialize, Serialize};\n+\n+#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]\n+pub struct InstantiateMsg {}\n+\n+#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]\n+pub enum ExecuteMsg {\n+    Transfer { recipient: String, amount: u128 },\n+}\n+\n+#[entry_point]\n+pub fn instantiate(\n+    _deps: DepsMut,\n+    _env: Env,\n+    _info: MessageInfo,\n+    _msg: InstantiateMsg,\n+) -> StdResult<Response> {\n+    Ok(Response::new().add_attribute(\"action\", \"instantiate\"))\n+}\n+\n+#[entry_point]\n+pub fn execute(\n+    deps: DepsMut,\n+    _env: Env,\n+    info: MessageInfo,\n+    msg: ExecuteMsg,\n+) -> StdResult<Response> {\n+    match msg {\n+        ExecuteMsg::Transfer { recipient, amount } => {\n+            execute_transfer(deps, info, recipient, amount)\n+        }\n+    }\n+}\n+\n+pub fn execute_transfer(\n+    deps: DepsMut,\n+    _info: MessageInfo,\n+    recipient: String,\n+    amount: u128,\n+) -> StdResult<Response> {\n+    let recipient_addr = deps.api.addr_validate(&recipient)?;\n+\n+    let msg = WasmMsg::Execute {\n+        contract_addr: \"union1m87a5scxnnk83wfwapxlufzm58qe2v65985exff70z95a2yr86yq7hl08h\"\n+            .to_string(),\n+        msg: to_json_binary(&ExecuteMsg::Transfer {\n+            recipient: recipient_addr.to_string(),\n+            amount,\n+        })?,\n+        funds: vec![Coin {\n+            denom: \"uusdc\".to_string(),\n+            amount: amount.into(),\n+        }],\n+    };\n+\n+    Ok(Response::new()\n+        .add_message(msg)\n+        .add_attribute(\"action\", \"transfer\")\n+        .add_attribute(\"recipient\", recipient)\n+        .add_attribute(\"amount\", amount.to_string()))\n+}\n+```\n+\n+You will be using the same RPC url across examples, so good to export it to an environment variable:\n+\n+```sh frame=\"none\"\n+export RPC_URL=<YOUR_RPC_URL>\n+```\n+\n+### Building the Contract\n+\n+The build is two steps; first we compile the Rust code to wasm, and then we optimize the wasm to be smaller.\n+\n+<Steps>\n+    1. \n+        ```sh title=\"Compile the contract to wasm\"\n+        RUSTFLAGS='-C target-cpu=mvp -C opt-level=z' cargo build \\\n+            --target wasm32-unknown-unknown \\\n+            --no-default-features \\\n+            --lib \\\n+            --release \\\n+            -Z build-std=std,panic_abort \\\n+            -Z build-std-features=panic_immediate_abort\n+        ```\n+    2. \n+        ```sh title=\"Optimize the wasm\"\n+        wasm-opt target/wasm32-unknown-unknown/release/$YOUR_APP.wasm \\\n+            -o build/contract.wasm \\\n+            -O3 --converge\n+        ```\n+</Steps>\n+\n+## Deploying the Contract\n+\n+```sh frame=\"none\"\n+wasmd tx wasm store /path/to/contract.wasm \\\n+    --gas auto \\\n+    --gas-adjustment 1.5 \\\n+    -y \\\n+    --home $NODE_HOME \\\n+    --node $RPC_URL \\\n+    --chain-id $CHAIN_ID \\\n+    --from $ACCOUNT_NAME\n+```\n+\n+## Running a transfer\n+\n+```sh frame=\"none\"\n+$NODE_BIN tx wasm execute union1m87a5scxnnk83wfwapxlufzm58qe2v65985exff70z95a2yr86yq7hl08h '{ \"transfer\": { \"channel\": \"channel-377\", \"receiver\": \"1363462745291c711144011c1305e737dd74ace69a5576612745e29a2e4fa1b5\", \"memo\": \"\" } }' --node https://rpc.node.testnet-8.union.build:443 --home result --from alice --keyring-backend test --amount 155muno --chain-id union-testnet-8",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1799793210",
        "repo_full_name": "unionlabs/union",
        "pr_number": 3099,
        "pr_file": "docs/src/content/docs/integrations/ucs01/cosmwasm/index.mdx",
        "discussion_id": "1799793210",
        "commented_code": "@@ -0,0 +1,152 @@\n+---\n+title: \"UCS01 Relay Rust Integration\"\n+description: \"Example showcasing how to create a CosmWasm contract that leverages UCS01 Relay to execute cross-chain asset transfer.\"\n+---\n+\n+import Code from '#/components/Code.astro'\n+import { Tabs, TabItem, FileTree, Steps } from '@astrojs/starlight/components'\n+\n+This example demonstrates how to create a CosmWasm contract that calls Union's UCS01 Relay to execute a cross-chain asset transfer.\n+\n+```sh frame=\"none\"\n+UCS01_RELAY=\n+```\n+\n+Source code for this example can be found her: [example-ucs01-cosmwasm](https://github.com/unionlabs/example-ucs01-cosmwasm)\n+\n+For this example we will be using [Rust](https://rustup.rs) to write the smart contract and [CosmWasm](https://cosmwasm.com) as the smart contract platform.\n+\n+# Prerequisites\n+\n+Install [Rust](https://rustup.rs)\n+```sh frame=\"none\"\n+curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n+```\n+\n+<FileTree>\n+- src\n+  - lib.rs\n+- Cargo.toml\n+- Cargo.lock\n+</FileTree>\n+\n+## Basic Contract\n+\n+Let's write a dead simple contract that transfers an asset from a CosmWasm contract to an evm contract.\n+\n+### Contract Source\n+\n+```rust title=\"src/lib.rs\"\n+use cosmwasm_std::{\n+    entry_point, to_json_binary, Coin, DepsMut, Env, MessageInfo, Response, StdResult, WasmMsg,\n+};\n+use serde::{Deserialize, Serialize};\n+\n+#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]\n+pub struct InstantiateMsg {}\n+\n+#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]\n+pub enum ExecuteMsg {\n+    Transfer { recipient: String, amount: u128 },\n+}\n+\n+#[entry_point]\n+pub fn instantiate(\n+    _deps: DepsMut,\n+    _env: Env,\n+    _info: MessageInfo,\n+    _msg: InstantiateMsg,\n+) -> StdResult<Response> {\n+    Ok(Response::new().add_attribute(\"action\", \"instantiate\"))\n+}\n+\n+#[entry_point]\n+pub fn execute(\n+    deps: DepsMut,\n+    _env: Env,\n+    info: MessageInfo,\n+    msg: ExecuteMsg,\n+) -> StdResult<Response> {\n+    match msg {\n+        ExecuteMsg::Transfer { recipient, amount } => {\n+            execute_transfer(deps, info, recipient, amount)\n+        }\n+    }\n+}\n+\n+pub fn execute_transfer(\n+    deps: DepsMut,\n+    _info: MessageInfo,\n+    recipient: String,\n+    amount: u128,\n+) -> StdResult<Response> {\n+    let recipient_addr = deps.api.addr_validate(&recipient)?;\n+\n+    let msg = WasmMsg::Execute {\n+        contract_addr: \"union1m87a5scxnnk83wfwapxlufzm58qe2v65985exff70z95a2yr86yq7hl08h\"\n+            .to_string(),\n+        msg: to_json_binary(&ExecuteMsg::Transfer {\n+            recipient: recipient_addr.to_string(),\n+            amount,\n+        })?,\n+        funds: vec![Coin {\n+            denom: \"uusdc\".to_string(),\n+            amount: amount.into(),\n+        }],\n+    };\n+\n+    Ok(Response::new()\n+        .add_message(msg)\n+        .add_attribute(\"action\", \"transfer\")\n+        .add_attribute(\"recipient\", recipient)\n+        .add_attribute(\"amount\", amount.to_string()))\n+}\n+```\n+\n+You will be using the same RPC url across examples, so good to export it to an environment variable:\n+\n+```sh frame=\"none\"\n+export RPC_URL=<YOUR_RPC_URL>\n+```\n+\n+### Building the Contract\n+\n+The build is two steps; first we compile the Rust code to wasm, and then we optimize the wasm to be smaller.\n+\n+<Steps>\n+    1. \n+        ```sh title=\"Compile the contract to wasm\"\n+        RUSTFLAGS='-C target-cpu=mvp -C opt-level=z' cargo build \\\n+            --target wasm32-unknown-unknown \\\n+            --no-default-features \\\n+            --lib \\\n+            --release \\\n+            -Z build-std=std,panic_abort \\\n+            -Z build-std-features=panic_immediate_abort\n+        ```\n+    2. \n+        ```sh title=\"Optimize the wasm\"\n+        wasm-opt target/wasm32-unknown-unknown/release/$YOUR_APP.wasm \\\n+            -o build/contract.wasm \\\n+            -O3 --converge\n+        ```\n+</Steps>\n+\n+## Deploying the Contract\n+\n+```sh frame=\"none\"\n+wasmd tx wasm store /path/to/contract.wasm \\\n+    --gas auto \\\n+    --gas-adjustment 1.5 \\\n+    -y \\\n+    --home $NODE_HOME \\\n+    --node $RPC_URL \\\n+    --chain-id $CHAIN_ID \\\n+    --from $ACCOUNT_NAME\n+```\n+\n+## Running a transfer\n+\n+```sh frame=\"none\"\n+$NODE_BIN tx wasm execute union1m87a5scxnnk83wfwapxlufzm58qe2v65985exff70z95a2yr86yq7hl08h '{ \"transfer\": { \"channel\": \"channel-377\", \"receiver\": \"1363462745291c711144011c1305e737dd74ace69a5576612745e29a2e4fa1b5\", \"memo\": \"\" } }' --node https://rpc.node.testnet-8.union.build:443 --home result --from alice --keyring-backend test --amount 155muno --chain-id union-testnet-8",
        "comment_created_at": "2024-10-14T16:24:43+00:00",
        "comment_author": "aeryz",
        "comment_body": "The address here is incorrect. This is UCS01's address. Let's change it to $CONTRACT_ADDRESS for now. After this PR, I will quickly open another PR explaining how to instantiate a contract and get `CONTRACT_ADDRESS` from the events. Please make an issue out if this review.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1741164270",
    "pr_number": 2898,
    "pr_file": "flake.lock",
    "created_at": "2024-09-02T18:09:48+00:00",
    "commented_code": "},\n     \"nixpkgs-unstable\": {\n       \"locked\": {\n-        \"lastModified\": 1724479785,\n-        \"narHash\": \"sha256-pP3Azj5d6M5nmG68Fu4JqZmdGt4S4vqI5f8te+E/FTw=\",\n+        \"lastModified\": 1725103162,\n+        \"narHash\": \"sha256-Ym04C5+qovuQDYL/rKWSR+WESseQBbNAe5DsXNx5trY=\",\n         \"owner\": \"NixOS\",\n         \"repo\": \"nixpkgs\",\n-        \"rev\": \"d0e1602ddde669d5beb01aec49d71a51937ed7be\",\n+        \"rev\": \"12228ff1752d7b7624a54e9c1af4b222b3c1073b\",",
    "repo_full_name": "unionlabs/union",
    "discussion_comments": [
      {
        "comment_id": "1741164270",
        "repo_full_name": "unionlabs/union",
        "pr_number": 2898,
        "pr_file": "flake.lock",
        "discussion_id": "1741164270",
        "commented_code": "@@ -486,11 +486,11 @@\n     },\n     \"nixpkgs-unstable\": {\n       \"locked\": {\n-        \"lastModified\": 1724479785,\n-        \"narHash\": \"sha256-pP3Azj5d6M5nmG68Fu4JqZmdGt4S4vqI5f8te+E/FTw=\",\n+        \"lastModified\": 1725103162,\n+        \"narHash\": \"sha256-Ym04C5+qovuQDYL/rKWSR+WESseQBbNAe5DsXNx5trY=\",\n         \"owner\": \"NixOS\",\n         \"repo\": \"nixpkgs\",\n-        \"rev\": \"d0e1602ddde669d5beb01aec49d71a51937ed7be\",\n+        \"rev\": \"12228ff1752d7b7624a54e9c1af4b222b3c1073b\",",
        "comment_created_at": "2024-09-02T18:09:48+00:00",
        "comment_author": "benluelo",
        "comment_body": "we're sure we can safely update nixpkgs-unstable?",
        "pr_file_module": null
      },
      {
        "comment_id": "1741178488",
        "repo_full_name": "unionlabs/union",
        "pr_number": 2898,
        "pr_file": "flake.lock",
        "discussion_id": "1741164270",
        "commented_code": "@@ -486,11 +486,11 @@\n     },\n     \"nixpkgs-unstable\": {\n       \"locked\": {\n-        \"lastModified\": 1724479785,\n-        \"narHash\": \"sha256-pP3Azj5d6M5nmG68Fu4JqZmdGt4S4vqI5f8te+E/FTw=\",\n+        \"lastModified\": 1725103162,\n+        \"narHash\": \"sha256-Ym04C5+qovuQDYL/rKWSR+WESseQBbNAe5DsXNx5trY=\",\n         \"owner\": \"NixOS\",\n         \"repo\": \"nixpkgs\",\n-        \"rev\": \"d0e1602ddde669d5beb01aec49d71a51937ed7be\",\n+        \"rev\": \"12228ff1752d7b7624a54e9c1af4b222b3c1073b\",",
        "comment_created_at": "2024-09-02T18:20:07+00:00",
        "comment_author": "o-az",
        "comment_body": "that's the guidance I got from @cor - to update it and if there are any issues to raise and try to fix. This is what I did last few times (last update 5 days ago https://github.com/unionlabs/union/commit/7e38400a540f7f1c5d11f628cd9caa7bf4d0fca3)",
        "pr_file_module": null
      }
    ]
  }
]