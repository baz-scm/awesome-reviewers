[
  {
    "discussion_id": "1715709083",
    "pr_number": 3401,
    "pr_file": "unstructured/ingest/v2/README2.md",
    "created_at": "2024-08-13T17:58:43+00:00",
    "commented_code": "+# Developing V2 Connectors\n+## Intro\n+The Unstructured open source repo processes documents (artifacts) in a pipeline. The Source and Destination connectors sit at the front and back of the pipeline. For a visual example see the flow diagram at the bottom (link to bottom).\n+\n+## Simplest Example of a Pipeline\n+The simplest example of a pipeline starts with a local source connector, followed by a partioner, and then ends with a local destination connector. Here is what the code to run this looks like:\n+\n+>*** This is the type of Python file you'll want to run during development so that you can iterate on your connector.\n+\n+`local.py`\n+\n+```\n+from unstructured.ingest.v2.interfaces import ProcessorConfig\n+from unstructured.ingest.v2.pipeline.pipeline import Pipeline\n+from unstructured.ingest.v2.processes.connectors.local import (\n+    LocalConnectionConfig,\n+    LocalDownloaderConfig,\n+    LocalIndexerConfig,\n+    LocalUploaderConfig,\n+)\n+from unstructured.ingest.v2.processes.partitioner import PartitionerConfig\n+\n+if __name__ == \"__main__\":\n+    Pipeline.from_configs(\n+        context=ProcessorConfig(\n+            verbose=True,\n+            work_dir=\"local-working-dir\",\n+            reprocess=True,\n+            re_download=True,\n+        ),\n+        source_connection_config=LocalConnectionConfig(),\n+        indexer_config=LocalIndexerConfig(input_path=\"example-docs/fake-text.txt\"),\n+        downloader_config=LocalDownloaderConfig(),\n+        partitioner_config=PartitionerConfig(),\n+        uploader_config=LocalUploaderConfig(output_dir=\"local-working-dir/output\"),\n+    ).run()\n+```\n+You can run this with `python local.py` (Adjust the `input_path` and `output_dir` as appropriate.)\n+\n+The result is a partitioned `fake-text.txt.json` file in the `local-output` directory.\n+\n+\n+\n+Notice that the pipeline runs the following:\n+\n+* context - The ProcessorConfig runs the pipeline. The arguments are related to the overall pipeline. We added some optional args to make development easier.",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1715709083",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 3401,
        "pr_file": "unstructured/ingest/v2/README2.md",
        "discussion_id": "1715709083",
        "commented_code": "@@ -0,0 +1,353 @@\n+# Developing V2 Connectors\n+## Intro\n+The Unstructured open source repo processes documents (artifacts) in a pipeline. The Source and Destination connectors sit at the front and back of the pipeline. For a visual example see the flow diagram at the bottom (link to bottom).\n+\n+## Simplest Example of a Pipeline\n+The simplest example of a pipeline starts with a local source connector, followed by a partioner, and then ends with a local destination connector. Here is what the code to run this looks like:\n+\n+>*** This is the type of Python file you'll want to run during development so that you can iterate on your connector.\n+\n+`local.py`\n+\n+```\n+from unstructured.ingest.v2.interfaces import ProcessorConfig\n+from unstructured.ingest.v2.pipeline.pipeline import Pipeline\n+from unstructured.ingest.v2.processes.connectors.local import (\n+    LocalConnectionConfig,\n+    LocalDownloaderConfig,\n+    LocalIndexerConfig,\n+    LocalUploaderConfig,\n+)\n+from unstructured.ingest.v2.processes.partitioner import PartitionerConfig\n+\n+if __name__ == \"__main__\":\n+    Pipeline.from_configs(\n+        context=ProcessorConfig(\n+            verbose=True,\n+            work_dir=\"local-working-dir\",\n+            reprocess=True,\n+            re_download=True,\n+        ),\n+        source_connection_config=LocalConnectionConfig(),\n+        indexer_config=LocalIndexerConfig(input_path=\"example-docs/fake-text.txt\"),\n+        downloader_config=LocalDownloaderConfig(),\n+        partitioner_config=PartitionerConfig(),\n+        uploader_config=LocalUploaderConfig(output_dir=\"local-working-dir/output\"),\n+    ).run()\n+```\n+You can run this with `python local.py` (Adjust the `input_path` and `output_dir` as appropriate.)\n+\n+The result is a partitioned `fake-text.txt.json` file in the `local-output` directory.\n+\n+\n+\n+Notice that the pipeline runs the following:\n+\n+* context - The ProcessorConfig runs the pipeline. The arguments are related to the overall pipeline. We added some optional args to make development easier.",
        "comment_created_at": "2024-08-13T17:58:43+00:00",
        "comment_author": "Paul-Cornell",
        "comment_body": "Suggestion: Enclose the names of code symbols in backticks, here and throughout, for better readability.",
        "pr_file_module": null
      },
      {
        "comment_id": "1715710668",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 3401,
        "pr_file": "unstructured/ingest/v2/README2.md",
        "discussion_id": "1715709083",
        "commented_code": "@@ -0,0 +1,353 @@\n+# Developing V2 Connectors\n+## Intro\n+The Unstructured open source repo processes documents (artifacts) in a pipeline. The Source and Destination connectors sit at the front and back of the pipeline. For a visual example see the flow diagram at the bottom (link to bottom).\n+\n+## Simplest Example of a Pipeline\n+The simplest example of a pipeline starts with a local source connector, followed by a partioner, and then ends with a local destination connector. Here is what the code to run this looks like:\n+\n+>*** This is the type of Python file you'll want to run during development so that you can iterate on your connector.\n+\n+`local.py`\n+\n+```\n+from unstructured.ingest.v2.interfaces import ProcessorConfig\n+from unstructured.ingest.v2.pipeline.pipeline import Pipeline\n+from unstructured.ingest.v2.processes.connectors.local import (\n+    LocalConnectionConfig,\n+    LocalDownloaderConfig,\n+    LocalIndexerConfig,\n+    LocalUploaderConfig,\n+)\n+from unstructured.ingest.v2.processes.partitioner import PartitionerConfig\n+\n+if __name__ == \"__main__\":\n+    Pipeline.from_configs(\n+        context=ProcessorConfig(\n+            verbose=True,\n+            work_dir=\"local-working-dir\",\n+            reprocess=True,\n+            re_download=True,\n+        ),\n+        source_connection_config=LocalConnectionConfig(),\n+        indexer_config=LocalIndexerConfig(input_path=\"example-docs/fake-text.txt\"),\n+        downloader_config=LocalDownloaderConfig(),\n+        partitioner_config=PartitionerConfig(),\n+        uploader_config=LocalUploaderConfig(output_dir=\"local-working-dir/output\"),\n+    ).run()\n+```\n+You can run this with `python local.py` (Adjust the `input_path` and `output_dir` as appropriate.)\n+\n+The result is a partitioned `fake-text.txt.json` file in the `local-output` directory.\n+\n+\n+\n+Notice that the pipeline runs the following:\n+\n+* context - The ProcessorConfig runs the pipeline. The arguments are related to the overall pipeline. We added some optional args to make development easier.",
        "comment_created_at": "2024-08-13T17:59:58+00:00",
        "comment_author": "Paul-Cornell",
        "comment_body": "> We added some optional args to make development easier.\r\n\r\nNot sure what this means: which are optional, and why do they make development easier?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1440681766",
    "pr_number": 2311,
    "pr_file": "CHANGELOG.md",
    "created_at": "2024-01-03T16:59:35+00:00",
    "commented_code": "### Fixes\n \n * **Fix element extraction not working when using \"auto\" strategy for pdf and image** If element extraction is specified, the \"auto\" strategy falls back to the \"hi_res\" strategy.\n+* **Pins version of unstructured-client** Sets minimum version of unstructured-client to avoid raising a TypeError when passing `api_key_auth` to `UnstructuredClient`",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1440681766",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2311,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "1440681766",
        "commented_code": "@@ -13,6 +13,7 @@\n ### Fixes\n \n * **Fix element extraction not working when using \"auto\" strategy for pdf and image** If element extraction is specified, the \"auto\" strategy falls back to the \"hi_res\" strategy.\n+* **Pins version of unstructured-client** Sets minimum version of unstructured-client to avoid raising a TypeError when passing `api_key_auth` to `UnstructuredClient`",
        "comment_created_at": "2024-01-03T16:59:35+00:00",
        "comment_author": "qued",
        "comment_body": "```suggestion\r\n* **Pins version of unstructured-client** Sets minimum version of `unstructured-client` to avoid raising a `TypeError` when passing `api_key_auth` to `UnstructuredClient`\r\n```",
        "pr_file_module": null
      }
    ]
  }
]