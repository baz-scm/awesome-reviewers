[
  {
    "discussion_id": "1246978513",
    "pr_number": 852,
    "pr_file": "scripts/validate-models-s3.sh",
    "created_at": "2023-06-29T18:40:02+00:00",
    "commented_code": "+#!/usr/bin/env bash\n+\n+strategies=${STRATEGIES:=fast,hi_res,ocr_only}",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1246978513",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 852,
        "pr_file": "scripts/validate-models-s3.sh",
        "discussion_id": "1246978513",
        "commented_code": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env bash\n+\n+strategies=${STRATEGIES:=fast,hi_res,ocr_only}",
        "comment_created_at": "2023-06-29T18:40:02+00:00",
        "comment_author": "six5532one",
        "comment_body": "How about passing these as arguments so we can reuse this script for other strategies? If this sounds good, documenting how to use the script would help too.",
        "pr_file_module": null
      },
      {
        "comment_id": "1247007058",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 852,
        "pr_file": "scripts/validate-models-s3.sh",
        "discussion_id": "1246978513",
        "commented_code": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env bash\n+\n+strategies=${STRATEGIES:=fast,hi_res,ocr_only}",
        "comment_created_at": "2023-06-29T19:10:21+00:00",
        "comment_author": "rbiseck3",
        "comment_body": "In essence this solves the same thing by allowing you to set the env var to the values you want. This just sets the default in case one is not set. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1247112069",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 852,
        "pr_file": "scripts/validate-models-s3.sh",
        "discussion_id": "1246978513",
        "commented_code": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env bash\n+\n+strategies=${STRATEGIES:=fast,hi_res,ocr_only}",
        "comment_created_at": "2023-06-29T20:00:39+00:00",
        "comment_author": "six5532one",
        "comment_body": "That makes sense. Commenting or documenting in the script that the user can specify strategies by setting the STRATEGIES environment variable makes it easier to use for someone who isn't familiar with shell scripting.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1759572245",
    "pr_number": 3595,
    "pr_file": "test_unstructured_ingest/src/s3.sh",
    "created_at": "2024-09-13T22:18:23+00:00",
    "commented_code": "\"$SCRIPT_DIR\"/check-num-files-expected-output.sh 3 $OUTPUT_FOLDER_NAME 20k\n \n-RUN_SCRIPT=${RUN_SCRIPT:-./unstructured/ingest/main.py}\n-PYTHONPATH=${PYTHONPATH:-.} \"$RUN_SCRIPT\" \\\n+PYTHONPATH=. unstructured-ingest \\",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1759572245",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 3595,
        "pr_file": "test_unstructured_ingest/src/s3.sh",
        "discussion_id": "1759572245",
        "commented_code": "@@ -23,8 +23,7 @@ trap cleanup EXIT\n \n \"$SCRIPT_DIR\"/check-num-files-expected-output.sh 3 $OUTPUT_FOLDER_NAME 20k\n \n-RUN_SCRIPT=${RUN_SCRIPT:-./unstructured/ingest/main.py}\n-PYTHONPATH=${PYTHONPATH:-.} \"$RUN_SCRIPT\" \\\n+PYTHONPATH=. unstructured-ingest \\",
        "comment_created_at": "2024-09-13T22:18:23+00:00",
        "comment_author": "cragwolfe",
        "comment_body": "nit: le'ts preserve ability to override script name or PYTHONPATH?\r\ni.e.:\r\n\r\n```suggestion\r\nRUN_SCRIPT=${RUN_SCRIPT:-unstructured-ingest}\r\nPYTHONPATH=${PYTHONPATH:-.} \"$RUN_SCRIPT\" \\\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1541981245",
    "pr_number": 2693,
    "pr_file": "test_unstructured_ingest/src/local-embed-vertexai.sh",
    "created_at": "2024-03-27T20:24:17+00:00",
    "commented_code": "+#!/usr/bin/env bash\n+\n+set -e\n+\n+SRC_PATH=$(dirname \"$(realpath \"$0\")\")\n+SCRIPT_DIR=$(dirname \"$SRC_PATH\")\n+cd \"$SCRIPT_DIR\"/.. || exit 1\n+OUTPUT_FOLDER_NAME=embed-vertexai\n+OUTPUT_ROOT=${OUTPUT_ROOT:-$SCRIPT_DIR}\n+OUTPUT_DIR=$OUTPUT_ROOT/structured-output/$OUTPUT_FOLDER_NAME\n+WORK_DIR=$OUTPUT_ROOT/workdir/$OUTPUT_FOLDER_NAME\n+max_processes=${MAX_PROCESSES:=$(python3 -c \"import os; print(os.cpu_count())\")}\n+GCP_INGEST_SERVICE_KEY=${GCP_INGEST_SERVICE_KEY:-$GCP_INGEST_SERVICE_KEY}\n+\n+# shellcheck disable=SC1091\n+source \"$SCRIPT_DIR\"/cleanup.sh\n+function cleanup() {\n+  cleanup_dir \"$OUTPUT_DIR\"\n+  cleanup_dir \"$WORK_DIR\"\n+}\n+trap cleanup EXIT\n+\n+RUN_SCRIPT=${RUN_SCRIPT:-./unstructured/ingest/main.py}\n+PYTHONPATH=${PYTHONPATH:-.} \"$RUN_SCRIPT\" \\\n+  local \\\n+  --num-processes \"$max_processes\" \\\n+  --metadata-exclude coordinates,filename,file_directory,metadata.data_source.date_created,metadata.data_source.date_modified,metadata.data_source.date_processed,metadata.last_modified,metadata.detection_class_prob,metadata.parent_id,metadata.category_depth \\\n+  --output-dir \"$OUTPUT_DIR\" \\\n+  --verbose \\\n+  --reprocess \\\n+  --input-path example-docs/book-war-and-peace-1p.txt \\\n+  --work-dir \"$WORK_DIR\" \\\n+  --embedding-provider \"langchain-vertexai\" \\\n+  --embedding-api-key \"$GCP_INGEST_SERVICE_KEY\" \\",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1541981245",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2693,
        "pr_file": "test_unstructured_ingest/src/local-embed-vertexai.sh",
        "discussion_id": "1541981245",
        "commented_code": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+SRC_PATH=$(dirname \"$(realpath \"$0\")\")\n+SCRIPT_DIR=$(dirname \"$SRC_PATH\")\n+cd \"$SCRIPT_DIR\"/.. || exit 1\n+OUTPUT_FOLDER_NAME=embed-vertexai\n+OUTPUT_ROOT=${OUTPUT_ROOT:-$SCRIPT_DIR}\n+OUTPUT_DIR=$OUTPUT_ROOT/structured-output/$OUTPUT_FOLDER_NAME\n+WORK_DIR=$OUTPUT_ROOT/workdir/$OUTPUT_FOLDER_NAME\n+max_processes=${MAX_PROCESSES:=$(python3 -c \"import os; print(os.cpu_count())\")}\n+GCP_INGEST_SERVICE_KEY=${GCP_INGEST_SERVICE_KEY:-$GCP_INGEST_SERVICE_KEY}\n+\n+# shellcheck disable=SC1091\n+source \"$SCRIPT_DIR\"/cleanup.sh\n+function cleanup() {\n+  cleanup_dir \"$OUTPUT_DIR\"\n+  cleanup_dir \"$WORK_DIR\"\n+}\n+trap cleanup EXIT\n+\n+RUN_SCRIPT=${RUN_SCRIPT:-./unstructured/ingest/main.py}\n+PYTHONPATH=${PYTHONPATH:-.} \"$RUN_SCRIPT\" \\\n+  local \\\n+  --num-processes \"$max_processes\" \\\n+  --metadata-exclude coordinates,filename,file_directory,metadata.data_source.date_created,metadata.data_source.date_modified,metadata.data_source.date_processed,metadata.last_modified,metadata.detection_class_prob,metadata.parent_id,metadata.category_depth \\\n+  --output-dir \"$OUTPUT_DIR\" \\\n+  --verbose \\\n+  --reprocess \\\n+  --input-path example-docs/book-war-and-peace-1p.txt \\\n+  --work-dir \"$WORK_DIR\" \\\n+  --embedding-provider \"langchain-vertexai\" \\\n+  --embedding-api-key \"$GCP_INGEST_SERVICE_KEY\" \\",
        "comment_created_at": "2024-03-27T20:24:17+00:00",
        "comment_author": "potter-potter",
        "comment_body": "Nice. I ended up doing these code changes because I store the path to a json file with the creds in my environment. Just like CI does I think.\r\nPart 1 (above line 23):\r\nGCP_INGEST_SERVICE_JSON=`cat $GCP_INGEST_SERVICE_KEY`\r\nPart 2:\r\n  --embedding-api-key \"$GCP_INGEST_SERVICE_JSON\" \\\r\nPart 3:\r\nComment out line 13.\r\n\r\nI think this resembles the google-drive.sh more. But your choice.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1542223923",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2693,
        "pr_file": "test_unstructured_ingest/src/local-embed-vertexai.sh",
        "discussion_id": "1541981245",
        "commented_code": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+SRC_PATH=$(dirname \"$(realpath \"$0\")\")\n+SCRIPT_DIR=$(dirname \"$SRC_PATH\")\n+cd \"$SCRIPT_DIR\"/.. || exit 1\n+OUTPUT_FOLDER_NAME=embed-vertexai\n+OUTPUT_ROOT=${OUTPUT_ROOT:-$SCRIPT_DIR}\n+OUTPUT_DIR=$OUTPUT_ROOT/structured-output/$OUTPUT_FOLDER_NAME\n+WORK_DIR=$OUTPUT_ROOT/workdir/$OUTPUT_FOLDER_NAME\n+max_processes=${MAX_PROCESSES:=$(python3 -c \"import os; print(os.cpu_count())\")}\n+GCP_INGEST_SERVICE_KEY=${GCP_INGEST_SERVICE_KEY:-$GCP_INGEST_SERVICE_KEY}\n+\n+# shellcheck disable=SC1091\n+source \"$SCRIPT_DIR\"/cleanup.sh\n+function cleanup() {\n+  cleanup_dir \"$OUTPUT_DIR\"\n+  cleanup_dir \"$WORK_DIR\"\n+}\n+trap cleanup EXIT\n+\n+RUN_SCRIPT=${RUN_SCRIPT:-./unstructured/ingest/main.py}\n+PYTHONPATH=${PYTHONPATH:-.} \"$RUN_SCRIPT\" \\\n+  local \\\n+  --num-processes \"$max_processes\" \\\n+  --metadata-exclude coordinates,filename,file_directory,metadata.data_source.date_created,metadata.data_source.date_modified,metadata.data_source.date_processed,metadata.last_modified,metadata.detection_class_prob,metadata.parent_id,metadata.category_depth \\\n+  --output-dir \"$OUTPUT_DIR\" \\\n+  --verbose \\\n+  --reprocess \\\n+  --input-path example-docs/book-war-and-peace-1p.txt \\\n+  --work-dir \"$WORK_DIR\" \\\n+  --embedding-provider \"langchain-vertexai\" \\\n+  --embedding-api-key \"$GCP_INGEST_SERVICE_KEY\" \\",
        "comment_created_at": "2024-03-28T02:03:09+00:00",
        "comment_author": "potter-potter",
        "comment_body": "Nevermind. Works well now that I updated my env variable",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1442068894",
    "pr_number": 2328,
    "pr_file": "test_unstructured_ingest/dest/vectara.sh",
    "created_at": "2024-01-04T17:33:29+00:00",
    "commented_code": "+#!/usr/bin/env bash\n+\n+set -e\n+\n+DEST_PATH=$(dirname \"$(realpath \"$0\")\")\n+SCRIPT_DIR=$(dirname \"$DEST_PATH\")\n+cd \"$SCRIPT_DIR\"/.. || exit 1\n+\n+OUTPUT_FOLDER_NAME=s3-vectara-dest\n+OUTPUT_DIR=$SCRIPT_DIR/structured-output/$OUTPUT_FOLDER_NAME\n+WORK_DIR=$SCRIPT_DIR/workdir/$OUTPUT_FOLDER_NAME\n+\n+CORPUS_NAME=\"test-corpus-vectara\"\n+\n+max_processes=${MAX_PROCESSES:=$(python3 -c \"import os; print(os.cpu_count())\")}\n+\n+if [ -z \"$VECTARA_OAUTH_CLIENT_ID\" ]; then\n+  echo \"Skipping VECTARA ingest test because ECTARA_OAUTH_CLIENT_ID env var is not set.\"\n+  exit 0\n+fi\n+if [ -z \"$VECTARA_OAUTH_SECRET\" ]; then\n+  echo \"Skipping VECTARA ingest test because VECTARA_OAUTH_SECRET env var is not set.\"\n+  exit 0\n+fi\n+if [ -z \"$VECTARA_CUSTOMER_ID\" ]; then\n+  echo \"Skipping VECTARA ingest test because VECTARA_CUSTOMER_ID env var is not set.\"\n+  exit 0\n+fi\n+\n+\n+# shellcheck disable=SC1091\n+source \"$SCRIPT_DIR\"/cleanup.sh\n+function cleanup {\n+\n+  # get JWT token\n+  jwt_token_resp=$(curl -sS -XPOST -H \"Content-type: application/x-www-form-urlencoded\" -d  \\\n+                 \"grant_type=client_credentials&client_id=$VECTARA_OAUTH_CLIENT_ID&client_secret=$VECTARA_OAUTH_SECRET\" \\\n+                 \"https://vectara-prod-$VECTARA_CUSTOMER_ID.auth.us-west-2.amazoncognito.com/oauth2/token\")\n+  access_token=$(echo $jwt_token_resp | jq -r '.access_token')\n+\n+  # get corpus ID from name\n+  corpora_resp=$(curl -sS -L -X POST 'https://api.vectara.io/v1/list-corpora' \\\n+                      -H 'Content-Type: application/json' \\\n+                      -H 'Accept: application/json' \\\n+                      -H \"customer-id: $VECTARA_CUSTOMER_ID\" \\\n+                      -H \"Authorization: Bearer $access_token\" \\\n+                      --data-raw \"{\n+                        \\\"numResults\\\": 100,\n+                        \\\"filter\\\": \\\"$CORPUS_NAME\\\"\n+                      }\")\n+  corpus_id=$(echo $corpora_resp | jq -r '.corpus[0].id')\n+\n+  # Reset corpus: erase all content\n+  echo \"Deleting corpus $corpus_id ($CORPUS_NAME)\"\n+  curl -sS -L -X POST 'https://api.vectara.io/v1/reset-corpus' \\",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1442068894",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2328,
        "pr_file": "test_unstructured_ingest/dest/vectara.sh",
        "discussion_id": "1442068894",
        "commented_code": "@@ -0,0 +1,84 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+DEST_PATH=$(dirname \"$(realpath \"$0\")\")\n+SCRIPT_DIR=$(dirname \"$DEST_PATH\")\n+cd \"$SCRIPT_DIR\"/.. || exit 1\n+\n+OUTPUT_FOLDER_NAME=s3-vectara-dest\n+OUTPUT_DIR=$SCRIPT_DIR/structured-output/$OUTPUT_FOLDER_NAME\n+WORK_DIR=$SCRIPT_DIR/workdir/$OUTPUT_FOLDER_NAME\n+\n+CORPUS_NAME=\"test-corpus-vectara\"\n+\n+max_processes=${MAX_PROCESSES:=$(python3 -c \"import os; print(os.cpu_count())\")}\n+\n+if [ -z \"$VECTARA_OAUTH_CLIENT_ID\" ]; then\n+  echo \"Skipping VECTARA ingest test because ECTARA_OAUTH_CLIENT_ID env var is not set.\"\n+  exit 0\n+fi\n+if [ -z \"$VECTARA_OAUTH_SECRET\" ]; then\n+  echo \"Skipping VECTARA ingest test because VECTARA_OAUTH_SECRET env var is not set.\"\n+  exit 0\n+fi\n+if [ -z \"$VECTARA_CUSTOMER_ID\" ]; then\n+  echo \"Skipping VECTARA ingest test because VECTARA_CUSTOMER_ID env var is not set.\"\n+  exit 0\n+fi\n+\n+\n+# shellcheck disable=SC1091\n+source \"$SCRIPT_DIR\"/cleanup.sh\n+function cleanup {\n+\n+  # get JWT token\n+  jwt_token_resp=$(curl -sS -XPOST -H \"Content-type: application/x-www-form-urlencoded\" -d  \\\n+                 \"grant_type=client_credentials&client_id=$VECTARA_OAUTH_CLIENT_ID&client_secret=$VECTARA_OAUTH_SECRET\" \\\n+                 \"https://vectara-prod-$VECTARA_CUSTOMER_ID.auth.us-west-2.amazoncognito.com/oauth2/token\")\n+  access_token=$(echo $jwt_token_resp | jq -r '.access_token')\n+\n+  # get corpus ID from name\n+  corpora_resp=$(curl -sS -L -X POST 'https://api.vectara.io/v1/list-corpora' \\\n+                      -H 'Content-Type: application/json' \\\n+                      -H 'Accept: application/json' \\\n+                      -H \"customer-id: $VECTARA_CUSTOMER_ID\" \\\n+                      -H \"Authorization: Bearer $access_token\" \\\n+                      --data-raw \"{\n+                        \\\"numResults\\\": 100,\n+                        \\\"filter\\\": \\\"$CORPUS_NAME\\\"\n+                      }\")\n+  corpus_id=$(echo $corpora_resp | jq -r '.corpus[0].id')\n+\n+  # Reset corpus: erase all content\n+  echo \"Deleting corpus $corpus_id ($CORPUS_NAME)\"\n+  curl -sS -L -X POST 'https://api.vectara.io/v1/reset-corpus' \\",
        "comment_created_at": "2024-01-04T17:33:29+00:00",
        "comment_author": "potter-potter",
        "comment_body": "Is this the same as deleting the corpus? Is delete available. What we will probably do is add a random number to the end of the corpus name. Just in case we run this test in parallel in CI.",
        "pr_file_module": null
      },
      {
        "comment_id": "1442084223",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2328,
        "pr_file": "test_unstructured_ingest/dest/vectara.sh",
        "discussion_id": "1442068894",
        "commented_code": "@@ -0,0 +1,84 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+DEST_PATH=$(dirname \"$(realpath \"$0\")\")\n+SCRIPT_DIR=$(dirname \"$DEST_PATH\")\n+cd \"$SCRIPT_DIR\"/.. || exit 1\n+\n+OUTPUT_FOLDER_NAME=s3-vectara-dest\n+OUTPUT_DIR=$SCRIPT_DIR/structured-output/$OUTPUT_FOLDER_NAME\n+WORK_DIR=$SCRIPT_DIR/workdir/$OUTPUT_FOLDER_NAME\n+\n+CORPUS_NAME=\"test-corpus-vectara\"\n+\n+max_processes=${MAX_PROCESSES:=$(python3 -c \"import os; print(os.cpu_count())\")}\n+\n+if [ -z \"$VECTARA_OAUTH_CLIENT_ID\" ]; then\n+  echo \"Skipping VECTARA ingest test because ECTARA_OAUTH_CLIENT_ID env var is not set.\"\n+  exit 0\n+fi\n+if [ -z \"$VECTARA_OAUTH_SECRET\" ]; then\n+  echo \"Skipping VECTARA ingest test because VECTARA_OAUTH_SECRET env var is not set.\"\n+  exit 0\n+fi\n+if [ -z \"$VECTARA_CUSTOMER_ID\" ]; then\n+  echo \"Skipping VECTARA ingest test because VECTARA_CUSTOMER_ID env var is not set.\"\n+  exit 0\n+fi\n+\n+\n+# shellcheck disable=SC1091\n+source \"$SCRIPT_DIR\"/cleanup.sh\n+function cleanup {\n+\n+  # get JWT token\n+  jwt_token_resp=$(curl -sS -XPOST -H \"Content-type: application/x-www-form-urlencoded\" -d  \\\n+                 \"grant_type=client_credentials&client_id=$VECTARA_OAUTH_CLIENT_ID&client_secret=$VECTARA_OAUTH_SECRET\" \\\n+                 \"https://vectara-prod-$VECTARA_CUSTOMER_ID.auth.us-west-2.amazoncognito.com/oauth2/token\")\n+  access_token=$(echo $jwt_token_resp | jq -r '.access_token')\n+\n+  # get corpus ID from name\n+  corpora_resp=$(curl -sS -L -X POST 'https://api.vectara.io/v1/list-corpora' \\\n+                      -H 'Content-Type: application/json' \\\n+                      -H 'Accept: application/json' \\\n+                      -H \"customer-id: $VECTARA_CUSTOMER_ID\" \\\n+                      -H \"Authorization: Bearer $access_token\" \\\n+                      --data-raw \"{\n+                        \\\"numResults\\\": 100,\n+                        \\\"filter\\\": \\\"$CORPUS_NAME\\\"\n+                      }\")\n+  corpus_id=$(echo $corpora_resp | jq -r '.corpus[0].id')\n+\n+  # Reset corpus: erase all content\n+  echo \"Deleting corpus $corpus_id ($CORPUS_NAME)\"\n+  curl -sS -L -X POST 'https://api.vectara.io/v1/reset-corpus' \\",
        "comment_created_at": "2024-01-04T17:51:09+00:00",
        "comment_author": "ofermend",
        "comment_body": "This is different than delete. \"reset-corpus\" just removes the content of the corpus, which I thought would be enough for the test. But quite easy to transition this to delete if this is better (e.g. for parallel CI).\r\nLet me do that + add the random postfix (as I've seen elsewhere).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1447923317",
    "pr_number": 2381,
    "pr_file": "test_unstructured_ingest/dest/azure-cognitive-search.sh",
    "created_at": "2024-01-10T20:18:06+00:00",
    "commented_code": "# 2023-07-01-Preview, 2021-04-30-Preview, 2020-06-30-Preview\n API_VERSION=2023-07-01-Preview\n \n-if [ -z \"$AZURE_SEARCH_API_KEY\" ]; then\n-  echo \"Skipping Azure Cognitive Search ingest test because AZURE_SEARCH_API_KEY env var is not set.\"\n+if [ -z \"$AZURE_SEARCH_API_KEY\" ] || [ -z \"$AZURE_SEARCH_ENDPOINT\" ]; then",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1447923317",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2381,
        "pr_file": "test_unstructured_ingest/dest/azure-cognitive-search.sh",
        "discussion_id": "1447923317",
        "commented_code": "@@ -21,8 +19,8 @@ DESTINATION_INDEX=\"utic-test-ingest-fixtures-output-$random_id\"\n # 2023-07-01-Preview, 2021-04-30-Preview, 2020-06-30-Preview\n API_VERSION=2023-07-01-Preview\n \n-if [ -z \"$AZURE_SEARCH_API_KEY\" ]; then\n-  echo \"Skipping Azure Cognitive Search ingest test because AZURE_SEARCH_API_KEY env var is not set.\"\n+if [ -z \"$AZURE_SEARCH_API_KEY\" ] || [ -z \"$AZURE_SEARCH_ENDPOINT\" ]; then",
        "comment_created_at": "2024-01-10T20:18:06+00:00",
        "comment_author": "ahmetmeleq",
        "comment_body": "Why is this changed?",
        "pr_file_module": null
      },
      {
        "comment_id": "1447924352",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2381,
        "pr_file": "test_unstructured_ingest/dest/azure-cognitive-search.sh",
        "discussion_id": "1447923317",
        "commented_code": "@@ -21,8 +19,8 @@ DESTINATION_INDEX=\"utic-test-ingest-fixtures-output-$random_id\"\n # 2023-07-01-Preview, 2021-04-30-Preview, 2020-06-30-Preview\n API_VERSION=2023-07-01-Preview\n \n-if [ -z \"$AZURE_SEARCH_API_KEY\" ]; then\n-  echo \"Skipping Azure Cognitive Search ingest test because AZURE_SEARCH_API_KEY env var is not set.\"\n+if [ -z \"$AZURE_SEARCH_API_KEY\" ] || [ -z \"$AZURE_SEARCH_ENDPOINT\" ]; then",
        "comment_created_at": "2024-01-10T20:19:22+00:00",
        "comment_author": "rbiseck3",
        "comment_body": "Not sure how this was passing in CI, but that endpoint was a configurable value. It broke for me locally without this change. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1447941229",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2381,
        "pr_file": "test_unstructured_ingest/dest/azure-cognitive-search.sh",
        "discussion_id": "1447923317",
        "commented_code": "@@ -21,8 +19,8 @@ DESTINATION_INDEX=\"utic-test-ingest-fixtures-output-$random_id\"\n # 2023-07-01-Preview, 2021-04-30-Preview, 2020-06-30-Preview\n API_VERSION=2023-07-01-Preview\n \n-if [ -z \"$AZURE_SEARCH_API_KEY\" ]; then\n-  echo \"Skipping Azure Cognitive Search ingest test because AZURE_SEARCH_API_KEY env var is not set.\"\n+if [ -z \"$AZURE_SEARCH_API_KEY\" ] || [ -z \"$AZURE_SEARCH_ENDPOINT\" ]; then",
        "comment_created_at": "2024-01-10T20:37:35+00:00",
        "comment_author": "ahmetmeleq",
        "comment_body": "https://github.com/Unstructured-IO/unstructured/blob/a8a103bc5c378900c3c17bffde26a3b41287ff89/test_unstructured_ingest/dest/azure-cognitive-search.sh#L14C1-L14C22\r\n\r\nThe variable was defined at the top (being removed here) and it is not a secret value. We've made a similar discussion in a past PR, we don't want to bloat CI values with non secret variables",
        "pr_file_module": null
      },
      {
        "comment_id": "1447956372",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2381,
        "pr_file": "test_unstructured_ingest/dest/azure-cognitive-search.sh",
        "discussion_id": "1447923317",
        "commented_code": "@@ -21,8 +19,8 @@ DESTINATION_INDEX=\"utic-test-ingest-fixtures-output-$random_id\"\n # 2023-07-01-Preview, 2021-04-30-Preview, 2020-06-30-Preview\n API_VERSION=2023-07-01-Preview\n \n-if [ -z \"$AZURE_SEARCH_API_KEY\" ]; then\n-  echo \"Skipping Azure Cognitive Search ingest test because AZURE_SEARCH_API_KEY env var is not set.\"\n+if [ -z \"$AZURE_SEARCH_API_KEY\" ] || [ -z \"$AZURE_SEARCH_ENDPOINT\" ]; then",
        "comment_created_at": "2024-01-10T20:53:46+00:00",
        "comment_author": "ahmetmeleq",
        "comment_body": "Also, the azure cognitive search credentials has recently been modified. If you have a local credential which is not updated, that might be the reason why it failed in local ",
        "pr_file_module": null
      },
      {
        "comment_id": "1448006281",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2381,
        "pr_file": "test_unstructured_ingest/dest/azure-cognitive-search.sh",
        "discussion_id": "1447923317",
        "commented_code": "@@ -21,8 +19,8 @@ DESTINATION_INDEX=\"utic-test-ingest-fixtures-output-$random_id\"\n # 2023-07-01-Preview, 2021-04-30-Preview, 2020-06-30-Preview\n API_VERSION=2023-07-01-Preview\n \n-if [ -z \"$AZURE_SEARCH_API_KEY\" ]; then\n-  echo \"Skipping Azure Cognitive Search ingest test because AZURE_SEARCH_API_KEY env var is not set.\"\n+if [ -z \"$AZURE_SEARCH_API_KEY\" ] || [ -z \"$AZURE_SEARCH_ENDPOINT\" ]; then",
        "comment_created_at": "2024-01-10T21:37:37+00:00",
        "comment_author": "rbiseck3",
        "comment_body": "I assumed because we had that value in LastPass, it was being used in CI. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1448091004",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2381,
        "pr_file": "test_unstructured_ingest/dest/azure-cognitive-search.sh",
        "discussion_id": "1447923317",
        "commented_code": "@@ -21,8 +19,8 @@ DESTINATION_INDEX=\"utic-test-ingest-fixtures-output-$random_id\"\n # 2023-07-01-Preview, 2021-04-30-Preview, 2020-06-30-Preview\n API_VERSION=2023-07-01-Preview\n \n-if [ -z \"$AZURE_SEARCH_API_KEY\" ]; then\n-  echo \"Skipping Azure Cognitive Search ingest test because AZURE_SEARCH_API_KEY env var is not set.\"\n+if [ -z \"$AZURE_SEARCH_API_KEY\" ] || [ -z \"$AZURE_SEARCH_ENDPOINT\" ]; then",
        "comment_created_at": "2024-01-10T23:11:10+00:00",
        "comment_author": "ryannikolaidis",
        "comment_body": "bump - can we remove? there should never be a case where this isn't defined given L14 right?",
        "pr_file_module": null
      },
      {
        "comment_id": "1448099069",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2381,
        "pr_file": "test_unstructured_ingest/dest/azure-cognitive-search.sh",
        "discussion_id": "1447923317",
        "commented_code": "@@ -21,8 +19,8 @@ DESTINATION_INDEX=\"utic-test-ingest-fixtures-output-$random_id\"\n # 2023-07-01-Preview, 2021-04-30-Preview, 2020-06-30-Preview\n API_VERSION=2023-07-01-Preview\n \n-if [ -z \"$AZURE_SEARCH_API_KEY\" ]; then\n-  echo \"Skipping Azure Cognitive Search ingest test because AZURE_SEARCH_API_KEY env var is not set.\"\n+if [ -z \"$AZURE_SEARCH_API_KEY\" ] || [ -z \"$AZURE_SEARCH_ENDPOINT\" ]; then",
        "comment_created_at": "2024-01-10T23:19:18+00:00",
        "comment_author": "rbiseck3",
        "comment_body": "removed",
        "pr_file_module": null
      },
      {
        "comment_id": "1448099151",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2381,
        "pr_file": "test_unstructured_ingest/dest/azure-cognitive-search.sh",
        "discussion_id": "1447923317",
        "commented_code": "@@ -21,8 +19,8 @@ DESTINATION_INDEX=\"utic-test-ingest-fixtures-output-$random_id\"\n # 2023-07-01-Preview, 2021-04-30-Preview, 2020-06-30-Preview\n API_VERSION=2023-07-01-Preview\n \n-if [ -z \"$AZURE_SEARCH_API_KEY\" ]; then\n-  echo \"Skipping Azure Cognitive Search ingest test because AZURE_SEARCH_API_KEY env var is not set.\"\n+if [ -z \"$AZURE_SEARCH_API_KEY\" ] || [ -z \"$AZURE_SEARCH_ENDPOINT\" ]; then",
        "comment_created_at": "2024-01-10T23:19:30+00:00",
        "comment_author": "ahmetmeleq",
        "comment_body": "Agreed that it shouldn't exist in Lastpass \ud83d\udc4d I tried updating but having permission issues\r\n\r\n![image](https://github.com/Unstructured-IO/unstructured/assets/39141206/c81e5d5f-72e7-4462-bc83-ff7140dc9a05)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1448110272",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2381,
        "pr_file": "test_unstructured_ingest/dest/azure-cognitive-search.sh",
        "discussion_id": "1447923317",
        "commented_code": "@@ -21,8 +19,8 @@ DESTINATION_INDEX=\"utic-test-ingest-fixtures-output-$random_id\"\n # 2023-07-01-Preview, 2021-04-30-Preview, 2020-06-30-Preview\n API_VERSION=2023-07-01-Preview\n \n-if [ -z \"$AZURE_SEARCH_API_KEY\" ]; then\n-  echo \"Skipping Azure Cognitive Search ingest test because AZURE_SEARCH_API_KEY env var is not set.\"\n+if [ -z \"$AZURE_SEARCH_API_KEY\" ] || [ -z \"$AZURE_SEARCH_ENDPOINT\" ]; then",
        "comment_created_at": "2024-01-10T23:40:22+00:00",
        "comment_author": "ahmetmeleq",
        "comment_body": "Updated now \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  }
]