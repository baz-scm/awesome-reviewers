[
  {
    "discussion_id": "1713735318",
    "pr_number": 3510,
    "pr_file": "typings/lxml/html/__init__.pyi",
    "created_at": "2024-08-12T13:07:16+00:00",
    "commented_code": "+from __future__ import annotations\n+\n+from ._element import (\n+    HtmlElement as HtmlElement,",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1713735318",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 3510,
        "pr_file": "typings/lxml/html/__init__.pyi",
        "discussion_id": "1713735318",
        "commented_code": "@@ -0,0 +1,8 @@\n+from __future__ import annotations\n+\n+from ._element import (\n+    HtmlElement as HtmlElement,",
        "comment_created_at": "2024-08-12T13:07:16+00:00",
        "comment_author": "Coniferish",
        "comment_body": "Why use the `import/as` syntax here if you're not changing the name?",
        "pr_file_module": null
      },
      {
        "comment_id": "1714186033",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 3510,
        "pr_file": "typings/lxml/html/__init__.pyi",
        "discussion_id": "1713735318",
        "commented_code": "@@ -0,0 +1,8 @@\n+from __future__ import annotations\n+\n+from ._element import (\n+    HtmlElement as HtmlElement,",
        "comment_created_at": "2024-08-12T18:04:26+00:00",
        "comment_author": "scanny",
        "comment_body": "It's commonly done that way in type-stubs where the file is just \"republishing\" an import from somewhere else. It avoids an \"unused import\" error, which I suppose is why the original author does that and definitely why I keep it that way.\r\n\r\nThe other way I know of to avoid the unused-import error is to use `__all__ = [\"HtmlElement\"]` for example, but this is more compact and a straight copy-paste from the stub packages these come from.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1669361854",
    "pr_number": 3351,
    "pr_file": "typings/lxml/etree/_cleanup.pyi",
    "created_at": "2024-07-08T21:37:38+00:00",
    "commented_code": "+# pyright: reportPrivateUsage=false\n+\n+from __future__ import annotations\n+\n+from typing import Collection, overload\n+\n+from .._types import _ElementOrTree, _TagSelector\n+\n+@overload\n+def strip_elements(",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1669361854",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 3351,
        "pr_file": "typings/lxml/etree/_cleanup.pyi",
        "discussion_id": "1669361854",
        "commented_code": "@@ -0,0 +1,21 @@\n+# pyright: reportPrivateUsage=false\n+\n+from __future__ import annotations\n+\n+from typing import Collection, overload\n+\n+from .._types import _ElementOrTree, _TagSelector\n+\n+@overload\n+def strip_elements(",
        "comment_created_at": "2024-07-08T21:37:38+00:00",
        "comment_author": "MthwRobinson",
        "comment_body": "Is `strip_elements` supposed to be here twice?",
        "pr_file_module": null
      },
      {
        "comment_id": "1669370068",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 3351,
        "pr_file": "typings/lxml/etree/_cleanup.pyi",
        "discussion_id": "1669361854",
        "commented_code": "@@ -0,0 +1,21 @@\n+# pyright: reportPrivateUsage=false\n+\n+from __future__ import annotations\n+\n+from typing import Collection, overload\n+\n+from .._types import _ElementOrTree, _TagSelector\n+\n+@overload\n+def strip_elements(",
        "comment_created_at": "2024-07-08T21:46:46+00:00",
        "comment_author": "scanny",
        "comment_body": "Yes. This is a typing thing (signaled by the `@overload` decorator) where there are two distinct interfaces to a function and you can't represent them both with a single set of annotations. In this case it's because tag names can either be a sequence or you can specify them in variadic form, like:\r\n```python\r\nstrip_elements(e, [\"nav\", \"header\", \"footer\"])\r\n# -- OR --\r\nstrip_elements( e, \"nav\", \"header\", \"footer\")\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1669377322",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 3351,
        "pr_file": "typings/lxml/etree/_cleanup.pyi",
        "discussion_id": "1669361854",
        "commented_code": "@@ -0,0 +1,21 @@\n+# pyright: reportPrivateUsage=false\n+\n+from __future__ import annotations\n+\n+from typing import Collection, overload\n+\n+from .._types import _ElementOrTree, _TagSelector\n+\n+@overload\n+def strip_elements(",
        "comment_created_at": "2024-07-08T21:55:38+00:00",
        "comment_author": "MthwRobinson",
        "comment_body": "\ud83d\udc4d - Sounds good! Just want to double check",
        "pr_file_module": null
      }
    ]
  }
]