[
  {
    "discussion_id": "1438913838",
    "pr_number": 2311,
    "pr_file": "requirements/base.in",
    "created_at": "2023-12-31T17:56:34+00:00",
    "commented_code": "-c \"constraints.in\"\n+backoff",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1438913838",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2311,
        "pr_file": "requirements/base.in",
        "discussion_id": "1438913838",
        "commented_code": "@@ -1,19 +1,20 @@\n -c \"constraints.in\"\n+backoff",
        "comment_created_at": "2023-12-31T17:56:34+00:00",
        "comment_author": "cragwolfe",
        "comment_body": "please do not make unrelated ordering changes, it obscures the diff. (if you feel strongly to reorder, it could be a standalone PR)",
        "pr_file_module": null
      },
      {
        "comment_id": "1439491623",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2311,
        "pr_file": "requirements/base.in",
        "discussion_id": "1438913838",
        "commented_code": "@@ -1,19 +1,20 @@\n -c \"constraints.in\"\n+backoff",
        "comment_created_at": "2024-01-02T14:20:02+00:00",
        "comment_author": "Coniferish",
        "comment_body": "Sounds good. I will drop that commit.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1535802813",
    "pr_number": 2680,
    "pr_file": "docs/source/core/chunking.rst",
    "created_at": "2024-03-22T15:48:42+00:00",
    "commented_code": "``combine_text_under_n_chars`` argument. This defaults to the same value as ``max_characters``\n   such that sequential small sections are combined to maximally fill the chunking window. Setting\n   this to ``0`` will disable section combining.\n+\n+\n+Recovering Chunk Elements\n+-------------------------\n+\n+In general, a chunk consolidates multiple document elements to maximally fill a chunk of the desired\n+size. Information is naturally lost in this consolidation, for example which element a passage of\n+text came from and certain metadata like page-number and coordinates which cannot always be resolved\n+to a single value.\n+\n+The original elements combined to make a chunk can be accessed using the `.metadata.orig_elements`\n+field on the chunk:\n+\n+.. code:: python\n+\n+    >>> elements = [\n+    ...     Title(\"Lorem Ipsum\"),\n+    ...     NarrativeText(\"Lorem ipsum dolor sit.\"),\n+    ... ]\n+    >>> chunk = chunk_elements(elements)[0]\n+    >>> print(chunk.text)\n+    'Lorem Ipsum\n\nLorem ipsum dolor sit.'\n+    >>> print(chunk.metadata.orig_elements)\n+    [Title(\"Lorem Ipsum\"), NarrativeText(\"Lorem ipsum dolor sit.\")]\n+\n+These elements will contain all their original metadata so can be used to access metadata that\n+cannot reliably be consolidated, for example:\n+\n+--code:: python\n+\n+    >>> {e.metadata.page_number for e in chunk.metadata.orig_elements}\n+    {2, 3}\n+\n+    >>> [e.metadata.coordinates for e in chunk.metadata.orig_elements]\n+    [<CoordinatesMetadata ...>, <CoordinatesMetadata ...>, ...]\n+\n+    >>> [\n+        e.metadata.image_path\n+        for e in chunk.metadata.orig_elements\n+        if e.metadata.image_path is not None\n+    ]\n+    ['/tmp/lorem.jpg', '/tmp/ipsum.png']",
    "repo_full_name": "Unstructured-IO/unstructured",
    "discussion_comments": [
      {
        "comment_id": "1535802813",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2680,
        "pr_file": "docs/source/core/chunking.rst",
        "discussion_id": "1535802813",
        "commented_code": "@@ -170,3 +170,45 @@ following behaviors:\n   ``combine_text_under_n_chars`` argument. This defaults to the same value as ``max_characters``\n   such that sequential small sections are combined to maximally fill the chunking window. Setting\n   this to ``0`` will disable section combining.\n+\n+\n+Recovering Chunk Elements\n+-------------------------\n+\n+In general, a chunk consolidates multiple document elements to maximally fill a chunk of the desired\n+size. Information is naturally lost in this consolidation, for example which element a passage of\n+text came from and certain metadata like page-number and coordinates which cannot always be resolved\n+to a single value.\n+\n+The original elements combined to make a chunk can be accessed using the `.metadata.orig_elements`\n+field on the chunk:\n+\n+.. code:: python\n+\n+    >>> elements = [\n+    ...     Title(\"Lorem Ipsum\"),\n+    ...     NarrativeText(\"Lorem ipsum dolor sit.\"),\n+    ... ]\n+    >>> chunk = chunk_elements(elements)[0]\n+    >>> print(chunk.text)\n+    'Lorem Ipsum\\n\\nLorem ipsum dolor sit.'\n+    >>> print(chunk.metadata.orig_elements)\n+    [Title(\"Lorem Ipsum\"), NarrativeText(\"Lorem ipsum dolor sit.\")]\n+\n+These elements will contain all their original metadata so can be used to access metadata that\n+cannot reliably be consolidated, for example:\n+\n+--code:: python\n+\n+    >>> {e.metadata.page_number for e in chunk.metadata.orig_elements}\n+    {2, 3}\n+\n+    >>> [e.metadata.coordinates for e in chunk.metadata.orig_elements]\n+    [<CoordinatesMetadata ...>, <CoordinatesMetadata ...>, ...]\n+\n+    >>> [\n+        e.metadata.image_path\n+        for e in chunk.metadata.orig_elements\n+        if e.metadata.image_path is not None\n+    ]\n+    ['/tmp/lorem.jpg', '/tmp/ipsum.png']",
        "comment_created_at": "2024-03-22T15:48:42+00:00",
        "comment_author": "Coniferish",
        "comment_body": "It looks like the formatting might be off for this last command, but that might only be in the git diff.",
        "pr_file_module": null
      },
      {
        "comment_id": "1535986704",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2680,
        "pr_file": "docs/source/core/chunking.rst",
        "discussion_id": "1535802813",
        "commented_code": "@@ -170,3 +170,45 @@ following behaviors:\n   ``combine_text_under_n_chars`` argument. This defaults to the same value as ``max_characters``\n   such that sequential small sections are combined to maximally fill the chunking window. Setting\n   this to ``0`` will disable section combining.\n+\n+\n+Recovering Chunk Elements\n+-------------------------\n+\n+In general, a chunk consolidates multiple document elements to maximally fill a chunk of the desired\n+size. Information is naturally lost in this consolidation, for example which element a passage of\n+text came from and certain metadata like page-number and coordinates which cannot always be resolved\n+to a single value.\n+\n+The original elements combined to make a chunk can be accessed using the `.metadata.orig_elements`\n+field on the chunk:\n+\n+.. code:: python\n+\n+    >>> elements = [\n+    ...     Title(\"Lorem Ipsum\"),\n+    ...     NarrativeText(\"Lorem ipsum dolor sit.\"),\n+    ... ]\n+    >>> chunk = chunk_elements(elements)[0]\n+    >>> print(chunk.text)\n+    'Lorem Ipsum\\n\\nLorem ipsum dolor sit.'\n+    >>> print(chunk.metadata.orig_elements)\n+    [Title(\"Lorem Ipsum\"), NarrativeText(\"Lorem ipsum dolor sit.\")]\n+\n+These elements will contain all their original metadata so can be used to access metadata that\n+cannot reliably be consolidated, for example:\n+\n+--code:: python\n+\n+    >>> {e.metadata.page_number for e in chunk.metadata.orig_elements}\n+    {2, 3}\n+\n+    >>> [e.metadata.coordinates for e in chunk.metadata.orig_elements]\n+    [<CoordinatesMetadata ...>, <CoordinatesMetadata ...>, ...]\n+\n+    >>> [\n+        e.metadata.image_path\n+        for e in chunk.metadata.orig_elements\n+        if e.metadata.image_path is not None\n+    ]\n+    ['/tmp/lorem.jpg', '/tmp/ipsum.png']",
        "comment_created_at": "2024-03-22T17:56:06+00:00",
        "comment_author": "scanny",
        "comment_body": "Hmm, probably tabs vs. spaces. I'll have a look :)",
        "pr_file_module": null
      },
      {
        "comment_id": "1536083550",
        "repo_full_name": "Unstructured-IO/unstructured",
        "pr_number": 2680,
        "pr_file": "docs/source/core/chunking.rst",
        "discussion_id": "1535802813",
        "commented_code": "@@ -170,3 +170,45 @@ following behaviors:\n   ``combine_text_under_n_chars`` argument. This defaults to the same value as ``max_characters``\n   such that sequential small sections are combined to maximally fill the chunking window. Setting\n   this to ``0`` will disable section combining.\n+\n+\n+Recovering Chunk Elements\n+-------------------------\n+\n+In general, a chunk consolidates multiple document elements to maximally fill a chunk of the desired\n+size. Information is naturally lost in this consolidation, for example which element a passage of\n+text came from and certain metadata like page-number and coordinates which cannot always be resolved\n+to a single value.\n+\n+The original elements combined to make a chunk can be accessed using the `.metadata.orig_elements`\n+field on the chunk:\n+\n+.. code:: python\n+\n+    >>> elements = [\n+    ...     Title(\"Lorem Ipsum\"),\n+    ...     NarrativeText(\"Lorem ipsum dolor sit.\"),\n+    ... ]\n+    >>> chunk = chunk_elements(elements)[0]\n+    >>> print(chunk.text)\n+    'Lorem Ipsum\\n\\nLorem ipsum dolor sit.'\n+    >>> print(chunk.metadata.orig_elements)\n+    [Title(\"Lorem Ipsum\"), NarrativeText(\"Lorem ipsum dolor sit.\")]\n+\n+These elements will contain all their original metadata so can be used to access metadata that\n+cannot reliably be consolidated, for example:\n+\n+--code:: python\n+\n+    >>> {e.metadata.page_number for e in chunk.metadata.orig_elements}\n+    {2, 3}\n+\n+    >>> [e.metadata.coordinates for e in chunk.metadata.orig_elements]\n+    [<CoordinatesMetadata ...>, <CoordinatesMetadata ...>, ...]\n+\n+    >>> [\n+        e.metadata.image_path\n+        for e in chunk.metadata.orig_elements\n+        if e.metadata.image_path is not None\n+    ]\n+    ['/tmp/lorem.jpg', '/tmp/ipsum.png']",
        "comment_created_at": "2024-03-22T19:22:20+00:00",
        "comment_author": "scanny",
        "comment_body": "Ah, okay, that last line is the _output_ of the command on the previous line(s), not a command itself. This format for the snippet with the \">>>\" prefix represents the Python REPL where commands are entered after \">>> \" and the output shows up on the next line (without the prefix).",
        "pr_file_module": null
      }
    ]
  }
]