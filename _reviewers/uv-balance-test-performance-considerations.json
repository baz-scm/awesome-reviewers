[
  {
    "discussion_id": "2098738224",
    "pr_number": 13312,
    "pr_file": "crates/uv/tests/it/python_install.rs",
    "created_at": "2025-05-20T19:46:02+00:00",
    "commented_code": "Caused by: An offline Python installation was requested, but cpython-3.12.10[DATE]-[PLATFORM].tar.gz) is missing in python-cache\n     \");\n }\n+\n+// A virtual environment should track the latest patch version installed.\n+#[test]\n+fn install_transparent_patch_upgrade_uv_venv() {\n+    let context = TestContext::new_with_versions(&[\"3.13\"])\n+        .with_filtered_python_keys()\n+        .with_filtered_exe_suffix()\n+        .with_managed_python_dirs()\n+        .with_filtered_python_names()\n+        .with_filtered_python_install_bin();\n+\n+    // Install a lower patch version.\n+    uv_snapshot!(context.filters(), context.python_install().arg(\"3.12.9\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Installed Python 3.12.9 in [TIME]\n+     + cpython-3.12.9-[PLATFORM]\n+    \"\n+    );\n+\n+    // Create a virtual environment.\n+    uv_snapshot!(context.filters(), context.venv().arg(\"-p\").arg(\"3.12\")\n+        .arg(context.venv.as_os_str()), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.9\n+    Creating virtual environment at: .venv\n+    Activate with: source .venv/[BIN]/activate\n+    \"\n+    );\n+\n+    uv_snapshot!(context.filters(), context.run().arg(\"python\").arg(\"--version\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.12.9\n+\n+    ----- stderr -----\n+    \"\n+    );\n+\n+    // Install a higher patch version.\n+    uv_snapshot!(context.filters(), context.python_install().arg(\"3.12.10\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Installed Python 3.12.10 in [TIME]\n+     + cpython-3.12.10-[PLATFORM]\n+    \"\n+    );\n+\n+    // Virtual environment should reflect higher version.\n+    uv_snapshot!(context.filters(), context.run().arg(\"python\").arg(\"--version\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.12.10\n+\n+    ----- stderr -----\n+    \"\n+    );\n+}\n+\n+// Installing a lower patch shouldn't downgrade virtual environments.\n+#[test]\n+fn install_lower_patch() {",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2098738224",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13312,
        "pr_file": "crates/uv/tests/it/python_install.rs",
        "discussion_id": "2098738224",
        "commented_code": "@@ -1380,3 +1381,583 @@ fn python_install_cached() {\n       Caused by: An offline Python installation was requested, but cpython-3.12.10[DATE]-[PLATFORM].tar.gz) is missing in python-cache\n     \");\n }\n+\n+// A virtual environment should track the latest patch version installed.\n+#[test]\n+fn install_transparent_patch_upgrade_uv_venv() {\n+    let context = TestContext::new_with_versions(&[\"3.13\"])\n+        .with_filtered_python_keys()\n+        .with_filtered_exe_suffix()\n+        .with_managed_python_dirs()\n+        .with_filtered_python_names()\n+        .with_filtered_python_install_bin();\n+\n+    // Install a lower patch version.\n+    uv_snapshot!(context.filters(), context.python_install().arg(\"3.12.9\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Installed Python 3.12.9 in [TIME]\n+     + cpython-3.12.9-[PLATFORM]\n+    \"\n+    );\n+\n+    // Create a virtual environment.\n+    uv_snapshot!(context.filters(), context.venv().arg(\"-p\").arg(\"3.12\")\n+        .arg(context.venv.as_os_str()), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.9\n+    Creating virtual environment at: .venv\n+    Activate with: source .venv/[BIN]/activate\n+    \"\n+    );\n+\n+    uv_snapshot!(context.filters(), context.run().arg(\"python\").arg(\"--version\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.12.9\n+\n+    ----- stderr -----\n+    \"\n+    );\n+\n+    // Install a higher patch version.\n+    uv_snapshot!(context.filters(), context.python_install().arg(\"3.12.10\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Installed Python 3.12.10 in [TIME]\n+     + cpython-3.12.10-[PLATFORM]\n+    \"\n+    );\n+\n+    // Virtual environment should reflect higher version.\n+    uv_snapshot!(context.filters(), context.run().arg(\"python\").arg(\"--version\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.12.10\n+\n+    ----- stderr -----\n+    \"\n+    );\n+}\n+\n+// Installing a lower patch shouldn't downgrade virtual environments.\n+#[test]\n+fn install_lower_patch() {",
        "comment_created_at": "2025-05-20T19:46:02+00:00",
        "comment_author": "konstin",
        "comment_body": "Can you merge this and the previous test? Usually I'm all for small tests, but Python downloads and installs are slow so reuse helps the test speed",
        "pr_file_module": null
      },
      {
        "comment_id": "2099870003",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13312,
        "pr_file": "crates/uv/tests/it/python_install.rs",
        "discussion_id": "2098738224",
        "commented_code": "@@ -1380,3 +1381,583 @@ fn python_install_cached() {\n       Caused by: An offline Python installation was requested, but cpython-3.12.10[DATE]-[PLATFORM].tar.gz) is missing in python-cache\n     \");\n }\n+\n+// A virtual environment should track the latest patch version installed.\n+#[test]\n+fn install_transparent_patch_upgrade_uv_venv() {\n+    let context = TestContext::new_with_versions(&[\"3.13\"])\n+        .with_filtered_python_keys()\n+        .with_filtered_exe_suffix()\n+        .with_managed_python_dirs()\n+        .with_filtered_python_names()\n+        .with_filtered_python_install_bin();\n+\n+    // Install a lower patch version.\n+    uv_snapshot!(context.filters(), context.python_install().arg(\"3.12.9\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Installed Python 3.12.9 in [TIME]\n+     + cpython-3.12.9-[PLATFORM]\n+    \"\n+    );\n+\n+    // Create a virtual environment.\n+    uv_snapshot!(context.filters(), context.venv().arg(\"-p\").arg(\"3.12\")\n+        .arg(context.venv.as_os_str()), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.9\n+    Creating virtual environment at: .venv\n+    Activate with: source .venv/[BIN]/activate\n+    \"\n+    );\n+\n+    uv_snapshot!(context.filters(), context.run().arg(\"python\").arg(\"--version\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.12.9\n+\n+    ----- stderr -----\n+    \"\n+    );\n+\n+    // Install a higher patch version.\n+    uv_snapshot!(context.filters(), context.python_install().arg(\"3.12.10\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Installed Python 3.12.10 in [TIME]\n+     + cpython-3.12.10-[PLATFORM]\n+    \"\n+    );\n+\n+    // Virtual environment should reflect higher version.\n+    uv_snapshot!(context.filters(), context.run().arg(\"python\").arg(\"--version\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.12.10\n+\n+    ----- stderr -----\n+    \"\n+    );\n+}\n+\n+// Installing a lower patch shouldn't downgrade virtual environments.\n+#[test]\n+fn install_lower_patch() {",
        "comment_created_at": "2025-05-21T09:53:58+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2070322034",
    "pr_number": 13251,
    "pr_file": "crates/uv/tests/it/version.rs",
    "created_at": "2025-05-01T14:16:51+00:00",
    "commented_code": ".chain([\n             (r#\"version\": \"\\d+.\\d+.\\d+\"\"#, r#\"version\": \"[VERSION]\"\"#),\n             (\n-                r#\"short_commit_hash\": \".*\"\"#,\n-                r#\"short_commit_hash\": \"[HASH]\"\"#,\n+                r#\"\"short_commit_hash\": \".*\"\"#,\n+                r#\"\"short_commit_hash\": \"[HASH]\"\"#,\n             ),\n-            (r#\"commit_hash\": \".*\"\"#, r#\"commit_hash\": \"[LONGHASH]\"\"#),\n-            (r#\"commit_date\": \".*\"\"#, r#\"commit_date\": \"[DATE]\"\"#),\n-            (r#\"last_tag\": (\".*\"|null)\"#, r#\"last_tag\": \"[TAG]\"\"#),\n+            (r#\"\"commit_hash\": \".*\"\"#, r#\"\"commit_hash\": \"[LONGHASH]\"\"#),\n+            (r#\"\"commit_date\": \".*\"\"#, r#\"\"commit_date\": \"[DATE]\"\"#),\n+            (r#\"\"last_tag\": (\".*\"|null)\"#, r#\"\"last_tag\": \"[TAG]\"\"#),\n             (\n-                r#\"commits_since_last_tag\": .*\"#,\n-                r#\"commits_since_last_tag\": [COUNT]\"#,\n+                r#\"\"commits_since_last_tag\": .*\"#,\n+                r#\"\"commits_since_last_tag\": [COUNT]\"#,\n+            ),\n+            // This last filter normalizes output for tarball builds of uv that lack commit info",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2070322034",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13251,
        "pr_file": "crates/uv/tests/it/version.rs",
        "discussion_id": "2070322034",
        "commented_code": "@@ -933,15 +933,26 @@ fn version_get_fallback_unmanaged_json() -> Result<()> {\n         .chain([\n             (r#\"version\": \"\\d+.\\d+.\\d+\"\"#, r#\"version\": \"[VERSION]\"\"#),\n             (\n-                r#\"short_commit_hash\": \".*\"\"#,\n-                r#\"short_commit_hash\": \"[HASH]\"\"#,\n+                r#\"\"short_commit_hash\": \".*\"\"#,\n+                r#\"\"short_commit_hash\": \"[HASH]\"\"#,\n             ),\n-            (r#\"commit_hash\": \".*\"\"#, r#\"commit_hash\": \"[LONGHASH]\"\"#),\n-            (r#\"commit_date\": \".*\"\"#, r#\"commit_date\": \"[DATE]\"\"#),\n-            (r#\"last_tag\": (\".*\"|null)\"#, r#\"last_tag\": \"[TAG]\"\"#),\n+            (r#\"\"commit_hash\": \".*\"\"#, r#\"\"commit_hash\": \"[LONGHASH]\"\"#),\n+            (r#\"\"commit_date\": \".*\"\"#, r#\"\"commit_date\": \"[DATE]\"\"#),\n+            (r#\"\"last_tag\": (\".*\"|null)\"#, r#\"\"last_tag\": \"[TAG]\"\"#),\n             (\n-                r#\"commits_since_last_tag\": .*\"#,\n-                r#\"commits_since_last_tag\": [COUNT]\"#,\n+                r#\"\"commits_since_last_tag\": .*\"#,\n+                r#\"\"commits_since_last_tag\": [COUNT]\"#,\n+            ),\n+            // This last filter normalizes output for tarball builds of uv that lack commit info",
        "comment_created_at": "2025-05-01T14:16:51+00:00",
        "comment_author": "zanieb",
        "comment_body": "Given this test won't really change a lot, should we just check if commit info is available and have two snapshots? Using filters this way makes me a bit uncomfortable.",
        "pr_file_module": null
      },
      {
        "comment_id": "2070360103",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13251,
        "pr_file": "crates/uv/tests/it/version.rs",
        "discussion_id": "2070322034",
        "commented_code": "@@ -933,15 +933,26 @@ fn version_get_fallback_unmanaged_json() -> Result<()> {\n         .chain([\n             (r#\"version\": \"\\d+.\\d+.\\d+\"\"#, r#\"version\": \"[VERSION]\"\"#),\n             (\n-                r#\"short_commit_hash\": \".*\"\"#,\n-                r#\"short_commit_hash\": \"[HASH]\"\"#,\n+                r#\"\"short_commit_hash\": \".*\"\"#,\n+                r#\"\"short_commit_hash\": \"[HASH]\"\"#,\n             ),\n-            (r#\"commit_hash\": \".*\"\"#, r#\"commit_hash\": \"[LONGHASH]\"\"#),\n-            (r#\"commit_date\": \".*\"\"#, r#\"commit_date\": \"[DATE]\"\"#),\n-            (r#\"last_tag\": (\".*\"|null)\"#, r#\"last_tag\": \"[TAG]\"\"#),\n+            (r#\"\"commit_hash\": \".*\"\"#, r#\"\"commit_hash\": \"[LONGHASH]\"\"#),\n+            (r#\"\"commit_date\": \".*\"\"#, r#\"\"commit_date\": \"[DATE]\"\"#),\n+            (r#\"\"last_tag\": (\".*\"|null)\"#, r#\"\"last_tag\": \"[TAG]\"\"#),\n             (\n-                r#\"commits_since_last_tag\": .*\"#,\n-                r#\"commits_since_last_tag\": [COUNT]\"#,\n+                r#\"\"commits_since_last_tag\": .*\"#,\n+                r#\"\"commits_since_last_tag\": [COUNT]\"#,\n+            ),\n+            // This last filter normalizes output for tarball builds of uv that lack commit info",
        "comment_created_at": "2025-05-01T14:47:26+00:00",
        "comment_author": "Gankra",
        "comment_body": "oh interesting, i never considered conditional snapshots! that's a great idea",
        "pr_file_module": null
      },
      {
        "comment_id": "2070562837",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13251,
        "pr_file": "crates/uv/tests/it/version.rs",
        "discussion_id": "2070322034",
        "commented_code": "@@ -933,15 +933,26 @@ fn version_get_fallback_unmanaged_json() -> Result<()> {\n         .chain([\n             (r#\"version\": \"\\d+.\\d+.\\d+\"\"#, r#\"version\": \"[VERSION]\"\"#),\n             (\n-                r#\"short_commit_hash\": \".*\"\"#,\n-                r#\"short_commit_hash\": \"[HASH]\"\"#,\n+                r#\"\"short_commit_hash\": \".*\"\"#,\n+                r#\"\"short_commit_hash\": \"[HASH]\"\"#,\n             ),\n-            (r#\"commit_hash\": \".*\"\"#, r#\"commit_hash\": \"[LONGHASH]\"\"#),\n-            (r#\"commit_date\": \".*\"\"#, r#\"commit_date\": \"[DATE]\"\"#),\n-            (r#\"last_tag\": (\".*\"|null)\"#, r#\"last_tag\": \"[TAG]\"\"#),\n+            (r#\"\"commit_hash\": \".*\"\"#, r#\"\"commit_hash\": \"[LONGHASH]\"\"#),\n+            (r#\"\"commit_date\": \".*\"\"#, r#\"\"commit_date\": \"[DATE]\"\"#),\n+            (r#\"\"last_tag\": (\".*\"|null)\"#, r#\"\"last_tag\": \"[TAG]\"\"#),\n             (\n-                r#\"commits_since_last_tag\": .*\"#,\n-                r#\"commits_since_last_tag\": [COUNT]\"#,\n+                r#\"\"commits_since_last_tag\": .*\"#,\n+                r#\"\"commits_since_last_tag\": [COUNT]\"#,\n+            ),\n+            // This last filter normalizes output for tarball builds of uv that lack commit info",
        "comment_created_at": "2025-05-01T17:34:47+00:00",
        "comment_author": "zanieb",
        "comment_body": "They're just annoying during snapshot updates, so I try to avoid them in most cases.",
        "pr_file_module": null
      },
      {
        "comment_id": "2070563551",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13251,
        "pr_file": "crates/uv/tests/it/version.rs",
        "discussion_id": "2070322034",
        "commented_code": "@@ -933,15 +933,26 @@ fn version_get_fallback_unmanaged_json() -> Result<()> {\n         .chain([\n             (r#\"version\": \"\\d+.\\d+.\\d+\"\"#, r#\"version\": \"[VERSION]\"\"#),\n             (\n-                r#\"short_commit_hash\": \".*\"\"#,\n-                r#\"short_commit_hash\": \"[HASH]\"\"#,\n+                r#\"\"short_commit_hash\": \".*\"\"#,\n+                r#\"\"short_commit_hash\": \"[HASH]\"\"#,\n             ),\n-            (r#\"commit_hash\": \".*\"\"#, r#\"commit_hash\": \"[LONGHASH]\"\"#),\n-            (r#\"commit_date\": \".*\"\"#, r#\"commit_date\": \"[DATE]\"\"#),\n-            (r#\"last_tag\": (\".*\"|null)\"#, r#\"last_tag\": \"[TAG]\"\"#),\n+            (r#\"\"commit_hash\": \".*\"\"#, r#\"\"commit_hash\": \"[LONGHASH]\"\"#),\n+            (r#\"\"commit_date\": \".*\"\"#, r#\"\"commit_date\": \"[DATE]\"\"#),\n+            (r#\"\"last_tag\": (\".*\"|null)\"#, r#\"\"last_tag\": \"[TAG]\"\"#),\n             (\n-                r#\"commits_since_last_tag\": .*\"#,\n-                r#\"commits_since_last_tag\": [COUNT]\"#,\n+                r#\"\"commits_since_last_tag\": .*\"#,\n+                r#\"\"commits_since_last_tag\": [COUNT]\"#,\n+            ),\n+            // This last filter normalizes output for tarball builds of uv that lack commit info",
        "comment_created_at": "2025-05-01T17:35:27+00:00",
        "comment_author": "zanieb",
        "comment_body": "but if the filter is replacing basically the entire expected output, I'd either just skip the test or have a conditional.",
        "pr_file_module": null
      },
      {
        "comment_id": "2099597361",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13251,
        "pr_file": "crates/uv/tests/it/version.rs",
        "discussion_id": "2070322034",
        "commented_code": "@@ -933,15 +933,26 @@ fn version_get_fallback_unmanaged_json() -> Result<()> {\n         .chain([\n             (r#\"version\": \"\\d+.\\d+.\\d+\"\"#, r#\"version\": \"[VERSION]\"\"#),\n             (\n-                r#\"short_commit_hash\": \".*\"\"#,\n-                r#\"short_commit_hash\": \"[HASH]\"\"#,\n+                r#\"\"short_commit_hash\": \".*\"\"#,\n+                r#\"\"short_commit_hash\": \"[HASH]\"\"#,\n             ),\n-            (r#\"commit_hash\": \".*\"\"#, r#\"commit_hash\": \"[LONGHASH]\"\"#),\n-            (r#\"commit_date\": \".*\"\"#, r#\"commit_date\": \"[DATE]\"\"#),\n-            (r#\"last_tag\": (\".*\"|null)\"#, r#\"last_tag\": \"[TAG]\"\"#),\n+            (r#\"\"commit_hash\": \".*\"\"#, r#\"\"commit_hash\": \"[LONGHASH]\"\"#),\n+            (r#\"\"commit_date\": \".*\"\"#, r#\"\"commit_date\": \"[DATE]\"\"#),\n+            (r#\"\"last_tag\": (\".*\"|null)\"#, r#\"\"last_tag\": \"[TAG]\"\"#),\n             (\n-                r#\"commits_since_last_tag\": .*\"#,\n-                r#\"commits_since_last_tag\": [COUNT]\"#,\n+                r#\"\"commits_since_last_tag\": .*\"#,\n+                r#\"\"commits_since_last_tag\": [COUNT]\"#,\n+            ),\n+            // This last filter normalizes output for tarball builds of uv that lack commit info",
        "comment_created_at": "2025-05-21T07:44:18+00:00",
        "comment_author": "mgorny",
        "comment_body": "I've filed #13566 doing that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2111511544",
    "pr_number": 13583,
    "pr_file": "crates/uv/tests/it/tool_run.rs",
    "created_at": "2025-05-28T10:29:21+00:00",
    "commented_code": "Audited in [TIME]\n     \"###);\n \n+    // The @ is optional.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"python3.11\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // Dotless syntax also works.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"python311\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // Other implementations like PyPy also work. PyPy isn't currently in the test suite, so\n+    // specify CPython and rely on the fact that they go through the same codepath.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"cpython311\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // But short names don't work in the executable position (as opposed to with -p/--python). We\n+    // interpret those as package names.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"cp311\")\n+        .arg(\"--version\"), @r\"\n+    success: false\n+    exit_code: 1\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+      × No solution found when resolving tool dependencies:\n+      ╰─▶ Because cp311 was not found in the package registry and you require cp311, we can conclude that your requirements are unsatisfiable.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2111511544",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13583,
        "pr_file": "crates/uv/tests/it/tool_run.rs",
        "discussion_id": "2111511544",
        "commented_code": "@@ -1889,6 +1889,73 @@ fn tool_run_python_at_version() {\n     Audited in [TIME]\n     \"###);\n \n+    // The @ is optional.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"python3.11\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // Dotless syntax also works.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"python311\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // Other implementations like PyPy also work. PyPy isn't currently in the test suite, so\n+    // specify CPython and rely on the fact that they go through the same codepath.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"cpython311\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // But short names don't work in the executable position (as opposed to with -p/--python). We\n+    // interpret those as package names.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"cp311\")\n+        .arg(\"--version\"), @r\"\n+    success: false\n+    exit_code: 1\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+      × No solution found when resolving tool dependencies:\n+      ╰─▶ Because cp311 was not found in the package registry and you require cp311, we can conclude that your requirements are unsatisfiable.",
        "comment_created_at": "2025-05-28T10:29:21+00:00",
        "comment_author": "konstin",
        "comment_body": "Does this snapshot break when someone publishes `cp311` to PyPI?",
        "pr_file_module": null
      },
      {
        "comment_id": "2111872240",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13583,
        "pr_file": "crates/uv/tests/it/tool_run.rs",
        "discussion_id": "2111511544",
        "commented_code": "@@ -1889,6 +1889,73 @@ fn tool_run_python_at_version() {\n     Audited in [TIME]\n     \"###);\n \n+    // The @ is optional.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"python3.11\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // Dotless syntax also works.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"python311\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // Other implementations like PyPy also work. PyPy isn't currently in the test suite, so\n+    // specify CPython and rely on the fact that they go through the same codepath.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"cpython311\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // But short names don't work in the executable position (as opposed to with -p/--python). We\n+    // interpret those as package names.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"cp311\")\n+        .arg(\"--version\"), @r\"\n+    success: false\n+    exit_code: 1\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+      × No solution found when resolving tool dependencies:\n+      ╰─▶ Because cp311 was not found in the package registry and you require cp311, we can conclude that your requirements are unsatisfiable.",
        "comment_created_at": "2025-05-28T13:17:30+00:00",
        "comment_author": "zanieb",
        "comment_body": "Yes, but we should squat or advocate for those names to be banned.",
        "pr_file_module": null
      },
      {
        "comment_id": "2112175425",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13583,
        "pr_file": "crates/uv/tests/it/tool_run.rs",
        "discussion_id": "2111511544",
        "commented_code": "@@ -1889,6 +1889,73 @@ fn tool_run_python_at_version() {\n     Audited in [TIME]\n     \"###);\n \n+    // The @ is optional.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"python3.11\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // Dotless syntax also works.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"python311\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // Other implementations like PyPy also work. PyPy isn't currently in the test suite, so\n+    // specify CPython and rely on the fact that they go through the same codepath.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"cpython311\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // But short names don't work in the executable position (as opposed to with -p/--python). We\n+    // interpret those as package names.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"cp311\")\n+        .arg(\"--version\"), @r\"\n+    success: false\n+    exit_code: 1\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+      × No solution found when resolving tool dependencies:\n+      ╰─▶ Because cp311 was not found in the package registry and you require cp311, we can conclude that your requirements are unsatisfiable.",
        "comment_created_at": "2025-05-28T15:19:18+00:00",
        "comment_author": "oconnor663",
        "comment_body": "This is my first time using snapshot testing, so a broad philosophy question: How do we feel about \"brittleness\" in snapshots? Is it just as bad as brittleness in regular tests, or is it more acceptable?",
        "pr_file_module": null
      },
      {
        "comment_id": "2112601682",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13583,
        "pr_file": "crates/uv/tests/it/tool_run.rs",
        "discussion_id": "2111511544",
        "commented_code": "@@ -1889,6 +1889,73 @@ fn tool_run_python_at_version() {\n     Audited in [TIME]\n     \"###);\n \n+    // The @ is optional.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"python3.11\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // Dotless syntax also works.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"python311\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // Other implementations like PyPy also work. PyPy isn't currently in the test suite, so\n+    // specify CPython and rely on the fact that they go through the same codepath.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"cpython311\")\n+        .arg(\"--version\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+    Python 3.11.[X]\n+\n+    ----- stderr -----\n+    Resolved in [TIME]\n+    \"###);\n+\n+    // But short names don't work in the executable position (as opposed to with -p/--python). We\n+    // interpret those as package names.\n+    uv_snapshot!(context.filters(), context.tool_run()\n+        .arg(\"cp311\")\n+        .arg(\"--version\"), @r\"\n+    success: false\n+    exit_code: 1\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+      × No solution found when resolving tool dependencies:\n+      ╰─▶ Because cp311 was not found in the package registry and you require cp311, we can conclude that your requirements are unsatisfiable.",
        "comment_created_at": "2025-05-28T19:25:26+00:00",
        "comment_author": "zanieb",
        "comment_body": "It's just as bad, really. We try to make them reproducible wherever possible. That's mostly w.r.t. the external world though, internal changes causing snapshot changes are fine.\r\n\r\nHowever, I think this specific case is fine.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2028852268",
    "pr_number": 12049,
    "pr_file": "crates/uv/tests/it/python_find.rs",
    "created_at": "2025-04-04T13:49:36+00:00",
    "commented_code": "----- stderr -----\n         \"###);\n     }\n+\n+    // If we query from outside the project, but specify the project via the --project flag, we find the executable in the project's virtual environment\n+    #[cfg(not(windows))]\n+    {\n+        let child_dir = context.temp_dir.child(\"child-project\");\n+        child_dir.create_dir_all().unwrap();\n+        let pyproject_toml = child_dir.child(\"pyproject.toml\");\n+        pyproject_toml\n+            .write_str(indoc! {r#\"\n+        [project]\n+        name = \"child-project\"\n+        version = \"0.1.0\"\n+        requires-python = \">=3.11\"\n+        dependencies = [\"anyio==3.7.0\"]\n+    \"#})\n+            .unwrap();\n+        uv_snapshot!(context.filters(), context.venv().current_dir(child_dir).arg(\"-q\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    \"###);",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2028852268",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12049,
        "pr_file": "crates/uv/tests/it/python_find.rs",
        "discussion_id": "2028852268",
        "commented_code": "@@ -532,6 +532,38 @@ fn python_find_venv() {\n         ----- stderr -----\n         \"###);\n     }\n+\n+    // If we query from outside the project, but specify the project via the --project flag, we find the executable in the project's virtual environment\n+    #[cfg(not(windows))]\n+    {\n+        let child_dir = context.temp_dir.child(\"child-project\");\n+        child_dir.create_dir_all().unwrap();\n+        let pyproject_toml = child_dir.child(\"pyproject.toml\");\n+        pyproject_toml\n+            .write_str(indoc! {r#\"\n+        [project]\n+        name = \"child-project\"\n+        version = \"0.1.0\"\n+        requires-python = \">=3.11\"\n+        dependencies = [\"anyio==3.7.0\"]\n+    \"#})\n+            .unwrap();\n+        uv_snapshot!(context.filters(), context.venv().current_dir(child_dir).arg(\"-q\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    \"###);",
        "comment_created_at": "2025-04-04T13:49:36+00:00",
        "comment_author": "zanieb",
        "comment_body": "You can use `.assert().success();` instead to avoid an empty snapshot.\r\n\r\nWe should test `python find --project` _before_ creating the virtual environment. In that case, we should ensure we're respecting the `requires-python` range from the child `pyproject.toml`.\r\n\r\nThen, we should test with a virtual environment.\r\n\r\nThen, we should also test we respect the `--project` root for `.python-version` file discovery too.",
        "pr_file_module": null
      },
      {
        "comment_id": "2034351379",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12049,
        "pr_file": "crates/uv/tests/it/python_find.rs",
        "discussion_id": "2028852268",
        "commented_code": "@@ -532,6 +532,38 @@ fn python_find_venv() {\n         ----- stderr -----\n         \"###);\n     }\n+\n+    // If we query from outside the project, but specify the project via the --project flag, we find the executable in the project's virtual environment\n+    #[cfg(not(windows))]\n+    {\n+        let child_dir = context.temp_dir.child(\"child-project\");\n+        child_dir.create_dir_all().unwrap();\n+        let pyproject_toml = child_dir.child(\"pyproject.toml\");\n+        pyproject_toml\n+            .write_str(indoc! {r#\"\n+        [project]\n+        name = \"child-project\"\n+        version = \"0.1.0\"\n+        requires-python = \">=3.11\"\n+        dependencies = [\"anyio==3.7.0\"]\n+    \"#})\n+            .unwrap();\n+        uv_snapshot!(context.filters(), context.venv().current_dir(child_dir).arg(\"-q\"), @r###\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    \"###);",
        "comment_created_at": "2025-04-09T02:44:17+00:00",
        "comment_author": "thejchap",
        "comment_body": "@zanieb i think i covered all the test cases - lmk if i misinterpreted something. also was getting a diff between windows and unix on [this assertion](https://github.com/astral-sh/uv/actions/runs/14347400247/job/40219696086?pr=12049#step:10:2515) which i mitigated with `.with_filtered_python_sources()` as i don't think that particular diff matters for this test - but lmk if thats incorrect\r\n\r\n<img width=\"874\" alt=\"Screenshot 2025-04-08 at 22 41 10\" src=\"https://github.com/user-attachments/assets/41568fde-27c1-4166-aa61-72a4f98df7bf\" />",
        "pr_file_module": null
      }
    ]
  }
]