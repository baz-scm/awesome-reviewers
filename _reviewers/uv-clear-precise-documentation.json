[
  {
    "discussion_id": "2034080908",
    "pr_number": 12763,
    "pr_file": "crates/uv-cli/src/lib.rs",
    "created_at": "2025-04-08T21:46:19+00:00",
    "commented_code": "#[arg(long)]\n     pub with_editable: Vec<comma::CommaSeparatedRequirements>,\n \n-    /// Run with all packages listed in the given `requirements.txt` files.\n+    /// Run with all packages listed in the given `requirements.txt` files or PEP 723 Python\n+    /// scripts.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2034080908",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12763,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2034080908",
        "commented_code": "@@ -4081,7 +4081,8 @@ pub struct ToolRunArgs {\n     #[arg(long)]\n     pub with_editable: Vec<comma::CommaSeparatedRequirements>,\n \n-    /// Run with all packages listed in the given `requirements.txt` files.\n+    /// Run with all packages listed in the given `requirements.txt` files or PEP 723 Python\n+    /// scripts.",
        "comment_created_at": "2025-04-08T21:46:19+00:00",
        "comment_author": "zanieb",
        "comment_body": "I'm not sure how we'll want to reframe the documentation here.\r\n\r\nMaybe we want something like..\r\n\r\n> Run with all packages listed in the given requirements files.\r\n>\r\n> The following formats are accepted:\r\n>\r\n> - `requirements.txt`-formatted files\r\n> - `pyproject.toml`\r\n> - `setup.cfg` and `setup.py`\r\n> - `.py` files with PEP 723 metadata\r\n\r\nI'm not sure if we want to enumerate those everywhere? Are they all supported everywhere?",
        "pr_file_module": null
      },
      {
        "comment_id": "2035311821",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12763,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2034080908",
        "commented_code": "@@ -4081,7 +4081,8 @@ pub struct ToolRunArgs {\n     #[arg(long)]\n     pub with_editable: Vec<comma::CommaSeparatedRequirements>,\n \n-    /// Run with all packages listed in the given `requirements.txt` files.\n+    /// Run with all packages listed in the given `requirements.txt` files or PEP 723 Python\n+    /// scripts.",
        "comment_created_at": "2025-04-09T12:55:24+00:00",
        "comment_author": "blueraft",
        "comment_body": "This is the help text for `uv pip install -r`, where `pyproject.toml` is also supported\r\n\r\n```bash\r\n  -r, --requirements <REQUIREMENTS>            Install all packages listed in the given `requirements.txt` files\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2035386079",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12763,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2034080908",
        "commented_code": "@@ -4081,7 +4081,8 @@ pub struct ToolRunArgs {\n     #[arg(long)]\n     pub with_editable: Vec<comma::CommaSeparatedRequirements>,\n \n-    /// Run with all packages listed in the given `requirements.txt` files.\n+    /// Run with all packages listed in the given `requirements.txt` files or PEP 723 Python\n+    /// scripts.",
        "comment_created_at": "2025-04-09T13:32:15+00:00",
        "comment_author": "zanieb",
        "comment_body": "Looks outdated :) we can probably update those holistically separately if you prefer.",
        "pr_file_module": null
      },
      {
        "comment_id": "2035414588",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12763,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2034080908",
        "commented_code": "@@ -4081,7 +4081,8 @@ pub struct ToolRunArgs {\n     #[arg(long)]\n     pub with_editable: Vec<comma::CommaSeparatedRequirements>,\n \n-    /// Run with all packages listed in the given `requirements.txt` files.\n+    /// Run with all packages listed in the given `requirements.txt` files or PEP 723 Python\n+    /// scripts.",
        "comment_created_at": "2025-04-09T13:46:01+00:00",
        "comment_author": "blueraft",
        "comment_body": "yeah I can make a separate PR for that!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2110433074",
    "pr_number": 13312,
    "pr_file": "crates/uv-cli/src/lib.rs",
    "created_at": "2025-05-27T22:44:35+00:00",
    "commented_code": "pub default: bool,\n }\n \n+#[derive(Args)]\n+#[allow(clippy::struct_excessive_bools)]\n+pub struct PythonUpgradeArgs {\n+    /// The directory to store the Python installation in.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2110433074",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13312,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2110433074",
        "commented_code": "@@ -4908,6 +4918,74 @@ pub struct PythonInstallArgs {\n     pub default: bool,\n }\n \n+#[derive(Args)]\n+#[allow(clippy::struct_excessive_bools)]\n+pub struct PythonUpgradeArgs {\n+    /// The directory to store the Python installation in.",
        "comment_created_at": "2025-05-27T22:44:35+00:00",
        "comment_author": "zanieb",
        "comment_body": "During upgrade, this is the directory to look for installations in, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "2111710426",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13312,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2110433074",
        "commented_code": "@@ -4908,6 +4918,74 @@ pub struct PythonInstallArgs {\n     pub default: bool,\n }\n \n+#[derive(Args)]\n+#[allow(clippy::struct_excessive_bools)]\n+pub struct PythonUpgradeArgs {\n+    /// The directory to store the Python installation in.",
        "comment_created_at": "2025-05-28T12:21:01+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Yes",
        "pr_file_module": null
      },
      {
        "comment_id": "2112038156",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13312,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2110433074",
        "commented_code": "@@ -4908,6 +4918,74 @@ pub struct PythonInstallArgs {\n     pub default: bool,\n }\n \n+#[derive(Args)]\n+#[allow(clippy::struct_excessive_bools)]\n+pub struct PythonUpgradeArgs {\n+    /// The directory to store the Python installation in.",
        "comment_created_at": "2025-05-28T14:16:51+00:00",
        "comment_author": "zanieb",
        "comment_body": "Should we change the doc then?",
        "pr_file_module": null
      },
      {
        "comment_id": "2112063717",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13312,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2110433074",
        "commented_code": "@@ -4908,6 +4918,74 @@ pub struct PythonInstallArgs {\n     pub default: bool,\n }\n \n+#[derive(Args)]\n+#[allow(clippy::struct_excessive_bools)]\n+pub struct PythonUpgradeArgs {\n+    /// The directory to store the Python installation in.",
        "comment_created_at": "2025-05-28T14:28:19+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "I can change it to `The directory to discover and store Python installations in.` It's also the directory upgrade will install to.",
        "pr_file_module": null
      },
      {
        "comment_id": "2112179366",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13312,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2110433074",
        "commented_code": "@@ -4908,6 +4918,74 @@ pub struct PythonInstallArgs {\n     pub default: bool,\n }\n \n+#[derive(Args)]\n+#[allow(clippy::struct_excessive_bools)]\n+pub struct PythonUpgradeArgs {\n+    /// The directory to store the Python installation in.",
        "comment_created_at": "2025-05-28T15:21:15+00:00",
        "comment_author": "zanieb",
        "comment_body": "Perhaps \"The directory Python installations are stored in\"?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2112138901",
    "pr_number": 13312,
    "pr_file": "crates/uv-cli/src/lib.rs",
    "created_at": "2025-05-28T15:01:34+00:00",
    "commented_code": "/// See `uv help python` to view supported request formats.\n     Install(PythonInstallArgs),\n \n+    /// Upgrade installed Python versions to the latest supported patch release.\n+    ///\n+    /// A target Python minor version to upgrade may be provided, e.g., `3.13`. Multiple versions\n+    /// may be provided to perform more than one upgrade.\n+    ///\n+    /// If no target version is provided, then uv will upgrade all managed CPython versions.\n+    ///\n+    /// Upgrades will not remove lower installed patch versions.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2112138901",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13312,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2112138901",
        "commented_code": "@@ -4721,6 +4721,23 @@ pub enum PythonCommand {\n     /// See `uv help python` to view supported request formats.\n     Install(PythonInstallArgs),\n \n+    /// Upgrade installed Python versions to the latest supported patch release.\n+    ///\n+    /// A target Python minor version to upgrade may be provided, e.g., `3.13`. Multiple versions\n+    /// may be provided to perform more than one upgrade.\n+    ///\n+    /// If no target version is provided, then uv will upgrade all managed CPython versions.\n+    ///\n+    /// Upgrades will not remove lower installed patch versions.",
        "comment_created_at": "2025-05-28T15:01:34+00:00",
        "comment_author": "zanieb",
        "comment_body": "I think this is kind of confusing as written\r\n\r\n```suggestion\r\n    /// During an upgrade, uv will not uninstall outdated patch versions.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2111616652",
    "pr_number": 13689,
    "pr_file": "crates/uv/src/commands/project/sync.rs",
    "created_at": "2025-05-28T11:29:33+00:00",
    "commented_code": "}\n     }\n }\n+\n+/// A report of a project's state and updates to make.\n+#[derive(Debug, Serialize)]\n+struct ProjectReport {\n+    /// The project directory path.\n+    project_dir: PathBuf,\n+    /// The environment details, including path and action.\n+    sync: Option<SyncReport>,\n+    // Lockfile details, including path and actions taken\n+    lock: Option<LockReport>,\n+}\n+\n+/// The kind of environment this is\n+#[derive(Debug, Serialize)]\n+#[serde(rename_all = \"snake_case\")]\n+enum EnvKind {\n+    /// An environment for a project\n+    Project,\n+    /// An environment for a script\n+    Script,\n+}\n+\n+/// Represents the lockfile details during a dry run.\n+///\n+/// this struct captures the path to the lockfile and action\n+/// that would be taken on it.\n+#[derive(Debug, Serialize)]\n+struct LockReport {\n+    /// The path to the lockfile\n+    lock_path: PathBuf,\n+    /// The action to perform on the lockfile\n+    action: LockAction,\n+    /// Whether this is a dry run\n+    dry: bool,\n+}\n+\n+/// Represents the action taken during a dry run.\n+///\n+/// this struct describe the simulated action applied to a\n+/// resource (environment, lockfile, package)\n+#[derive(Serialize, Debug)]\n+#[serde(rename_all = \"snake_case\")]\n+enum SyncAction {\n+    /// No changes are needed.\n+    AlreadyExist,\n+    /// The environment would be replaced.\n+    Replace,\n+    /// Create a new environment.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2111616652",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13689,
        "pr_file": "crates/uv/src/commands/project/sync.rs",
        "discussion_id": "2111616652",
        "commented_code": "@@ -881,3 +900,270 @@ fn store_credentials_from_target(target: InstallTarget<'_>) {\n         }\n     }\n }\n+\n+/// A report of a project's state and updates to make.\n+#[derive(Debug, Serialize)]\n+struct ProjectReport {\n+    /// The project directory path.\n+    project_dir: PathBuf,\n+    /// The environment details, including path and action.\n+    sync: Option<SyncReport>,\n+    // Lockfile details, including path and actions taken\n+    lock: Option<LockReport>,\n+}\n+\n+/// The kind of environment this is\n+#[derive(Debug, Serialize)]\n+#[serde(rename_all = \"snake_case\")]\n+enum EnvKind {\n+    /// An environment for a project\n+    Project,\n+    /// An environment for a script\n+    Script,\n+}\n+\n+/// Represents the lockfile details during a dry run.\n+///\n+/// this struct captures the path to the lockfile and action\n+/// that would be taken on it.\n+#[derive(Debug, Serialize)]\n+struct LockReport {\n+    /// The path to the lockfile\n+    lock_path: PathBuf,\n+    /// The action to perform on the lockfile\n+    action: LockAction,\n+    /// Whether this is a dry run\n+    dry: bool,\n+}\n+\n+/// Represents the action taken during a dry run.\n+///\n+/// this struct describe the simulated action applied to a\n+/// resource (environment, lockfile, package)\n+#[derive(Serialize, Debug)]\n+#[serde(rename_all = \"snake_case\")]\n+enum SyncAction {\n+    /// No changes are needed.\n+    AlreadyExist,\n+    /// The environment would be replaced.\n+    Replace,\n+    /// Create a new environment.",
        "comment_created_at": "2025-05-28T11:29:33+00:00",
        "comment_author": "konstin",
        "comment_body": "Should that be past tense?",
        "pr_file_module": null
      },
      {
        "comment_id": "2112539783",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13689,
        "pr_file": "crates/uv/src/commands/project/sync.rs",
        "discussion_id": "2111616652",
        "commented_code": "@@ -881,3 +900,270 @@ fn store_credentials_from_target(target: InstallTarget<'_>) {\n         }\n     }\n }\n+\n+/// A report of a project's state and updates to make.\n+#[derive(Debug, Serialize)]\n+struct ProjectReport {\n+    /// The project directory path.\n+    project_dir: PathBuf,\n+    /// The environment details, including path and action.\n+    sync: Option<SyncReport>,\n+    // Lockfile details, including path and actions taken\n+    lock: Option<LockReport>,\n+}\n+\n+/// The kind of environment this is\n+#[derive(Debug, Serialize)]\n+#[serde(rename_all = \"snake_case\")]\n+enum EnvKind {\n+    /// An environment for a project\n+    Project,\n+    /// An environment for a script\n+    Script,\n+}\n+\n+/// Represents the lockfile details during a dry run.\n+///\n+/// this struct captures the path to the lockfile and action\n+/// that would be taken on it.\n+#[derive(Debug, Serialize)]\n+struct LockReport {\n+    /// The path to the lockfile\n+    lock_path: PathBuf,\n+    /// The action to perform on the lockfile\n+    action: LockAction,\n+    /// Whether this is a dry run\n+    dry: bool,\n+}\n+\n+/// Represents the action taken during a dry run.\n+///\n+/// this struct describe the simulated action applied to a\n+/// resource (environment, lockfile, package)\n+#[derive(Serialize, Debug)]\n+#[serde(rename_all = \"snake_case\")]\n+enum SyncAction {\n+    /// No changes are needed.\n+    AlreadyExist,\n+    /// The environment would be replaced.\n+    Replace,\n+    /// Create a new environment.",
        "comment_created_at": "2025-05-28T18:46:22+00:00",
        "comment_author": "Gankra",
        "comment_body": "It's odd because it's past-tense in normal runs and future-tense/hypothetical in --dry-run.",
        "pr_file_module": null
      },
      {
        "comment_id": "2115410683",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13689,
        "pr_file": "crates/uv/src/commands/project/sync.rs",
        "discussion_id": "2111616652",
        "commented_code": "@@ -881,3 +900,270 @@ fn store_credentials_from_target(target: InstallTarget<'_>) {\n         }\n     }\n }\n+\n+/// A report of a project's state and updates to make.\n+#[derive(Debug, Serialize)]\n+struct ProjectReport {\n+    /// The project directory path.\n+    project_dir: PathBuf,\n+    /// The environment details, including path and action.\n+    sync: Option<SyncReport>,\n+    // Lockfile details, including path and actions taken\n+    lock: Option<LockReport>,\n+}\n+\n+/// The kind of environment this is\n+#[derive(Debug, Serialize)]\n+#[serde(rename_all = \"snake_case\")]\n+enum EnvKind {\n+    /// An environment for a project\n+    Project,\n+    /// An environment for a script\n+    Script,\n+}\n+\n+/// Represents the lockfile details during a dry run.\n+///\n+/// this struct captures the path to the lockfile and action\n+/// that would be taken on it.\n+#[derive(Debug, Serialize)]\n+struct LockReport {\n+    /// The path to the lockfile\n+    lock_path: PathBuf,\n+    /// The action to perform on the lockfile\n+    action: LockAction,\n+    /// Whether this is a dry run\n+    dry: bool,\n+}\n+\n+/// Represents the action taken during a dry run.\n+///\n+/// this struct describe the simulated action applied to a\n+/// resource (environment, lockfile, package)\n+#[derive(Serialize, Debug)]\n+#[serde(rename_all = \"snake_case\")]\n+enum SyncAction {\n+    /// No changes are needed.\n+    AlreadyExist,\n+    /// The environment would be replaced.\n+    Replace,\n+    /// Create a new environment.",
        "comment_created_at": "2025-05-30T08:36:24+00:00",
        "comment_author": "konstin",
        "comment_body": "We should have consistent grammar between e.g. `The environment would be updated.` and `Create a new environment.` (indicative vs conditional) (unless I've missed something and we are always creating but the update is not done in a dry run?)",
        "pr_file_module": null
      },
      {
        "comment_id": "2122286012",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13689,
        "pr_file": "crates/uv/src/commands/project/sync.rs",
        "discussion_id": "2111616652",
        "commented_code": "@@ -881,3 +900,270 @@ fn store_credentials_from_target(target: InstallTarget<'_>) {\n         }\n     }\n }\n+\n+/// A report of a project's state and updates to make.\n+#[derive(Debug, Serialize)]\n+struct ProjectReport {\n+    /// The project directory path.\n+    project_dir: PathBuf,\n+    /// The environment details, including path and action.\n+    sync: Option<SyncReport>,\n+    // Lockfile details, including path and actions taken\n+    lock: Option<LockReport>,\n+}\n+\n+/// The kind of environment this is\n+#[derive(Debug, Serialize)]\n+#[serde(rename_all = \"snake_case\")]\n+enum EnvKind {\n+    /// An environment for a project\n+    Project,\n+    /// An environment for a script\n+    Script,\n+}\n+\n+/// Represents the lockfile details during a dry run.\n+///\n+/// this struct captures the path to the lockfile and action\n+/// that would be taken on it.\n+#[derive(Debug, Serialize)]\n+struct LockReport {\n+    /// The path to the lockfile\n+    lock_path: PathBuf,\n+    /// The action to perform on the lockfile\n+    action: LockAction,\n+    /// Whether this is a dry run\n+    dry: bool,\n+}\n+\n+/// Represents the action taken during a dry run.\n+///\n+/// this struct describe the simulated action applied to a\n+/// resource (environment, lockfile, package)\n+#[derive(Serialize, Debug)]\n+#[serde(rename_all = \"snake_case\")]\n+enum SyncAction {\n+    /// No changes are needed.\n+    AlreadyExist,\n+    /// The environment would be replaced.\n+    Replace,\n+    /// Create a new environment.",
        "comment_created_at": "2025-06-02T22:43:56+00:00",
        "comment_author": "zanieb",
        "comment_body": "This is my first instinct\r\n\r\n```\r\n/// The environment was checked and required no updates.\r\n/// The environment was updated.\r\n/// A new environment was created.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2122287346",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13689,
        "pr_file": "crates/uv/src/commands/project/sync.rs",
        "discussion_id": "2111616652",
        "commented_code": "@@ -881,3 +900,270 @@ fn store_credentials_from_target(target: InstallTarget<'_>) {\n         }\n     }\n }\n+\n+/// A report of a project's state and updates to make.\n+#[derive(Debug, Serialize)]\n+struct ProjectReport {\n+    /// The project directory path.\n+    project_dir: PathBuf,\n+    /// The environment details, including path and action.\n+    sync: Option<SyncReport>,\n+    // Lockfile details, including path and actions taken\n+    lock: Option<LockReport>,\n+}\n+\n+/// The kind of environment this is\n+#[derive(Debug, Serialize)]\n+#[serde(rename_all = \"snake_case\")]\n+enum EnvKind {\n+    /// An environment for a project\n+    Project,\n+    /// An environment for a script\n+    Script,\n+}\n+\n+/// Represents the lockfile details during a dry run.\n+///\n+/// this struct captures the path to the lockfile and action\n+/// that would be taken on it.\n+#[derive(Debug, Serialize)]\n+struct LockReport {\n+    /// The path to the lockfile\n+    lock_path: PathBuf,\n+    /// The action to perform on the lockfile\n+    action: LockAction,\n+    /// Whether this is a dry run\n+    dry: bool,\n+}\n+\n+/// Represents the action taken during a dry run.\n+///\n+/// this struct describe the simulated action applied to a\n+/// resource (environment, lockfile, package)\n+#[derive(Serialize, Debug)]\n+#[serde(rename_all = \"snake_case\")]\n+enum SyncAction {\n+    /// No changes are needed.\n+    AlreadyExist,\n+    /// The environment would be replaced.\n+    Replace,\n+    /// Create a new environment.",
        "comment_created_at": "2025-06-02T22:45:40+00:00",
        "comment_author": "zanieb",
        "comment_body": "I think I agree these should all be past-tense? Dry-run fills in the blank \"The environment would be ___\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2111628980",
    "pr_number": 13689,
    "pr_file": "crates/uv/src/commands/project/sync.rs",
    "created_at": "2025-05-28T11:37:13+00:00",
    "commented_code": "}\n     }\n }\n+\n+/// A report of a project's state and updates to make.\n+#[derive(Debug, Serialize)]\n+struct ProjectReport {\n+    /// The project directory path.\n+    project_dir: PathBuf,\n+    /// The environment details, including path and action.\n+    sync: Option<SyncReport>,\n+    // Lockfile details, including path and actions taken\n+    lock: Option<LockReport>,\n+}\n+\n+/// The kind of environment this is\n+#[derive(Debug, Serialize)]\n+#[serde(rename_all = \"snake_case\")]\n+enum EnvKind {\n+    /// An environment for a project\n+    Project,\n+    /// An environment for a script\n+    Script,\n+}\n+\n+/// Represents the lockfile details during a dry run.\n+///\n+/// this struct captures the path to the lockfile and action\n+/// that would be taken on it.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2111628980",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13689,
        "pr_file": "crates/uv/src/commands/project/sync.rs",
        "discussion_id": "2111628980",
        "commented_code": "@@ -881,3 +900,270 @@ fn store_credentials_from_target(target: InstallTarget<'_>) {\n         }\n     }\n }\n+\n+/// A report of a project's state and updates to make.\n+#[derive(Debug, Serialize)]\n+struct ProjectReport {\n+    /// The project directory path.\n+    project_dir: PathBuf,\n+    /// The environment details, including path and action.\n+    sync: Option<SyncReport>,\n+    // Lockfile details, including path and actions taken\n+    lock: Option<LockReport>,\n+}\n+\n+/// The kind of environment this is\n+#[derive(Debug, Serialize)]\n+#[serde(rename_all = \"snake_case\")]\n+enum EnvKind {\n+    /// An environment for a project\n+    Project,\n+    /// An environment for a script\n+    Script,\n+}\n+\n+/// Represents the lockfile details during a dry run.\n+///\n+/// this struct captures the path to the lockfile and action\n+/// that would be taken on it.",
        "comment_created_at": "2025-05-28T11:37:13+00:00",
        "comment_author": "konstin",
        "comment_body": "```suggestion\n    /// Represents a lockfile and whether it needs to be created or update.\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2076089191",
    "pr_number": 13264,
    "pr_file": "crates/uv-cli/src/lib.rs",
    "created_at": "2025-05-06T19:06:26+00:00",
    "commented_code": "#[arg(long)]\n     pub show_version_specifiers: bool,\n \n+    /// Whether to display the extra requirements(s) installed with each tool.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2076089191",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13264,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2076089191",
        "commented_code": "@@ -4334,6 +4334,10 @@ pub struct ToolListArgs {\n     #[arg(long)]\n     pub show_version_specifiers: bool,\n \n+    /// Whether to display the extra requirements(s) installed with each tool.",
        "comment_created_at": "2025-05-06T19:06:26+00:00",
        "comment_author": "zanieb",
        "comment_body": "We might want to say \"additional\" here (as discussed elsewhere). If you want to update that language all at once, it can happen here or in a separate pull requests.",
        "pr_file_module": null
      },
      {
        "comment_id": "2076089570",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13264,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2076089191",
        "commented_code": "@@ -4334,6 +4334,10 @@ pub struct ToolListArgs {\n     #[arg(long)]\n     pub show_version_specifiers: bool,\n \n+    /// Whether to display the extra requirements(s) installed with each tool.",
        "comment_created_at": "2025-05-06T19:06:45+00:00",
        "comment_author": "zanieb",
        "comment_body": "I think it's also fine to just say \"requirements\" without the floating (s)",
        "pr_file_module": null
      },
      {
        "comment_id": "2076089879",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13264,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2076089191",
        "commented_code": "@@ -4334,6 +4334,10 @@ pub struct ToolListArgs {\n     #[arg(long)]\n     pub show_version_specifiers: bool,\n \n+    /// Whether to display the extra requirements(s) installed with each tool.",
        "comment_created_at": "2025-05-06T19:07:00+00:00",
        "comment_author": "zanieb",
        "comment_body": "```suggestion\r\n    /// Whether to display the additional requirements installed with each tool.\r\n```\r\n\r\n(will require generated reference update)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1999551644",
    "pr_number": 12246,
    "pr_file": "crates/uv-cli/src/lib.rs",
    "created_at": "2025-03-17T20:21:21+00:00",
    "commented_code": "#[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.\n     ///\n     /// By default, uv prefers using Python versions it manages. However, it\n     /// will use system Python installations if a uv-managed Python is not\n-    /// installed. This option allows prioritizing or ignoring system Python\n-    /// installations.\n+    /// installed. This option disables this system Python installation fallback.\n     #[arg(\n         global = true,\n         long,\n         help_heading = \"Python options\",\n-        display_order = 700,\n-        env = EnvVars::UV_PYTHON_PREFERENCE\n+        conflicts_with = \"no_managed_python\",\n+        conflicts_with = \"python_preference\"\n     )]\n-    pub python_preference: Option<PythonPreference>,\n+    pub managed_python: bool,\n+\n+    /// Whether to disable uv-managed Python installations.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1999551644",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999551644",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.\n     ///\n     /// By default, uv prefers using Python versions it manages. However, it\n     /// will use system Python installations if a uv-managed Python is not\n-    /// installed. This option allows prioritizing or ignoring system Python\n-    /// installations.\n+    /// installed. This option disables this system Python installation fallback.\n     #[arg(\n         global = true,\n         long,\n         help_heading = \"Python options\",\n-        display_order = 700,\n-        env = EnvVars::UV_PYTHON_PREFERENCE\n+        conflicts_with = \"no_managed_python\",\n+        conflicts_with = \"python_preference\"\n     )]\n-    pub python_preference: Option<PythonPreference>,\n+    pub managed_python: bool,\n+\n+    /// Whether to disable uv-managed Python installations.",
        "comment_created_at": "2025-03-17T20:21:21+00:00",
        "comment_author": "zanieb",
        "comment_body": "I would re-phrase (I think we use \"Whether\" when we only show one of the options)\r\n\r\n```suggestion\r\n    /// Disable use of uv-managed Python distributions.\r\n```\r\nI think we could say a bit more here, too, like\r\n\r\n> Instead, uv will search for a suitable Python installation on the system.\r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1999557170",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999551644",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.\n     ///\n     /// By default, uv prefers using Python versions it manages. However, it\n     /// will use system Python installations if a uv-managed Python is not\n-    /// installed. This option allows prioritizing or ignoring system Python\n-    /// installations.\n+    /// installed. This option disables this system Python installation fallback.\n     #[arg(\n         global = true,\n         long,\n         help_heading = \"Python options\",\n-        display_order = 700,\n-        env = EnvVars::UV_PYTHON_PREFERENCE\n+        conflicts_with = \"no_managed_python\",\n+        conflicts_with = \"python_preference\"\n     )]\n-    pub python_preference: Option<PythonPreference>,\n+    pub managed_python: bool,\n+\n+    /// Whether to disable uv-managed Python installations.",
        "comment_created_at": "2025-03-17T20:23:48+00:00",
        "comment_author": "zanieb",
        "comment_body": "See https://github.com/astral-sh/uv/pull/12246/files#r1999556537 — maybe we want to say \"Python versions\".",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2023739094",
    "pr_number": 12349,
    "pr_file": "crates/uv-cli/src/lib.rs",
    "created_at": "2025-04-01T22:05:52+00:00",
    "commented_code": "pub command: Option<Vec<String>>,\n }\n \n+#[derive(Args, Debug)]\n+#[command(group = clap::ArgGroup::new(\"operation\"))]\n+pub struct VersionArgs {\n+    /// Set the project version to this value\n+    #[arg(group = \"operation\")]\n+    pub value: Option<String>,\n+    /// Update the project version using the given semantics\n+    #[arg(group = \"operation\", long)]\n+    pub bump: Option<VersionBump>,\n+    /// Don't write a new version to the `pyproject.toml`\n+    ///\n+    /// Instead, the version will be displayed.\n+    #[arg(long)]\n+    pub dry_run: bool,\n+    /// Only print the final value",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2023739094",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12349,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "2023739094",
        "commented_code": "@@ -529,6 +526,37 @@ pub struct HelpArgs {\n     pub command: Option<Vec<String>>,\n }\n \n+#[derive(Args, Debug)]\n+#[command(group = clap::ArgGroup::new(\"operation\"))]\n+pub struct VersionArgs {\n+    /// Set the project version to this value\n+    #[arg(group = \"operation\")]\n+    pub value: Option<String>,\n+    /// Update the project version using the given semantics\n+    #[arg(group = \"operation\", long)]\n+    pub bump: Option<VersionBump>,\n+    /// Don't write a new version to the `pyproject.toml`\n+    ///\n+    /// Instead, the version will be displayed.\n+    #[arg(long)]\n+    pub dry_run: bool,\n+    /// Only print the final value",
        "comment_created_at": "2025-04-01T22:05:52+00:00",
        "comment_author": "zanieb",
        "comment_body": "```suggestion\r\n    /// Only show the version\r\n    ///\r\n    /// By default, uv will show the project name before the version.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]