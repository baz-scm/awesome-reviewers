[
  {
    "discussion_id": "2177428746",
    "pr_number": 14368,
    "pr_file": "crates/uv-cli/src/options.rs",
    "created_at": "2025-07-01T12:06:55+00:00",
    "commented_code": "+use anstream::eprintln;\n+\n use uv_cache::Refresh;\n use uv_configuration::ConfigSettings;\n use uv_resolver::PrereleaseMode;\n use uv_settings::{Combine, PipOptions, ResolverInstallerOptions, ResolverOptions};\n+use uv_warnings::owo_colors::OwoColorize;\n \n use crate::{\n     BuildOptionsArgs, FetchArgs, IndexArgs, InstallerArgs, Maybe, RefreshArgs, ResolverArgs,\n     ResolverInstallerArgs,\n };\n \n /// Given a boolean flag pair (like `--upgrade` and `--no-upgrade`), resolve the value of the flag.\n-pub fn flag(yes: bool, no: bool) -> Option<bool> {\n+pub fn flag(yes: bool, no: bool, name: &str) -> Option<bool> {\n     match (yes, no) {\n         (true, false) => Some(true),\n         (false, true) => Some(false),\n         (false, false) => None,\n-        (..) => unreachable!(\"Clap should make this impossible\"),\n+        (..) => {\n+            eprintln!(\n+                \"{}{} `{}` and `{}` cannot be used together. \\\n+                Boolean flags on different levels are currently not supported \\\n+                (https://github.com/clap-rs/clap/issues/6049)\",\n+                \"error\".bold().red(),\n+                \":\".bold(),\n+                format!(\"--{name}\").green(),\n+                format!(\"--no-{name}\").green(),\n+            );\n+            // No error forwarding since should eventually be solved on the clap side.\n+            std::process::exit(2);",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2177428746",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14368,
        "pr_file": "crates/uv-cli/src/options.rs",
        "discussion_id": "2177428746",
        "commented_code": "@@ -1,20 +1,35 @@\n+use anstream::eprintln;\n+\n use uv_cache::Refresh;\n use uv_configuration::ConfigSettings;\n use uv_resolver::PrereleaseMode;\n use uv_settings::{Combine, PipOptions, ResolverInstallerOptions, ResolverOptions};\n+use uv_warnings::owo_colors::OwoColorize;\n \n use crate::{\n     BuildOptionsArgs, FetchArgs, IndexArgs, InstallerArgs, Maybe, RefreshArgs, ResolverArgs,\n     ResolverInstallerArgs,\n };\n \n /// Given a boolean flag pair (like `--upgrade` and `--no-upgrade`), resolve the value of the flag.\n-pub fn flag(yes: bool, no: bool) -> Option<bool> {\n+pub fn flag(yes: bool, no: bool, name: &str) -> Option<bool> {\n     match (yes, no) {\n         (true, false) => Some(true),\n         (false, true) => Some(false),\n         (false, false) => None,\n-        (..) => unreachable!(\"Clap should make this impossible\"),\n+        (..) => {\n+            eprintln!(\n+                \"{}{} `{}` and `{}` cannot be used together. \\\n+                Boolean flags on different levels are currently not supported \\\n+                (https://github.com/clap-rs/clap/issues/6049)\",\n+                \"error\".bold().red(),\n+                \":\".bold(),\n+                format!(\"--{name}\").green(),\n+                format!(\"--no-{name}\").green(),\n+            );\n+            // No error forwarding since should eventually be solved on the clap side.\n+            std::process::exit(2);",
        "comment_created_at": "2025-07-01T12:06:55+00:00",
        "comment_author": "konstin",
        "comment_body": "Given that this is a clap bug, I don't think it's worth it introducing `Result`s in the whole resolve chain.\r\n\r\nThe exit code is the same that clap uses for parsing errors.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142859322",
    "pr_number": 13997,
    "pr_file": "crates/uv/src/commands/project/add.rs",
    "created_at": "2025-06-12T14:04:46+00:00",
    "commented_code": "let reporter = PythonDownloadReporter::single(printer);\n \n     let target = if let Some(script) = script {\n+        // Adding dependencies to groups is not allowed per specification for scripts.\n+        if matches!(dependency_type, DependencyType::Group(_)) {\n+            bail!(\"the argument '--group <GROUP>' cannot be used with '--script <SCRIPT>'\")",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2142859322",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13997,
        "pr_file": "crates/uv/src/commands/project/add.rs",
        "discussion_id": "2142859322",
        "commented_code": "@@ -112,6 +112,10 @@ pub(crate) async fn add(\n     let reporter = PythonDownloadReporter::single(printer);\n \n     let target = if let Some(script) = script {\n+        // Adding dependencies to groups is not allowed per specification for scripts.\n+        if matches!(dependency_type, DependencyType::Group(_)) {\n+            bail!(\"the argument '--group <GROUP>' cannot be used with '--script <SCRIPT>'\")",
        "comment_created_at": "2025-06-12T14:04:46+00:00",
        "comment_author": "Gankra",
        "comment_body": "Nice! It's notable that there's `--group` and `--dev` that apply here. My proposed solution was worried about there being a bunch of flag inheritance, but now that I've looked at it all the relevant flags are defined together so we should ideally be able to just adds conflicts_with(\"script\") to those two flags (and then we don't need to quibble about error message formatting \ud83d\ude04).\r\n\r\nhttps://github.com/astral-sh/uv/blob/806cc5cad9ac8abc3c29537a9f27bec66f409389/crates/uv-cli/src/lib.rs#L3516-L3534",
        "pr_file_module": null
      },
      {
        "comment_id": "2142896889",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13997,
        "pr_file": "crates/uv/src/commands/project/add.rs",
        "discussion_id": "2142859322",
        "commented_code": "@@ -112,6 +112,10 @@ pub(crate) async fn add(\n     let reporter = PythonDownloadReporter::single(printer);\n \n     let target = if let Some(script) = script {\n+        // Adding dependencies to groups is not allowed per specification for scripts.\n+        if matches!(dependency_type, DependencyType::Group(_)) {\n+            bail!(\"the argument '--group <GROUP>' cannot be used with '--script <SCRIPT>'\")",
        "comment_created_at": "2025-06-12T14:17:38+00:00",
        "comment_author": "blueraft",
        "comment_body": "Makes sense :D I've added it to the remove command args too  ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2047568739",
    "pr_number": 12805,
    "pr_file": "crates/uv-distribution-types/src/index.rs",
    "created_at": "2025-04-16T19:01:01+00:00",
    "commented_code": "}\n }\n \n+/// Validate the provided error codes.\n+fn validate_error_codes<'de, D>(deserializer: D) -> Result<Vec<u16>, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let status_codes = Option::<Vec<u16>>::deserialize(deserializer)?;\n+    if let Some(codes) = status_codes {\n+        for code in &codes {\n+            if StatusCode::from_u16(*code).is_err() {\n+                return Err(serde::de::Error::custom(format!(\n+                    \"{code} is not a valid HTTP status code\"\n+                )));\n+            }\n+        }\n+        return Ok(codes);",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2047568739",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-distribution-types/src/index.rs",
        "discussion_id": "2047568739",
        "commented_code": "@@ -349,6 +375,25 @@ impl<'a> From<&'a IndexUrl> for IndexMetadataRef<'a> {\n     }\n }\n \n+/// Validate the provided error codes.\n+fn validate_error_codes<'de, D>(deserializer: D) -> Result<Vec<u16>, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let status_codes = Option::<Vec<u16>>::deserialize(deserializer)?;\n+    if let Some(codes) = status_codes {\n+        for code in &codes {\n+            if StatusCode::from_u16(*code).is_err() {\n+                return Err(serde::de::Error::custom(format!(\n+                    \"{code} is not a valid HTTP status code\"\n+                )));\n+            }\n+        }\n+        return Ok(codes);",
        "comment_created_at": "2025-04-16T19:01:01+00:00",
        "comment_author": "zanieb",
        "comment_body": "Why not just store `StatusCode` directly instead of the u16?",
        "pr_file_module": null
      },
      {
        "comment_id": "2048640552",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-distribution-types/src/index.rs",
        "discussion_id": "2047568739",
        "commented_code": "@@ -349,6 +375,25 @@ impl<'a> From<&'a IndexUrl> for IndexMetadataRef<'a> {\n     }\n }\n \n+/// Validate the provided error codes.\n+fn validate_error_codes<'de, D>(deserializer: D) -> Result<Vec<u16>, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let status_codes = Option::<Vec<u16>>::deserialize(deserializer)?;\n+    if let Some(codes) = status_codes {\n+        for code in &codes {\n+            if StatusCode::from_u16(*code).is_err() {\n+                return Err(serde::de::Error::custom(format!(\n+                    \"{code} is not a valid HTTP status code\"\n+                )));\n+            }\n+        }\n+        return Ok(codes);",
        "comment_created_at": "2025-04-17T10:02:19+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "I tried that first, but `StatusCode` doesn't implement `Serialize`. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2048976549",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-distribution-types/src/index.rs",
        "discussion_id": "2047568739",
        "commented_code": "@@ -349,6 +375,25 @@ impl<'a> From<&'a IndexUrl> for IndexMetadataRef<'a> {\n     }\n }\n \n+/// Validate the provided error codes.\n+fn validate_error_codes<'de, D>(deserializer: D) -> Result<Vec<u16>, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let status_codes = Option::<Vec<u16>>::deserialize(deserializer)?;\n+    if let Some(codes) = status_codes {\n+        for code in &codes {\n+            if StatusCode::from_u16(*code).is_err() {\n+                return Err(serde::de::Error::custom(format!(\n+                    \"{code} is not a valid HTTP status code\"\n+                )));\n+            }\n+        }\n+        return Ok(codes);",
        "comment_created_at": "2025-04-17T13:38:08+00:00",
        "comment_author": "zanieb",
        "comment_body": "Why does it need to implement `Serialize`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2049201455",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-distribution-types/src/index.rs",
        "discussion_id": "2047568739",
        "commented_code": "@@ -349,6 +375,25 @@ impl<'a> From<&'a IndexUrl> for IndexMetadataRef<'a> {\n     }\n }\n \n+/// Validate the provided error codes.\n+fn validate_error_codes<'de, D>(deserializer: D) -> Result<Vec<u16>, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let status_codes = Option::<Vec<u16>>::deserialize(deserializer)?;\n+    if let Some(codes) = status_codes {\n+        for code in &codes {\n+            if StatusCode::from_u16(*code).is_err() {\n+                return Err(serde::de::Error::custom(format!(\n+                    \"{code} is not a valid HTTP status code\"\n+                )));\n+            }\n+        }\n+        return Ok(codes);",
        "comment_created_at": "2025-04-17T15:29:07+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Both `Serialize` and `Deserialize` are derived on `Index` and `StatusCode` doesn't implement either. We could do `#[serde(skip)]` but that seemed incorrect to me.",
        "pr_file_module": null
      },
      {
        "comment_id": "2049343022",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-distribution-types/src/index.rs",
        "discussion_id": "2047568739",
        "commented_code": "@@ -349,6 +375,25 @@ impl<'a> From<&'a IndexUrl> for IndexMetadataRef<'a> {\n     }\n }\n \n+/// Validate the provided error codes.\n+fn validate_error_codes<'de, D>(deserializer: D) -> Result<Vec<u16>, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let status_codes = Option::<Vec<u16>>::deserialize(deserializer)?;\n+    if let Some(codes) = status_codes {\n+        for code in &codes {\n+            if StatusCode::from_u16(*code).is_err() {\n+                return Err(serde::de::Error::custom(format!(\n+                    \"{code} is not a valid HTTP status code\"\n+                )));\n+            }\n+        }\n+        return Ok(codes);",
        "comment_created_at": "2025-04-17T16:57:51+00:00",
        "comment_author": "zanieb",
        "comment_body": "Stepping up a level, why is `Index` serializable? For writing it to the TOML file? If that's it, why _would_ we need this field to be serializable? A user can't construct it via the CLI. If truly necessary, why not use a wrapper type to implement serializability?",
        "pr_file_module": null
      },
      {
        "comment_id": "2049478002",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-distribution-types/src/index.rs",
        "discussion_id": "2047568739",
        "commented_code": "@@ -349,6 +375,25 @@ impl<'a> From<&'a IndexUrl> for IndexMetadataRef<'a> {\n     }\n }\n \n+/// Validate the provided error codes.\n+fn validate_error_codes<'de, D>(deserializer: D) -> Result<Vec<u16>, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let status_codes = Option::<Vec<u16>>::deserialize(deserializer)?;\n+    if let Some(codes) = status_codes {\n+        for code in &codes {\n+            if StatusCode::from_u16(*code).is_err() {\n+                return Err(serde::de::Error::custom(format!(\n+                    \"{code} is not a valid HTTP status code\"\n+                )));\n+            }\n+        }\n+        return Ok(codes);",
        "comment_created_at": "2025-04-17T18:44:15+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "If we don\u2019t need it, I can use #[serde(skip)]",
        "pr_file_module": null
      },
      {
        "comment_id": "2049510538",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-distribution-types/src/index.rs",
        "discussion_id": "2047568739",
        "commented_code": "@@ -349,6 +375,25 @@ impl<'a> From<&'a IndexUrl> for IndexMetadataRef<'a> {\n     }\n }\n \n+/// Validate the provided error codes.\n+fn validate_error_codes<'de, D>(deserializer: D) -> Result<Vec<u16>, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let status_codes = Option::<Vec<u16>>::deserialize(deserializer)?;\n+    if let Some(codes) = status_codes {\n+        for code in &codes {\n+            if StatusCode::from_u16(*code).is_err() {\n+                return Err(serde::de::Error::custom(format!(\n+                    \"{code} is not a valid HTTP status code\"\n+                )));\n+            }\n+        }\n+        return Ok(codes);",
        "comment_created_at": "2025-04-17T19:13:14+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "I guess it's going to be more complicated than that. We can't use skip when we need a `deserialize_with` to parse the numbers in the TOML file. I'll need to implement a wrapper type around `StatusCode` for deriving `schemars::JsonSchema` as well as `De/Serialize` if we want to do it this way. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2049591619",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-distribution-types/src/index.rs",
        "discussion_id": "2047568739",
        "commented_code": "@@ -349,6 +375,25 @@ impl<'a> From<&'a IndexUrl> for IndexMetadataRef<'a> {\n     }\n }\n \n+/// Validate the provided error codes.\n+fn validate_error_codes<'de, D>(deserializer: D) -> Result<Vec<u16>, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let status_codes = Option::<Vec<u16>>::deserialize(deserializer)?;\n+    if let Some(codes) = status_codes {\n+        for code in &codes {\n+            if StatusCode::from_u16(*code).is_err() {\n+                return Err(serde::de::Error::custom(format!(\n+                    \"{code} is not a valid HTTP status code\"\n+                )));\n+            }\n+        }\n+        return Ok(codes);",
        "comment_created_at": "2025-04-17T20:18:59+00:00",
        "comment_author": "zanieb",
        "comment_body": "It seems nice for type safety throughout and straightforward to implement? I don't feel super strongly, but the current approach of validating at the CLI level, but retaining the u16, then revalidating later seems quite weird.",
        "pr_file_module": null
      },
      {
        "comment_id": "2049610163",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-distribution-types/src/index.rs",
        "discussion_id": "2047568739",
        "commented_code": "@@ -349,6 +375,25 @@ impl<'a> From<&'a IndexUrl> for IndexMetadataRef<'a> {\n     }\n }\n \n+/// Validate the provided error codes.\n+fn validate_error_codes<'de, D>(deserializer: D) -> Result<Vec<u16>, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let status_codes = Option::<Vec<u16>>::deserialize(deserializer)?;\n+    if let Some(codes) = status_codes {\n+        for code in &codes {\n+            if StatusCode::from_u16(*code).is_err() {\n+                return Err(serde::de::Error::custom(format!(\n+                    \"{code} is not a valid HTTP status code\"\n+                )));\n+            }\n+        }\n+        return Ok(codes);",
        "comment_created_at": "2025-04-17T20:30:55+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Yeah that\u2019s why originally it was validated once on ingest with an expect down the line when converted to a StatusCode. But I can also create the wrapper",
        "pr_file_module": null
      }
    ]
  }
]