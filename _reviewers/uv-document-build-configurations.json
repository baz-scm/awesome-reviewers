[
  {
    "discussion_id": "1590187595",
    "pr_number": 3372,
    "pr_file": "Dockerfile",
    "created_at": "2024-05-05T00:58:38+00:00",
    "commented_code": "-FROM --platform=$BUILDPLATFORM ubuntu as build\n+# syntax=docker/dockerfile:1\n+\n+FROM --platform=${BUILDPLATFORM} ubuntu:24.04 AS builder-base\n+# Configure the shell to exit early if any command fails, or when referencing unset variables.\n+# Additionally `-x` outputs each command run, this is helpful for troubleshooting failures.\n+SHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n+\n+RUN \\\n+  --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \\\n+  --mount=target=/var/cache/apt,type=cache,sharing=locked \\\n+  <<HEREDOC\n+    # https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/reference.md#example-cache-apt-packages\n+    # https://stackoverflow.com/questions/66808788/docker-can-you-cache-apt-get-package-installs#comment135104889_72851168\n+    rm -f /etc/apt/apt.conf.d/docker-clean\n+    echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\n+\n+    apt update && apt install -y --no-install-recommends \\\n+      build-essential \\\n+      curl \\\n+      python3-venv \\\n+      cmake\n+HEREDOC\n+\n ENV HOME=\"/root\"\n+ENV PATH=\"$HOME/.venv/bin:$PATH\"\n WORKDIR $HOME\n \n-RUN apt update \\\n-  && apt install -y --no-install-recommends \\\n-  build-essential \\\n-  curl \\\n-  python3-venv \\\n-  cmake \\\n-  && apt clean \\\n-  && rm -rf /var/lib/apt/lists/*\n-\n-# Setup zig as cross compiling linker\n-RUN python3 -m venv $HOME/.venv\n-RUN .venv/bin/pip install cargo-zigbuild\n-ENV PATH=\"$HOME/.venv/bin:$PATH\"\n+# Setup zig as cross compiling linker:\n+RUN <<HEREDOC\n+  python3 -m venv $HOME/.venv\n+  .venv/bin/pip install --no-cache-dir cargo-zigbuild\n+HEREDOC\n \n-# Install rust\n-ARG TARGETPLATFORM\n-RUN case \"$TARGETPLATFORM\" in \\\n-  \"linux/arm64\") echo \"aarch64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  \"linux/amd64\") echo \"x86_64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  *) exit 1 ;; \\\n-  esac\n-# Update rustup whenever we bump the rust version\n-COPY rust-toolchain.toml rust-toolchain.toml\n-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none\n+# Install rust:\n ENV PATH=\"$HOME/.cargo/bin:$PATH\"\n-# Installs the correct toolchain version from rust-toolchain.toml and then the musl target\n-RUN rustup target add $(cat rust_target.txt)\n-\n-# Build\n-COPY crates crates\n-COPY ./Cargo.toml Cargo.toml\n-COPY ./Cargo.lock Cargo.lock\n-RUN cargo zigbuild --bin uv --target $(cat rust_target.txt) --release\n-RUN cp target/$(cat rust_target.txt)/release/uv /uv\n-# TODO(konsti): Optimize binary size, with a version that also works when cross compiling\n-# RUN strip --strip-all /uv\n+COPY rust-toolchain.toml .\n+RUN <<HEREDOC\n+  # Install rustup, but skip installing a default toolchain as we only want the version from `rust-toolchain.toml`:\n+  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain none\n+\n+  # When rustup installs the toolchain ensure it actually uses the minimal profile, avoiding excess layer weight:\n+  # https://github.com/rust-lang/rustup/issues/3805#issuecomment-2094066914\n+  echo 'profile = \"minimal\"' >> rust-toolchain.toml\n+  echo 'targets = [ \"aarch64-unknown-linux-musl\", \"x86_64-unknown-linux-musl\" ]' >> rust-toolchain.toml\n+  # Add the relevant musl target triples (for a building binary with static linking):\n+  # Workaround until `ensure` arrives: https://github.com/rust-lang/rustup/issues/2686#issuecomment-788825744\n+  rustup show\n+HEREDOC\n+\n+# Handle individual images differences for ARM64 / AMD64:\n+FROM builder-base AS builder-arm64\n+ENV CARGO_BUILD_TARGET=aarch64-unknown-linux-musl\n+\n+FROM builder-base AS builder-amd64\n+ENV CARGO_BUILD_TARGET=x86_64-unknown-linux-musl\n+\n+# Build app:\n+FROM builder-${TARGETARCH} AS builder-app\n+COPY crates/ crates/\n+COPY Cargo.toml Cargo.lock .\n+ARG APP_NAME=uv\n+ARG CARGO_HOME=/usr/local/cargo\n+ARG RUSTFLAGS=\"-C strip=symbols -C relocation-model=static -C target-feature=+crt-static -C opt-level=z\"",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1590187595",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3372,
        "pr_file": "Dockerfile",
        "discussion_id": "1590187595",
        "commented_code": "@@ -1,45 +1,86 @@\n-FROM --platform=$BUILDPLATFORM ubuntu as build\n+# syntax=docker/dockerfile:1\n+\n+FROM --platform=${BUILDPLATFORM} ubuntu:24.04 AS builder-base\n+# Configure the shell to exit early if any command fails, or when referencing unset variables.\n+# Additionally `-x` outputs each command run, this is helpful for troubleshooting failures.\n+SHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n+\n+RUN \\\n+  --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \\\n+  --mount=target=/var/cache/apt,type=cache,sharing=locked \\\n+  <<HEREDOC\n+    # https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/reference.md#example-cache-apt-packages\n+    # https://stackoverflow.com/questions/66808788/docker-can-you-cache-apt-get-package-installs#comment135104889_72851168\n+    rm -f /etc/apt/apt.conf.d/docker-clean\n+    echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\n+\n+    apt update && apt install -y --no-install-recommends \\\n+      build-essential \\\n+      curl \\\n+      python3-venv \\\n+      cmake\n+HEREDOC\n+\n ENV HOME=\"/root\"\n+ENV PATH=\"$HOME/.venv/bin:$PATH\"\n WORKDIR $HOME\n \n-RUN apt update \\\n-  && apt install -y --no-install-recommends \\\n-  build-essential \\\n-  curl \\\n-  python3-venv \\\n-  cmake \\\n-  && apt clean \\\n-  && rm -rf /var/lib/apt/lists/*\n-\n-# Setup zig as cross compiling linker\n-RUN python3 -m venv $HOME/.venv\n-RUN .venv/bin/pip install cargo-zigbuild\n-ENV PATH=\"$HOME/.venv/bin:$PATH\"\n+# Setup zig as cross compiling linker:\n+RUN <<HEREDOC\n+  python3 -m venv $HOME/.venv\n+  .venv/bin/pip install --no-cache-dir cargo-zigbuild\n+HEREDOC\n \n-# Install rust\n-ARG TARGETPLATFORM\n-RUN case \"$TARGETPLATFORM\" in \\\n-  \"linux/arm64\") echo \"aarch64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  \"linux/amd64\") echo \"x86_64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  *) exit 1 ;; \\\n-  esac\n-# Update rustup whenever we bump the rust version\n-COPY rust-toolchain.toml rust-toolchain.toml\n-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none\n+# Install rust:\n ENV PATH=\"$HOME/.cargo/bin:$PATH\"\n-# Installs the correct toolchain version from rust-toolchain.toml and then the musl target\n-RUN rustup target add $(cat rust_target.txt)\n-\n-# Build\n-COPY crates crates\n-COPY ./Cargo.toml Cargo.toml\n-COPY ./Cargo.lock Cargo.lock\n-RUN cargo zigbuild --bin uv --target $(cat rust_target.txt) --release\n-RUN cp target/$(cat rust_target.txt)/release/uv /uv\n-# TODO(konsti): Optimize binary size, with a version that also works when cross compiling\n-# RUN strip --strip-all /uv\n+COPY rust-toolchain.toml .\n+RUN <<HEREDOC\n+  # Install rustup, but skip installing a default toolchain as we only want the version from `rust-toolchain.toml`:\n+  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain none\n+\n+  # When rustup installs the toolchain ensure it actually uses the minimal profile, avoiding excess layer weight:\n+  # https://github.com/rust-lang/rustup/issues/3805#issuecomment-2094066914\n+  echo 'profile = \"minimal\"' >> rust-toolchain.toml\n+  echo 'targets = [ \"aarch64-unknown-linux-musl\", \"x86_64-unknown-linux-musl\" ]' >> rust-toolchain.toml\n+  # Add the relevant musl target triples (for a building binary with static linking):\n+  # Workaround until `ensure` arrives: https://github.com/rust-lang/rustup/issues/2686#issuecomment-788825744\n+  rustup show\n+HEREDOC\n+\n+# Handle individual images differences for ARM64 / AMD64:\n+FROM builder-base AS builder-arm64\n+ENV CARGO_BUILD_TARGET=aarch64-unknown-linux-musl\n+\n+FROM builder-base AS builder-amd64\n+ENV CARGO_BUILD_TARGET=x86_64-unknown-linux-musl\n+\n+# Build app:\n+FROM builder-${TARGETARCH} AS builder-app\n+COPY crates/ crates/\n+COPY Cargo.toml Cargo.lock .\n+ARG APP_NAME=uv\n+ARG CARGO_HOME=/usr/local/cargo\n+ARG RUSTFLAGS=\"-C strip=symbols -C relocation-model=static -C target-feature=+crt-static -C opt-level=z\"",
        "comment_created_at": "2024-05-05T00:58:38+00:00",
        "comment_author": "polarathene",
        "comment_body": "I've used the `RUSTFLAGS` ENV here, although you can configure these in `Cargo.toml` + `.cargo/config.toml` (_`relocation-model` and `target-feature` would still be rustflags IIRC_). Presumably this is only relevant to the CI / Docker builds, so they're probably better managed here?\r\n\r\n- I'm not sure if `opt-level` with `z` (best size) is ideal? It should probably be compared/benched against a build for performance, since that is a focus of `uv` I doubt a little size savings is worth it if the performance regresses quite a bit. I'm not familiar with this project to know how you'd want to verify the impact.\r\n- `+crt-static` isn't necessary at the moment for the `musl` targets being built, but there has been talk about future changes for these targets to default to dynamic linking, so I've included it as more of a precaution, it also better communicates the desire for a static linked build.\r\n- `relocation-model=static` tends to help save on binary size, I think this is ok. The default AFAIK is more of a security feature for memory layout, but I'm not sure if that's a concern for `uv` as an attack vector (_some attacker with access to read memory_). It's related to PIE if you're familiar with that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1590189810",
    "pr_number": 3372,
    "pr_file": "Dockerfile",
    "created_at": "2024-05-05T01:26:09+00:00",
    "commented_code": "-FROM --platform=$BUILDPLATFORM ubuntu as build\n+# syntax=docker/dockerfile:1\n+\n+FROM --platform=${BUILDPLATFORM} ubuntu:24.04 AS builder-base\n+# Configure the shell to exit early if any command fails, or when referencing unset variables.\n+# Additionally `-x` outputs each command run, this is helpful for troubleshooting failures.\n+SHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n+\n+RUN \\\n+  --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \\\n+  --mount=target=/var/cache/apt,type=cache,sharing=locked \\\n+  <<HEREDOC\n+    # https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/reference.md#example-cache-apt-packages\n+    # https://stackoverflow.com/questions/66808788/docker-can-you-cache-apt-get-package-installs#comment135104889_72851168\n+    rm -f /etc/apt/apt.conf.d/docker-clean\n+    echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\n+\n+    apt update && apt install -y --no-install-recommends \\\n+      build-essential \\\n+      curl \\\n+      python3-venv \\\n+      cmake\n+HEREDOC\n+\n ENV HOME=\"/root\"\n+ENV PATH=\"$HOME/.venv/bin:$PATH\"\n WORKDIR $HOME\n \n-RUN apt update \\\n-  && apt install -y --no-install-recommends \\\n-  build-essential \\\n-  curl \\\n-  python3-venv \\\n-  cmake \\\n-  && apt clean \\\n-  && rm -rf /var/lib/apt/lists/*\n-\n-# Setup zig as cross compiling linker\n-RUN python3 -m venv $HOME/.venv\n-RUN .venv/bin/pip install cargo-zigbuild\n-ENV PATH=\"$HOME/.venv/bin:$PATH\"\n+# Setup zig as cross compiling linker:\n+RUN <<HEREDOC\n+  python3 -m venv $HOME/.venv\n+  .venv/bin/pip install --no-cache-dir cargo-zigbuild\n+HEREDOC\n \n-# Install rust\n-ARG TARGETPLATFORM\n-RUN case \"$TARGETPLATFORM\" in \\\n-  \"linux/arm64\") echo \"aarch64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  \"linux/amd64\") echo \"x86_64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  *) exit 1 ;; \\\n-  esac\n-# Update rustup whenever we bump the rust version\n-COPY rust-toolchain.toml rust-toolchain.toml\n-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none\n+# Install rust:\n ENV PATH=\"$HOME/.cargo/bin:$PATH\"\n-# Installs the correct toolchain version from rust-toolchain.toml and then the musl target\n-RUN rustup target add $(cat rust_target.txt)\n-\n-# Build\n-COPY crates crates\n-COPY ./Cargo.toml Cargo.toml\n-COPY ./Cargo.lock Cargo.lock\n-RUN cargo zigbuild --bin uv --target $(cat rust_target.txt) --release\n-RUN cp target/$(cat rust_target.txt)/release/uv /uv\n-# TODO(konsti): Optimize binary size, with a version that also works when cross compiling\n-# RUN strip --strip-all /uv\n+COPY rust-toolchain.toml .\n+RUN <<HEREDOC\n+  # Install rustup, but skip installing a default toolchain as we only want the version from `rust-toolchain.toml`:\n+  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain none\n+\n+  # When rustup installs the toolchain ensure it actually uses the minimal profile, avoiding excess layer weight:\n+  # https://github.com/rust-lang/rustup/issues/3805#issuecomment-2094066914\n+  echo 'profile = \"minimal\"' >> rust-toolchain.toml\n+  echo 'targets = [ \"aarch64-unknown-linux-musl\", \"x86_64-unknown-linux-musl\" ]' >> rust-toolchain.toml\n+  # Add the relevant musl target triples (for a building binary with static linking):\n+  # Workaround until `ensure` arrives: https://github.com/rust-lang/rustup/issues/2686#issuecomment-788825744\n+  rustup show\n+HEREDOC\n+\n+# Handle individual images differences for ARM64 / AMD64:\n+FROM builder-base AS builder-arm64\n+ENV CARGO_BUILD_TARGET=aarch64-unknown-linux-musl\n+\n+FROM builder-base AS builder-amd64\n+ENV CARGO_BUILD_TARGET=x86_64-unknown-linux-musl\n+\n+# Build app:\n+FROM builder-${TARGETARCH} AS builder-app\n+COPY crates/ crates/\n+COPY Cargo.toml Cargo.lock .\n+ARG APP_NAME=uv\n+ARG CARGO_HOME=/usr/local/cargo\n+ARG RUSTFLAGS=\"-C strip=symbols -C relocation-model=static -C target-feature=+crt-static -C opt-level=z\"\n+ARG TARGETPLATFORM\n+RUN \\\n+  --mount=type=cache,target=\"/root/.cache/zig\",id=\"zig-cache\" \\\n+  # Cache mounts (dirs for crates cache + build target):\n+  # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci\n+  # CAUTION: As cargo uses multiple lock files (eg: `${CARGO_HOME}/{.global-cache,.package-cache,.package-cache-mutate}`), do not mount subdirs individually.\n+  --mount=type=cache,target=\"${CARGO_HOME}\",id=\"cargo-cache\" \\\n+  # This cache mount is specific enough that you may not have any concurrent builds needing to share it, communicate that expectation explicitly:\n+  --mount=type=cache,target=\"target/\",id=\"cargo-target-${APP_NAME}-${TARGETPLATFORM}\",sharing=locked \\\n+  # These are redundant as they're easily reconstructed from cache above. Use TMPFS mounts to exclude from cache mounts:\n+  # TMPFS mount is a better choice than `rm -rf` command (which is risky on a cache mount that is shared across concurrent builds).\n+  --mount=type=tmpfs,target=\"${CARGO_HOME}/registry/src\" \\\n+  --mount=type=tmpfs,target=\"${CARGO_HOME}/git/checkouts\" \\\n+  <<HEREDOC\n+    cargo zigbuild --release --bin \"${APP_NAME}\" --target \"${CARGO_BUILD_TARGET}\"\n+    cp \"target/${CARGO_BUILD_TARGET}/release/${APP_NAME}\" \"/${APP_NAME}\"\n+HEREDOC",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1590189810",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3372,
        "pr_file": "Dockerfile",
        "discussion_id": "1590189810",
        "commented_code": "@@ -1,45 +1,86 @@\n-FROM --platform=$BUILDPLATFORM ubuntu as build\n+# syntax=docker/dockerfile:1\n+\n+FROM --platform=${BUILDPLATFORM} ubuntu:24.04 AS builder-base\n+# Configure the shell to exit early if any command fails, or when referencing unset variables.\n+# Additionally `-x` outputs each command run, this is helpful for troubleshooting failures.\n+SHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n+\n+RUN \\\n+  --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \\\n+  --mount=target=/var/cache/apt,type=cache,sharing=locked \\\n+  <<HEREDOC\n+    # https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/reference.md#example-cache-apt-packages\n+    # https://stackoverflow.com/questions/66808788/docker-can-you-cache-apt-get-package-installs#comment135104889_72851168\n+    rm -f /etc/apt/apt.conf.d/docker-clean\n+    echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\n+\n+    apt update && apt install -y --no-install-recommends \\\n+      build-essential \\\n+      curl \\\n+      python3-venv \\\n+      cmake\n+HEREDOC\n+\n ENV HOME=\"/root\"\n+ENV PATH=\"$HOME/.venv/bin:$PATH\"\n WORKDIR $HOME\n \n-RUN apt update \\\n-  && apt install -y --no-install-recommends \\\n-  build-essential \\\n-  curl \\\n-  python3-venv \\\n-  cmake \\\n-  && apt clean \\\n-  && rm -rf /var/lib/apt/lists/*\n-\n-# Setup zig as cross compiling linker\n-RUN python3 -m venv $HOME/.venv\n-RUN .venv/bin/pip install cargo-zigbuild\n-ENV PATH=\"$HOME/.venv/bin:$PATH\"\n+# Setup zig as cross compiling linker:\n+RUN <<HEREDOC\n+  python3 -m venv $HOME/.venv\n+  .venv/bin/pip install --no-cache-dir cargo-zigbuild\n+HEREDOC\n \n-# Install rust\n-ARG TARGETPLATFORM\n-RUN case \"$TARGETPLATFORM\" in \\\n-  \"linux/arm64\") echo \"aarch64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  \"linux/amd64\") echo \"x86_64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  *) exit 1 ;; \\\n-  esac\n-# Update rustup whenever we bump the rust version\n-COPY rust-toolchain.toml rust-toolchain.toml\n-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none\n+# Install rust:\n ENV PATH=\"$HOME/.cargo/bin:$PATH\"\n-# Installs the correct toolchain version from rust-toolchain.toml and then the musl target\n-RUN rustup target add $(cat rust_target.txt)\n-\n-# Build\n-COPY crates crates\n-COPY ./Cargo.toml Cargo.toml\n-COPY ./Cargo.lock Cargo.lock\n-RUN cargo zigbuild --bin uv --target $(cat rust_target.txt) --release\n-RUN cp target/$(cat rust_target.txt)/release/uv /uv\n-# TODO(konsti): Optimize binary size, with a version that also works when cross compiling\n-# RUN strip --strip-all /uv\n+COPY rust-toolchain.toml .\n+RUN <<HEREDOC\n+  # Install rustup, but skip installing a default toolchain as we only want the version from `rust-toolchain.toml`:\n+  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain none\n+\n+  # When rustup installs the toolchain ensure it actually uses the minimal profile, avoiding excess layer weight:\n+  # https://github.com/rust-lang/rustup/issues/3805#issuecomment-2094066914\n+  echo 'profile = \"minimal\"' >> rust-toolchain.toml\n+  echo 'targets = [ \"aarch64-unknown-linux-musl\", \"x86_64-unknown-linux-musl\" ]' >> rust-toolchain.toml\n+  # Add the relevant musl target triples (for a building binary with static linking):\n+  # Workaround until `ensure` arrives: https://github.com/rust-lang/rustup/issues/2686#issuecomment-788825744\n+  rustup show\n+HEREDOC\n+\n+# Handle individual images differences for ARM64 / AMD64:\n+FROM builder-base AS builder-arm64\n+ENV CARGO_BUILD_TARGET=aarch64-unknown-linux-musl\n+\n+FROM builder-base AS builder-amd64\n+ENV CARGO_BUILD_TARGET=x86_64-unknown-linux-musl\n+\n+# Build app:\n+FROM builder-${TARGETARCH} AS builder-app\n+COPY crates/ crates/\n+COPY Cargo.toml Cargo.lock .\n+ARG APP_NAME=uv\n+ARG CARGO_HOME=/usr/local/cargo\n+ARG RUSTFLAGS=\"-C strip=symbols -C relocation-model=static -C target-feature=+crt-static -C opt-level=z\"\n+ARG TARGETPLATFORM\n+RUN \\\n+  --mount=type=cache,target=\"/root/.cache/zig\",id=\"zig-cache\" \\\n+  # Cache mounts (dirs for crates cache + build target):\n+  # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci\n+  # CAUTION: As cargo uses multiple lock files (eg: `${CARGO_HOME}/{.global-cache,.package-cache,.package-cache-mutate}`), do not mount subdirs individually.\n+  --mount=type=cache,target=\"${CARGO_HOME}\",id=\"cargo-cache\" \\\n+  # This cache mount is specific enough that you may not have any concurrent builds needing to share it, communicate that expectation explicitly:\n+  --mount=type=cache,target=\"target/\",id=\"cargo-target-${APP_NAME}-${TARGETPLATFORM}\",sharing=locked \\\n+  # These are redundant as they're easily reconstructed from cache above. Use TMPFS mounts to exclude from cache mounts:\n+  # TMPFS mount is a better choice than `rm -rf` command (which is risky on a cache mount that is shared across concurrent builds).\n+  --mount=type=tmpfs,target=\"${CARGO_HOME}/registry/src\" \\\n+  --mount=type=tmpfs,target=\"${CARGO_HOME}/git/checkouts\" \\\n+  <<HEREDOC\n+    cargo zigbuild --release --bin \"${APP_NAME}\" --target \"${CARGO_BUILD_TARGET}\"\n+    cp \"target/${CARGO_BUILD_TARGET}/release/${APP_NAME}\" \"/${APP_NAME}\"\n+HEREDOC",
        "comment_created_at": "2024-05-05T01:26:09+00:00",
        "comment_author": "polarathene",
        "comment_body": "This is using `--release`, but I noticed in your `Cargo.toml` you have a custom release profile that uses `lto = \"thin\"`, it could be changed to use that profile instead, otherwise LTO should implicitly default to thin-local.",
        "pr_file_module": null
      }
    ]
  }
]