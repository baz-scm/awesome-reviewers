[
  {
    "discussion_id": "2059487493",
    "pr_number": 12805,
    "pr_file": "crates/uv-auth/src/cache.rs",
    "created_at": "2025-04-25T02:48:46+00:00",
    "commented_code": "pub struct CredentialsCache {\n     /// A cache per realm and username\n     realms: RwLock<FxHashMap<(Realm, Username), Arc<Credentials>>>,\n-    /// A cache tracking the result of fetches from external services\n-    pub(crate) fetches: FxOnceMap<(Realm, Username), Option<Arc<Credentials>>>,\n+    /// A cache tracking the result of realm or index URL fetches from external services\n+    pub(crate) fetches: FxOnceMap<(String, Username), Option<Arc<Credentials>>>,",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2059487493",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-auth/src/cache.rs",
        "discussion_id": "2059487493",
        "commented_code": "@@ -17,8 +17,8 @@ type FxOnceMap<K, V> = OnceMap<K, V, BuildHasherDefault<FxHasher>>;\n pub struct CredentialsCache {\n     /// A cache per realm and username\n     realms: RwLock<FxHashMap<(Realm, Username), Arc<Credentials>>>,\n-    /// A cache tracking the result of fetches from external services\n-    pub(crate) fetches: FxOnceMap<(Realm, Username), Option<Arc<Credentials>>>,\n+    /// A cache tracking the result of realm or index URL fetches from external services\n+    pub(crate) fetches: FxOnceMap<(String, Username), Option<Arc<Credentials>>>,",
        "comment_created_at": "2025-04-25T02:48:46+00:00",
        "comment_author": "charliermarsh",
        "comment_body": "As a point of data modeling, I think this should be an enum, not a string -- is that possible? I recommend always approaching `String` with skepticism by default, since casting down to `String` means you've lost ~all type safety and type information. If we know this is either a realm or an index URL, then it makes sense to model the data that way, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "2059830528",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12805,
        "pr_file": "crates/uv-auth/src/cache.rs",
        "discussion_id": "2059487493",
        "commented_code": "@@ -17,8 +17,8 @@ type FxOnceMap<K, V> = OnceMap<K, V, BuildHasherDefault<FxHasher>>;\n pub struct CredentialsCache {\n     /// A cache per realm and username\n     realms: RwLock<FxHashMap<(Realm, Username), Arc<Credentials>>>,\n-    /// A cache tracking the result of fetches from external services\n-    pub(crate) fetches: FxOnceMap<(Realm, Username), Option<Arc<Credentials>>>,\n+    /// A cache tracking the result of realm or index URL fetches from external services\n+    pub(crate) fetches: FxOnceMap<(String, Username), Option<Arc<Credentials>>>,",
        "comment_created_at": "2025-04-25T08:48:12+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2141223712",
    "pr_number": 13954,
    "pr_file": "crates/uv-python/src/discovery.rs",
    "created_at": "2025-06-11T22:42:14+00:00",
    "commented_code": "}\n                     })\n                     .inspect(|installation| debug!(\"Found managed installation `{installation}`\"))\n-                    .map(|installation| (PythonSource::Managed, installation.executable(false))))\n+                    .map(move |installation| {\n+                        (\n+                            PythonSource::Managed,\n+                            if version.patch().is_some() || is_alternative_implementation {\n+                                installation.executable(false)",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2141223712",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13954,
        "pr_file": "crates/uv-python/src/discovery.rs",
        "discussion_id": "2141223712",
        "commented_code": "@@ -335,7 +339,24 @@ fn python_executables_from_installed<'a>(\n                         }\n                     })\n                     .inspect(|installation| debug!(\"Found managed installation `{installation}`\"))\n-                    .map(|installation| (PythonSource::Managed, installation.executable(false))))\n+                    .map(move |installation| {\n+                        (\n+                            PythonSource::Managed,\n+                            if version.patch().is_some() || is_alternative_implementation {\n+                                installation.executable(false)",
        "comment_created_at": "2025-06-11T22:42:14+00:00",
        "comment_author": "zanieb",
        "comment_body": "`PythonMinorVersionLink::from_installation` will already return `None` on alternative implementations, and we can use `bool::then` to avoid repeating the default case here.\r\n\r\nSee https://github.com/astral-sh/uv/pull/13980",
        "pr_file_module": null
      },
      {
        "comment_id": "2141284010",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13954,
        "pr_file": "crates/uv-python/src/discovery.rs",
        "discussion_id": "2141223712",
        "commented_code": "@@ -335,7 +339,24 @@ fn python_executables_from_installed<'a>(\n                         }\n                     })\n                     .inspect(|installation| debug!(\"Found managed installation `{installation}`\"))\n-                    .map(|installation| (PythonSource::Managed, installation.executable(false))))\n+                    .map(move |installation| {\n+                        (\n+                            PythonSource::Managed,\n+                            if version.patch().is_some() || is_alternative_implementation {\n+                                installation.executable(false)",
        "comment_created_at": "2025-06-11T23:59:39+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Merged",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2031359343",
    "pr_number": 12349,
    "pr_file": "crates/uv-workspace/src/pyproject_mut.rs",
    "created_at": "2025-04-07T14:21:42+00:00",
    "commented_code": "types\n     }\n+\n+    pub fn version(&mut self) -> Result<Version, Error> {\n+        let project = self\n+            .doc\n+            .entry(\"project\")\n+            .or_insert(Item::Table(Table::new()))\n+            .as_table()\n+            .ok_or(Error::MalformedWorkspace)?;\n+\n+        let version = project\n+            .get(\"version\")\n+            .and_then(Item::as_value)\n+            .and_then(Value::as_str)\n+            .ok_or(Error::MalformedWorkspace)?;\n+\n+        Version::from_str(version).map_err(|_| Error::MalformedWorkspace)\n+    }\n+\n+    pub fn has_dynamic_version(&mut self) -> bool {\n+        let Ok(project) = self\n+            .doc\n+            .entry(\"project\")\n+            .or_insert(Item::Table(Table::new()))\n+            .as_table()\n+            .ok_or(Error::MalformedWorkspace)\n+        else {\n+            return false;\n+        };\n+\n+        let Some(dynamic) = project\n+            .get(\"dynamic\")\n+            .and_then(Item::as_value)\n+            .and_then(Value::as_array)\n+        else {\n+            return false;\n+        };\n+\n+        dynamic.iter().any(|val| val.as_str() == Some(\"version\"))\n+    }\n+\n+    pub fn set_version(&mut self, version: &Version) -> Result<(), Error> {\n+        let project = self\n+            .doc\n+            .entry(\"project\")\n+            .or_insert(Item::Table(Table::new()))",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2031359343",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12349,
        "pr_file": "crates/uv-workspace/src/pyproject_mut.rs",
        "discussion_id": "2031359343",
        "commented_code": "@@ -976,6 +976,60 @@ impl PyProjectTomlMut {\n \n         types\n     }\n+\n+    pub fn version(&mut self) -> Result<Version, Error> {\n+        let project = self\n+            .doc\n+            .entry(\"project\")\n+            .or_insert(Item::Table(Table::new()))\n+            .as_table()\n+            .ok_or(Error::MalformedWorkspace)?;\n+\n+        let version = project\n+            .get(\"version\")\n+            .and_then(Item::as_value)\n+            .and_then(Value::as_str)\n+            .ok_or(Error::MalformedWorkspace)?;\n+\n+        Version::from_str(version).map_err(|_| Error::MalformedWorkspace)\n+    }\n+\n+    pub fn has_dynamic_version(&mut self) -> bool {\n+        let Ok(project) = self\n+            .doc\n+            .entry(\"project\")\n+            .or_insert(Item::Table(Table::new()))\n+            .as_table()\n+            .ok_or(Error::MalformedWorkspace)\n+        else {\n+            return false;\n+        };\n+\n+        let Some(dynamic) = project\n+            .get(\"dynamic\")\n+            .and_then(Item::as_value)\n+            .and_then(Value::as_array)\n+        else {\n+            return false;\n+        };\n+\n+        dynamic.iter().any(|val| val.as_str() == Some(\"version\"))\n+    }\n+\n+    pub fn set_version(&mut self, version: &Version) -> Result<(), Error> {\n+        let project = self\n+            .doc\n+            .entry(\"project\")\n+            .or_insert(Item::Table(Table::new()))",
        "comment_created_at": "2025-04-07T14:21:42+00:00",
        "comment_author": "konstin",
        "comment_body": "A missing `project` table should error, otherwise we risk creating an invalid `project` table with a `version` but no `name` (should be solved by `entry()` -> `get()`, too)",
        "pr_file_module": null
      }
    ]
  }
]