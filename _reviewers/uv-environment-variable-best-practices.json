[
  {
    "discussion_id": "1624896771",
    "pr_number": 3979,
    "pr_file": "crates/uv/src/cli.rs",
    "created_at": "2024-06-03T18:42:48+00:00",
    "commented_code": "#[arg(global = true, action = clap::ArgAction::Count, long, short, conflicts_with = \"quiet\")]\n     pub(crate) verbose: u8,\n \n-    /// Disable colors; provided for compatibility with `pip`.\n-    #[arg(global = true, long, hide = true, conflicts_with = \"color\")]\n+    /// Disable colors; provided for compatibility with [NO_COLOR](https://no-color.org) and `pip`.\n+    /// Takes precedence over `force_color` and `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"NO_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n     pub(crate) no_color: bool,\n \n+    /// Forces colors; provided for compatibility with [FORCE_COLOR](https://force-color.org).\n+    /// Takes precedence over `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"FORCE_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n+    pub(crate) force_color: bool,",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1624896771",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3979,
        "pr_file": "crates/uv/src/cli.rs",
        "discussion_id": "1624896771",
        "commented_code": "@@ -51,17 +51,34 @@ pub(crate) struct GlobalArgs {\n     #[arg(global = true, action = clap::ArgAction::Count, long, short, conflicts_with = \"quiet\")]\n     pub(crate) verbose: u8,\n \n-    /// Disable colors; provided for compatibility with `pip`.\n-    #[arg(global = true, long, hide = true, conflicts_with = \"color\")]\n+    /// Disable colors; provided for compatibility with [NO_COLOR](https://no-color.org) and `pip`.\n+    /// Takes precedence over `force_color` and `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"NO_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n     pub(crate) no_color: bool,\n \n+    /// Forces colors; provided for compatibility with [FORCE_COLOR](https://force-color.org).\n+    /// Takes precedence over `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"FORCE_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n+    pub(crate) force_color: bool,",
        "comment_created_at": "2024-06-03T18:42:48+00:00",
        "comment_author": "epage",
        "comment_body": "Implementation wise, I find this dubious to have hidden arguments for pulling in environment variables.  Is this a standard practiced in Ruff?",
        "pr_file_module": null
      },
      {
        "comment_id": "1624927722",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3979,
        "pr_file": "crates/uv/src/cli.rs",
        "discussion_id": "1624896771",
        "commented_code": "@@ -51,17 +51,34 @@ pub(crate) struct GlobalArgs {\n     #[arg(global = true, action = clap::ArgAction::Count, long, short, conflicts_with = \"quiet\")]\n     pub(crate) verbose: u8,\n \n-    /// Disable colors; provided for compatibility with `pip`.\n-    #[arg(global = true, long, hide = true, conflicts_with = \"color\")]\n+    /// Disable colors; provided for compatibility with [NO_COLOR](https://no-color.org) and `pip`.\n+    /// Takes precedence over `force_color` and `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"NO_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n     pub(crate) no_color: bool,\n \n+    /// Forces colors; provided for compatibility with [FORCE_COLOR](https://force-color.org).\n+    /// Takes precedence over `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"FORCE_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n+    pub(crate) force_color: bool,",
        "comment_created_at": "2024-06-03T19:12:38+00:00",
        "comment_author": "charliermarsh",
        "comment_body": "No, in Ruff IIRC we use `colored`. It detects some of these for us, and then we check for `FORCE_COLOR` with:\r\n\r\n```rust\r\n// support FORCE_COLOR env var\r\nif let Some(force_color) = std::env::var_os(\"FORCE_COLOR\") {\r\n    if force_color.len() > 0 {\r\n        colored::control::set_override(true);\r\n    }\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1625178870",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3979,
        "pr_file": "crates/uv/src/cli.rs",
        "discussion_id": "1624896771",
        "commented_code": "@@ -51,17 +51,34 @@ pub(crate) struct GlobalArgs {\n     #[arg(global = true, action = clap::ArgAction::Count, long, short, conflicts_with = \"quiet\")]\n     pub(crate) verbose: u8,\n \n-    /// Disable colors; provided for compatibility with `pip`.\n-    #[arg(global = true, long, hide = true, conflicts_with = \"color\")]\n+    /// Disable colors; provided for compatibility with [NO_COLOR](https://no-color.org) and `pip`.\n+    /// Takes precedence over `force_color` and `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"NO_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n     pub(crate) no_color: bool,\n \n+    /// Forces colors; provided for compatibility with [FORCE_COLOR](https://force-color.org).\n+    /// Takes precedence over `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"FORCE_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n+    pub(crate) force_color: bool,",
        "comment_created_at": "2024-06-04T00:08:03+00:00",
        "comment_author": "charliermarsh",
        "comment_body": "@samypr100 - Let's change to read these env vars directly, I think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1625183458",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3979,
        "pr_file": "crates/uv/src/cli.rs",
        "discussion_id": "1624896771",
        "commented_code": "@@ -51,17 +51,34 @@ pub(crate) struct GlobalArgs {\n     #[arg(global = true, action = clap::ArgAction::Count, long, short, conflicts_with = \"quiet\")]\n     pub(crate) verbose: u8,\n \n-    /// Disable colors; provided for compatibility with `pip`.\n-    #[arg(global = true, long, hide = true, conflicts_with = \"color\")]\n+    /// Disable colors; provided for compatibility with [NO_COLOR](https://no-color.org) and `pip`.\n+    /// Takes precedence over `force_color` and `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"NO_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n     pub(crate) no_color: bool,\n \n+    /// Forces colors; provided for compatibility with [FORCE_COLOR](https://force-color.org).\n+    /// Takes precedence over `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"FORCE_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n+    pub(crate) force_color: bool,",
        "comment_created_at": "2024-06-04T00:17:21+00:00",
        "comment_author": "epage",
        "comment_body": "I think i saw a reference to uv using anstream. The equivalent of `colored` for setting the global is https://docs.rs/anstream/latest/anstream/enum.ColorChoice.html#method.write_global",
        "pr_file_module": null
      },
      {
        "comment_id": "1625188647",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3979,
        "pr_file": "crates/uv/src/cli.rs",
        "discussion_id": "1624896771",
        "commented_code": "@@ -51,17 +51,34 @@ pub(crate) struct GlobalArgs {\n     #[arg(global = true, action = clap::ArgAction::Count, long, short, conflicts_with = \"quiet\")]\n     pub(crate) verbose: u8,\n \n-    /// Disable colors; provided for compatibility with `pip`.\n-    #[arg(global = true, long, hide = true, conflicts_with = \"color\")]\n+    /// Disable colors; provided for compatibility with [NO_COLOR](https://no-color.org) and `pip`.\n+    /// Takes precedence over `force_color` and `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"NO_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n     pub(crate) no_color: bool,\n \n+    /// Forces colors; provided for compatibility with [FORCE_COLOR](https://force-color.org).\n+    /// Takes precedence over `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"FORCE_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n+    pub(crate) force_color: bool,",
        "comment_created_at": "2024-06-04T00:28:34+00:00",
        "comment_author": "charliermarsh",
        "comment_body": "That's right, we use anstream in uv, but colored in Ruff!\r\n\r\nWe actually looked at migrating Ruff to anstream: https://github.com/astral-sh/ruff/pull/10784",
        "pr_file_module": null
      },
      {
        "comment_id": "1625240783",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3979,
        "pr_file": "crates/uv/src/cli.rs",
        "discussion_id": "1624896771",
        "commented_code": "@@ -51,17 +51,34 @@ pub(crate) struct GlobalArgs {\n     #[arg(global = true, action = clap::ArgAction::Count, long, short, conflicts_with = \"quiet\")]\n     pub(crate) verbose: u8,\n \n-    /// Disable colors; provided for compatibility with `pip`.\n-    #[arg(global = true, long, hide = true, conflicts_with = \"color\")]\n+    /// Disable colors; provided for compatibility with [NO_COLOR](https://no-color.org) and `pip`.\n+    /// Takes precedence over `force_color` and `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"NO_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n     pub(crate) no_color: bool,\n \n+    /// Forces colors; provided for compatibility with [FORCE_COLOR](https://force-color.org).\n+    /// Takes precedence over `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"FORCE_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n+    pub(crate) force_color: bool,",
        "comment_created_at": "2024-06-04T02:08:04+00:00",
        "comment_author": "samypr100",
        "comment_body": "> @samypr100 - Let's change to read these env vars directly, I think?\r\n\r\nDone in 1c451f6d44c9e99b8af699e736e36dc09c17c27f",
        "pr_file_module": null
      },
      {
        "comment_id": "1626153346",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3979,
        "pr_file": "crates/uv/src/cli.rs",
        "discussion_id": "1624896771",
        "commented_code": "@@ -51,17 +51,34 @@ pub(crate) struct GlobalArgs {\n     #[arg(global = true, action = clap::ArgAction::Count, long, short, conflicts_with = \"quiet\")]\n     pub(crate) verbose: u8,\n \n-    /// Disable colors; provided for compatibility with `pip`.\n-    #[arg(global = true, long, hide = true, conflicts_with = \"color\")]\n+    /// Disable colors; provided for compatibility with [NO_COLOR](https://no-color.org) and `pip`.\n+    /// Takes precedence over `force_color` and `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"NO_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n     pub(crate) no_color: bool,\n \n+    /// Forces colors; provided for compatibility with [FORCE_COLOR](https://force-color.org).\n+    /// Takes precedence over `color`.\n+    #[arg(\n+        global = true,\n+        long,\n+        hide = true,\n+        env = \"FORCE_COLOR\",\n+        value_parser = clap::builder::BoolishValueParser::new()\n+    )]\n+    pub(crate) force_color: bool,",
        "comment_created_at": "2024-06-04T14:46:59+00:00",
        "comment_author": "zanieb",
        "comment_body": "Thanks Ed!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1625241005",
    "pr_number": 3979,
    "pr_file": "crates/uv/src/settings.rs",
    "created_at": "2024-06-04T02:08:24+00:00",
    "commented_code": "Self {\n             quiet: args.quiet,\n             verbose: args.verbose,\n-            color: if args.no_color {\n+            color: if args.no_color || std::env::var_os(\"NO_COLOR\").is_some() {\n                 ColorChoice::Never\n+            } else if std::env::var_os(\"FORCE_COLOR\").is_some()\n+                || std::env::var_os(\"CLICOLOR_FORCE\").is_some()\n+            {\n+                ColorChoice::Always",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1625241005",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3979,
        "pr_file": "crates/uv/src/settings.rs",
        "discussion_id": "1625241005",
        "commented_code": "@@ -46,8 +46,12 @@ impl GlobalSettings {\n         Self {\n             quiet: args.quiet,\n             verbose: args.verbose,\n-            color: if args.no_color {\n+            color: if args.no_color || std::env::var_os(\"NO_COLOR\").is_some() {\n                 ColorChoice::Never\n+            } else if std::env::var_os(\"FORCE_COLOR\").is_some()\n+                || std::env::var_os(\"CLICOLOR_FORCE\").is_some()\n+            {\n+                ColorChoice::Always",
        "comment_created_at": "2024-06-04T02:08:24+00:00",
        "comment_author": "epage",
        "comment_body": "NO_COLOR says it should not be an empty string.  Same with FORCE_COLOR.  CLICOLOR *says* it should just be set but the example Python code checks that its non-empty.",
        "pr_file_module": null
      },
      {
        "comment_id": "1625245224",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3979,
        "pr_file": "crates/uv/src/settings.rs",
        "discussion_id": "1625241005",
        "commented_code": "@@ -46,8 +46,12 @@ impl GlobalSettings {\n         Self {\n             quiet: args.quiet,\n             verbose: args.verbose,\n-            color: if args.no_color {\n+            color: if args.no_color || std::env::var_os(\"NO_COLOR\").is_some() {\n                 ColorChoice::Never\n+            } else if std::env::var_os(\"FORCE_COLOR\").is_some()\n+                || std::env::var_os(\"CLICOLOR_FORCE\").is_some()\n+            {\n+                ColorChoice::Always",
        "comment_created_at": "2024-06-04T02:15:59+00:00",
        "comment_author": "samypr100",
        "comment_body": "Good point, I was looking at https://github.com/python/cpython/blob/3.13/Lib/_colorize.py#L53 too much",
        "pr_file_module": null
      },
      {
        "comment_id": "1625255265",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3979,
        "pr_file": "crates/uv/src/settings.rs",
        "discussion_id": "1625241005",
        "commented_code": "@@ -46,8 +46,12 @@ impl GlobalSettings {\n         Self {\n             quiet: args.quiet,\n             verbose: args.verbose,\n-            color: if args.no_color {\n+            color: if args.no_color || std::env::var_os(\"NO_COLOR\").is_some() {\n                 ColorChoice::Never\n+            } else if std::env::var_os(\"FORCE_COLOR\").is_some()\n+                || std::env::var_os(\"CLICOLOR_FORCE\").is_some()\n+            {\n+                ColorChoice::Always",
        "comment_created_at": "2024-06-04T02:33:37+00:00",
        "comment_author": "samypr100",
        "comment_body": "affba38815b1b4535dab9a6211f211a24c316f61, is this more along the lines of what you were thinking? @epage \r\n\r\nThanks for the review btw.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1999553958",
    "pr_number": 12246,
    "pr_file": "crates/uv-cli/src/lib.rs",
    "created_at": "2025-03-17T20:22:23+00:00",
    "commented_code": "#[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1999553958",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999553958",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.",
        "comment_created_at": "2025-03-17T20:22:23+00:00",
        "comment_author": "zanieb",
        "comment_body": "Similar to https://github.com/astral-sh/uv/pull/12246/files#r1999551644\r\n\r\n```suggestion\r\n    /// Only use uv-managed Python distributions.\r\n```\r\n\r\n(Sort of on the fence about \"installations\" vs \"distributions\" here but don't want users to be confused about whether we are \"installing\" here)\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1999556537",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999553958",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.",
        "comment_created_at": "2025-03-17T20:23:28+00:00",
        "comment_author": "zanieb",
        "comment_body": "I guess \"versions\" is actually the most consistent with other language?",
        "pr_file_module": null
      },
      {
        "comment_id": "1999576597",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999553958",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.",
        "comment_created_at": "2025-03-17T20:27:17+00:00",
        "comment_author": "zanieb",
        "comment_body": "I wonder if we should also mention that this is equivalent to the `python-preference = \"only-managed\"` setting? I'm not sure. We might want to reference `python-preference` though unless we intend to later add a `managed-python = true | false` option to the settings to replace `python-preference`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1999597740",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999553958",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.",
        "comment_created_at": "2025-03-17T20:31:37+00:00",
        "comment_author": "zanieb",
        "comment_body": "I also think a `UV_MANAGED_PYTHON=1|0` variable might makes sense for these new options. It seems easier to use than `UV_PYTHON_PREFERENCE`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2000599258",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999553958",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.",
        "comment_created_at": "2025-03-18T09:39:39+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "I'm hesitant to reference `python-preference` because the user might then try to learn two different ways to do the same thing (which might defeat part of the purpose of simplifying configuration here).",
        "pr_file_module": null
      },
      {
        "comment_id": "2000603119",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999553958",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.",
        "comment_created_at": "2025-03-18T09:41:41+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "It would be nice to use the same language consistently. I'm fine with \"versions\". There are a number of other points in help/docs where we say \"Python installations\" or \"Python distributions\". And we say \"Python installations\" in output (e.g., \"Searching for Python installations\"). \r\n\r\nI could open a separate issue for unifying this language and just update these ones to \"versions\" for now",
        "pr_file_module": null
      },
      {
        "comment_id": "2000623828",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999553958",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.",
        "comment_created_at": "2025-03-18T09:52:58+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "I considered an env var, but the problem is we have a third option as a default. \r\n\r\nWe could use `UV_MANAGED_PYTHON` to mean 1 == required, 0 == not required (i.e., managed then system). But then we don't have \"forbidden\" represented. I didn't want another multi-value env var if we still have `UV_PYTHON_PREFERENCE`. But it also seemed a little awkward to add a `UV_NO_MANAGED_PYTHON` env var. \r\n\r\nWhat do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "2001020669",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999553958",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.",
        "comment_created_at": "2025-03-18T13:14:40+00:00",
        "comment_author": "zanieb",
        "comment_body": "> It would be nice to use the same language consistently.\r\n\r\nYeah, but there are some places where it might be clearer to refer to installations or distributions. I think we should probably use \"versions\" when it's not confusing. It'd be good to audit other usages too, I'm sure there are more cases where we could switch to \"versions\".\r\n\r\nI think I'd prefer updating the ones here then opening an issue to standardize the language.\r\n\r\n> I'm hesitant to reference python-preference because the user might then try to learn two different ways to do the same thing \r\n\r\nSince there's not a configuration file setting for `managed-python`, I think it makes sense to explain how it's related? I wouldn't suggest the `--python-preference` CLI option.\r\n\r\n> I considered an env var, but the problem is we have a third option as a default.\r\n\r\nThinking out loud here...\r\n\r\nI assumed `UV_MANAGED_PYTHON=1` means `--managed-python` and `UV_MANAGED_PYTHON=0` means `--no-managed-python` while unset means default.\r\n\r\nLooking at some of our existing patterns, we do use `UV_NO_...` sometimes. I think most of them don't have an equivalent \"yes\" flag though. I might be okay with `UV_MANAGED_PYTHON=1` means `--managed-python` and `UV_NO_MANAGED_PYTHON=1` means `--no-managed-python`. I think `UV_MANAGED_PYTHON=0` not working would be surprising. That's how other boolean flags work today though, e.g.:\r\n\r\n```\r\n\u276f UV_SYSTEM_PYTHON=0 uv python find\r\n/opt/homebrew/opt/python@3.13/bin/python3.13\r\n```\r\n\r\nbut as you said, that's for an option that's truly binary.\r\n\r\nI think I've loosely talked myself into using `UV_NO_MANAGED_PYTHON` / `UV_MANAGED_PYTHON` :)\r\n\r\n\r\n ",
        "pr_file_module": null
      },
      {
        "comment_id": "2001078496",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12246,
        "pr_file": "crates/uv-cli/src/lib.rs",
        "discussion_id": "1999553958",
        "commented_code": "@@ -134,20 +134,39 @@ pub struct TopLevelArgs {\n #[command(next_help_heading = \"Global options\", next_display_order = 1000)]\n #[allow(clippy::struct_excessive_bools)]\n pub struct GlobalArgs {\n-    /// Whether to prefer uv-managed or system Python installations.\n+    #[arg(\n+        global = true,\n+        long,\n+        help_heading = \"Python options\",\n+        display_order = 700,\n+        env = EnvVars::UV_PYTHON_PREFERENCE,\n+        hide = true\n+    )]\n+    pub python_preference: Option<PythonPreference>,\n+\n+    /// Whether to require uv-managed Python installations.",
        "comment_created_at": "2025-03-18T13:40:57+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Yeah if `UV_MANAGED_PYTHON` is the only env var, I do think `UV_MANAGED_PYTHON=0` feels like \"don't use managed Python\". But I'd find the 0/1/unset options to be surprising. I guess I'd assume the default would effectively be 0. \r\n\r\nBut if we have two separate env vars `UV_MANAGED_PYTHON` and `UV_NO_MANAGED_PYTHON` this is probably less surprising, since it would mean 1 == use the flag, 0 == don't use the flag.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136568089",
    "pr_number": 13748,
    "pr_file": "crates/uv-static/src/env_vars.rs",
    "created_at": "2025-06-09T21:56:12+00:00",
    "commented_code": "/// Equivalent to the `--project` command-line argument.\n     pub const UV_PROJECT: &'static str = \"UV_PROJECT\";\n+\n+    /// Disable GitHub-specific shortcuts that let us skip `git fetch` in some circumstances.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2136568089",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13748,
        "pr_file": "crates/uv-static/src/env_vars.rs",
        "discussion_id": "2136568089",
        "commented_code": "@@ -727,4 +727,7 @@ impl EnvVars {\n \n     /// Equivalent to the `--project` command-line argument.\n     pub const UV_PROJECT: &'static str = \"UV_PROJECT\";\n+\n+    /// Disable GitHub-specific shortcuts that let us skip `git fetch` in some circumstances.",
        "comment_created_at": "2025-06-09T21:56:12+00:00",
        "comment_author": "zanieb",
        "comment_body": "```suggestion\r\n    /// Disable GitHub-specific requests that allow uv to skip `git fetch` in some circumstances.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2137347208",
    "pr_number": 13033,
    "pr_file": "crates/uv-static/src/env_vars.rs",
    "created_at": "2025-06-10T09:13:34+00:00",
    "commented_code": "#[attr_hidden]\n     pub const UV_TEST_INDEX_URL: &'static str = \"UV_TEST_INDEX_URL\";\n \n+    /// Used to set the GitHub fast-path url for tests.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2137347208",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13033,
        "pr_file": "crates/uv-static/src/env_vars.rs",
        "discussion_id": "2137347208",
        "commented_code": "@@ -667,6 +667,10 @@ impl EnvVars {\n     #[attr_hidden]\n     pub const UV_TEST_INDEX_URL: &'static str = \"UV_TEST_INDEX_URL\";\n \n+    /// Used to set the GitHub fast-path url for tests.",
        "comment_created_at": "2025-06-10T09:13:34+00:00",
        "comment_author": "konstin",
        "comment_body": "This should document what shape of URL is expected, is there something that GitHub considers as API root that users could exchange?",
        "pr_file_module": null
      },
      {
        "comment_id": "2160032924",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13033,
        "pr_file": "crates/uv-static/src/env_vars.rs",
        "discussion_id": "2137347208",
        "commented_code": "@@ -667,6 +667,10 @@ impl EnvVars {\n     #[attr_hidden]\n     pub const UV_TEST_INDEX_URL: &'static str = \"UV_TEST_INDEX_URL\";\n \n+    /// Used to set the GitHub fast-path url for tests.",
        "comment_created_at": "2025-06-21T13:02:54+00:00",
        "comment_author": "christeefy",
        "comment_body": "This env var's intended use is to mock the GitHub API root during tests. It's not meant for users to override, and is hidden from [user-facing docs](https://docs.astral.sh/uv/reference/environment/) with `#[attr_hidden]`. \r\n\r\nI can rename this to `UV_TEST_GITHUB_FAST_PATH_URL` to be even more explicit, assuming we are okay with `UV_TEST_*` appearing in non-test files.\r\n\r\nPlease let me know what you think. ",
        "pr_file_module": null
      }
    ]
  }
]