[
  {
    "discussion_id": "2141041780",
    "pr_number": 13976,
    "pr_file": "docs/reference/storage.md",
    "created_at": "2025-06-11T20:46:18+00:00",
    "commented_code": "+# Storage\n+\n+uv persists data in several locations on your system.\n+\n+## Directory Strategies\n+\n+uv follows platform conventions for determining where to store different types of data.\n+\n+Generally, it's best to configure these rather than each uv-specific storage location.\n+\n+### Cache\n+\n+For temporary files and caches:\n+\n+- `$XDG_CACHE_HOME/uv` or `$HOME/.cache/uv` on Unix systems",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2141041780",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13976,
        "pr_file": "docs/reference/storage.md",
        "discussion_id": "2141041780",
        "commented_code": "@@ -0,0 +1,127 @@\n+# Storage\n+\n+uv persists data in several locations on your system.\n+\n+## Directory Strategies\n+\n+uv follows platform conventions for determining where to store different types of data.\n+\n+Generally, it's best to configure these rather than each uv-specific storage location.\n+\n+### Cache\n+\n+For temporary files and caches:\n+\n+- `$XDG_CACHE_HOME/uv` or `$HOME/.cache/uv` on Unix systems",
        "comment_created_at": "2025-06-11T20:46:18+00:00",
        "comment_author": "konstin",
        "comment_body": "We should be using either `$HOME` or `~` throughout the document.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1802242488",
    "pr_number": 7976,
    "pr_file": "docs/reference/pyproject_toml.md",
    "created_at": "2024-10-16T02:21:34+00:00",
    "commented_code": "+# Pyproject.toml\n+\n+`pyproject.toml` is a\n+[standardized](https://packaging.python.org/en/latest/specifications/pyproject-toml/) file for\n+specifying the metadata and build system of a Python project. See [Projects](../guides/projects.md)\n+for an introduction.\n+\n+Most parts of uv only consider the name, version, (optional) dependencies and build system of a\n+project, and read only those fields from `pyproject.toml`. The `project.name` is always required,\n+while `project.version`. If `project.dependencies` is not specified, it means that the project has\n+no dependencies. If you need to use dynamic dependencies (discouraged), you must add `dependencies`\n+to `project.dynamic`. The same applies to `optional-dependencies`.\n+\n+For the build backend (`build-system = \"uv\"`), all fields are relevant and get translated to\n+[Core Metadata](https://packaging.python.org/en/latest/specifications/core-metadata) in the final\n+field. uv supports the\n+[living standard](https://packaging.python.org/en/latest/specifications/core-metadata) in addition\n+to the provisional [PEP 639](https://peps.python.org/pep-0639/) for better upload metadata. When\n+using the uv build backend, the `project.name`, `project.version`, `build-system.requires` and\n+`build-system.build-backend` keys are required, `project.dynamic` is not supported, and all other\n+fields are optional.\n+\n+## The `[build-system]` table\n+\n+The may be breaking changes to the uv build backend configuration in future uv versions, so you\n+constrain the uv version with lower and upper bounds.\n+\n+```toml\n+[build-system]\n+requires = [\"uv>=0.4.15,<5\"]\n+build-backend = \"uv\"\n+```\n+\n+## The `[project]` table\n+\n+The following fields are recognized in the `[project]` table.\n+\n+### `name`\n+\n+The name of the project. The name of the package should match the name of the Python module it\n+contains. The name can contain runs of `-`, `_`, and `.`, which uv internally replaces by a single\n+`-` (or `_` in filenames).\n+\n+### `version`\n+\n+The version of the project, following the\n+[Version Specifiers](https://packaging.python.org/en/latest/specifications/version-specifiers/)\n+rules. Examples: `1.2.3`, `1.2.3-alpha.4`, `1.2.3-beta.1`, `1.2.3-rc.3` and `2.0.0+cpu`.\n+\n+### `description`\n+\n+A short, single-line description of the project.\n+\n+### `readme`\n+\n+The path to the Readme, relative to project root.\n+\n+Three forms are supported:\n+\n+1. A single string value, containing the relative path to the Readme.\n+\n+   ```toml\n+   readme = \"path/to/Readme.md\"\n+   ```\n+\n+2. A table with the relative path to the Readme and a content type, one of `text/plain`,\n+   `text/x-rst`, `text/markdown`.\n+\n+   ```toml\n+   readme = { file = \"path/to/Readme.md\", content-type = \"text/markdown\"  }\n+   ```\n+\n+3. A table with the Readme text inline and a content type, one of `text/plain`, `text/x-rst`,\n+   `text/markdown`.\n+\n+   ```toml\n+   readme = { text = \"# Description\n\nThe project description\", content-type = \"text/markdown\" }\n+   ```\n+\n+### `requires-python`\n+\n+The minimum supported Python version as version specifiers, for example `>=3.10`. Adding an upper\n+bound or anything other than a lower bound is not recommended. While uv does preserve the specifiers\n+as written, the resolver does only use the lower bound on published packages.\n+\n+### `license` and `license-files`\n+\n+The packaging ecosystem is currently transitioning from packaging core metadata version 2.3 to\n+version 2.4, which brings an overhaul of the license metadata.\n+\n+In version 2.3, the two variants of the `license` key are supported, while `license-files` is not\n+supported:\n+\n+```toml\n+license = { file = \"LICENSE\" }\n+```\n+\n+```toml\n+license = { text = \"Lorem ipsum dolor sit amet\nconsetetur sadipscing elitr.\" }\n+```\n+\n+In version 2.4, the `license` key is an [SPDX Expression](https://spdx.org/licenses/) and\n+`license-files` is a list of glob expression of license files to include:\n+\n+```toml\n+license = \"MIT OR Apache-2.0\"\n+license-files = [\"LICENSE.apache\", \"LICENSE.mit\", \"_vendor/licenses/*\"]\n+```\n+\n+When using both `license-files` and `license`, `license` must be a valid SPDX expression. Using\n+`license` with a string or specifying `license-files` increases the default metadata version from\n+2.3 to 2.4. At time of writing, PyPI does not support publishing packages using version 2.4.\n+\n+### `authors` and `maintainers`\n+\n+Name and/or email address for the authors or maintainers of the project. Either a `name` key or an\n+`email` key must be present.\n+\n+```toml\n+authors = [\n+  { name = \"Ferris the crab\", email = \"ferris@example.net\" },\n+  { name = \"The project authors\" },\n+  { email = \"say-hi@example.org\" }\n+]\n+```\n+\n+### `keywords`\n+\n+List of terms that make the project easier to discover.\n+\n+```toml\n+keywords = [\"uv\", \"requirements\", \"packaging\"]\n+```\n+\n+### `classifiers`\n+\n+List of [Trove classifiers](https://pypi.org/classifiers/) describing the project.\n+\n+```toml\n+classifiers = [\n+  \"Development Status :: 4 - Beta\",\n+  \"Programming Language :: Python :: 3.11\",\n+  \"Programming Language :: Python :: 3.12\",\n+]\n+```\n+\n+To prevent a private project from accidentally being uploaded to PyPI, add the\n+`\"Private :: Do Not Upload\"` classifier.\n+\n+### `urls`\n+\n+Links to important pages of the project. The following labels are known to be supported:\n+\n+- `changelog` (Changelog): The project's comprehensive changelog\n+- `documentation` (Documentation): The project's online documentation\n+- `download` (Download): A download URL for the current distribution\n+- `funding` (Funding): Funding Information\n+- `homepage` (Homepage): The project's home page\n+- `issues` (Issue Tracker): The project's bug tracker\n+- `releasenotes` (Release Notes): The project's curated release notes\n+- `source` (Source Code): The project's hosted source code or repository\n+\n+```toml\n+[project.urls]\n+changelog = \"https://github.com/astral-sh/uv/blob/main/CHANGELOG.md\"\n+documentation = \"https://docs.astral.sh/uv\"\n+releases = \"https://github.com/astral-sh/uv/releases\"\n+repository = \"https://github.com/astral-sh/uv\"\n+```\n+\n+### `scripts`, `gui-scripts` and `entry-points`\n+\n+`scripts` define a mapping from a name to a Python function. When installing the package, the\n+installer adds a launcher in `.venv/bin` (Unix) or `.venv\\Scripts` (Windows) with that name that\n+launches the Python function. The Python function is given as the import-path to a module, separated\n+by dots, followed by a colon (`:`) and an argument-less function inside that module that will be\n+called. On Windows, starting a script by default creates a terminal. You can suppress this by using\n+`gui-scripts` instead. On other platforms, there is no difference between `scripts` and\n+`gui-scripts`.\n+\n+`entry-points` can define additional name/Python function mappings that can be read across packages\n+with [`importlib.metadata`](https://docs.python.org/3/library/importlib.metadata.html#entry-points),\n+which is useful for plugin interfaces.\n+\n+```toml\n+[project.scripts]\n+foo = \"foo.cli:launch\"\n+\n+[project.entry-points.bar_group]\n+foo-bar = \"foo:bar\"\n+```\n+\n+### `dependencies` and `optional-dependencies`\n+\n+See [Dependencies](../concepts/dependencies.md).\n+\n+### `dynamic`\n+\n+Dynamic metadata is not support. Please specify all metadata statically.\n+\n+## Full example\n+\n+```toml\n+[project]\n+name = \"foo\"\n+version = \"0.1.0\"\n+description = \"A Python package\"\n+readme = \"Readme.md\"\n+requires_python = \">=3.12\"\n+license = { file = \"License.txt\" }\n+authors = [{ name = \"Ferris the crab\", email = \"ferris@rustacean.net\" }]\n+maintainers = [{ name = \"Konsti\", email = \"konstin@mailbox.org\" }]\n+keywords = [\"demo\", \"example\", \"package\"]\n+classifiers = [\n+  \"Development Status :: 6 - Mature\",\n+  \"License :: OSI Approved :: MIT License\",\n+  \"Programming Language :: Python\",\n+]\n+dependencies = [\"flask>=3,<4\", \"sqlalchemy[asyncio]>=2.0.35<3\"]\n+\n+[project.optional-dependencies]\n+postgres = [\"psycopg>=3.2.2,<4\"]\n+mysql = [\"pymysql>=1.1.1,<2\"]\n+\n+[project.urls]\n+\"Homepage\" = \"https://github.com/astral-sh/uv\"\n+\"Repository\" = \"https://astral.sh\"\n+\n+[project.scripts]\n+foo = \"foo.cli:__main__\"",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1802242488",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 7976,
        "pr_file": "docs/reference/pyproject_toml.md",
        "discussion_id": "1802242488",
        "commented_code": "@@ -0,0 +1,241 @@\n+# Pyproject.toml\n+\n+`pyproject.toml` is a\n+[standardized](https://packaging.python.org/en/latest/specifications/pyproject-toml/) file for\n+specifying the metadata and build system of a Python project. See [Projects](../guides/projects.md)\n+for an introduction.\n+\n+Most parts of uv only consider the name, version, (optional) dependencies and build system of a\n+project, and read only those fields from `pyproject.toml`. The `project.name` is always required,\n+while `project.version`. If `project.dependencies` is not specified, it means that the project has\n+no dependencies. If you need to use dynamic dependencies (discouraged), you must add `dependencies`\n+to `project.dynamic`. The same applies to `optional-dependencies`.\n+\n+For the build backend (`build-system = \"uv\"`), all fields are relevant and get translated to\n+[Core Metadata](https://packaging.python.org/en/latest/specifications/core-metadata) in the final\n+field. uv supports the\n+[living standard](https://packaging.python.org/en/latest/specifications/core-metadata) in addition\n+to the provisional [PEP 639](https://peps.python.org/pep-0639/) for better upload metadata. When\n+using the uv build backend, the `project.name`, `project.version`, `build-system.requires` and\n+`build-system.build-backend` keys are required, `project.dynamic` is not supported, and all other\n+fields are optional.\n+\n+## The `[build-system]` table\n+\n+The may be breaking changes to the uv build backend configuration in future uv versions, so you\n+constrain the uv version with lower and upper bounds.\n+\n+```toml\n+[build-system]\n+requires = [\"uv>=0.4.15,<5\"]\n+build-backend = \"uv\"\n+```\n+\n+## The `[project]` table\n+\n+The following fields are recognized in the `[project]` table.\n+\n+### `name`\n+\n+The name of the project. The name of the package should match the name of the Python module it\n+contains. The name can contain runs of `-`, `_`, and `.`, which uv internally replaces by a single\n+`-` (or `_` in filenames).\n+\n+### `version`\n+\n+The version of the project, following the\n+[Version Specifiers](https://packaging.python.org/en/latest/specifications/version-specifiers/)\n+rules. Examples: `1.2.3`, `1.2.3-alpha.4`, `1.2.3-beta.1`, `1.2.3-rc.3` and `2.0.0+cpu`.\n+\n+### `description`\n+\n+A short, single-line description of the project.\n+\n+### `readme`\n+\n+The path to the Readme, relative to project root.\n+\n+Three forms are supported:\n+\n+1. A single string value, containing the relative path to the Readme.\n+\n+   ```toml\n+   readme = \"path/to/Readme.md\"\n+   ```\n+\n+2. A table with the relative path to the Readme and a content type, one of `text/plain`,\n+   `text/x-rst`, `text/markdown`.\n+\n+   ```toml\n+   readme = { file = \"path/to/Readme.md\", content-type = \"text/markdown\"  }\n+   ```\n+\n+3. A table with the Readme text inline and a content type, one of `text/plain`, `text/x-rst`,\n+   `text/markdown`.\n+\n+   ```toml\n+   readme = { text = \"# Description\\n\\nThe project description\", content-type = \"text/markdown\" }\n+   ```\n+\n+### `requires-python`\n+\n+The minimum supported Python version as version specifiers, for example `>=3.10`. Adding an upper\n+bound or anything other than a lower bound is not recommended. While uv does preserve the specifiers\n+as written, the resolver does only use the lower bound on published packages.\n+\n+### `license` and `license-files`\n+\n+The packaging ecosystem is currently transitioning from packaging core metadata version 2.3 to\n+version 2.4, which brings an overhaul of the license metadata.\n+\n+In version 2.3, the two variants of the `license` key are supported, while `license-files` is not\n+supported:\n+\n+```toml\n+license = { file = \"LICENSE\" }\n+```\n+\n+```toml\n+license = { text = \"Lorem ipsum dolor sit amet\\nconsetetur sadipscing elitr.\" }\n+```\n+\n+In version 2.4, the `license` key is an [SPDX Expression](https://spdx.org/licenses/) and\n+`license-files` is a list of glob expression of license files to include:\n+\n+```toml\n+license = \"MIT OR Apache-2.0\"\n+license-files = [\"LICENSE.apache\", \"LICENSE.mit\", \"_vendor/licenses/*\"]\n+```\n+\n+When using both `license-files` and `license`, `license` must be a valid SPDX expression. Using\n+`license` with a string or specifying `license-files` increases the default metadata version from\n+2.3 to 2.4. At time of writing, PyPI does not support publishing packages using version 2.4.\n+\n+### `authors` and `maintainers`\n+\n+Name and/or email address for the authors or maintainers of the project. Either a `name` key or an\n+`email` key must be present.\n+\n+```toml\n+authors = [\n+  { name = \"Ferris the crab\", email = \"ferris@example.net\" },\n+  { name = \"The project authors\" },\n+  { email = \"say-hi@example.org\" }\n+]\n+```\n+\n+### `keywords`\n+\n+List of terms that make the project easier to discover.\n+\n+```toml\n+keywords = [\"uv\", \"requirements\", \"packaging\"]\n+```\n+\n+### `classifiers`\n+\n+List of [Trove classifiers](https://pypi.org/classifiers/) describing the project.\n+\n+```toml\n+classifiers = [\n+  \"Development Status :: 4 - Beta\",\n+  \"Programming Language :: Python :: 3.11\",\n+  \"Programming Language :: Python :: 3.12\",\n+]\n+```\n+\n+To prevent a private project from accidentally being uploaded to PyPI, add the\n+`\"Private :: Do Not Upload\"` classifier.\n+\n+### `urls`\n+\n+Links to important pages of the project. The following labels are known to be supported:\n+\n+- `changelog` (Changelog): The project's comprehensive changelog\n+- `documentation` (Documentation): The project's online documentation\n+- `download` (Download): A download URL for the current distribution\n+- `funding` (Funding): Funding Information\n+- `homepage` (Homepage): The project's home page\n+- `issues` (Issue Tracker): The project's bug tracker\n+- `releasenotes` (Release Notes): The project's curated release notes\n+- `source` (Source Code): The project's hosted source code or repository\n+\n+```toml\n+[project.urls]\n+changelog = \"https://github.com/astral-sh/uv/blob/main/CHANGELOG.md\"\n+documentation = \"https://docs.astral.sh/uv\"\n+releases = \"https://github.com/astral-sh/uv/releases\"\n+repository = \"https://github.com/astral-sh/uv\"\n+```\n+\n+### `scripts`, `gui-scripts` and `entry-points`\n+\n+`scripts` define a mapping from a name to a Python function. When installing the package, the\n+installer adds a launcher in `.venv/bin` (Unix) or `.venv\\Scripts` (Windows) with that name that\n+launches the Python function. The Python function is given as the import-path to a module, separated\n+by dots, followed by a colon (`:`) and an argument-less function inside that module that will be\n+called. On Windows, starting a script by default creates a terminal. You can suppress this by using\n+`gui-scripts` instead. On other platforms, there is no difference between `scripts` and\n+`gui-scripts`.\n+\n+`entry-points` can define additional name/Python function mappings that can be read across packages\n+with [`importlib.metadata`](https://docs.python.org/3/library/importlib.metadata.html#entry-points),\n+which is useful for plugin interfaces.\n+\n+```toml\n+[project.scripts]\n+foo = \"foo.cli:launch\"\n+\n+[project.entry-points.bar_group]\n+foo-bar = \"foo:bar\"\n+```\n+\n+### `dependencies` and `optional-dependencies`\n+\n+See [Dependencies](../concepts/dependencies.md).\n+\n+### `dynamic`\n+\n+Dynamic metadata is not support. Please specify all metadata statically.\n+\n+## Full example\n+\n+```toml\n+[project]\n+name = \"foo\"\n+version = \"0.1.0\"\n+description = \"A Python package\"\n+readme = \"Readme.md\"\n+requires_python = \">=3.12\"\n+license = { file = \"License.txt\" }\n+authors = [{ name = \"Ferris the crab\", email = \"ferris@rustacean.net\" }]\n+maintainers = [{ name = \"Konsti\", email = \"konstin@mailbox.org\" }]\n+keywords = [\"demo\", \"example\", \"package\"]\n+classifiers = [\n+  \"Development Status :: 6 - Mature\",\n+  \"License :: OSI Approved :: MIT License\",\n+  \"Programming Language :: Python\",\n+]\n+dependencies = [\"flask>=3,<4\", \"sqlalchemy[asyncio]>=2.0.35<3\"]\n+\n+[project.optional-dependencies]\n+postgres = [\"psycopg>=3.2.2,<4\"]\n+mysql = [\"pymysql>=1.1.1,<2\"]\n+\n+[project.urls]\n+\"Homepage\" = \"https://github.com/astral-sh/uv\"\n+\"Repository\" = \"https://astral.sh\"\n+\n+[project.scripts]\n+foo = \"foo.cli:__main__\"",
        "comment_created_at": "2024-10-16T02:21:34+00:00",
        "comment_author": "pantheraleo-7",
        "comment_body": "```suggestion\r\nfoo = \"foo.cli:main\"\r\n```\r\n\r\nnaming the main function as `__main__` will be confusing (with the `__name__=='__main__'` idiom) and there's no precedent for naming the main function as a dunder afaik",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1825187036",
    "pr_number": 7976,
    "pr_file": "docs/reference/pyproject_toml.md",
    "created_at": "2024-10-31T21:34:25+00:00",
    "commented_code": "+# Pyproject.toml\n+\n+`pyproject.toml` is a\n+[standardized](https://packaging.python.org/en/latest/specifications/pyproject-toml/) file for\n+specifying the metadata and build system of a Python project. See [Projects](../guides/projects.md)\n+for an introduction.\n+\n+Most parts of uv only consider the name, version, (optional) dependencies and build system of a\n+project, and read only those fields from `pyproject.toml`. The `project.name` is always required,\n+while `project.version`. If `project.dependencies` is not specified, it means that the project has\n+no dependencies. If you need to use dynamic dependencies (discouraged), you must add `dependencies`\n+to `project.dynamic`. The same applies to `optional-dependencies`.\n+\n+For the build backend (`build-system = \"uv\"`), all fields are relevant and get translated to\n+[Core Metadata](https://packaging.python.org/en/latest/specifications/core-metadata) in the final\n+field. uv supports the\n+[living standard](https://packaging.python.org/en/latest/specifications/core-metadata) in addition\n+to the provisional [PEP 639](https://peps.python.org/pep-0639/) for better upload metadata. When\n+using the uv build backend, the `project.name`, `project.version`, `build-system.requires` and\n+`build-system.build-backend` keys are required, `project.dynamic` is not supported, and all other\n+fields are optional.\n+\n+## The `[build-system]` table\n+\n+The may be breaking changes to the uv build backend configuration in future uv versions, so you\n+constrain the uv version with lower and upper bounds.\n+\n+```toml\n+[build-system]\n+requires = [\"uv>=0.4.15,<5\"]\n+build-backend = \"uv\"\n+```\n+\n+## The `[project]` table\n+\n+The following fields are recognized in the `[project]` table.\n+\n+### `name`\n+\n+The name of the project. The name of the package should match the name of the Python module it\n+contains. The name can contain runs of `-`, `_`, and `.`, which uv internally replaces by a single\n+`-` (or `_` in filenames).\n+\n+### `version`\n+\n+The version of the project, following the\n+[Version Specifiers](https://packaging.python.org/en/latest/specifications/version-specifiers/)\n+rules. Examples: `1.2.3`, `1.2.3-alpha.4`, `1.2.3-beta.1`, `1.2.3-rc.3` and `2.0.0+cpu`.\n+\n+### `description`\n+\n+A short, single-line description of the project.\n+\n+### `readme`\n+\n+The path to the Readme, relative to project root.\n+\n+Three forms are supported:\n+\n+1. A single string value, containing the relative path to the Readme.\n+\n+   ```toml\n+   readme = \"path/to/Readme.md\"\n+   ```\n+\n+2. A table with the relative path to the Readme and a content type, one of `text/plain`,\n+   `text/x-rst`, `text/markdown`.\n+\n+   ```toml\n+   readme = { file = \"path/to/Readme.md\", content-type = \"text/markdown\"  }\n+   ```\n+\n+3. A table with the Readme text inline and a content type, one of `text/plain`, `text/x-rst`,\n+   `text/markdown`.\n+\n+   ```toml\n+   readme = { text = \"# Description\n\nThe project description\", content-type = \"text/markdown\" }\n+   ```\n+\n+### `requires-python`\n+\n+The minimum supported Python version as version specifiers, for example `>=3.10`. Adding an upper\n+bound or anything other than a lower bound is not recommended. While uv does preserve the specifiers\n+as written, the resolver does only use the lower bound on published packages.\n+\n+### `license` and `license-files`\n+\n+The packaging ecosystem is currently transitioning from packaging core metadata version 2.3 to\n+version 2.4, which brings an overhaul of the license metadata.\n+\n+In version 2.3, the two variants of the `license` key are supported, while `license-files` is not\n+supported:\n+\n+```toml\n+license = { file = \"LICENSE\" }\n+```\n+\n+```toml\n+license = { text = \"Lorem ipsum dolor sit amet\nconsetetur sadipscing elitr.\" }\n+```\n+\n+In version 2.4, the `license` key is an [SPDX Expression](https://spdx.org/licenses/) and\n+`license-files` is a list of glob expression of license files to include:\n+\n+```toml\n+license = \"MIT OR Apache-2.0\"\n+license-files = [\"LICENSE.apache\", \"LICENSE.mit\", \"_vendor/licenses/*\"]\n+```\n+\n+When using both `license-files` and `license`, `license` must be a valid SPDX expression. Using\n+`license` with a string or specifying `license-files` increases the default metadata version from\n+2.3 to 2.4. At time of writing, PyPI does not support publishing packages using version 2.4.\n+\n+### `authors` and `maintainers`\n+\n+Name and/or email address for the authors or maintainers of the project. Either a `name` key or an\n+`email` key must be present.\n+\n+```toml\n+authors = [\n+  { name = \"Ferris the crab\", email = \"ferris@example.net\" },\n+  { name = \"The project authors\" },\n+  { email = \"say-hi@example.org\" }\n+]\n+```\n+\n+### `keywords`\n+\n+List of terms that make the project easier to discover.\n+\n+```toml\n+keywords = [\"uv\", \"requirements\", \"packaging\"]\n+```\n+\n+### `classifiers`\n+\n+List of [Trove classifiers](https://pypi.org/classifiers/) describing the project.\n+\n+```toml\n+classifiers = [\n+  \"Development Status :: 4 - Beta\",\n+  \"Programming Language :: Python :: 3.11\",\n+  \"Programming Language :: Python :: 3.12\",\n+]\n+```\n+\n+To prevent a private project from accidentally being uploaded to PyPI, add the\n+`\"Private :: Do Not Upload\"` classifier.\n+\n+### `urls`\n+\n+Links to important pages of the project. The following labels are known to be supported:\n+\n+- `changelog` (Changelog): The project's comprehensive changelog\n+- `documentation` (Documentation): The project's online documentation\n+- `download` (Download): A download URL for the current distribution\n+- `funding` (Funding): Funding Information\n+- `homepage` (Homepage): The project's home page\n+- `issues` (Issue Tracker): The project's bug tracker\n+- `releasenotes` (Release Notes): The project's curated release notes\n+- `source` (Source Code): The project's hosted source code or repository\n+\n+```toml\n+[project.urls]\n+changelog = \"https://github.com/astral-sh/uv/blob/main/CHANGELOG.md\"\n+documentation = \"https://docs.astral.sh/uv\"\n+releases = \"https://github.com/astral-sh/uv/releases\"\n+repository = \"https://github.com/astral-sh/uv\"\n+```\n+\n+### `scripts`, `gui-scripts` and `entry-points`\n+\n+`scripts` define a mapping from a name to a Python function. When installing the package, the\n+installer adds a launcher in `.venv/bin` (Unix) or `.venv\\Scripts` (Windows) with that name that\n+launches the Python function. The Python function is given as the import-path to a module, separated\n+by dots, followed by a colon (`:`) and an argument-less function inside that module that will be\n+called. On Windows, starting a script by default creates a terminal. You can suppress this by using\n+`gui-scripts` instead. On other platforms, there is no difference between `scripts` and\n+`gui-scripts`.\n+\n+`entry-points` can define additional name/Python function mappings that can be read across packages\n+with [`importlib.metadata`](https://docs.python.org/3/library/importlib.metadata.html#entry-points),\n+which is useful for plugin interfaces.\n+\n+```toml\n+[project.scripts]\n+foo = \"foo.cli:launch\"\n+\n+[project.entry-points.bar_group]\n+foo-bar = \"foo:bar\"\n+```\n+\n+### `dependencies` and `optional-dependencies`\n+\n+See [Dependencies](../concepts/dependencies.md).\n+\n+### `dynamic`\n+\n+Dynamic metadata is not supported. Please specify all metadata statically.\n+\n+## Full example\n+\n+```toml\n+[project]\n+name = \"foo\"\n+version = \"0.1.0\"\n+description = \"A Python package\"\n+readme = \"Readme.md\"\n+requires_python = \">=3.12\"\n+license = { file = \"License.txt\" }",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1825187036",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 7976,
        "pr_file": "docs/reference/pyproject_toml.md",
        "discussion_id": "1825187036",
        "commented_code": "@@ -0,0 +1,241 @@\n+# Pyproject.toml\n+\n+`pyproject.toml` is a\n+[standardized](https://packaging.python.org/en/latest/specifications/pyproject-toml/) file for\n+specifying the metadata and build system of a Python project. See [Projects](../guides/projects.md)\n+for an introduction.\n+\n+Most parts of uv only consider the name, version, (optional) dependencies and build system of a\n+project, and read only those fields from `pyproject.toml`. The `project.name` is always required,\n+while `project.version`. If `project.dependencies` is not specified, it means that the project has\n+no dependencies. If you need to use dynamic dependencies (discouraged), you must add `dependencies`\n+to `project.dynamic`. The same applies to `optional-dependencies`.\n+\n+For the build backend (`build-system = \"uv\"`), all fields are relevant and get translated to\n+[Core Metadata](https://packaging.python.org/en/latest/specifications/core-metadata) in the final\n+field. uv supports the\n+[living standard](https://packaging.python.org/en/latest/specifications/core-metadata) in addition\n+to the provisional [PEP 639](https://peps.python.org/pep-0639/) for better upload metadata. When\n+using the uv build backend, the `project.name`, `project.version`, `build-system.requires` and\n+`build-system.build-backend` keys are required, `project.dynamic` is not supported, and all other\n+fields are optional.\n+\n+## The `[build-system]` table\n+\n+The may be breaking changes to the uv build backend configuration in future uv versions, so you\n+constrain the uv version with lower and upper bounds.\n+\n+```toml\n+[build-system]\n+requires = [\"uv>=0.4.15,<5\"]\n+build-backend = \"uv\"\n+```\n+\n+## The `[project]` table\n+\n+The following fields are recognized in the `[project]` table.\n+\n+### `name`\n+\n+The name of the project. The name of the package should match the name of the Python module it\n+contains. The name can contain runs of `-`, `_`, and `.`, which uv internally replaces by a single\n+`-` (or `_` in filenames).\n+\n+### `version`\n+\n+The version of the project, following the\n+[Version Specifiers](https://packaging.python.org/en/latest/specifications/version-specifiers/)\n+rules. Examples: `1.2.3`, `1.2.3-alpha.4`, `1.2.3-beta.1`, `1.2.3-rc.3` and `2.0.0+cpu`.\n+\n+### `description`\n+\n+A short, single-line description of the project.\n+\n+### `readme`\n+\n+The path to the Readme, relative to project root.\n+\n+Three forms are supported:\n+\n+1. A single string value, containing the relative path to the Readme.\n+\n+   ```toml\n+   readme = \"path/to/Readme.md\"\n+   ```\n+\n+2. A table with the relative path to the Readme and a content type, one of `text/plain`,\n+   `text/x-rst`, `text/markdown`.\n+\n+   ```toml\n+   readme = { file = \"path/to/Readme.md\", content-type = \"text/markdown\"  }\n+   ```\n+\n+3. A table with the Readme text inline and a content type, one of `text/plain`, `text/x-rst`,\n+   `text/markdown`.\n+\n+   ```toml\n+   readme = { text = \"# Description\\n\\nThe project description\", content-type = \"text/markdown\" }\n+   ```\n+\n+### `requires-python`\n+\n+The minimum supported Python version as version specifiers, for example `>=3.10`. Adding an upper\n+bound or anything other than a lower bound is not recommended. While uv does preserve the specifiers\n+as written, the resolver does only use the lower bound on published packages.\n+\n+### `license` and `license-files`\n+\n+The packaging ecosystem is currently transitioning from packaging core metadata version 2.3 to\n+version 2.4, which brings an overhaul of the license metadata.\n+\n+In version 2.3, the two variants of the `license` key are supported, while `license-files` is not\n+supported:\n+\n+```toml\n+license = { file = \"LICENSE\" }\n+```\n+\n+```toml\n+license = { text = \"Lorem ipsum dolor sit amet\\nconsetetur sadipscing elitr.\" }\n+```\n+\n+In version 2.4, the `license` key is an [SPDX Expression](https://spdx.org/licenses/) and\n+`license-files` is a list of glob expression of license files to include:\n+\n+```toml\n+license = \"MIT OR Apache-2.0\"\n+license-files = [\"LICENSE.apache\", \"LICENSE.mit\", \"_vendor/licenses/*\"]\n+```\n+\n+When using both `license-files` and `license`, `license` must be a valid SPDX expression. Using\n+`license` with a string or specifying `license-files` increases the default metadata version from\n+2.3 to 2.4. At time of writing, PyPI does not support publishing packages using version 2.4.\n+\n+### `authors` and `maintainers`\n+\n+Name and/or email address for the authors or maintainers of the project. Either a `name` key or an\n+`email` key must be present.\n+\n+```toml\n+authors = [\n+  { name = \"Ferris the crab\", email = \"ferris@example.net\" },\n+  { name = \"The project authors\" },\n+  { email = \"say-hi@example.org\" }\n+]\n+```\n+\n+### `keywords`\n+\n+List of terms that make the project easier to discover.\n+\n+```toml\n+keywords = [\"uv\", \"requirements\", \"packaging\"]\n+```\n+\n+### `classifiers`\n+\n+List of [Trove classifiers](https://pypi.org/classifiers/) describing the project.\n+\n+```toml\n+classifiers = [\n+  \"Development Status :: 4 - Beta\",\n+  \"Programming Language :: Python :: 3.11\",\n+  \"Programming Language :: Python :: 3.12\",\n+]\n+```\n+\n+To prevent a private project from accidentally being uploaded to PyPI, add the\n+`\"Private :: Do Not Upload\"` classifier.\n+\n+### `urls`\n+\n+Links to important pages of the project. The following labels are known to be supported:\n+\n+- `changelog` (Changelog): The project's comprehensive changelog\n+- `documentation` (Documentation): The project's online documentation\n+- `download` (Download): A download URL for the current distribution\n+- `funding` (Funding): Funding Information\n+- `homepage` (Homepage): The project's home page\n+- `issues` (Issue Tracker): The project's bug tracker\n+- `releasenotes` (Release Notes): The project's curated release notes\n+- `source` (Source Code): The project's hosted source code or repository\n+\n+```toml\n+[project.urls]\n+changelog = \"https://github.com/astral-sh/uv/blob/main/CHANGELOG.md\"\n+documentation = \"https://docs.astral.sh/uv\"\n+releases = \"https://github.com/astral-sh/uv/releases\"\n+repository = \"https://github.com/astral-sh/uv\"\n+```\n+\n+### `scripts`, `gui-scripts` and `entry-points`\n+\n+`scripts` define a mapping from a name to a Python function. When installing the package, the\n+installer adds a launcher in `.venv/bin` (Unix) or `.venv\\Scripts` (Windows) with that name that\n+launches the Python function. The Python function is given as the import-path to a module, separated\n+by dots, followed by a colon (`:`) and an argument-less function inside that module that will be\n+called. On Windows, starting a script by default creates a terminal. You can suppress this by using\n+`gui-scripts` instead. On other platforms, there is no difference between `scripts` and\n+`gui-scripts`.\n+\n+`entry-points` can define additional name/Python function mappings that can be read across packages\n+with [`importlib.metadata`](https://docs.python.org/3/library/importlib.metadata.html#entry-points),\n+which is useful for plugin interfaces.\n+\n+```toml\n+[project.scripts]\n+foo = \"foo.cli:launch\"\n+\n+[project.entry-points.bar_group]\n+foo-bar = \"foo:bar\"\n+```\n+\n+### `dependencies` and `optional-dependencies`\n+\n+See [Dependencies](../concepts/dependencies.md).\n+\n+### `dynamic`\n+\n+Dynamic metadata is not supported. Please specify all metadata statically.\n+\n+## Full example\n+\n+```toml\n+[project]\n+name = \"foo\"\n+version = \"0.1.0\"\n+description = \"A Python package\"\n+readme = \"Readme.md\"\n+requires_python = \">=3.12\"\n+license = { file = \"License.txt\" }",
        "comment_created_at": "2024-10-31T21:34:25+00:00",
        "comment_author": "chrisrodrigue",
        "comment_body": "nit: usually stylized as `README.md` and `LICENSE` (no file extension).\r\n\r\nIf you think flat is better than nested, license can also be expressed as `license.file = \"LICENSE\"`",
        "pr_file_module": null
      }
    ]
  }
]