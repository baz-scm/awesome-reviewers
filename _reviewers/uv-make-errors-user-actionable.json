[
  {
    "discussion_id": "1915204557",
    "pr_number": 8649,
    "pr_file": "crates/uv-trampoline-builder/src/lib.rs",
    "created_at": "2025-01-14T16:35:20+00:00",
    "commented_code": "/// If the file cannot be read, an [`io::Error`] is returned. If the path is not a launcher,\n     /// `None` is returned.\n     #[allow(clippy::cast_possible_wrap)]\n-    pub fn try_from_file(file: &mut File) -> Result<Option<Self>, Error> {\n+    pub fn try_from_file(file: &mut File, skip_bytes: usize) -> Result<Option<Self>, Error> {",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1915204557",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 8649,
        "pr_file": "crates/uv-trampoline-builder/src/lib.rs",
        "discussion_id": "1915204557",
        "commented_code": "@@ -156,9 +167,11 @@ impl LauncherKind {\n     /// If the file cannot be read, an [`io::Error`] is returned. If the path is not a launcher,\n     /// `None` is returned.\n     #[allow(clippy::cast_possible_wrap)]\n-    pub fn try_from_file(file: &mut File) -> Result<Option<Self>, Error> {\n+    pub fn try_from_file(file: &mut File, skip_bytes: usize) -> Result<Option<Self>, Error> {",
        "comment_created_at": "2025-01-14T16:35:20+00:00",
        "comment_author": "T-256",
        "comment_body": "function return type could be `Result<Self, Error>`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1915239986",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 8649,
        "pr_file": "crates/uv-trampoline-builder/src/lib.rs",
        "discussion_id": "1915204557",
        "commented_code": "@@ -156,9 +167,11 @@ impl LauncherKind {\n     /// If the file cannot be read, an [`io::Error`] is returned. If the path is not a launcher,\n     /// `None` is returned.\n     #[allow(clippy::cast_possible_wrap)]\n-    pub fn try_from_file(file: &mut File) -> Result<Option<Self>, Error> {\n+    pub fn try_from_file(file: &mut File, skip_bytes: usize) -> Result<Option<Self>, Error> {",
        "comment_created_at": "2025-01-14T16:51:04+00:00",
        "comment_author": "nahco314",
        "comment_body": "Thank you for your review and suggestion!\r\nHowever, since it is LauncherKind::try_from_file that determines whether the file is actually a launcher, I believe returning Ok(None) makes sense when the file is not recognized as one.",
        "pr_file_module": null
      },
      {
        "comment_id": "1915278962",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 8649,
        "pr_file": "crates/uv-trampoline-builder/src/lib.rs",
        "discussion_id": "1915204557",
        "commented_code": "@@ -156,9 +167,11 @@ impl LauncherKind {\n     /// If the file cannot be read, an [`io::Error`] is returned. If the path is not a launcher,\n     /// `None` is returned.\n     #[allow(clippy::cast_possible_wrap)]\n-    pub fn try_from_file(file: &mut File) -> Result<Option<Self>, Error> {\n+    pub fn try_from_file(file: &mut File, skip_bytes: usize) -> Result<Option<Self>, Error> {",
        "comment_created_at": "2025-01-14T17:13:05+00:00",
        "comment_author": "T-256",
        "comment_body": "> I believe returning Ok(None) makes sense when the file is not recognized as one.\r\n\r\nI think a meaningful `Error` variant also does the job.\r\n\r\n```diff\r\n-        let Ok(_) = file.seek(io::SeekFrom::End(\r\n-            -((skip_bytes + MAGIC_NUMBER_SIZE) as i64),\r\n-        )) else {\r\n-            return Ok(None);\r\n-        };\r\n+        file.seek(io::SeekFrom::End(\r\n+            -((skip_bytes + MAGIC_NUMBER_SIZE) as i64),\r\n+        )).map_err(Error::InvalidLauncherSeek)?;  # <-- I think this is more proper return than `Ok(None)`\r\n\r\n...\r\n\r\n- Ok(Self::try_from_bytes(buffer))\r\n+ Self::try_from_bytes(buffer).ok_or(Error::InvalidMagic)\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1915754384",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 8649,
        "pr_file": "crates/uv-trampoline-builder/src/lib.rs",
        "discussion_id": "1915204557",
        "commented_code": "@@ -156,9 +167,11 @@ impl LauncherKind {\n     /// If the file cannot be read, an [`io::Error`] is returned. If the path is not a launcher,\n     /// `None` is returned.\n     #[allow(clippy::cast_possible_wrap)]\n-    pub fn try_from_file(file: &mut File) -> Result<Option<Self>, Error> {\n+    pub fn try_from_file(file: &mut File, skip_bytes: usize) -> Result<Option<Self>, Error> {",
        "comment_created_at": "2025-01-14T23:40:12+00:00",
        "comment_author": "nahco314",
        "comment_body": "Are you suggesting that, rather than just changing LauncherKind::try_from_path, we should also implement Launcher::try_from_path so that it does not return an Option in the first place?",
        "pr_file_module": null
      },
      {
        "comment_id": "1961795542",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 8649,
        "pr_file": "crates/uv-trampoline-builder/src/lib.rs",
        "discussion_id": "1915204557",
        "commented_code": "@@ -156,9 +167,11 @@ impl LauncherKind {\n     /// If the file cannot be read, an [`io::Error`] is returned. If the path is not a launcher,\n     /// `None` is returned.\n     #[allow(clippy::cast_possible_wrap)]\n-    pub fn try_from_file(file: &mut File) -> Result<Option<Self>, Error> {\n+    pub fn try_from_file(file: &mut File, skip_bytes: usize) -> Result<Option<Self>, Error> {",
        "comment_created_at": "2025-02-19T14:33:41+00:00",
        "comment_author": "nahco314",
        "comment_body": "Error handling changes a little, but the operation is fine, so I switched to this method.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2137918996",
    "pr_number": 13735,
    "pr_file": "crates/uv/tests/it/run.rs",
    "created_at": "2025-06-10T13:32:07+00:00",
    "commented_code": "Ok(())\n }\n+\n+#[test]\n+fn run_groups_requires_python() -> Result<()> {\n+    let context = TestContext::new_with_versions(&[\"3.11\", \"3.12\", \"3.13\"]);\n+\n+    let pyproject_toml = context.temp_dir.child(\"pyproject.toml\");\n+    pyproject_toml.write_str(\n+        r#\"\n+        [project]\n+        name = \"project\"\n+        version = \"0.1.0\"\n+        requires-python = \">=3.11\"\n+        dependencies = [\"typing-extensions\"]\n+\n+        [dependency-groups]\n+        foo = [\"anyio\"]\n+        bar = [\"iniconfig\"]\n+        dev = [\"sniffio\"]\n+\n+        [tool.uv.dependency-groups]\n+        foo = {requires-python=\">=3.14\"}\n+        bar = {requires-python=\">=3.13\"}\n+        dev = {requires-python=\">=3.12\"}\n+        \"#,\n+    )?;\n+\n+    context.lock().assert().success();\n+\n+    // With --no-default-groups only the main requires-python should be consulted\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--no-default-groups\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 1 package in [TIME]\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and the default group's requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and \"dev\" and \"bar\" requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--group\").arg(\"bar\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.13.[X] interpreter at: [PYTHON-3.13]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 3 packages in [TIME]\n+     + iniconfig==2.0.0\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Going back to just \"dev\" we shouldn't churn the venv needlessly\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Resolved 6 packages in [TIME]\n+    Audited 2 packages in [TIME]\n+    \");\n+\n+    // Explicitly requesting an in-range python can downgrade\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.12\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Explicitly requesting an out-of-range python fails\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.11\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: false\n+    exit_code: 2\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    error: The requested interpreter resolved to Python 3.11.[X], which is incompatible with the project's Python requirement: `>=3.12`. However, a workspace member (`project`) supports Python >=3.11. To install the workspace member on its own, navigate to ``, then run `uv venv --python 3.11.[X]` followed by `uv pip install -e .`.\n+    \");",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2137918996",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13735,
        "pr_file": "crates/uv/tests/it/run.rs",
        "discussion_id": "2137918996",
        "commented_code": "@@ -4598,6 +4598,248 @@ fn run_default_groups() -> Result<()> {\n \n     Ok(())\n }\n+\n+#[test]\n+fn run_groups_requires_python() -> Result<()> {\n+    let context = TestContext::new_with_versions(&[\"3.11\", \"3.12\", \"3.13\"]);\n+\n+    let pyproject_toml = context.temp_dir.child(\"pyproject.toml\");\n+    pyproject_toml.write_str(\n+        r#\"\n+        [project]\n+        name = \"project\"\n+        version = \"0.1.0\"\n+        requires-python = \">=3.11\"\n+        dependencies = [\"typing-extensions\"]\n+\n+        [dependency-groups]\n+        foo = [\"anyio\"]\n+        bar = [\"iniconfig\"]\n+        dev = [\"sniffio\"]\n+\n+        [tool.uv.dependency-groups]\n+        foo = {requires-python=\">=3.14\"}\n+        bar = {requires-python=\">=3.13\"}\n+        dev = {requires-python=\">=3.12\"}\n+        \"#,\n+    )?;\n+\n+    context.lock().assert().success();\n+\n+    // With --no-default-groups only the main requires-python should be consulted\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--no-default-groups\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 1 package in [TIME]\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and the default group's requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and \"dev\" and \"bar\" requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--group\").arg(\"bar\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.13.[X] interpreter at: [PYTHON-3.13]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 3 packages in [TIME]\n+     + iniconfig==2.0.0\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Going back to just \"dev\" we shouldn't churn the venv needlessly\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Resolved 6 packages in [TIME]\n+    Audited 2 packages in [TIME]\n+    \");\n+\n+    // Explicitly requesting an in-range python can downgrade\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.12\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Explicitly requesting an out-of-range python fails\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.11\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: false\n+    exit_code: 2\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    error: The requested interpreter resolved to Python 3.11.[X], which is incompatible with the project's Python requirement: `>=3.12`. However, a workspace member (`project`) supports Python >=3.11. To install the workspace member on its own, navigate to ``, then run `uv venv --python 3.11.[X]` followed by `uv pip install -e .`.\n+    \");",
        "comment_created_at": "2025-06-10T13:32:07+00:00",
        "comment_author": "Gankra",
        "comment_body": "We now get a proper high-level error, although this already-kinda-obtuse error message is now even more cryptic because at this point in the code we've forgotten all the requires-python sources and discarded the enabled groups, so we're just like \"here's the intersection of all active requirements in your workspace\".\r\n\r\nHaving better diagnostics about this situation I think should be future work.",
        "pr_file_module": null
      },
      {
        "comment_id": "2141059872",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13735,
        "pr_file": "crates/uv/tests/it/run.rs",
        "discussion_id": "2137918996",
        "commented_code": "@@ -4598,6 +4598,248 @@ fn run_default_groups() -> Result<()> {\n \n     Ok(())\n }\n+\n+#[test]\n+fn run_groups_requires_python() -> Result<()> {\n+    let context = TestContext::new_with_versions(&[\"3.11\", \"3.12\", \"3.13\"]);\n+\n+    let pyproject_toml = context.temp_dir.child(\"pyproject.toml\");\n+    pyproject_toml.write_str(\n+        r#\"\n+        [project]\n+        name = \"project\"\n+        version = \"0.1.0\"\n+        requires-python = \">=3.11\"\n+        dependencies = [\"typing-extensions\"]\n+\n+        [dependency-groups]\n+        foo = [\"anyio\"]\n+        bar = [\"iniconfig\"]\n+        dev = [\"sniffio\"]\n+\n+        [tool.uv.dependency-groups]\n+        foo = {requires-python=\">=3.14\"}\n+        bar = {requires-python=\">=3.13\"}\n+        dev = {requires-python=\">=3.12\"}\n+        \"#,\n+    )?;\n+\n+    context.lock().assert().success();\n+\n+    // With --no-default-groups only the main requires-python should be consulted\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--no-default-groups\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 1 package in [TIME]\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and the default group's requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and \"dev\" and \"bar\" requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--group\").arg(\"bar\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.13.[X] interpreter at: [PYTHON-3.13]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 3 packages in [TIME]\n+     + iniconfig==2.0.0\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Going back to just \"dev\" we shouldn't churn the venv needlessly\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Resolved 6 packages in [TIME]\n+    Audited 2 packages in [TIME]\n+    \");\n+\n+    // Explicitly requesting an in-range python can downgrade\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.12\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Explicitly requesting an out-of-range python fails\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.11\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: false\n+    exit_code: 2\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    error: The requested interpreter resolved to Python 3.11.[X], which is incompatible with the project's Python requirement: `>=3.12`. However, a workspace member (`project`) supports Python >=3.11. To install the workspace member on its own, navigate to ``, then run `uv venv --python 3.11.[X]` followed by `uv pip install -e .`.\n+    \");",
        "comment_created_at": "2025-06-11T20:50:28+00:00",
        "comment_author": "zanieb",
        "comment_body": "Huh? Why is there a reference to a workspace at all here? This doesn't seem quite right, and seems bad enough that we need to improve it here because we're recommending installing a workspace member?",
        "pr_file_module": null
      },
      {
        "comment_id": "2141309405",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13735,
        "pr_file": "crates/uv/tests/it/run.rs",
        "discussion_id": "2137918996",
        "commented_code": "@@ -4598,6 +4598,248 @@ fn run_default_groups() -> Result<()> {\n \n     Ok(())\n }\n+\n+#[test]\n+fn run_groups_requires_python() -> Result<()> {\n+    let context = TestContext::new_with_versions(&[\"3.11\", \"3.12\", \"3.13\"]);\n+\n+    let pyproject_toml = context.temp_dir.child(\"pyproject.toml\");\n+    pyproject_toml.write_str(\n+        r#\"\n+        [project]\n+        name = \"project\"\n+        version = \"0.1.0\"\n+        requires-python = \">=3.11\"\n+        dependencies = [\"typing-extensions\"]\n+\n+        [dependency-groups]\n+        foo = [\"anyio\"]\n+        bar = [\"iniconfig\"]\n+        dev = [\"sniffio\"]\n+\n+        [tool.uv.dependency-groups]\n+        foo = {requires-python=\">=3.14\"}\n+        bar = {requires-python=\">=3.13\"}\n+        dev = {requires-python=\">=3.12\"}\n+        \"#,\n+    )?;\n+\n+    context.lock().assert().success();\n+\n+    // With --no-default-groups only the main requires-python should be consulted\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--no-default-groups\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 1 package in [TIME]\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and the default group's requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and \"dev\" and \"bar\" requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--group\").arg(\"bar\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.13.[X] interpreter at: [PYTHON-3.13]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 3 packages in [TIME]\n+     + iniconfig==2.0.0\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Going back to just \"dev\" we shouldn't churn the venv needlessly\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Resolved 6 packages in [TIME]\n+    Audited 2 packages in [TIME]\n+    \");\n+\n+    // Explicitly requesting an in-range python can downgrade\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.12\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Explicitly requesting an out-of-range python fails\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.11\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: false\n+    exit_code: 2\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    error: The requested interpreter resolved to Python 3.11.[X], which is incompatible with the project's Python requirement: `>=3.12`. However, a workspace member (`project`) supports Python >=3.11. To install the workspace member on its own, navigate to ``, then run `uv venv --python 3.11.[X]` followed by `uv pip install -e .`.\n+    \");",
        "comment_created_at": "2025-06-12T00:35:51+00:00",
        "comment_author": "Gankra",
        "comment_body": "In general even a single package is a workspace, but the pre-existing error previously was only relevant with a non-trivial workspace.\r\n\r\nSo this is a funny rube-goldberg situation:\r\n\r\n* we compute all the requires_pythons with precise source info included\r\n* then we intersect them together and throw out all that info\r\n* then we figure out our python version (in this case with an explicit request)\r\n* then we check if that version matches our intersected requires_python\r\n* oh no it doesn't, ok let's try to come up with a Useful error message\r\n* oh look this package on its own has a requires-python that's compatible, you could just install that on its own?\r\n\r\nAnd because we specifically recommend `uv pip install` the instructions are actually accidentally correct? Because it's an extremely obtuse way to express \"disable the dependency-groups of the package\". Fixing up this error is a bit annoying because all the context gets dropped... I'm trying to see if it's easy to hold onto that context.",
        "pr_file_module": null
      },
      {
        "comment_id": "2141326758",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13735,
        "pr_file": "crates/uv/tests/it/run.rs",
        "discussion_id": "2137918996",
        "commented_code": "@@ -4598,6 +4598,248 @@ fn run_default_groups() -> Result<()> {\n \n     Ok(())\n }\n+\n+#[test]\n+fn run_groups_requires_python() -> Result<()> {\n+    let context = TestContext::new_with_versions(&[\"3.11\", \"3.12\", \"3.13\"]);\n+\n+    let pyproject_toml = context.temp_dir.child(\"pyproject.toml\");\n+    pyproject_toml.write_str(\n+        r#\"\n+        [project]\n+        name = \"project\"\n+        version = \"0.1.0\"\n+        requires-python = \">=3.11\"\n+        dependencies = [\"typing-extensions\"]\n+\n+        [dependency-groups]\n+        foo = [\"anyio\"]\n+        bar = [\"iniconfig\"]\n+        dev = [\"sniffio\"]\n+\n+        [tool.uv.dependency-groups]\n+        foo = {requires-python=\">=3.14\"}\n+        bar = {requires-python=\">=3.13\"}\n+        dev = {requires-python=\">=3.12\"}\n+        \"#,\n+    )?;\n+\n+    context.lock().assert().success();\n+\n+    // With --no-default-groups only the main requires-python should be consulted\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--no-default-groups\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 1 package in [TIME]\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and the default group's requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and \"dev\" and \"bar\" requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--group\").arg(\"bar\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.13.[X] interpreter at: [PYTHON-3.13]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 3 packages in [TIME]\n+     + iniconfig==2.0.0\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Going back to just \"dev\" we shouldn't churn the venv needlessly\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Resolved 6 packages in [TIME]\n+    Audited 2 packages in [TIME]\n+    \");\n+\n+    // Explicitly requesting an in-range python can downgrade\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.12\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Explicitly requesting an out-of-range python fails\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.11\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: false\n+    exit_code: 2\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    error: The requested interpreter resolved to Python 3.11.[X], which is incompatible with the project's Python requirement: `>=3.12`. However, a workspace member (`project`) supports Python >=3.11. To install the workspace member on its own, navigate to ``, then run `uv venv --python 3.11.[X]` followed by `uv pip install -e .`.\n+    \");",
        "comment_created_at": "2025-06-12T00:58:33+00:00",
        "comment_author": "Gankra",
        "comment_body": "Ok the more I look at this the more I'm extremely dubious of this \"extra helpful\" diagnostic we've had for quite a while: https://github.com/astral-sh/uv/blob/f5305653238378376cd33f1a00d6b9eb511bef36/crates/uv/src/commands/project/mod.rs#L467-L483\r\n\r\nI think maybe it dates from a period where validate_project_requires_python was less pervasively invoked by everything...",
        "pr_file_module": null
      },
      {
        "comment_id": "2143327036",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13735,
        "pr_file": "crates/uv/tests/it/run.rs",
        "discussion_id": "2137918996",
        "commented_code": "@@ -4598,6 +4598,248 @@ fn run_default_groups() -> Result<()> {\n \n     Ok(())\n }\n+\n+#[test]\n+fn run_groups_requires_python() -> Result<()> {\n+    let context = TestContext::new_with_versions(&[\"3.11\", \"3.12\", \"3.13\"]);\n+\n+    let pyproject_toml = context.temp_dir.child(\"pyproject.toml\");\n+    pyproject_toml.write_str(\n+        r#\"\n+        [project]\n+        name = \"project\"\n+        version = \"0.1.0\"\n+        requires-python = \">=3.11\"\n+        dependencies = [\"typing-extensions\"]\n+\n+        [dependency-groups]\n+        foo = [\"anyio\"]\n+        bar = [\"iniconfig\"]\n+        dev = [\"sniffio\"]\n+\n+        [tool.uv.dependency-groups]\n+        foo = {requires-python=\">=3.14\"}\n+        bar = {requires-python=\">=3.13\"}\n+        dev = {requires-python=\">=3.12\"}\n+        \"#,\n+    )?;\n+\n+    context.lock().assert().success();\n+\n+    // With --no-default-groups only the main requires-python should be consulted\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--no-default-groups\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 1 package in [TIME]\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and the default group's requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // The main requires-python and \"dev\" and \"bar\" requires-python should be consulted\n+    // (This should trigger a version bump)\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"--group\").arg(\"bar\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.13.[X] interpreter at: [PYTHON-3.13]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Prepared 1 package in [TIME]\n+    Installed 3 packages in [TIME]\n+     + iniconfig==2.0.0\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Going back to just \"dev\" we shouldn't churn the venv needlessly\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Resolved 6 packages in [TIME]\n+    Audited 2 packages in [TIME]\n+    \");\n+\n+    // Explicitly requesting an in-range python can downgrade\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.12\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: true\n+    exit_code: 0\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.12.[X] interpreter at: [PYTHON-3.12]\n+    Removed virtual environment at: .venv\n+    Creating virtual environment at: .venv\n+    Resolved 6 packages in [TIME]\n+    Installed 2 packages in [TIME]\n+     + sniffio==1.3.1\n+     + typing-extensions==4.10.0\n+    \");\n+\n+    // Explicitly requesting an out-of-range python fails\n+    uv_snapshot!(context.filters(), context.run()\n+        .arg(\"-p\").arg(\"3.11\")\n+        .arg(\"python\").arg(\"-c\").arg(\"import typing_extensions\"), @r\"\n+    success: false\n+    exit_code: 2\n+    ----- stdout -----\n+\n+    ----- stderr -----\n+    Using CPython 3.11.[X] interpreter at: [PYTHON-3.11]\n+    error: The requested interpreter resolved to Python 3.11.[X], which is incompatible with the project's Python requirement: `>=3.12`. However, a workspace member (`project`) supports Python >=3.11. To install the workspace member on its own, navigate to ``, then run `uv venv --python 3.11.[X]` followed by `uv pip install -e .`.\n+    \");",
        "comment_created_at": "2025-06-12T17:51:23+00:00",
        "comment_author": "zanieb",
        "comment_body": "Yeah it seems like we may want to drop that and open an issue to follow up on it?\r\n\r\n> In general even a single package is a workspace\r\n\r\nEven if this is true internally, we shouldn't leak that to the user. Most users don't need or use workspaces.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2132764701",
    "pr_number": 13889,
    "pr_file": "crates/uv-install-wheel/src/linker.rs",
    "created_at": "2025-06-06T19:10:19+00:00",
    "commented_code": "(wheel_a, &wheel_b)\n             };\n             warn_user!(\n-                \"The module {} exists in two packages! \\\n-                This leads to a race condition and likely to a broken installation. \\\n-                Consider removing either {} ({}) or {} ({}).\",\n-                module.simplified_display(),\n-                wheel_a.name,\n-                wheel_a,",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2132764701",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13889,
        "pr_file": "crates/uv-install-wheel/src/linker.rs",
        "discussion_id": "2132764701",
        "commented_code": "@@ -39,14 +39,12 @@ impl Locks {\n                 (wheel_a, &wheel_b)\n             };\n             warn_user!(\n-                \"The module {} exists in two packages! \\\n-                This leads to a race condition and likely to a broken installation. \\\n-                Consider removing either {} ({}) or {} ({}).\",\n-                module.simplified_display(),\n-                wheel_a.name,\n-                wheel_a,",
        "comment_created_at": "2025-06-06T19:10:19+00:00",
        "comment_author": "zanieb",
        "comment_body": "Discussion on inclusion of the wheel filename is happening at https://github.com/astral-sh/uv/pull/13437#discussion_r2132744173",
        "pr_file_module": null
      },
      {
        "comment_id": "2140924078",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13889,
        "pr_file": "crates/uv-install-wheel/src/linker.rs",
        "discussion_id": "2132764701",
        "commented_code": "@@ -39,14 +39,12 @@ impl Locks {\n                 (wheel_a, &wheel_b)\n             };\n             warn_user!(\n-                \"The module {} exists in two packages! \\\n-                This leads to a race condition and likely to a broken installation. \\\n-                Consider removing either {} ({}) or {} ({}).\",\n-                module.simplified_display(),\n-                wheel_a.name,\n-                wheel_a,",
        "comment_created_at": "2025-06-11T19:34:20+00:00",
        "comment_author": "konstin",
        "comment_body": "The error should by itself contain enough information to track down the problem, so I would like it to at least contain the versions.",
        "pr_file_module": null
      },
      {
        "comment_id": "2140968603",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13889,
        "pr_file": "crates/uv-install-wheel/src/linker.rs",
        "discussion_id": "2132764701",
        "commented_code": "@@ -39,14 +39,12 @@ impl Locks {\n                 (wheel_a, &wheel_b)\n             };\n             warn_user!(\n-                \"The module {} exists in two packages! \\\n-                This leads to a race condition and likely to a broken installation. \\\n-                Consider removing either {} ({}) or {} ({}).\",\n-                module.simplified_display(),\n-                wheel_a.name,\n-                wheel_a,",
        "comment_created_at": "2025-06-11T20:06:31+00:00",
        "comment_author": "zanieb",
        "comment_body": "👍 I'm happy to hand this off to you, unless you want me to write the version display.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2029114646",
    "pr_number": 12667,
    "pr_file": "crates/uv-auth/src/middleware.rs",
    "created_at": "2025-04-04T16:26:51+00:00",
    "commented_code": ".with(AuthMiddleware::new().with_cache(CredentialsCache::new()))\n             .build();\n \n-        assert_eq!(\n+        assert!(\n             client\n                 .get(format!(\"{}/foo\", server.uri()))\n                 .send()\n-                .await?\n-                .status(),\n-            401\n+                .await\n+                .is_err(),\n+            \"Requests should require credentials\"\n         );",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2029114646",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12667,
        "pr_file": "crates/uv-auth/src/middleware.rs",
        "discussion_id": "2029114646",
        "commented_code": "@@ -575,22 +582,22 @@ mod tests {\n             .with(AuthMiddleware::new().with_cache(CredentialsCache::new()))\n             .build();\n \n-        assert_eq!(\n+        assert!(\n             client\n                 .get(format!(\"{}/foo\", server.uri()))\n                 .send()\n-                .await?\n-                .status(),\n-            401\n+                .await\n+                .is_err(),\n+            \"Requests should require credentials\"\n         );",
        "comment_created_at": "2025-04-04T16:26:51+00:00",
        "comment_author": "zanieb",
        "comment_body": "Why did this one change? There's no policy set here.",
        "pr_file_module": null
      },
      {
        "comment_id": "2029175228",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12667,
        "pr_file": "crates/uv-auth/src/middleware.rs",
        "discussion_id": "2029114646",
        "commented_code": "@@ -575,22 +582,22 @@ mod tests {\n             .with(AuthMiddleware::new().with_cache(CredentialsCache::new()))\n             .build();\n \n-        assert_eq!(\n+        assert!(\n             client\n                 .get(format!(\"{}/foo\", server.uri()))\n                 .send()\n-                .await?\n-                .status(),\n-            401\n+                .await\n+                .is_err(),\n+            \"Requests should require credentials\"\n         );",
        "comment_created_at": "2025-04-04T17:15:42+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Maybe there's a better way to do it, but the existing approach had been to throw an error for the missing credentials case. There's no policy set here, but the reason for the 401 is because of missing credentials.",
        "pr_file_module": null
      },
      {
        "comment_id": "2029177795",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12667,
        "pr_file": "crates/uv-auth/src/middleware.rs",
        "discussion_id": "2029114646",
        "commented_code": "@@ -575,22 +582,22 @@ mod tests {\n             .with(AuthMiddleware::new().with_cache(CredentialsCache::new()))\n             .build();\n \n-        assert_eq!(\n+        assert!(\n             client\n                 .get(format!(\"{}/foo\", server.uri()))\n                 .send()\n-                .await?\n-                .status(),\n-            401\n+                .await\n+                .is_err(),\n+            \"Requests should require credentials\"\n         );",
        "comment_created_at": "2025-04-04T17:17:56+00:00",
        "comment_author": "zanieb",
        "comment_body": "I don't think we can throw an error there though, doesn't downstream logic rely on a successful request? (i.e., in https://github.com/astral-sh/uv/pull/12667#discussion_r2029115491)\r\n\r\nPerhaps I misunderstood the intent of this PR?",
        "pr_file_module": null
      },
      {
        "comment_id": "2029190496",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12667,
        "pr_file": "crates/uv-auth/src/middleware.rs",
        "discussion_id": "2029114646",
        "commented_code": "@@ -575,22 +582,22 @@ mod tests {\n             .with(AuthMiddleware::new().with_cache(CredentialsCache::new()))\n             .build();\n \n-        assert_eq!(\n+        assert!(\n             client\n                 .get(format!(\"{}/foo\", server.uri()))\n                 .send()\n-                .await?\n-                .status(),\n-            401\n+                .await\n+                .is_err(),\n+            \"Requests should require credentials\"\n         );",
        "comment_created_at": "2025-04-04T17:28:08+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "The only tests that broke were cases where we'd want the message to indicate that missing credentials was the cause of failing to find the package. But if we are depending on getting the 401 out of this response downstream, then this approach won't work. In that case, I can try using reqwest extensions to add more context about the 401.",
        "pr_file_module": null
      },
      {
        "comment_id": "2029195552",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12667,
        "pr_file": "crates/uv-auth/src/middleware.rs",
        "discussion_id": "2029114646",
        "commented_code": "@@ -575,22 +582,22 @@ mod tests {\n             .with(AuthMiddleware::new().with_cache(CredentialsCache::new()))\n             .build();\n \n-        assert_eq!(\n+        assert!(\n             client\n                 .get(format!(\"{}/foo\", server.uri()))\n                 .send()\n-                .await?\n-                .status(),\n-            401\n+                .await\n+                .is_err(),\n+            \"Requests should require credentials\"\n         );",
        "comment_created_at": "2025-04-04T17:32:02+00:00",
        "comment_author": "zanieb",
        "comment_body": "Ah I understand the goal now, you want to make the case where no credentials were present distinct from the case where the credentials are wrong. Sorry it took me a while to get there. I think the snapshot changes should be like..\r\n\r\n> hint: An index URL (https://pypi-proxy.fly.dev/basic-auth/simple) could not be queried due to a lack of valid authentication credentials (401 Unauthorized).\r\n\r\nto \r\n\r\n> hint: An index URL (https://pypi-proxy.fly.dev/basic-auth/simple) could not be queried due to missing credentials (401 Unauthorized)\r\n\r\nand\r\n\r\n> hint: An index URL (https://pypi-proxy.fly.dev/basic-auth/simple) could not be queried due to invalid credentials (401 Unauthorized)\r\n\r\nI think changing that error path entirely feels too risky and is hopefully unnecessary. \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2029278382",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12667,
        "pr_file": "crates/uv-auth/src/middleware.rs",
        "discussion_id": "2029114646",
        "commented_code": "@@ -575,22 +582,22 @@ mod tests {\n             .with(AuthMiddleware::new().with_cache(CredentialsCache::new()))\n             .build();\n \n-        assert_eq!(\n+        assert!(\n             client\n                 .get(format!(\"{}/foo\", server.uri()))\n                 .send()\n-                .await?\n-                .status(),\n-            401\n+                .await\n+                .is_err(),\n+            \"Requests should require credentials\"\n         );",
        "comment_created_at": "2025-04-04T18:40:21+00:00",
        "comment_author": "zanieb",
        "comment_body": "(fwiw, I think this would have been clearer if the title was something like \"Distinguish between authentication failures due to missing vs invalid credentials\")",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107603660",
    "pr_number": 13549,
    "pr_file": "crates/uv-python/src/downloads.rs",
    "created_at": "2025-05-26T16:00:13+00:00",
    "commented_code": "NoDownloadFound(PythonDownloadRequest),\n     #[error(\"A mirror was provided via `{0}`, but the URL does not match the expected format: {0}\")]\n     Mirror(&'static str, &'static str),\n-    #[error(transparent)]\n+    #[error(\"Failed to determine the current platform\")]",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2107603660",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13549,
        "pr_file": "crates/uv-python/src/downloads.rs",
        "discussion_id": "2107603660",
        "commented_code": "@@ -90,7 +90,7 @@ pub enum Error {\n     NoDownloadFound(PythonDownloadRequest),\n     #[error(\"A mirror was provided via `{0}`, but the URL does not match the expected format: {0}\")]\n     Mirror(&'static str, &'static str),\n-    #[error(transparent)]\n+    #[error(\"Failed to determine the current platform\")]",
        "comment_created_at": "2025-05-26T16:00:13+00:00",
        "comment_author": "oconnor663",
        "comment_body": "Copy/pasting this in two places makes me wonder if there's an easy way to make the `LibcDetectionError` apply this annotation itself. I assume not without changing it into a struct with an internal \"error kind\"?",
        "pr_file_module": null
      },
      {
        "comment_id": "2107606913",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13549,
        "pr_file": "crates/uv-python/src/downloads.rs",
        "discussion_id": "2107603660",
        "commented_code": "@@ -90,7 +90,7 @@ pub enum Error {\n     NoDownloadFound(PythonDownloadRequest),\n     #[error(\"A mirror was provided via `{0}`, but the URL does not match the expected format: {0}\")]\n     Mirror(&'static str, &'static str),\n-    #[error(transparent)]\n+    #[error(\"Failed to determine the current platform\")]",
        "comment_created_at": "2025-05-26T16:03:14+00:00",
        "comment_author": "konstin",
        "comment_body": "thiserror at least doesn't support it, I think that's a limitation because every `.source()` needs a type and we'd need two type for the `LibcDetectionError` error message and the variant error message, but we only have one type.",
        "pr_file_module": null
      },
      {
        "comment_id": "2107612654",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13549,
        "pr_file": "crates/uv-python/src/downloads.rs",
        "discussion_id": "2107603660",
        "commented_code": "@@ -90,7 +90,7 @@ pub enum Error {\n     NoDownloadFound(PythonDownloadRequest),\n     #[error(\"A mirror was provided via `{0}`, but the URL does not match the expected format: {0}\")]\n     Mirror(&'static str, &'static str),\n-    #[error(transparent)]\n+    #[error(\"Failed to determine the current platform\")]",
        "comment_created_at": "2025-05-26T16:08:49+00:00",
        "comment_author": "oconnor663",
        "comment_body": "Ah, I wasn't even thinking about the `.source()` representation, just prefixing the string representation of all variants of the enum with `\"Failed to find the current platform: (...)\"` or something like that.",
        "pr_file_module": null
      },
      {
        "comment_id": "2109990567",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13549,
        "pr_file": "crates/uv-python/src/downloads.rs",
        "discussion_id": "2107603660",
        "commented_code": "@@ -90,7 +90,7 @@ pub enum Error {\n     NoDownloadFound(PythonDownloadRequest),\n     #[error(\"A mirror was provided via `{0}`, but the URL does not match the expected format: {0}\")]\n     Mirror(&'static str, &'static str),\n-    #[error(transparent)]\n+    #[error(\"Failed to determine the current platform\")]",
        "comment_created_at": "2025-05-27T19:13:02+00:00",
        "comment_author": "zanieb",
        "comment_body": "Should this be \"Failed to determine the libc used on the current platform\"? This message seems too generic for a libc-detection specific problem.",
        "pr_file_module": null
      },
      {
        "comment_id": "2110033759",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13549,
        "pr_file": "crates/uv-python/src/downloads.rs",
        "discussion_id": "2107603660",
        "commented_code": "@@ -90,7 +90,7 @@ pub enum Error {\n     NoDownloadFound(PythonDownloadRequest),\n     #[error(\"A mirror was provided via `{0}`, but the URL does not match the expected format: {0}\")]\n     Mirror(&'static str, &'static str),\n-    #[error(transparent)]\n+    #[error(\"Failed to determine the current platform\")]",
        "comment_created_at": "2025-05-27T19:29:56+00:00",
        "comment_author": "konstin",
        "comment_body": "I'd push the libc part down to the most detailed error, I don't expect Python devs to know about libc flavors.",
        "pr_file_module": null
      },
      {
        "comment_id": "2110046895",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13549,
        "pr_file": "crates/uv-python/src/downloads.rs",
        "discussion_id": "2107603660",
        "commented_code": "@@ -90,7 +90,7 @@ pub enum Error {\n     NoDownloadFound(PythonDownloadRequest),\n     #[error(\"A mirror was provided via `{0}`, but the URL does not match the expected format: {0}\")]\n     Mirror(&'static str, &'static str),\n-    #[error(transparent)]\n+    #[error(\"Failed to determine the current platform\")]",
        "comment_created_at": "2025-05-27T19:36:17+00:00",
        "comment_author": "zanieb",
        "comment_body": "As structured, it needs to be present here or it's too broad / inaccurate. I also don't expect devs to know about libc flavors, but there should be an error above this explaining why we're looking for it. I'm also fine with it being structured differently.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2113829408",
    "pr_number": 13549,
    "pr_file": "crates/uv-python/src/discovery.rs",
    "created_at": "2025-05-29T12:18:38+00:00",
    "commented_code": "PythonSource,\n     ),\n \n-    /// An error was encountered when interacting with a managed Python installation.\n-    #[error(transparent)]\n+    /// An error was encountered while trying to find a managed Python installation matching the\n+    /// current platform.\n+    #[error(\"Failed to find a managed Python installation matching the current platform\")]",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2113829408",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13549,
        "pr_file": "crates/uv-python/src/discovery.rs",
        "discussion_id": "2113829408",
        "commented_code": "@@ -222,8 +222,9 @@ pub enum Error {\n         PythonSource,\n     ),\n \n-    /// An error was encountered when interacting with a managed Python installation.\n-    #[error(transparent)]\n+    /// An error was encountered while trying to find a managed Python installation matching the\n+    /// current platform.\n+    #[error(\"Failed to find a managed Python installation matching the current platform\")]",
        "comment_created_at": "2025-05-29T12:18:38+00:00",
        "comment_author": "zanieb",
        "comment_body": "I think this is too specific? This can be raised for any managed Python error.\r\n\r\n```suggestion\r\n    #[error(\"Failed to discover managed Python installations\")]\r\n```\r\n\r\nIt seems misleading to suggest it's specifically related to \"matching the current platform\".",
        "pr_file_module": null
      }
    ]
  }
]