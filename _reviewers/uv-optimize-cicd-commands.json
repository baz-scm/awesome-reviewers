[
  {
    "discussion_id": "2183355544",
    "pr_number": 14309,
    "pr_file": ".github/workflows/ci.yml",
    "created_at": "2025-07-03T17:34:20+00:00",
    "commented_code": "- name: \"Create a virtual environment (uv)\"\n         run: |\n-          ./uv venv -p 3.13t --managed-python\n+          ./uv venv -c -p 3.13t --managed-python",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2183355544",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14309,
        "pr_file": ".github/workflows/ci.yml",
        "discussion_id": "2183355544",
        "commented_code": "@@ -981,7 +981,7 @@ jobs:\n \n       - name: \"Create a virtual environment (uv)\"\n         run: |\n-          ./uv venv -p 3.13t --managed-python\n+          ./uv venv -c -p 3.13t --managed-python",
        "comment_created_at": "2025-07-03T17:34:20+00:00",
        "comment_author": "zanieb",
        "comment_body": "This is a good example of the breakage we'd cause with this change. I wonder if we can craft a GitHub search that captures if a second `uv venv` is common?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2159855379",
    "pr_number": 14165,
    "pr_file": ".github/workflows/build-docker.yml",
    "created_at": "2025-06-21T04:05:24+00:00",
    "commented_code": "context: .\n           project: 7hd4vdzmw5 # astral-sh/uv\n           platforms: linux/amd64,linux/arm64\n-          push: true\n+          push: ${{ needs.docker-plan.outputs.push }}\n           tags: ${{ steps.meta.outputs.tags }}\n           labels: ${{ steps.meta.outputs.labels }}\n+          # TODO(zanieb): Annotations are not supported by Depot yet and are ignored\n           annotations: ${{ steps.meta.outputs.annotations }}\n \n       - name: Generate artifact attestation\n+        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n         uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n         with:\n           subject-name: ${{ env.UV_GHCR_IMAGE }}\n           subject-digest: ${{ steps.build-and-push.outputs.digest }}\n \n-  # Re-tag the base image, to ensure it's shown as the newest on the registry UI\n-  docker-retag-base:\n-    name: retag uv\n+      # Push annotations manually.\n+      # See `docker-annotate-base` for details.\n+      - name: Add annotations to images\n+        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n+        env:\n+          IMAGES: \"${{ env.UV_GHCR_IMAGE }} ${{ env.UV_DOCKERHUB_IMAGE }}\"\n+          DIGEST: ${{ steps.build-and-push.outputs.digest }}\n+          TAGS: ${{ steps.meta.outputs.tags }}\n+          ANNOTATIONS: ${{ steps.meta.outputs.annotations }}\n+        run: |\n+          set -x\n+          readarray -t lines <<< \"$ANNOTATIONS\"; annotations=(); for line in \"${lines[@]}\"; do annotations+=(--annotation \"$line\"); done\n+          for image in $IMAGES; do\n+            for tag in $TAGS; do\n+              # The tags are fully qualified, so skip the ones that do not match the image\n+              if [[ \"$tag\" != \"${image}\"* ]]; then\n+                continue\n+              fi\n+              docker buildx imagetools create \\\n+                \"${annotations[@]}\" \\\n+                -t \"${tag}\" \\\n+                \"${image}@${DIGEST}\"\n+            done",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2159855379",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14165,
        "pr_file": ".github/workflows/build-docker.yml",
        "discussion_id": "2159855379",
        "commented_code": "@@ -263,20 +268,71 @@ jobs:\n           context: .\n           project: 7hd4vdzmw5 # astral-sh/uv\n           platforms: linux/amd64,linux/arm64\n-          push: true\n+          push: ${{ needs.docker-plan.outputs.push }}\n           tags: ${{ steps.meta.outputs.tags }}\n           labels: ${{ steps.meta.outputs.labels }}\n+          # TODO(zanieb): Annotations are not supported by Depot yet and are ignored\n           annotations: ${{ steps.meta.outputs.annotations }}\n \n       - name: Generate artifact attestation\n+        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n         uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n         with:\n           subject-name: ${{ env.UV_GHCR_IMAGE }}\n           subject-digest: ${{ steps.build-and-push.outputs.digest }}\n \n-  # Re-tag the base image, to ensure it's shown as the newest on the registry UI\n-  docker-retag-base:\n-    name: retag uv\n+      # Push annotations manually.\n+      # See `docker-annotate-base` for details.\n+      - name: Add annotations to images\n+        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n+        env:\n+          IMAGES: \"${{ env.UV_GHCR_IMAGE }} ${{ env.UV_DOCKERHUB_IMAGE }}\"\n+          DIGEST: ${{ steps.build-and-push.outputs.digest }}\n+          TAGS: ${{ steps.meta.outputs.tags }}\n+          ANNOTATIONS: ${{ steps.meta.outputs.annotations }}\n+        run: |\n+          set -x\n+          readarray -t lines <<< \"$ANNOTATIONS\"; annotations=(); for line in \"${lines[@]}\"; do annotations+=(--annotation \"$line\"); done\n+          for image in $IMAGES; do\n+            for tag in $TAGS; do\n+              # The tags are fully qualified, so skip the ones that do not match the image\n+              if [[ \"$tag\" != \"${image}\"* ]]; then\n+                continue\n+              fi\n+              docker buildx imagetools create \\\n+                \"${annotations[@]}\" \\\n+                -t \"${tag}\" \\\n+                \"${image}@${DIGEST}\"\n+            done",
        "comment_created_at": "2025-06-21T04:05:24+00:00",
        "comment_author": "samypr100",
        "comment_body": "```suggestion\r\n            readarray -t lines < <(grep \"^${image}:\" <<< \"$TAGS\"); tags=(); for line in \"${lines[@]}\"; do tags+=(-t \"$line\"); done\r\n            docker buildx imagetools create \\\r\n              \"${annotations[@]}\" \\\r\n              \"${tags[@]}\" \\\r\n              \"${image}@${DIGEST}\"\r\n```\r\n\r\nSimilar to the readarray, but we filter by image. This makes it a single command per registry making sure we don't do multiple writes. We could've also used the previous jq command, but we don't have $DOCKER_METADATA_OUTPUT_JSON in the last job so we use readarray to make it the same on both.\r\n\r\ne.g.\r\n\r\n```bash\r\n          for image in $IMAGES; do\r\n            docker buildx imagetools create \\\r\n            $(jq -cr --arg img \"${image}\" '.tags | map(select(startswith($img)) | \"-t \" + .) | join(\" \")' <<< \"$DOCKER_METADATA_OUTPUT_JSON\") \\\r\n            \"${image}@${DIGEST}\"\r\n          done\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2160027762",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14165,
        "pr_file": ".github/workflows/build-docker.yml",
        "discussion_id": "2159855379",
        "commented_code": "@@ -263,20 +268,71 @@ jobs:\n           context: .\n           project: 7hd4vdzmw5 # astral-sh/uv\n           platforms: linux/amd64,linux/arm64\n-          push: true\n+          push: ${{ needs.docker-plan.outputs.push }}\n           tags: ${{ steps.meta.outputs.tags }}\n           labels: ${{ steps.meta.outputs.labels }}\n+          # TODO(zanieb): Annotations are not supported by Depot yet and are ignored\n           annotations: ${{ steps.meta.outputs.annotations }}\n \n       - name: Generate artifact attestation\n+        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n         uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n         with:\n           subject-name: ${{ env.UV_GHCR_IMAGE }}\n           subject-digest: ${{ steps.build-and-push.outputs.digest }}\n \n-  # Re-tag the base image, to ensure it's shown as the newest on the registry UI\n-  docker-retag-base:\n-    name: retag uv\n+      # Push annotations manually.\n+      # See `docker-annotate-base` for details.\n+      - name: Add annotations to images\n+        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n+        env:\n+          IMAGES: \"${{ env.UV_GHCR_IMAGE }} ${{ env.UV_DOCKERHUB_IMAGE }}\"\n+          DIGEST: ${{ steps.build-and-push.outputs.digest }}\n+          TAGS: ${{ steps.meta.outputs.tags }}\n+          ANNOTATIONS: ${{ steps.meta.outputs.annotations }}\n+        run: |\n+          set -x\n+          readarray -t lines <<< \"$ANNOTATIONS\"; annotations=(); for line in \"${lines[@]}\"; do annotations+=(--annotation \"$line\"); done\n+          for image in $IMAGES; do\n+            for tag in $TAGS; do\n+              # The tags are fully qualified, so skip the ones that do not match the image\n+              if [[ \"$tag\" != \"${image}\"* ]]; then\n+                continue\n+              fi\n+              docker buildx imagetools create \\\n+                \"${annotations[@]}\" \\\n+                -t \"${tag}\" \\\n+                \"${image}@${DIGEST}\"\n+            done",
        "comment_created_at": "2025-06-21T12:41:21+00:00",
        "comment_author": "zanieb",
        "comment_body": "We could grab the JSON output, I think â€” but the `readarray` reads clearer to me.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2159855920",
    "pr_number": 14165,
    "pr_file": ".github/workflows/build-docker.yml",
    "created_at": "2025-06-21T04:09:05+00:00",
    "commented_code": "username: ${{ github.repository_owner }}\n           password: ${{ secrets.GITHUB_TOKEN }}\n \n-      - name: Push tags\n+      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0\n+        with:\n+          username: astral\n+          password: ${{ secrets.DOCKERHUB_TOKEN_RW }}\n+\n+      # Depot doesn't support annotating images, so we need to do so manually\n+      # afterwards. Mutating the manifest is desirable regardless, because we\n+      # want to bump the base image to appear at the top of the list on GHCR.\n+      # However, once annotation support is added to Depot, this step can be\n+      # minimized to just touch the GHCR manifest.\n+      - name: Add annotations to images\n         env:\n-          IMAGE: ${{ env.UV_GHCR_IMAGE }}\n+          IMAGES: \"${{ env.UV_GHCR_IMAGE }} ${{ env.UV_DOCKERHUB_IMAGE }}\"\n           DIGEST: ${{ needs.docker-publish-base.outputs.image-digest }}\n           TAGS: ${{ needs.docker-publish-base.outputs.image-tags }}\n+          ANNOTATIONS: ${{ needs.docker-publish-base.outputs.image-annotations }}\n+        # The readarray part is used to make sure the quoting and special characters are preserved on expansion (e.g. spaces)\n+        # The jq command expands the docker/metadata json \"tags\" array entry to `-t tag1 -t tag2 ...` for each tag in the array\n+        # The printf will expand the base image with the `<UV_BASE_IMG>@sha256:<sha256> ...` for each sha256 in the directory\n+        # The final command becomes `docker buildx imagetools create -t tag1 -t tag2 ... <UV_BASE_IMG>@sha256:<sha256_1> <UV_BASE_IMG>@sha256:<sha256_2> ...`\n         run: |\n-          docker pull \"${IMAGE}@${DIGEST}\"\n-          for tag in $TAGS; do\n-            # Skip re-tag for DockerHub\n-            if [[ \"$tag\" == \"${{ env.UV_DOCKERHUB_IMAGE }}\"* ]]; then\n-              continue\n-            fi\n-            docker tag \"${IMAGE}@${DIGEST}\" \"${tag}\"\n-            docker push \"${tag}\"\n+          set -x\n+          readarray -t lines <<< \"$ANNOTATIONS\"; annotations=(); for line in \"${lines[@]}\"; do annotations+=(--annotation \"$line\"); done\n+          for image in $IMAGES; do\n+            for tag in $TAGS; do\n+              # The tags are fully qualified, so skip the ones that do not match the image\n+              if [[ \"$tag\" != \"${image}\"* ]]; then\n+                continue\n+              fi\n+              docker buildx imagetools create \\\n+                \"${annotations[@]}\" \\\n+                -t \"${tag}\" \\\n+                \"${image}@${DIGEST}\"\n+            done",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2159855920",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14165,
        "pr_file": ".github/workflows/build-docker.yml",
        "discussion_id": "2159855920",
        "commented_code": "@@ -292,18 +348,69 @@ jobs:\n           username: ${{ github.repository_owner }}\n           password: ${{ secrets.GITHUB_TOKEN }}\n \n-      - name: Push tags\n+      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0\n+        with:\n+          username: astral\n+          password: ${{ secrets.DOCKERHUB_TOKEN_RW }}\n+\n+      # Depot doesn't support annotating images, so we need to do so manually\n+      # afterwards. Mutating the manifest is desirable regardless, because we\n+      # want to bump the base image to appear at the top of the list on GHCR.\n+      # However, once annotation support is added to Depot, this step can be\n+      # minimized to just touch the GHCR manifest.\n+      - name: Add annotations to images\n         env:\n-          IMAGE: ${{ env.UV_GHCR_IMAGE }}\n+          IMAGES: \"${{ env.UV_GHCR_IMAGE }} ${{ env.UV_DOCKERHUB_IMAGE }}\"\n           DIGEST: ${{ needs.docker-publish-base.outputs.image-digest }}\n           TAGS: ${{ needs.docker-publish-base.outputs.image-tags }}\n+          ANNOTATIONS: ${{ needs.docker-publish-base.outputs.image-annotations }}\n+        # The readarray part is used to make sure the quoting and special characters are preserved on expansion (e.g. spaces)\n+        # The jq command expands the docker/metadata json \"tags\" array entry to `-t tag1 -t tag2 ...` for each tag in the array\n+        # The printf will expand the base image with the `<UV_BASE_IMG>@sha256:<sha256> ...` for each sha256 in the directory\n+        # The final command becomes `docker buildx imagetools create -t tag1 -t tag2 ... <UV_BASE_IMG>@sha256:<sha256_1> <UV_BASE_IMG>@sha256:<sha256_2> ...`\n         run: |\n-          docker pull \"${IMAGE}@${DIGEST}\"\n-          for tag in $TAGS; do\n-            # Skip re-tag for DockerHub\n-            if [[ \"$tag\" == \"${{ env.UV_DOCKERHUB_IMAGE }}\"* ]]; then\n-              continue\n-            fi\n-            docker tag \"${IMAGE}@${DIGEST}\" \"${tag}\"\n-            docker push \"${tag}\"\n+          set -x\n+          readarray -t lines <<< \"$ANNOTATIONS\"; annotations=(); for line in \"${lines[@]}\"; do annotations+=(--annotation \"$line\"); done\n+          for image in $IMAGES; do\n+            for tag in $TAGS; do\n+              # The tags are fully qualified, so skip the ones that do not match the image\n+              if [[ \"$tag\" != \"${image}\"* ]]; then\n+                continue\n+              fi\n+              docker buildx imagetools create \\\n+                \"${annotations[@]}\" \\\n+                -t \"${tag}\" \\\n+                \"${image}@${DIGEST}\"\n+            done",
        "comment_created_at": "2025-06-21T04:09:05+00:00",
        "comment_author": "samypr100",
        "comment_body": "```suggestion\r\n            readarray -t lines < <(grep \"^${image}:\" <<< \"$TAGS\"); tags=(); for line in \"${lines[@]}\"; do tags+=(-t \"$line\"); done\r\n            docker buildx imagetools create \\\r\n              \"${annotations[@]}\" \\\r\n              \"${tags[@]}\" \\\r\n              \"${image}@${DIGEST}\"\r\n```\r\n\r\nSame as https://github.com/astral-sh/uv/pull/14165#discussion_r2159855379",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152402834",
    "pr_number": 14088,
    "pr_file": ".github/workflows/build-docker.yml",
    "created_at": "2025-06-17T14:18:22+00:00",
    "commented_code": "- name: Generate artifact attestation\n         uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n         with:\n-          subject-name: ${{ env.UV_BASE_IMG }}\n+          subject-name: ${{ env.UV_GHCR_IMAGE }}",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2152402834",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14088,
        "pr_file": ".github/workflows/build-docker.yml",
        "discussion_id": "2152402834",
        "commented_code": "@@ -266,7 +270,7 @@ jobs:\n       - name: Generate artifact attestation\n         uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n         with:\n-          subject-name: ${{ env.UV_BASE_IMG }}\n+          subject-name: ${{ env.UV_GHCR_IMAGE }}",
        "comment_created_at": "2025-06-17T14:18:22+00:00",
        "comment_author": "Gankra",
        "comment_body": "Is there a reason to not attest the other image? Only github's hub cares about this?",
        "pr_file_module": null
      },
      {
        "comment_id": "2152437161",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14088,
        "pr_file": ".github/workflows/build-docker.yml",
        "discussion_id": "2152402834",
        "commented_code": "@@ -266,7 +270,7 @@ jobs:\n       - name: Generate artifact attestation\n         uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n         with:\n-          subject-name: ${{ env.UV_BASE_IMG }}\n+          subject-name: ${{ env.UV_GHCR_IMAGE }}",
        "comment_created_at": "2025-06-17T14:32:47+00:00",
        "comment_author": "zanieb",
        "comment_body": "uhh maybe we should attest the DockerHub ones, I'm not sure how if it works tbh.",
        "pr_file_module": null
      },
      {
        "comment_id": "2153554476",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14088,
        "pr_file": ".github/workflows/build-docker.yml",
        "discussion_id": "2152402834",
        "commented_code": "@@ -266,7 +270,7 @@ jobs:\n       - name: Generate artifact attestation\n         uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n         with:\n-          subject-name: ${{ env.UV_BASE_IMG }}\n+          subject-name: ${{ env.UV_GHCR_IMAGE }}",
        "comment_created_at": "2025-06-18T03:16:26+00:00",
        "comment_author": "samypr100",
        "comment_body": "It would be a tad different as we'd have to use `push-to-registry: true` for DockerHub alongside with subject name must start with `index.docker.io` rather than `docker.io`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2154429756",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14088,
        "pr_file": ".github/workflows/build-docker.yml",
        "discussion_id": "2152402834",
        "commented_code": "@@ -266,7 +270,7 @@ jobs:\n       - name: Generate artifact attestation\n         uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n         with:\n-          subject-name: ${{ env.UV_BASE_IMG }}\n+          subject-name: ${{ env.UV_GHCR_IMAGE }}",
        "comment_created_at": "2025-06-18T12:06:03+00:00",
        "comment_author": "zanieb",
        "comment_body": "I think I'd prefer to do that afterwards",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1936116798",
    "pr_number": 11106,
    "pr_file": ".github/workflows/build-docker.yml",
    "created_at": "2025-01-30T18:43:04+00:00",
    "commented_code": "platform=${{ matrix.platform }}\n           echo \"PLATFORM_TUPLE=${platform//\\//-}\" >> $GITHUB_ENV\n \n+      - name: Docker apt & pip caches\n+        uses: actions/cache@v4\n+        id: docker-caches\n+        with:\n+          path: |\n+            var-cache-apt\n+            var-lib-apt\n+            root-cache-pip\n+          key: docker-caches-${{ matrix.platform }}-${{ hashFiles('Dockerfile') }}\n+\n+      - name: Docker Cargo caches\n+        uses: actions/cache@v4\n+        id: docker-cargo-caches\n+        with:\n+          path: |\n+            root-target\n+            usr-local-cargo-git-db\n+            usr-local-cargo-registry\n+          key: docker-cargo-caches-${{ matrix.platform }}-${{ hashFiles('Dockerfile', 'crates/**', 'Cargo.toml', 'Cargo.lock') }}",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1936116798",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 11106,
        "pr_file": ".github/workflows/build-docker.yml",
        "discussion_id": "1936116798",
        "commented_code": "@@ -79,6 +81,48 @@ jobs:\n           platform=${{ matrix.platform }}\n           echo \"PLATFORM_TUPLE=${platform//\\//-}\" >> $GITHUB_ENV\n \n+      - name: Docker apt & pip caches\n+        uses: actions/cache@v4\n+        id: docker-caches\n+        with:\n+          path: |\n+            var-cache-apt\n+            var-lib-apt\n+            root-cache-pip\n+          key: docker-caches-${{ matrix.platform }}-${{ hashFiles('Dockerfile') }}\n+\n+      - name: Docker Cargo caches\n+        uses: actions/cache@v4\n+        id: docker-cargo-caches\n+        with:\n+          path: |\n+            root-target\n+            usr-local-cargo-git-db\n+            usr-local-cargo-registry\n+          key: docker-cargo-caches-${{ matrix.platform }}-${{ hashFiles('Dockerfile', 'crates/**', 'Cargo.toml', 'Cargo.lock') }}",
        "comment_created_at": "2025-01-30T18:43:04+00:00",
        "comment_author": "mjpieters",
        "comment_body": "You _could_ drop the crates directory from the hash key and so reuse the cargo cache even when source code files change. This would give you incremental builds. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1936128584",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 11106,
        "pr_file": ".github/workflows/build-docker.yml",
        "discussion_id": "1936116798",
        "commented_code": "@@ -79,6 +81,48 @@ jobs:\n           platform=${{ matrix.platform }}\n           echo \"PLATFORM_TUPLE=${platform//\\//-}\" >> $GITHUB_ENV\n \n+      - name: Docker apt & pip caches\n+        uses: actions/cache@v4\n+        id: docker-caches\n+        with:\n+          path: |\n+            var-cache-apt\n+            var-lib-apt\n+            root-cache-pip\n+          key: docker-caches-${{ matrix.platform }}-${{ hashFiles('Dockerfile') }}\n+\n+      - name: Docker Cargo caches\n+        uses: actions/cache@v4\n+        id: docker-cargo-caches\n+        with:\n+          path: |\n+            root-target\n+            usr-local-cargo-git-db\n+            usr-local-cargo-registry\n+          key: docker-cargo-caches-${{ matrix.platform }}-${{ hashFiles('Dockerfile', 'crates/**', 'Cargo.toml', 'Cargo.lock') }}",
        "comment_created_at": "2025-01-30T18:52:14+00:00",
        "comment_author": "zanieb",
        "comment_body": "I'm not sure we _want_ incremental builds in the release pipeline. A clean build seems like a good property, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "1936178358",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 11106,
        "pr_file": ".github/workflows/build-docker.yml",
        "discussion_id": "1936116798",
        "commented_code": "@@ -79,6 +81,48 @@ jobs:\n           platform=${{ matrix.platform }}\n           echo \"PLATFORM_TUPLE=${platform//\\//-}\" >> $GITHUB_ENV\n \n+      - name: Docker apt & pip caches\n+        uses: actions/cache@v4\n+        id: docker-caches\n+        with:\n+          path: |\n+            var-cache-apt\n+            var-lib-apt\n+            root-cache-pip\n+          key: docker-caches-${{ matrix.platform }}-${{ hashFiles('Dockerfile') }}\n+\n+      - name: Docker Cargo caches\n+        uses: actions/cache@v4\n+        id: docker-cargo-caches\n+        with:\n+          path: |\n+            root-target\n+            usr-local-cargo-git-db\n+            usr-local-cargo-registry\n+          key: docker-cargo-caches-${{ matrix.platform }}-${{ hashFiles('Dockerfile', 'crates/**', 'Cargo.toml', 'Cargo.lock') }}",
        "comment_created_at": "2025-01-30T19:35:14+00:00",
        "comment_author": "mjpieters",
        "comment_body": "That's why I picked this config, but I just wanted to point out the option.",
        "pr_file_module": null
      }
    ]
  }
]