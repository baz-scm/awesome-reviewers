[
  {
    "discussion_id": "1590190741",
    "pr_number": 3372,
    "pr_file": "Dockerfile",
    "created_at": "2024-05-05T01:36:40+00:00",
    "commented_code": "-FROM --platform=$BUILDPLATFORM ubuntu as build\n+# syntax=docker/dockerfile:1\n+\n+FROM --platform=${BUILDPLATFORM} ubuntu:24.04 AS builder-base\n+# Configure the shell to exit early if any command fails, or when referencing unset variables.\n+# Additionally `-x` outputs each command run, this is helpful for troubleshooting failures.\n+SHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n+\n+RUN \\\n+  --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \\\n+  --mount=target=/var/cache/apt,type=cache,sharing=locked \\\n+  <<HEREDOC\n+    # https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/reference.md#example-cache-apt-packages\n+    # https://stackoverflow.com/questions/66808788/docker-can-you-cache-apt-get-package-installs#comment135104889_72851168\n+    rm -f /etc/apt/apt.conf.d/docker-clean\n+    echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\n+\n+    apt update && apt install -y --no-install-recommends \\\n+      build-essential \\\n+      curl \\\n+      python3-venv \\\n+      cmake\n+HEREDOC\n+\n ENV HOME=\"/root\"\n+ENV PATH=\"$HOME/.venv/bin:$PATH\"\n WORKDIR $HOME\n \n-RUN apt update \\\n-  && apt install -y --no-install-recommends \\\n-  build-essential \\\n-  curl \\\n-  python3-venv \\\n-  cmake \\\n-  && apt clean \\\n-  && rm -rf /var/lib/apt/lists/*\n-\n-# Setup zig as cross compiling linker\n-RUN python3 -m venv $HOME/.venv\n-RUN .venv/bin/pip install cargo-zigbuild\n-ENV PATH=\"$HOME/.venv/bin:$PATH\"\n+# Setup zig as cross compiling linker:\n+RUN <<HEREDOC\n+  python3 -m venv $HOME/.venv\n+  .venv/bin/pip install --no-cache-dir cargo-zigbuild\n+HEREDOC\n \n-# Install rust\n-ARG TARGETPLATFORM\n-RUN case \"$TARGETPLATFORM\" in \\\n-  \"linux/arm64\") echo \"aarch64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  \"linux/amd64\") echo \"x86_64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  *) exit 1 ;; \\\n-  esac\n-# Update rustup whenever we bump the rust version\n-COPY rust-toolchain.toml rust-toolchain.toml\n-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none\n+# Install rust:\n ENV PATH=\"$HOME/.cargo/bin:$PATH\"\n-# Installs the correct toolchain version from rust-toolchain.toml and then the musl target\n-RUN rustup target add $(cat rust_target.txt)\n-\n-# Build\n-COPY crates crates\n-COPY ./Cargo.toml Cargo.toml\n-COPY ./Cargo.lock Cargo.lock\n-RUN cargo zigbuild --bin uv --target $(cat rust_target.txt) --release\n-RUN cp target/$(cat rust_target.txt)/release/uv /uv\n-# TODO(konsti): Optimize binary size, with a version that also works when cross compiling\n-# RUN strip --strip-all /uv\n+COPY rust-toolchain.toml .\n+RUN <<HEREDOC\n+  # Install rustup, but skip installing a default toolchain as we only want the version from `rust-toolchain.toml`:\n+  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain none\n+\n+  # When rustup installs the toolchain ensure it actually uses the minimal profile, avoiding excess layer weight:\n+  # https://github.com/rust-lang/rustup/issues/3805#issuecomment-2094066914\n+  echo 'profile = \"minimal\"' >> rust-toolchain.toml\n+  echo 'targets = [ \"aarch64-unknown-linux-musl\", \"x86_64-unknown-linux-musl\" ]' >> rust-toolchain.toml\n+  # Add the relevant musl target triples (for a building binary with static linking):\n+  # Workaround until `ensure` arrives: https://github.com/rust-lang/rustup/issues/2686#issuecomment-788825744\n+  rustup show\n+HEREDOC\n+\n+# Handle individual images differences for ARM64 / AMD64:\n+FROM builder-base AS builder-arm64\n+ENV CARGO_BUILD_TARGET=aarch64-unknown-linux-musl\n+\n+FROM builder-base AS builder-amd64\n+ENV CARGO_BUILD_TARGET=x86_64-unknown-linux-musl",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "1590190741",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 3372,
        "pr_file": "Dockerfile",
        "discussion_id": "1590190741",
        "commented_code": "@@ -1,45 +1,86 @@\n-FROM --platform=$BUILDPLATFORM ubuntu as build\n+# syntax=docker/dockerfile:1\n+\n+FROM --platform=${BUILDPLATFORM} ubuntu:24.04 AS builder-base\n+# Configure the shell to exit early if any command fails, or when referencing unset variables.\n+# Additionally `-x` outputs each command run, this is helpful for troubleshooting failures.\n+SHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n+\n+RUN \\\n+  --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \\\n+  --mount=target=/var/cache/apt,type=cache,sharing=locked \\\n+  <<HEREDOC\n+    # https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/reference.md#example-cache-apt-packages\n+    # https://stackoverflow.com/questions/66808788/docker-can-you-cache-apt-get-package-installs#comment135104889_72851168\n+    rm -f /etc/apt/apt.conf.d/docker-clean\n+    echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' > /etc/apt/apt.conf.d/keep-cache\n+\n+    apt update && apt install -y --no-install-recommends \\\n+      build-essential \\\n+      curl \\\n+      python3-venv \\\n+      cmake\n+HEREDOC\n+\n ENV HOME=\"/root\"\n+ENV PATH=\"$HOME/.venv/bin:$PATH\"\n WORKDIR $HOME\n \n-RUN apt update \\\n-  && apt install -y --no-install-recommends \\\n-  build-essential \\\n-  curl \\\n-  python3-venv \\\n-  cmake \\\n-  && apt clean \\\n-  && rm -rf /var/lib/apt/lists/*\n-\n-# Setup zig as cross compiling linker\n-RUN python3 -m venv $HOME/.venv\n-RUN .venv/bin/pip install cargo-zigbuild\n-ENV PATH=\"$HOME/.venv/bin:$PATH\"\n+# Setup zig as cross compiling linker:\n+RUN <<HEREDOC\n+  python3 -m venv $HOME/.venv\n+  .venv/bin/pip install --no-cache-dir cargo-zigbuild\n+HEREDOC\n \n-# Install rust\n-ARG TARGETPLATFORM\n-RUN case \"$TARGETPLATFORM\" in \\\n-  \"linux/arm64\") echo \"aarch64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  \"linux/amd64\") echo \"x86_64-unknown-linux-musl\" > rust_target.txt ;; \\\n-  *) exit 1 ;; \\\n-  esac\n-# Update rustup whenever we bump the rust version\n-COPY rust-toolchain.toml rust-toolchain.toml\n-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none\n+# Install rust:\n ENV PATH=\"$HOME/.cargo/bin:$PATH\"\n-# Installs the correct toolchain version from rust-toolchain.toml and then the musl target\n-RUN rustup target add $(cat rust_target.txt)\n-\n-# Build\n-COPY crates crates\n-COPY ./Cargo.toml Cargo.toml\n-COPY ./Cargo.lock Cargo.lock\n-RUN cargo zigbuild --bin uv --target $(cat rust_target.txt) --release\n-RUN cp target/$(cat rust_target.txt)/release/uv /uv\n-# TODO(konsti): Optimize binary size, with a version that also works when cross compiling\n-# RUN strip --strip-all /uv\n+COPY rust-toolchain.toml .\n+RUN <<HEREDOC\n+  # Install rustup, but skip installing a default toolchain as we only want the version from `rust-toolchain.toml`:\n+  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain none\n+\n+  # When rustup installs the toolchain ensure it actually uses the minimal profile, avoiding excess layer weight:\n+  # https://github.com/rust-lang/rustup/issues/3805#issuecomment-2094066914\n+  echo 'profile = \"minimal\"' >> rust-toolchain.toml\n+  echo 'targets = [ \"aarch64-unknown-linux-musl\", \"x86_64-unknown-linux-musl\" ]' >> rust-toolchain.toml\n+  # Add the relevant musl target triples (for a building binary with static linking):\n+  # Workaround until `ensure` arrives: https://github.com/rust-lang/rustup/issues/2686#issuecomment-788825744\n+  rustup show\n+HEREDOC\n+\n+# Handle individual images differences for ARM64 / AMD64:\n+FROM builder-base AS builder-arm64\n+ENV CARGO_BUILD_TARGET=aarch64-unknown-linux-musl\n+\n+FROM builder-base AS builder-amd64\n+ENV CARGO_BUILD_TARGET=x86_64-unknown-linux-musl",
        "comment_created_at": "2024-05-05T01:36:40+00:00",
        "comment_author": "polarathene",
        "comment_body": "This is effectively what you were doing earlier with the bash conditional statement on `TARGETPLATFORM` arg. But instead of writing to a file (`rust_target.txt`), a new intermediary stage is introduced and sets the expected target as an appropriate ENV.\r\n\r\nThis actually removes the need for the `--target` option when building, but I kept it for clarity.\r\n\r\nThe next stage (`builder-app`) refers to the `TARGETARCH` implicit arg from BuildKit. Thus when building the `Dockerfile` the stage selection here is determined from the final stage being built.\r\n\r\nIt'll remain as being built from the same `BUILDPLATFORM` above, but diverge at this point. Due to the cache mounts used in `builder-app`, this isn't a big concern, you really only have a few MB repeated from the `COPY` instruction, followed by the binary `cp` (_since the `target/` cache mount excludes the original binary from the image_).\r\n\r\nA prior commit in this PR history had an alternative approach where both targets were built, and these separate stages were located at the end of the `Dockerfile`, where they instead used `COPY --from` with the location to their respective target binary.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2065098414",
    "pr_number": 11106,
    "pr_file": "Dockerfile",
    "created_at": "2025-04-29T00:17:18+00:00",
    "commented_code": "esac\n \n # Update rustup whenever we bump the rust version\n+ENV PATH=\"$CARGO_HOME/bin:$PATH\"\n COPY rust-toolchain.toml rust-toolchain.toml\n-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none\n-ENV PATH=\"$HOME/.cargo/bin:$PATH\"\n-# Installs the correct toolchain version from rust-toolchain.toml and then the musl target\n-RUN rustup target add $(cat rust_target.txt)\n+RUN \\\n+  --mount=type=cache,target=/buildkit-cache,id=\"tool-caches\" \\\n+  ( \\\n+    rustup self update \\\n+    || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none \\\n+  ) \\\n+  # Installs the correct toolchain version from rust-toolchain.toml and then the musl target\n+  && rustup target add $(cat rust_target.txt)\n \n # Build\n-COPY crates crates\n-COPY ./Cargo.toml Cargo.toml\n-COPY ./Cargo.lock Cargo.lock\n-RUN case \"${TARGETPLATFORM}\" in \\\n+RUN \\\n+  # bind mounts to access Cargo config, lock, and sources, without having to\n+  # copy them into the build layer and so bloat the docker build cache\n+  --mount=type=bind,source=crates,target=crates \\\n+  --mount=type=bind,source=Cargo.toml,target=Cargo.toml \\\n+  --mount=type=bind,source=Cargo.lock,target=Cargo.lock \\\n+  # Cache mounts to speed up builds\n+  --mount=type=cache,target=$HOME/target/ \\\n+  --mount=type=cache,target=/buildkit-cache,id=\"tool-caches\" \\\n+  case \"${TARGETPLATFORM}\" in \\\n   \"linux/arm64\") export JEMALLOC_SYS_WITH_LG_PAGE=16;; \\\n   esac && \\",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2065098414",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 11106,
        "pr_file": "Dockerfile",
        "discussion_id": "2065098414",
        "commented_code": "@@ -25,21 +38,32 @@ RUN case \"$TARGETPLATFORM\" in \\\n   esac\n \n # Update rustup whenever we bump the rust version\n+ENV PATH=\"$CARGO_HOME/bin:$PATH\"\n COPY rust-toolchain.toml rust-toolchain.toml\n-RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none\n-ENV PATH=\"$HOME/.cargo/bin:$PATH\"\n-# Installs the correct toolchain version from rust-toolchain.toml and then the musl target\n-RUN rustup target add $(cat rust_target.txt)\n+RUN \\\n+  --mount=type=cache,target=/buildkit-cache,id=\"tool-caches\" \\\n+  ( \\\n+    rustup self update \\\n+    || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none \\\n+  ) \\\n+  # Installs the correct toolchain version from rust-toolchain.toml and then the musl target\n+  && rustup target add $(cat rust_target.txt)\n \n # Build\n-COPY crates crates\n-COPY ./Cargo.toml Cargo.toml\n-COPY ./Cargo.lock Cargo.lock\n-RUN case \"${TARGETPLATFORM}\" in \\\n+RUN \\\n+  # bind mounts to access Cargo config, lock, and sources, without having to\n+  # copy them into the build layer and so bloat the docker build cache\n+  --mount=type=bind,source=crates,target=crates \\\n+  --mount=type=bind,source=Cargo.toml,target=Cargo.toml \\\n+  --mount=type=bind,source=Cargo.lock,target=Cargo.lock \\\n+  # Cache mounts to speed up builds\n+  --mount=type=cache,target=$HOME/target/ \\\n+  --mount=type=cache,target=/buildkit-cache,id=\"tool-caches\" \\\n+  case \"${TARGETPLATFORM}\" in \\\n   \"linux/arm64\") export JEMALLOC_SYS_WITH_LG_PAGE=16;; \\\n   esac && \\",
        "comment_created_at": "2025-04-29T00:17:18+00:00",
        "comment_author": "polarathene",
        "comment_body": "Adjusted `RUN` content that makes the earlier `ARG TARGETPLATFORM` block redundant (_so ARM64 + AMD64 builds only diverge common image layers at this point of the build instead_).\r\n\r\n```Dockerfile\r\nARG TARGETPLATFORM\r\nRUN \\\r\n  # Use bind mounts to access Cargo config, lock, and sources; without needing to\r\n  # copy them into a build layer (avoids bloating the docker build layer cache):\r\n  --mount=type=bind,source=crates,target=crates \\\r\n  --mount=type=bind,source=Cargo.toml,target=Cargo.toml \\\r\n  --mount=type=bind,source=Cargo.lock,target=Cargo.lock \\\r\n  # Add cache mounts to speed up builds:\r\n  --mount=type=cache,target=${HOME}/target/ \\\r\n  --mount=type=cache,target=/buildkit-cache,id=\"tool-caches\" \\\r\n  <<HEREDOC\r\n  # Handle platform differences like mapping target arch to naming convention used by cargo targets:\r\n  # https://en.wikipedia.org/wiki/X86-64#Industry_naming_conventions\r\n  case \"${TARGETPLATFORM}\" in\r\n    ( 'linux/amd64' )\r\n      export CARGO_BUILD_TARGET='x86_64-unknown-linux-musl'\r\n      ;;\r\n    ( 'linux/arm64' )\r\n      export CARGO_BUILD_TARGET='aarch64-unknown-linux-musl'\r\n      export JEMALLOC_SYS_WITH_LG_PAGE=16\r\n      ;;\r\n    ( * )\r\n      echo \"ERROR: Unsupported target platform: '${TARGETPLATFORM}'\"\r\n      return 1\r\n      ;;\r\n  esac\r\n\r\n  cargo zigbuild --release --bin uv --bin uvx --target \"${CARGO_BUILD_TARGET}\"\r\n  cp \"target/${CARGO_BUILD_TARGET}/release/uv\" /uv\r\n  cp \"target/${CARGO_BUILD_TARGET}/release/uvx\" /uvx\r\nHEREDOC\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  }
]