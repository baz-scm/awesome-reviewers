[
  {
    "discussion_id": "2107462437",
    "pr_number": 13560,
    "pr_file": "crates/uv-redacted/src/lib.rs",
    "created_at": "2025-05-26T14:27:22+00:00",
    "commented_code": "-use std::borrow::Cow;\n-\n+use serde::{Deserialize, Serialize};\n+use std::ops::{Deref, DerefMut};\n+use std::str::FromStr;\n use url::Url;\n \n-/// Return a version of the URL with redacted credentials, allowing the generic `git` username (without a password)\n-/// in SSH URLs, as in, `ssh://git@github.com/...`.\n-pub fn redacted_url(url: &Url) -> Cow<'_, Url> {\n-    if url.username().is_empty() && url.password().is_none() {\n-        return Cow::Borrowed(url);\n+/// A URL wrapper that safely handles credentials for logging purposes.",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2107462437",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv-redacted/src/lib.rs",
        "discussion_id": "2107462437",
        "commented_code": "@@ -1,21 +1,174 @@\n-use std::borrow::Cow;\n-\n+use serde::{Deserialize, Serialize};\n+use std::ops::{Deref, DerefMut};\n+use std::str::FromStr;\n use url::Url;\n \n-/// Return a version of the URL with redacted credentials, allowing the generic `git` username (without a password)\n-/// in SSH URLs, as in, `ssh://git@github.com/...`.\n-pub fn redacted_url(url: &Url) -> Cow<'_, Url> {\n-    if url.username().is_empty() && url.password().is_none() {\n-        return Cow::Borrowed(url);\n+/// A URL wrapper that safely handles credentials for logging purposes.",
        "comment_created_at": "2025-05-26T14:27:22+00:00",
        "comment_author": "konstin",
        "comment_body": "I would make this more generic, since we're also displaying URLs in error messages and serializing it to files, e.g.:\n\n```suggestion\n/// A [`Url`] wrapper that redacts credentials when displaying the URL.\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107479635",
    "pr_number": 13560,
    "pr_file": "crates/uv-distribution-types/src/index_url.rs",
    "created_at": "2025-05-26T14:38:01+00:00",
    "commented_code": "impl IndexUrl {",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2107479635",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv-distribution-types/src/index_url.rs",
        "discussion_id": "2107479635",
        "commented_code": "@@ -108,16 +110,16 @@ impl schemars::JsonSchema for IndexUrl {\n \n impl IndexUrl {",
        "comment_created_at": "2025-05-26T14:38:01+00:00",
        "comment_author": "konstin",
        "comment_body": "I find it confusing that `LogSafeUrl` here is both working a URL that has credentials, but redacts them, and as a URL that had its credentials removed.",
        "pr_file_module": null
      },
      {
        "comment_id": "2107485657",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv-distribution-types/src/index_url.rs",
        "discussion_id": "2107479635",
        "commented_code": "@@ -108,16 +110,16 @@ impl schemars::JsonSchema for IndexUrl {\n \n impl IndexUrl {",
        "comment_created_at": "2025-05-26T14:41:45+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "The idea is that it's a version of `Url` that you can log safely. It's not meant to imply that the credentials are in any other state. I wanted it to effectively be uv's replacement for using `Url` in general.",
        "pr_file_module": null
      },
      {
        "comment_id": "2107501348",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv-distribution-types/src/index_url.rs",
        "discussion_id": "2107479635",
        "commented_code": "@@ -108,16 +110,16 @@ impl schemars::JsonSchema for IndexUrl {\n \n impl IndexUrl {",
        "comment_created_at": "2025-05-26T14:50:39+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "But maybe I'm missing part of your point. The `without_credentials()` case is for when you want to display or log the URL without the masked credentials. There are some cases where we want to indicate the credentials were part of the raw URL by showing the masked version (e.g., for debugging requests) and some cases where we just want the URL itself (like in the lockfile).",
        "pr_file_module": null
      },
      {
        "comment_id": "2107555476",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv-distribution-types/src/index_url.rs",
        "discussion_id": "2107479635",
        "commented_code": "@@ -108,16 +110,16 @@ impl schemars::JsonSchema for IndexUrl {\n \n impl IndexUrl {",
        "comment_created_at": "2025-05-26T15:18:58+00:00",
        "comment_author": "konstin",
        "comment_body": "This is something that's already in the existing code: Sometimes `Url` refers to a URL with credentials, and sometimes to the same underlying \"data\" without credentials. What about returning a `impl Display` instead of a real type from `without_credentials` to make it clearer that this is an output-only method?",
        "pr_file_module": null
      },
      {
        "comment_id": "2107713118",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv-distribution-types/src/index_url.rs",
        "discussion_id": "2107479635",
        "commented_code": "@@ -108,16 +110,16 @@ impl schemars::JsonSchema for IndexUrl {\n \n impl IndexUrl {",
        "comment_created_at": "2025-05-26T18:09:40+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Are there cases where we might want the URL but not the credentials? That's thinking ahead. For now, we'd add some extra allocations and lose the type information (i.e., that this is safe to display). So I'm hesitant to change it, but not a strong opinion.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107509758",
    "pr_number": 13560,
    "pr_file": "crates/uv/src/commands/project/add.rs",
    "created_at": "2025-05-26T14:54:43+00:00",
    "commented_code": "GIT_STORE.insert(RepositoryUrl::new(&git), credentials);\n \n                     // Redact the credentials.\n-                    redact_credentials(&mut git);\n+                    git.remove_credentials();",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2107509758",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv/src/commands/project/add.rs",
        "discussion_id": "2107509758",
        "commented_code": "@@ -649,7 +650,7 @@ fn edits(\n                     GIT_STORE.insert(RepositoryUrl::new(&git), credentials);\n \n                     // Redact the credentials.\n-                    redact_credentials(&mut git);\n+                    git.remove_credentials();",
        "comment_created_at": "2025-05-26T14:54:43+00:00",
        "comment_author": "konstin",
        "comment_body": "Do we still need this?\n\nThis question applies to all non-test `remove_credentials` calls: Do we still need explicit redaction, or does automatic redaction handle everything we need now?",
        "pr_file_module": null
      },
      {
        "comment_id": "2107590548",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv/src/commands/project/add.rs",
        "discussion_id": "2107509758",
        "commented_code": "@@ -649,7 +650,7 @@ fn edits(\n                     GIT_STORE.insert(RepositoryUrl::new(&git), credentials);\n \n                     // Redact the credentials.\n-                    redact_credentials(&mut git);\n+                    git.remove_credentials();",
        "comment_created_at": "2025-05-26T15:48:58+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "I tried to preserve the existing logic as much as I could. This old `redact_credentials` function removed the credentials from the `Url`. So this is just doing the same thing the new way.\r\n\r\nThe `LogSafeUrl` only automatically masks credentials (if they exist) when displaying. That doesn't handle cases where you want to display a URL without credentials or for some other reason want to remove them. In those cases, you still have to handle it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2107592196",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv/src/commands/project/add.rs",
        "discussion_id": "2107509758",
        "commented_code": "@@ -649,7 +650,7 @@ fn edits(\n                     GIT_STORE.insert(RepositoryUrl::new(&git), credentials);\n \n                     // Redact the credentials.\n-                    redact_credentials(&mut git);\n+                    git.remove_credentials();",
        "comment_created_at": "2025-05-26T15:50:20+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "But since the codebase does not currently have a single consistent way of handling this, it could make sense to do another pass to see where we really need to remove them and where we don't. I'd rather do that as part of a separate PR.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107576911",
    "pr_number": 13560,
    "pr_file": "crates/uv-resolver/src/pubgrub/report.rs",
    "created_at": "2025-05-26T15:36:37+00:00",
    "commented_code": "\"{}{} An index URL ({}) could not be queried due to a lack of valid authentication credentials ({}).\",\n                     \"hint\".bold().cyan(),\n                     \":\".bold(),\n-                    index.redacted().cyan(),\n+                    index.without_credentials().cyan(),",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2107576911",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv-resolver/src/pubgrub/report.rs",
        "discussion_id": "2107576911",
        "commented_code": "@@ -1530,7 +1530,7 @@ impl std::fmt::Display for PubGrubHint {\n                     \"{}{} An index URL ({}) could not be queried due to a lack of valid authentication credentials ({}).\",\n                     \"hint\".bold().cyan(),\n                     \":\".bold(),\n-                    index.redacted().cyan(),\n+                    index.without_credentials().cyan(),",
        "comment_created_at": "2025-05-26T15:36:37+00:00",
        "comment_author": "konstin",
        "comment_body": "I'm a bit torn here, on one side seeing `***` here could be confusing cause those credentials are evidently the wrong ones, otoh I'd really want to know that there were credentials on the URL here.",
        "pr_file_module": null
      },
      {
        "comment_id": "2107596591",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv-resolver/src/pubgrub/report.rs",
        "discussion_id": "2107576911",
        "commented_code": "@@ -1530,7 +1530,7 @@ impl std::fmt::Display for PubGrubHint {\n                     \"{}{} An index URL ({}) could not be queried due to a lack of valid authentication credentials ({}).\",\n                     \"hint\".bold().cyan(),\n                     \":\".bold(),\n-                    index.redacted().cyan(),\n+                    index.without_credentials().cyan(),",
        "comment_created_at": "2025-05-26T15:54:12+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Yeah that's a good point. Note that this is not changing the existing behavior.",
        "pr_file_module": null
      },
      {
        "comment_id": "2107728856",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13560,
        "pr_file": "crates/uv-resolver/src/pubgrub/report.rs",
        "discussion_id": "2107576911",
        "commented_code": "@@ -1530,7 +1530,7 @@ impl std::fmt::Display for PubGrubHint {\n                     \"{}{} An index URL ({}) could not be queried due to a lack of valid authentication credentials ({}).\",\n                     \"hint\".bold().cyan(),\n                     \":\".bold(),\n-                    index.redacted().cyan(),\n+                    index.without_credentials().cyan(),",
        "comment_created_at": "2025-05-26T18:29:09+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Reflecting more, I think it's helpful this way since it indicates the invalid credentials were on the URL.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2078068492",
    "pr_number": 13333,
    "pr_file": "crates/uv-auth/src/cache.rs",
    "created_at": "2025-05-07T16:50:57+00:00",
    "commented_code": "/// cached credentials have a username equal to the provided one \u2014 otherwise `None` is returned.\n     /// If multiple usernames are used per URL, the realm cache should be queried instead.\n     pub(crate) fn get_url(&self, url: &Url, username: &Username) -> Option<Arc<Credentials>> {\n+        let url = redacted_url(url);",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2078068492",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13333,
        "pr_file": "crates/uv-auth/src/cache.rs",
        "discussion_id": "2078068492",
        "commented_code": "@@ -93,8 +94,9 @@ impl CredentialsCache {\n     /// cached credentials have a username equal to the provided one \u2014 otherwise `None` is returned.\n     /// If multiple usernames are used per URL, the realm cache should be queried instead.\n     pub(crate) fn get_url(&self, url: &Url, username: &Username) -> Option<Arc<Credentials>> {\n+        let url = redacted_url(url);",
        "comment_created_at": "2025-05-07T16:50:57+00:00",
        "comment_author": "charliermarsh",
        "comment_body": "I think this should all happen in the `trace!` macro, so that it doesn't run at all unless `trace!` is enabled (extremely rare).",
        "pr_file_module": null
      },
      {
        "comment_id": "2078083851",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13333,
        "pr_file": "crates/uv-auth/src/cache.rs",
        "discussion_id": "2078068492",
        "commented_code": "@@ -93,8 +94,9 @@ impl CredentialsCache {\n     /// cached credentials have a username equal to the provided one \u2014 otherwise `None` is returned.\n     /// If multiple usernames are used per URL, the realm cache should be queried instead.\n     pub(crate) fn get_url(&self, url: &Url, username: &Username) -> Option<Arc<Credentials>> {\n+        let url = redacted_url(url);",
        "comment_created_at": "2025-05-07T17:00:18+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "I can update to use the trace sites. The thinking was that this made it more unlikely a developer would accidentally leak credentials if adding a future trace.",
        "pr_file_module": null
      },
      {
        "comment_id": "2078432450",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13333,
        "pr_file": "crates/uv-auth/src/cache.rs",
        "discussion_id": "2078068492",
        "commented_code": "@@ -93,8 +94,9 @@ impl CredentialsCache {\n     /// cached credentials have a username equal to the provided one \u2014 otherwise `None` is returned.\n     /// If multiple usernames are used per URL, the realm cache should be queried instead.\n     pub(crate) fn get_url(&self, url: &Url, username: &Username) -> Option<Arc<Credentials>> {\n+        let url = redacted_url(url);",
        "comment_created_at": "2025-05-07T20:20:03+00:00",
        "comment_author": "charliermarsh",
        "comment_body": "But does this mean we also need to redact when we _insert_?",
        "pr_file_module": null
      },
      {
        "comment_id": "2078544290",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13333,
        "pr_file": "crates/uv-auth/src/cache.rs",
        "discussion_id": "2078068492",
        "commented_code": "@@ -93,8 +94,9 @@ impl CredentialsCache {\n     /// cached credentials have a username equal to the provided one \u2014 otherwise `None` is returned.\n     /// If multiple usernames are used per URL, the realm cache should be queried instead.\n     pub(crate) fn get_url(&self, url: &Url, username: &Username) -> Option<Arc<Credentials>> {\n+        let url = redacted_url(url);",
        "comment_created_at": "2025-05-07T21:51:08+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Yes, it looks like I was only handling the insert into `CREDENTIALS_CACHE` before. Updated. I'm going to add a test for this case since I would have expected it to break.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2078069907",
    "pr_number": 13333,
    "pr_file": "crates/uv/src/commands/reporters.rs",
    "created_at": "2025-05-07T16:51:53+00:00",
    "commented_code": "}\n \n     fn on_checkout_start(&self, url: &Url, rev: &str) -> usize {\n+        let url = redacted_url(url);",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2078069907",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13333,
        "pr_file": "crates/uv/src/commands/reporters.rs",
        "discussion_id": "2078069907",
        "commented_code": "@@ -300,6 +301,7 @@ impl ProgressReporter {\n     }\n \n     fn on_checkout_start(&self, url: &Url, rev: &str) -> usize {\n+        let url = redacted_url(url);",
        "comment_created_at": "2025-05-07T16:51:53+00:00",
        "comment_author": "charliermarsh",
        "comment_body": "Why not move this to the use site, like line 320/322?",
        "pr_file_module": null
      },
      {
        "comment_id": "2078072611",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13333,
        "pr_file": "crates/uv/src/commands/reporters.rs",
        "discussion_id": "2078069907",
        "commented_code": "@@ -300,6 +301,7 @@ impl ProgressReporter {\n     }\n \n     fn on_checkout_start(&self, url: &Url, rev: &str) -> usize {\n+        let url = redacted_url(url);",
        "comment_created_at": "2025-05-07T16:53:29+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "The idea is to make it more unlikely for future changes to use the `Url` with credentials. The places I didn't do this were where we were also potentially using the credentials from the `Url`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083212943",
    "pr_number": 13333,
    "pr_file": "crates/uv-git-types/src/lib.rs",
    "created_at": "2025-05-10T14:46:42+00:00",
    "commented_code": "impl std::fmt::Display for GitUrl {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(f, \"{}\", self.repository)\n+        write!(f, \"{}\", redacted_url(&self.repository))\n+    }\n+}\n+\n+/// Return a version of the URL with redacted credentials, allowing the generic `git` username (without a password)\n+/// in SSH URLs, as in, `ssh://git@github.com/...`.\n+// TODO(john): This code is a duplicate of the function in `uv-auth`.\n+// It's here to avoid importing `uv-auth` into this crate. Consolidate these\n+// once we use a `RedactedUrl` type.\n+pub fn redacted_url(url: &Url) -> Cow<'_, Url> {\n+    let no_credentials = url.username().is_empty() && url.password().is_none();\n+    let generic_git_username =\n+        url.scheme() == \"ssh\" && url.username() == \"git\" && url.password().is_none();\n+    if no_credentials || generic_git_username {\n+        Cow::Borrowed(url)\n+    } else {\n+        let mut url = url.clone();\n+        if url.password().is_some() {\n+            let _ = url.set_password(Some(\"****\"));\n+        // A username on its own might be a secret token.\n+        } else if url.username() != \"\" {\n+            let _ = url.set_username(\"****\");",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2083212943",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13333,
        "pr_file": "crates/uv-git-types/src/lib.rs",
        "discussion_id": "2083212943",
        "commented_code": "@@ -151,6 +153,29 @@ impl From<GitUrl> for Url {\n \n impl std::fmt::Display for GitUrl {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(f, \"{}\", self.repository)\n+        write!(f, \"{}\", redacted_url(&self.repository))\n+    }\n+}\n+\n+/// Return a version of the URL with redacted credentials, allowing the generic `git` username (without a password)\n+/// in SSH URLs, as in, `ssh://git@github.com/...`.\n+// TODO(john): This code is a duplicate of the function in `uv-auth`.\n+// It's here to avoid importing `uv-auth` into this crate. Consolidate these\n+// once we use a `RedactedUrl` type.\n+pub fn redacted_url(url: &Url) -> Cow<'_, Url> {\n+    let no_credentials = url.username().is_empty() && url.password().is_none();\n+    let generic_git_username =\n+        url.scheme() == \"ssh\" && url.username() == \"git\" && url.password().is_none();\n+    if no_credentials || generic_git_username {\n+        Cow::Borrowed(url)\n+    } else {\n+        let mut url = url.clone();\n+        if url.password().is_some() {\n+            let _ = url.set_password(Some(\"****\"));\n+        // A username on its own might be a secret token.\n+        } else if url.username() != \"\" {\n+            let _ = url.set_username(\"****\");",
        "comment_created_at": "2025-05-10T14:46:42+00:00",
        "comment_author": "charliermarsh",
        "comment_body": "It's a little confusing that half of our redact methods remove the credentials entirely, and then half replace them with stars. It's also a little strange (though may not matter in practice) that we're using this version for the cache key, so like the cache key path now includes these stars?\r\n\r\nIt might be nice to use a different name for these methods that replace with stars vs. those that remove the credentials entirely (like `sensitive` vs. `redact` or `without_credentials` or something).\r\n\r\nOr just drop the stars entirely and match the existing redact logic for consistency for now.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2083515838",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13333,
        "pr_file": "crates/uv-git-types/src/lib.rs",
        "discussion_id": "2083212943",
        "commented_code": "@@ -151,6 +153,29 @@ impl From<GitUrl> for Url {\n \n impl std::fmt::Display for GitUrl {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(f, \"{}\", self.repository)\n+        write!(f, \"{}\", redacted_url(&self.repository))\n+    }\n+}\n+\n+/// Return a version of the URL with redacted credentials, allowing the generic `git` username (without a password)\n+/// in SSH URLs, as in, `ssh://git@github.com/...`.\n+// TODO(john): This code is a duplicate of the function in `uv-auth`.\n+// It's here to avoid importing `uv-auth` into this crate. Consolidate these\n+// once we use a `RedactedUrl` type.\n+pub fn redacted_url(url: &Url) -> Cow<'_, Url> {\n+    let no_credentials = url.username().is_empty() && url.password().is_none();\n+    let generic_git_username =\n+        url.scheme() == \"ssh\" && url.username() == \"git\" && url.password().is_none();\n+    if no_credentials || generic_git_username {\n+        Cow::Borrowed(url)\n+    } else {\n+        let mut url = url.clone();\n+        if url.password().is_some() {\n+            let _ = url.set_password(Some(\"****\"));\n+        // A username on its own might be a secret token.\n+        } else if url.username() != \"\" {\n+            let _ = url.set_username(\"****\");",
        "comment_created_at": "2025-05-11T12:49:18+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "It can be helpful to have the stars when debugging but we can defer this decision until after this PR (on `main` we do it in some places and not others). The follow-up PR will put this decision in one place. To move this PR forward, I've removed the masking from `redacted_url` and dropped the stars there.\r\n\r\nI've also removed all uses from `uv-auth` (including around the credentials cache). As a result, I've moved `redacted_url` out of `uv-auth` and into a new `uv-redacted` crate. This means we continue to rely on the existing mechanisms for redacting credentials there. This should help move the PR forward and is still a strict improvement.",
        "pr_file_module": null
      },
      {
        "comment_id": "2084956902",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13333,
        "pr_file": "crates/uv-git-types/src/lib.rs",
        "discussion_id": "2083212943",
        "commented_code": "@@ -151,6 +153,29 @@ impl From<GitUrl> for Url {\n \n impl std::fmt::Display for GitUrl {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(f, \"{}\", self.repository)\n+        write!(f, \"{}\", redacted_url(&self.repository))\n+    }\n+}\n+\n+/// Return a version of the URL with redacted credentials, allowing the generic `git` username (without a password)\n+/// in SSH URLs, as in, `ssh://git@github.com/...`.\n+// TODO(john): This code is a duplicate of the function in `uv-auth`.\n+// It's here to avoid importing `uv-auth` into this crate. Consolidate these\n+// once we use a `RedactedUrl` type.\n+pub fn redacted_url(url: &Url) -> Cow<'_, Url> {\n+    let no_credentials = url.username().is_empty() && url.password().is_none();\n+    let generic_git_username =\n+        url.scheme() == \"ssh\" && url.username() == \"git\" && url.password().is_none();\n+    if no_credentials || generic_git_username {\n+        Cow::Borrowed(url)\n+    } else {\n+        let mut url = url.clone();\n+        if url.password().is_some() {\n+            let _ = url.set_password(Some(\"****\"));\n+        // A username on its own might be a secret token.\n+        } else if url.username() != \"\" {\n+            let _ = url.set_username(\"****\");",
        "comment_created_at": "2025-05-12T15:34:52+00:00",
        "comment_author": "charliermarsh",
        "comment_body": "Agreed! Can definitely be helpful, mostly just pointing out that there are two different behaviors using the same terminology and we probably need to be thoughtful about which we use at each site (e.g., `***` for anything in tracing; omitted entirely for anything persisted, like the lockfile).",
        "pr_file_module": null
      }
    ]
  }
]