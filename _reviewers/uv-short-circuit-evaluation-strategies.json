[
  {
    "discussion_id": "2132811286",
    "pr_number": 13873,
    "pr_file": "crates/uv-python/src/discovery.rs",
    "created_at": "2025-06-06T19:36:30+00:00",
    "commented_code": ".map_ok(|tuple| Ok(PythonInstallation::from_tuple(tuple)))\n             })\n         }\n+        PythonRequest::Latest => Box::new({\n+            debug!(\"Searching for latest Python interpreter in {sources}\");\n+            python_interpreters(&VersionRequest::Any, None, environments, preference, cache)\n+                .filter_ok(|(_source, interpreter)| interpreter.python_version().pre().is_none())\n+                .max_by_key(|result| {",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2132811286",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13873,
        "pr_file": "crates/uv-python/src/discovery.rs",
        "discussion_id": "2132811286",
        "commented_code": "@@ -1051,6 +1055,19 @@ pub fn find_python_installations<'a>(\n                 .map_ok(|tuple| Ok(PythonInstallation::from_tuple(tuple)))\n             })\n         }\n+        PythonRequest::Latest => Box::new({\n+            debug!(\"Searching for latest Python interpreter in {sources}\");\n+            python_interpreters(&VersionRequest::Any, None, environments, preference, cache)\n+                .filter_ok(|(_source, interpreter)| interpreter.python_version().pre().is_none())\n+                .max_by_key(|result| {",
        "comment_created_at": "2025-06-06T19:36:30+00:00",
        "comment_author": "oconnor663",
        "comment_body": "What's the difference between this `Latest` behavior and the existing sort that `python_interpreters` is already returning, which I believe is determined over here: https://github.com/astral-sh/uv/blob/5b0133c0ecedf71a23e5d9bf6fbefc91008e5101/crates/uv-python/src/installation.rs#L480-L492\r\n\r\nVia here: https://github.com/astral-sh/uv/blob/5b0133c0ecedf71a23e5d9bf6fbefc91008e5101/crates/uv-python/src/managed.rs#L240",
        "pr_file_module": null
      },
      {
        "comment_id": "2133055775",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13873,
        "pr_file": "crates/uv-python/src/discovery.rs",
        "discussion_id": "2132811286",
        "commented_code": "@@ -1051,6 +1055,19 @@ pub fn find_python_installations<'a>(\n                 .map_ok(|tuple| Ok(PythonInstallation::from_tuple(tuple)))\n             })\n         }\n+        PythonRequest::Latest => Box::new({\n+            debug!(\"Searching for latest Python interpreter in {sources}\");\n+            python_interpreters(&VersionRequest::Any, None, environments, preference, cache)\n+                .filter_ok(|(_source, interpreter)| interpreter.python_version().pre().is_none())\n+                .max_by_key(|result| {",
        "comment_created_at": "2025-06-06T23:12:49+00:00",
        "comment_author": "maxmynter",
        "comment_body": "Refactored to use the implemented `Ord` in [5a45d4e](https://github.com/astral-sh/uv/pull/13873/commits/5a45d4ee85611c8975938cceba3ebfa0571a79c7)",
        "pr_file_module": null
      },
      {
        "comment_id": "2133132966",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13873,
        "pr_file": "crates/uv-python/src/discovery.rs",
        "discussion_id": "2132811286",
        "commented_code": "@@ -1051,6 +1055,19 @@ pub fn find_python_installations<'a>(\n                 .map_ok(|tuple| Ok(PythonInstallation::from_tuple(tuple)))\n             })\n         }\n+        PythonRequest::Latest => Box::new({\n+            debug!(\"Searching for latest Python interpreter in {sources}\");\n+            python_interpreters(&VersionRequest::Any, None, environments, preference, cache)\n+                .filter_ok(|(_source, interpreter)| interpreter.python_version().pre().is_none())\n+                .max_by_key(|result| {",
        "comment_created_at": "2025-06-07T00:55:09+00:00",
        "comment_author": "oconnor663",
        "comment_body": "What I'm thinking is more like, what's the behavior difference between `@latest` and `@any`? (I'm sure there's something I just haven't figured out what.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2133368004",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13873,
        "pr_file": "crates/uv-python/src/discovery.rs",
        "discussion_id": "2132811286",
        "commented_code": "@@ -1051,6 +1055,19 @@ pub fn find_python_installations<'a>(\n                 .map_ok(|tuple| Ok(PythonInstallation::from_tuple(tuple)))\n             })\n         }\n+        PythonRequest::Latest => Box::new({\n+            debug!(\"Searching for latest Python interpreter in {sources}\");\n+            python_interpreters(&VersionRequest::Any, None, environments, preference, cache)\n+                .filter_ok(|(_source, interpreter)| interpreter.python_version().pre().is_none())\n+                .max_by_key(|result| {",
        "comment_created_at": "2025-06-07T05:11:03+00:00",
        "comment_author": "zanieb",
        "comment_body": "I would expect `@latest` to scan _all_ Python interpreters and select the latest version, whereas `@any` would stop on the first interpreter.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2136075949",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13873,
        "pr_file": "crates/uv-python/src/discovery.rs",
        "discussion_id": "2132811286",
        "commented_code": "@@ -1051,6 +1055,19 @@ pub fn find_python_installations<'a>(\n                 .map_ok(|tuple| Ok(PythonInstallation::from_tuple(tuple)))\n             })\n         }\n+        PythonRequest::Latest => Box::new({\n+            debug!(\"Searching for latest Python interpreter in {sources}\");\n+            python_interpreters(&VersionRequest::Any, None, environments, preference, cache)\n+                .filter_ok(|(_source, interpreter)| interpreter.python_version().pre().is_none())\n+                .max_by_key(|result| {",
        "comment_created_at": "2025-06-09T16:52:59+00:00",
        "comment_author": "oconnor663",
        "comment_body": "@zanieb how do you think about that in combination with the fact that the list that `@any` looks at is already sorted by version? (IIUC it's actually sorted by implementation [e.g. `cpython`] first and then version.) So picking the latest and picking the first are approximately the same operation?",
        "pr_file_module": null
      },
      {
        "comment_id": "2136403742",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13873,
        "pr_file": "crates/uv-python/src/discovery.rs",
        "discussion_id": "2132811286",
        "commented_code": "@@ -1051,6 +1055,19 @@ pub fn find_python_installations<'a>(\n                 .map_ok(|tuple| Ok(PythonInstallation::from_tuple(tuple)))\n             })\n         }\n+        PythonRequest::Latest => Box::new({\n+            debug!(\"Searching for latest Python interpreter in {sources}\");\n+            python_interpreters(&VersionRequest::Any, None, environments, preference, cache)\n+                .filter_ok(|(_source, interpreter)| interpreter.python_version().pre().is_none())\n+                .max_by_key(|result| {",
        "comment_created_at": "2025-06-09T19:58:29+00:00",
        "comment_author": "zanieb",
        "comment_body": "`@any` isn't sorted by version during discovery though, because we short-circuit when we find an interpreter that meets the request. Sorting only makes a difference when selecting a Python download or iterating over managed Python installations.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2132131198",
    "pr_number": 13748,
    "pr_file": "crates/uv-git/src/source.rs",
    "created_at": "2025-06-06T12:45:18+00:00",
    "commented_code": "Cow::Borrowed(self.git.repository())\n         };\n \n-        let remote = GitRemote::new(&remote);\n-        let (db, actual_rev, task) = match (self.git.precise(), remote.db_at(&db_path).ok()) {\n-            // If we have a locked revision, and we have a preexisting database\n-            // which has that revision, then no update needs to happen.\n-            (Some(rev), Some(db)) if db.contains(rev) => {\n-                debug!(\"Using existing Git source `{}`\", self.git.repository());\n-                (db, rev, None)\n+        // Fetch the commit, if we don't already have it. Wrapping this section in a closure makes\n+        // it easier to short-circuit this in the cases where we do have the commit.\n+        let (db, actual_rev, maybe_task) = || -> Result<(GitDatabase, GitOid, Option<usize>)> {\n+            let git_remote = GitRemote::new(&remote);\n+            let maybe_db = git_remote.db_at(&db_path).ok();\n+\n+            // If we have a locked revision, and we have a preexisting database which has that\n+            // revision, then no update needs to happen.\n+            if let (Some(rev), Some(db)) = (self.git.precise(), &maybe_db) {\n+                if db.contains(rev) {\n+                    debug!(\"Using existing Git source `{}`\", self.git.repository());\n+                    return Ok((maybe_db.unwrap(), rev, None));\n+                }\n             }\n \n-            // ... otherwise we use this state to update the git database. Note\n-            // that we still check for being offline here, for example in the\n-            // situation that we have a locked revision but the database\n-            // doesn't have it.\n-            (locked_rev, db) => {\n-                debug!(\"Updating Git source `{}`\", self.git.repository());\n-\n-                // Report the checkout operation to the reporter.\n-                let task = self.reporter.as_ref().map(|reporter| {\n-                    reporter.on_checkout_start(remote.url(), self.git.reference().as_rev())\n-                });\n-\n-                let (db, actual_rev) = remote.checkout(\n-                    &db_path,\n-                    db,\n-                    self.git.reference(),\n-                    locked_rev,\n-                    &self.client,\n-                    self.disable_ssl,\n-                    self.offline,\n-                )?;\n-\n-                (db, actual_rev, task)\n+            // If the revision isn't locked, but it looks like it might be an exact commit hash,\n+            // and we do have a preexisting database, then check whether it is in fact a commit\n+            // hash. If so, treat it like it's locked.\n+            if let Some(db) = &maybe_db {\n+                if let GitReference::BranchOrTagOrCommit(maybe_commit) = self.git.reference() {\n+                    if maybe_commit.len() == 40\n+                        && maybe_commit.chars().all(|ch| ch.is_ascii_hexdigit())",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2132131198",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13748,
        "pr_file": "crates/uv-git/src/source.rs",
        "discussion_id": "2132131198",
        "commented_code": "@@ -86,40 +86,63 @@ impl GitSource {\n             Cow::Borrowed(self.git.repository())\n         };\n \n-        let remote = GitRemote::new(&remote);\n-        let (db, actual_rev, task) = match (self.git.precise(), remote.db_at(&db_path).ok()) {\n-            // If we have a locked revision, and we have a preexisting database\n-            // which has that revision, then no update needs to happen.\n-            (Some(rev), Some(db)) if db.contains(rev) => {\n-                debug!(\"Using existing Git source `{}`\", self.git.repository());\n-                (db, rev, None)\n+        // Fetch the commit, if we don't already have it. Wrapping this section in a closure makes\n+        // it easier to short-circuit this in the cases where we do have the commit.\n+        let (db, actual_rev, maybe_task) = || -> Result<(GitDatabase, GitOid, Option<usize>)> {\n+            let git_remote = GitRemote::new(&remote);\n+            let maybe_db = git_remote.db_at(&db_path).ok();\n+\n+            // If we have a locked revision, and we have a preexisting database which has that\n+            // revision, then no update needs to happen.\n+            if let (Some(rev), Some(db)) = (self.git.precise(), &maybe_db) {\n+                if db.contains(rev) {\n+                    debug!(\"Using existing Git source `{}`\", self.git.repository());\n+                    return Ok((maybe_db.unwrap(), rev, None));\n+                }\n             }\n \n-            // ... otherwise we use this state to update the git database. Note\n-            // that we still check for being offline here, for example in the\n-            // situation that we have a locked revision but the database\n-            // doesn't have it.\n-            (locked_rev, db) => {\n-                debug!(\"Updating Git source `{}`\", self.git.repository());\n-\n-                // Report the checkout operation to the reporter.\n-                let task = self.reporter.as_ref().map(|reporter| {\n-                    reporter.on_checkout_start(remote.url(), self.git.reference().as_rev())\n-                });\n-\n-                let (db, actual_rev) = remote.checkout(\n-                    &db_path,\n-                    db,\n-                    self.git.reference(),\n-                    locked_rev,\n-                    &self.client,\n-                    self.disable_ssl,\n-                    self.offline,\n-                )?;\n-\n-                (db, actual_rev, task)\n+            // If the revision isn't locked, but it looks like it might be an exact commit hash,\n+            // and we do have a preexisting database, then check whether it is in fact a commit\n+            // hash. If so, treat it like it's locked.\n+            if let Some(db) = &maybe_db {\n+                if let GitReference::BranchOrTagOrCommit(maybe_commit) = self.git.reference() {\n+                    if maybe_commit.len() == 40\n+                        && maybe_commit.chars().all(|ch| ch.is_ascii_hexdigit())",
        "comment_created_at": "2025-06-06T12:45:18+00:00",
        "comment_author": "charliermarsh",
        "comment_body": "Do we need this check, or is the `let Ok` on `maybe_commit.parse::<GitOid>()` sufficient?",
        "pr_file_module": null
      },
      {
        "comment_id": "2132641391",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13748,
        "pr_file": "crates/uv-git/src/source.rs",
        "discussion_id": "2132131198",
        "commented_code": "@@ -86,40 +86,63 @@ impl GitSource {\n             Cow::Borrowed(self.git.repository())\n         };\n \n-        let remote = GitRemote::new(&remote);\n-        let (db, actual_rev, task) = match (self.git.precise(), remote.db_at(&db_path).ok()) {\n-            // If we have a locked revision, and we have a preexisting database\n-            // which has that revision, then no update needs to happen.\n-            (Some(rev), Some(db)) if db.contains(rev) => {\n-                debug!(\"Using existing Git source `{}`\", self.git.repository());\n-                (db, rev, None)\n+        // Fetch the commit, if we don't already have it. Wrapping this section in a closure makes\n+        // it easier to short-circuit this in the cases where we do have the commit.\n+        let (db, actual_rev, maybe_task) = || -> Result<(GitDatabase, GitOid, Option<usize>)> {\n+            let git_remote = GitRemote::new(&remote);\n+            let maybe_db = git_remote.db_at(&db_path).ok();\n+\n+            // If we have a locked revision, and we have a preexisting database which has that\n+            // revision, then no update needs to happen.\n+            if let (Some(rev), Some(db)) = (self.git.precise(), &maybe_db) {\n+                if db.contains(rev) {\n+                    debug!(\"Using existing Git source `{}`\", self.git.repository());\n+                    return Ok((maybe_db.unwrap(), rev, None));\n+                }\n             }\n \n-            // ... otherwise we use this state to update the git database. Note\n-            // that we still check for being offline here, for example in the\n-            // situation that we have a locked revision but the database\n-            // doesn't have it.\n-            (locked_rev, db) => {\n-                debug!(\"Updating Git source `{}`\", self.git.repository());\n-\n-                // Report the checkout operation to the reporter.\n-                let task = self.reporter.as_ref().map(|reporter| {\n-                    reporter.on_checkout_start(remote.url(), self.git.reference().as_rev())\n-                });\n-\n-                let (db, actual_rev) = remote.checkout(\n-                    &db_path,\n-                    db,\n-                    self.git.reference(),\n-                    locked_rev,\n-                    &self.client,\n-                    self.disable_ssl,\n-                    self.offline,\n-                )?;\n-\n-                (db, actual_rev, task)\n+            // If the revision isn't locked, but it looks like it might be an exact commit hash,\n+            // and we do have a preexisting database, then check whether it is in fact a commit\n+            // hash. If so, treat it like it's locked.\n+            if let Some(db) = &maybe_db {\n+                if let GitReference::BranchOrTagOrCommit(maybe_commit) = self.git.reference() {\n+                    if maybe_commit.len() == 40\n+                        && maybe_commit.chars().all(|ch| ch.is_ascii_hexdigit())",
        "comment_created_at": "2025-06-06T18:09:06+00:00",
        "comment_author": "oconnor663",
        "comment_body": "Kind of surprising to me, but `parse` is not sufficient: https://github.com/astral-sh/uv/blob/0109af1aa510bd4f0759b0d53d842c3716e5cc3f/crates/uv-git-types/src/oid.rs#L8\r\n\r\nI might experiment with making `GitOid` stricter. Like we discussed before how there's probably not actually a good reason to support OIDs less than 40 chars.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2047257665",
    "pr_number": 12201,
    "pr_file": "crates/uv/src/commands/project/run.rs",
    "created_at": "2025-04-16T16:04:31+00:00",
    "commented_code": ".parse::<u32>()\n         .with_context(|| format!(\"invalid value for {}\", EnvVars::UV_RUN_RECURSION_DEPTH))\n }\n+\n+/// Matches valid Python executable names:\n+/// - \u2705 \"python\", \"python39\", \"python3\", \"python3.9\", \"python4\", \"python3.10\", \"python3.13.3\"\n+/// - \u274c \"python3abc\", \"python3.12b3\", \"\", \"python-foo\"\n+fn is_python_executable(executable_command: &str) -> bool {\n+    executable_command\n+        .strip_prefix(\"python\")\n+        .is_some_and(|version| version.is_empty() || is_valid_python_version(version))\n+}\n+\n+/// Checks if a version string is a valid Python major.minor.patch version.\n+fn is_valid_python_version(version: &str) -> bool {\n+    PythonVersion::from_str(version).is_ok_and(|ver| {\n+        ver.is_stable() &&\n+            // Should not contain post info. E.g. \"3.12b3\"\n+            !ver.is_post()\n+    })\n+}\n+#[cfg(test)]\n+mod tests {\n+    use super::{is_python_executable, is_valid_python_version};\n+\n+    /// Helper function for asserting test cases.\n+    /// - If `expected_result` is `true`, it expects the function to return `true` (valid cases).\n+    /// - If `expected_result` is `false`, it expects the function to return `false` (invalid cases).\n+    fn assert_cases<F: Fn(&str) -> bool>(\n+        cases: &[&str],\n+        func: F,\n+        test_name: &str,\n+        expected_result: bool,\n+    ) {\n+        for &case in cases {\n+            let result = func(case);\n+            assert_eq!(\n+                result, expected_result,\n+                \"{test_name}: Expected `{expected_result}`, but got `{result}` for case `{case}`\"\n+            );\n+        }\n+    }\n+\n+    #[test]\n+    fn valid_is_python_executable() {\n+        let valid_cases = [\n+            \"python3\",\n+            \"python3.9\",\n+            \"python3.10\",\n+            \"python4\",\n+            \"python\",\n+            \"python3.11.3\",\n+            \"python39\", // Still a valid executable, although likely a typo",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2047257665",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12201,
        "pr_file": "crates/uv/src/commands/project/run.rs",
        "discussion_id": "2047257665",
        "commented_code": "@@ -1519,3 +1555,112 @@ fn read_recursion_depth_from_environment_variable() -> anyhow::Result<u32> {\n         .parse::<u32>()\n         .with_context(|| format!(\"invalid value for {}\", EnvVars::UV_RUN_RECURSION_DEPTH))\n }\n+\n+/// Matches valid Python executable names:\n+/// - \u2705 \"python\", \"python39\", \"python3\", \"python3.9\", \"python4\", \"python3.10\", \"python3.13.3\"\n+/// - \u274c \"python3abc\", \"python3.12b3\", \"\", \"python-foo\"\n+fn is_python_executable(executable_command: &str) -> bool {\n+    executable_command\n+        .strip_prefix(\"python\")\n+        .is_some_and(|version| version.is_empty() || is_valid_python_version(version))\n+}\n+\n+/// Checks if a version string is a valid Python major.minor.patch version.\n+fn is_valid_python_version(version: &str) -> bool {\n+    PythonVersion::from_str(version).is_ok_and(|ver| {\n+        ver.is_stable() &&\n+            // Should not contain post info. E.g. \"3.12b3\"\n+            !ver.is_post()\n+    })\n+}\n+#[cfg(test)]\n+mod tests {\n+    use super::{is_python_executable, is_valid_python_version};\n+\n+    /// Helper function for asserting test cases.\n+    /// - If `expected_result` is `true`, it expects the function to return `true` (valid cases).\n+    /// - If `expected_result` is `false`, it expects the function to return `false` (invalid cases).\n+    fn assert_cases<F: Fn(&str) -> bool>(\n+        cases: &[&str],\n+        func: F,\n+        test_name: &str,\n+        expected_result: bool,\n+    ) {\n+        for &case in cases {\n+            let result = func(case);\n+            assert_eq!(\n+                result, expected_result,\n+                \"{test_name}: Expected `{expected_result}`, but got `{result}` for case `{case}`\"\n+            );\n+        }\n+    }\n+\n+    #[test]\n+    fn valid_is_python_executable() {\n+        let valid_cases = [\n+            \"python3\",\n+            \"python3.9\",\n+            \"python3.10\",\n+            \"python4\",\n+            \"python\",\n+            \"python3.11.3\",\n+            \"python39\", // Still a valid executable, although likely a typo",
        "comment_created_at": "2025-04-16T16:04:31+00:00",
        "comment_author": "jtfmumm",
        "comment_body": "Since this is likely a typo and we probably don't have to worry about the distant future at the moment, should we detect cases over 37 and treat them as typos? Not necessary for this PR though",
        "pr_file_module": null
      },
      {
        "comment_id": "2051415048",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 12201,
        "pr_file": "crates/uv/src/commands/project/run.rs",
        "discussion_id": "2047257665",
        "commented_code": "@@ -1519,3 +1555,112 @@ fn read_recursion_depth_from_environment_variable() -> anyhow::Result<u32> {\n         .parse::<u32>()\n         .with_context(|| format!(\"invalid value for {}\", EnvVars::UV_RUN_RECURSION_DEPTH))\n }\n+\n+/// Matches valid Python executable names:\n+/// - \u2705 \"python\", \"python39\", \"python3\", \"python3.9\", \"python4\", \"python3.10\", \"python3.13.3\"\n+/// - \u274c \"python3abc\", \"python3.12b3\", \"\", \"python-foo\"\n+fn is_python_executable(executable_command: &str) -> bool {\n+    executable_command\n+        .strip_prefix(\"python\")\n+        .is_some_and(|version| version.is_empty() || is_valid_python_version(version))\n+}\n+\n+/// Checks if a version string is a valid Python major.minor.patch version.\n+fn is_valid_python_version(version: &str) -> bool {\n+    PythonVersion::from_str(version).is_ok_and(|ver| {\n+        ver.is_stable() &&\n+            // Should not contain post info. E.g. \"3.12b3\"\n+            !ver.is_post()\n+    })\n+}\n+#[cfg(test)]\n+mod tests {\n+    use super::{is_python_executable, is_valid_python_version};\n+\n+    /// Helper function for asserting test cases.\n+    /// - If `expected_result` is `true`, it expects the function to return `true` (valid cases).\n+    /// - If `expected_result` is `false`, it expects the function to return `false` (invalid cases).\n+    fn assert_cases<F: Fn(&str) -> bool>(\n+        cases: &[&str],\n+        func: F,\n+        test_name: &str,\n+        expected_result: bool,\n+    ) {\n+        for &case in cases {\n+            let result = func(case);\n+            assert_eq!(\n+                result, expected_result,\n+                \"{test_name}: Expected `{expected_result}`, but got `{result}` for case `{case}`\"\n+            );\n+        }\n+    }\n+\n+    #[test]\n+    fn valid_is_python_executable() {\n+        let valid_cases = [\n+            \"python3\",\n+            \"python3.9\",\n+            \"python3.10\",\n+            \"python4\",\n+            \"python\",\n+            \"python3.11.3\",\n+            \"python39\", // Still a valid executable, although likely a typo",
        "comment_created_at": "2025-04-19T06:54:48+00:00",
        "comment_author": "JWLee89",
        "comment_body": "I think this can be a good idea, especially since python version `37` will not likely be released anytime in the future while we are still alive \ud83d\ude06 .\r\n\r\nStill I think we should carefully discuss this and come up with a reasonable spec before making any feature changes.\r\n\r\nWould it be okay if I create a separate PR for this once we discuss and decide on specifications here?",
        "pr_file_module": null
      }
    ]
  }
]