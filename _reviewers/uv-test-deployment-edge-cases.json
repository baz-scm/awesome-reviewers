[
  {
    "discussion_id": "2175053450",
    "pr_number": 14184,
    "pr_file": "python/uv/_find_uv.py",
    "created_at": "2025-06-30T13:16:17+00:00",
    "commented_code": "targets = [\n         # The scripts directory for the current Python\n         sysconfig.get_path(\"scripts\"),\n-        # The scripts directory for the base prefix (if different)\n+        # The scripts directory for the base prefix\n         sysconfig.get_path(\"scripts\", vars={\"base\": sys.base_prefix}),\n         # The user scheme scripts directory, e.g., `~/.local/bin`\n         sysconfig.get_path(\"scripts\", scheme=_user_scheme()),\n-        # Adjacent to the package root, e.g. from, `pip install --target`\n-        os.path.join(os.path.dirname(os.path.dirname(__file__)), \"bin\"),\n+        # Above the package root, e.g., from `pip install --prefix`\n+        # with module path `<prefix>/lib/python3.13/site-packages/uv`\n+        _join(_parents(_module_path(), 4), \"bin\"),\n+        # Adjacent to the package root, e.g., from `pip install --target`\n+        # with module path `<target>/uv`\n+        _join(_parents(_module_path(), 1), \"bin\"),",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2175053450",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14184,
        "pr_file": "python/uv/_find_uv.py",
        "discussion_id": "2175053450",
        "commented_code": "@@ -16,16 +16,22 @@ def find_uv_bin() -> str:\n     targets = [\n         # The scripts directory for the current Python\n         sysconfig.get_path(\"scripts\"),\n-        # The scripts directory for the base prefix (if different)\n+        # The scripts directory for the base prefix\n         sysconfig.get_path(\"scripts\", vars={\"base\": sys.base_prefix}),\n         # The user scheme scripts directory, e.g., `~/.local/bin`\n         sysconfig.get_path(\"scripts\", scheme=_user_scheme()),\n-        # Adjacent to the package root, e.g. from, `pip install --target`\n-        os.path.join(os.path.dirname(os.path.dirname(__file__)), \"bin\"),\n+        # Above the package root, e.g., from `pip install --prefix`\n+        # with module path `<prefix>/lib/python3.13/site-packages/uv`\n+        _join(_parents(_module_path(), 4), \"bin\"),\n+        # Adjacent to the package root, e.g., from `pip install --target`\n+        # with module path `<target>/uv`\n+        _join(_parents(_module_path(), 1), \"bin\"),",
        "comment_created_at": "2025-06-30T13:16:17+00:00",
        "comment_author": "konstin",
        "comment_body": "Can you add tests for the prefix and the target case? We have to emulate this by copying our python files and the built test binary manually, but it catches cases such as https://github.com/astral-sh/uv/pull/14184#discussion_r2160101023 and the user scheme preference.",
        "pr_file_module": null
      },
      {
        "comment_id": "2175072886",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14184,
        "pr_file": "python/uv/_find_uv.py",
        "discussion_id": "2175053450",
        "commented_code": "@@ -16,16 +16,22 @@ def find_uv_bin() -> str:\n     targets = [\n         # The scripts directory for the current Python\n         sysconfig.get_path(\"scripts\"),\n-        # The scripts directory for the base prefix (if different)\n+        # The scripts directory for the base prefix\n         sysconfig.get_path(\"scripts\", vars={\"base\": sys.base_prefix}),\n         # The user scheme scripts directory, e.g., `~/.local/bin`\n         sysconfig.get_path(\"scripts\", scheme=_user_scheme()),\n-        # Adjacent to the package root, e.g. from, `pip install --target`\n-        os.path.join(os.path.dirname(os.path.dirname(__file__)), \"bin\"),\n+        # Above the package root, e.g., from `pip install --prefix`\n+        # with module path `<prefix>/lib/python3.13/site-packages/uv`\n+        _join(_parents(_module_path(), 4), \"bin\"),\n+        # Adjacent to the package root, e.g., from `pip install --target`\n+        # with module path `<target>/uv`\n+        _join(_parents(_module_path(), 1), \"bin\"),",
        "comment_created_at": "2025-06-30T13:23:34+00:00",
        "comment_author": "zanieb",
        "comment_body": "I'm wary of adding a new test suite for this file, it's a big increase in scope for this task.",
        "pr_file_module": null
      },
      {
        "comment_id": "2175100285",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14184,
        "pr_file": "python/uv/_find_uv.py",
        "discussion_id": "2175053450",
        "commented_code": "@@ -16,16 +16,22 @@ def find_uv_bin() -> str:\n     targets = [\n         # The scripts directory for the current Python\n         sysconfig.get_path(\"scripts\"),\n-        # The scripts directory for the base prefix (if different)\n+        # The scripts directory for the base prefix\n         sysconfig.get_path(\"scripts\", vars={\"base\": sys.base_prefix}),\n         # The user scheme scripts directory, e.g., `~/.local/bin`\n         sysconfig.get_path(\"scripts\", scheme=_user_scheme()),\n-        # Adjacent to the package root, e.g. from, `pip install --target`\n-        os.path.join(os.path.dirname(os.path.dirname(__file__)), \"bin\"),\n+        # Above the package root, e.g., from `pip install --prefix`\n+        # with module path `<prefix>/lib/python3.13/site-packages/uv`\n+        _join(_parents(_module_path(), 4), \"bin\"),\n+        # Adjacent to the package root, e.g., from `pip install --target`\n+        # with module path `<target>/uv`\n+        _join(_parents(_module_path(), 1), \"bin\"),",
        "comment_created_at": "2025-06-30T13:35:33+00:00",
        "comment_author": "zanieb",
        "comment_body": "(I'll see how painful it is though, especially with https://github.com/astral-sh/uv/pull/14184#discussion_r2175069753 this gets complicated to trust without tests)",
        "pr_file_module": null
      },
      {
        "comment_id": "2176673796",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14184,
        "pr_file": "python/uv/_find_uv.py",
        "discussion_id": "2175053450",
        "commented_code": "@@ -16,16 +16,22 @@ def find_uv_bin() -> str:\n     targets = [\n         # The scripts directory for the current Python\n         sysconfig.get_path(\"scripts\"),\n-        # The scripts directory for the base prefix (if different)\n+        # The scripts directory for the base prefix\n         sysconfig.get_path(\"scripts\", vars={\"base\": sys.base_prefix}),\n         # The user scheme scripts directory, e.g., `~/.local/bin`\n         sysconfig.get_path(\"scripts\", scheme=_user_scheme()),\n-        # Adjacent to the package root, e.g. from, `pip install --target`\n-        os.path.join(os.path.dirname(os.path.dirname(__file__)), \"bin\"),\n+        # Above the package root, e.g., from `pip install --prefix`\n+        # with module path `<prefix>/lib/python3.13/site-packages/uv`\n+        _join(_parents(_module_path(), 4), \"bin\"),\n+        # Adjacent to the package root, e.g., from `pip install --target`\n+        # with module path `<target>/uv`\n+        _join(_parents(_module_path(), 1), \"bin\"),",
        "comment_created_at": "2025-07-01T07:40:34+00:00",
        "comment_author": "Flamefire",
        "comment_body": "I think `fnmatch.fnmatch('/opt/prefix/lib/python3.13/site-packages/uv', '**/lib/python*/site-packages/uv')` should be easy and reliable enough to match against `_module_path()` before adding the prefix case",
        "pr_file_module": null
      },
      {
        "comment_id": "2176801378",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 14184,
        "pr_file": "python/uv/_find_uv.py",
        "discussion_id": "2175053450",
        "commented_code": "@@ -16,16 +16,22 @@ def find_uv_bin() -> str:\n     targets = [\n         # The scripts directory for the current Python\n         sysconfig.get_path(\"scripts\"),\n-        # The scripts directory for the base prefix (if different)\n+        # The scripts directory for the base prefix\n         sysconfig.get_path(\"scripts\", vars={\"base\": sys.base_prefix}),\n         # The user scheme scripts directory, e.g., `~/.local/bin`\n         sysconfig.get_path(\"scripts\", scheme=_user_scheme()),\n-        # Adjacent to the package root, e.g. from, `pip install --target`\n-        os.path.join(os.path.dirname(os.path.dirname(__file__)), \"bin\"),\n+        # Above the package root, e.g., from `pip install --prefix`\n+        # with module path `<prefix>/lib/python3.13/site-packages/uv`\n+        _join(_parents(_module_path(), 4), \"bin\"),\n+        # Adjacent to the package root, e.g., from `pip install --target`\n+        # with module path `<target>/uv`\n+        _join(_parents(_module_path(), 1), \"bin\"),",
        "comment_created_at": "2025-07-01T08:24:11+00:00",
        "comment_author": "konstin",
        "comment_body": "We need this to work on Windows, so we need to be lenient in the matching",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2111746985",
    "pr_number": 13615,
    "pr_file": "scripts/registries-test.py",
    "created_at": "2025-05-28T12:36:42+00:00",
    "commented_code": "+#!/usr/bin/env python3\n+\"\"\"\n+Test `uv add` against multiple Python package registries.\n+\n+This script looks for environment variables that configure registries for testing.\n+To configure a registry, set the following environment variables:\n+\n+    UV_TEST_<registry_name>_URL         URL for the registry\n+    UV_TEST_<registry_name>_TOKEN       authentication token\n+    UV_TEST_<registry_name>_PKG          private package to install\n+\n+The username defaults to \"__token__\" but can be optionally set with:\n+    UV_TEST_<registry_name>_USERNAME\n+\n+Keep in mind that some registries can fall back to PyPI internally, so make sure\n+you choose a package that only exists in the registry you are testing.\n+\n+# /// script\n+# dependencies = [\"colorama\"]\n+# ///\n+\"\"\"\n+\n+import argparse\n+import os\n+import re\n+import subprocess\n+import sys\n+import tempfile\n+from pathlib import Path\n+from typing import Dict\n+\n+from colorama import Fore\n+from colorama import init as colorama_init\n+\n+colorama_init(autoreset=True)\n+\n+DEFAULT_TIMEOUT = 30\n+\n+KNOWN_REGISTRIES = [\n+    \"artifactory\",\n+    \"azure\",\n+    \"aws\",\n+    \"cloudsmith\",\n+    \"gcp\",\n+    \"gemfury\",\n+    \"gitlab\",\n+    \"nexus\",\n+]\n+\n+\n+def get_registries(env: Dict[str, str]) -> Dict[str, str]:\n+    pattern = re.compile(r\"^UV_TEST_(.+)_URL$\")\n+    registries: Dict[str, str] = {}\n+\n+    for env_var, value in env.items():\n+        match = pattern.match(env_var)\n+        if match:\n+            registry_name = match.group(1).lower()\n+            registries[registry_name] = value\n+\n+    return registries\n+\n+\n+def setup_test_project(registry_name: str, registry_url: str, project_dir: str) -> Path:\n+    \"\"\"Create a temporary project directory with a pyproject.toml\"\"\"\n+    pyproject_content = f\"\"\"[project]\n+name = \"{registry_name}-test\"\n+version = \"0.1.0\"\n+description = \"Test registry\"\n+\n+[[tool.uv.index]]\n+name = \"{registry_name}\"\n+url = \"{registry_url}\"\n+default = true\n+\"\"\"\n+\n+    pyproject_file = Path(project_dir) / \"pyproject.toml\"\n+    pyproject_file.write_text(pyproject_content, encoding=\"utf-8\")\n+\n+\n+def run_test(\n+    env: Dict[str, str],\n+    binary: str,\n+    registry_name: str,\n+    registry_url: str,\n+    package: str,\n+    username: str,\n+    token: str,\n+    verbosity: int,\n+    timeout: int = DEFAULT_TIMEOUT,\n+) -> bool:\n+    \"\"\"Attempt to install package from this registry.\"\"\"\n+    print(\n+        f\"{registry_name} -- Running test for {registry_url} with username {username}\"\n+    )\n+    print(f\"\nAttempting to install {package}\")\n+    env[f\"UV_INDEX_{registry_name.upper()}_USERNAME\"] = username\n+    env[f\"UV_INDEX_{registry_name.upper()}_PASSWORD\"] = token\n+\n+    with tempfile.TemporaryDirectory() as project_dir:\n+        cmd = [\n+            binary,\n+            \"add\",\n+            package,\n+            \"--index\",\n+            registry_name,\n+            \"--directory\",\n+            project_dir,\n+        ]\n+        if verbosity:\n+            cmd.extend([\"-\" + \"v\" * verbosity])\n+\n+        setup_test_project(registry_name, registry_url, project_dir)\n+\n+        try:\n+            result = subprocess.run(\n+                cmd,\n+                capture_output=True,\n+                text=True,\n+                timeout=timeout,\n+                check=False,\n+                env=env,\n+            )\n+\n+            if result.returncode != 0:\n+                error_msg = result.stderr.strip() if result.stderr else \"Unknown error\"\n+                print(f\"{Fore.RED}{registry_name}: FAIL{Fore.RESET} \n\n{error_msg}\")\n+                return False\n+\n+            success = False\n+            for line in result.stderr.strip().split(\"\n\"):\n+                if line.startswith(f\" + {package}==\"):\n+                    success = True\n+            if success:\n+                print(f\"{Fore.GREEN}{registry_name}: PASS\")\n+                if verbosity > 0:\n+                    print(f\"  stderr: {result.stderr.strip()}\")\n+                return True\n+            else:\n+                print(\n+                    f\"{Fore.RED}{registry_name}: FAIL{Fore.RESET} - Failed to install {package}.\"\n+                )\n+                if result.stderr:\n+                    print(f\"{Fore.RED}  stderr:{Fore.RESET} {result.stderr.strip()}\")\n+                return False\n+\n+        except subprocess.TimeoutExpired:\n+            print(f\"{Fore.RED}{registry_name}: TIMEOUT{Fore.RESET} (>{timeout}s)\")\n+            return False\n+        except FileNotFoundError:\n+            print(f\"{Fore.RED}{registry_name}: ERROR{Fore.RESET} - uv not found\")\n+            return False\n+        except Exception as e:\n+            print(f\"{Fore.RED}{registry_name}: ERROR{Fore.RESET} - {e}\")\n+            return False\n+\n+\n+def parse_args() -> argparse.Namespace:\n+    \"\"\"Parse command line arguments\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=\"Test uv add command against multiple registries\",\n+        formatter_class=argparse.RawDescriptionHelpFormatter,\n+    )\n+    parser.add_argument(\n+        \"--all\",\n+        action=\"store_true\",\n+        help=\"fail if any known registry was not tested\",\n+    )\n+    parser.add_argument(\n+        \"--binary\",\n+        type=str,\n+        default=\"uv\",\n+        help=\"specify a path to the uv binary (default: uv command)\",\n+    )\n+    parser.add_argument(\n+        \"--timeout\",\n+        type=int,\n+        default=None,\n+        help=f\"timeout in seconds for each test (default: {DEFAULT_TIMEOUT} or UV_TEST_TIMEOUT)\",\n+    )\n+    parser.add_argument(\n+        \"-v\",\n+        \"--verbose\",\n+        action=\"count\",\n+        default=0,\n+        help=\"increase verbosity (-v for debug, -vv for trace)\",\n+    )\n+    return parser.parse_args()\n+\n+\n+def main() -> None:\n+    args = parse_args()\n+    env = os.environ.copy()\n+\n+    # Determine timeout. Precedence: Command line arg > env var > default\n+    if args.timeout:\n+        timeout = args.timeout\n+    else:\n+        timeout = int(env.get(\"UV_TEST_TIMEOUT\", str(DEFAULT_TIMEOUT)))\n+\n+    passed = []\n+    failed = []\n+    skipped = []\n+    untested_registries = set(KNOWN_REGISTRIES)\n+\n+    print(\"Running tests...\")\n+    for registry_name, registry_url in get_registries(env).items():\n+        untested_registries.remove(registry_name)\n+        print(\"----------------\")\n+\n+        token = env.get(f\"UV_TEST_{registry_name.upper()}_TOKEN\")",
    "repo_full_name": "astral-sh/uv",
    "discussion_comments": [
      {
        "comment_id": "2111746985",
        "repo_full_name": "astral-sh/uv",
        "pr_number": 13615,
        "pr_file": "scripts/registries-test.py",
        "discussion_id": "2111746985",
        "commented_code": "@@ -0,0 +1,285 @@\n+#!/usr/bin/env python3\n+\"\"\"\n+Test `uv add` against multiple Python package registries.\n+\n+This script looks for environment variables that configure registries for testing.\n+To configure a registry, set the following environment variables:\n+\n+    UV_TEST_<registry_name>_URL         URL for the registry\n+    UV_TEST_<registry_name>_TOKEN       authentication token\n+    UV_TEST_<registry_name>_PKG          private package to install\n+\n+The username defaults to \"__token__\" but can be optionally set with:\n+    UV_TEST_<registry_name>_USERNAME\n+\n+Keep in mind that some registries can fall back to PyPI internally, so make sure\n+you choose a package that only exists in the registry you are testing.\n+\n+# /// script\n+# dependencies = [\"colorama\"]\n+# ///\n+\"\"\"\n+\n+import argparse\n+import os\n+import re\n+import subprocess\n+import sys\n+import tempfile\n+from pathlib import Path\n+from typing import Dict\n+\n+from colorama import Fore\n+from colorama import init as colorama_init\n+\n+colorama_init(autoreset=True)\n+\n+DEFAULT_TIMEOUT = 30\n+\n+KNOWN_REGISTRIES = [\n+    \"artifactory\",\n+    \"azure\",\n+    \"aws\",\n+    \"cloudsmith\",\n+    \"gcp\",\n+    \"gemfury\",\n+    \"gitlab\",\n+    \"nexus\",\n+]\n+\n+\n+def get_registries(env: Dict[str, str]) -> Dict[str, str]:\n+    pattern = re.compile(r\"^UV_TEST_(.+)_URL$\")\n+    registries: Dict[str, str] = {}\n+\n+    for env_var, value in env.items():\n+        match = pattern.match(env_var)\n+        if match:\n+            registry_name = match.group(1).lower()\n+            registries[registry_name] = value\n+\n+    return registries\n+\n+\n+def setup_test_project(registry_name: str, registry_url: str, project_dir: str) -> Path:\n+    \"\"\"Create a temporary project directory with a pyproject.toml\"\"\"\n+    pyproject_content = f\"\"\"[project]\n+name = \"{registry_name}-test\"\n+version = \"0.1.0\"\n+description = \"Test registry\"\n+\n+[[tool.uv.index]]\n+name = \"{registry_name}\"\n+url = \"{registry_url}\"\n+default = true\n+\"\"\"\n+\n+    pyproject_file = Path(project_dir) / \"pyproject.toml\"\n+    pyproject_file.write_text(pyproject_content, encoding=\"utf-8\")\n+\n+\n+def run_test(\n+    env: Dict[str, str],\n+    binary: str,\n+    registry_name: str,\n+    registry_url: str,\n+    package: str,\n+    username: str,\n+    token: str,\n+    verbosity: int,\n+    timeout: int = DEFAULT_TIMEOUT,\n+) -> bool:\n+    \"\"\"Attempt to install package from this registry.\"\"\"\n+    print(\n+        f\"{registry_name} -- Running test for {registry_url} with username {username}\"\n+    )\n+    print(f\"\\nAttempting to install {package}\")\n+    env[f\"UV_INDEX_{registry_name.upper()}_USERNAME\"] = username\n+    env[f\"UV_INDEX_{registry_name.upper()}_PASSWORD\"] = token\n+\n+    with tempfile.TemporaryDirectory() as project_dir:\n+        cmd = [\n+            binary,\n+            \"add\",\n+            package,\n+            \"--index\",\n+            registry_name,\n+            \"--directory\",\n+            project_dir,\n+        ]\n+        if verbosity:\n+            cmd.extend([\"-\" + \"v\" * verbosity])\n+\n+        setup_test_project(registry_name, registry_url, project_dir)\n+\n+        try:\n+            result = subprocess.run(\n+                cmd,\n+                capture_output=True,\n+                text=True,\n+                timeout=timeout,\n+                check=False,\n+                env=env,\n+            )\n+\n+            if result.returncode != 0:\n+                error_msg = result.stderr.strip() if result.stderr else \"Unknown error\"\n+                print(f\"{Fore.RED}{registry_name}: FAIL{Fore.RESET} \\n\\n{error_msg}\")\n+                return False\n+\n+            success = False\n+            for line in result.stderr.strip().split(\"\\n\"):\n+                if line.startswith(f\" + {package}==\"):\n+                    success = True\n+            if success:\n+                print(f\"{Fore.GREEN}{registry_name}: PASS\")\n+                if verbosity > 0:\n+                    print(f\"  stderr: {result.stderr.strip()}\")\n+                return True\n+            else:\n+                print(\n+                    f\"{Fore.RED}{registry_name}: FAIL{Fore.RESET} - Failed to install {package}.\"\n+                )\n+                if result.stderr:\n+                    print(f\"{Fore.RED}  stderr:{Fore.RESET} {result.stderr.strip()}\")\n+                return False\n+\n+        except subprocess.TimeoutExpired:\n+            print(f\"{Fore.RED}{registry_name}: TIMEOUT{Fore.RESET} (>{timeout}s)\")\n+            return False\n+        except FileNotFoundError:\n+            print(f\"{Fore.RED}{registry_name}: ERROR{Fore.RESET} - uv not found\")\n+            return False\n+        except Exception as e:\n+            print(f\"{Fore.RED}{registry_name}: ERROR{Fore.RESET} - {e}\")\n+            return False\n+\n+\n+def parse_args() -> argparse.Namespace:\n+    \"\"\"Parse command line arguments\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=\"Test uv add command against multiple registries\",\n+        formatter_class=argparse.RawDescriptionHelpFormatter,\n+    )\n+    parser.add_argument(\n+        \"--all\",\n+        action=\"store_true\",\n+        help=\"fail if any known registry was not tested\",\n+    )\n+    parser.add_argument(\n+        \"--binary\",\n+        type=str,\n+        default=\"uv\",\n+        help=\"specify a path to the uv binary (default: uv command)\",\n+    )\n+    parser.add_argument(\n+        \"--timeout\",\n+        type=int,\n+        default=None,\n+        help=f\"timeout in seconds for each test (default: {DEFAULT_TIMEOUT} or UV_TEST_TIMEOUT)\",\n+    )\n+    parser.add_argument(\n+        \"-v\",\n+        \"--verbose\",\n+        action=\"count\",\n+        default=0,\n+        help=\"increase verbosity (-v for debug, -vv for trace)\",\n+    )\n+    return parser.parse_args()\n+\n+\n+def main() -> None:\n+    args = parse_args()\n+    env = os.environ.copy()\n+\n+    # Determine timeout. Precedence: Command line arg > env var > default\n+    if args.timeout:\n+        timeout = args.timeout\n+    else:\n+        timeout = int(env.get(\"UV_TEST_TIMEOUT\", str(DEFAULT_TIMEOUT)))\n+\n+    passed = []\n+    failed = []\n+    skipped = []\n+    untested_registries = set(KNOWN_REGISTRIES)\n+\n+    print(\"Running tests...\")\n+    for registry_name, registry_url in get_registries(env).items():\n+        untested_registries.remove(registry_name)\n+        print(\"----------------\")\n+\n+        token = env.get(f\"UV_TEST_{registry_name.upper()}_TOKEN\")",
        "comment_created_at": "2025-05-28T12:36:42+00:00",
        "comment_author": "konstin",
        "comment_body": "Should this fail with `--all`? Otherwise it sounds like a test could slip through if the env var is missing or wrong.",
        "pr_file_module": null
      }
    ]
  }
]