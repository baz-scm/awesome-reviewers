[
  {
    "discussion_id": "2135271624",
    "pr_number": 24673,
    "pr_file": "vlib/v/gen/js/tests/map.v",
    "created_at": "2025-06-09T08:19:55+00:00",
    "commented_code": null,
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "2135271624",
        "repo_full_name": "vlang/v",
        "pr_number": 24673,
        "pr_file": "vlib/v/gen/js/tests/map.v",
        "discussion_id": "2135271624",
        "commented_code": null,
        "comment_created_at": "2025-06-09T08:19:55+00:00",
        "comment_author": "spytheman",
        "comment_body": "Please add new test functions, instead of modifying the existing ones, unless there is a bug. That makes reviewing a lot easier.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2123837227",
    "pr_number": 19100,
    "pr_file": "vlib/v/tests/options/option_mut_struct_init_test.v",
    "created_at": "2025-06-03T13:33:19+00:00",
    "commented_code": null,
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "2123837227",
        "repo_full_name": "vlang/v",
        "pr_number": 19100,
        "pr_file": "vlib/v/tests/options/option_mut_struct_init_test.v",
        "discussion_id": "2123837227",
        "commented_code": null,
        "comment_created_at": "2025-06-03T13:33:19+00:00",
        "comment_author": "spytheman",
        "comment_body": "Please, also add another test_ function, that sets the mutable parameter to a value != none, and asserts that after calling the function too.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094372625",
    "pr_number": 24502,
    "pr_file": "vlib/v/tests/options/option_ptr_nil_test.v",
    "created_at": "2025-05-18T05:32:44+00:00",
    "commented_code": null,
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "2094372625",
        "repo_full_name": "vlang/v",
        "pr_number": 24502,
        "pr_file": "vlib/v/tests/options/option_ptr_nil_test.v",
        "discussion_id": "2094372625",
        "commented_code": null,
        "comment_created_at": "2025-05-18T05:32:44+00:00",
        "comment_author": "spytheman",
        "comment_body": "Please add assertions too.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1890001554",
    "pr_number": 23199,
    "pr_file": "vlib/v/tests/structs/struct_field_init_with_fixed_array_opt_test.v",
    "created_at": "2024-12-18T10:30:08+00:00",
    "commented_code": "+type Arr = [4]u8\n+\n+struct Foo {\n+\tbar int\n+\tbaz ?Arr\n+}\n+\n+fn test_struct_field_init_with_fixed_array_opt() {\n+\tf := Foo{\n+\t\tbar: 1\n+\t\tbaz: Arr([u8(5), 4, 3, 2]!)",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1890001554",
        "repo_full_name": "vlang/v",
        "pr_number": 23199,
        "pr_file": "vlib/v/tests/structs/struct_field_init_with_fixed_array_opt_test.v",
        "discussion_id": "1890001554",
        "commented_code": "@@ -0,0 +1,15 @@\n+type Arr = [4]u8\n+\n+struct Foo {\n+\tbar int\n+\tbaz ?Arr\n+}\n+\n+fn test_struct_field_init_with_fixed_array_opt() {\n+\tf := Foo{\n+\t\tbar: 1\n+\t\tbaz: Arr([u8(5), 4, 3, 2]!)",
        "comment_created_at": "2024-12-18T10:30:08+00:00",
        "comment_author": "felipensp",
        "comment_body": "It would be good add a test for initializing it with `baz: ?Arr(none)`",
        "pr_file_module": null
      },
      {
        "comment_id": "1890145688",
        "repo_full_name": "vlang/v",
        "pr_number": 23199,
        "pr_file": "vlib/v/tests/structs/struct_field_init_with_fixed_array_opt_test.v",
        "discussion_id": "1890001554",
        "commented_code": "@@ -0,0 +1,15 @@\n+type Arr = [4]u8\n+\n+struct Foo {\n+\tbar int\n+\tbaz ?Arr\n+}\n+\n+fn test_struct_field_init_with_fixed_array_opt() {\n+\tf := Foo{\n+\t\tbar: 1\n+\t\tbaz: Arr([u8(5), 4, 3, 2]!)",
        "comment_created_at": "2024-12-18T12:18:42+00:00",
        "comment_author": "yuyi98",
        "comment_body": "Ok, I'll fix it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1886745465",
    "pr_number": 23181,
    "pr_file": "vlib/rand/cuid2/cuid2_test.v",
    "created_at": "2024-12-16T12:35:26+00:00",
    "commented_code": "+module cuid2\n+\n+import rand.musl\n+import rand.mt19937\n+\n+fn check_valid_cuid2(uuid string, length int) bool {\n+\tif uuid.len != length || uuid.len < min_id_length || uuid.len > max_id_length {\n+\t\treturn false\n+\t}\n+\n+\t// first letter should in [a..z]\n+\tif uuid[0] < u8(`a`) || uuid[0] > u8(`z`) {\n+\t\treturn false\n+\t}\n+\n+\t// other letter should in [a..z,0..9]\n+\tfor letter in uuid[1..] {\n+\t\tif (letter >= u8(`a`) && uuid[0] <= u8(`z`)) || (letter >= u8(`0`) && letter <= u8(`9`)) {\n+\t\t\tcontinue\n+\t\t}\n+\t\treturn false\n+\t}\n+\treturn true\n+}\n+\n+fn test_cuid2() {\n+\t// default prng(wyrand)\n+\tuuid2 := cuid2(length: 2)\n+\tassert check_valid_cuid2(uuid2, 2)\n+\tuuid24 := cuid2(length: 24)\n+\tassert check_valid_cuid2(uuid24, 24)\n+\tuuid32 := cuid2(length: 32)\n+\tassert check_valid_cuid2(uuid32, 32)\n+\n+\t// musl prng\n+\tmusl_prng := &musl.MuslRNG{}\n+\tuuid_musl := cuid2(prng: musl_prng, length: 32)\n+\tassert check_valid_cuid2(uuid_musl, 32)\n+\n+\t// mt19937 prng\n+\tmt19937_prng := &mt19937.MT19937RNG{}\n+\tuuid_mt19937 := cuid2(prng: mt19937_prng, length: 32)\n+\tassert check_valid_cuid2(uuid_mt19937, 32)\n+}",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1886745465",
        "repo_full_name": "vlang/v",
        "pr_number": 23181,
        "pr_file": "vlib/rand/cuid2/cuid2_test.v",
        "discussion_id": "1886745465",
        "commented_code": "@@ -0,0 +1,44 @@\n+module cuid2\n+\n+import rand.musl\n+import rand.mt19937\n+\n+fn check_valid_cuid2(uuid string, length int) bool {\n+\tif uuid.len != length || uuid.len < min_id_length || uuid.len > max_id_length {\n+\t\treturn false\n+\t}\n+\n+\t// first letter should in [a..z]\n+\tif uuid[0] < u8(`a`) || uuid[0] > u8(`z`) {\n+\t\treturn false\n+\t}\n+\n+\t// other letter should in [a..z,0..9]\n+\tfor letter in uuid[1..] {\n+\t\tif (letter >= u8(`a`) && uuid[0] <= u8(`z`)) || (letter >= u8(`0`) && letter <= u8(`9`)) {\n+\t\t\tcontinue\n+\t\t}\n+\t\treturn false\n+\t}\n+\treturn true\n+}\n+\n+fn test_cuid2() {\n+\t// default prng(wyrand)\n+\tuuid2 := cuid2(length: 2)\n+\tassert check_valid_cuid2(uuid2, 2)\n+\tuuid24 := cuid2(length: 24)\n+\tassert check_valid_cuid2(uuid24, 24)\n+\tuuid32 := cuid2(length: 32)\n+\tassert check_valid_cuid2(uuid32, 32)\n+\n+\t// musl prng\n+\tmusl_prng := &musl.MuslRNG{}\n+\tuuid_musl := cuid2(prng: musl_prng, length: 32)\n+\tassert check_valid_cuid2(uuid_musl, 32)\n+\n+\t// mt19937 prng\n+\tmt19937_prng := &mt19937.MT19937RNG{}\n+\tuuid_mt19937 := cuid2(prng: mt19937_prng, length: 32)\n+\tassert check_valid_cuid2(uuid_mt19937, 32)\n+}",
        "comment_created_at": "2024-12-16T12:35:26+00:00",
        "comment_author": "hungrybluedev",
        "comment_body": "Can we add another function that tests a few successive calls to cuid2 in a row and check that they are unique?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1873417478",
    "pr_number": 23078,
    "pr_file": "vlib/x/json2/tests/decoder_test.v",
    "created_at": "2024-12-06T14:20:59+00:00",
    "commented_code": "import x.json2 as json\n \n fn test_raw_decode_string() {\n-\tstr := json.raw_decode('\"Hello!\"')!\n+\tstr := json.decode[json.Any]('\"Hello!\"')!\n \tassert str.str() == 'Hello!'\n }",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1873417478",
        "repo_full_name": "vlang/v",
        "pr_number": 23078,
        "pr_file": "vlib/x/json2/tests/decoder_test.v",
        "discussion_id": "1873417478",
        "commented_code": "@@ -1,61 +1,61 @@\n import x.json2 as json\n \n fn test_raw_decode_string() {\n-\tstr := json.raw_decode('\"Hello!\"')!\n+\tstr := json.decode[json.Any]('\"Hello!\"')!\n \tassert str.str() == 'Hello!'\n }",
        "comment_created_at": "2024-12-06T14:20:59+00:00",
        "comment_author": "spytheman",
        "comment_body": "No. Keep the existing test, and add your own if you want.\r\nReplacing things like this is bad - it removes coverage for the existing functionality of `json.raw_decode`.\r\nIt is also very sloppy - the test name is still `fn test_raw_decode_string() {` ...\r\n\r\nJust keeps things working as much as possible,\r\nand add *new tests* please.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1873421198",
    "pr_number": 23078,
    "pr_file": "vlib/x/json2/tests/json2_test.v",
    "created_at": "2024-12-06T14:23:43+00:00",
    "commented_code": "fn test_fast_raw_decode() {\n \ts := '{\"name\":\"Peter\",\"age\":28,\"salary\":95000.5,\"title\":2}'\n-\to := json.fast_raw_decode(s) or {\n+\to := json.decode[json.Any](s) or {",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1873421198",
        "repo_full_name": "vlang/v",
        "pr_number": 23078,
        "pr_file": "vlib/x/json2/tests/json2_test.v",
        "discussion_id": "1873421198",
        "commented_code": "@@ -16,12 +16,12 @@ pub mut:\n \n fn test_fast_raw_decode() {\n \ts := '{\"name\":\"Peter\",\"age\":28,\"salary\":95000.5,\"title\":2}'\n-\to := json.fast_raw_decode(s) or {\n+\to := json.decode[json.Any](s) or {",
        "comment_created_at": "2024-12-06T14:23:43+00:00",
        "comment_author": "spytheman",
        "comment_body": "Same - keep the current code, and add *new* tests/asserts.",
        "pr_file_module": null
      },
      {
        "comment_id": "1873421785",
        "repo_full_name": "vlang/v",
        "pr_number": 23078,
        "pr_file": "vlib/x/json2/tests/json2_test.v",
        "discussion_id": "1873421198",
        "commented_code": "@@ -16,12 +16,12 @@ pub mut:\n \n fn test_fast_raw_decode() {\n \ts := '{\"name\":\"Peter\",\"age\":28,\"salary\":95000.5,\"title\":2}'\n-\to := json.fast_raw_decode(s) or {\n+\to := json.decode[json.Any](s) or {",
        "comment_created_at": "2024-12-06T14:24:11+00:00",
        "comment_author": "spytheman",
        "comment_body": "If it acts the same, even better - decode 2 times, once the old way, and once the new way, and compare the results.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1823008039",
    "pr_number": 22701,
    "pr_file": "vlib/strings/similarity.v",
    "created_at": "2024-10-30T16:38:11+00:00",
    "commented_code": "}\n \treturn (2.0 * f32(intersection_size)) / (f32(a.len) + f32(b.len) - 2)\n }\n+\n+// hamming_distance uses the Hamming Distance algorithm to calculate\n+// the distance between between two strings `a` and `b` (lower is closer).\n+@[direct_array_access]\n+pub fn hamming_distance(a string, b string) int {\n+\tif a.len == 0 && b.len == 0 {\n+\t\treturn 0\n+\t}\n+\tmut match_len := 0\n+\tmut diff_count := 0\n+\tif a.len > b.len {\n+\t\tmatch_len = b.len\n+\t\tdiff_count = a.len - b.len\n+\t} else {\n+\t\tmatch_len = a.len\n+\t\tdiff_count = b.len - a.len\n+\t}\n+\tfor i in 0 .. match_len {\n+\t\tif a[i] != b[i] {\n+\t\t\tdiff_count++\n+\t\t}\n+\t}\n+\treturn diff_count\n+}\n+\n+// hamming_distance_percentage uses the Hamming Distance algorithm to calculate\n+// how similar two strings are as a percentage (higher is closer).\n+pub fn hamming_distance_percentage(a string, b string) f32 {",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1823008039",
        "repo_full_name": "vlang/v",
        "pr_number": 22701,
        "pr_file": "vlib/strings/similarity.v",
        "discussion_id": "1823008039",
        "commented_code": "@@ -85,3 +85,115 @@ pub fn dice_coefficient(s1 string, s2 string) f32 {\n \t}\n \treturn (2.0 * f32(intersection_size)) / (f32(a.len) + f32(b.len) - 2)\n }\n+\n+// hamming_distance uses the Hamming Distance algorithm to calculate\n+// the distance between between two strings `a` and `b` (lower is closer).\n+@[direct_array_access]\n+pub fn hamming_distance(a string, b string) int {\n+\tif a.len == 0 && b.len == 0 {\n+\t\treturn 0\n+\t}\n+\tmut match_len := 0\n+\tmut diff_count := 0\n+\tif a.len > b.len {\n+\t\tmatch_len = b.len\n+\t\tdiff_count = a.len - b.len\n+\t} else {\n+\t\tmatch_len = a.len\n+\t\tdiff_count = b.len - a.len\n+\t}\n+\tfor i in 0 .. match_len {\n+\t\tif a[i] != b[i] {\n+\t\t\tdiff_count++\n+\t\t}\n+\t}\n+\treturn diff_count\n+}\n+\n+// hamming_distance_percentage uses the Hamming Distance algorithm to calculate\n+// how similar two strings are as a percentage (higher is closer).\n+pub fn hamming_distance_percentage(a string, b string) f32 {",
        "comment_created_at": "2024-10-30T16:38:11+00:00",
        "comment_author": "spytheman",
        "comment_body": "this lacks tests",
        "pr_file_module": null
      },
      {
        "comment_id": "1823008728",
        "repo_full_name": "vlang/v",
        "pr_number": 22701,
        "pr_file": "vlib/strings/similarity.v",
        "discussion_id": "1823008039",
        "commented_code": "@@ -85,3 +85,115 @@ pub fn dice_coefficient(s1 string, s2 string) f32 {\n \t}\n \treturn (2.0 * f32(intersection_size)) / (f32(a.len) + f32(b.len) - 2)\n }\n+\n+// hamming_distance uses the Hamming Distance algorithm to calculate\n+// the distance between between two strings `a` and `b` (lower is closer).\n+@[direct_array_access]\n+pub fn hamming_distance(a string, b string) int {\n+\tif a.len == 0 && b.len == 0 {\n+\t\treturn 0\n+\t}\n+\tmut match_len := 0\n+\tmut diff_count := 0\n+\tif a.len > b.len {\n+\t\tmatch_len = b.len\n+\t\tdiff_count = a.len - b.len\n+\t} else {\n+\t\tmatch_len = a.len\n+\t\tdiff_count = b.len - a.len\n+\t}\n+\tfor i in 0 .. match_len {\n+\t\tif a[i] != b[i] {\n+\t\t\tdiff_count++\n+\t\t}\n+\t}\n+\treturn diff_count\n+}\n+\n+// hamming_distance_percentage uses the Hamming Distance algorithm to calculate\n+// how similar two strings are as a percentage (higher is closer).\n+pub fn hamming_distance_percentage(a string, b string) f32 {",
        "comment_created_at": "2024-10-30T16:38:30+00:00",
        "comment_author": "spytheman",
        "comment_body": "public functions should preferably have their own tests",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1823010865",
    "pr_number": 22701,
    "pr_file": "vlib/strings/similarity_test.v",
    "created_at": "2024-10-30T16:39:29+00:00",
    "commented_code": "assert strings.levenshtein_distance('flomax', 'volmax') == 3\n \tassert strings.levenshtein_distance('ab', 'cd') == 2\n }\n+\n+fn test_hamming_distance() {\n+\tassert strings.hamming_distance('', '') == 0\n+\tassert strings.hamming_distance('one', 'one') == 0\n+\tassert strings.hamming_distance('', 'two') == 3\n+\tassert strings.hamming_distance('three', '') == 5\n+\tassert strings.hamming_distance('bananna', '') == 7\n+\tassert strings.hamming_distance('cats', 'hats') == 1\n+\tassert strings.hamming_distance('hugs', 'shrugs') == 6\n+\tassert strings.hamming_distance('broom', 'shroom') == 5\n+\tassert strings.hamming_distance('flomax', 'volmax') == 3\n+\tassert strings.hamming_distance('ab', 'cd') == 2\n+}\n+\n+fn test_jaro_similarity() {\n+\tassert strings.jaro_similarity('MARTHA', 'MARHTA') == 0.9444444444444445",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1823010865",
        "repo_full_name": "vlang/v",
        "pr_number": 22701,
        "pr_file": "vlib/strings/similarity_test.v",
        "discussion_id": "1823010865",
        "commented_code": "@@ -12,3 +12,29 @@ fn test_levenshtein_distance() {\n \tassert strings.levenshtein_distance('flomax', 'volmax') == 3\n \tassert strings.levenshtein_distance('ab', 'cd') == 2\n }\n+\n+fn test_hamming_distance() {\n+\tassert strings.hamming_distance('', '') == 0\n+\tassert strings.hamming_distance('one', 'one') == 0\n+\tassert strings.hamming_distance('', 'two') == 3\n+\tassert strings.hamming_distance('three', '') == 5\n+\tassert strings.hamming_distance('bananna', '') == 7\n+\tassert strings.hamming_distance('cats', 'hats') == 1\n+\tassert strings.hamming_distance('hugs', 'shrugs') == 6\n+\tassert strings.hamming_distance('broom', 'shroom') == 5\n+\tassert strings.hamming_distance('flomax', 'volmax') == 3\n+\tassert strings.hamming_distance('ab', 'cd') == 2\n+}\n+\n+fn test_jaro_similarity() {\n+\tassert strings.jaro_similarity('MARTHA', 'MARHTA') == 0.9444444444444445",
        "comment_created_at": "2024-10-30T16:39:29+00:00",
        "comment_author": "spytheman",
        "comment_body": "Please also add a case for comparing `''` and `''` and also for `''` vs non empty string, and the reverse.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1823013444",
    "pr_number": 22701,
    "pr_file": "vlib/strings/similarity_test.v",
    "created_at": "2024-10-30T16:40:36+00:00",
    "commented_code": "assert strings.levenshtein_distance('flomax', 'volmax') == 3\n \tassert strings.levenshtein_distance('ab', 'cd') == 2\n }\n+\n+fn test_hamming_distance() {\n+\tassert strings.hamming_distance('', '') == 0\n+\tassert strings.hamming_distance('one', 'one') == 0\n+\tassert strings.hamming_distance('', 'two') == 3\n+\tassert strings.hamming_distance('three', '') == 5\n+\tassert strings.hamming_distance('bananna', '') == 7\n+\tassert strings.hamming_distance('cats', 'hats') == 1\n+\tassert strings.hamming_distance('hugs', 'shrugs') == 6\n+\tassert strings.hamming_distance('broom', 'shroom') == 5\n+\tassert strings.hamming_distance('flomax', 'volmax') == 3\n+\tassert strings.hamming_distance('ab', 'cd') == 2\n+}\n+\n+fn test_jaro_similarity() {\n+\tassert strings.jaro_similarity('MARTHA', 'MARHTA') == 0.9444444444444445\n+\tassert strings.jaro_similarity('DIXON', 'DICKSONX') == 0.7666666666666666\n+\tassert strings.jaro_similarity('JELLYFISH', 'SMELLYFISH') == 0.8962962962962964\n+}\n+\n+fn test_jaro_winkler_similarity() {\n+\tassert strings.jaro_winkler_similarity('accomodate', 'accommodate') == 0.018181818181818188",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1823013444",
        "repo_full_name": "vlang/v",
        "pr_number": 22701,
        "pr_file": "vlib/strings/similarity_test.v",
        "discussion_id": "1823013444",
        "commented_code": "@@ -12,3 +12,29 @@ fn test_levenshtein_distance() {\n \tassert strings.levenshtein_distance('flomax', 'volmax') == 3\n \tassert strings.levenshtein_distance('ab', 'cd') == 2\n }\n+\n+fn test_hamming_distance() {\n+\tassert strings.hamming_distance('', '') == 0\n+\tassert strings.hamming_distance('one', 'one') == 0\n+\tassert strings.hamming_distance('', 'two') == 3\n+\tassert strings.hamming_distance('three', '') == 5\n+\tassert strings.hamming_distance('bananna', '') == 7\n+\tassert strings.hamming_distance('cats', 'hats') == 1\n+\tassert strings.hamming_distance('hugs', 'shrugs') == 6\n+\tassert strings.hamming_distance('broom', 'shroom') == 5\n+\tassert strings.hamming_distance('flomax', 'volmax') == 3\n+\tassert strings.hamming_distance('ab', 'cd') == 2\n+}\n+\n+fn test_jaro_similarity() {\n+\tassert strings.jaro_similarity('MARTHA', 'MARHTA') == 0.9444444444444445\n+\tassert strings.jaro_similarity('DIXON', 'DICKSONX') == 0.7666666666666666\n+\tassert strings.jaro_similarity('JELLYFISH', 'SMELLYFISH') == 0.8962962962962964\n+}\n+\n+fn test_jaro_winkler_similarity() {\n+\tassert strings.jaro_winkler_similarity('accomodate', 'accommodate') == 0.018181818181818188",
        "comment_created_at": "2024-10-30T16:40:36+00:00",
        "comment_author": "spytheman",
        "comment_body": "same, please also add assertions for the cases with empty strings",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1807545857",
    "pr_number": 22579,
    "pr_file": "vlib/v/tests/builtin_arrays/fixed_array_literal_infix_test.v",
    "created_at": "2024-10-20T00:54:55+00:00",
    "commented_code": "+fn test_main() {\n+\tmut a := [][2]int{}\n+\ta << [0, 0]!",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1807545857",
        "repo_full_name": "vlang/v",
        "pr_number": 22579,
        "pr_file": "vlib/v/tests/builtin_arrays/fixed_array_literal_infix_test.v",
        "discussion_id": "1807545857",
        "commented_code": "@@ -0,0 +1,8 @@\n+fn test_main() {\n+\tmut a := [][2]int{}\n+\ta << [0, 0]!",
        "comment_created_at": "2024-10-20T00:54:55+00:00",
        "comment_author": "spytheman",
        "comment_body": "0 is not a good value for testing, because the default initialisation also uses 0s.\r\nUsing another value like 1, 3, or 42 makes the test more sensitive/less likely to continue to work, if eventually a value was overwritten (wrongly) by 0s in the implementation.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1791170323",
    "pr_number": 22444,
    "pr_file": "vlib/v/tests/return_match_expr_of_sumtype_result_test.v",
    "created_at": "2024-10-08T04:35:20+00:00",
    "commented_code": null,
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1791170323",
        "repo_full_name": "vlang/v",
        "pr_number": 22444,
        "pr_file": "vlib/v/tests/return_match_expr_of_sumtype_result_test.v",
        "discussion_id": "1791170323",
        "commented_code": null,
        "comment_created_at": "2024-10-08T04:35:20+00:00",
        "comment_author": "spytheman",
        "comment_body": "Please keep the old _test.v file, and add a new one.\r\n\r\nRefactoring the old one (not just adding new test cases) has a non-trivial chance of masking/changing what it tested before.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1784618541",
    "pr_number": 22381,
    "pr_file": "vlib/v/tests/c_structs/cstruct_arr_map_test.c.v",
    "created_at": "2024-10-02T14:18:38+00:00",
    "commented_code": "+module main\n+\n+#include \"@VMODROOT/cstruct.h\"\n+\n+@[typedef]\n+struct C.Foo {\n+\ta int = 100\n+}\n+\n+type Foo = C.Foo\n+\n+struct GameObject {\n+mut:\n+\tmap_a map[string]Foo\n+\tmap_b map[string]?Foo\n+\tb     []Foo\n+\tc     []?Foo\n+}\n+\n+fn test_main() {\n+\tmut g := GameObject{}\n+\tg.map_a['a'] = Foo{}\n+\tg.map_b['a'] = ?Foo{\n+\t\ta: 123\n+\t}\n+\tg.map_b['aa'] = ?Foo{}\n+\tg.b << Foo{}\n+\tg.c << ?Foo{\n+\t\ta: 123\n+\t}\n+\tg.c << ?Foo{}\n+\tprintln(g)\n+\tdump(g)\n+\tassert g.map_a.len == 1\n+\tassert g.map_b.len == 2\n+\tassert g.b.len == 1\n+\tassert g.c.len == 2\n+\tassert g.c[0] != none\n+\tassert g.c[1] == none\n+\n+\tt := ?Foo{\n+\t\ta: 123\n+\t}\n+\tdump(t)\n+\tassert t?.a == 123\n+}",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1784618541",
        "repo_full_name": "vlang/v",
        "pr_number": 22381,
        "pr_file": "vlib/v/tests/c_structs/cstruct_arr_map_test.c.v",
        "discussion_id": "1784618541",
        "commented_code": "@@ -0,0 +1,46 @@\n+module main\n+\n+#include \"@VMODROOT/cstruct.h\"\n+\n+@[typedef]\n+struct C.Foo {\n+\ta int = 100\n+}\n+\n+type Foo = C.Foo\n+\n+struct GameObject {\n+mut:\n+\tmap_a map[string]Foo\n+\tmap_b map[string]?Foo\n+\tb     []Foo\n+\tc     []?Foo\n+}\n+\n+fn test_main() {\n+\tmut g := GameObject{}\n+\tg.map_a['a'] = Foo{}\n+\tg.map_b['a'] = ?Foo{\n+\t\ta: 123\n+\t}\n+\tg.map_b['aa'] = ?Foo{}\n+\tg.b << Foo{}\n+\tg.c << ?Foo{\n+\t\ta: 123\n+\t}\n+\tg.c << ?Foo{}\n+\tprintln(g)\n+\tdump(g)\n+\tassert g.map_a.len == 1\n+\tassert g.map_b.len == 2\n+\tassert g.b.len == 1\n+\tassert g.c.len == 2\n+\tassert g.c[0] != none\n+\tassert g.c[1] == none\n+\n+\tt := ?Foo{\n+\t\ta: 123\n+\t}\n+\tdump(t)\n+\tassert t?.a == 123\n+}",
        "comment_created_at": "2024-10-02T14:18:38+00:00",
        "comment_author": "spytheman",
        "comment_body": "Please put some assertions against the contents of `g.str()` and `t.str()` too.",
        "pr_file_module": null
      },
      {
        "comment_id": "1784623121",
        "repo_full_name": "vlang/v",
        "pr_number": 22381,
        "pr_file": "vlib/v/tests/c_structs/cstruct_arr_map_test.c.v",
        "discussion_id": "1784618541",
        "commented_code": "@@ -0,0 +1,46 @@\n+module main\n+\n+#include \"@VMODROOT/cstruct.h\"\n+\n+@[typedef]\n+struct C.Foo {\n+\ta int = 100\n+}\n+\n+type Foo = C.Foo\n+\n+struct GameObject {\n+mut:\n+\tmap_a map[string]Foo\n+\tmap_b map[string]?Foo\n+\tb     []Foo\n+\tc     []?Foo\n+}\n+\n+fn test_main() {\n+\tmut g := GameObject{}\n+\tg.map_a['a'] = Foo{}\n+\tg.map_b['a'] = ?Foo{\n+\t\ta: 123\n+\t}\n+\tg.map_b['aa'] = ?Foo{}\n+\tg.b << Foo{}\n+\tg.c << ?Foo{\n+\t\ta: 123\n+\t}\n+\tg.c << ?Foo{}\n+\tprintln(g)\n+\tdump(g)\n+\tassert g.map_a.len == 1\n+\tassert g.map_b.len == 2\n+\tassert g.b.len == 1\n+\tassert g.c.len == 2\n+\tassert g.c[0] != none\n+\tassert g.c[1] == none\n+\n+\tt := ?Foo{\n+\t\ta: 123\n+\t}\n+\tdump(t)\n+\tassert t?.a == 123\n+}",
        "comment_created_at": "2024-10-02T14:21:10+00:00",
        "comment_author": "spytheman",
        "comment_body": "(something like `assert g.str().contains('a: 100')` etc)",
        "pr_file_module": null
      }
    ]
  }
]