[
  {
    "discussion_id": "1918386606",
    "pr_number": 23463,
    "pr_file": "vlib/crypto/ecdsa/util.v",
    "created_at": "2025-01-16T12:26:41+00:00",
    "commented_code": "// -----END PUBLIC KEY-----'\n //\n // block, _ := pem.decode(pubkey_sample) or { panic(err) }\n-// pubkey := pubkey_from_bytes(block.data)!\n+// pubkey := ecdsa.pubkey_from_bytes(block.data)!\n // ```\n-pub fn pubkey_from_bytes(bytes []u8) !PublicKey {\n+fn pubkey_from_bytes(bytes []u8) !PublicKey {",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1918386606",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/util.v",
        "discussion_id": "1918386606",
        "commented_code": "@@ -57,9 +84,9 @@ fn C.EC_GROUP_free(group &C.EC_GROUP)\n // -----END PUBLIC KEY-----'\n //\n // block, _ := pem.decode(pubkey_sample) or { panic(err) }\n-// pubkey := pubkey_from_bytes(block.data)!\n+// pubkey := ecdsa.pubkey_from_bytes(block.data)!\n // ```\n-pub fn pubkey_from_bytes(bytes []u8) !PublicKey {\n+fn pubkey_from_bytes(bytes []u8) !PublicKey {",
        "comment_created_at": "2025-01-16T12:26:41+00:00",
        "comment_author": "spytheman",
        "comment_body": "That is a breaking change. Is it not needed anymore?\r\nThe commented example above suggests otherwise.\r\nCan you extract the example as a separate _test.v file, that does not start with `module ecdsa`, and thus can only access its public API?",
        "pr_file_module": null
      },
      {
        "comment_id": "1918620748",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/util.v",
        "discussion_id": "1918386606",
        "commented_code": "@@ -57,9 +84,9 @@ fn C.EC_GROUP_free(group &C.EC_GROUP)\n // -----END PUBLIC KEY-----'\n //\n // block, _ := pem.decode(pubkey_sample) or { panic(err) }\n-// pubkey := pubkey_from_bytes(block.data)!\n+// pubkey := ecdsa.pubkey_from_bytes(block.data)!\n // ```\n-pub fn pubkey_from_bytes(bytes []u8) !PublicKey {\n+fn pubkey_from_bytes(bytes []u8) !PublicKey {",
        "comment_created_at": "2025-01-16T14:08:51+00:00",
        "comment_author": "blackshirt",
        "comment_body": "> That is a breaking change. Is it not needed anymore? The commented example above suggests otherwise. Can you extract the example as a separate _test.v file, that does not start with `module ecdsa`, and thus can only access its public API?\r\n\r\nIts gone be replaced with `pubkey_from_string` and the counterpart `privkey_from_string`. Likely the user easily can get PEM-formatted as an input for them.\r\n\r\nI would extract the example as separate test file.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1919437014",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/util.v",
        "discussion_id": "1918386606",
        "commented_code": "@@ -57,9 +84,9 @@ fn C.EC_GROUP_free(group &C.EC_GROUP)\n // -----END PUBLIC KEY-----'\n //\n // block, _ := pem.decode(pubkey_sample) or { panic(err) }\n-// pubkey := pubkey_from_bytes(block.data)!\n+// pubkey := ecdsa.pubkey_from_bytes(block.data)!\n // ```\n-pub fn pubkey_from_bytes(bytes []u8) !PublicKey {\n+fn pubkey_from_bytes(bytes []u8) !PublicKey {",
        "comment_created_at": "2025-01-17T01:30:23+00:00",
        "comment_author": "blackshirt",
        "comment_body": "Likely places in new file also should add exclusion into `cmd/tools/modules/testing/common.v`. Is it enough to add into already publicly facing example test file,  in `example/ecdsa_seed_test.v` file ? Its already only access its public API",
        "pr_file_module": null
      },
      {
        "comment_id": "1919702024",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/util.v",
        "discussion_id": "1918386606",
        "commented_code": "@@ -57,9 +84,9 @@ fn C.EC_GROUP_free(group &C.EC_GROUP)\n // -----END PUBLIC KEY-----'\n //\n // block, _ := pem.decode(pubkey_sample) or { panic(err) }\n-// pubkey := pubkey_from_bytes(block.data)!\n+// pubkey := ecdsa.pubkey_from_bytes(block.data)!\n // ```\n-pub fn pubkey_from_bytes(bytes []u8) !PublicKey {\n+fn pubkey_from_bytes(bytes []u8) !PublicKey {",
        "comment_created_at": "2025-01-17T07:57:52+00:00",
        "comment_author": "spytheman",
        "comment_body": "It can be added in example/ecdsa_seed_test.v, but then it will be less clear about what is it demonstrating, and linking to it specifically from the comments here will be a bit harder. That said, if you prefer it that way - sure.",
        "pr_file_module": null
      },
      {
        "comment_id": "1921077380",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/util.v",
        "discussion_id": "1918386606",
        "commented_code": "@@ -57,9 +84,9 @@ fn C.EC_GROUP_free(group &C.EC_GROUP)\n // -----END PUBLIC KEY-----'\n //\n // block, _ := pem.decode(pubkey_sample) or { panic(err) }\n-// pubkey := pubkey_from_bytes(block.data)!\n+// pubkey := ecdsa.pubkey_from_bytes(block.data)!\n // ```\n-pub fn pubkey_from_bytes(bytes []u8) !PublicKey {\n+fn pubkey_from_bytes(bytes []u8) !PublicKey {",
        "comment_created_at": "2025-01-18T14:22:53+00:00",
        "comment_author": "blackshirt",
        "comment_body": "Okey",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1868494795",
    "pr_number": 23058,
    "pr_file": "vlib/crypto/sha3/sha3.v",
    "created_at": "2024-12-03T23:24:32+00:00",
    "commented_code": "//\n // hash_size - the number if bytes in the generated hash.\n //     Legal values are 224, 256, 384, and 512.\n-pub fn new_digest(absorption_rate int, hash_size int) !&Digest {\n+//\n+// suffix - the domain suffix. 0x06 for FIPS PUB 202 compliant SHA-3, 0x01 for Keccak, 0x1f for extended output.\n+pub fn new_digest(absorption_rate int, hash_size int, suffix u8) !&Digest {",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1868494795",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868494795",
        "commented_code": "@@ -123,7 +136,9 @@ mut:\n //\n // hash_size - the number if bytes in the generated hash.\n //     Legal values are 224, 256, 384, and 512.\n-pub fn new_digest(absorption_rate int, hash_size int) !&Digest {\n+//\n+// suffix - the domain suffix. 0x06 for FIPS PUB 202 compliant SHA-3, 0x01 for Keccak, 0x1f for extended output.\n+pub fn new_digest(absorption_rate int, hash_size int, suffix u8) !&Digest {",
        "comment_created_at": "2024-12-03T23:24:32+00:00",
        "comment_author": "blackshirt",
        "comment_body": "`new_digest` is already public, changes the signature is breaking changes, and maybe breaks the user, thats should be considered to be avoided (if possible)\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1868738996",
    "pr_number": 23058,
    "pr_file": "vlib/crypto/sha3/sha3.v",
    "created_at": "2024-12-04T05:25:33+00:00",
    "commented_code": "}\n \t\t}\n \t}\n-\n-\td := Digest{\n-\t\trate:       absorption_rate\n-\t\tsuffix:     hash_pad\n-\t\toutput_len: hash_size\n-\t\ts:          State{}\n-\t}\n-\n-\treturn &d\n }\n \n-// new_xof_digest creates an initialized digest structure based on\n-// the absorption rate and how many bytes of output you need\n-//\n-// absorption_rate is the number of bytes to be absorbed into the\n-//     sponge per permutation.  Legal values are xof_rate_128 and\n-//     xof_rate_256.\n-//\n-// hash_size - the number if bytes in the generated hash.\n-//     Legal values are positive integers.\n-pub fn new_xof_digest(absorption_rate int, hash_size int) !&Digest {\n+fn validate_xof(absorption_rate int, hash_size int) ! {",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1868738996",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868738996",
        "commented_code": "@@ -163,27 +196,9 @@ pub fn new_digest(absorption_rate int, hash_size int) !&Digest {\n \t\t\t}\n \t\t}\n \t}\n-\n-\td := Digest{\n-\t\trate:       absorption_rate\n-\t\tsuffix:     hash_pad\n-\t\toutput_len: hash_size\n-\t\ts:          State{}\n-\t}\n-\n-\treturn &d\n }\n \n-// new_xof_digest creates an initialized digest structure based on\n-// the absorption rate and how many bytes of output you need\n-//\n-// absorption_rate is the number of bytes to be absorbed into the\n-//     sponge per permutation.  Legal values are xof_rate_128 and\n-//     xof_rate_256.\n-//\n-// hash_size - the number if bytes in the generated hash.\n-//     Legal values are positive integers.\n-pub fn new_xof_digest(absorption_rate int, hash_size int) !&Digest {\n+fn validate_xof(absorption_rate int, hash_size int) ! {",
        "comment_created_at": "2024-12-04T05:25:33+00:00",
        "comment_author": "spytheman",
        "comment_body": "This is a breaking change too - `new_xof_digest` was public, and  is now both changed in name, and private.",
        "pr_file_module": null
      },
      {
        "comment_id": "1868740436",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868738996",
        "commented_code": "@@ -163,27 +196,9 @@ pub fn new_digest(absorption_rate int, hash_size int) !&Digest {\n \t\t\t}\n \t\t}\n \t}\n-\n-\td := Digest{\n-\t\trate:       absorption_rate\n-\t\tsuffix:     hash_pad\n-\t\toutput_len: hash_size\n-\t\ts:          State{}\n-\t}\n-\n-\treturn &d\n }\n \n-// new_xof_digest creates an initialized digest structure based on\n-// the absorption rate and how many bytes of output you need\n-//\n-// absorption_rate is the number of bytes to be absorbed into the\n-//     sponge per permutation.  Legal values are xof_rate_128 and\n-//     xof_rate_256.\n-//\n-// hash_size - the number if bytes in the generated hash.\n-//     Legal values are positive integers.\n-pub fn new_xof_digest(absorption_rate int, hash_size int) !&Digest {\n+fn validate_xof(absorption_rate int, hash_size int) ! {",
        "comment_created_at": "2024-12-04T05:27:33+00:00",
        "comment_author": "spytheman",
        "comment_body": "Imho keep the new private function, but also add back the public one as it was + its comments, just calling the private one.",
        "pr_file_module": null
      }
    ]
  }
]