[
  {
    "discussion_id": "1849643999",
    "pr_number": 22919,
    "pr_file": "doc/docs.md",
    "created_at": "2024-11-20T06:48:23+00:00",
    "commented_code": "current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1849643999",
        "repo_full_name": "vlang/v",
        "pr_number": 22919,
        "pr_file": "doc/docs.md",
        "discussion_id": "1849643999",
        "commented_code": "@@ -1577,6 +1578,54 @@ println('Name: ${name}')\n current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.",
        "comment_created_at": "2024-11-20T06:48:23+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\nModules names in .v files, must match the name of their directory.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849644725",
    "pr_number": 22919,
    "pr_file": "doc/docs.md",
    "created_at": "2024-11-20T06:49:15+00:00",
    "commented_code": "current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory \n+belong to the same module abc and should start with `module abc`.",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1849644725",
        "repo_full_name": "vlang/v",
        "pr_number": 22919,
        "pr_file": "doc/docs.md",
        "discussion_id": "1849644725",
        "commented_code": "@@ -1577,6 +1578,54 @@ println('Name: ${name}')\n current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory \n+belong to the same module abc and should start with `module abc`.",
        "comment_created_at": "2024-11-20T06:49:15+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\nbelong to the same module `abc`. They should also start with `module abc`.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849646214",
    "pr_number": 22919,
    "pr_file": "doc/docs.md",
    "created_at": "2024-11-20T06:51:02+00:00",
    "commented_code": "current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory \n+belong to the same module abc and should start with `module abc`.\n+\n+If you have `abc/def/`, with .v files in both folders you can `import abc`, but you will have \n+to `import abc.def` too, to get to the symbols in the subfolder.\n+\n+In `module name` statement, name never repeats directory's hierarchy, but only its directory.\n+So in `abc/def/source.v`  first line will be `module def`, and never `module abc.def`.",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1849646214",
        "repo_full_name": "vlang/v",
        "pr_number": 22919,
        "pr_file": "doc/docs.md",
        "discussion_id": "1849646214",
        "commented_code": "@@ -1577,6 +1578,54 @@ println('Name: ${name}')\n current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory \n+belong to the same module abc and should start with `module abc`.\n+\n+If you have `abc/def/`, with .v files in both folders you can `import abc`, but you will have \n+to `import abc.def` too, to get to the symbols in the subfolder.\n+\n+In `module name` statement, name never repeats directory's hierarchy, but only its directory.\n+So in `abc/def/source.v`  first line will be `module def`, and never `module abc.def`.",
        "comment_created_at": "2024-11-20T06:51:02+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\nSo in `abc/def/source.v` the first line will be `module def`, and not `module abc.def`.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849647235",
    "pr_number": 22919,
    "pr_file": "doc/docs.md",
    "created_at": "2024-11-20T06:52:11+00:00",
    "commented_code": "current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory \n+belong to the same module abc and should start with `module abc`.\n+\n+If you have `abc/def/`, with .v files in both folders you can `import abc`, but you will have \n+to `import abc.def` too, to get to the symbols in the subfolder.\n+\n+In `module name` statement, name never repeats directory's hierarchy, but only its directory.\n+So in `abc/def/source.v`  first line will be `module def`, and never `module abc.def`.\n+\n+`import module_name` statements must respect file hierarchy, also you cannot import def, only\n+abc.def",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1849647235",
        "repo_full_name": "vlang/v",
        "pr_number": 22919,
        "pr_file": "doc/docs.md",
        "discussion_id": "1849647235",
        "commented_code": "@@ -1577,6 +1578,54 @@ println('Name: ${name}')\n current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory \n+belong to the same module abc and should start with `module abc`.\n+\n+If you have `abc/def/`, with .v files in both folders you can `import abc`, but you will have \n+to `import abc.def` too, to get to the symbols in the subfolder.\n+\n+In `module name` statement, name never repeats directory's hierarchy, but only its directory.\n+So in `abc/def/source.v`  first line will be `module def`, and never `module abc.def`.\n+\n+`import module_name` statements must respect file hierarchy, also you cannot import def, only\n+abc.def",
        "comment_created_at": "2024-11-20T06:52:11+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\n`abc.def`\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849650131",
    "pr_number": 22919,
    "pr_file": "doc/docs.md",
    "created_at": "2024-11-20T06:53:46+00:00",
    "commented_code": "current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory \n+belong to the same module abc and should start with `module abc`.\n+\n+If you have `abc/def/`, with .v files in both folders you can `import abc`, but you will have \n+to `import abc.def` too, to get to the symbols in the subfolder.\n+\n+In `module name` statement, name never repeats directory's hierarchy, but only its directory.\n+So in `abc/def/source.v`  first line will be `module def`, and never `module abc.def`.\n+\n+`import module_name` statements must respect file hierarchy, also you cannot import def, only\n+abc.def\n+\n+Refering to a module symbol such function or variable only requires module name as prefix:",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1849650131",
        "repo_full_name": "vlang/v",
        "pr_number": 22919,
        "pr_file": "doc/docs.md",
        "discussion_id": "1849650131",
        "commented_code": "@@ -1577,6 +1578,54 @@ println('Name: ${name}')\n current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory \n+belong to the same module abc and should start with `module abc`.\n+\n+If you have `abc/def/`, with .v files in both folders you can `import abc`, but you will have \n+to `import abc.def` too, to get to the symbols in the subfolder.\n+\n+In `module name` statement, name never repeats directory's hierarchy, but only its directory.\n+So in `abc/def/source.v`  first line will be `module def`, and never `module abc.def`.\n+\n+`import module_name` statements must respect file hierarchy, also you cannot import def, only\n+abc.def\n+\n+Refering to a module symbol such function or variable only requires module name as prefix:",
        "comment_created_at": "2024-11-20T06:53:46+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\nRefering to a module symbol such as a function or const, only needs module name as prefix:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849652013",
    "pr_number": 22919,
    "pr_file": "doc/docs.md",
    "created_at": "2024-11-20T06:54:47+00:00",
    "commented_code": "current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory \n+belong to the same module abc and should start with `module abc`.\n+\n+If you have `abc/def/`, with .v files in both folders you can `import abc`, but you will have \n+to `import abc.def` too, to get to the symbols in the subfolder.\n+\n+In `module name` statement, name never repeats directory's hierarchy, but only its directory.\n+So in `abc/def/source.v`  first line will be `module def`, and never `module abc.def`.\n+\n+`import module_name` statements must respect file hierarchy, also you cannot import def, only\n+abc.def\n+\n+Refering to a module symbol such function or variable only requires module name as prefix:\n+\n+```v ignore\n+module def\n+\n+// func is a dummy example function.\n+pub fn func() {\n+\tprintln('func')\n+}\n+```\n+\n+will be called:\n+\n+```v ignore\n+module main\n+\n+import def\n+\n+fn main() {\n+\tdef.func()\n+}\n+```\n+\n+A function, located in `abc/def/source.v`,  is called with `def.func()`, not `abc.def.func()`",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1849652013",
        "repo_full_name": "vlang/v",
        "pr_number": 22919,
        "pr_file": "doc/docs.md",
        "discussion_id": "1849652013",
        "commented_code": "@@ -1577,6 +1578,54 @@ println('Name: ${name}')\n current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+modules names in .v files, must match their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory \n+belong to the same module abc and should start with `module abc`.\n+\n+If you have `abc/def/`, with .v files in both folders you can `import abc`, but you will have \n+to `import abc.def` too, to get to the symbols in the subfolder.\n+\n+In `module name` statement, name never repeats directory's hierarchy, but only its directory.\n+So in `abc/def/source.v`  first line will be `module def`, and never `module abc.def`.\n+\n+`import module_name` statements must respect file hierarchy, also you cannot import def, only\n+abc.def\n+\n+Refering to a module symbol such function or variable only requires module name as prefix:\n+\n+```v ignore\n+module def\n+\n+// func is a dummy example function.\n+pub fn func() {\n+\tprintln('func')\n+}\n+```\n+\n+will be called:\n+\n+```v ignore\n+module main\n+\n+import def\n+\n+fn main() {\n+\tdef.func()\n+}\n+```\n+\n+A function, located in `abc/def/source.v`,  is called with `def.func()`, not `abc.def.func()`",
        "comment_created_at": "2024-11-20T06:54:47+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\nA function, located in `abc/def/source.v`, is called with `def.func()`, not `abc.def.func()`\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849654593",
    "pr_number": 22919,
    "pr_file": "doc/docs.md",
    "created_at": "2024-11-20T06:57:05+00:00",
    "commented_code": "current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+Modules names in .v files, must match the name of their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1849654593",
        "repo_full_name": "vlang/v",
        "pr_number": 22919,
        "pr_file": "doc/docs.md",
        "discussion_id": "1849654593",
        "commented_code": "@@ -1577,6 +1578,54 @@ println('Name: ${name}')\n current_os := user_os()\n println('Your OS is ${current_os}.')\n ```\n+### Module hierarchy\n+\n+> [!NOTE]\n+> This section is valid when .v files are not in the project's root directory.\n+\n+Modules names in .v files, must match the name of their directory.\n+ \n+A .v file `./abc/source.v`  must start with `module abc`. All other .v files in this directory ",
        "comment_created_at": "2024-11-20T06:57:05+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\nA .v file `./abc/source.v` must start with `module abc`. All .v files in this directory \r\n```",
        "pr_file_module": null
      }
    ]
  }
]