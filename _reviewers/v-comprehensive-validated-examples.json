[
  {
    "discussion_id": "2166408547",
    "pr_number": 24789,
    "pr_file": "doc/docs.md",
    "created_at": "2025-06-25T10:44:09+00:00",
    "commented_code": "}\n ```\n \n+### Lambda\n+\n+V supports lambdas, small anonymous functions, with `||` syntax.\n+\n+```v oksyntax\n+// Sort list defining comparator with lambda function\n+a.sort(|x, y| x > y)",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "2166408547",
        "repo_full_name": "vlang/v",
        "pr_number": 24789,
        "pr_file": "doc/docs.md",
        "discussion_id": "2166408547",
        "commented_code": "@@ -3021,6 +3021,30 @@ fn main() {\n }\n ```\n \n+### Lambda\n+\n+V supports lambdas, small anonymous functions, with `||` syntax.\n+\n+```v oksyntax\n+// Sort list defining comparator with lambda function\n+a.sort(|x, y| x > y)",
        "comment_created_at": "2025-06-25T10:44:09+00:00",
        "comment_author": "spytheman",
        "comment_body": "this is now out of order, and if you remove the `oksyntax` tag, `v check-md` will fail (or if the user copy/pastes it in the playground/editor).",
        "pr_file_module": null
      },
      {
        "comment_id": "2166411640",
        "repo_full_name": "vlang/v",
        "pr_number": 24789,
        "pr_file": "doc/docs.md",
        "discussion_id": "2166408547",
        "commented_code": "@@ -3021,6 +3021,30 @@ fn main() {\n }\n ```\n \n+### Lambda\n+\n+V supports lambdas, small anonymous functions, with `||` syntax.\n+\n+```v oksyntax\n+// Sort list defining comparator with lambda function\n+a.sort(|x, y| x > y)",
        "comment_created_at": "2025-06-25T10:46:00+00:00",
        "comment_author": "spytheman",
        "comment_body": "One of the major benefits of self sufficient examples, is that with them you get this:\r\n![image](https://github.com/user-attachments/assets/5607c538-074b-4c56-899c-594d0319e5d7)\r\non https://docs.vlang.io/hello-world.html .",
        "pr_file_module": null
      },
      {
        "comment_id": "2166412468",
        "repo_full_name": "vlang/v",
        "pr_number": 24789,
        "pr_file": "doc/docs.md",
        "discussion_id": "2166408547",
        "commented_code": "@@ -3021,6 +3021,30 @@ fn main() {\n }\n ```\n \n+### Lambda\n+\n+V supports lambdas, small anonymous functions, with `||` syntax.\n+\n+```v oksyntax\n+// Sort list defining comparator with lambda function\n+a.sort(|x, y| x > y)",
        "comment_created_at": "2025-06-25T10:46:29+00:00",
        "comment_author": "spytheman",
        "comment_body": "And then, it is trivial to play with them, which makes learning V easier for newbies.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2032383032",
    "pr_number": 24155,
    "pr_file": "doc/docs.md",
    "created_at": "2025-04-08T04:59:56+00:00",
    "commented_code": "For special purposes there are some builtin fields and methods:\n \n+```v\n+ch := chan int{cap: 2}\n+println(ch.try_push(42)) // `.success` if pushed, `.not_ready` if full, `.closed` if closed\n+println(ch.len) // Number of items in the buffer\n+println(ch.cap) // Buffer capacity\n+println(ch.closed) // Whether the channel is closed\n+```\n+\n ```v\n struct Abc {\n \tx int\n }\n \n-a := 2.13\n-ch := chan f64{}\n-res := ch.try_push(a) // try to perform `ch <- a`\n-println(res)\n-l := ch.len // number of elements in queue\n-c := ch.cap // maximum queue length\n-is_closed := ch.closed // bool flag - has `ch` been closed\n-println(l)\n-println(c)\n-mut b := Abc{}\n-ch2 := chan Abc{}\n-res2 := ch2.try_pop(mut b) // try to perform `b = <-ch2`",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "2032383032",
        "repo_full_name": "vlang/v",
        "pr_number": 24155,
        "pr_file": "doc/docs.md",
        "discussion_id": "2032383032",
        "commented_code": "@@ -4635,23 +4662,26 @@ if select {\n \n For special purposes there are some builtin fields and methods:\n \n+```v\n+ch := chan int{cap: 2}\n+println(ch.try_push(42)) // `.success` if pushed, `.not_ready` if full, `.closed` if closed\n+println(ch.len) // Number of items in the buffer\n+println(ch.cap) // Buffer capacity\n+println(ch.closed) // Whether the channel is closed\n+```\n+\n ```v\n struct Abc {\n \tx int\n }\n \n-a := 2.13\n-ch := chan f64{}\n-res := ch.try_push(a) // try to perform `ch <- a`\n-println(res)\n-l := ch.len // number of elements in queue\n-c := ch.cap // maximum queue length\n-is_closed := ch.closed // bool flag - has `ch` been closed\n-println(l)\n-println(c)\n-mut b := Abc{}\n-ch2 := chan Abc{}\n-res2 := ch2.try_pop(mut b) // try to perform `b = <-ch2`",
        "comment_created_at": "2025-04-08T04:59:56+00:00",
        "comment_author": "spytheman",
        "comment_body": "These were more informative compared to a whole example for just `.try_pop()`, with a comment that duplicates the code ...\r\nRemove the new example, and restore the old code.",
        "pr_file_module": null
      },
      {
        "comment_id": "2032516148",
        "repo_full_name": "vlang/v",
        "pr_number": 24155,
        "pr_file": "doc/docs.md",
        "discussion_id": "2032383032",
        "commented_code": "@@ -4635,23 +4662,26 @@ if select {\n \n For special purposes there are some builtin fields and methods:\n \n+```v\n+ch := chan int{cap: 2}\n+println(ch.try_push(42)) // `.success` if pushed, `.not_ready` if full, `.closed` if closed\n+println(ch.len) // Number of items in the buffer\n+println(ch.cap) // Buffer capacity\n+println(ch.closed) // Whether the channel is closed\n+```\n+\n ```v\n struct Abc {\n \tx int\n }\n \n-a := 2.13\n-ch := chan f64{}\n-res := ch.try_push(a) // try to perform `ch <- a`\n-println(res)\n-l := ch.len // number of elements in queue\n-c := ch.cap // maximum queue length\n-is_closed := ch.closed // bool flag - has `ch` been closed\n-println(l)\n-println(c)\n-mut b := Abc{}\n-ch2 := chan Abc{}\n-res2 := ch2.try_pop(mut b) // try to perform `b = <-ch2`",
        "comment_created_at": "2025-04-08T06:57:28+00:00",
        "comment_author": "enghitalo",
        "comment_body": "Both have the same amount of information.\ud83e\udd14 It is the same information, however, without the use of variables.",
        "pr_file_module": null
      },
      {
        "comment_id": "2032516179",
        "repo_full_name": "vlang/v",
        "pr_number": 24155,
        "pr_file": "doc/docs.md",
        "discussion_id": "2032383032",
        "commented_code": "@@ -4635,23 +4662,26 @@ if select {\n \n For special purposes there are some builtin fields and methods:\n \n+```v\n+ch := chan int{cap: 2}\n+println(ch.try_push(42)) // `.success` if pushed, `.not_ready` if full, `.closed` if closed\n+println(ch.len) // Number of items in the buffer\n+println(ch.cap) // Buffer capacity\n+println(ch.closed) // Whether the channel is closed\n+```\n+\n ```v\n struct Abc {\n \tx int\n }\n \n-a := 2.13\n-ch := chan f64{}\n-res := ch.try_push(a) // try to perform `ch <- a`\n-println(res)\n-l := ch.len // number of elements in queue\n-c := ch.cap // maximum queue length\n-is_closed := ch.closed // bool flag - has `ch` been closed\n-println(l)\n-println(c)\n-mut b := Abc{}\n-ch2 := chan Abc{}\n-res2 := ch2.try_pop(mut b) // try to perform `b = <-ch2`",
        "comment_created_at": "2025-04-08T06:57:29+00:00",
        "comment_author": "enghitalo",
        "comment_body": "Both have the same amount of information.\ud83e\udd14 It is the same information, however, without the use of variables.",
        "pr_file_module": null
      },
      {
        "comment_id": "2032842731",
        "repo_full_name": "vlang/v",
        "pr_number": 24155,
        "pr_file": "doc/docs.md",
        "discussion_id": "2032383032",
        "commented_code": "@@ -4635,23 +4662,26 @@ if select {\n \n For special purposes there are some builtin fields and methods:\n \n+```v\n+ch := chan int{cap: 2}\n+println(ch.try_push(42)) // `.success` if pushed, `.not_ready` if full, `.closed` if closed\n+println(ch.len) // Number of items in the buffer\n+println(ch.cap) // Buffer capacity\n+println(ch.closed) // Whether the channel is closed\n+```\n+\n ```v\n struct Abc {\n \tx int\n }\n \n-a := 2.13\n-ch := chan f64{}\n-res := ch.try_push(a) // try to perform `ch <- a`\n-println(res)\n-l := ch.len // number of elements in queue\n-c := ch.cap // maximum queue length\n-is_closed := ch.closed // bool flag - has `ch` been closed\n-println(l)\n-println(c)\n-mut b := Abc{}\n-ch2 := chan Abc{}\n-res2 := ch2.try_pop(mut b) // try to perform `b = <-ch2`",
        "comment_created_at": "2025-04-08T10:00:08+00:00",
        "comment_author": "spytheman",
        "comment_body": "No, it is not the same information at all. The code sample before showed several channel features, while later in your example, shows just this, that is related to the channel use:\r\n```v\r\nres := ch.try_pop(mut b) // try to perform `b = <-ch`\r\n```\r\n\r\nDo delete the new code, and restore the old in this particular case, I do not want to argue about it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2032846095",
        "repo_full_name": "vlang/v",
        "pr_number": 24155,
        "pr_file": "doc/docs.md",
        "discussion_id": "2032383032",
        "commented_code": "@@ -4635,23 +4662,26 @@ if select {\n \n For special purposes there are some builtin fields and methods:\n \n+```v\n+ch := chan int{cap: 2}\n+println(ch.try_push(42)) // `.success` if pushed, `.not_ready` if full, `.closed` if closed\n+println(ch.len) // Number of items in the buffer\n+println(ch.cap) // Buffer capacity\n+println(ch.closed) // Whether the channel is closed\n+```\n+\n ```v\n struct Abc {\n \tx int\n }\n \n-a := 2.13\n-ch := chan f64{}\n-res := ch.try_push(a) // try to perform `ch <- a`\n-println(res)\n-l := ch.len // number of elements in queue\n-c := ch.cap // maximum queue length\n-is_closed := ch.closed // bool flag - has `ch` been closed\n-println(l)\n-println(c)\n-mut b := Abc{}\n-ch2 := chan Abc{}\n-res2 := ch2.try_pop(mut b) // try to perform `b = <-ch2`",
        "comment_created_at": "2025-04-08T10:02:02+00:00",
        "comment_author": "spytheman",
        "comment_body": "The other examples are mostly fine, but this one loses information, that is important for understanding how to use channels.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1918325786",
    "pr_number": 23463,
    "pr_file": "vlib/crypto/ecdsa/README.md",
    "created_at": "2025-01-16T11:58:18+00:00",
    "commented_code": "`ecdsa` module for V language. Its a wrapper on top of openssl ecdsa functionality.\n Its currently (expanded) to support the following curves:\n+\n - NIST P-256 curve, commonly referred as prime256v1 or secp256r1\n - NIST P-384 curve, commonly referred as secp384r1 \n - NIST P-521 curve, commonly referred as secp521r1\n-- A famous Bitcoin curve, commonly referred as secp256k1\n\\ No newline at end of file\n+- A famous Bitcoin curve, commonly referred as secp256k1\n+\n+# Example\n+```codeblock",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1918325786",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/README.md",
        "discussion_id": "1918325786",
        "commented_code": "@@ -2,7 +2,27 @@\n \n `ecdsa` module for V language. Its a wrapper on top of openssl ecdsa functionality.\n Its currently (expanded) to support the following curves:\n+\n - NIST P-256 curve, commonly referred as prime256v1 or secp256r1\n - NIST P-384 curve, commonly referred as secp384r1 \n - NIST P-521 curve, commonly referred as secp521r1\n-- A famous Bitcoin curve, commonly referred as secp256k1\n\\ No newline at end of file\n+- A famous Bitcoin curve, commonly referred as secp256k1\n+\n+# Example\n+```codeblock",
        "comment_created_at": "2025-01-16T11:58:18+00:00",
        "comment_author": "spytheman",
        "comment_body": "Instead of `codeblock`, use `v` here.\r\nThe benefit is that the tool `v check-md .` will then check the example on the CI,\r\nand that way it will be kept valid, and also consistent with the rest of the V examples in documentation (formatted, vetted, etc).",
        "pr_file_module": null
      },
      {
        "comment_id": "1918499430",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/README.md",
        "discussion_id": "1918325786",
        "commented_code": "@@ -2,7 +2,27 @@\n \n `ecdsa` module for V language. Its a wrapper on top of openssl ecdsa functionality.\n Its currently (expanded) to support the following curves:\n+\n - NIST P-256 curve, commonly referred as prime256v1 or secp256r1\n - NIST P-384 curve, commonly referred as secp384r1 \n - NIST P-521 curve, commonly referred as secp521r1\n-- A famous Bitcoin curve, commonly referred as secp256k1\n\\ No newline at end of file\n+- A famous Bitcoin curve, commonly referred as secp256k1\n+\n+# Example\n+```codeblock",
        "comment_created_at": "2025-01-16T13:08:27+00:00",
        "comment_author": "blackshirt",
        "comment_body": "Okey .. would be changed",
        "pr_file_module": null
      }
    ]
  }
]