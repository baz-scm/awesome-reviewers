[
  {
    "discussion_id": "2154657090",
    "pr_number": 24748,
    "pr_file": "vlib/x/crypto/curve25519/README.md",
    "created_at": "2025-06-18T13:45:53+00:00",
    "commented_code": "+# curve25519\n+------------\n+This module implement Diffie-Hellman key exchange mechanism (ECDHA) based on elliptic curve \n+known as Curve25519 in pure v.\n+\n+## About curve25519\n+\n+From wikipedia, Curve25519 is an elliptic curve used in elliptic-curve cryptography (ECC) \n+offering 128 bits of security (256-bit key size) and designed for use with the elliptic \n+curve Diffie\u2013Hellman (ECDH) key agreement scheme. \n+It is one of the fastest curves in ECC, and is not covered by any known patents. \n+The reference implementation is public domain software. The original Curve25519 paper defined it as \n+a Diffie\u2013Hellman (DH) function. \n+Daniel J. Bernstein has since proposed that the name \"Curve25519\" be used for the underlying curve,\n+and the name \"X25519\" for the DH function Curve25519 is an elliptic curve \n+that offers 128 security bits \n+and is designed for use in the Elliptic Curve Diffie-Hellman (ECDH) key agreement key design scheme.\n+\n+Examples\n+--------\n+```v\n+import x.crypto.curve25519\n+\n+fn main() {\n+\t// Lets for example, two peers, Alice and Bob want to create and share a shared secret together\n+\t//\n+\t// Alice generates own private key\n+\tmut alice_pvkey := curve25519.PrivateKey.new()!\n+\t// The Alice's PublicKey to be shared with Bob\n+\talice_pbkey := alice_pvkey.public_key()!\n+\n+\t// The others peer Bob, has an own private key\n+\tmut bob_pvkey := curve25519.PrivateKey.new()!\n+\t// The Bob's public key to be shared with Alice\n+\tbob_pbkey := bob_pvkey.public_key()!\n+\n+\t// Lets two peer has received and send their respective public key\n+\t//\n+\t// Alice derives shared secret with her own private key with shared Bob's public key\n+\talice_shared_sec := curve25519.derive_shared_secret(mut alice_pvkey, bob_pbkey)!\n+\n+\t// Bob derives shared secret with his own private key with Alice's public key\n+\tbob_shared_sec := curve25519.derive_shared_secret(mut bob_pvkey, alice_pbkey)!\n+\n+\t// two's shared secret should identical",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "2154657090",
        "repo_full_name": "vlang/v",
        "pr_number": 24748,
        "pr_file": "vlib/x/crypto/curve25519/README.md",
        "discussion_id": "2154657090",
        "commented_code": "@@ -0,0 +1,48 @@\n+# curve25519\n+------------\n+This module implement Diffie-Hellman key exchange mechanism (ECDHA) based on elliptic curve \n+known as Curve25519 in pure v.\n+\n+## About curve25519\n+\n+From wikipedia, Curve25519 is an elliptic curve used in elliptic-curve cryptography (ECC) \n+offering 128 bits of security (256-bit key size) and designed for use with the elliptic \n+curve Diffie\u2013Hellman (ECDH) key agreement scheme. \n+It is one of the fastest curves in ECC, and is not covered by any known patents. \n+The reference implementation is public domain software. The original Curve25519 paper defined it as \n+a Diffie\u2013Hellman (DH) function. \n+Daniel J. Bernstein has since proposed that the name \"Curve25519\" be used for the underlying curve,\n+and the name \"X25519\" for the DH function Curve25519 is an elliptic curve \n+that offers 128 security bits \n+and is designed for use in the Elliptic Curve Diffie-Hellman (ECDH) key agreement key design scheme.\n+\n+Examples\n+--------\n+```v\n+import x.crypto.curve25519\n+\n+fn main() {\n+\t// Lets for example, two peers, Alice and Bob want to create and share a shared secret together\n+\t//\n+\t// Alice generates own private key\n+\tmut alice_pvkey := curve25519.PrivateKey.new()!\n+\t// The Alice's PublicKey to be shared with Bob\n+\talice_pbkey := alice_pvkey.public_key()!\n+\n+\t// The others peer Bob, has an own private key\n+\tmut bob_pvkey := curve25519.PrivateKey.new()!\n+\t// The Bob's public key to be shared with Alice\n+\tbob_pbkey := bob_pvkey.public_key()!\n+\n+\t// Lets two peer has received and send their respective public key\n+\t//\n+\t// Alice derives shared secret with her own private key with shared Bob's public key\n+\talice_shared_sec := curve25519.derive_shared_secret(mut alice_pvkey, bob_pbkey)!\n+\n+\t// Bob derives shared secret with his own private key with Alice's public key\n+\tbob_shared_sec := curve25519.derive_shared_secret(mut bob_pvkey, alice_pbkey)!\n+\n+\t// two's shared secret should identical",
        "comment_created_at": "2025-06-18T13:45:53+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\n\t// the two shared secrets (derived by Alice, and derived by Bob), should be the same\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2154659642",
        "repo_full_name": "vlang/v",
        "pr_number": 24748,
        "pr_file": "vlib/x/crypto/curve25519/README.md",
        "discussion_id": "2154657090",
        "commented_code": "@@ -0,0 +1,48 @@\n+# curve25519\n+------------\n+This module implement Diffie-Hellman key exchange mechanism (ECDHA) based on elliptic curve \n+known as Curve25519 in pure v.\n+\n+## About curve25519\n+\n+From wikipedia, Curve25519 is an elliptic curve used in elliptic-curve cryptography (ECC) \n+offering 128 bits of security (256-bit key size) and designed for use with the elliptic \n+curve Diffie\u2013Hellman (ECDH) key agreement scheme. \n+It is one of the fastest curves in ECC, and is not covered by any known patents. \n+The reference implementation is public domain software. The original Curve25519 paper defined it as \n+a Diffie\u2013Hellman (DH) function. \n+Daniel J. Bernstein has since proposed that the name \"Curve25519\" be used for the underlying curve,\n+and the name \"X25519\" for the DH function Curve25519 is an elliptic curve \n+that offers 128 security bits \n+and is designed for use in the Elliptic Curve Diffie-Hellman (ECDH) key agreement key design scheme.\n+\n+Examples\n+--------\n+```v\n+import x.crypto.curve25519\n+\n+fn main() {\n+\t// Lets for example, two peers, Alice and Bob want to create and share a shared secret together\n+\t//\n+\t// Alice generates own private key\n+\tmut alice_pvkey := curve25519.PrivateKey.new()!\n+\t// The Alice's PublicKey to be shared with Bob\n+\talice_pbkey := alice_pvkey.public_key()!\n+\n+\t// The others peer Bob, has an own private key\n+\tmut bob_pvkey := curve25519.PrivateKey.new()!\n+\t// The Bob's public key to be shared with Alice\n+\tbob_pbkey := bob_pvkey.public_key()!\n+\n+\t// Lets two peer has received and send their respective public key\n+\t//\n+\t// Alice derives shared secret with her own private key with shared Bob's public key\n+\talice_shared_sec := curve25519.derive_shared_secret(mut alice_pvkey, bob_pbkey)!\n+\n+\t// Bob derives shared secret with his own private key with Alice's public key\n+\tbob_shared_sec := curve25519.derive_shared_secret(mut bob_pvkey, alice_pbkey)!\n+\n+\t// two's shared secret should identical",
        "comment_created_at": "2025-06-18T13:46:57+00:00",
        "comment_author": "spytheman",
        "comment_body": "How big (in bytes) are the derived secrets?",
        "pr_file_module": null
      },
      {
        "comment_id": "2154660189",
        "repo_full_name": "vlang/v",
        "pr_number": 24748,
        "pr_file": "vlib/x/crypto/curve25519/README.md",
        "discussion_id": "2154657090",
        "commented_code": "@@ -0,0 +1,48 @@\n+# curve25519\n+------------\n+This module implement Diffie-Hellman key exchange mechanism (ECDHA) based on elliptic curve \n+known as Curve25519 in pure v.\n+\n+## About curve25519\n+\n+From wikipedia, Curve25519 is an elliptic curve used in elliptic-curve cryptography (ECC) \n+offering 128 bits of security (256-bit key size) and designed for use with the elliptic \n+curve Diffie\u2013Hellman (ECDH) key agreement scheme. \n+It is one of the fastest curves in ECC, and is not covered by any known patents. \n+The reference implementation is public domain software. The original Curve25519 paper defined it as \n+a Diffie\u2013Hellman (DH) function. \n+Daniel J. Bernstein has since proposed that the name \"Curve25519\" be used for the underlying curve,\n+and the name \"X25519\" for the DH function Curve25519 is an elliptic curve \n+that offers 128 security bits \n+and is designed for use in the Elliptic Curve Diffie-Hellman (ECDH) key agreement key design scheme.\n+\n+Examples\n+--------\n+```v\n+import x.crypto.curve25519\n+\n+fn main() {\n+\t// Lets for example, two peers, Alice and Bob want to create and share a shared secret together\n+\t//\n+\t// Alice generates own private key\n+\tmut alice_pvkey := curve25519.PrivateKey.new()!\n+\t// The Alice's PublicKey to be shared with Bob\n+\talice_pbkey := alice_pvkey.public_key()!\n+\n+\t// The others peer Bob, has an own private key\n+\tmut bob_pvkey := curve25519.PrivateKey.new()!\n+\t// The Bob's public key to be shared with Alice\n+\tbob_pbkey := bob_pvkey.public_key()!\n+\n+\t// Lets two peer has received and send their respective public key\n+\t//\n+\t// Alice derives shared secret with her own private key with shared Bob's public key\n+\talice_shared_sec := curve25519.derive_shared_secret(mut alice_pvkey, bob_pbkey)!\n+\n+\t// Bob derives shared secret with his own private key with Alice's public key\n+\tbob_shared_sec := curve25519.derive_shared_secret(mut bob_pvkey, alice_pbkey)!\n+\n+\t// two's shared secret should identical",
        "comment_created_at": "2025-06-18T13:47:08+00:00",
        "comment_author": "spytheman",
        "comment_body": "Can we print both in the example?",
        "pr_file_module": null
      },
      {
        "comment_id": "2155650460",
        "repo_full_name": "vlang/v",
        "pr_number": 24748,
        "pr_file": "vlib/x/crypto/curve25519/README.md",
        "discussion_id": "2154657090",
        "commented_code": "@@ -0,0 +1,48 @@\n+# curve25519\n+------------\n+This module implement Diffie-Hellman key exchange mechanism (ECDHA) based on elliptic curve \n+known as Curve25519 in pure v.\n+\n+## About curve25519\n+\n+From wikipedia, Curve25519 is an elliptic curve used in elliptic-curve cryptography (ECC) \n+offering 128 bits of security (256-bit key size) and designed for use with the elliptic \n+curve Diffie\u2013Hellman (ECDH) key agreement scheme. \n+It is one of the fastest curves in ECC, and is not covered by any known patents. \n+The reference implementation is public domain software. The original Curve25519 paper defined it as \n+a Diffie\u2013Hellman (DH) function. \n+Daniel J. Bernstein has since proposed that the name \"Curve25519\" be used for the underlying curve,\n+and the name \"X25519\" for the DH function Curve25519 is an elliptic curve \n+that offers 128 security bits \n+and is designed for use in the Elliptic Curve Diffie-Hellman (ECDH) key agreement key design scheme.\n+\n+Examples\n+--------\n+```v\n+import x.crypto.curve25519\n+\n+fn main() {\n+\t// Lets for example, two peers, Alice and Bob want to create and share a shared secret together\n+\t//\n+\t// Alice generates own private key\n+\tmut alice_pvkey := curve25519.PrivateKey.new()!\n+\t// The Alice's PublicKey to be shared with Bob\n+\talice_pbkey := alice_pvkey.public_key()!\n+\n+\t// The others peer Bob, has an own private key\n+\tmut bob_pvkey := curve25519.PrivateKey.new()!\n+\t// The Bob's public key to be shared with Alice\n+\tbob_pbkey := bob_pvkey.public_key()!\n+\n+\t// Lets two peer has received and send their respective public key\n+\t//\n+\t// Alice derives shared secret with her own private key with shared Bob's public key\n+\talice_shared_sec := curve25519.derive_shared_secret(mut alice_pvkey, bob_pbkey)!\n+\n+\t// Bob derives shared secret with his own private key with Alice's public key\n+\tbob_shared_sec := curve25519.derive_shared_secret(mut bob_pvkey, alice_pbkey)!\n+\n+\t// two's shared secret should identical",
        "comment_created_at": "2025-06-18T22:43:08+00:00",
        "comment_author": "blackshirt",
        "comment_body": "Without further processing, shared secret created with 'curve25519\" was 32 bytes length. I would update it to include printed output ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2114111450",
    "pr_number": 24604,
    "pr_file": "doc/docs.md",
    "created_at": "2025-05-29T14:37:20+00:00",
    "commented_code": "&&= ||=\n ```\n \n+Note: in V, `assert -10 % 7 == -3` passes. The result is negative 3, and is NOT positive 4.",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "2114111450",
        "repo_full_name": "vlang/v",
        "pr_number": 24604,
        "pr_file": "doc/docs.md",
        "discussion_id": "2114111450",
        "commented_code": "@@ -8293,6 +8293,8 @@ Assignment Operators\n &&= ||=\n ```\n \n+Note: in V, `assert -10 % 7 == -3` passes. The result is negative 3, and is NOT positive 4.",
        "comment_created_at": "2025-05-29T14:37:20+00:00",
        "comment_author": "JalonSolov",
        "comment_body": "```suggestion\r\nNote: in V, `assert -10 % 7 == -3` passes. In programming, the sign of the remainder depends upon the signs of divisor and dividend.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1958533814",
    "pr_number": 23750,
    "pr_file": "doc/docs.md",
    "created_at": "2025-02-17T16:49:38+00:00",
    "commented_code": "### Enums\n \n+An enum is a group of constant integer values, each having its own name,\n+and values that are usually in sequence.",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1958533814",
        "repo_full_name": "vlang/v",
        "pr_number": 23750,
        "pr_file": "doc/docs.md",
        "discussion_id": "1958533814",
        "commented_code": "@@ -3466,11 +3466,14 @@ This is a special case of a [sum type](#sum-types) declaration.\n \n ### Enums\n \n+An enum is a group of constant integer values, each having its own name,\n+and values that are usually in sequence.",
        "comment_created_at": "2025-02-17T16:49:38+00:00",
        "comment_author": "JalonSolov",
        "comment_body": "```suggestion\r\nwhose values start at 0 and increase by 1 for each name listed.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1918319593",
    "pr_number": 23463,
    "pr_file": "vlib/crypto/ecdsa/README.md",
    "created_at": "2025-01-16T11:53:17+00:00",
    "commented_code": "`ecdsa` module for V language. Its a wrapper on top of openssl ecdsa functionality.\n Its currently (expanded) to support the following curves:\n+\n - NIST P-256 curve, commonly referred as prime256v1 or secp256r1\n - NIST P-384 curve, commonly referred as secp384r1 \n - NIST P-521 curve, commonly referred as secp521r1\n-- A famous Bitcoin curve, commonly referred as secp256k1\n\\ No newline at end of file\n+- A famous Bitcoin curve, commonly referred as secp256k1\n+\n+# Example\n+```codeblock\n+import crypto.ecdsa\n+\n+fn main() {\n+\t// create default NIST P-256 secp256r1 curve key pair\n+    // If you wish generate another curve, use following manner (or similar): `pbkey, pvkey := ecdsa.generate_key(nid: .secp521r1)!`",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1918319593",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/README.md",
        "discussion_id": "1918319593",
        "commented_code": "@@ -2,7 +2,27 @@\n \n `ecdsa` module for V language. Its a wrapper on top of openssl ecdsa functionality.\n Its currently (expanded) to support the following curves:\n+\n - NIST P-256 curve, commonly referred as prime256v1 or secp256r1\n - NIST P-384 curve, commonly referred as secp384r1 \n - NIST P-521 curve, commonly referred as secp521r1\n-- A famous Bitcoin curve, commonly referred as secp256k1\n\\ No newline at end of file\n+- A famous Bitcoin curve, commonly referred as secp256k1\n+\n+# Example\n+```codeblock\n+import crypto.ecdsa\n+\n+fn main() {\n+\t// create default NIST P-256 secp256r1 curve key pair\n+    // If you wish generate another curve, use following manner (or similar): `pbkey, pvkey := ecdsa.generate_key(nid: .secp521r1)!`",
        "comment_created_at": "2025-01-16T11:53:17+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\n    // If you wish to generate another curve, use: `pbkey, pvkey := ecdsa.generate_key(nid: .secp521r1)!`\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1918650584",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/README.md",
        "discussion_id": "1918319593",
        "commented_code": "@@ -2,7 +2,27 @@\n \n `ecdsa` module for V language. Its a wrapper on top of openssl ecdsa functionality.\n Its currently (expanded) to support the following curves:\n+\n - NIST P-256 curve, commonly referred as prime256v1 or secp256r1\n - NIST P-384 curve, commonly referred as secp384r1 \n - NIST P-521 curve, commonly referred as secp521r1\n-- A famous Bitcoin curve, commonly referred as secp256k1\n\\ No newline at end of file\n+- A famous Bitcoin curve, commonly referred as secp256k1\n+\n+# Example\n+```codeblock\n+import crypto.ecdsa\n+\n+fn main() {\n+\t// create default NIST P-256 secp256r1 curve key pair\n+    // If you wish generate another curve, use following manner (or similar): `pbkey, pvkey := ecdsa.generate_key(nid: .secp521r1)!`",
        "comment_created_at": "2025-01-16T14:23:03+00:00",
        "comment_author": "blackshirt",
        "comment_body": "Its done",
        "pr_file_module": null
      }
    ]
  }
]