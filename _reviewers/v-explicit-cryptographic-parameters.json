[
  {
    "discussion_id": "1918322840",
    "pr_number": 23463,
    "pr_file": "vlib/crypto/ecdsa/README.md",
    "created_at": "2025-01-16T11:55:55+00:00",
    "commented_code": "`ecdsa` module for V language. Its a wrapper on top of openssl ecdsa functionality.\n Its currently (expanded) to support the following curves:\n+\n - NIST P-256 curve, commonly referred as prime256v1 or secp256r1\n - NIST P-384 curve, commonly referred as secp384r1 \n - NIST P-521 curve, commonly referred as secp521r1\n-- A famous Bitcoin curve, commonly referred as secp256k1\n\\ No newline at end of file\n+- A famous Bitcoin curve, commonly referred as secp256k1\n+\n+# Example\n+```codeblock\n+import crypto.ecdsa\n+\n+fn main() {\n+\t// create default NIST P-256 secp256r1 curve key pair\n+    // If you wish generate another curve, use following manner (or similar): `pbkey, pvkey := ecdsa.generate_key(nid: .secp521r1)!`\n+\tpbkey, pvkey := ecdsa.generate_key()!\n+\n+\tmessage_tobe_signed := 'Hello ecdsa'.bytes()\n+\t// create signature with recommended hash\n+\tsignature := pvkey.sign(message_tobe_signed, hash_config: .with_recommended_hash)!",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1918322840",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/README.md",
        "discussion_id": "1918322840",
        "commented_code": "@@ -2,7 +2,27 @@\n \n `ecdsa` module for V language. Its a wrapper on top of openssl ecdsa functionality.\n Its currently (expanded) to support the following curves:\n+\n - NIST P-256 curve, commonly referred as prime256v1 or secp256r1\n - NIST P-384 curve, commonly referred as secp384r1 \n - NIST P-521 curve, commonly referred as secp521r1\n-- A famous Bitcoin curve, commonly referred as secp256k1\n\\ No newline at end of file\n+- A famous Bitcoin curve, commonly referred as secp256k1\n+\n+# Example\n+```codeblock\n+import crypto.ecdsa\n+\n+fn main() {\n+\t// create default NIST P-256 secp256r1 curve key pair\n+    // If you wish generate another curve, use following manner (or similar): `pbkey, pvkey := ecdsa.generate_key(nid: .secp521r1)!`\n+\tpbkey, pvkey := ecdsa.generate_key()!\n+\n+\tmessage_tobe_signed := 'Hello ecdsa'.bytes()\n+\t// create signature with recommended hash\n+\tsignature := pvkey.sign(message_tobe_signed, hash_config: .with_recommended_hash)!",
        "comment_created_at": "2025-01-16T11:55:55+00:00",
        "comment_author": "spytheman",
        "comment_body": "afaik, `hash_config` already has a default of `.with_recommended_hash`.\r\nWhy not just skip it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1918323064",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/README.md",
        "discussion_id": "1918322840",
        "commented_code": "@@ -2,7 +2,27 @@\n \n `ecdsa` module for V language. Its a wrapper on top of openssl ecdsa functionality.\n Its currently (expanded) to support the following curves:\n+\n - NIST P-256 curve, commonly referred as prime256v1 or secp256r1\n - NIST P-384 curve, commonly referred as secp384r1 \n - NIST P-521 curve, commonly referred as secp521r1\n-- A famous Bitcoin curve, commonly referred as secp256k1\n\\ No newline at end of file\n+- A famous Bitcoin curve, commonly referred as secp256k1\n+\n+# Example\n+```codeblock\n+import crypto.ecdsa\n+\n+fn main() {\n+\t// create default NIST P-256 secp256r1 curve key pair\n+    // If you wish generate another curve, use following manner (or similar): `pbkey, pvkey := ecdsa.generate_key(nid: .secp521r1)!`\n+\tpbkey, pvkey := ecdsa.generate_key()!\n+\n+\tmessage_tobe_signed := 'Hello ecdsa'.bytes()\n+\t// create signature with recommended hash\n+\tsignature := pvkey.sign(message_tobe_signed, hash_config: .with_recommended_hash)!",
        "comment_created_at": "2025-01-16T11:56:08+00:00",
        "comment_author": "spytheman",
        "comment_body": "i.e.:\r\n```suggestion\r\n\tsignature := pvkey.sign(message_tobe_signed)!\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1918434051",
        "repo_full_name": "vlang/v",
        "pr_number": 23463,
        "pr_file": "vlib/crypto/ecdsa/README.md",
        "discussion_id": "1918322840",
        "commented_code": "@@ -2,7 +2,27 @@\n \n `ecdsa` module for V language. Its a wrapper on top of openssl ecdsa functionality.\n Its currently (expanded) to support the following curves:\n+\n - NIST P-256 curve, commonly referred as prime256v1 or secp256r1\n - NIST P-384 curve, commonly referred as secp384r1 \n - NIST P-521 curve, commonly referred as secp521r1\n-- A famous Bitcoin curve, commonly referred as secp256k1\n\\ No newline at end of file\n+- A famous Bitcoin curve, commonly referred as secp256k1\n+\n+# Example\n+```codeblock\n+import crypto.ecdsa\n+\n+fn main() {\n+\t// create default NIST P-256 secp256r1 curve key pair\n+    // If you wish generate another curve, use following manner (or similar): `pbkey, pvkey := ecdsa.generate_key(nid: .secp521r1)!`\n+\tpbkey, pvkey := ecdsa.generate_key()!\n+\n+\tmessage_tobe_signed := 'Hello ecdsa'.bytes()\n+\t// create signature with recommended hash\n+\tsignature := pvkey.sign(message_tobe_signed, hash_config: .with_recommended_hash)!",
        "comment_created_at": "2025-01-16T12:42:54+00:00",
        "comment_author": "blackshirt",
        "comment_body": "Its changed to `.with_no_hash` to align with how the current `.sign()` work, its not changes behavior of signing. Its maybe changed to `.with_recommended_hash` in the future, or just changes it now ?",
        "pr_file_module": null
      }
    ]
  }
]