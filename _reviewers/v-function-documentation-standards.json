[
  {
    "discussion_id": "1468881519",
    "pr_number": 20650,
    "pr_file": "vlib/db/sqlite/sqlite.c.v",
    "created_at": "2024-01-28T15:08:52+00:00",
    "commented_code": "return rows\n }\n \n+@[manualfree]\n+pub fn (db &DB) get_queryset(query string) ![]QuerySet {",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1468881519",
        "repo_full_name": "vlang/v",
        "pr_number": 20650,
        "pr_file": "vlib/db/sqlite/sqlite.c.v",
        "discussion_id": "1468881519",
        "commented_code": "@@ -248,6 +255,108 @@ pub fn (db &DB) exec(query string) ![]Row {\n \treturn rows\n }\n \n+@[manualfree]\n+pub fn (db &DB) get_queryset(query string) ![]QuerySet {",
        "comment_created_at": "2024-01-28T15:08:52+00:00",
        "comment_author": "spytheman",
        "comment_body": "The new public function should be documented with a comment, that `v doc` can understand.\r\nUse something like this above the header:\r\n```v\r\n// get_queryset returns ...\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1468881624",
        "repo_full_name": "vlang/v",
        "pr_number": 20650,
        "pr_file": "vlib/db/sqlite/sqlite.c.v",
        "discussion_id": "1468881519",
        "commented_code": "@@ -248,6 +255,108 @@ pub fn (db &DB) exec(query string) ![]Row {\n \treturn rows\n }\n \n+@[manualfree]\n+pub fn (db &DB) get_queryset(query string) ![]QuerySet {",
        "comment_created_at": "2024-01-28T15:09:34+00:00",
        "comment_author": "spytheman",
        "comment_body": "It is only important for `v doc`, that it starts with the name of the method, the explanation after that can be whatever makes sense.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1980504077",
    "pr_number": 23865,
    "pr_file": "vlib/datatypes/fsm/fsm.v",
    "created_at": "2025-03-05T01:07:15+00:00",
    "commented_code": "current_state string\n }\n \n+// StateMachine constructor. Returns a new StateMachine instance.",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1980504077",
        "repo_full_name": "vlang/v",
        "pr_number": 23865,
        "pr_file": "vlib/datatypes/fsm/fsm.v",
        "discussion_id": "1980504077",
        "commented_code": "@@ -31,10 +31,12 @@ mut:\n \tcurrent_state string\n }\n \n+// StateMachine constructor. Returns a new StateMachine instance.",
        "comment_created_at": "2025-03-05T01:07:15+00:00",
        "comment_author": "JalonSolov",
        "comment_body": "```suggestion\r\n// StateMachine static method returns a new StateMachine instance.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1980596906",
    "pr_number": 23867,
    "pr_file": "vlib/time/time.v",
    "created_at": "2025-03-05T02:47:20+00:00",
    "commented_code": "no_delimiter\n }\n \n+// new returns a time struct with the calculated Unix time.",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1980596906",
        "repo_full_name": "vlang/v",
        "pr_number": 23867,
        "pr_file": "vlib/time/time.v",
        "discussion_id": "1980596906",
        "commented_code": "@@ -84,6 +84,7 @@ pub enum FormatDelimiter {\n \tno_delimiter\n }\n \n+// new returns a time struct with the calculated Unix time.",
        "comment_created_at": "2025-03-05T02:47:20+00:00",
        "comment_author": "JalonSolov",
        "comment_body": "```suggestion\r\n// Time.new static method returns a time struct with the calculated Unix time.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1957965334",
    "pr_number": 23747,
    "pr_file": "vlib/v/gen/native/amd64.v",
    "created_at": "2025-02-17T10:13:54+00:00",
    "commented_code": "c.g.println('; print }')\n }\n \n+// write a string of size n stored in r to fd",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1957965334",
        "repo_full_name": "vlang/v",
        "pr_number": 23747,
        "pr_file": "vlib/v/gen/native/amd64.v",
        "discussion_id": "1957965334",
        "commented_code": "@@ -1323,6 +1323,7 @@ fn (mut c Amd64) gen_print(s string, fd i32) {\n \tc.g.println('; print }')\n }\n \n+// write a string of size n stored in r to fd",
        "comment_created_at": "2025-02-17T10:13:54+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\n// gen_print_reg writes a string of size n stored in r to fd\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1868694389",
    "pr_number": 23058,
    "pr_file": "vlib/crypto/sha3/sha3.v",
    "created_at": "2024-12-04T04:17:05+00:00",
    "commented_code": "struct Digest {\n \trate       int // the number of bytes absorbed per permutation\n-\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x1f for extended output\n+\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x01 for keccak, 0x1f for extended output\n \toutput_len int // the number of bytes to output\n mut:\n \tinput_buffer []u8  // temporary holding buffer for input bytes\n \ts            State // the state of a kaccak-p[1600, 24] sponge\n }\n \n+// the low order pad bits for a hash function\n+pub enum Padding as u8 {\n+\tkeccak = 0x01\n+\tsha3   = 0x06\n+\txof    = 0x1f\n+}\n+\n+@[params]\n+pub struct PaddingConfig {\n+pub:\n+\tpadding Padding = .sha3\n+}\n+\n // new_digest creates an initialized digest structure based on\n // the hash size and whether or not you specify a MAC key.",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1868694389",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868694389",
        "commented_code": "@@ -108,13 +112,26 @@ fn (err XOFSizeError) msg() string {\n \n struct Digest {\n \trate       int // the number of bytes absorbed per permutation\n-\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x1f for extended output\n+\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x01 for keccak, 0x1f for extended output\n \toutput_len int // the number of bytes to output\n mut:\n \tinput_buffer []u8  // temporary holding buffer for input bytes\n \ts            State // the state of a kaccak-p[1600, 24] sponge\n }\n \n+// the low order pad bits for a hash function\n+pub enum Padding as u8 {\n+\tkeccak = 0x01\n+\tsha3   = 0x06\n+\txof    = 0x1f\n+}\n+\n+@[params]\n+pub struct PaddingConfig {\n+pub:\n+\tpadding Padding = .sha3\n+}\n+\n // new_digest creates an initialized digest structure based on\n // the hash size and whether or not you specify a MAC key.",
        "comment_created_at": "2024-12-04T04:17:05+00:00",
        "comment_author": "blackshirt",
        "comment_body": "Maybe you should add the function docs to elaborate the current behaviour of the `new_digest`, so the user know the created `Digest` was expected digest.\r\n@spytheman what do you think ? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1868735418",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868694389",
        "commented_code": "@@ -108,13 +112,26 @@ fn (err XOFSizeError) msg() string {\n \n struct Digest {\n \trate       int // the number of bytes absorbed per permutation\n-\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x1f for extended output\n+\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x01 for keccak, 0x1f for extended output\n \toutput_len int // the number of bytes to output\n mut:\n \tinput_buffer []u8  // temporary holding buffer for input bytes\n \ts            State // the state of a kaccak-p[1600, 24] sponge\n }\n \n+// the low order pad bits for a hash function\n+pub enum Padding as u8 {\n+\tkeccak = 0x01\n+\tsha3   = 0x06\n+\txof    = 0x1f\n+}\n+\n+@[params]\n+pub struct PaddingConfig {\n+pub:\n+\tpadding Padding = .sha3\n+}\n+\n // new_digest creates an initialized digest structure based on\n // the hash size and whether or not you specify a MAC key.",
        "comment_created_at": "2024-12-04T05:22:32+00:00",
        "comment_author": "spytheman",
        "comment_body": "I agree.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1868703861",
    "pr_number": 23058,
    "pr_file": "vlib/crypto/sha3/sha3.v",
    "created_at": "2024-12-04T04:30:37+00:00",
    "commented_code": "struct Digest {\n \trate       int // the number of bytes absorbed per permutation\n-\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x1f for extended output\n+\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x01 for keccak, 0x1f for extended output\n \toutput_len int // the number of bytes to output\n mut:\n \tinput_buffer []u8  // temporary holding buffer for input bytes\n \ts            State // the state of a kaccak-p[1600, 24] sponge\n }\n \n+// the low order pad bits for a hash function\n+pub enum Padding as u8 {\n+\tkeccak = 0x01\n+\tsha3   = 0x06\n+\txof    = 0x1f\n+}\n+\n+@[params]\n+pub struct PaddingConfig {\n+pub:\n+\tpadding Padding = .sha3\n+}\n+\n // new_digest creates an initialized digest structure based on\n // the hash size and whether or not you specify a MAC key.",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1868703861",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868703861",
        "commented_code": "@@ -108,13 +112,26 @@ fn (err XOFSizeError) msg() string {\n \n struct Digest {\n \trate       int // the number of bytes absorbed per permutation\n-\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x1f for extended output\n+\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x01 for keccak, 0x1f for extended output\n \toutput_len int // the number of bytes to output\n mut:\n \tinput_buffer []u8  // temporary holding buffer for input bytes\n \ts            State // the state of a kaccak-p[1600, 24] sponge\n }\n \n+// the low order pad bits for a hash function\n+pub enum Padding as u8 {\n+\tkeccak = 0x01\n+\tsha3   = 0x06\n+\txof    = 0x1f\n+}\n+\n+@[params]\n+pub struct PaddingConfig {\n+pub:\n+\tpadding Padding = .sha3\n+}\n+\n // new_digest creates an initialized digest structure based on\n // the hash size and whether or not you specify a MAC key.",
        "comment_created_at": "2024-12-04T04:30:37+00:00",
        "comment_author": "blackshirt",
        "comment_body": "The term `whether or not you specify a MAC key.` is bits missleading for me, what is `MAC key` refers to ? i dont think `new_digest` accepts some of  `mac key`  bytes or string ",
        "pr_file_module": null
      },
      {
        "comment_id": "1868731485",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868703861",
        "commented_code": "@@ -108,13 +112,26 @@ fn (err XOFSizeError) msg() string {\n \n struct Digest {\n \trate       int // the number of bytes absorbed per permutation\n-\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x1f for extended output\n+\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x01 for keccak, 0x1f for extended output\n \toutput_len int // the number of bytes to output\n mut:\n \tinput_buffer []u8  // temporary holding buffer for input bytes\n \ts            State // the state of a kaccak-p[1600, 24] sponge\n }\n \n+// the low order pad bits for a hash function\n+pub enum Padding as u8 {\n+\tkeccak = 0x01\n+\tsha3   = 0x06\n+\txof    = 0x1f\n+}\n+\n+@[params]\n+pub struct PaddingConfig {\n+pub:\n+\tpadding Padding = .sha3\n+}\n+\n // new_digest creates an initialized digest structure based on\n // the hash size and whether or not you specify a MAC key.",
        "comment_created_at": "2024-12-04T05:16:36+00:00",
        "comment_author": "syobocat",
        "comment_body": "That is an existing part of the code, so I don't know either.\r\nDo you think what kind of comments should be there? Is it enough to just delete `and whether or not you specify a MAC key`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1868745882",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868703861",
        "commented_code": "@@ -108,13 +112,26 @@ fn (err XOFSizeError) msg() string {\n \n struct Digest {\n \trate       int // the number of bytes absorbed per permutation\n-\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x1f for extended output\n+\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x01 for keccak, 0x1f for extended output\n \toutput_len int // the number of bytes to output\n mut:\n \tinput_buffer []u8  // temporary holding buffer for input bytes\n \ts            State // the state of a kaccak-p[1600, 24] sponge\n }\n \n+// the low order pad bits for a hash function\n+pub enum Padding as u8 {\n+\tkeccak = 0x01\n+\tsha3   = 0x06\n+\txof    = 0x1f\n+}\n+\n+@[params]\n+pub struct PaddingConfig {\n+pub:\n+\tpadding Padding = .sha3\n+}\n+\n // new_digest creates an initialized digest structure based on\n // the hash size and whether or not you specify a MAC key.",
        "comment_created_at": "2024-12-04T05:35:46+00:00",
        "comment_author": "spytheman",
        "comment_body": "@kimshrier what do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1868757076",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868703861",
        "commented_code": "@@ -108,13 +112,26 @@ fn (err XOFSizeError) msg() string {\n \n struct Digest {\n \trate       int // the number of bytes absorbed per permutation\n-\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x1f for extended output\n+\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x01 for keccak, 0x1f for extended output\n \toutput_len int // the number of bytes to output\n mut:\n \tinput_buffer []u8  // temporary holding buffer for input bytes\n \ts            State // the state of a kaccak-p[1600, 24] sponge\n }\n \n+// the low order pad bits for a hash function\n+pub enum Padding as u8 {\n+\tkeccak = 0x01\n+\tsha3   = 0x06\n+\txof    = 0x1f\n+}\n+\n+@[params]\n+pub struct PaddingConfig {\n+pub:\n+\tpadding Padding = .sha3\n+}\n+\n // new_digest creates an initialized digest structure based on\n // the hash size and whether or not you specify a MAC key.",
        "comment_created_at": "2024-12-04T05:48:33+00:00",
        "comment_author": "blackshirt",
        "comment_body": "I think @kimshrier has depth of knowledge what thats mean ...in my thougth, its safe to just delete it and add appropriate docs.\r\n\r\nThis single of `sha3` module has already contains support for multiples of variant, like the support for standard `sha3`, `shake128`, `shake256`, extended vesion in `xof` variant and now `keccak` variant. I think its should be documented in the `README` or internal fn docs, to make its clear for user \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1868771247",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868703861",
        "commented_code": "@@ -108,13 +112,26 @@ fn (err XOFSizeError) msg() string {\n \n struct Digest {\n \trate       int // the number of bytes absorbed per permutation\n-\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x1f for extended output\n+\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x01 for keccak, 0x1f for extended output\n \toutput_len int // the number of bytes to output\n mut:\n \tinput_buffer []u8  // temporary holding buffer for input bytes\n \ts            State // the state of a kaccak-p[1600, 24] sponge\n }\n \n+// the low order pad bits for a hash function\n+pub enum Padding as u8 {\n+\tkeccak = 0x01\n+\tsha3   = 0x06\n+\txof    = 0x1f\n+}\n+\n+@[params]\n+pub struct PaddingConfig {\n+pub:\n+\tpadding Padding = .sha3\n+}\n+\n // new_digest creates an initialized digest structure based on\n // the hash size and whether or not you specify a MAC key.",
        "comment_created_at": "2024-12-04T06:07:25+00:00",
        "comment_author": "kimshrier",
        "comment_body": "Sorry to be AWOL for a bit.  I'm really hammered at my day job at the moment.\r\n\r\nI forget some of the details of the sha3 code and will need a little time to get my head back in to it.  It will probably be a few days before I can contribute anything.",
        "pr_file_module": null
      },
      {
        "comment_id": "1868820270",
        "repo_full_name": "vlang/v",
        "pr_number": 23058,
        "pr_file": "vlib/crypto/sha3/sha3.v",
        "discussion_id": "1868703861",
        "commented_code": "@@ -108,13 +112,26 @@ fn (err XOFSizeError) msg() string {\n \n struct Digest {\n \trate       int // the number of bytes absorbed per permutation\n-\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x1f for extended output\n+\tsuffix     u8  // the domain suffix, 0x06 for hash, 0x01 for keccak, 0x1f for extended output\n \toutput_len int // the number of bytes to output\n mut:\n \tinput_buffer []u8  // temporary holding buffer for input bytes\n \ts            State // the state of a kaccak-p[1600, 24] sponge\n }\n \n+// the low order pad bits for a hash function\n+pub enum Padding as u8 {\n+\tkeccak = 0x01\n+\tsha3   = 0x06\n+\txof    = 0x1f\n+}\n+\n+@[params]\n+pub struct PaddingConfig {\n+pub:\n+\tpadding Padding = .sha3\n+}\n+\n // new_digest creates an initialized digest structure based on\n // the hash size and whether or not you specify a MAC key.",
        "comment_created_at": "2024-12-04T07:03:08+00:00",
        "comment_author": "spytheman",
        "comment_body": "That is understandable, please excuse me for adding to your cognitive load.\r\n\r\nI think we can delete that comment for now, as @blackshirt suggested, and revise it later if needed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1804336946",
    "pr_number": 22545,
    "pr_file": "vlib/x/json2/decoder2/decode.v",
    "created_at": "2024-10-17T08:27:52+00:00",
    "commented_code": "import time\n \n-// Node represents a node in a JSON decoder tree.\n+// Node represents a node in a JSON decoder tree. Used to decode object in JSON.\n struct Node {\n \tkey_pos  int     // The position of the key in the JSON string.\n \tkey_len  int     // The length of the key in the JSON string.\n \tchildren ?[]Node // The children nodes of the current node.\n }\n \n+// ValueInfo represents the position and length of a value, like string, number, array, object key and object value in a JSON string.\n+struct ValueInfo {\n+\tposition   int       // The position of the value in the JSON string.\n+\tvalue_kind ValueKind // The kind of the value.\n+mut:\n+\tlength int // The length of the value in the JSON string.\n+}\n+\n // Decoder represents a JSON decoder.\n struct Decoder {\n \tjson string // json is the JSON data to be decoded.\n mut:\n-\tidx int // idx is the current index of the decoder.\n+\tvalues_info    []ValueInfo\n+\tidx            int // idx is the current index of the decoder.",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1804336946",
        "repo_full_name": "vlang/v",
        "pr_number": 22545,
        "pr_file": "vlib/x/json2/decoder2/decode.v",
        "discussion_id": "1804336946",
        "commented_code": "@@ -2,18 +2,29 @@ module decoder2\n \n import time\n \n-// Node represents a node in a JSON decoder tree.\n+// Node represents a node in a JSON decoder tree. Used to decode object in JSON.\n struct Node {\n \tkey_pos  int     // The position of the key in the JSON string.\n \tkey_len  int     // The length of the key in the JSON string.\n \tchildren ?[]Node // The children nodes of the current node.\n }\n \n+// ValueInfo represents the position and length of a value, like string, number, array, object key and object value in a JSON string.\n+struct ValueInfo {\n+\tposition   int       // The position of the value in the JSON string.\n+\tvalue_kind ValueKind // The kind of the value.\n+mut:\n+\tlength int // The length of the value in the JSON string.\n+}\n+\n // Decoder represents a JSON decoder.\n struct Decoder {\n \tjson string // json is the JSON data to be decoded.\n mut:\n-\tidx int // idx is the current index of the decoder.\n+\tvalues_info    []ValueInfo\n+\tidx            int // idx is the current index of the decoder.",
        "comment_created_at": "2024-10-17T08:27:52+00:00",
        "comment_author": "spytheman",
        "comment_body": "What is index in this context, a line, a byte offset from the start, or a utf character offset from the start?\r\n\r\nImho, rewrite the comment to be more informative, instead of just expanding on the name of the field.",
        "pr_file_module": null
      },
      {
        "comment_id": "1804338220",
        "repo_full_name": "vlang/v",
        "pr_number": 22545,
        "pr_file": "vlib/x/json2/decoder2/decode.v",
        "discussion_id": "1804336946",
        "commented_code": "@@ -2,18 +2,29 @@ module decoder2\n \n import time\n \n-// Node represents a node in a JSON decoder tree.\n+// Node represents a node in a JSON decoder tree. Used to decode object in JSON.\n struct Node {\n \tkey_pos  int     // The position of the key in the JSON string.\n \tkey_len  int     // The length of the key in the JSON string.\n \tchildren ?[]Node // The children nodes of the current node.\n }\n \n+// ValueInfo represents the position and length of a value, like string, number, array, object key and object value in a JSON string.\n+struct ValueInfo {\n+\tposition   int       // The position of the value in the JSON string.\n+\tvalue_kind ValueKind // The kind of the value.\n+mut:\n+\tlength int // The length of the value in the JSON string.\n+}\n+\n // Decoder represents a JSON decoder.\n struct Decoder {\n \tjson string // json is the JSON data to be decoded.\n mut:\n-\tidx int // idx is the current index of the decoder.\n+\tvalues_info    []ValueInfo\n+\tidx            int // idx is the current index of the decoder.",
        "comment_created_at": "2024-10-17T08:28:40+00:00",
        "comment_author": "spytheman",
        "comment_body": "It is better to not have any comments, than ones that just repeat the information from the names.",
        "pr_file_module": null
      },
      {
        "comment_id": "1804346937",
        "repo_full_name": "vlang/v",
        "pr_number": 22545,
        "pr_file": "vlib/x/json2/decoder2/decode.v",
        "discussion_id": "1804336946",
        "commented_code": "@@ -2,18 +2,29 @@ module decoder2\n \n import time\n \n-// Node represents a node in a JSON decoder tree.\n+// Node represents a node in a JSON decoder tree. Used to decode object in JSON.\n struct Node {\n \tkey_pos  int     // The position of the key in the JSON string.\n \tkey_len  int     // The length of the key in the JSON string.\n \tchildren ?[]Node // The children nodes of the current node.\n }\n \n+// ValueInfo represents the position and length of a value, like string, number, array, object key and object value in a JSON string.\n+struct ValueInfo {\n+\tposition   int       // The position of the value in the JSON string.\n+\tvalue_kind ValueKind // The kind of the value.\n+mut:\n+\tlength int // The length of the value in the JSON string.\n+}\n+\n // Decoder represents a JSON decoder.\n struct Decoder {\n \tjson string // json is the JSON data to be decoded.\n mut:\n-\tidx int // idx is the current index of the decoder.\n+\tvalues_info    []ValueInfo\n+\tidx            int // idx is the current index of the decoder.",
        "comment_created_at": "2024-10-17T08:34:31+00:00",
        "comment_author": "enghitalo",
        "comment_body": "I will change it to `// idx is byte offset from the start in json`",
        "pr_file_module": null
      }
    ]
  }
]