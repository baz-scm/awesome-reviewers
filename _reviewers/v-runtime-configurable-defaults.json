[
  {
    "discussion_id": "1922549989",
    "pr_number": 23534,
    "pr_file": "cmd/tools/vvet/analyze.v",
    "created_at": "2025-01-20T15:13:35+00:00",
    "commented_code": "import arrays\n \n // cutoffs\n-const indexexpr_cutoff = 10\n-const infixexpr_cutoff = 10\n-const selectorexpr_cutoff = 10\n-const callexpr_cutoff = 10\n-const stringinterliteral_cutoff = 10\n-const stringliteral_cutoff = 10\n-const ascast_cutoff = 10\n-const stringconcat_cutoff = 10\n+const indexexpr_cutoff = $d('VET_INDEXEXPR_CUTOFF', 10)\n+const infixexpr_cutoff = $d('VET_INFIXEXPR_CUTOFF', 10)\n+const selectorexpr_cutoff = $d('VET_SELECTOREXPR_CUTOFF', 10)\n+const callexpr_cutoff = $d('VET_CALLEXPR_CUTOFF', 10)\n+const stringinterliteral_cutoff = $d('STRINGINTERLITERAL_CUTOFF', 10)\n+const stringliteral_cutoff = $d('STRINGLITERAL_CUTOFF', 10)\n+const ascast_cutoff = $d('ASCAST_CUTOFF', 10)\n+const stringconcat_cutoff = $d('STRINGCONCAT_CUTOFF', 10)\n+\n+// possibly inline fn cutoff\n+const fns_call_cutoff = $d('VET_FNS_CALL_CUTOFF', 10) // at least N calls\n+const short_fns_cutoff = $d('VET_SHORT_FNS_CUTOFF', 3) // lines",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1922549989",
        "repo_full_name": "vlang/v",
        "pr_number": 23534,
        "pr_file": "cmd/tools/vvet/analyze.v",
        "discussion_id": "1922549989",
        "commented_code": "@@ -7,26 +7,32 @@ import v.token\n import arrays\n \n // cutoffs\n-const indexexpr_cutoff = 10\n-const infixexpr_cutoff = 10\n-const selectorexpr_cutoff = 10\n-const callexpr_cutoff = 10\n-const stringinterliteral_cutoff = 10\n-const stringliteral_cutoff = 10\n-const ascast_cutoff = 10\n-const stringconcat_cutoff = 10\n+const indexexpr_cutoff = $d('VET_INDEXEXPR_CUTOFF', 10)\n+const infixexpr_cutoff = $d('VET_INFIXEXPR_CUTOFF', 10)\n+const selectorexpr_cutoff = $d('VET_SELECTOREXPR_CUTOFF', 10)\n+const callexpr_cutoff = $d('VET_CALLEXPR_CUTOFF', 10)\n+const stringinterliteral_cutoff = $d('STRINGINTERLITERAL_CUTOFF', 10)\n+const stringliteral_cutoff = $d('STRINGLITERAL_CUTOFF', 10)\n+const ascast_cutoff = $d('ASCAST_CUTOFF', 10)\n+const stringconcat_cutoff = $d('STRINGCONCAT_CUTOFF', 10)\n+\n+// possibly inline fn cutoff\n+const fns_call_cutoff = $d('VET_FNS_CALL_CUTOFF', 10) // at least N calls\n+const short_fns_cutoff = $d('VET_SHORT_FNS_CUTOFF', 3) // lines",
        "comment_created_at": "2025-01-20T15:13:35+00:00",
        "comment_author": "spytheman",
        "comment_body": "Use instead:\r\n`const indexexpr_cutoff := os.getenv_opt('VET_INDEXEXPR_CUTOFF') or { '10' }.int()`\r\n\r\nThe reason that os.getenv is better, is that with $d() those will be fixed once `v vet` is compiled, while with getenv_opt, they can be changed more conveniently at startup/runtime in most shells, with just: `VET_INDEXEXPR_CUTOFF=99 v vet .` for example.",
        "pr_file_module": null
      },
      {
        "comment_id": "1922898311",
        "repo_full_name": "vlang/v",
        "pr_number": 23534,
        "pr_file": "cmd/tools/vvet/analyze.v",
        "discussion_id": "1922549989",
        "commented_code": "@@ -7,26 +7,32 @@ import v.token\n import arrays\n \n // cutoffs\n-const indexexpr_cutoff = 10\n-const infixexpr_cutoff = 10\n-const selectorexpr_cutoff = 10\n-const callexpr_cutoff = 10\n-const stringinterliteral_cutoff = 10\n-const stringliteral_cutoff = 10\n-const ascast_cutoff = 10\n-const stringconcat_cutoff = 10\n+const indexexpr_cutoff = $d('VET_INDEXEXPR_CUTOFF', 10)\n+const infixexpr_cutoff = $d('VET_INFIXEXPR_CUTOFF', 10)\n+const selectorexpr_cutoff = $d('VET_SELECTOREXPR_CUTOFF', 10)\n+const callexpr_cutoff = $d('VET_CALLEXPR_CUTOFF', 10)\n+const stringinterliteral_cutoff = $d('STRINGINTERLITERAL_CUTOFF', 10)\n+const stringliteral_cutoff = $d('STRINGLITERAL_CUTOFF', 10)\n+const ascast_cutoff = $d('ASCAST_CUTOFF', 10)\n+const stringconcat_cutoff = $d('STRINGCONCAT_CUTOFF', 10)\n+\n+// possibly inline fn cutoff\n+const fns_call_cutoff = $d('VET_FNS_CALL_CUTOFF', 10) // at least N calls\n+const short_fns_cutoff = $d('VET_SHORT_FNS_CUTOFF', 3) // lines",
        "comment_created_at": "2025-01-20T22:59:22+00:00",
        "comment_author": "felipensp",
        "comment_body": "Got it, thanks for the tips.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1908269189",
    "pr_number": 23405,
    "pr_file": "cmd/tools/vvet/analyze.v",
    "created_at": "2025-01-09T07:16:25+00:00",
    "commented_code": "+// Copyright (c) 2025 Felipe Pena. All rights reserved.\n+// Use of this source code is governed by an MIT license that can be found in the LICENSE file.\n+module main\n+\n+import v.ast\n+import v.token\n+import arrays\n+\n+// cutoffs\n+const indexexpr_cutoff = 10\n+const infixexpr_cutoff = 10\n+const selectorexpr_cutoff = 10\n+const callexpr_cutoff = 10\n+const stringinterliteral_cutoff = 10\n+const stringliteral_cutoff = 10\n+const ascast_cutoff = 10\n+const stringconcat_cutoff = 10\n+\n+// minimum size for string literals\n+const stringliteral_min_size = 20\n+\n+// long functions cutoff\n+const long_fns_cutoff = 300",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1908269189",
        "repo_full_name": "vlang/v",
        "pr_number": 23405,
        "pr_file": "cmd/tools/vvet/analyze.v",
        "discussion_id": "1908269189",
        "commented_code": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2025 Felipe Pena. All rights reserved.\n+// Use of this source code is governed by an MIT license that can be found in the LICENSE file.\n+module main\n+\n+import v.ast\n+import v.token\n+import arrays\n+\n+// cutoffs\n+const indexexpr_cutoff = 10\n+const infixexpr_cutoff = 10\n+const selectorexpr_cutoff = 10\n+const callexpr_cutoff = 10\n+const stringinterliteral_cutoff = 10\n+const stringliteral_cutoff = 10\n+const ascast_cutoff = 10\n+const stringconcat_cutoff = 10\n+\n+// minimum size for string literals\n+const stringliteral_min_size = 20\n+\n+// long functions cutoff\n+const long_fns_cutoff = 300",
        "comment_created_at": "2025-01-09T07:16:25+00:00",
        "comment_author": "spytheman",
        "comment_body": "These should be customizable.\r\nAn easy way for that is with something like:\r\n`const indexexpr_cutoff = os.getenv_opt('VVET_INDEXEXPR', '10').int()`\r\nThe negative is that setting env variables on windows in cmd for one off commands is clumsier.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1855437120",
    "pr_number": 22959,
    "pr_file": "vlib/gg/text_rendering.c.v",
    "created_at": "2024-11-24T12:26:13+00:00",
    "commented_code": "scale     f32 = 1.0\n }\n \n+const buff_size = 2048",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1855437120",
        "repo_full_name": "vlang/v",
        "pr_number": 22959,
        "pr_file": "vlib/gg/text_rendering.c.v",
        "discussion_id": "1855437120",
        "commented_code": "@@ -21,10 +21,19 @@ pub mut:\n \tscale     f32 = 1.0\n }\n \n+const buff_size = 2048",
        "comment_created_at": "2024-11-24T12:26:13+00:00",
        "comment_author": "spytheman",
        "comment_body": "```suggestion\r\nconst buff_size = int($d('gg_text_buff_size', 2048))\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1855438058",
    "pr_number": 22959,
    "pr_file": "vlib/gg/text_rendering.c.v",
    "created_at": "2024-11-24T12:31:01+00:00",
    "commented_code": "scale     f32 = 1.0\n }\n \n+const buff_size = int($d('gg_text_buff_size', 2048))",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "1855438058",
        "repo_full_name": "vlang/v",
        "pr_number": 22959,
        "pr_file": "vlib/gg/text_rendering.c.v",
        "discussion_id": "1855438058",
        "commented_code": "@@ -21,10 +21,19 @@ pub mut:\n \tscale     f32 = 1.0\n }\n \n+const buff_size = int($d('gg_text_buff_size', 2048))",
        "comment_created_at": "2024-11-24T12:31:01+00:00",
        "comment_author": "spytheman",
        "comment_body": "I am not sure if 2048 is a good default. Running `examples/gg/minimal.v`, it seems to result in apps that use ~8MB more RAM by default on my machine, compared to the same but with 512 (on master):\r\n```\r\ndelian     14166  3.5  0.2 141112 40524 pts/0    Sl+  14:24   0:00          |       |       \\_ /home/delian/code/v/rrrrrrrrrrrrrr\r\n```\r\nvs\r\n```\r\ndelian     14082  3.6  0.3 166648 47672 pts/0    Sl+  14:23   0:00          |       |       \\_ /home/delian/code/v/rrrrrrrrrrrrrr\r\n```\r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1855438312",
        "repo_full_name": "vlang/v",
        "pr_number": 22959,
        "pr_file": "vlib/gg/text_rendering.c.v",
        "discussion_id": "1855438058",
        "commented_code": "@@ -21,10 +21,19 @@ pub mut:\n \tscale     f32 = 1.0\n }\n \n+const buff_size = int($d('gg_text_buff_size', 2048))",
        "comment_created_at": "2024-11-24T12:32:16+00:00",
        "comment_author": "spytheman",
        "comment_body": "On the other hand, it is certainly better in the sense that apps will not have weird artifacts and disappearing texts in much more cases, and with $d(), now people can tweak it easily, if they need something smaller or bigger.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "456247736",
    "pr_number": 5857,
    "pr_file": "cmd/tools/vfmt.v",
    "created_at": "2020-07-17T06:38:57+00:00",
    "commented_code": "// }\n \ttoolexe := os.executable()\n \tutil.set_vroot_folder(os.dir(os.dir(os.dir(toolexe))))\n-\targs := util.join_env_vflags_and_os_args()\n+\tmut args := util.join_env_vflags_and_os_args()\n+\tmut diff_tool := ''\n+\tstr_opts := args.filter(it.contains('='))\n+\tif str_opts.len > 0 {\n+\t\tfor sopt in str_opts {\n+\t\t\tif sopt.starts_with('-diff') {\n+\t\t\t\targs << '-diff'\n+\t\t\t\tdiff_tool = sopt.after('=')",
    "repo_full_name": "vlang/v",
    "discussion_comments": [
      {
        "comment_id": "456247736",
        "repo_full_name": "vlang/v",
        "pr_number": 5857,
        "pr_file": "cmd/tools/vfmt.v",
        "discussion_id": "456247736",
        "commented_code": "@@ -41,7 +49,17 @@ fn main() {\n \t// }\n \ttoolexe := os.executable()\n \tutil.set_vroot_folder(os.dir(os.dir(os.dir(toolexe))))\n-\targs := util.join_env_vflags_and_os_args()\n+\tmut args := util.join_env_vflags_and_os_args()\n+\tmut diff_tool := ''\n+\tstr_opts := args.filter(it.contains('='))\n+\tif str_opts.len > 0 {\n+\t\tfor sopt in str_opts {\n+\t\t\tif sopt.starts_with('-diff') {\n+\t\t\t\targs << '-diff'\n+\t\t\t\tdiff_tool = sopt.after('=')",
        "comment_created_at": "2020-07-17T06:38:57+00:00",
        "comment_author": "spytheman",
        "comment_body": "There is no need for that CLI parsing complication. You can pass the non default difftool through an environment variable, say `VDIFF_TOOL`, and it would be propagated to all the code that needs it.",
        "pr_file_module": null
      }
    ]
  }
]