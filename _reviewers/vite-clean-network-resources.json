[
  {
    "discussion_id": "1785620201",
    "pr_number": 17891,
    "pr_file": "packages/vite/src/client/client.ts",
    "created_at": "2024-10-03T04:38:47+00:00",
    "commented_code": "hostAndPath: string,\n   ms = 1000,\n ) {\n-  const pingHostProtocol = socketProtocol === 'wss' ? 'https' : 'http'\n-\n-  const ping = async () => {\n-    // A fetch on a websocket URL will return a successful promise with status 400,\n-    // but will reject a networking error.\n-    // When running on middleware mode, it returns status 426, and an cors error happens if mode is not no-cors\n-    try {\n-      await fetch(`${pingHostProtocol}://${hostAndPath}`, {\n-        mode: 'no-cors',\n-        headers: {\n-          // Custom headers won't be included in a request with no-cors so (ab)use one of the\n-          // safelisted headers to identify the ping request\n-          Accept: 'text/x-vite-ping',\n-        },\n+  async function ping() {\n+    const socket = new WebSocket(\n+      `${socketProtocol}://${hostAndPath}`,\n+      'vite-ping',\n+    )\n+    return new Promise<boolean>((resolve) => {",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1785620201",
        "repo_full_name": "vitejs/vite",
        "pr_number": 17891,
        "pr_file": "packages/vite/src/client/client.ts",
        "discussion_id": "1785620201",
        "commented_code": "@@ -331,24 +331,19 @@ async function waitForSuccessfulPing(\n   hostAndPath: string,\n   ms = 1000,\n ) {\n-  const pingHostProtocol = socketProtocol === 'wss' ? 'https' : 'http'\n-\n-  const ping = async () => {\n-    // A fetch on a websocket URL will return a successful promise with status 400,\n-    // but will reject a networking error.\n-    // When running on middleware mode, it returns status 426, and an cors error happens if mode is not no-cors\n-    try {\n-      await fetch(`${pingHostProtocol}://${hostAndPath}`, {\n-        mode: 'no-cors',\n-        headers: {\n-          // Custom headers won't be included in a request with no-cors so (ab)use one of the\n-          // safelisted headers to identify the ping request\n-          Accept: 'text/x-vite-ping',\n-        },\n+  async function ping() {\n+    const socket = new WebSocket(\n+      `${socketProtocol}://${hostAndPath}`,\n+      'vite-ping',\n+    )\n+    return new Promise<boolean>((resolve) => {",
        "comment_created_at": "2024-10-03T04:38:47+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I guess we should call `socket.close` and `socket.removeEventListener` to avoid memory leak.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1749640445",
    "pr_number": 18046,
    "pr_file": "packages/vite/src/node/plugins/importAnalysisBuild.ts",
    "created_at": "2024-09-09T06:32:01+00:00",
    "commented_code": "// in that case fallback to getAttribute\n     const cspNonce = cspNonceMeta?.nonce || cspNonceMeta?.getAttribute('nonce')\n \n-    promise = Promise.all(\n+    promise = Promise.allSettled(",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1749640445",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18046,
        "pr_file": "packages/vite/src/node/plugins/importAnalysisBuild.ts",
        "discussion_id": "1749640445",
        "commented_code": "@@ -93,7 +94,7 @@ function preload(\n     // in that case fallback to getAttribute\n     const cspNonce = cspNonceMeta?.nonce || cspNonceMeta?.getAttribute('nonce')\n \n-    promise = Promise.all(\n+    promise = Promise.allSettled(",
        "comment_created_at": "2024-09-09T06:32:01+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I confirmed that `Promise.allSettled` is also supported by our default modern browser target.\r\nhttps://caniuse.com/mdn-javascript_builtins_promise_allsettled",
        "pr_file_module": null
      }
    ]
  }
]