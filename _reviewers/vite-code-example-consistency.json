[
  {
    "discussion_id": "2156535185",
    "pr_number": 20239,
    "pr_file": "docs/guide/api-environment-plugins.md",
    "created_at": "2025-06-19T09:13:12+00:00",
    "commented_code": "}\n   ```\n \n+## Per-environment State in Plugins\n+\n+Given that the same plugin instance is used for different environments, the plugin state needs to be keyed with `this.environment`. This is the same pattern the ecosystem has already been using to keep state about modules using the `ssr` boolean as key to avoid mixing client and ssr modules state. A `Map<Environment, State>` can be used to keep the state for each environment separately. Note that for backward compatibility, `buildStart` and `buildEnd` are only called for the client environment without the `perEnvironmentStartEndDuringDev: true` flag.\n+\n+```js\n+function PerEnvironmentCountTransformedModulesPlugin() {\n+  const state = new Map<Environment, { count: number }>()\n+  return {\n+    name: 'count-transformed-modules',\n+    perEnvironmentStartEndDuringDev: true,\n+    buildStart() {\n+      state.set(this.environment, { count: 0 })\n+    }",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "2156535185",
        "repo_full_name": "vitejs/vite",
        "pr_number": 20239,
        "pr_file": "docs/guide/api-environment-plugins.md",
        "discussion_id": "2156535185",
        "commented_code": "@@ -126,6 +126,29 @@ The hook can choose to:\n   }\n   ```\n \n+## Per-environment State in Plugins\n+\n+Given that the same plugin instance is used for different environments, the plugin state needs to be keyed with `this.environment`. This is the same pattern the ecosystem has already been using to keep state about modules using the `ssr` boolean as key to avoid mixing client and ssr modules state. A `Map<Environment, State>` can be used to keep the state for each environment separately. Note that for backward compatibility, `buildStart` and `buildEnd` are only called for the client environment without the `perEnvironmentStartEndDuringDev: true` flag.\n+\n+```js\n+function PerEnvironmentCountTransformedModulesPlugin() {\n+  const state = new Map<Environment, { count: number }>()\n+  return {\n+    name: 'count-transformed-modules',\n+    perEnvironmentStartEndDuringDev: true,\n+    buildStart() {\n+      state.set(this.environment, { count: 0 })\n+    }",
        "comment_created_at": "2025-06-19T09:13:12+00:00",
        "comment_author": "graphite-app[bot]",
        "comment_body": "There's a missing comma after the `buildStart` function. This will cause a syntax error when the code is executed.\n\n```js\nbuildStart() {\n  state.set(this.environment, { count: 0 })\n}, // <-- comma needed here\n```\n```suggestion\n    },\n```\n  \n\n*Spotted by [Diamond](https://app.graphite.dev/diamond/?org=vitejs&ref=ai-review-comment)*<i class='graphite__hidden'><br /><br />Is this helpful? React \ud83d\udc4d or \ud83d\udc4e to let us know.</i>",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2156543808",
    "pr_number": 20239,
    "pr_file": "docs/guide/api-environment-plugins.md",
    "created_at": "2025-06-19T09:17:56+00:00",
    "commented_code": "}\n   ```\n \n+## Per-environment State in Plugins\n+\n+Given that the same plugin instance is used for different environments, the plugin state needs to be keyed with `this.environment`. This is the same pattern the ecosystem has already been using to keep state about modules using the `ssr` boolean as key to avoid mixing client and ssr modules state. A `Map<Environment, State>` can be used to keep the state for each environment separately. Note that for backward compatibility, `buildStart` and `buildEnd` are only called for the client environment without the `perEnvironmentStartEndDuringDev: true` flag.\n+\n+```js\n+function PerEnvironmentCountTransformedModulesPlugin() {\n+  const state = new Map<Environment, { count: number }>()",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "2156543808",
        "repo_full_name": "vitejs/vite",
        "pr_number": 20239,
        "pr_file": "docs/guide/api-environment-plugins.md",
        "discussion_id": "2156543808",
        "commented_code": "@@ -126,6 +126,29 @@ The hook can choose to:\n   }\n   ```\n \n+## Per-environment State in Plugins\n+\n+Given that the same plugin instance is used for different environments, the plugin state needs to be keyed with `this.environment`. This is the same pattern the ecosystem has already been using to keep state about modules using the `ssr` boolean as key to avoid mixing client and ssr modules state. A `Map<Environment, State>` can be used to keep the state for each environment separately. Note that for backward compatibility, `buildStart` and `buildEnd` are only called for the client environment without the `perEnvironmentStartEndDuringDev: true` flag.\n+\n+```js\n+function PerEnvironmentCountTransformedModulesPlugin() {\n+  const state = new Map<Environment, { count: number }>()",
        "comment_created_at": "2025-06-19T09:17:56+00:00",
        "comment_author": "graphite-app[bot]",
        "comment_body": "The code example is using TypeScript syntax (`Map<Environment, { count: number }>`) but is marked as JavaScript with ```js. Either change the code block marker to ```ts or remove the type annotations for a pure JavaScript example (e.g., `const state = new Map()`).\n```suggestion\n  const state = new Map()\n```\n  \n\n*Spotted by [Diamond](https://app.graphite.dev/diamond/?org=vitejs&ref=ai-review-comment)*<i class='graphite__hidden'><br /><br />Is this helpful? React \ud83d\udc4d or \ud83d\udc4e to let us know.</i>",
        "pr_file_module": null
      }
    ]
  }
]