[
  {
    "discussion_id": "2172538709",
    "pr_number": 20069,
    "pr_file": "packages/create-vite/src/index.ts",
    "created_at": "2025-06-27T17:38:21+00:00",
    "commented_code": "},\n     ],\n   },\n+  {\n+    name: 'ember',\n+    display: 'Ember',\n+    color: redBright,\n+    variants: [\n+      {\n+        name: 'ember app',",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "2172538709",
        "repo_full_name": "vitejs/vite",
        "pr_number": 20069,
        "pr_file": "packages/create-vite/src/index.ts",
        "discussion_id": "2172538709",
        "commented_code": "@@ -246,6 +246,41 @@ const FRAMEWORKS: Framework[] = [\n       },\n     ],\n   },\n+  {\n+    name: 'ember',\n+    display: 'Ember',\n+    color: redBright,\n+    variants: [\n+      {\n+        name: 'ember app',",
        "comment_created_at": "2025-06-27T17:38:21+00:00",
        "comment_author": "dominikg",
        "comment_body": "the names should probably follow the pattern set by other templates eg `ember` or `ember-app",
        "pr_file_module": null
      },
      {
        "comment_id": "2172585881",
        "repo_full_name": "vitejs/vite",
        "pr_number": 20069,
        "pr_file": "packages/create-vite/src/index.ts",
        "discussion_id": "2172538709",
        "commented_code": "@@ -246,6 +246,41 @@ const FRAMEWORKS: Framework[] = [\n       },\n     ],\n   },\n+  {\n+    name: 'ember',\n+    display: 'Ember',\n+    color: redBright,\n+    variants: [\n+      {\n+        name: 'ember app',",
        "comment_created_at": "2025-06-27T18:05:48+00:00",
        "comment_author": "NullVoxPopuli",
        "comment_body": "ah ok, I didn't notice they had to be hyphenated. thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1376660842",
    "pr_number": 14333,
    "pr_file": "packages/plugin-persistent-cache/src/utils.ts",
    "created_at": "2023-10-30T18:39:46+00:00",
    "commented_code": "+import { createHash } from 'node:crypto'\n+import fs from 'node:fs'\n+import path from 'node:path'\n+\n+export function getCodeHash(code: string): string {",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1376660842",
        "repo_full_name": "vitejs/vite",
        "pr_number": 14333,
        "pr_file": "packages/plugin-persistent-cache/src/utils.ts",
        "discussion_id": "1376660842",
        "commented_code": "@@ -0,0 +1,35 @@\n+import { createHash } from 'node:crypto'\n+import fs from 'node:fs'\n+import path from 'node:path'\n+\n+export function getCodeHash(code: string): string {",
        "comment_created_at": "2023-10-30T18:39:46+00:00",
        "comment_author": "benmccann",
        "comment_body": "this could probably just be called `getHash`. it will work regardless of whether the input is a \"code\" or not",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1875451333",
    "pr_number": 18840,
    "pr_file": "packages/vite/src/node/plugins/importAnalysis.ts",
    "created_at": "2024-12-09T06:53:54+00:00",
    "commented_code": "// normalize and rewrite accepted urls\n       const normalizedAcceptedUrls = new Set<string>()",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1875451333",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18840,
        "pr_file": "packages/vite/src/node/plugins/importAnalysis.ts",
        "discussion_id": "1875451333",
        "commented_code": "@@ -753,9 +753,19 @@ export function importAnalysisPlugin(config: ResolvedConfig): Plugin {\n       // normalize and rewrite accepted urls\n       const normalizedAcceptedUrls = new Set<string>()",
        "comment_created_at": "2024-12-09T06:53:54+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "```suggestion\r\n      // normalize and rewrite accepted deps\r\n      const resolvedAcceptedDeps = new Set<string>()\r\n```\r\nWould you rename this variable now that we push ids?",
        "pr_file_module": null
      },
      {
        "comment_id": "1875608498",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18840,
        "pr_file": "packages/vite/src/node/plugins/importAnalysis.ts",
        "discussion_id": "1875451333",
        "commented_code": "@@ -753,9 +753,19 @@ export function importAnalysisPlugin(config: ResolvedConfig): Plugin {\n       // normalize and rewrite accepted urls\n       const normalizedAcceptedUrls = new Set<string>()",
        "comment_created_at": "2024-12-09T09:02:00+00:00",
        "comment_author": "patricklx",
        "comment_body": "its not urls. i use module.url in line 760.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1764814472",
    "pr_number": 18092,
    "pr_file": "packages/vite/src/module-runner/moduleCache.ts",
    "created_at": "2024-09-18T10:31:13+00:00",
    "commented_code": "-import { isWindows, slash, withTrailingSlash } from '../shared/utils'\n+import {\n+  cleanUrl,\n+  isWindows,\n+  slash,\n+  unwrapId,\n+  withTrailingSlash,\n+} from '../shared/utils'\n import { SOURCEMAPPING_URL } from '../shared/constants'\n-import { decodeBase64 } from './utils'\n+import { decodeBase64, posixResolve } from './utils'\n import { DecodedMap } from './sourcemap/decoder'\n-import type { ModuleCache } from './types'\n+import type { ResolvedResult } from './types'\n \n const MODULE_RUNNER_SOURCEMAPPING_REGEXP = new RegExp(\n   `//# ${SOURCEMAPPING_URL}=data:application/json;base64,(.+)`,\n )\n \n-export class ModuleCacheMap extends Map<string, ModuleCache> {\n-  private root: string\n-\n-  constructor(root: string, entries?: [string, ModuleCache][]) {\n-    super(entries)\n-    this.root = withTrailingSlash(root)\n-  }\n-\n-  normalize(fsPath: string): string {\n-    return normalizeModuleId(fsPath, this.root)\n+export class ModuleRunnerNode {\n+  public importers = new Set<string>()\n+  public imports = new Set<string>()\n+  public lastInvalidationTimestamp = 0\n+  public evaluated = false\n+  public meta: ResolvedResult | undefined\n+  public promise: Promise<any> | undefined\n+  public exports: any | undefined\n+  public file: string\n+  public map: DecodedMap | undefined\n+\n+  constructor(\n+    public id: string,\n+    public url: string,\n+  ) {\n+    this.file = cleanUrl(id)\n   }\n+}\n \n-  /**\n-   * Assign partial data to the map\n-   */\n-  update(fsPath: string, mod: ModuleCache): this {\n-    fsPath = this.normalize(fsPath)\n-    if (!super.has(fsPath)) this.setByModuleId(fsPath, mod)\n-    else Object.assign(super.get(fsPath)!, mod)\n-    return this\n-  }\n+export class ModuleRunnerGraph {\n+  private root: string\n \n-  setByModuleId(modulePath: string, mod: ModuleCache): this {\n-    return super.set(modulePath, mod)\n-  }\n+  public idToModuleMap = new Map<string, ModuleRunnerNode>()\n+  public fileToModuleMap = new Map<string, ModuleRunnerNode[]>()",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1764814472",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18092,
        "pr_file": "packages/vite/src/module-runner/moduleCache.ts",
        "discussion_id": "1764814472",
        "commented_code": "@@ -1,139 +1,110 @@\n-import { isWindows, slash, withTrailingSlash } from '../shared/utils'\n+import {\n+  cleanUrl,\n+  isWindows,\n+  slash,\n+  unwrapId,\n+  withTrailingSlash,\n+} from '../shared/utils'\n import { SOURCEMAPPING_URL } from '../shared/constants'\n-import { decodeBase64 } from './utils'\n+import { decodeBase64, posixResolve } from './utils'\n import { DecodedMap } from './sourcemap/decoder'\n-import type { ModuleCache } from './types'\n+import type { ResolvedResult } from './types'\n \n const MODULE_RUNNER_SOURCEMAPPING_REGEXP = new RegExp(\n   `//# ${SOURCEMAPPING_URL}=data:application/json;base64,(.+)`,\n )\n \n-export class ModuleCacheMap extends Map<string, ModuleCache> {\n-  private root: string\n-\n-  constructor(root: string, entries?: [string, ModuleCache][]) {\n-    super(entries)\n-    this.root = withTrailingSlash(root)\n-  }\n-\n-  normalize(fsPath: string): string {\n-    return normalizeModuleId(fsPath, this.root)\n+export class ModuleRunnerNode {\n+  public importers = new Set<string>()\n+  public imports = new Set<string>()\n+  public lastInvalidationTimestamp = 0\n+  public evaluated = false\n+  public meta: ResolvedResult | undefined\n+  public promise: Promise<any> | undefined\n+  public exports: any | undefined\n+  public file: string\n+  public map: DecodedMap | undefined\n+\n+  constructor(\n+    public id: string,\n+    public url: string,\n+  ) {\n+    this.file = cleanUrl(id)\n   }\n+}\n \n-  /**\n-   * Assign partial data to the map\n-   */\n-  update(fsPath: string, mod: ModuleCache): this {\n-    fsPath = this.normalize(fsPath)\n-    if (!super.has(fsPath)) this.setByModuleId(fsPath, mod)\n-    else Object.assign(super.get(fsPath)!, mod)\n-    return this\n-  }\n+export class ModuleRunnerGraph {\n+  private root: string\n \n-  setByModuleId(modulePath: string, mod: ModuleCache): this {\n-    return super.set(modulePath, mod)\n-  }\n+  public idToModuleMap = new Map<string, ModuleRunnerNode>()\n+  public fileToModuleMap = new Map<string, ModuleRunnerNode[]>()",
        "comment_created_at": "2024-09-18T10:31:13+00:00",
        "comment_author": "jamesopstad",
        "comment_body": "This should be named `fileToModulesMap`. Should we also use `Set<ModuleRunnerNode>` rather than `ModuleRunnerNode[]` for consistency with `EnvironmentModuleGraph`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "834215547",
    "pr_number": 7436,
    "pr_file": "packages/vite/src/node/importGlob.ts",
    "created_at": "2022-03-24T11:43:37+00:00",
    "commented_code": "err.pos = pos\n   throw err\n }\n+\n+function glob(pattern: string, cwd: string): string[] {",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "834215547",
        "repo_full_name": "vitejs/vite",
        "pr_number": 7436,
        "pr_file": "packages/vite/src/node/importGlob.ts",
        "discussion_id": "834215547",
        "commented_code": "@@ -261,3 +257,36 @@ function error(pos: number) {\n   err.pos = pos\n   throw err\n }\n+\n+function glob(pattern: string, cwd: string): string[] {",
        "comment_created_at": "2022-03-24T11:43:37+00:00",
        "comment_author": "patak-dev",
        "comment_body": "better to call `cwd` as `base` here? So we avoid possible confusion with `cwd` not being `cwd` when modified.",
        "pr_file_module": null
      },
      {
        "comment_id": "834335695",
        "repo_full_name": "vitejs/vite",
        "pr_number": 7436,
        "pr_file": "packages/vite/src/node/importGlob.ts",
        "discussion_id": "834215547",
        "commented_code": "@@ -261,3 +257,36 @@ function error(pos: number) {\n   err.pos = pos\n   throw err\n }\n+\n+function glob(pattern: string, cwd: string): string[] {",
        "comment_created_at": "2022-03-24T13:56:16+00:00",
        "comment_author": "brillout",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "957295296",
    "pr_number": 9865,
    "pr_file": "packages/vite/src/node/server/middlewares/rewriteUrl.ts",
    "created_at": "2022-08-29T13:02:27+00:00",
    "commented_code": "import type { Connect } from 'types/connect'\n import { createDebugger } from '../../utils'\n \n-export function spaFallbackMiddleware(\n-  root: string\n+export function rewriteUrlMiddleware(",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "957295296",
        "repo_full_name": "vitejs/vite",
        "pr_number": 9865,
        "pr_file": "packages/vite/src/node/server/middlewares/rewriteUrl.ts",
        "discussion_id": "957295296",
        "commented_code": "@@ -4,8 +4,9 @@ import history from 'connect-history-api-fallback'\n import type { Connect } from 'types/connect'\n import { createDebugger } from '../../utils'\n \n-export function spaFallbackMiddleware(\n-  root: string\n+export function rewriteUrlMiddleware(",
        "comment_created_at": "2022-08-29T13:02:27+00:00",
        "comment_author": "bluwy",
        "comment_body": "Just me being really nitpicky, but I feel like `htmlFallbackMiddleware` better reflects its usecase 🤔 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1751144604",
    "pr_number": 18063,
    "pr_file": "packages/vite/src/node/optimizer/scan.ts",
    "created_at": "2024-09-10T02:02:09+00:00",
    "commented_code": "const srcRE = /\\bsrc\\s*=\\s*(?:\"([^\"]+)\"|'([^']+)'|([^\\s'\">]+))/i\n const typeRE = /\\btype\\s*=\\s*(?:\"([^\"]+)\"|'([^']+)'|([^\\s'\">]+))/i\n const langRE = /\\blang\\s*=\\s*(?:\"([^\"]+)\"|'([^']+)'|([^\\s'\">]+))/i\n-const contextRE = /\\bcontext\\s*=\\s*(?:\"([^\"]+)\"|'([^']+)'|([^\\s'\">]+))/i\n+const contextRE =",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1751144604",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18063,
        "pr_file": "packages/vite/src/node/optimizer/scan.ts",
        "discussion_id": "1751144604",
        "commented_code": "@@ -358,7 +358,8 @@ export const commentRE = /<!--.*?-->/gs\n const srcRE = /\\bsrc\\s*=\\s*(?:\"([^\"]+)\"|'([^']+)'|([^\\s'\">]+))/i\n const typeRE = /\\btype\\s*=\\s*(?:\"([^\"]+)\"|'([^']+)'|([^\\s'\">]+))/i\n const langRE = /\\blang\\s*=\\s*(?:\"([^\"]+)\"|'([^']+)'|([^\\s'\">]+))/i\n-const contextRE = /\\bcontext\\s*=\\s*(?:\"([^\"]+)\"|'([^']+)'|([^\\s'\">]+))/i\n+const contextRE =",
        "comment_created_at": "2024-09-10T02:02:09+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I think we should rename this variable as this no longer only matches `context=*` but also matches `module`. For example, `svelteScriptModuleRE`.",
        "pr_file_module": null
      }
    ]
  }
]