[
  {
    "discussion_id": "2148905216",
    "pr_number": 20210,
    "pr_file": "docs/guide/dep-pre-bundling.md",
    "created_at": "2025-06-16T01:23:17+00:00",
    "commented_code": "Vite caches the pre-bundled dependencies in `node_modules/.vite`. It determines whether it needs to re-run the pre-bundling step based on a few sources:\n \n-- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml` or `bun.lockb`.\n+- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`, `bun.lock` or `bun.lockb`.",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "2148905216",
        "repo_full_name": "vitejs/vite",
        "pr_number": 20210,
        "pr_file": "docs/guide/dep-pre-bundling.md",
        "discussion_id": "2148905216",
        "commented_code": "@@ -70,7 +70,7 @@ You can further customize esbuild too with the [`optimizeDeps.esbuildOptions` op\n \n Vite caches the pre-bundled dependencies in `node_modules/.vite`. It determines whether it needs to re-run the pre-bundling step based on a few sources:\n \n-- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml` or `bun.lockb`.\n+- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`, `bun.lock` or `bun.lockb`.",
        "comment_created_at": "2025-06-16T01:23:17+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "```suggestion\r\n- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml` or `bun.lock`\r\n```\r\nSince this list is just an example, I think it's fine to remove `bun.lockb` because `bun.lock` has been added instead.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2152191130",
        "repo_full_name": "vitejs/vite",
        "pr_number": 20210,
        "pr_file": "docs/guide/dep-pre-bundling.md",
        "discussion_id": "2148905216",
        "commented_code": "@@ -70,7 +70,7 @@ You can further customize esbuild too with the [`optimizeDeps.esbuildOptions` op\n \n Vite caches the pre-bundled dependencies in `node_modules/.vite`. It determines whether it needs to re-run the pre-bundling step based on a few sources:\n \n-- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml` or `bun.lockb`.\n+- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`, `bun.lock` or `bun.lockb`.",
        "comment_created_at": "2025-06-17T12:49:50+00:00",
        "comment_author": "WarningImHack3r",
        "comment_body": "In that case, this PR is irrelevant because it's just an example. Either keep both or close this PR in my opinion",
        "pr_file_module": null
      },
      {
        "comment_id": "2155021970",
        "repo_full_name": "vitejs/vite",
        "pr_number": 20210,
        "pr_file": "docs/guide/dep-pre-bundling.md",
        "discussion_id": "2148905216",
        "commented_code": "@@ -70,7 +70,7 @@ You can further customize esbuild too with the [`optimizeDeps.esbuildOptions` op\n \n Vite caches the pre-bundled dependencies in `node_modules/.vite`. It determines whether it needs to re-run the pre-bundling step based on a few sources:\n \n-- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml` or `bun.lockb`.\n+- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`, `bun.lock` or `bun.lockb`.",
        "comment_created_at": "2025-06-18T16:17:05+00:00",
        "comment_author": "iiio2",
        "comment_body": "@sapphi-red , @WarningImHack3r , with respect I want to tell one thing if you allow. I have seen in the codebase that both `bun.lock` and `bun.lockb` are present. Can't we add both here also then ?\r\n\r\nhttps://github.com/vitejs/vite/blob/3bf3a8ab00e5a0dfab0bb5741cb871ea30b72651/packages/vite/src/node/optimizer/index.ts#L1231 ",
        "pr_file_module": null
      },
      {
        "comment_id": "2155903459",
        "repo_full_name": "vitejs/vite",
        "pr_number": 20210,
        "pr_file": "docs/guide/dep-pre-bundling.md",
        "discussion_id": "2148905216",
        "commented_code": "@@ -70,7 +70,7 @@ You can further customize esbuild too with the [`optimizeDeps.esbuildOptions` op\n \n Vite caches the pre-bundled dependencies in `node_modules/.vite`. It determines whether it needs to re-run the pre-bundling step based on a few sources:\n \n-- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml` or `bun.lockb`.\n+- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`, `bun.lock` or `bun.lockb`.",
        "comment_created_at": "2025-06-19T02:12:25+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "Having both feels too verbose. Since `bun.lock` is the new default for bun, I think `bun.lock` should be listed instead of `bun.lockb`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2157029148",
        "repo_full_name": "vitejs/vite",
        "pr_number": 20210,
        "pr_file": "docs/guide/dep-pre-bundling.md",
        "discussion_id": "2148905216",
        "commented_code": "@@ -70,7 +70,7 @@ You can further customize esbuild too with the [`optimizeDeps.esbuildOptions` op\n \n Vite caches the pre-bundled dependencies in `node_modules/.vite`. It determines whether it needs to re-run the pre-bundling step based on a few sources:\n \n-- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml` or `bun.lockb`.\n+- Package manager lockfile content, e.g. `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`, `bun.lock` or `bun.lockb`.",
        "comment_created_at": "2025-06-19T13:31:33+00:00",
        "comment_author": "iiio2",
        "comment_body": "I see. Thank you for your opinion, @sapphi-red . ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1997842675",
    "pr_number": 19650,
    "pr_file": "docs/config/server-options.md",
    "created_at": "2025-03-17T02:21:25+00:00",
    "commented_code": "Enable TLS + HTTP/2. Note this downgrades to TLS only when the [`server.proxy` option](#server-proxy) is also used.\n \n-The value can also be an [options object](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener) passed to `https.createServer()`.\n+The value is an [options object](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener) passed to `https.createServer()`.",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1997842675",
        "repo_full_name": "vitejs/vite",
        "pr_number": 19650,
        "pr_file": "docs/config/server-options.md",
        "discussion_id": "1997842675",
        "commented_code": "@@ -92,7 +92,7 @@ Set to `true` to exit if port is already in use, instead of automatically trying\n \n Enable TLS + HTTP/2. Note this downgrades to TLS only when the [`server.proxy` option](#server-proxy) is also used.\n \n-The value can also be an [options object](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener) passed to `https.createServer()`.\n+The value is an [options object](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener) passed to `https.createServer()`.",
        "comment_created_at": "2025-03-17T02:21:25+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I believe this \"can also be\" was confusing as the other possibility (`true`) doesn't actually exist now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1877563205",
    "pr_number": 18361,
    "pr_file": "docs/guide/api-environment-runtimes.md",
    "created_at": "2024-12-10T08:18:37+00:00",
    "commented_code": "interface ModuleRunnerOptions {\n   /**\n    * Root of the project\n+   * @deprecated not used anymore and to be removed\n    */\n-  root: string\n+  root?: string",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1877563205",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18361,
        "pr_file": "docs/guide/api-environment-runtimes.md",
        "discussion_id": "1877563205",
        "commented_code": "@@ -182,8 +182,9 @@ type ModuleRunnerTransport = unknown\n interface ModuleRunnerOptions {\n   /**\n    * Root of the project\n+   * @deprecated not used anymore and to be removed\n    */\n-  root: string\n+  root?: string",
        "comment_created_at": "2024-12-10T08:18:37+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "Since `root` is deprecated and does not need to be set anymore, I think we can remove `root` from all the examples and types in the docs.",
        "pr_file_module": null
      },
      {
        "comment_id": "1877623834",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18361,
        "pr_file": "docs/guide/api-environment-runtimes.md",
        "discussion_id": "1877563205",
        "commented_code": "@@ -182,8 +182,9 @@ type ModuleRunnerTransport = unknown\n interface ModuleRunnerOptions {\n   /**\n    * Root of the project\n+   * @deprecated not used anymore and to be removed\n    */\n-  root: string\n+  root?: string",
        "comment_created_at": "2024-12-10T08:54:09+00:00",
        "comment_author": "hi-ogawa",
        "comment_body": "Makes sense. Updated the docs and also removed the internal usages of root.\r\nI kept the default server runner one since users can technically access it via `runner.options.root`.",
        "pr_file_module": null
      }
    ]
  }
]