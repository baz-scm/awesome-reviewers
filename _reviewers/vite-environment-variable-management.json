[
  {
    "discussion_id": "1392386599",
    "pr_number": 14978,
    "pr_file": "docs/guide/env-and-mode.md",
    "created_at": "2023-11-14T10:47:07+00:00",
    "commented_code": "# .env.testing\n NODE_ENV=development\n ```\n+\n+## NODE_ENV and Modes\n+\n+It's important to note that `NODE_ENV` (`process.env.NODE_ENV`) and modes are two different concepts. Here's how different commands affect the `NODE_ENV` and mode:\n+\n+| Command                                              | NODE_ENV        | Mode            |\n+| ---------------------------------------------------- | --------------- | --------------- |\n+| `vite build`                                         | `\"production\"`  | `\"production\"`  |\n+| `vite build --mode development`                      | `\"production\"`  | `\"development\"` |\n+| `NODE_ENV=development vite build`                    | `\"development\"` | `\"production\"`  |\n+| `NODE_ENV=development vite build --mode development` | `\"development\"` | `\"development\"` |\n+\n+The different values of `NODE_ENV` and mode also reflect on its corresponding `import.meta.env` properties:\n+\n+| Command                | `import.meta.env.PROD` | `import.meta.env.DEV` |\n+| ---------------------- | ---------------------- | --------------------- |\n+| `NODE_ENV=production`  | `true`                 | `false`               |\n+| `NODE_ENV=development` | `false`                | `true`                |\n+| `NODE_ENV=other`       | `false`                | `true`                |\n+\n+| Command              | `import.meta.env.MODE` |\n+| -------------------- | ---------------------- |\n+| `--mode production`  | `\"production\"`         |\n+| `--mode development` | `\"development\"`        |\n+| `--mode staging`     | `\"staging\"`            |\n+\n+:::tip `NODE_ENV` in `.env` files\n+\n+Setting `NODE_ENV=...` in the command is similar to setting it in in your `.env` file. Consequently, the mode is able to control the value of `NODE_ENV` if it's specified in a `.env.[mode]` file. However, both `NODE_ENV` and modes still remain as two different concepts.",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1392386599",
        "repo_full_name": "vitejs/vite",
        "pr_number": 14978,
        "pr_file": "docs/guide/env-and-mode.md",
        "discussion_id": "1392386599",
        "commented_code": "@@ -142,3 +142,35 @@ As `vite build` runs a production build by default, you can also change this and\n # .env.testing\n NODE_ENV=development\n ```\n+\n+## NODE_ENV and Modes\n+\n+It's important to note that `NODE_ENV` (`process.env.NODE_ENV`) and modes are two different concepts. Here's how different commands affect the `NODE_ENV` and mode:\n+\n+| Command                                              | NODE_ENV        | Mode            |\n+| ---------------------------------------------------- | --------------- | --------------- |\n+| `vite build`                                         | `\"production\"`  | `\"production\"`  |\n+| `vite build --mode development`                      | `\"production\"`  | `\"development\"` |\n+| `NODE_ENV=development vite build`                    | `\"development\"` | `\"production\"`  |\n+| `NODE_ENV=development vite build --mode development` | `\"development\"` | `\"development\"` |\n+\n+The different values of `NODE_ENV` and mode also reflect on its corresponding `import.meta.env` properties:\n+\n+| Command                | `import.meta.env.PROD` | `import.meta.env.DEV` |\n+| ---------------------- | ---------------------- | --------------------- |\n+| `NODE_ENV=production`  | `true`                 | `false`               |\n+| `NODE_ENV=development` | `false`                | `true`                |\n+| `NODE_ENV=other`       | `false`                | `true`                |\n+\n+| Command              | `import.meta.env.MODE` |\n+| -------------------- | ---------------------- |\n+| `--mode production`  | `\"production\"`         |\n+| `--mode development` | `\"development\"`        |\n+| `--mode staging`     | `\"staging\"`            |\n+\n+:::tip `NODE_ENV` in `.env` files\n+\n+Setting `NODE_ENV=...` in the command is similar to setting it in in your `.env` file. Consequently, the mode is able to control the value of `NODE_ENV` if it's specified in a `.env.[mode]` file. However, both `NODE_ENV` and modes still remain as two different concepts.",
        "comment_created_at": "2023-11-14T10:47:07+00:00",
        "comment_author": "patak-dev",
        "comment_body": "The \"Consequently\" is a bit confusing to me here. Maybe: \r\n```suggestion\r\n`NODE_ENV=...` can be set in the command, and also in your `.env` file. If `NODE_ENV` is specified in a `.env.[mode]` file, the mode can be used to control its value. However, both `NODE_ENV` and modes remain as two different concepts.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2017864504",
    "pr_number": 19503,
    "pr_file": "docs/config/shared-options.md",
    "created_at": "2025-03-28T03:44:37+00:00",
    "commented_code": "## envDir\n \n-- **Type:** `string`\n+- **Type:** `string | false`\n - **Default:** `root`\n \n The directory from which `.env` files are loaded. Can be an absolute path, or a path relative to the project root.\n \n See [here](/guide/env-and-mode#env-files) for more about environment files.\n \n+:::warning Warning\n+If you don't want to use Vite's built-in `.env` file handling, you can set `envDir: false` to disable it.\n+:::",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "2017864504",
        "repo_full_name": "vitejs/vite",
        "pr_number": 19503,
        "pr_file": "docs/config/shared-options.md",
        "discussion_id": "2017864504",
        "commented_code": "@@ -459,13 +459,17 @@ Set to `false` to prevent Vite from clearing the terminal screen when logging ce\n \n ## envDir\n \n-- **Type:** `string`\n+- **Type:** `string | false`\n - **Default:** `root`\n \n The directory from which `.env` files are loaded. Can be an absolute path, or a path relative to the project root.\n \n See [here](/guide/env-and-mode#env-files) for more about environment files.\n \n+:::warning Warning\n+If you don't want to use Vite's built-in `.env` file handling, you can set `envDir: false` to disable it.\n+:::",
        "comment_created_at": "2025-03-28T03:44:37+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "```suggestion\r\nThe directory from which `.env` files are loaded. Can be an absolute path, or a path relative to the project root. `false` will disable the `.env` file loading.\r\n\r\nSee [here](/guide/env-and-mode#env-files) for more about environment files.\r\n```\r\nI think it doesn't have to be a warning.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1905037842",
    "pr_number": 19077,
    "pr_file": "docs/guide/env-and-mode.md",
    "created_at": "2025-01-07T07:53:47+00:00",
    "commented_code": "```typescript [vite-env.d.ts]\n /// <reference types=\"vite/client\" />\n \n+// By adding this line, you can make the type of ImportMetaEnv strict.",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1905037842",
        "repo_full_name": "vitejs/vite",
        "pr_number": 19077,
        "pr_file": "docs/guide/env-and-mode.md",
        "discussion_id": "1905037842",
        "commented_code": "@@ -86,6 +86,9 @@ To achieve this, you can create an `vite-env.d.ts` in `src` directory, then augm\n ```typescript [vite-env.d.ts]\n /// <reference types=\"vite/client\" />\n \n+// By adding this line, you can make the type of ImportMetaEnv strict.",
        "comment_created_at": "2025-01-07T07:53:47+00:00",
        "comment_author": "bluwy",
        "comment_body": "```suggestion\r\n// By adding this line, you can make the type of ImportMetaEnv strict\r\n// to disallow unknown keys.\r\n```\r\n\r\nMaybe this can extend a bit about what the strictness does.",
        "pr_file_module": null
      },
      {
        "comment_id": "1905040817",
        "repo_full_name": "vitejs/vite",
        "pr_number": 19077,
        "pr_file": "docs/guide/env-and-mode.md",
        "discussion_id": "1905037842",
        "commented_code": "@@ -86,6 +86,9 @@ To achieve this, you can create an `vite-env.d.ts` in `src` directory, then augm\n ```typescript [vite-env.d.ts]\n /// <reference types=\"vite/client\" />\n \n+// By adding this line, you can make the type of ImportMetaEnv strict.",
        "comment_created_at": "2025-01-07T07:57:01+00:00",
        "comment_author": "yunics-highfield",
        "comment_body": "Agree 👍",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1814252899",
    "pr_number": 18441,
    "pr_file": "docs/config/index.md",
    "created_at": "2024-10-24T05:01:35+00:00",
    "commented_code": "export default defineConfig(({ command, mode }) => {\n   // Load env file based on `mode` in the current working directory.\n-  // Set the third parameter to '' to load all env regardless of the `VITE_` prefix.\n-  const env = loadEnv(mode, process.cwd(), '')\n+  // If necessary, you can set the optional third parameter to '' to load all env regardless of the `VITE_` prefix.\n+  const env = loadEnv(mode, process.cwd())",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1814252899",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18441,
        "pr_file": "docs/config/index.md",
        "discussion_id": "1814252899",
        "commented_code": "@@ -105,8 +105,8 @@ import { defineConfig, loadEnv } from 'vite'\n \n export default defineConfig(({ command, mode }) => {\n   // Load env file based on `mode` in the current working directory.\n-  // Set the third parameter to '' to load all env regardless of the `VITE_` prefix.\n-  const env = loadEnv(mode, process.cwd(), '')\n+  // If necessary, you can set the optional third parameter to '' to load all env regardless of the `VITE_` prefix.\n+  const env = loadEnv(mode, process.cwd())",
        "comment_created_at": "2024-10-24T05:01:35+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "The current change would make this example broken (`env.APP_ENV` will be `undefined`).\r\n\r\n```suggestion\r\n  // Set the third parameter to 'APP_' to load envs with the `APP_` prefix.\r\n  // If necessary, you can set the optional third parameter to '' to load all env regardless of the `VITE_` prefix.\r\n  const env = loadEnv(mode, process.cwd(), 'APP_')\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1857783296",
    "pr_number": 18765,
    "pr_file": "docs/guide/env-and-mode.md",
    "created_at": "2024-11-26T05:14:19+00:00",
    "commented_code": "An env file for a specific mode (e.g. `.env.production`) will take higher priority than a generic one (e.g. `.env`).\n \n+⚠️ When running with a mode specified, Vite will load _both_ `.env` and `.env.[mode]` files. If the same variable is defined in both files, the value in `.env.[mode]` will take precedence. Variables defined only in `.env` will also be passed into the environment unless explicitly overridden in `.env.[mode]`.",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1857783296",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18765,
        "pr_file": "docs/guide/env-and-mode.md",
        "discussion_id": "1857783296",
        "commented_code": "@@ -29,6 +29,8 @@ Vite uses [dotenv](https://github.com/motdotla/dotenv) to load additional enviro\n \n An env file for a specific mode (e.g. `.env.production`) will take higher priority than a generic one (e.g. `.env`).\n \n+⚠️ When running with a mode specified, Vite will load _both_ `.env` and `.env.[mode]` files. If the same variable is defined in both files, the value in `.env.[mode]` will take precedence. Variables defined only in `.env` will also be passed into the environment unless explicitly overridden in `.env.[mode]`.",
        "comment_created_at": "2024-11-26T05:14:19+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "```suggestion\r\nThe variables declared in an env file for a specific mode (e.g. `.env.production`) will take higher priority than the ones in a generic one (e.g. `.env`).\r\n```\r\nThe fact that `.env` is always loaded is written above in the code block. Does changing the sentence to clarify that the priority is talking about the variables rather than the files make things clear?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1860664261",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18765,
        "pr_file": "docs/guide/env-and-mode.md",
        "discussion_id": "1857783296",
        "commented_code": "@@ -29,6 +29,8 @@ Vite uses [dotenv](https://github.com/motdotla/dotenv) to load additional enviro\n \n An env file for a specific mode (e.g. `.env.production`) will take higher priority than a generic one (e.g. `.env`).\n \n+⚠️ When running with a mode specified, Vite will load _both_ `.env` and `.env.[mode]` files. If the same variable is defined in both files, the value in `.env.[mode]` will take precedence. Variables defined only in `.env` will also be passed into the environment unless explicitly overridden in `.env.[mode]`.",
        "comment_created_at": "2024-11-27T13:27:48+00:00",
        "comment_author": "basal-luke",
        "comment_body": "@sapphi-red \r\n\r\nThanks for the review and the proposed update!\r\n\r\nI agree that your wording is an improvement, but I still believe that Vite's behavior here warrants a clearer explanation or warning in the documentation.\r\n\r\nThe current behavior, where `.env` and .`env.local` are implicitly/magically loaded regardless of the specified mode, might feel unexpected or unconventional to many developers.\r\n\r\nFor example, developers coming from tools like `dotenv` in NodeJS or `python-dotenv` are accustomed to _explicitly_ loading the desired `.env` file without the additional inclusion of unrelated files.\r\n\r\nWhile I understand that this implicit loading mimics the behavior of tools like Create React App (CRA), Vue CLI etc, I find it unintuitive and potentially problematic. Specifically, it can lead to surprises in production deployments where environment variables from .env (intended for local development) unintentionally make their way into the production environment.\r\n\r\nI also understand that the current documentation mentions that the `.env` and `.env.local` files are \"always loaded\", but this detail can easily be overlooked or misunderstood. \r\n\r\nIncluding a clear and prominent note in the section on mode-specific .env files would help ensure that users fully understand this behavior.\r\n\r\nHow about something like:\r\n\r\n> When running with a specific mode, Vite will always load `.env` and `.env.local` in addition to the mode-specific `.env.[mode]` file. Variables declared in mode-specific files will take precedence over those in generic files, but variables defined only in .env or .env.local will still be available in the environment.",
        "pr_file_module": null
      },
      {
        "comment_id": "1861449062",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18765,
        "pr_file": "docs/guide/env-and-mode.md",
        "discussion_id": "1857783296",
        "commented_code": "@@ -29,6 +29,8 @@ Vite uses [dotenv](https://github.com/motdotla/dotenv) to load additional enviro\n \n An env file for a specific mode (e.g. `.env.production`) will take higher priority than a generic one (e.g. `.env`).\n \n+⚠️ When running with a mode specified, Vite will load _both_ `.env` and `.env.[mode]` files. If the same variable is defined in both files, the value in `.env.[mode]` will take precedence. Variables defined only in `.env` will also be passed into the environment unless explicitly overridden in `.env.[mode]`.",
        "comment_created_at": "2024-11-28T03:00:44+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "> When running with a specific mode, Vite will always load `.env` and `.env.local` in addition to the mode-specific `.env.[mode]` file. Variables declared in mode-specific files will take precedence over those in generic files, but variables defined only in .env or .env.local will still be available in the environment.\r\n\r\nLooks good to me. I think we can remove the `When running with a specific mode, ` as Vite always have a mode set (it's `development` in dev and `production` in build by default).\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1862252678",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18765,
        "pr_file": "docs/guide/env-and-mode.md",
        "discussion_id": "1857783296",
        "commented_code": "@@ -29,6 +29,8 @@ Vite uses [dotenv](https://github.com/motdotla/dotenv) to load additional enviro\n \n An env file for a specific mode (e.g. `.env.production`) will take higher priority than a generic one (e.g. `.env`).\n \n+⚠️ When running with a mode specified, Vite will load _both_ `.env` and `.env.[mode]` files. If the same variable is defined in both files, the value in `.env.[mode]` will take precedence. Variables defined only in `.env` will also be passed into the environment unless explicitly overridden in `.env.[mode]`.",
        "comment_created_at": "2024-11-28T14:01:21+00:00",
        "comment_author": "basal-luke",
        "comment_body": "> Looks good to me. I think we can remove the When running with a specific mode,  as Vite always have a mode set (it's development in dev and production in build by default).\r\n\r\nMakes sense! Thanks for the feedback, I have applied your suggested changes.",
        "pr_file_module": null
      }
    ]
  }
]