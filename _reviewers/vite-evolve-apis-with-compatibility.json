[
  {
    "discussion_id": "1722642303",
    "pr_number": 16471,
    "pr_file": "packages/vite/src/node/server/index.ts",
    "created_at": "2024-08-20T03:34:23+00:00",
    "commented_code": "return devHtmlTransformFn(server, url, html, originalUrl)\n     },\n     async ssrLoadModule(url, opts?: { fixStacktrace?: boolean }) {\n+      warnFutureDeprecation(config, 'ssrLoadModule')\n       return ssrLoadModule(url, server, undefined, opts?.fixStacktrace)\n     },\n-    async ssrFetchModule(url: string, importer?: string) {\n-      return ssrFetchModule(server, url, importer)\n-    },\n     ssrFixStacktrace(e) {\n-      ssrFixStacktrace(e, moduleGraph)\n+      ssrFixStacktrace(e, server.environments.ssr.moduleGraph)\n     },\n     ssrRewriteStacktrace(stack: string) {\n-      return ssrRewriteStacktrace(stack, moduleGraph)\n+      return ssrRewriteStacktrace(stack, server.environments.ssr.moduleGraph)",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1722642303",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/server/index.ts",
        "discussion_id": "1722642303",
        "commented_code": "@@ -563,20 +569,36 @@ export async function _createServer(\n       return devHtmlTransformFn(server, url, html, originalUrl)\n     },\n     async ssrLoadModule(url, opts?: { fixStacktrace?: boolean }) {\n+      warnFutureDeprecation(config, 'ssrLoadModule')\n       return ssrLoadModule(url, server, undefined, opts?.fixStacktrace)\n     },\n-    async ssrFetchModule(url: string, importer?: string) {\n-      return ssrFetchModule(server, url, importer)\n-    },\n     ssrFixStacktrace(e) {\n-      ssrFixStacktrace(e, moduleGraph)\n+      ssrFixStacktrace(e, server.environments.ssr.moduleGraph)\n     },\n     ssrRewriteStacktrace(stack: string) {\n-      return ssrRewriteStacktrace(stack, moduleGraph)\n+      return ssrRewriteStacktrace(stack, server.environments.ssr.moduleGraph)",
        "comment_created_at": "2024-08-20T03:34:23+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I think we can deprecate these two methods as well. When migrated from `ssrLoadModule` to `ModuleRunner`, these APIs won't need to be called anymore as the `ModuleRunner` will interpret sourcemaps and rewrite the error stacks.",
        "pr_file_module": null
      },
      {
        "comment_id": "1724004161",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/server/index.ts",
        "discussion_id": "1722642303",
        "commented_code": "@@ -563,20 +569,36 @@ export async function _createServer(\n       return devHtmlTransformFn(server, url, html, originalUrl)\n     },\n     async ssrLoadModule(url, opts?: { fixStacktrace?: boolean }) {\n+      warnFutureDeprecation(config, 'ssrLoadModule')\n       return ssrLoadModule(url, server, undefined, opts?.fixStacktrace)\n     },\n-    async ssrFetchModule(url: string, importer?: string) {\n-      return ssrFetchModule(server, url, importer)\n-    },\n     ssrFixStacktrace(e) {\n-      ssrFixStacktrace(e, moduleGraph)\n+      ssrFixStacktrace(e, server.environments.ssr.moduleGraph)\n     },\n     ssrRewriteStacktrace(stack: string) {\n-      return ssrRewriteStacktrace(stack, moduleGraph)\n+      return ssrRewriteStacktrace(stack, server.environments.ssr.moduleGraph)",
        "comment_created_at": "2024-08-20T21:37:32+00:00",
        "comment_author": "patak-dev",
        "comment_body": "Agreed. The idea is to avoid deprecations warnings for current methods in Vite 6, and then add them in a future 6.x minor (at the same time we remove the experimental label from Environment API).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1740169432",
    "pr_number": 16471,
    "pr_file": "packages/vite/src/node/server/middlewares/static.ts",
    "created_at": "2024-09-01T17:53:58+00:00",
    "commented_code": "url: string,\n   server: ViteDevServer,\n ): boolean {\n-  if (!server.config.server.fs.strict) return true\n+  const { config } = server\n+  if (!config.server.fs.strict) return true\n+  const filePath = fsPathFromUrl(url)\n+  return isFileLoadingAllowed(config, filePath)\n+}\n \n-  const file = fsPathFromUrl(url)\n+function isUriInFilePath(uri: string, filePath: string) {\n+  return isSameFileUri(uri, filePath) || isParentDirectory(uri, filePath)\n+}\n \n-  if (server._fsDenyGlob(file)) return false\n+export function isFileLoadingAllowed(\n+  config: ResolvedConfig,\n+  filePath: string,\n+): boolean {",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1740169432",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/server/middlewares/static.ts",
        "discussion_id": "1740169432",
        "commented_code": "@@ -211,20 +212,29 @@ export function isFileServingAllowed(\n   url: string,\n   server: ViteDevServer,\n ): boolean {\n-  if (!server.config.server.fs.strict) return true\n+  const { config } = server\n+  if (!config.server.fs.strict) return true\n+  const filePath = fsPathFromUrl(url)\n+  return isFileLoadingAllowed(config, filePath)\n+}\n \n-  const file = fsPathFromUrl(url)\n+function isUriInFilePath(uri: string, filePath: string) {\n+  return isSameFileUri(uri, filePath) || isParentDirectory(uri, filePath)\n+}\n \n-  if (server._fsDenyGlob(file)) return false\n+export function isFileLoadingAllowed(\n+  config: ResolvedConfig,\n+  filePath: string,\n+): boolean {",
        "comment_created_at": "2024-09-01T17:53:58+00:00",
        "comment_author": "bluwy",
        "comment_body": "Looks like this is being exported, following `isFileServingAllowed` which was already exported in main. But the signature is different.\n\n```ts\nfunction isFileServingAllowed(\n  url: string,\n  server: ViteDevServer,\n): boolean\n```\n\nDo we want to align this? Should we overload `isFileServingAllowed` to accept `config: ResolvedConfig, url: string` and deprecate the old function signature?",
        "pr_file_module": null
      },
      {
        "comment_id": "1741225179",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/server/middlewares/static.ts",
        "discussion_id": "1740169432",
        "commented_code": "@@ -211,20 +212,29 @@ export function isFileServingAllowed(\n   url: string,\n   server: ViteDevServer,\n ): boolean {\n-  if (!server.config.server.fs.strict) return true\n+  const { config } = server\n+  if (!config.server.fs.strict) return true\n+  const filePath = fsPathFromUrl(url)\n+  return isFileLoadingAllowed(config, filePath)\n+}\n \n-  const file = fsPathFromUrl(url)\n+function isUriInFilePath(uri: string, filePath: string) {\n+  return isSameFileUri(uri, filePath) || isParentDirectory(uri, filePath)\n+}\n \n-  if (server._fsDenyGlob(file)) return false\n+export function isFileLoadingAllowed(\n+  config: ResolvedConfig,\n+  filePath: string,\n+): boolean {",
        "comment_created_at": "2024-09-02T19:56:41+00:00",
        "comment_author": "sheremet-va",
        "comment_body": "I think aligning with existing signature is better than deprecating. There is really no reason to deprecate here. Just an oversight I think",
        "pr_file_module": null
      },
      {
        "comment_id": "1741227766",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/server/middlewares/static.ts",
        "discussion_id": "1740169432",
        "commented_code": "@@ -211,20 +212,29 @@ export function isFileServingAllowed(\n   url: string,\n   server: ViteDevServer,\n ): boolean {\n-  if (!server.config.server.fs.strict) return true\n+  const { config } = server\n+  if (!config.server.fs.strict) return true\n+  const filePath = fsPathFromUrl(url)\n+  return isFileLoadingAllowed(config, filePath)\n+}\n \n-  const file = fsPathFromUrl(url)\n+function isUriInFilePath(uri: string, filePath: string) {\n+  return isSameFileUri(uri, filePath) || isParentDirectory(uri, filePath)\n+}\n \n-  if (server._fsDenyGlob(file)) return false\n+export function isFileLoadingAllowed(\n+  config: ResolvedConfig,\n+  filePath: string,\n+): boolean {",
        "comment_created_at": "2024-09-02T20:04:40+00:00",
        "comment_author": "patak-dev",
        "comment_body": "The idea for the new signature is:\r\n1. we use this in `transformRequest` where we no longer have access to the `server`. The server was not used at all, only the `config` is needed here.\r\n2. we have the `filePath` when we use it, we don't need to call `fsPathFromUrl`\r\n\r\nAt least internally, we needed this new function. We don't need to expose this new signature in this PR though. And we certainly don't want to deprecate the old one at this point. We can leave the new one as internal, and then decide later on if we want to improve on this API (I think in general it is better to pass a config instead of the whole server if that's enough)",
        "pr_file_module": null
      },
      {
        "comment_id": "1741234581",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/server/middlewares/static.ts",
        "discussion_id": "1740169432",
        "commented_code": "@@ -211,20 +212,29 @@ export function isFileServingAllowed(\n   url: string,\n   server: ViteDevServer,\n ): boolean {\n-  if (!server.config.server.fs.strict) return true\n+  const { config } = server\n+  if (!config.server.fs.strict) return true\n+  const filePath = fsPathFromUrl(url)\n+  return isFileLoadingAllowed(config, filePath)\n+}\n \n-  const file = fsPathFromUrl(url)\n+function isUriInFilePath(uri: string, filePath: string) {\n+  return isSameFileUri(uri, filePath) || isParentDirectory(uri, filePath)\n+}\n \n-  if (server._fsDenyGlob(file)) return false\n+export function isFileLoadingAllowed(\n+  config: ResolvedConfig,\n+  filePath: string,\n+): boolean {",
        "comment_created_at": "2024-09-02T20:25:43+00:00",
        "comment_author": "sheremet-va",
        "comment_body": "I think it was exposed because it is needed in Vitest for example. I thought the problem was only with the order of arguments to be honest \ud83d\ude04 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1741237071",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/server/middlewares/static.ts",
        "discussion_id": "1740169432",
        "commented_code": "@@ -211,20 +212,29 @@ export function isFileServingAllowed(\n   url: string,\n   server: ViteDevServer,\n ): boolean {\n-  if (!server.config.server.fs.strict) return true\n+  const { config } = server\n+  if (!config.server.fs.strict) return true\n+  const filePath = fsPathFromUrl(url)\n+  return isFileLoadingAllowed(config, filePath)\n+}\n \n-  const file = fsPathFromUrl(url)\n+function isUriInFilePath(uri: string, filePath: string) {\n+  return isSameFileUri(uri, filePath) || isParentDirectory(uri, filePath)\n+}\n \n-  if (server._fsDenyGlob(file)) return false\n+export function isFileLoadingAllowed(\n+  config: ResolvedConfig,\n+  filePath: string,\n+): boolean {",
        "comment_created_at": "2024-09-02T20:33:18+00:00",
        "comment_author": "patak-dev",
        "comment_body": "Ah! Ya, now I remember you exposed it. About the order, I think is better to pass the config first (same if you need to pass a server or environment). If we later need to add an extra param, this form avoids ending up with config in the middle.",
        "pr_file_module": null
      },
      {
        "comment_id": "1741614150",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/server/middlewares/static.ts",
        "discussion_id": "1740169432",
        "commented_code": "@@ -211,20 +212,29 @@ export function isFileServingAllowed(\n   url: string,\n   server: ViteDevServer,\n ): boolean {\n-  if (!server.config.server.fs.strict) return true\n+  const { config } = server\n+  if (!config.server.fs.strict) return true\n+  const filePath = fsPathFromUrl(url)\n+  return isFileLoadingAllowed(config, filePath)\n+}\n \n-  const file = fsPathFromUrl(url)\n+function isUriInFilePath(uri: string, filePath: string) {\n+  return isSameFileUri(uri, filePath) || isParentDirectory(uri, filePath)\n+}\n \n-  if (server._fsDenyGlob(file)) return false\n+export function isFileLoadingAllowed(\n+  config: ResolvedConfig,\n+  filePath: string,\n+): boolean {",
        "comment_created_at": "2024-09-03T08:04:47+00:00",
        "comment_author": "bluwy",
        "comment_body": "I think having `config` first is nice too, but if we want to align it, we'd have to change `isFileServingAllowed` to have the correct position and probably refer to `config` only since it doesn't need a reference to the `server` now too.",
        "pr_file_module": null
      },
      {
        "comment_id": "1742420577",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/server/middlewares/static.ts",
        "discussion_id": "1740169432",
        "commented_code": "@@ -211,20 +212,29 @@ export function isFileServingAllowed(\n   url: string,\n   server: ViteDevServer,\n ): boolean {\n-  if (!server.config.server.fs.strict) return true\n+  const { config } = server\n+  if (!config.server.fs.strict) return true\n+  const filePath = fsPathFromUrl(url)\n+  return isFileLoadingAllowed(config, filePath)\n+}\n \n-  const file = fsPathFromUrl(url)\n+function isUriInFilePath(uri: string, filePath: string) {\n+  return isSameFileUri(uri, filePath) || isParentDirectory(uri, filePath)\n+}\n \n-  if (server._fsDenyGlob(file)) return false\n+export function isFileLoadingAllowed(\n+  config: ResolvedConfig,\n+  filePath: string,\n+): boolean {",
        "comment_created_at": "2024-09-03T17:22:31+00:00",
        "comment_author": "patak-dev",
        "comment_body": "I was thinking about deprecating at one point `isFileServingAllowed` and only keep the new one later on, so we won't need to align then",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1740175331",
    "pr_number": 16471,
    "pr_file": "packages/vite/src/node/environment.ts",
    "created_at": "2024-09-01T18:39:13+00:00",
    "commented_code": "+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1740175331",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-01T18:39:13+00:00",
        "comment_author": "bluwy",
        "comment_body": "I vaguely remember a similar discussion, but is `ScanEnvironment` exposed to users? Should it be kept internal? I'm also not sure about `FutureCompatEnvironment`, I understand the intent but it kinda makes the API unnecessarily elaborate, like us supporting `command: 'serve' | 'build' | 'future-compat'` which `future-compat` is only there to discourage `!==` checks.\n\nIf I'm not missing something, I think we should instead document in the JSDoc that you should check it elaborately. If I do miss something, could it be `environment.mode: 'dev' | 'build' | string`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1741050899",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-02T15:09:20+00:00",
        "comment_author": "patak-dev",
        "comment_body": "We had a discussions with Pedro about knowing if you are being called during the scan phase [here](https://discord.com/channels/804011606160703521/831456449632534538/1278763329116049450). I think we need to expose an API to know this. The `ScanEnvironment` isn't the same as a `DevEnvironment` because it doesn't expose a `moduleGraph`. I think we can make it part of the API.\r\n\r\nAbout the `FutureCompatEnvironment` and the typing, I think the last one to touch this part was @ArnaudBarre. The idea is to allow plugins to do\r\n```js\r\nif (this.environment.mode === 'dev') {\r\n  this.environment.moduleGraph // this works without a cast\r\n}\r\n```\r\nWe could play with a different design though. Maybe if you have an idea here we could check it in a PR to see how it affects `this.environment` usage?",
        "pr_file_module": null
      },
      {
        "comment_id": "1741073035",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-02T15:32:39+00:00",
        "comment_author": "bluwy",
        "comment_body": "IIUC for remix, we don't exactly have to expose `ScanEnvironment`, they can still check with `environment.mode === 'scan'`? (so it's still internal)\r\n\r\nI did some test and it seems like we need a kind of `FutureCompatEnvironment` to have type narrowing work \ud83e\udd72 In that case, what do you think about:\r\n\r\n```ts\r\nexport type Environment =\r\n  | DevEnvironment\r\n  | BuildEnvironment\r\n  | UnknownEnvironment // `mode: \"unknown\"`\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1741085099",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-02T15:46:08+00:00",
        "comment_author": "patak-dev",
        "comment_body": "`UnknownEnvironment` sounds a lot better to me. I like it. About scan, what would be the type for it, thought?",
        "pr_file_module": null
      },
      {
        "comment_id": "1741105139",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-02T16:10:56+00:00",
        "comment_author": "bluwy",
        "comment_body": "We could still keep `ScanEnvironment` I'd imagine, as long as we don't expose it? Just that if some plugins wants to check if they're in scan mode, they can do:\r\n\r\n```ts\r\n// @ts-expect-error\r\nthis.environment.mode === 'scan'\r\n```\r\n\r\nAnd they'll not have intellisense of what the ScanEnvironment exposes, and we're free to modify it in the future.",
        "pr_file_module": null
      },
      {
        "comment_id": "1741107653",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-02T16:14:47+00:00",
        "comment_author": "bluwy",
        "comment_body": "Maybe all we need to do is this:\r\n```ts\r\nexport type Environment =\r\n  | DevEnvironment\r\n  | BuildEnvironment\r\n  | /** @internal */ ScanEnvironment\r\n  | FutureCompatEnvironment\r\n```\r\nand tweak the dts bundling to strip it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1741162334",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-02T18:07:51+00:00",
        "comment_author": "ArnaudBarre",
        "comment_body": "I'm ok with unknown too even if there is a bit more chance people try to do `if (this.environment.mode === 'unknown')` than `if (this.environment.mode === 'future-compat')`",
        "pr_file_module": null
      },
      {
        "comment_id": "1741211255",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-02T19:18:43+00:00",
        "comment_author": "patak-dev",
        "comment_body": "I'm not 100% bought into the current `ScanEnvironment`, mainly because if we ever want to have a scan environment during build, we would need to name it `BuildScanEnvironment` (I find the possibility remote given that we tried this direction and backtracked and rolldown is in the picture now, but anyways). So I'm ok making this internal for now.",
        "pr_file_module": null
      },
      {
        "comment_id": "1741618647",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-03T08:08:02+00:00",
        "comment_author": "bluwy",
        "comment_body": "Yeah it is kinda more likely to misunderstood `UnknownEnvironment` and compare with `=== 'unknown'` \ud83e\udd14 But if we're ok with it, I think it's a little cleaner and we can specifically document to not rely on this.",
        "pr_file_module": null
      },
      {
        "comment_id": "1741681382",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-03T08:49:48+00:00",
        "comment_author": "ArnaudBarre",
        "comment_body": "Yeah maybe a bit of documentation on how plugins should check if the right environment to run would be good! ",
        "pr_file_module": null
      },
      {
        "comment_id": "1742592614",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/environment.ts",
        "discussion_id": "1740175331",
        "commented_code": "@@ -0,0 +1,31 @@\n+import type { DevEnvironment } from './server/environment'\n+import type { BuildEnvironment } from './build'\n+import type { ScanEnvironment } from './optimizer/scan'\n+import type { FutureCompatEnvironment } from './baseEnvironment'\n+import type { PluginContext } from './plugin'\n+\n+export type Environment =\n+  | DevEnvironment\n+  | BuildEnvironment\n+  | ScanEnvironment\n+  | FutureCompatEnvironment",
        "comment_created_at": "2024-09-03T19:45:57+00:00",
        "comment_author": "patak-dev",
        "comment_body": "Thanks for implementing this Bjorn! https://github.com/vitejs/vite/pull/18008",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1740429158",
    "pr_number": 16471,
    "pr_file": "packages/vite/src/node/config.ts",
    "created_at": "2024-09-02T07:12:48+00:00",
    "commented_code": "cspNonce?: string\n }\n \n+export interface FutureOptions {\n+  /**\n+   * Emit warning messages for deprecated/will-deprecated features at runtime.\n+   *\n+   * Setting to `true` to enable all warnings\n+   */\n+  deprecationWarnings?: boolean | FutureDeprecationWarningsOptions\n+}",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1740429158",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1740429158",
        "commented_code": "@@ -298,6 +460,15 @@ export interface HTMLOptions {\n   cspNonce?: string\n }\n \n+export interface FutureOptions {\n+  /**\n+   * Emit warning messages for deprecated/will-deprecated features at runtime.\n+   *\n+   * Setting to `true` to enable all warnings\n+   */\n+  deprecationWarnings?: boolean | FutureDeprecationWarningsOptions\n+}",
        "comment_created_at": "2024-09-02T07:12:48+00:00",
        "comment_author": "bluwy",
        "comment_body": "This API feels a bit odd to me. Shouldn't the options in `future` be toggles to opting in to future behaviour, knowing that it's already breaking? The deprecated API should already be warned in runtime, and this new API would be to opt into the new behaviour disabling any warning before.\n\nIf the fear is that we don't particularly want to warn first (because we're uncertain), could we have the API as `future.featureName?: 'warn' | false` instead? `true` in the future you mean completely opting in to it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1741052677",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1740429158",
        "commented_code": "@@ -298,6 +460,15 @@ export interface HTMLOptions {\n   cspNonce?: string\n }\n \n+export interface FutureOptions {\n+  /**\n+   * Emit warning messages for deprecated/will-deprecated features at runtime.\n+   *\n+   * Setting to `true` to enable all warnings\n+   */\n+  deprecationWarnings?: boolean | FutureDeprecationWarningsOptions\n+}",
        "comment_created_at": "2024-09-02T15:11:12+00:00",
        "comment_author": "antfu",
        "comment_body": "I think last time we discussed was that we wanted Vite v6.0 to be as close to equivalent to v5.4 as much as possible for the end users (meaning we don't even throw warnings). This way we can get people moving to 6.0 smoothly without any changes (our first goal is to ensure there is no breakage with Environment API introduced internally. And then v6.1 or so we would started to prompting the ecosystem to move to the new API.\r\n\r\nBecause otherwise, if we throw the warnings too soon, people would feel pushed of the need to migrate. That will make the plugins and integration introduce breaking changes of \"Requires Vite 6 only\" too early before the ecosystem is ready. Does that make sense to you?\r\n\r\n`future.featureName?: 'warn' | false` is a little bit tricky, for features like Environment API, you can't really let users to toggle it. But more like prompting it too soon. I personally feel it doesn't conflicts with the semantic of \"future\", does it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1741088276",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16471,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1740429158",
        "commented_code": "@@ -298,6 +460,15 @@ export interface HTMLOptions {\n   cspNonce?: string\n }\n \n+export interface FutureOptions {\n+  /**\n+   * Emit warning messages for deprecated/will-deprecated features at runtime.\n+   *\n+   * Setting to `true` to enable all warnings\n+   */\n+  deprecationWarnings?: boolean | FutureDeprecationWarningsOptions\n+}",
        "comment_created_at": "2024-09-02T15:49:11+00:00",
        "comment_author": "bluwy",
        "comment_body": "> `future.featureName?: 'warn' | false` is a little bit tricky\r\n\r\nMaybe `false` is confusing here, but what I imagine is:\r\n- `\"warn\"` - we warn about deprecations\r\n- `true` - we break directly, and turn off any compat layer (could still warn if we want)\r\n- `false` & `undefined` - no effect. Not opt-ing in to test future APIs\r\n\r\nSo `false` isn't about disabling Environment API. The idea is mainly to flatten `deprecationWarnings.*` into `future.*` directly. That way `future` config has a consistent top-level keys of breaking features users can opt-in.\r\n\r\n1. If say we were to add another breaking feature in the future with deprecations already logged by default. Users can opt to force the breaking change. How would the `future` object look like?\r\n2. `deprecationWarnings` would be kinda an odd subgrouping of features that have deprecation warnings. If we want to have a hard breaking option for those features, how would the config look like too?",
        "pr_file_module": null
      }
    ]
  }
]