[
  {
    "discussion_id": "1825607684",
    "pr_number": 18550,
    "pr_file": "packages/vite/src/node/build.ts",
    "created_at": "2024-11-01T09:04:04+00:00",
    "commented_code": "// @ts-expect-error Fallback options instead of merging\n   const resolved: ResolvedBuildEnvironmentOptions = {\n-    target: 'modules',\n-    cssTarget: false,\n+    ...configDefaults.build,\n     ...userBuildEnvironmentOptions,\n     commonjsOptions: {\n-      include: [/node_modules/],\n-      extensions: ['.js', '.cjs'],\n+      ...configDefaults.build.commonjsOptions,\n       ...userBuildEnvironmentOptions.commonjsOptions,\n     },\n     dynamicImportVarsOptions: {\n-      warnOnError: true,\n-      exclude: [/node_modules/],\n+      ...configDefaults.build.dynamicImportVarsOptions,\n       ...userBuildEnvironmentOptions.dynamicImportVarsOptions,\n     },",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1825607684",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/build.ts",
        "discussion_id": "1825607684",
        "commented_code": "@@ -401,17 +401,14 @@ export function resolveBuildEnvironmentOptions(\n \n   // @ts-expect-error Fallback options instead of merging\n   const resolved: ResolvedBuildEnvironmentOptions = {\n-    target: 'modules',\n-    cssTarget: false,\n+    ...configDefaults.build,\n     ...userBuildEnvironmentOptions,\n     commonjsOptions: {\n-      include: [/node_modules/],\n-      extensions: ['.js', '.cjs'],\n+      ...configDefaults.build.commonjsOptions,\n       ...userBuildEnvironmentOptions.commonjsOptions,\n     },\n     dynamicImportVarsOptions: {\n-      warnOnError: true,\n-      exclude: [/node_modules/],\n+      ...configDefaults.build.dynamicImportVarsOptions,\n       ...userBuildEnvironmentOptions.dynamicImportVarsOptions,\n     },",
        "comment_created_at": "2024-11-01T09:04:04+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "Probably needs a helper function that merges recursively but replaces arrays, slightly different from `mergeConfig`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1827954628",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/build.ts",
        "discussion_id": "1825607684",
        "commented_code": "@@ -401,17 +401,14 @@ export function resolveBuildEnvironmentOptions(\n \n   // @ts-expect-error Fallback options instead of merging\n   const resolved: ResolvedBuildEnvironmentOptions = {\n-    target: 'modules',\n-    cssTarget: false,\n+    ...configDefaults.build,\n     ...userBuildEnvironmentOptions,\n     commonjsOptions: {\n-      include: [/node_modules/],\n-      extensions: ['.js', '.cjs'],\n+      ...configDefaults.build.commonjsOptions,\n       ...userBuildEnvironmentOptions.commonjsOptions,\n     },\n     dynamicImportVarsOptions: {\n-      warnOnError: true,\n-      exclude: [/node_modules/],\n+      ...configDefaults.build.dynamicImportVarsOptions,\n       ...userBuildEnvironmentOptions.dynamicImportVarsOptions,\n     },",
        "comment_created_at": "2024-11-04T15:47:25+00:00",
        "comment_author": "patak-dev",
        "comment_body": "That would be a fantastic refactoring \ud83d\udcaf ",
        "pr_file_module": null
      },
      {
        "comment_id": "1828777030",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/build.ts",
        "discussion_id": "1825607684",
        "commented_code": "@@ -401,17 +401,14 @@ export function resolveBuildEnvironmentOptions(\n \n   // @ts-expect-error Fallback options instead of merging\n   const resolved: ResolvedBuildEnvironmentOptions = {\n-    target: 'modules',\n-    cssTarget: false,\n+    ...configDefaults.build,\n     ...userBuildEnvironmentOptions,\n     commonjsOptions: {\n-      include: [/node_modules/],\n-      extensions: ['.js', '.cjs'],\n+      ...configDefaults.build.commonjsOptions,\n       ...userBuildEnvironmentOptions.commonjsOptions,\n     },\n     dynamicImportVarsOptions: {\n-      warnOnError: true,\n-      exclude: [/node_modules/],\n+      ...configDefaults.build.dynamicImportVarsOptions,\n       ...userBuildEnvironmentOptions.dynamicImportVarsOptions,\n     },",
        "comment_created_at": "2024-11-05T06:07:10+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "Added `mergeWithDefaults` function \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1825608289",
    "pr_number": 18550,
    "pr_file": "packages/vite/src/node/config.ts",
    "created_at": "2024-11-01T09:04:45+00:00",
    "commented_code": "} & PluginHookUtils\n >\n \n+// inferred ones are omitted\n+export const configDefaults = Object.freeze({",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1825608289",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1825608289",
        "commented_code": "@@ -589,6 +587,166 @@ export type ResolvedConfig = Readonly<\n   } & PluginHookUtils\n >\n \n+// inferred ones are omitted\n+export const configDefaults = Object.freeze({",
        "comment_created_at": "2024-11-01T09:04:45+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "There's many inferred options. Is it fine to simply omit it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1825936533",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1825608289",
        "commented_code": "@@ -589,6 +587,166 @@ export type ResolvedConfig = Readonly<\n   } & PluginHookUtils\n >\n \n+// inferred ones are omitted\n+export const configDefaults = Object.freeze({",
        "comment_created_at": "2024-11-01T15:11:33+00:00",
        "comment_author": "bluwy",
        "comment_body": "I was initially thinking that we'd only export the defaults that're special, like hardcoded array of values. That way we solve the problem of users wanting to extend it rather than completely replacing it.\r\n\r\nI'm not sure yet about exposing all the defaults in the object. It seems to be a lot to keep track of, and like you mention here, there's some that's inferred.",
        "pr_file_module": null
      },
      {
        "comment_id": "1827962685",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1825608289",
        "commented_code": "@@ -589,6 +587,166 @@ export type ResolvedConfig = Readonly<\n   } & PluginHookUtils\n >\n \n+// inferred ones are omitted\n+export const configDefaults = Object.freeze({",
        "comment_created_at": "2024-11-04T15:51:48+00:00",
        "comment_author": "patak-dev",
        "comment_body": "I'm fine with omitting the inferred ones, maybe adding a comment about what how that inference works. My vote goes for the current implementation in the PR. I think once the \"merge\" helper is in, it is going to be easier to work with.",
        "pr_file_module": null
      },
      {
        "comment_id": "1828918671",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1825608289",
        "commented_code": "@@ -589,6 +587,166 @@ export type ResolvedConfig = Readonly<\n   } & PluginHookUtils\n >\n \n+// inferred ones are omitted\n+export const configDefaults = Object.freeze({",
        "comment_created_at": "2024-11-05T08:22:15+00:00",
        "comment_author": "bluwy",
        "comment_body": "What kind of merge helper are you referring to? What I guess I'm concerned about with exposing tons of options this way is that people could unknowingly used it like `vite.build(configDefaults)` or use it to merge entire configs which could be wasteful or lead to incorrect merges (like arrays). Hence I was thinking to be a bit conservative here \ud83e\udd14 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1830029298",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1825608289",
        "commented_code": "@@ -589,6 +587,166 @@ export type ResolvedConfig = Readonly<\n   } & PluginHookUtils\n >\n \n+// inferred ones are omitted\n+export const configDefaults = Object.freeze({",
        "comment_created_at": "2024-11-05T21:32:00+00:00",
        "comment_author": "patak-dev",
        "comment_body": "I was thinking on the `mergeWithDefaults` that Sapphi implemented. We could prevent `vite.build(configDefaults)` by checking the instance. But you're right that they may do something like: `vite.build({ ...configDefaults, foo: 'bar' })`.\r\n\r\nI don't think that current users would ever try to do something like this, but depending how we document `configDefaults`, I see your point.\r\n\r\nIt feels a bit cumbersome to use if we expose a ton of variables like `CONFIG_DEFAULTS_RESOLVE_CONDITIONS`. Imagine having to import 3 or 4 of these.\r\n\r\nMaybe we could make all the properties in the public `configDefaults` non-enumerable so they can not iterate over the keys and the user needs to access them one by one. We should get the same properties as the individual variables but with better typing and easier to import. We would still have a `internalConfigDefaults` that we can iterate to be used in `mergeWithDefaults`",
        "pr_file_module": null
      },
      {
        "comment_id": "1830301357",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1825608289",
        "commented_code": "@@ -589,6 +587,166 @@ export type ResolvedConfig = Readonly<\n   } & PluginHookUtils\n >\n \n+// inferred ones are omitted\n+export const configDefaults = Object.freeze({",
        "comment_created_at": "2024-11-06T02:09:59+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I'm fine with trimming down the values for the exposed object. I think the object form makes it easier for users to find out the value for each options. But given that we already need to expose `mainFields` and `conditions` separately, maybe that advantage is gone.",
        "pr_file_module": null
      },
      {
        "comment_id": "1830419931",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1825608289",
        "commented_code": "@@ -589,6 +587,166 @@ export type ResolvedConfig = Readonly<\n   } & PluginHookUtils\n >\n \n+// inferred ones are omitted\n+export const configDefaults = Object.freeze({",
        "comment_created_at": "2024-11-06T05:46:13+00:00",
        "comment_author": "bluwy",
        "comment_body": "`mergeWithDefaults` makes sense to me, I think we needed that elsewhere regardless of this PR too.\r\n\r\nI guess given:\r\n1. We couldn't expose all defaults as some are inferred.\r\n2. Some defaults are based on the client / server consumer (`mainFields` and `conditions`), which Sapphi has now refactored as `DEFAULT_CLIENT_MAIN_FIELDS` etc (https://github.com/vitejs/vite/pull/18550#discussion_r1830293791)\r\n3. And personally I think I'm missing the usecase where users would want to know the defaults via `configDefaults`. Isn't the problem we want to solve here that if someone wants to add a new condition on `resolve.conditions` but want to extend from Vite defaults, they can use this new export? What are the usecase for e.g. `configDefaults.base`?\r\n\r\nI think I'm leaning more on simply exporting the constants like what Sapphi has now with `DEFAULT_CLIENT_MAIN_FIELDS`. We only export the ones that solves the usecase I mentioned in no3. \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1830769584",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1825608289",
        "commented_code": "@@ -589,6 +587,166 @@ export type ResolvedConfig = Readonly<\n   } & PluginHookUtils\n >\n \n+// inferred ones are omitted\n+export const configDefaults = Object.freeze({",
        "comment_created_at": "2024-11-06T10:33:25+00:00",
        "comment_author": "patak-dev",
        "comment_body": "Maybe it is a good idea to merge only the refactoring that makes things cleaner internally for now, and then we can discuss how to expose the defaults in another PR. Maybe we don't need to do this for Vite 6, people can still copy and past the defaults from the docs (it isn't the same though, that will fix the values, instead of adding an extra to the defaults that is what we have now but it may be ok)",
        "pr_file_module": null
      },
      {
        "comment_id": "1831972475",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18550,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1825608289",
        "commented_code": "@@ -589,6 +587,166 @@ export type ResolvedConfig = Readonly<\n   } & PluginHookUtils\n >\n \n+// inferred ones are omitted\n+export const configDefaults = Object.freeze({",
        "comment_created_at": "2024-11-07T02:38:42+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I pushed a commit that removes the new exports so that we can separate the discussion about exposing the default values. \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1804478572",
    "pr_number": 18358,
    "pr_file": "packages/vite/src/node/config.ts",
    "created_at": "2024-10-17T10:00:36+00:00",
    "commented_code": "exclude: optimizeDeps.exclude ?? [],\n     needsInterop: optimizeDeps.needsInterop ?? [],\n     extensions: optimizeDeps.extensions ?? [],\n-    noDiscovery: optimizeDeps.noDiscovery ?? consumer !== 'client',\n+    noDiscovery:\n+      optimizeDeps.noDiscovery ??\n+      // If the consumer is not the client env (which default discovery entrypoint is `index.html`)\n+      // and there are no entries from where to start crawling then disable discovery\n+      (consumer !== 'client' && !optimizeDeps.entries?.length),",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1804478572",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18358,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1804478572",
        "commented_code": "@@ -792,7 +792,11 @@ function resolveDepOptimizationOptions(\n     exclude: optimizeDeps.exclude ?? [],\n     needsInterop: optimizeDeps.needsInterop ?? [],\n     extensions: optimizeDeps.extensions ?? [],\n-    noDiscovery: optimizeDeps.noDiscovery ?? consumer !== 'client',\n+    noDiscovery:\n+      optimizeDeps.noDiscovery ??\n+      // If the consumer is not the client env (which default discovery entrypoint is `index.html`)\n+      // and there are no entries from where to start crawling then disable discovery\n+      (consumer !== 'client' && !optimizeDeps.entries?.length),",
        "comment_created_at": "2024-10-17T10:00:36+00:00",
        "comment_author": "patak-dev",
        "comment_body": "I think it would be better to let server environments explicitly opt-in here setting `noDiscovery: false` to avoid making the default more complex.",
        "pr_file_module": null
      },
      {
        "comment_id": "1804504390",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18358,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "1804478572",
        "commented_code": "@@ -792,7 +792,11 @@ function resolveDepOptimizationOptions(\n     exclude: optimizeDeps.exclude ?? [],\n     needsInterop: optimizeDeps.needsInterop ?? [],\n     extensions: optimizeDeps.extensions ?? [],\n-    noDiscovery: optimizeDeps.noDiscovery ?? consumer !== 'client',\n+    noDiscovery:\n+      optimizeDeps.noDiscovery ??\n+      // If the consumer is not the client env (which default discovery entrypoint is `index.html`)\n+      // and there are no entries from where to start crawling then disable discovery\n+      (consumer !== 'client' && !optimizeDeps.entries?.length),",
        "comment_created_at": "2024-10-17T10:20:08+00:00",
        "comment_author": "dario-piotrowicz",
        "comment_body": "Thanks for the suggestion, it makes sense to me \ud83d\ude42\r\n\r\nI've updated this \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "876563542",
    "pr_number": 8217,
    "pr_file": "packages/vite/src/node/config.ts",
    "created_at": "2022-05-19T03:30:28+00:00",
    "commented_code": "const optimizeDeps = config.optimizeDeps || {}\n \n+  config.isSPA ??= true",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "876563542",
        "repo_full_name": "vitejs/vite",
        "pr_number": 8217,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "876563542",
        "commented_code": "@@ -469,6 +478,8 @@ export async function resolveConfig(\n \n   const optimizeDeps = config.optimizeDeps || {}\n \n+  config.isSPA ??= true",
        "comment_created_at": "2022-05-19T03:30:28+00:00",
        "comment_author": "benmccann",
        "comment_body": "I was thinking that you'd have something like `isSPA: true,` below in the creation of `resolved` and then you'd use `resolved` when checking the value of `isSPA`",
        "pr_file_module": null
      },
      {
        "comment_id": "876797366",
        "repo_full_name": "vitejs/vite",
        "pr_number": 8217,
        "pr_file": "packages/vite/src/node/config.ts",
        "discussion_id": "876563542",
        "commented_code": "@@ -469,6 +478,8 @@ export async function resolveConfig(\n \n   const optimizeDeps = config.optimizeDeps || {}\n \n+  config.isSPA ??= true",
        "comment_created_at": "2022-05-19T08:54:55+00:00",
        "comment_author": "brillout",
        "comment_body": "Actually, I've just pushed a commit to resolve `isSPA`'s default value at the very end, just before it's used.\r\n\r\nThis provides more flexibility: it allows the framework to overwrite Vite's default value while enabling the user to overwrite the framework provided default value.\r\n\r\nLet me elaborate.\r\n\r\nFor example, this is how vite-plugin-ssr and Telefunc are ensuring that the server and preview default port is `3000` for Vite 3 (despites the fact that Vite 3 changed the default port from `3000` to `5173` which I don't like as I find it difficult to remember):\r\n\r\nhttps://github.com/vikejs/telefunc/blob/62d2753fe452e3bb5981da110b7e1170b35b1c61/telefunc/node/vite/plugins/previewConfig.ts#L23-L27\r\n\r\nThe neat thing here is that user can still set a different port.\r\n\r\nThat works because Vite resolves the default value of `config.server.port` and `config.preview.port` at the very end:\r\n\r\nhttps://github.com/vitejs/vite/blob/e37a51dc767fe3fcf2eb49f7f76eab63d90f777a/packages/vite/src/node/server/index.ts#L572-L580\r\nhttps://github.com/vitejs/vite/blob/e37a51dc767fe3fcf2eb49f7f76eab63d90f777a/packages/vite/src/node/preview.ts#L116-L122\r\n\r\nI'm marking this conversation as resolved but let me know if you disagree and I'll unresolve it.",
        "pr_file_module": null
      }
    ]
  }
]