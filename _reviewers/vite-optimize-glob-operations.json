[
  {
    "discussion_id": "1781249196",
    "pr_number": 18243,
    "pr_file": "packages/vite/src/node/optimizer/resolve.ts",
    "created_at": "2024-09-30T14:28:14+00:00",
    "commented_code": ")\n \n           possibleExportPaths.push(\n-            ...glob\n-              .sync(exportValuePattern, {\n-                cwd: pkgData.dir,\n-                ignore: ['node_modules'],\n-              })\n+            ...globSync(exportValuePattern, {\n+              cwd: pkgData.dir,\n+              expandDirectories: false,",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1781249196",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18243,
        "pr_file": "packages/vite/src/node/optimizer/resolve.ts",
        "discussion_id": "1781249196",
        "commented_code": "@@ -89,22 +90,12 @@ export function expandGlobIds(id: string, config: ResolvedConfig): string[] {\n           )\n \n           possibleExportPaths.push(\n-            ...glob\n-              .sync(exportValuePattern, {\n-                cwd: pkgData.dir,\n-                ignore: ['node_modules'],\n-              })\n+            ...globSync(exportValuePattern, {\n+              cwd: pkgData.dir,\n+              expandDirectories: false,",
        "comment_created_at": "2024-09-30T14:28:14+00:00",
        "comment_author": "pralkarz",
        "comment_body": "`tinyglobby` not only aims to replace `fast-glob`, but also `globby`. The latter expands directories by default (and that's what `tinyglobby` defaults to), the former doesn't, hence we need to pass this option every time.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1781982595",
    "pr_number": 18243,
    "pr_file": "packages/vite/src/node/plugins/css.ts",
    "created_at": "2024-10-01T00:36:23+00:00",
    "commented_code": "// https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#3-dependencies\n         const { dir, glob: globPattern = '**' } = message\n         const pattern =\n-          glob.escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n+          escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n           `/` +\n           globPattern\n-        const files = glob.sync(pattern, {\n+        const files = globSync(pattern, {\n+          absolute: true,",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1781982595",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18243,
        "pr_file": "packages/vite/src/node/plugins/css.ts",
        "discussion_id": "1781982595",
        "commented_code": "@@ -1406,10 +1406,12 @@ async function compileCSS(\n         // https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#3-dependencies\n         const { dir, glob: globPattern = '**' } = message\n         const pattern =\n-          glob.escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n+          escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n           `/` +\n           globPattern\n-        const files = glob.sync(pattern, {\n+        const files = globSync(pattern, {\n+          absolute: true,",
        "comment_created_at": "2024-10-01T00:36:23+00:00",
        "comment_author": "pralkarz",
        "comment_body": "Due to the way we construct the pattern above, we expect absolute paths here, but `tinyglobby` (through the underlying `fdir`) returns matches relative to CWD even with an absolute pattern, so we force the output paths to be absolute through this option.",
        "pr_file_module": null
      },
      {
        "comment_id": "1781985814",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18243,
        "pr_file": "packages/vite/src/node/plugins/css.ts",
        "discussion_id": "1781982595",
        "commented_code": "@@ -1406,10 +1406,12 @@ async function compileCSS(\n         // https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#3-dependencies\n         const { dir, glob: globPattern = '**' } = message\n         const pattern =\n-          glob.escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n+          escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n           `/` +\n           globPattern\n-        const files = glob.sync(pattern, {\n+        const files = globSync(pattern, {\n+          absolute: true,",
        "comment_created_at": "2024-10-01T00:44:23+00:00",
        "comment_author": "SuperchupuDev",
        "comment_body": "FYI you might want to set the `cwd` to the dir before `globPattern`, otherwise optimizations might be skipped and things could heavily slow down ðŸ˜…\r\n\r\nif you do that you can also avoid having to use an absolute path as a pattern",
        "pr_file_module": null
      },
      {
        "comment_id": "1782569452",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18243,
        "pr_file": "packages/vite/src/node/plugins/css.ts",
        "discussion_id": "1781982595",
        "commented_code": "@@ -1406,10 +1406,12 @@ async function compileCSS(\n         // https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#3-dependencies\n         const { dir, glob: globPattern = '**' } = message\n         const pattern =\n-          glob.escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n+          escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n           `/` +\n           globPattern\n-        const files = glob.sync(pattern, {\n+        const files = globSync(pattern, {\n+          absolute: true,",
        "comment_created_at": "2024-10-01T11:04:17+00:00",
        "comment_author": "pralkarz",
        "comment_body": "@sapphi-red Don't we need absolute matches here for the deps to work correctly?",
        "pr_file_module": null
      },
      {
        "comment_id": "1783755629",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18243,
        "pr_file": "packages/vite/src/node/plugins/css.ts",
        "discussion_id": "1781982595",
        "commented_code": "@@ -1406,10 +1406,12 @@ async function compileCSS(\n         // https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#3-dependencies\n         const { dir, glob: globPattern = '**' } = message\n         const pattern =\n-          glob.escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n+          escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n           `/` +\n           globPattern\n-        const files = glob.sync(pattern, {\n+        const files = globSync(pattern, {\n+          absolute: true,",
        "comment_created_at": "2024-10-02T02:01:23+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "We need the returned `files` to be absolute. I thought we can utilize the `cwd` option like:\r\n```ts\r\nconst files = globSync(globPattern, {\r\n  cwd: path.resolve(path.dirname(id), dir),\r\n  absolute: true,\r\n  expandDirectories: false,\r\n  ignore: ['**/node_modules/**'],\r\n})\r\n```\r\nI think this is what @SuperchupuDev suggested.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1784326250",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18243,
        "pr_file": "packages/vite/src/node/plugins/css.ts",
        "discussion_id": "1781982595",
        "commented_code": "@@ -1406,10 +1406,12 @@ async function compileCSS(\n         // https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#3-dependencies\n         const { dir, glob: globPattern = '**' } = message\n         const pattern =\n-          glob.escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n+          escapePath(normalizePath(path.resolve(path.dirname(id), dir))) +\n           `/` +\n           globPattern\n-        const files = glob.sync(pattern, {\n+        const files = globSync(pattern, {\n+          absolute: true,",
        "comment_created_at": "2024-10-02T11:20:19+00:00",
        "comment_author": "pralkarz",
        "comment_body": "Ah, I see, my bad! Pushed the suggested change.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "834223118",
    "pr_number": 7436,
    "pr_file": "packages/vite/src/node/importGlob.ts",
    "created_at": "2022-03-24T11:52:39+00:00",
    "commented_code": "err.pos = pos\n   throw err\n }\n+\n+function glob(pattern: string, cwd: string): string[] {\n+  const rebase = rebaseGlobPattern(pattern)\n+  if (rebase !== '') {\n+    pattern = pattern.slice(rebase.length)\n+    cwd = path.posix.join(cwd, rebase)\n+  }\n+\n+  let files = fastGlob.sync(pattern, {\n+    cwd,\n+    ignore: ['**/node_modules/**']\n+  })\n+\n+  if (rebase !== '') {\n+    files = files.map((file) => path.posix.join(rebase, file))\n+  }\n+\n+  return files\n+}\n+\n+// Make `ignore: ['**/node_modules/**']` work with patterns that include `node_modules/`.\n+// E.g. `import.meta.glob('node_modules/framework/**/*.page.js')`.\n+function rebaseGlobPattern(pattern: string) {\n+  let rebase = ''\n+  if (pattern.includes('/node_modules/')) {\n+    rebase =\n+      pattern.split('/node_modules/').slice(0, -1).join('/node_modules/') +\n+      '/node_modules/'\n+  } else if (pattern.startsWith('node_modules/')) {\n+    rebase = 'node_modules/'\n+  }\n+  return rebase\n+}",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "834223118",
        "repo_full_name": "vitejs/vite",
        "pr_number": 7436,
        "pr_file": "packages/vite/src/node/importGlob.ts",
        "discussion_id": "834223118",
        "commented_code": "@@ -261,3 +257,36 @@ function error(pos: number) {\n   err.pos = pos\n   throw err\n }\n+\n+function glob(pattern: string, cwd: string): string[] {\n+  const rebase = rebaseGlobPattern(pattern)\n+  if (rebase !== '') {\n+    pattern = pattern.slice(rebase.length)\n+    cwd = path.posix.join(cwd, rebase)\n+  }\n+\n+  let files = fastGlob.sync(pattern, {\n+    cwd,\n+    ignore: ['**/node_modules/**']\n+  })\n+\n+  if (rebase !== '') {\n+    files = files.map((file) => path.posix.join(rebase, file))\n+  }\n+\n+  return files\n+}\n+\n+// Make `ignore: ['**/node_modules/**']` work with patterns that include `node_modules/`.\n+// E.g. `import.meta.glob('node_modules/framework/**/*.page.js')`.\n+function rebaseGlobPattern(pattern: string) {\n+  let rebase = ''\n+  if (pattern.includes('/node_modules/')) {\n+    rebase =\n+      pattern.split('/node_modules/').slice(0, -1).join('/node_modules/') +\n+      '/node_modules/'\n+  } else if (pattern.startsWith('node_modules/')) {\n+    rebase = 'node_modules/'\n+  }\n+  return rebase\n+}",
        "comment_created_at": "2022-03-24T11:52:39+00:00",
        "comment_author": "patak-dev",
        "comment_body": "Maybe we could use a regex here?\r\n\r\n```suggestion\r\nconst nodeModulesRE = /.*\\/?node_modules\\//\r\nfunction rebaseGlobPattern(pattern: string) {\r\n  return pattern.match(nodeModulesRE)?.[0] ?? ''\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "834335516",
        "repo_full_name": "vitejs/vite",
        "pr_number": 7436,
        "pr_file": "packages/vite/src/node/importGlob.ts",
        "discussion_id": "834223118",
        "commented_code": "@@ -261,3 +257,36 @@ function error(pos: number) {\n   err.pos = pos\n   throw err\n }\n+\n+function glob(pattern: string, cwd: string): string[] {\n+  const rebase = rebaseGlobPattern(pattern)\n+  if (rebase !== '') {\n+    pattern = pattern.slice(rebase.length)\n+    cwd = path.posix.join(cwd, rebase)\n+  }\n+\n+  let files = fastGlob.sync(pattern, {\n+    cwd,\n+    ignore: ['**/node_modules/**']\n+  })\n+\n+  if (rebase !== '') {\n+    files = files.map((file) => path.posix.join(rebase, file))\n+  }\n+\n+  return files\n+}\n+\n+// Make `ignore: ['**/node_modules/**']` work with patterns that include `node_modules/`.\n+// E.g. `import.meta.glob('node_modules/framework/**/*.page.js')`.\n+function rebaseGlobPattern(pattern: string) {\n+  let rebase = ''\n+  if (pattern.includes('/node_modules/')) {\n+    rebase =\n+      pattern.split('/node_modules/').slice(0, -1).join('/node_modules/') +\n+      '/node_modules/'\n+  } else if (pattern.startsWith('node_modules/')) {\n+    rebase = 'node_modules/'\n+  }\n+  return rebase\n+}",
        "comment_created_at": "2022-03-24T13:56:06+00:00",
        "comment_author": "brillout",
        "comment_body": "Done. I also squashed `rebaseGlobPattern()` with `glob().",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1749928859",
    "pr_number": 17940,
    "pr_file": "packages/vite/src/node/plugins/dynamicImportVars.ts",
    "created_at": "2024-09-09T09:35:45+00:00",
    "commented_code": "let newRawPattern = posix.relative(\n     posix.dirname(importer),\n-    await toAbsoluteGlob(rawPattern, root, importer, resolve),\n+    normalizeGlobPattern(\n+      await toAbsoluteGlob(rawPattern, root, importer, resolve),\n+    ),",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1749928859",
        "repo_full_name": "vitejs/vite",
        "pr_number": 17940,
        "pr_file": "packages/vite/src/node/plugins/dynamicImportVars.ts",
        "discussion_id": "1749928859",
        "commented_code": "@@ -144,7 +148,9 @@ export async function transformDynamicImport(\n \n   let newRawPattern = posix.relative(\n     posix.dirname(importer),\n-    await toAbsoluteGlob(rawPattern, root, importer, resolve),\n+    normalizeGlobPattern(\n+      await toAbsoluteGlob(rawPattern, root, importer, resolve),\n+    ),",
        "comment_created_at": "2024-09-09T09:35:45+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "Given that the problem is that `toAbsoluteGlob` escaping the characters unnecessary, how about not using that function?\r\nChecking the `toAbsoluteGlob` function, most of the code is handling about globs and escaping the paths. I think it would be trimmed down to:\r\n```js\r\n// replace `normalizeGlobPattern` + `toAbsoluteGlob` with\r\nconst dir = importer ? dirname(importer) : root\r\nconst normalized = rawPattern[0] === '/' ? posix.join(root, rawPattern.slice(1)) : posix.join(dir, rawPattern)\r\n\r\n// pass it to `newRawPattern`\r\nlet newRawPattern = posix.relative(posix.dirname(importer), normalized)\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1749986480",
        "repo_full_name": "vitejs/vite",
        "pr_number": 17940,
        "pr_file": "packages/vite/src/node/plugins/dynamicImportVars.ts",
        "discussion_id": "1749928859",
        "commented_code": "@@ -144,7 +148,9 @@ export async function transformDynamicImport(\n \n   let newRawPattern = posix.relative(\n     posix.dirname(importer),\n-    await toAbsoluteGlob(rawPattern, root, importer, resolve),\n+    normalizeGlobPattern(\n+      await toAbsoluteGlob(rawPattern, root, importer, resolve),\n+    ),",
        "comment_created_at": "2024-09-09T10:15:28+00:00",
        "comment_author": "sunnylost",
        "comment_body": "OK, I'll fix this.",
        "pr_file_module": null
      }
    ]
  }
]