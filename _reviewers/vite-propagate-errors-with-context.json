[
  {
    "discussion_id": "1836178476",
    "pr_number": 18592,
    "pr_file": "packages/vite/src/node/utils.ts",
    "created_at": "2024-11-11T09:11:11+00:00",
    "commented_code": "continue\n     }\n     const destFile = path.resolve(destDir, file)\n+    // This may occur if the source directory is a symlink that points to a non-existent directory\n+    if (!fs.existsSync(destFile)) {",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1836178476",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18592,
        "pr_file": "packages/vite/src/node/utils.ts",
        "discussion_id": "1836178476",
        "commented_code": "@@ -598,6 +598,10 @@ export function copyDir(srcDir: string, destDir: string): void {\n       continue\n     }\n     const destFile = path.resolve(destDir, file)\n+    // This may occur if the source directory is a symlink that points to a non-existent directory\n+    if (!fs.existsSync(destFile)) {",
        "comment_created_at": "2024-11-11T09:11:11+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I think this should be\r\n```suggestion\r\n    if (!fs.existsSync(srcFile)) {\r\n```\r\nAlso I think it'd nice to avoid this `existsSync` call and add an `try-catch` to `fs.statSync` instead. `fs.statSync` throwed `ENOENT` on my machine (both Windows and WSL), did `fs.statSync` return a result on your machine?\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1879281504",
    "pr_number": 18940,
    "pr_file": "packages/vite/src/node/server/middlewares/proxy.ts",
    "created_at": "2024-12-11T03:31:40+00:00",
    "commented_code": "}\n \n   // Keep the named function. The name is visible in debug logs via `DEBUG=connect:dispatcher ...`\n-  return function viteProxyMiddleware(req, res, next) {\n+  return async function viteProxyMiddleware(req, res, next) {",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1879281504",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18940,
        "pr_file": "packages/vite/src/node/server/middlewares/proxy.ts",
        "discussion_id": "1879281504",
        "commented_code": "@@ -194,24 +200,26 @@ export function proxyMiddleware(\n   }\n \n   // Keep the named function. The name is visible in debug logs via `DEBUG=connect:dispatcher ...`\n-  return function viteProxyMiddleware(req, res, next) {\n+  return async function viteProxyMiddleware(req, res, next) {",
        "comment_created_at": "2024-12-11T03:31:40+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "We need to wrap the whole handler with `try-catch` and call `next(error)` in the `catch`, so that `next` is called  when an error happens asynchronously.",
        "pr_file_module": null
      },
      {
        "comment_id": "1879389185",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18940,
        "pr_file": "packages/vite/src/node/server/middlewares/proxy.ts",
        "discussion_id": "1879281504",
        "commented_code": "@@ -194,24 +200,26 @@ export function proxyMiddleware(\n   }\n \n   // Keep the named function. The name is visible in debug logs via `DEBUG=connect:dispatcher ...`\n-  return function viteProxyMiddleware(req, res, next) {\n+  return async function viteProxyMiddleware(req, res, next) {",
        "comment_created_at": "2024-12-11T05:55:23+00:00",
        "comment_author": "shulaoda",
        "comment_body": "This means that errors in `bypass` will ignore the entire behavior of the `proxy`, both in the `proxyMiddleware` and during the http server event `upgrade`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1881340368",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18940,
        "pr_file": "packages/vite/src/node/server/middlewares/proxy.ts",
        "discussion_id": "1879281504",
        "commented_code": "@@ -194,24 +200,26 @@ export function proxyMiddleware(\n   }\n \n   // Keep the named function. The name is visible in debug logs via `DEBUG=connect:dispatcher ...`\n-  return function viteProxyMiddleware(req, res, next) {\n+  return async function viteProxyMiddleware(req, res, next) {",
        "comment_created_at": "2024-12-12T03:45:02+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I think that is the expected behavior.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1856284282",
    "pr_number": 18751,
    "pr_file": "packages/vite/src/shared/moduleRunnerTransport.ts",
    "created_at": "2024-11-25T10:01:38+00:00",
    "commented_code": "},\n         }\n       : {}),\n-    async send(data) {\n+    send(data) {\n       if (!invokeableTransport.send) return\n \n       if (!isConnected) {\n-        if (connectingPromise) {\n-          await connectingPromise\n-        } else {\n+        if (!connectingPromise) {\n           throw new Error('send was called before connect')\n         }\n+        connectingPromise.then(() => {\n+          invokeableTransport.send!(data)\n+        })",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1856284282",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18751,
        "pr_file": "packages/vite/src/shared/moduleRunnerTransport.ts",
        "discussion_id": "1856284282",
        "commented_code": "@@ -232,17 +224,18 @@ export const normalizeModuleRunnerTransport = (\n           },\n         }\n       : {}),\n-    async send(data) {\n+    send(data) {\n       if (!invokeableTransport.send) return\n \n       if (!isConnected) {\n-        if (connectingPromise) {\n-          await connectingPromise\n-        } else {\n+        if (!connectingPromise) {\n           throw new Error('send was called before connect')\n         }\n+        connectingPromise.then(() => {\n+          invokeableTransport.send!(data)\n+        })",
        "comment_created_at": "2024-11-25T10:01:38+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "For `send`s that were called while connecting the error would be voided and won't be able to catch by the user. In Vite 5, the error happened for the `send` call later that was called (which is confusing I guess).\r\nhttps://github.com/vitejs/vite/blob/c54c860f9d90e4074e5321648f9c5ee9fbda7038/packages/vite/src/shared/hmr.ts#L180-L190\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849796491",
    "pr_number": 18713,
    "pr_file": "packages/vite/src/shared/moduleRunnerTransport.ts",
    "created_at": "2024-11-20T08:03:18+00:00",
    "commented_code": "}\n \n function reviveInvokeError(e: any) {\n-  return Object.assign(new Error(e.message || 'Unknown invoke error'), e)\n+  const innerError = new Error('received error stacktrace')\n+  innerError.stack = e.stack\n+\n+  // set properties to wrapped error, but use the current stacktrace\n+  const wrappedError = new Error(e.message || 'Unknown invoke error', {\n+    cause: innerError,\n+  })\n+  Object.assign(wrappedError, { ...e, stack: wrappedError.stack })",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1849796491",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18713,
        "pr_file": "packages/vite/src/shared/moduleRunnerTransport.ts",
        "discussion_id": "1849796491",
        "commented_code": "@@ -33,7 +33,15 @@ type InvokeableModuleRunnerTransport = Omit<ModuleRunnerTransport, 'invoke'> & {\n }\n \n function reviveInvokeError(e: any) {\n-  return Object.assign(new Error(e.message || 'Unknown invoke error'), e)\n+  const innerError = new Error('received error stacktrace')\n+  innerError.stack = e.stack\n+\n+  // set properties to wrapped error, but use the current stacktrace\n+  const wrappedError = new Error(e.message || 'Unknown invoke error', {\n+    cause: innerError,\n+  })\n+  Object.assign(wrappedError, { ...e, stack: wrappedError.stack })",
        "comment_created_at": "2024-11-20T08:03:18+00:00",
        "comment_author": "hi-ogawa",
        "comment_body": "Overall fixes make sense, but I'm not sure which stack should be visible to users. Technically the call flow is in a following order:\r\n\r\n```\r\nenvironment import -> runner invoke -> environment fetchModule -> plugin error\r\n```\r\n\r\nso having plugin errors location at the top of the stack seems natural. I think this was also the case on Vite 5 ssr and user plugin's stack can be important for debugging.\r\n\r\nAs an alternative, what about injecting runner side stack as a separate property like `e.runnerStack = wrappedError.stack`? That should allow `console.log(e)` to print out the runner stack.",
        "pr_file_module": null
      },
      {
        "comment_id": "1851201171",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18713,
        "pr_file": "packages/vite/src/shared/moduleRunnerTransport.ts",
        "discussion_id": "1849796491",
        "commented_code": "@@ -33,7 +33,15 @@ type InvokeableModuleRunnerTransport = Omit<ModuleRunnerTransport, 'invoke'> & {\n }\n \n function reviveInvokeError(e: any) {\n-  return Object.assign(new Error(e.message || 'Unknown invoke error'), e)\n+  const innerError = new Error('received error stacktrace')\n+  innerError.stack = e.stack\n+\n+  // set properties to wrapped error, but use the current stacktrace\n+  const wrappedError = new Error(e.message || 'Unknown invoke error', {\n+    cause: innerError,\n+  })\n+  Object.assign(wrappedError, { ...e, stack: wrappedError.stack })",
        "comment_created_at": "2024-11-21T01:42:15+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I think the order itself is natural as this is how the cause property works. But you have a point. Most users would want to know where the plugin error happened. I'll put it in a different property.",
        "pr_file_module": null
      },
      {
        "comment_id": "1851211033",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18713,
        "pr_file": "packages/vite/src/shared/moduleRunnerTransport.ts",
        "discussion_id": "1849796491",
        "commented_code": "@@ -33,7 +33,15 @@ type InvokeableModuleRunnerTransport = Omit<ModuleRunnerTransport, 'invoke'> & {\n }\n \n function reviveInvokeError(e: any) {\n-  return Object.assign(new Error(e.message || 'Unknown invoke error'), e)\n+  const innerError = new Error('received error stacktrace')\n+  innerError.stack = e.stack\n+\n+  // set properties to wrapped error, but use the current stacktrace\n+  const wrappedError = new Error(e.message || 'Unknown invoke error', {\n+    cause: innerError,\n+  })\n+  Object.assign(wrappedError, { ...e, stack: wrappedError.stack })",
        "comment_created_at": "2024-11-21T01:58:38+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "Updated in edb34684dd3f6aefa215d663df11fb7b86c024dc\r\nI passed the whole error to the property, otherwise the console.log will output with quotes and escapes.\r\n```\r\nError: foo\r\n    at file:///D:/documents/GitHub/vite/foo.mjs:2:22\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:268:25)\r\n    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:543:26)\r\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:116:5) {\r\n  runnerStack: 'Error: RunnerError\\n' +\r\n    '    at file:///D:/documents/GitHub/vite/foo.mjs:3:47\\n' +\r\n    '    at ModuleJob.run (node:internal/modules/esm/module_job:268:25)\\n' +\r\n    '    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:543:26)\\n' +\r\n    '    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:116:5)'\r\n}\r\n```\r\n```\r\nError: foo\r\n    at file:///D:/documents/GitHub/vite/foo.mjs:2:22\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:268:25)\r\n    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:543:26)\r\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:116:5) {\r\n  runnerStack: Error: RunnerError\r\n      at file:///D:/documents/GitHub/vite/foo.mjs:3:47\r\n      at ModuleJob.run (node:internal/modules/esm/module_job:268:25)\r\n      at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:543:26)\r\n      at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:116:5)\r\n}\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1837455877",
    "pr_number": 18644,
    "pr_file": "packages/vite/src/node/ssr/ssrTransform.ts",
    "created_at": "2024-11-12T04:12:37+00:00",
    "commented_code": "try {\n     ast = await rollupParseAstAsync(code)\n   } catch (err) {\n-    if (!err.loc || !err.loc.line) throw err\n-    const line = err.loc.line\n-    throw new Error(\n-      `Parse failure: ${\n-        err.message\n-      }\nAt file: ${url}\nContents of line ${line}: ${\n-        code.split('\n')[line - 1]\n-      }`,\n-    )\n+    if (err.code === 'PARSE_ERROR' && typeof err.pos === 'number') {\n+      err.id = url\n+      err.loc = numberToPos(code, err.pos)\n+      err.loc.file = url\n+      err.frame = generateCodeFrame(code, err.pos)",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1837455877",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18644,
        "pr_file": "packages/vite/src/node/ssr/ssrTransform.ts",
        "discussion_id": "1837455877",
        "commented_code": "@@ -81,15 +86,13 @@ async function ssrTransformScript(\n   try {\n     ast = await rollupParseAstAsync(code)\n   } catch (err) {\n-    if (!err.loc || !err.loc.line) throw err\n-    const line = err.loc.line\n-    throw new Error(\n-      `Parse failure: ${\n-        err.message\n-      }\\nAt file: ${url}\\nContents of line ${line}: ${\n-        code.split('\\n')[line - 1]\n-      }`,\n-    )\n+    if (err.code === 'PARSE_ERROR' && typeof err.pos === 'number') {\n+      err.id = url\n+      err.loc = numberToPos(code, err.pos)\n+      err.loc.file = url\n+      err.frame = generateCodeFrame(code, err.pos)",
        "comment_created_at": "2024-11-12T04:12:37+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I think we should keep the error message (`Parse failure: `...) so that `console.log(err)` shows the position and contents (#5192, #12060).",
        "pr_file_module": null
      },
      {
        "comment_id": "1837456753",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18644,
        "pr_file": "packages/vite/src/node/ssr/ssrTransform.ts",
        "discussion_id": "1837455877",
        "commented_code": "@@ -81,15 +86,13 @@ async function ssrTransformScript(\n   try {\n     ast = await rollupParseAstAsync(code)\n   } catch (err) {\n-    if (!err.loc || !err.loc.line) throw err\n-    const line = err.loc.line\n-    throw new Error(\n-      `Parse failure: ${\n-        err.message\n-      }\\nAt file: ${url}\\nContents of line ${line}: ${\n-        code.split('\\n')[line - 1]\n-      }`,\n-    )\n+    if (err.code === 'PARSE_ERROR' && typeof err.pos === 'number') {\n+      err.id = url\n+      err.loc = numberToPos(code, err.pos)\n+      err.loc.file = url\n+      err.frame = generateCodeFrame(code, err.pos)",
        "comment_created_at": "2024-11-12T04:14:15+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "I don't know when `err.loc` exsits (when it passes the previous code path) though.",
        "pr_file_module": null
      },
      {
        "comment_id": "1837516423",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18644,
        "pr_file": "packages/vite/src/node/ssr/ssrTransform.ts",
        "discussion_id": "1837455877",
        "commented_code": "@@ -81,15 +86,13 @@ async function ssrTransformScript(\n   try {\n     ast = await rollupParseAstAsync(code)\n   } catch (err) {\n-    if (!err.loc || !err.loc.line) throw err\n-    const line = err.loc.line\n-    throw new Error(\n-      `Parse failure: ${\n-        err.message\n-      }\\nAt file: ${url}\\nContents of line ${line}: ${\n-        code.split('\\n')[line - 1]\n-      }`,\n-    )\n+    if (err.code === 'PARSE_ERROR' && typeof err.pos === 'number') {\n+      err.id = url\n+      err.loc = numberToPos(code, err.pos)\n+      err.loc.file = url\n+      err.frame = generateCodeFrame(code, err.pos)",
        "comment_created_at": "2024-11-12T05:49:44+00:00",
        "comment_author": "hi-ogawa",
        "comment_body": "Right, it looks better to keep `Parse failure: ...` for clarity. I remembered esbuild transform error also includes location details in its message (cf. https://github.com/vitejs/vite/pull/18626).\r\n\r\n> I don't know when `err.loc` exsits (when it passes the previous code path) though.\r\n\r\nProbably `loc` check was for acorn based parser error, so it's no longer relevant. Since Rollup 4, it now only has `code, message, pos` properties https://github.com/rollup/rollup/blob/42e587e0e37bc0661aa39fe7ad6f1d7fd33f825c/src/utils/bufferToAst.ts#L20-L22, so we only need to target these. It looks like `pos` is missing on rust side panic, so I covered that case too.",
        "pr_file_module": null
      },
      {
        "comment_id": "1837661158",
        "repo_full_name": "vitejs/vite",
        "pr_number": 18644,
        "pr_file": "packages/vite/src/node/ssr/ssrTransform.ts",
        "discussion_id": "1837455877",
        "commented_code": "@@ -81,15 +86,13 @@ async function ssrTransformScript(\n   try {\n     ast = await rollupParseAstAsync(code)\n   } catch (err) {\n-    if (!err.loc || !err.loc.line) throw err\n-    const line = err.loc.line\n-    throw new Error(\n-      `Parse failure: ${\n-        err.message\n-      }\\nAt file: ${url}\\nContents of line ${line}: ${\n-        code.split('\\n')[line - 1]\n-      }`,\n-    )\n+    if (err.code === 'PARSE_ERROR' && typeof err.pos === 'number') {\n+      err.id = url\n+      err.loc = numberToPos(code, err.pos)\n+      err.loc.file = url\n+      err.frame = generateCodeFrame(code, err.pos)",
        "comment_created_at": "2024-11-12T08:21:40+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "Thanks for checking! That makes sense.",
        "pr_file_module": null
      }
    ]
  }
]