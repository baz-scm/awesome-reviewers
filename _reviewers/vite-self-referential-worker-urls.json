[
  {
    "discussion_id": "1837011159",
    "pr_number": 17846,
    "pr_file": "playground/worker/dep-self-reference-url-worker/worker.js",
    "created_at": "2024-11-11T17:42:21+00:00",
    "commented_code": "+// copy of playground/worker/self-reference-url-worker.js\n+self.addEventListener('message', (e) => {\n+  if (e.data === 'main') {\n+    const selfWorker = new Worker(new URL('./worker.js', import.meta.url), {",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1837011159",
        "repo_full_name": "vitejs/vite",
        "pr_number": 17846,
        "pr_file": "playground/worker/dep-self-reference-url-worker/worker.js",
        "discussion_id": "1837011159",
        "commented_code": "@@ -0,0 +1,14 @@\n+// copy of playground/worker/self-reference-url-worker.js\n+self.addEventListener('message', (e) => {\n+  if (e.data === 'main') {\n+    const selfWorker = new Worker(new URL('./worker.js', import.meta.url), {",
        "comment_created_at": "2024-11-11T17:42:21+00:00",
        "comment_author": "sbc100",
        "comment_body": "In emscripten we use the self-references a lot (to start pthread workers).  \r\n\r\nWould it be possible to allow the shorter form of this which is the even more explicit self reference:  `new URL(import.meta.url)`.   Its also more portable to write this shorter form since its robust against the containing file getting renamed.",
        "pr_file_module": null
      },
      {
        "comment_id": "1837318173",
        "repo_full_name": "vitejs/vite",
        "pr_number": 17846,
        "pr_file": "playground/worker/dep-self-reference-url-worker/worker.js",
        "discussion_id": "1837011159",
        "commented_code": "@@ -0,0 +1,14 @@\n+// copy of playground/worker/self-reference-url-worker.js\n+self.addEventListener('message', (e) => {\n+  if (e.data === 'main') {\n+    const selfWorker = new Worker(new URL('./worker.js', import.meta.url), {",
        "comment_created_at": "2024-11-11T23:55:31+00:00",
        "comment_author": "hi-ogawa",
        "comment_body": "Yeah, that should work as Vite would skip analysis and don't have to rewrite it.\r\nWhat Vite does is to detect recursive worker of this form `new URL(\"./some-file\", import.meta.url)` and rewrite it into `new URL(self.location.href)`, so the runtime can reference it easily.\r\nSo any of these should work:\r\n- `new Worker(import.meta.url)` \r\n- `new Worker(new URL(import.meta.url))` \r\n- `new Worker(self.location.href)` \r\n\r\nI confirmed it on my repro, but if you see something different, please submit a separate issue to track it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1837013169",
    "pr_number": 17846,
    "pr_file": "playground/worker/dep-self-reference-url-worker/index.js",
    "created_at": "2024-11-11T17:44:35+00:00",
    "commented_code": "+export function startWorker(handler) {\n+  const worker = new Worker(new URL('./worker.js', import.meta.url), {",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1837013169",
        "repo_full_name": "vitejs/vite",
        "pr_number": 17846,
        "pr_file": "playground/worker/dep-self-reference-url-worker/index.js",
        "discussion_id": "1837013169",
        "commented_code": "@@ -0,0 +1,9 @@\n+export function startWorker(handler) {\n+  const worker = new Worker(new URL('./worker.js', import.meta.url), {",
        "comment_created_at": "2024-11-11T17:44:35+00:00",
        "comment_author": "sbc100",
        "comment_body": "Would it be possible to also allow `./index.js` here?  I.e. a self reference from the main script?  This is how emscripten starts its pthread workers.  All workers (including the main page) use the same script.",
        "pr_file_module": null
      },
      {
        "comment_id": "1837318237",
        "repo_full_name": "vitejs/vite",
        "pr_number": 17846,
        "pr_file": "playground/worker/dep-self-reference-url-worker/index.js",
        "discussion_id": "1837013169",
        "commented_code": "@@ -0,0 +1,9 @@\n+export function startWorker(handler) {\n+  const worker = new Worker(new URL('./worker.js', import.meta.url), {",
        "comment_created_at": "2024-11-11T23:55:42+00:00",
        "comment_author": "hi-ogawa",
        "comment_body": "I think that should work too though one caveat is that Vite needs to bundle `index.js` twice for main script and as worker script. So, it's likely that some js might got duplicated but IIRC static wasm assets can be de-duped.",
        "pr_file_module": null
      }
    ]
  }
]