[
  {
    "discussion_id": "1024573374",
    "pr_number": 7477,
    "pr_file": "packages/vite/src/node/plugins/importAnalysis.ts",
    "created_at": "2022-11-16T22:35:24+00:00",
    "commented_code": "export const canSkipImportAnalysis = (id: string): boolean =>\n   skipRE.test(id) || isDirectCSSRequest(id)\n \n+const inferSelfAccepting = (id: string): false | undefined =>\n+  canSkipImportAnalysis(id) ? false : undefined\n+\n const optimizedDepChunkRE = /\\/chunk-[A-Z\\d]{8}\\.js/\n const optimizedDepDynamicRE = /-[A-Z\\d]{8}\\.js/\n \n export function isExplicitImportRequired(url: string): boolean {\n-  return !isJSRequest(cleanUrl(url)) && !isCSSRequest(url)\n+  return !isJSRequest(url) && !isCSSRequest(url)",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1024573374",
        "repo_full_name": "vitejs/vite",
        "pr_number": 7477,
        "pr_file": "packages/vite/src/node/plugins/importAnalysis.ts",
        "discussion_id": "1024573374",
        "commented_code": "@@ -75,11 +78,14 @@ const skipRE = /\\.(?:map|json)(?:$|\\?)/\n export const canSkipImportAnalysis = (id: string): boolean =>\n   skipRE.test(id) || isDirectCSSRequest(id)\n \n+const inferSelfAccepting = (id: string): false | undefined =>\n+  canSkipImportAnalysis(id) ? false : undefined\n+\n const optimizedDepChunkRE = /\\/chunk-[A-Z\\d]{8}\\.js/\n const optimizedDepDynamicRE = /-[A-Z\\d]{8}\\.js/\n \n export function isExplicitImportRequired(url: string): boolean {\n-  return !isJSRequest(cleanUrl(url)) && !isCSSRequest(url)\n+  return !isJSRequest(url) && !isCSSRequest(url)",
        "comment_created_at": "2022-11-16T22:35:24+00:00",
        "comment_author": "aleclarson",
        "comment_body": "I'm not quite sure how safe it is to change this, but it didn't break any tests (in fact, it fixed a couple tests that were broken by this PR). For example, when a `.html?vue` file has `&lang.js` at the end, we don't want to inject `?import` because that leads to duplicate entries in the module graph. Let me know if this is a problematic solution.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1983111368",
    "pr_number": 16288,
    "pr_file": "packages/vite/src/node/server/hmr.ts",
    "created_at": "2025-03-06T10:35:35+00:00",
    "commented_code": "return\n   }\n \n-  const mods = moduleGraph.getModulesByFile(file)\n+  const mods = moduleGraph.getModulesByFile(file) || new Set()\n+  if (type === 'create' || type === 'delete') {\n+    for (const mod of getAffectedGlobModules(file, server)) {\n+      mods.add(mod)\n+    }\n+  }\n \n   // check if any plugin wants to perform custom HMR handling\n   const timestamp = Date.now()\n   const hmrContext: HmrContext = {\n     file,\n     timestamp,\n-    modules: mods ? [...mods] : [],\n+    modules: [...mods],\n     read: () => readModifiedFile(file),\n     server,\n   }\n \n-  for (const hook of config.getSortedPluginHooks('handleHotUpdate')) {\n-    const filteredModules = await hook(hmrContext)\n-    if (filteredModules) {\n-      hmrContext.modules = filteredModules\n+  if (type === 'update') {",
    "repo_full_name": "vitejs/vite",
    "discussion_comments": [
      {
        "comment_id": "1983111368",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16288,
        "pr_file": "packages/vite/src/node/server/hmr.ts",
        "discussion_id": "1983111368",
        "commented_code": "@@ -166,22 +162,29 @@ export async function handleHMRUpdate(\n     return\n   }\n \n-  const mods = moduleGraph.getModulesByFile(file)\n+  const mods = moduleGraph.getModulesByFile(file) || new Set()\n+  if (type === 'create' || type === 'delete') {\n+    for (const mod of getAffectedGlobModules(file, server)) {\n+      mods.add(mod)\n+    }\n+  }\n \n   // check if any plugin wants to perform custom HMR handling\n   const timestamp = Date.now()\n   const hmrContext: HmrContext = {\n     file,\n     timestamp,\n-    modules: mods ? [...mods] : [],\n+    modules: [...mods],\n     read: () => readModifiedFile(file),\n     server,\n   }\n \n-  for (const hook of config.getSortedPluginHooks('handleHotUpdate')) {\n-    const filteredModules = await hook(hmrContext)\n-    if (filteredModules) {\n-      hmrContext.modules = filteredModules\n+  if (type === 'update') {",
        "comment_created_at": "2025-03-06T10:35:35+00:00",
        "comment_author": "Caaalabash",
        "comment_body": "@sapphi-red  when file create/delete,  user custom plugin hook `handleHotUpdate` won't be invoke\uff1f",
        "pr_file_module": null
      },
      {
        "comment_id": "1983122194",
        "repo_full_name": "vitejs/vite",
        "pr_number": 16288,
        "pr_file": "packages/vite/src/node/server/hmr.ts",
        "discussion_id": "1983111368",
        "commented_code": "@@ -166,22 +162,29 @@ export async function handleHMRUpdate(\n     return\n   }\n \n-  const mods = moduleGraph.getModulesByFile(file)\n+  const mods = moduleGraph.getModulesByFile(file) || new Set()\n+  if (type === 'create' || type === 'delete') {\n+    for (const mod of getAffectedGlobModules(file, server)) {\n+      mods.add(mod)\n+    }\n+  }\n \n   // check if any plugin wants to perform custom HMR handling\n   const timestamp = Date.now()\n   const hmrContext: HmrContext = {\n     file,\n     timestamp,\n-    modules: mods ? [...mods] : [],\n+    modules: [...mods],\n     read: () => readModifiedFile(file),\n     server,\n   }\n \n-  for (const hook of config.getSortedPluginHooks('handleHotUpdate')) {\n-    const filteredModules = await hook(hmrContext)\n-    if (filteredModules) {\n-      hmrContext.modules = filteredModules\n+  if (type === 'update') {",
        "comment_created_at": "2025-03-06T10:42:41+00:00",
        "comment_author": "sapphi-red",
        "comment_body": "yes\r\nhttps://vite.dev/changes/hotupdate-hook.html#:~:text=handle%20additional%20watch%20events%20with%20create%20and%20delete.",
        "pr_file_module": null
      }
    ]
  }
]