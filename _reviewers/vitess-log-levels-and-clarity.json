[
  {
    "discussion_id": "1956168417",
    "pr_number": 17782,
    "pr_file": "go/vt/vtctl/workflow/traffic_switcher.go",
    "created_at": "2025-02-14T13:40:46+00:00",
    "commented_code": "defer cmCancel()\n \n \tif ts.MigrationType() == binlogdatapb.MigrationType_TABLES {\n-\t\terr = ts.switchDeniedTables(cmCtx, true /* revert */)\n+\t\tif !ts.IsMultiTenantMigration() {\n+\t\t\tlog.Infof(\"cancelMigration (%v): switching denied tables to target\", ts.WorkflowName())\n+\t\t\terr = ts.switchDeniedTables(cmCtx, true /* revert */)\n+\t\t} else {\n+\t\t\tlog.Infof(\"cancelMigration (%v): multi-tenant, not switching denied tables to target\", ts.WorkflowName())\n+\t\t}\n \t} else {\n+\t\tlog.Infof(\"cancelMigration (%v): allowing writes on source shards\", ts.WorkflowName())\n \t\terr = ts.changeShardsAccess(cmCtx, ts.SourceKeyspaceName(), ts.SourceShards(), allowWrites)\n \t}\n \tif err != nil {\n+\t\tlog.Infof(\"Cancel migration failed for %v: could not revert denied tables / shard access: %v\", ts.WorkflowName(), err)\n \t\tcancelErrs.RecordError(fmt.Errorf(\"could not revert denied tables / shard access: %v\", err))\n \t\tts.Logger().Errorf(\"Cancel migration failed: could not revert denied tables / shard access: %v\", err)",
    "repo_full_name": "vitessio/vitess",
    "discussion_comments": [
      {
        "comment_id": "1956168417",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17782,
        "pr_file": "go/vt/vtctl/workflow/traffic_switcher.go",
        "discussion_id": "1956168417",
        "commented_code": "@@ -1168,39 +1168,54 @@ func (ts *trafficSwitcher) cancelMigration(ctx context.Context, sm *StreamMigrat\n \tdefer cmCancel()\n \n \tif ts.MigrationType() == binlogdatapb.MigrationType_TABLES {\n-\t\terr = ts.switchDeniedTables(cmCtx, true /* revert */)\n+\t\tif !ts.IsMultiTenantMigration() {\n+\t\t\tlog.Infof(\"cancelMigration (%v): switching denied tables to target\", ts.WorkflowName())\n+\t\t\terr = ts.switchDeniedTables(cmCtx, true /* revert */)\n+\t\t} else {\n+\t\t\tlog.Infof(\"cancelMigration (%v): multi-tenant, not switching denied tables to target\", ts.WorkflowName())\n+\t\t}\n \t} else {\n+\t\tlog.Infof(\"cancelMigration (%v): allowing writes on source shards\", ts.WorkflowName())\n \t\terr = ts.changeShardsAccess(cmCtx, ts.SourceKeyspaceName(), ts.SourceShards(), allowWrites)\n \t}\n \tif err != nil {\n+\t\tlog.Infof(\"Cancel migration failed for %v: could not revert denied tables / shard access: %v\", ts.WorkflowName(), err)\n \t\tcancelErrs.RecordError(fmt.Errorf(\"could not revert denied tables / shard access: %v\", err))\n \t\tts.Logger().Errorf(\"Cancel migration failed: could not revert denied tables / shard access: %v\", err)",
        "comment_created_at": "2025-02-14T13:40:46+00:00",
        "comment_author": "mattlord",
        "comment_body": "The default logger is glog. And error log messages also end up in the info log as they cascade down. Do we really want/need duplicate log messages? This is an error so I think we should improve the existing one by adding the workflow name.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1908438979",
    "pr_number": 17485,
    "pr_file": "go/vt/tableacl/tableacl.go",
    "created_at": "2025-01-09T09:37:50+00:00",
    "commented_code": "if configFile == \"\" {\n \t\treturn nil\n \t}\n+\tlog.Infof(\"Reading ACL file %v\", configFile)",
    "repo_full_name": "vitessio/vitess",
    "discussion_comments": [
      {
        "comment_id": "1908438979",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17485,
        "pr_file": "go/vt/tableacl/tableacl.go",
        "discussion_id": "1908438979",
        "commented_code": "@@ -105,6 +105,7 @@ func (tacl *tableACL) init(configFile string, aclCB func()) error {\n \tif configFile == \"\" {\n \t\treturn nil\n \t}\n+\tlog.Infof(\"Reading ACL file %v\", configFile)",
        "comment_created_at": "2025-01-09T09:37:50+00:00",
        "comment_author": "dbussink",
        "comment_body": "I don't think we should log it here. What's the reason you need it here? Was it not clear that this was happening? I would imagine it was clear from the lines below on errors what the cause of the problem was?\r\n\r\nBelow here, there's also `Info` logging on errors which is wrong, those should be raised at least to warning if not error. It's confusing those are set at the info level. \r\n\r\nIf there's a good reason to add the logging, maybe instead we should log inside the SIGHUP handler to make it specific for the scenario? I don't think this line is something useful to print on each startup then. We should be careful with not adding too much logging noise that loses signal then. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1908480427",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17485,
        "pr_file": "go/vt/tableacl/tableacl.go",
        "discussion_id": "1908438979",
        "commented_code": "@@ -105,6 +105,7 @@ func (tacl *tableACL) init(configFile string, aclCB func()) error {\n \tif configFile == \"\" {\n \t\treturn nil\n \t}\n+\tlog.Infof(\"Reading ACL file %v\", configFile)",
        "comment_created_at": "2025-01-09T10:05:10+00:00",
        "comment_author": "wiebeytec",
        "comment_body": "> I don't think we should log it here. What's the reason you need it here? Was it not clear that this was happening? I would imagine it was clear from the lines below on errors what the cause of the problem was?\r\n\r\nThe issue is that when there is no error, sending a SIGHUP doesn't cause any log output to be generated. So, you don't know if it even did anything.\r\n\r\nI considered adding the line to the SIGHUP handler. We can do that too I suppose. I'll change it, along with the sign-off.",
        "pr_file_module": null
      },
      {
        "comment_id": "1908533112",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17485,
        "pr_file": "go/vt/tableacl/tableacl.go",
        "discussion_id": "1908438979",
        "commented_code": "@@ -105,6 +105,7 @@ func (tacl *tableACL) init(configFile string, aclCB func()) error {\n \tif configFile == \"\" {\n \t\treturn nil\n \t}\n+\tlog.Infof(\"Reading ACL file %v\", configFile)",
        "comment_created_at": "2025-01-09T10:44:21+00:00",
        "comment_author": "dbussink",
        "comment_body": "> The issue is that when there is no error, sending a SIGHUP doesn't cause any log output to be generated. So, you don't know if it even did anything.\r\n\r\nLet's log it then after it succeeds, so that we only have the line if there was a successful reload due to a `SIGHUP`. We can then make it more something like \"Successfully reloaded ACL\". ",
        "pr_file_module": null
      },
      {
        "comment_id": "1908552256",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17485,
        "pr_file": "go/vt/tableacl/tableacl.go",
        "discussion_id": "1908438979",
        "commented_code": "@@ -105,6 +105,7 @@ func (tacl *tableACL) init(configFile string, aclCB func()) error {\n \tif configFile == \"\" {\n \t\treturn nil\n \t}\n+\tlog.Infof(\"Reading ACL file %v\", configFile)",
        "comment_created_at": "2025-01-09T10:55:44+00:00",
        "comment_author": "wiebeytec",
        "comment_body": "I had just force-pushed with the log line in the SIGHUP handler, also to make it clear it responds to SIGHUP. It's a convention this is logged by software, so I think it's a good idea.\r\n\r\nBut about your proposal: I generally prefer to log intentions rather than result. Otherwise you may get log entries like 'error: too many open files' and you have no idea what it was trying to do.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1908560637",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17485,
        "pr_file": "go/vt/tableacl/tableacl.go",
        "discussion_id": "1908438979",
        "commented_code": "@@ -105,6 +105,7 @@ func (tacl *tableACL) init(configFile string, aclCB func()) error {\n \tif configFile == \"\" {\n \t\treturn nil\n \t}\n+\tlog.Infof(\"Reading ACL file %v\", configFile)",
        "comment_created_at": "2025-01-09T10:59:37+00:00",
        "comment_author": "dbussink",
        "comment_body": "> you have no idea what it was trying to do.\r\n\r\nI'm not sure what you mean here? This is something that logging can do properly? Looking at the code more I think it would benefit from some additional refactor and remove the exit at a distance kinda behavior and use error returns and let the callers decide. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1908575833",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17485,
        "pr_file": "go/vt/tableacl/tableacl.go",
        "discussion_id": "1908438979",
        "commented_code": "@@ -105,6 +105,7 @@ func (tacl *tableACL) init(configFile string, aclCB func()) error {\n \tif configFile == \"\" {\n \t\treturn nil\n \t}\n+\tlog.Infof(\"Reading ACL file %v\", configFile)",
        "comment_created_at": "2025-01-09T11:07:47+00:00",
        "comment_author": "wiebeytec",
        "comment_body": "> I'm not sure what you mean here?\r\n\r\nI think we're miscommunicating a bit. You said:\r\n\r\n> What's the reason you need it here? Was it not clear that this was happening? I would imagine it was clear from the lines below on errors what the cause of the problem was?\r\n\r\nIndeed, on error. I meant that as a sysop, I would like to see a program respond to something. If I send it a SIGHUP and no log lines are printed, I can't tell whether it did something or not. \r\n\r\n> Looking at the code more I think it would benefit from some additional refactor and remove the exit at a distance kinda behavior and use error returns and let the callers decide.\r\n\r\nOK, I can do that.",
        "pr_file_module": null
      },
      {
        "comment_id": "1908583799",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17485,
        "pr_file": "go/vt/tableacl/tableacl.go",
        "discussion_id": "1908438979",
        "commented_code": "@@ -105,6 +105,7 @@ func (tacl *tableACL) init(configFile string, aclCB func()) error {\n \tif configFile == \"\" {\n \t\treturn nil\n \t}\n+\tlog.Infof(\"Reading ACL file %v\", configFile)",
        "comment_created_at": "2025-01-09T11:11:43+00:00",
        "comment_author": "dbussink",
        "comment_body": "@wiebeytec https://github.com/wiebeytec/vitess/compare/main...dbussink:vitess:acl-refactor-suggestion?expand=1 is kinda what I was thinking about here. Dunno what you think of that? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1908624273",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17485,
        "pr_file": "go/vt/tableacl/tableacl.go",
        "discussion_id": "1908438979",
        "commented_code": "@@ -105,6 +105,7 @@ func (tacl *tableACL) init(configFile string, aclCB func()) error {\n \tif configFile == \"\" {\n \t\treturn nil\n \t}\n+\tlog.Infof(\"Reading ACL file %v\", configFile)",
        "comment_created_at": "2025-01-09T11:36:31+00:00",
        "comment_author": "wiebeytec",
        "comment_body": "Looks good. In the branch I just force-pushed I still logged in the callees (deep), but functionality it's similar.\r\n\r\nYou can remove my code in favor of yours then.",
        "pr_file_module": null
      },
      {
        "comment_id": "1908655556",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17485,
        "pr_file": "go/vt/tableacl/tableacl.go",
        "discussion_id": "1908438979",
        "commented_code": "@@ -105,6 +105,7 @@ func (tacl *tableACL) init(configFile string, aclCB func()) error {\n \tif configFile == \"\" {\n \t\treturn nil\n \t}\n+\tlog.Infof(\"Reading ACL file %v\", configFile)",
        "comment_created_at": "2025-01-09T11:56:34+00:00",
        "comment_author": "dbussink",
        "comment_body": "I think logging at the higher level would be preferable here. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1566265901",
    "pr_number": 15722,
    "pr_file": "go/vt/vtadmin/cluster/config.go",
    "created_at": "2024-04-15T18:28:31+00:00",
    "commented_code": "return merged\n }\n \n+func formatID(id string) string {\n+\tif strings.Contains(id, \"_\") {\n+\t\told_id := id\n+\t\t// gRPC can't process custom resolver names with underscores\n+\t\tid = strings.Replace(id, \"_\", \"-\", -1)\n+\t\tlog.Infof(\"replaced underscores in old id '%s' with dashes to form new id '%s'\", old_id, id)",
    "repo_full_name": "vitessio/vitess",
    "discussion_comments": [
      {
        "comment_id": "1566265901",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 15722,
        "pr_file": "go/vt/vtadmin/cluster/config.go",
        "discussion_id": "1566265901",
        "commented_code": "@@ -284,6 +288,17 @@ func (cfg Config) Merge(override Config) Config {\n \treturn merged\n }\n \n+func formatID(id string) string {\n+\tif strings.Contains(id, \"_\") {\n+\t\told_id := id\n+\t\t// gRPC can't process custom resolver names with underscores\n+\t\tid = strings.Replace(id, \"_\", \"-\", -1)\n+\t\tlog.Infof(\"replaced underscores in old id '%s' with dashes to form new id '%s'\", old_id, id)",
        "comment_created_at": "2024-04-15T18:28:31+00:00",
        "comment_author": "dbussink",
        "comment_body": "Isn't this very noisy if we log this each time? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1566305251",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 15722,
        "pr_file": "go/vt/vtadmin/cluster/config.go",
        "discussion_id": "1566265901",
        "commented_code": "@@ -284,6 +288,17 @@ func (cfg Config) Merge(override Config) Config {\n \treturn merged\n }\n \n+func formatID(id string) string {\n+\tif strings.Contains(id, \"_\") {\n+\t\told_id := id\n+\t\t// gRPC can't process custom resolver names with underscores\n+\t\tid = strings.Replace(id, \"_\", \"-\", -1)\n+\t\tlog.Infof(\"replaced underscores in old id '%s' with dashes to form new id '%s'\", old_id, id)",
        "comment_created_at": "2024-04-15T19:04:13+00:00",
        "comment_author": "notfelineit",
        "comment_body": "The clusters are (generally) only configured at start-up, or with dynamic clusters, on every request. It would get noisy on dynamic clusters,  so we can remove it. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1878203580",
    "pr_number": 17340,
    "pr_file": "go/vt/vtctl/workflow/traffic_switcher.go",
    "created_at": "2024-12-10T14:29:27+00:00",
    "commented_code": "return nil\n }\n \n+// cancelMigration attempts to revert all changes made during the migration so that we can get back to the\n+// state when traffic switching (or reversing) was initiated.\n func (ts *trafficSwitcher) cancelMigration(ctx context.Context, sm *StreamMigrator) {\n \tvar err error\n+\n+\tif ctx.Err() != nil {\n+\t\t// Even though we create a new context later on we still record any context error:\n+\t\t// for forensics in case of failures.\n+\t\tts.Logger().Infof(\"In Cancel migration: original context invalid: %s\", ctx.Err())\n+\t}\n+\n+\t// We create a new context while canceling the migration, so that we are independent of the original\n+\t// context being cancelled prior to or during the cancel operation.\n+\tcmTimeout := 60 * time.Second\n+\tcmCtx, cmCancel := context.WithTimeout(context.Background(), cmTimeout)\n+\tdefer cmCancel()\n+\n \tif ts.MigrationType() == binlogdatapb.MigrationType_TABLES {\n-\t\terr = ts.switchDeniedTables(ctx)\n+\t\terr = ts.switchDeniedTables(cmCtx)\n \t} else {\n-\t\terr = ts.changeShardsAccess(ctx, ts.SourceKeyspaceName(), ts.SourceShards(), allowWrites)\n+\t\terr = ts.changeShardsAccess(cmCtx, ts.SourceKeyspaceName(), ts.SourceShards(), allowWrites)\n \t}\n \tif err != nil {\n \t\tts.Logger().Errorf(\"Cancel migration failed: %v\", err)",
    "repo_full_name": "vitessio/vitess",
    "discussion_comments": [
      {
        "comment_id": "1878203580",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17340,
        "pr_file": "go/vt/vtctl/workflow/traffic_switcher.go",
        "discussion_id": "1878203580",
        "commented_code": "@@ -1135,30 +1135,45 @@ func (ts *trafficSwitcher) switchDeniedTables(ctx context.Context) error {\n \treturn nil\n }\n \n+// cancelMigration attempts to revert all changes made during the migration so that we can get back to the\n+// state when traffic switching (or reversing) was initiated.\n func (ts *trafficSwitcher) cancelMigration(ctx context.Context, sm *StreamMigrator) {\n \tvar err error\n+\n+\tif ctx.Err() != nil {\n+\t\t// Even though we create a new context later on we still record any context error:\n+\t\t// for forensics in case of failures.\n+\t\tts.Logger().Infof(\"In Cancel migration: original context invalid: %s\", ctx.Err())\n+\t}\n+\n+\t// We create a new context while canceling the migration, so that we are independent of the original\n+\t// context being cancelled prior to or during the cancel operation.\n+\tcmTimeout := 60 * time.Second\n+\tcmCtx, cmCancel := context.WithTimeout(context.Background(), cmTimeout)\n+\tdefer cmCancel()\n+\n \tif ts.MigrationType() == binlogdatapb.MigrationType_TABLES {\n-\t\terr = ts.switchDeniedTables(ctx)\n+\t\terr = ts.switchDeniedTables(cmCtx)\n \t} else {\n-\t\terr = ts.changeShardsAccess(ctx, ts.SourceKeyspaceName(), ts.SourceShards(), allowWrites)\n+\t\terr = ts.changeShardsAccess(cmCtx, ts.SourceKeyspaceName(), ts.SourceShards(), allowWrites)\n \t}\n \tif err != nil {\n \t\tts.Logger().Errorf(\"Cancel migration failed: %v\", err)",
        "comment_created_at": "2024-12-10T14:29:27+00:00",
        "comment_author": "mattlord",
        "comment_body": "IMO we should take this opportunity to improve the log message:\r\n```\r\nts.Logger().Errorf(\"Cancel migration failed: could not revert denied tables / shared access: %v\", err)\r\n```\r\n\r\nI also think that we should accumulate these and return them to the caller. But we could defer that change. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1878510817",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 17340,
        "pr_file": "go/vt/vtctl/workflow/traffic_switcher.go",
        "discussion_id": "1878203580",
        "commented_code": "@@ -1135,30 +1135,45 @@ func (ts *trafficSwitcher) switchDeniedTables(ctx context.Context) error {\n \treturn nil\n }\n \n+// cancelMigration attempts to revert all changes made during the migration so that we can get back to the\n+// state when traffic switching (or reversing) was initiated.\n func (ts *trafficSwitcher) cancelMigration(ctx context.Context, sm *StreamMigrator) {\n \tvar err error\n+\n+\tif ctx.Err() != nil {\n+\t\t// Even though we create a new context later on we still record any context error:\n+\t\t// for forensics in case of failures.\n+\t\tts.Logger().Infof(\"In Cancel migration: original context invalid: %s\", ctx.Err())\n+\t}\n+\n+\t// We create a new context while canceling the migration, so that we are independent of the original\n+\t// context being cancelled prior to or during the cancel operation.\n+\tcmTimeout := 60 * time.Second\n+\tcmCtx, cmCancel := context.WithTimeout(context.Background(), cmTimeout)\n+\tdefer cmCancel()\n+\n \tif ts.MigrationType() == binlogdatapb.MigrationType_TABLES {\n-\t\terr = ts.switchDeniedTables(ctx)\n+\t\terr = ts.switchDeniedTables(cmCtx)\n \t} else {\n-\t\terr = ts.changeShardsAccess(ctx, ts.SourceKeyspaceName(), ts.SourceShards(), allowWrites)\n+\t\terr = ts.changeShardsAccess(cmCtx, ts.SourceKeyspaceName(), ts.SourceShards(), allowWrites)\n \t}\n \tif err != nil {\n \t\tts.Logger().Errorf(\"Cancel migration failed: %v\", err)",
        "comment_created_at": "2024-12-10T17:20:00+00:00",
        "comment_author": "rohit-nayak-ps",
        "comment_body": "Updated the log message. Let's make the changes to pass them to the caller separately since we are not returning the error at the moment. ",
        "pr_file_module": null
      }
    ]
  }
]