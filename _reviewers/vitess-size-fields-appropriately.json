[
  {
    "discussion_id": "2071884069",
    "pr_number": 18221,
    "pr_file": "go/vt/sidecardb/schema/vreplication/vreplication.sql",
    "created_at": "2025-05-02T16:45:16+00:00",
    "commented_code": "`id`                    int              NOT NULL AUTO_INCREMENT,\n     `workflow`              varbinary(1000)           DEFAULT NULL,\n     `source`                mediumblob       NOT NULL,\n-    `pos`                   varbinary(10000) NOT NULL,\n+    `pos`                   mediumblob NOT NULL,",
    "repo_full_name": "vitessio/vitess",
    "discussion_comments": [
      {
        "comment_id": "2071884069",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 18221,
        "pr_file": "go/vt/sidecardb/schema/vreplication/vreplication.sql",
        "discussion_id": "2071884069",
        "commented_code": "@@ -19,7 +19,7 @@ CREATE TABLE IF NOT EXISTS vreplication\n     `id`                    int              NOT NULL AUTO_INCREMENT,\n     `workflow`              varbinary(1000)           DEFAULT NULL,\n     `source`                mediumblob       NOT NULL,\n-    `pos`                   varbinary(10000) NOT NULL,\n+    `pos`                   mediumblob NOT NULL,",
        "comment_created_at": "2025-05-02T16:45:16+00:00",
        "comment_author": "mattlord",
        "comment_body": "This takes us from a limit of 10,000 bytes to 16,777,215 bytes. I don't see any reason not to do this. It might make sense to step toward that by using `blob` first. That would take us from 10,000 to 65,536 bytes. Did you use `mediumblob` because your case was already over the `blob` size? Then again... we know it's possible so we might as well allow it here. `mediumblob` would cover any reasonable installation, I think.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2071886129",
    "pr_number": 18221,
    "pr_file": "go/vt/sidecardb/schema/vreplication/vreplication.sql",
    "created_at": "2025-05-02T16:47:14+00:00",
    "commented_code": "`id`                    int              NOT NULL AUTO_INCREMENT,\n     `workflow`              varbinary(1000)           DEFAULT NULL,\n     `source`                mediumblob       NOT NULL,\n-    `pos`                   varbinary(10000) NOT NULL,\n+    `pos`                   mediumblob NOT NULL,\n     `stop_pos`              varbinary(10000)          DEFAULT NULL,",
    "repo_full_name": "vitessio/vitess",
    "discussion_comments": [
      {
        "comment_id": "2071886129",
        "repo_full_name": "vitessio/vitess",
        "pr_number": 18221,
        "pr_file": "go/vt/sidecardb/schema/vreplication/vreplication.sql",
        "discussion_id": "2071886129",
        "commented_code": "@@ -19,7 +19,7 @@ CREATE TABLE IF NOT EXISTS vreplication\n     `id`                    int              NOT NULL AUTO_INCREMENT,\n     `workflow`              varbinary(1000)           DEFAULT NULL,\n     `source`                mediumblob       NOT NULL,\n-    `pos`                   varbinary(10000) NOT NULL,\n+    `pos`                   mediumblob NOT NULL,\n     `stop_pos`              varbinary(10000)          DEFAULT NULL,",
        "comment_created_at": "2025-05-02T16:47:14+00:00",
        "comment_author": "mattlord",
        "comment_body": "We should increase this as well since if the `pos` is beyond the limit you'll also be beyond the `stop_pos` limit which would block various VReplication features \u2014 such as VDiff \u2014 which set the `stop_pos`, with the value being a GTID snapshot from the source tablet.",
        "pr_file_module": null
      }
    ]
  }
]