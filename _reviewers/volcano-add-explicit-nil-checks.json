[
  {
    "discussion_id": "2265594270",
    "pr_number": 4520,
    "pr_file": "pkg/scheduler/framework/session.go",
    "created_at": "2025-08-11T03:13:50+00:00",
    "commented_code": "for status, tasks := range job.TaskStatusIndex {\n \t\t\tif api.AllocatedStatus(status) {\n \t\t\t\tfor _, task := range tasks {\n+\t\t\t\t\tnode, ok1 := ssn.Nodes[task.NodeName]\n+\t\t\t\t\ttaskReq := task.Resreq\n+\t\t\t\t\tif ok1 {\n+\t\t\t\t\t\tfor _, sharedDevices := range node.Others {\n+\t\t\t\t\t\t\tif sharedDevices.(api.Devices).HasDeviceRequest(task.Pod) {",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2265594270",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4520,
        "pr_file": "pkg/scheduler/framework/session.go",
        "discussion_id": "2265594270",
        "commented_code": "@@ -259,6 +259,18 @@ func updateQueueStatus(ssn *Session) {\n \t\tfor status, tasks := range job.TaskStatusIndex {\n \t\t\tif api.AllocatedStatus(status) {\n \t\t\t\tfor _, task := range tasks {\n+\t\t\t\t\tnode, ok1 := ssn.Nodes[task.NodeName]\n+\t\t\t\t\ttaskReq := task.Resreq\n+\t\t\t\t\tif ok1 {\n+\t\t\t\t\t\tfor _, sharedDevices := range node.Others {\n+\t\t\t\t\t\t\tif sharedDevices.(api.Devices).HasDeviceRequest(task.Pod) {",
        "comment_created_at": "2025-08-11T03:13:50+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "I'm wondering that why `Others` field in `NodeInfo` is a `map[string]interface{}` type rather than `map[string]Devices` ? Will `Others` have other types of interface in the future? We cannot control other contributors who may put other interface implementations into Others. If other interfaces do not have `HasDeviceRequest` methods, there will be problems here.",
        "pr_file_module": null
      },
      {
        "comment_id": "2265872806",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4520,
        "pr_file": "pkg/scheduler/framework/session.go",
        "discussion_id": "2265594270",
        "commented_code": "@@ -259,6 +259,18 @@ func updateQueueStatus(ssn *Session) {\n \t\tfor status, tasks := range job.TaskStatusIndex {\n \t\t\tif api.AllocatedStatus(status) {\n \t\t\t\tfor _, task := range tasks {\n+\t\t\t\t\tnode, ok1 := ssn.Nodes[task.NodeName]\n+\t\t\t\t\ttaskReq := task.Resreq\n+\t\t\t\t\tif ok1 {\n+\t\t\t\t\t\tfor _, sharedDevices := range node.Others {\n+\t\t\t\t\t\t\tif sharedDevices.(api.Devices).HasDeviceRequest(task.Pod) {",
        "comment_created_at": "2025-08-11T07:15:01+00:00",
        "comment_author": "archlitchi",
        "comment_body": "haha, the nodeInfo.Others field exists before i implement deviceshare API. It's william-wang's idea to put devices related logics here, so we don't need to change the node_info struct",
        "pr_file_module": null
      },
      {
        "comment_id": "2266365387",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4520,
        "pr_file": "pkg/scheduler/framework/session.go",
        "discussion_id": "2265594270",
        "commented_code": "@@ -259,6 +259,18 @@ func updateQueueStatus(ssn *Session) {\n \t\tfor status, tasks := range job.TaskStatusIndex {\n \t\t\tif api.AllocatedStatus(status) {\n \t\t\t\tfor _, task := range tasks {\n+\t\t\t\t\tnode, ok1 := ssn.Nodes[task.NodeName]\n+\t\t\t\t\ttaskReq := task.Resreq\n+\t\t\t\t\tif ok1 {\n+\t\t\t\t\t\tfor _, sharedDevices := range node.Others {\n+\t\t\t\t\t\t\tif sharedDevices.(api.Devices).HasDeviceRequest(task.Pod) {",
        "comment_created_at": "2025-08-11T11:07:38+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "If we don't modify NodeInfo, there should be an assertion here",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2137072015",
    "pr_number": 4345,
    "pr_file": "pkg/scheduler/api/job_info.go",
    "created_at": "2025-06-10T07:00:14+00:00",
    "commented_code": "return ji.PodGroup.Spec.NetworkTopology.Mode == scheduling.SoftNetworkTopologyMode\n }\n \n+func (ji *JobInfo) IsTopologyMode() bool {\n+\tif ji.PodGroup == nil || ji.PodGroup.Spec.NetworkTopology == nil {\n+\t\treturn false\n+\t}\n+\treturn ji.PodGroup.Spec.NetworkTopology.Mode == scheduling.SoftNetworkTopologyMode ||",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2137072015",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4345,
        "pr_file": "pkg/scheduler/api/job_info.go",
        "discussion_id": "2137072015",
        "commented_code": "@@ -1068,6 +1068,14 @@ func (ji *JobInfo) IsSoftTopologyMode() bool {\n \treturn ji.PodGroup.Spec.NetworkTopology.Mode == scheduling.SoftNetworkTopologyMode\n }\n \n+func (ji *JobInfo) IsTopologyMode() bool {\n+\tif ji.PodGroup == nil || ji.PodGroup.Spec.NetworkTopology == nil {\n+\t\treturn false\n+\t}\n+\treturn ji.PodGroup.Spec.NetworkTopology.Mode == scheduling.SoftNetworkTopologyMode ||",
        "comment_created_at": "2025-06-10T07:00:14+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "I think \r\n```\r\nif ji.PodGroup == nil || ji.PodGroup.Spec.NetworkTopology == nil {\r\n\t\treturn false\r\n\t}\r\n```\r\n judgment is sufficient, because the mode can only be hard/soft, which has been verified when creating hypernodes",
        "pr_file_module": null
      },
      {
        "comment_id": "2137357115",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4345,
        "pr_file": "pkg/scheduler/api/job_info.go",
        "discussion_id": "2137072015",
        "commented_code": "@@ -1068,6 +1068,14 @@ func (ji *JobInfo) IsSoftTopologyMode() bool {\n \treturn ji.PodGroup.Spec.NetworkTopology.Mode == scheduling.SoftNetworkTopologyMode\n }\n \n+func (ji *JobInfo) IsTopologyMode() bool {\n+\tif ji.PodGroup == nil || ji.PodGroup.Spec.NetworkTopology == nil {\n+\t\treturn false\n+\t}\n+\treturn ji.PodGroup.Spec.NetworkTopology.Mode == scheduling.SoftNetworkTopologyMode ||",
        "comment_created_at": "2025-06-10T09:19:02+00:00",
        "comment_author": "kingeasternsun",
        "comment_body": "Thanks for your advice , fixed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2153427123",
    "pr_number": 4373,
    "pr_file": "pkg/scheduler/framework/util.go",
    "created_at": "2025-06-18T01:08:39+00:00",
    "commented_code": "}\n \treturn nodes, nil\n }\n+\n+func isNodeUnschedulable(node *v1.Node) bool {",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2153427123",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4373,
        "pr_file": "pkg/scheduler/framework/util.go",
        "discussion_id": "2153427123",
        "commented_code": "@@ -262,3 +262,16 @@ func (nl *NodeLister) List() ([]*v1.Node, error) {\n \t}\n \treturn nodes, nil\n }\n+\n+func isNodeUnschedulable(node *v1.Node) bool {",
        "comment_created_at": "2025-06-18T01:08:39+00:00",
        "comment_author": "jessehu",
        "comment_body": "node could be nil, so better to add a nil check here. Refer to https://github.com/volcano-sh/volcano/blob/master/pkg/scheduler/api/node_info.go#L164C3-L164C18",
        "pr_file_module": null
      },
      {
        "comment_id": "2153474998",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4373,
        "pr_file": "pkg/scheduler/framework/util.go",
        "discussion_id": "2153427123",
        "commented_code": "@@ -262,3 +262,16 @@ func (nl *NodeLister) List() ([]*v1.Node, error) {\n \t}\n \treturn nodes, nil\n }\n+\n+func isNodeUnschedulable(node *v1.Node) bool {",
        "comment_created_at": "2025-06-18T02:01:28+00:00",
        "comment_author": "LY-today",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1403054980",
    "pr_number": 3210,
    "pr_file": "pkg/scheduler/plugins/predicates/predicates.go",
    "created_at": "2023-11-23T08:41:43+00:00",
    "commented_code": "}\n \n \t\tfor _, val := range api.RegisteredDevices {\n-\t\t\tif devices, ok := node.Others[val].(api.Devices); ok {\n-\t\t\t\tcode, msg, err := devices.FilterNode(task.Pod)\n+\t\t\tif dev, ok := node.Others[val].(api.Devices); ok {\n+\t\t\t\tif dev == nil {",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "1403054980",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3210,
        "pr_file": "pkg/scheduler/plugins/predicates/predicates.go",
        "discussion_id": "1403054980",
        "commented_code": "@@ -547,8 +548,15 @@ func (pp *predicatesPlugin) OnSessionOpen(ssn *framework.Session) {\n \t\t}\n \n \t\tfor _, val := range api.RegisteredDevices {\n-\t\t\tif devices, ok := node.Others[val].(api.Devices); ok {\n-\t\t\t\tcode, msg, err := devices.FilterNode(task.Pod)\n+\t\t\tif dev, ok := node.Others[val].(api.Devices); ok {\n+\t\t\t\tif dev == nil {",
        "comment_created_at": "2023-11-23T08:41:43+00:00",
        "comment_author": "william-wang",
        "comment_body": "Under what condition, the `dev` is nil?",
        "pr_file_module": null
      },
      {
        "comment_id": "1406067914",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3210,
        "pr_file": "pkg/scheduler/plugins/predicates/predicates.go",
        "discussion_id": "1403054980",
        "commented_code": "@@ -547,8 +548,15 @@ func (pp *predicatesPlugin) OnSessionOpen(ssn *framework.Session) {\n \t\t}\n \n \t\tfor _, val := range api.RegisteredDevices {\n-\t\t\tif devices, ok := node.Others[val].(api.Devices); ok {\n-\t\t\t\tcode, msg, err := devices.FilterNode(task.Pod)\n+\t\t\tif dev, ok := node.Others[val].(api.Devices); ok {\n+\t\t\t\tif dev == nil {",
        "comment_created_at": "2023-11-27T12:09:38+00:00",
        "comment_author": "archlitchi",
        "comment_body": "It happens when you enable the device in predicates.VGPUEnable arguments, but filter out some GPU nodes using \"nodeSelector\" when you apply vgpu-device-plugin. Then node.Others[\"vgpu\"] will be nil for these filtered-out nodes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1404151423",
    "pr_number": 3210,
    "pr_file": "pkg/scheduler/plugins/predicates/predicates.go",
    "created_at": "2023-11-24T09:48:05+00:00",
    "commented_code": "}\n \n \t\tfor _, val := range api.RegisteredDevices {\n-\t\t\tif devices, ok := node.Others[val].(api.Devices); ok {\n-\t\t\t\tcode, msg, err := devices.FilterNode(task.Pod)\n+\t\t\tif dev, ok := node.Others[val].(api.Devices); ok {",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "1404151423",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3210,
        "pr_file": "pkg/scheduler/plugins/predicates/predicates.go",
        "discussion_id": "1404151423",
        "commented_code": "@@ -547,8 +548,15 @@ func (pp *predicatesPlugin) OnSessionOpen(ssn *framework.Session) {\n \t\t}\n \n \t\tfor _, val := range api.RegisteredDevices {\n-\t\t\tif devices, ok := node.Others[val].(api.Devices); ok {\n-\t\t\t\tcode, msg, err := devices.FilterNode(task.Pod)\n+\t\t\tif dev, ok := node.Others[val].(api.Devices); ok {",
        "comment_created_at": "2023-11-24T09:48:05+00:00",
        "comment_author": "Monokaix",
        "comment_body": "Other place in this file like https://github.com/volcano-sh/volcano/blob/2efe281384f2ea3009ae4286480ade11ea514fc7/pkg/scheduler/plugins/predicates/predicates.go#L253 also has this assert, do we also need check wheher it's nil?",
        "pr_file_module": null
      },
      {
        "comment_id": "1406071008",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3210,
        "pr_file": "pkg/scheduler/plugins/predicates/predicates.go",
        "discussion_id": "1404151423",
        "commented_code": "@@ -547,8 +548,15 @@ func (pp *predicatesPlugin) OnSessionOpen(ssn *framework.Session) {\n \t\t}\n \n \t\tfor _, val := range api.RegisteredDevices {\n-\t\t\tif devices, ok := node.Others[val].(api.Devices); ok {\n-\t\t\t\tcode, msg, err := devices.FilterNode(task.Pod)\n+\t\t\tif dev, ok := node.Others[val].(api.Devices); ok {",
        "comment_created_at": "2023-11-27T12:12:17+00:00",
        "comment_author": "archlitchi",
        "comment_body": "Yes, NPE happens when you enable the device in predicates.VGPUEnable arguments, but filter out some GPU nodes using \"nodeSelector\" when you apply vgpu-device-plugin. Then node.Others[\"vgpu\"] will be nil for these filtered-out nodes, we have to add the check here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1611085863",
    "pr_number": 3481,
    "pr_file": "pkg/scheduler/api/devices/nvidia/vgpu/device_info.go",
    "created_at": "2024-05-23T06:38:59+00:00",
    "commented_code": "podDev := decodePodDevices(ids)\n \tfor _, val := range podDev {\n \t\tfor _, deviceused := range val {\n-\t\t\tif gs == nil {",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "1611085863",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3481,
        "pr_file": "pkg/scheduler/api/devices/nvidia/vgpu/device_info.go",
        "discussion_id": "1611085863",
        "commented_code": "@@ -138,9 +135,6 @@ func (gs *GPUDevices) AddResource(pod *v1.Pod) {\n \tpodDev := decodePodDevices(ids)\n \tfor _, val := range podDev {\n \t\tfor _, deviceused := range val {\n-\t\t\tif gs == nil {",
        "comment_created_at": "2024-05-23T06:38:59+00:00",
        "comment_author": "Monokaix",
        "comment_body": "Why these are removed?",
        "pr_file_module": null
      },
      {
        "comment_id": "1611089657",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3481,
        "pr_file": "pkg/scheduler/api/devices/nvidia/vgpu/device_info.go",
        "discussion_id": "1611085863",
        "commented_code": "@@ -138,9 +135,6 @@ func (gs *GPUDevices) AddResource(pod *v1.Pod) {\n \tpodDev := decodePodDevices(ids)\n \tfor _, val := range podDev {\n \t\tfor _, deviceused := range val {\n-\t\t\tif gs == nil {",
        "comment_created_at": "2024-05-23T06:42:36+00:00",
        "comment_author": "coldzerofear",
        "comment_body": "The nil judgment has already been processed on the outer layer, so there is no need to pay attention to whether it is nil inside the function",
        "pr_file_module": null
      },
      {
        "comment_id": "1611173503",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3481,
        "pr_file": "pkg/scheduler/api/devices/nvidia/vgpu/device_info.go",
        "discussion_id": "1611085863",
        "commented_code": "@@ -138,9 +135,6 @@ func (gs *GPUDevices) AddResource(pod *v1.Pod) {\n \tpodDev := decodePodDevices(ids)\n \tfor _, val := range podDev {\n \t\tfor _, deviceused := range val {\n-\t\t\tif gs == nil {",
        "comment_created_at": "2024-05-23T07:46:48+00:00",
        "comment_author": "Monokaix",
        "comment_body": "Here will set nil node, so we should keep nil node check.\r\nhttps://github.com/volcano-sh/volcano/blob/6b32f7bde9db76f40ddb19d253b06521ec7986ef/pkg/scheduler/cache/event_handlers.go#L214",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1916639741",
    "pr_number": 3971,
    "pr_file": "pkg/scheduler/actions/allocate/allocate.go",
    "created_at": "2025-01-15T13:19:48+00:00",
    "commented_code": "klog.V(4).InfoS(\"Find available hyperNodes for job\", \"jobName\", job.UID, \"tier\", selectedTier, \"hyperNodes\", hyperNodes)\n \t}\n \tstmt, hyperNode := alloc.selectBestHyperNode(jobStmtsByTier[selectedTier], job)\n+\tif jobNewHyperNode, ok := LCAHyperNodeMap[hyperNode]; ok {",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "1916639741",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3971,
        "pr_file": "pkg/scheduler/actions/allocate/allocate.go",
        "discussion_id": "1916639741",
        "commented_code": "@@ -290,6 +305,11 @@ func (alloc *Action) allocateResourceForTasksWithTopology(tasks *util.PriorityQu\n \t\tklog.V(4).InfoS(\"Find available hyperNodes for job\", \"jobName\", job.UID, \"tier\", selectedTier, \"hyperNodes\", hyperNodes)\n \t}\n \tstmt, hyperNode := alloc.selectBestHyperNode(jobStmtsByTier[selectedTier], job)\n+\tif jobNewHyperNode, ok := LCAHyperNodeMap[hyperNode]; ok {",
        "comment_created_at": "2025-01-15T13:19:48+00:00",
        "comment_author": "Monokaix",
        "comment_body": "Will `job.PodGroup.GetAnnotations()` be a nil map?",
        "pr_file_module": null
      },
      {
        "comment_id": "1916720730",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3971,
        "pr_file": "pkg/scheduler/actions/allocate/allocate.go",
        "discussion_id": "1916639741",
        "commented_code": "@@ -290,6 +305,11 @@ func (alloc *Action) allocateResourceForTasksWithTopology(tasks *util.PriorityQu\n \t\tklog.V(4).InfoS(\"Find available hyperNodes for job\", \"jobName\", job.UID, \"tier\", selectedTier, \"hyperNodes\", hyperNodes)\n \t}\n \tstmt, hyperNode := alloc.selectBestHyperNode(jobStmtsByTier[selectedTier], job)\n+\tif jobNewHyperNode, ok := LCAHyperNodeMap[hyperNode]; ok {",
        "comment_created_at": "2025-01-15T14:14:18+00:00",
        "comment_author": "ecosysbin",
        "comment_body": "Yes, according to e2e test, it will be empty when no Annotations setting.",
        "pr_file_module": null
      },
      {
        "comment_id": "1916727935",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3971,
        "pr_file": "pkg/scheduler/actions/allocate/allocate.go",
        "discussion_id": "1916639741",
        "commented_code": "@@ -290,6 +305,11 @@ func (alloc *Action) allocateResourceForTasksWithTopology(tasks *util.PriorityQu\n \t\tklog.V(4).InfoS(\"Find available hyperNodes for job\", \"jobName\", job.UID, \"tier\", selectedTier, \"hyperNodes\", hyperNodes)\n \t}\n \tstmt, hyperNode := alloc.selectBestHyperNode(jobStmtsByTier[selectedTier], job)\n+\tif jobNewHyperNode, ok := LCAHyperNodeMap[hyperNode]; ok {",
        "comment_created_at": "2025-01-15T14:18:21+00:00",
        "comment_author": "Monokaix",
        "comment_body": "So how to avoid panic?",
        "pr_file_module": null
      },
      {
        "comment_id": "1916799303",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3971,
        "pr_file": "pkg/scheduler/actions/allocate/allocate.go",
        "discussion_id": "1916639741",
        "commented_code": "@@ -290,6 +305,11 @@ func (alloc *Action) allocateResourceForTasksWithTopology(tasks *util.PriorityQu\n \t\tklog.V(4).InfoS(\"Find available hyperNodes for job\", \"jobName\", job.UID, \"tier\", selectedTier, \"hyperNodes\", hyperNodes)\n \t}\n \tstmt, hyperNode := alloc.selectBestHyperNode(jobStmtsByTier[selectedTier], job)\n+\tif jobNewHyperNode, ok := LCAHyperNodeMap[hyperNode]; ok {",
        "comment_created_at": "2025-01-15T14:54:08+00:00",
        "comment_author": "ecosysbin",
        "comment_body": "In PodGroup event handler,  it will init podgroup.Annotations if podgroup.GetAnnotations() be nil.\r\n\r\n\tif podgroup.GetAnnotations() == nil {\r\n\t\tpodgroup.SetAnnotations(map[string]string{})\r\n\t}",
        "pr_file_module": null
      },
      {
        "comment_id": "1916856521",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3971,
        "pr_file": "pkg/scheduler/actions/allocate/allocate.go",
        "discussion_id": "1916639741",
        "commented_code": "@@ -290,6 +305,11 @@ func (alloc *Action) allocateResourceForTasksWithTopology(tasks *util.PriorityQu\n \t\tklog.V(4).InfoS(\"Find available hyperNodes for job\", \"jobName\", job.UID, \"tier\", selectedTier, \"hyperNodes\", hyperNodes)\n \t}\n \tstmt, hyperNode := alloc.selectBestHyperNode(jobStmtsByTier[selectedTier], job)\n+\tif jobNewHyperNode, ok := LCAHyperNodeMap[hyperNode]; ok {",
        "comment_created_at": "2025-01-15T15:27:32+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "Didn\u2019t you initialize the nil annotation in the informer\u2019s `AddPodGroupV1beta1` and `UpdatePodGroupV1beta1` event handlers?",
        "pr_file_module": null
      },
      {
        "comment_id": "1916871847",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3971,
        "pr_file": "pkg/scheduler/actions/allocate/allocate.go",
        "discussion_id": "1916639741",
        "commented_code": "@@ -290,6 +305,11 @@ func (alloc *Action) allocateResourceForTasksWithTopology(tasks *util.PriorityQu\n \t\tklog.V(4).InfoS(\"Find available hyperNodes for job\", \"jobName\", job.UID, \"tier\", selectedTier, \"hyperNodes\", hyperNodes)\n \t}\n \tstmt, hyperNode := alloc.selectBestHyperNode(jobStmtsByTier[selectedTier], job)\n+\tif jobNewHyperNode, ok := LCAHyperNodeMap[hyperNode]; ok {",
        "comment_created_at": "2025-01-15T15:37:18+00:00",
        "comment_author": "ecosysbin",
        "comment_body": "Yes\uff0cyou are right, it will not be empty.",
        "pr_file_module": null
      }
    ]
  }
]