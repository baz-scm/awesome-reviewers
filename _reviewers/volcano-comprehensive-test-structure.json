[
  {
    "discussion_id": "2173101068",
    "pr_number": 4391,
    "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
    "created_at": "2025-06-28T03:14:00+00:00",
    "commented_code": "+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+func Test_nodeResourcesFitPlus_String(t *testing.T) {",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2173101068",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
        "discussion_id": "2173101068",
        "commented_code": "@@ -0,0 +1,563 @@\n+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+func Test_nodeResourcesFitPlus_String(t *testing.T) {",
        "comment_created_at": "2025-06-28T03:14:00+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "The plugin has been already renamed to `NodeStrategyFit`, but the func name here is still `NodeResourcesFit`, Please check your PR for any places that still have `NodeResourcesFit` and rename them",
        "pr_file_module": null
      },
      {
        "comment_id": "2173104964",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
        "discussion_id": "2173101068",
        "commented_code": "@@ -0,0 +1,563 @@\n+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+func Test_nodeResourcesFitPlus_String(t *testing.T) {",
        "comment_created_at": "2025-06-28T03:23:26+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "BTW, we only need UT coverage of the main logic. For example, after adding the NodeStrategyFit plugin, we should check whether the scheduling process is correct.",
        "pr_file_module": null
      },
      {
        "comment_id": "2174075955",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
        "discussion_id": "2173101068",
        "commented_code": "@@ -0,0 +1,563 @@\n+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+func Test_nodeResourcesFitPlus_String(t *testing.T) {",
        "comment_created_at": "2025-06-30T01:53:25+00:00",
        "comment_author": "LY-today",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2173104749",
    "pr_number": 4391,
    "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
    "created_at": "2025-06-28T03:22:17+00:00",
    "commented_code": null,
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2173104749",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
        "discussion_id": "2173104749",
        "commented_code": null,
        "comment_created_at": "2025-06-28T03:22:17+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "Should also add test case just like https://github.com/volcano-sh/volcano/blob/068b7bc3d8ecfc8274a82e4f458bbb84fac883bf/pkg/scheduler/actions/allocate/allocate_test.go#L68 `TestAllocate` to use TestCommonStruct to completely check the scheduling process",
        "pr_file_module": null
      },
      {
        "comment_id": "2174165085",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
        "discussion_id": "2173104749",
        "commented_code": null,
        "comment_created_at": "2025-06-30T03:54:42+00:00",
        "comment_author": "LY-today",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176831971",
    "pr_number": 4391,
    "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
    "created_at": "2025-07-01T08:33:15+00:00",
    "commented_code": "+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"k8s.io/apimachinery/pkg/api/resource\"\n+\t\"math\"\n+\t\"reflect\"\n+\t\"testing\"\n+\tschedulingv1 \"volcano.sh/apis/pkg/apis/scheduling/v1beta1\"\n+\t\"volcano.sh/volcano/pkg/scheduler/conf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/uthelper\"\n+\t\"volcano.sh/volcano/pkg/scheduler/util\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+const (\n+\teps = 1e-8\n+)\n+\n+func Test_calculateWeight(t *testing.T) {\n+\ttype args struct {\n+\t\targs framework.Arguments\n+\t}\n+\ttests := []struct {\n+\t\tname string\n+\t\targs args\n+\t\twant ResourceStrategyFit\n+\t}{\n+\t\t{\"test1\", args{framework.Arguments{\n+\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\"cpu\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\"weight\": 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}}, ResourceStrategyFit{\n+\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\"cpu\": {\n+\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}},\n+\t\t{\"test2\", args{framework.Arguments{\n+\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\"cpu\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\"weight\": 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}}, ResourceStrategyFit{\n+\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\"cpu\": {\n+\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}},\n+\t\t{\"test3\", args{framework.Arguments{\n+\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t}}, ResourceStrategyFit{\n+\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\"cpu\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tif got := calculateWeight(tt.args.args); !reflect.DeepEqual(got, tt.want) {\n+\t\t\t\tt.Errorf(\"calculateWeight() = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestPlusScore(t *testing.T) {\n+\ttype args struct {\n+\t\ttask   *api.TaskInfo\n+\t\tnode   *api.NodeInfo\n+\t\tweight ResourceStrategyFit\n+\t}\n+\ttests := []struct {\n+\t\tname string\n+\t\targs args\n+\t\twant float64\n+\t}{\n+\t\t{name: \"test1\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 400},\n+\t\t{name: \"test2\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 400,\n+\t\t\t\t\tMemory:   400,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 250},\n+\t\t{name: \"test3\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t\t{name: \"test4\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 400,\n+\t\t\t\t\tMemory:   400,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 750},\n+\t\t{name: \"test5\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t\t{name: \"test6\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 750},\n+\t\t{name: \"test7\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 0,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t\t{name: \"test8\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMemory: 400,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 500},\n+\t\t{name: \"test9\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t}\n+\tsocre := map[string]float64{}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tif got := PlusScore(tt.args.task, tt.args.node, tt.args.weight); got != tt.want {\n+\t\t\t\tif tt.name == \"test5\" || tt.name == \"test6\" {\n+\t\t\t\t\tsocre[tt.name] = got\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t\tt.Errorf(\"PlusScore() = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func Test_mostRequestedScore(t *testing.T) {\n+\ttype args struct {\n+\t\trequested float64\n+\t\tused      float64\n+\t\tcapacity  float64\n+\t\tweight    int\n+\t}\n+\ttests := []struct {\n+\t\tname    string\n+\t\targs    args\n+\t\twant    float64\n+\t\twantErr bool\n+\t}{\n+\t\t{name: \"test1\", args: args{\n+\t\t\trequested: 0,\n+\t\t\tused:      0,\n+\t\t\tcapacity:  0,\n+\t\t\tweight:    0,\n+\t\t}, want: 0, wantErr: false},\n+\t\t{name: \"test2\", args: args{\n+\t\t\trequested: 1,\n+\t\t\tused:      2,\n+\t\t\tcapacity:  2,\n+\t\t\tweight:    1,\n+\t\t}, want: 0, wantErr: true},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tgot, err := mostRequestedScore(tt.args.requested, tt.args.used, tt.args.capacity, tt.args.weight)\n+\t\t\tif (err != nil) != tt.wantErr {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() error = %v, wantErr %v\", err, tt.wantErr)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() got = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func Test_leastRequestedScore(t *testing.T) {\n+\ttype args struct {\n+\t\trequested float64\n+\t\tused      float64\n+\t\tcapacity  float64\n+\t\tweight    int\n+\t}\n+\ttests := []struct {\n+\t\tname    string\n+\t\targs    args\n+\t\twant    float64\n+\t\twantErr bool\n+\t}{\n+\t\t{name: \"test1\", args: args{\n+\t\t\trequested: 0,\n+\t\t\tused:      0,\n+\t\t\tcapacity:  0,\n+\t\t\tweight:    0,\n+\t\t}, want: 0, wantErr: false},\n+\t\t{name: \"test2\", args: args{\n+\t\t\trequested: 1,\n+\t\t\tused:      2,\n+\t\t\tcapacity:  2,\n+\t\t\tweight:    1,\n+\t\t}, want: 0, wantErr: true},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tgot, err := leastRequestedScore(tt.args.requested, tt.args.used, tt.args.capacity, tt.args.weight)\n+\t\t\tif (err != nil) != tt.wantErr {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() error = %v, wantErr %v\", err, tt.wantErr)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() got = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func Test_resourceStrategyFitPlusWeightPlusPlugin_OnSessionOpen(t *testing.T) {\n+\ttype fields struct {\n+\t\tweight ResourceStrategyFit\n+\t}\n+\ttype args struct {\n+\t\tssn *framework.Session\n+\t}\n+\ttests := []struct {\n+\t\tname   string\n+\t\tfields fields\n+\t\targs   args\n+\t}{\n+\t\t{name: \"test1\", args: args{ssn: &framework.Session{}}},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\trsf := &resourceStrategyFitPlugin{\n+\t\t\t\tweight: tt.fields.weight,\n+\t\t\t}\n+\t\t\trsf.OnSessionOpen(tt.args.ssn)\n+\t\t})\n+\t}\n+}\n+\n+func addResource(resourceList v1.ResourceList, name v1.ResourceName, need string) {\n+\tresourceList[name] = resource.MustParse(need)\n+}\n+\n+func TestResourceStrategyFitPlugin(t *testing.T) {\n+\tGPU := v1.ResourceName(\"nvidia.com/gpu\")\n+\tFOO := v1.ResourceName(\"example.com/foo\")\n+\n+\tp1 := util.BuildPod(\"c1\", \"p1\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p1.Spec.Containers[0].Resources.Requests, FOO, \"2\")\n+\tp2 := util.BuildPod(\"c1\", \"p2\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p2.Spec.Containers[0].Resources.Requests, FOO, \"3\")\n+\tp3 := util.BuildPod(\"c1\", \"p3\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"10Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p3.Spec.Containers[0].Resources.Requests, GPU, \"2\")\n+\tp4 := util.BuildPod(\"c1\", \"p4\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p4.Spec.Containers[0].Resources.Requests, GPU, \"3\")\n+\n+\tp5 := util.BuildPod(\"c1\", \"p5\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p5.Spec.Containers[0].Resources.Requests, GPU, \"4\")\n+\taddResource(p5.Spec.Containers[0].Resources.Requests, FOO, \"4\")\n+\n+\tn1 := util.BuildNode(\"n1\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n1.Status.Allocatable, GPU, \"10\")\n+\tn2 := util.BuildNode(\"n2\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n2.Status.Allocatable, GPU, \"5\")\n+\tn3 := util.BuildNode(\"n3\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n3.Status.Allocatable, FOO, \"10\")\n+\tn4 := util.BuildNode(\"n4\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n4.Status.Allocatable, FOO, \"5\")\n+\n+\tn5 := util.BuildNode(\"n5\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n5.Status.Allocatable, GPU, \"10\")\n+\taddResource(n5.Status.Allocatable, FOO, \"5\")\n+\tn6 := util.BuildNode(\"n6\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n6.Status.Allocatable, FOO, \"5\")\n+\taddResource(n6.Status.Allocatable, FOO, \"10\")\n+\n+\tpg1 := util.BuildPodGroup(\"pg1\", \"c1\", \"c1\", 0, nil, \"\")\n+\tqueue1 := util.BuildQueue(\"c1\", 1, nil)\n+\n+\ttests := []struct {\n+\t\tuthelper.TestCommonStruct\n+\t\targuments framework.Arguments\n+\t\texpected  map[string]map[string]float64\n+\t}{\n+\t\t{\n+\t\t\tTestCommonStruct: uthelper.TestCommonStruct{\n+\n+\t\t\t\tName:      \"single job\",\n+\t\t\t\tPlugins:   map[string]framework.PluginBuilder{PluginName: New},\n+\t\t\t\tPodGroups: []*schedulingv1.PodGroup{pg1},\n+\t\t\t\tQueues:    []*schedulingv1.Queue{queue1},\n+\t\t\t\tPods:      []*v1.Pod{p1, p2, p3, p4},\n+\t\t\t\tNodes:     []*v1.Node{n1, n2, n3, n4},\n+\t\t\t},\n+\t\t\targuments: framework.Arguments{\n+\t\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\t\"nvidia.com/gpu\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"example.com/foo\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\texpected: map[string]map[string]float64{\n+\t\t\t\t\"c1/p1\": {\n+\t\t\t\t\t\"n1\": 0,\n+\t\t\t\t\t\"n2\": 0,\n+\t\t\t\t\t\"n3\": 800,\n+\t\t\t\t\t\"n4\": 600,\n+\t\t\t\t},\n+\t\t\t\t\"c1/p2\": {\n+\t\t\t\t\t\"n1\": 0,\n+\t\t\t\t\t\"n2\": 0,\n+\t\t\t\t\t\"n3\": 700,\n+\t\t\t\t\t\"n4\": 400,\n+\t\t\t\t},\n+\t\t\t\t\"c1/p3\": {\n+\t\t\t\t\t\"n1\": 200,\n+\t\t\t\t\t\"n2\": 400,\n+\t\t\t\t\t\"n3\": 0,\n+\t\t\t\t\t\"n4\": 0,\n+\t\t\t\t},\n+\t\t\t\t\"c1/p4\": {\n+\t\t\t\t\t\"n1\": 300,\n+\t\t\t\t\t\"n2\": 600,\n+\t\t\t\t\t\"n3\": 0,\n+\t\t\t\t\t\"n4\": 0,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tTestCommonStruct: uthelper.TestCommonStruct{\n+\t\t\t\tName:      \"single job\",\n+\t\t\t\tPlugins:   map[string]framework.PluginBuilder{PluginName: New},\n+\t\t\t\tPodGroups: []*schedulingv1.PodGroup{pg1},\n+\t\t\t\tQueues:    []*schedulingv1.Queue{queue1},\n+\t\t\t\tPods:      []*v1.Pod{p5},\n+\t\t\t\tNodes:     []*v1.Node{n5, n6},\n+\t\t\t},\n+\t\t\targuments: framework.Arguments{\n+\t\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\t\"nvidia.com/gpu\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"example.com/foo\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\t\"weight\": 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\texpected: map[string]map[string]float64{\n+\t\t\t\t\"c1/p5\": {\n+\t\t\t\t\t\"n5\": 266.66666666,\n+\t\t\t\t\t\"n6\": 399.99999999,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\ttrueValue := true\n+\tfor i, test := range tests {\n+\t\ttiers := []conf.Tier{\n+\t\t\t{\n+\t\t\t\tPlugins: []conf.PluginOption{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tName:             PluginName,\n+\t\t\t\t\t\tEnabledNodeOrder: &trueValue,\n+\t\t\t\t\t\tArguments:        test.arguments,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}\n+\t\tssn := test.RegisterSession(tiers, nil)\n+\t\tfor _, job := range ssn.Jobs {",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2176831971",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
        "discussion_id": "2176831971",
        "commented_code": "@@ -0,0 +1,665 @@\n+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"k8s.io/apimachinery/pkg/api/resource\"\n+\t\"math\"\n+\t\"reflect\"\n+\t\"testing\"\n+\tschedulingv1 \"volcano.sh/apis/pkg/apis/scheduling/v1beta1\"\n+\t\"volcano.sh/volcano/pkg/scheduler/conf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/uthelper\"\n+\t\"volcano.sh/volcano/pkg/scheduler/util\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+const (\n+\teps = 1e-8\n+)\n+\n+func Test_calculateWeight(t *testing.T) {\n+\ttype args struct {\n+\t\targs framework.Arguments\n+\t}\n+\ttests := []struct {\n+\t\tname string\n+\t\targs args\n+\t\twant ResourceStrategyFit\n+\t}{\n+\t\t{\"test1\", args{framework.Arguments{\n+\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\"cpu\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\"weight\": 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}}, ResourceStrategyFit{\n+\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\"cpu\": {\n+\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}},\n+\t\t{\"test2\", args{framework.Arguments{\n+\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\"cpu\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\"weight\": 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}}, ResourceStrategyFit{\n+\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\"cpu\": {\n+\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}},\n+\t\t{\"test3\", args{framework.Arguments{\n+\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t}}, ResourceStrategyFit{\n+\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\"cpu\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tif got := calculateWeight(tt.args.args); !reflect.DeepEqual(got, tt.want) {\n+\t\t\t\tt.Errorf(\"calculateWeight() = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestPlusScore(t *testing.T) {\n+\ttype args struct {\n+\t\ttask   *api.TaskInfo\n+\t\tnode   *api.NodeInfo\n+\t\tweight ResourceStrategyFit\n+\t}\n+\ttests := []struct {\n+\t\tname string\n+\t\targs args\n+\t\twant float64\n+\t}{\n+\t\t{name: \"test1\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 400},\n+\t\t{name: \"test2\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 400,\n+\t\t\t\t\tMemory:   400,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 250},\n+\t\t{name: \"test3\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t\t{name: \"test4\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 400,\n+\t\t\t\t\tMemory:   400,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 750},\n+\t\t{name: \"test5\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t\t{name: \"test6\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 750},\n+\t\t{name: \"test7\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 0,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t\t{name: \"test8\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMemory: 400,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 500},\n+\t\t{name: \"test9\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t}\n+\tsocre := map[string]float64{}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tif got := PlusScore(tt.args.task, tt.args.node, tt.args.weight); got != tt.want {\n+\t\t\t\tif tt.name == \"test5\" || tt.name == \"test6\" {\n+\t\t\t\t\tsocre[tt.name] = got\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t\tt.Errorf(\"PlusScore() = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func Test_mostRequestedScore(t *testing.T) {\n+\ttype args struct {\n+\t\trequested float64\n+\t\tused      float64\n+\t\tcapacity  float64\n+\t\tweight    int\n+\t}\n+\ttests := []struct {\n+\t\tname    string\n+\t\targs    args\n+\t\twant    float64\n+\t\twantErr bool\n+\t}{\n+\t\t{name: \"test1\", args: args{\n+\t\t\trequested: 0,\n+\t\t\tused:      0,\n+\t\t\tcapacity:  0,\n+\t\t\tweight:    0,\n+\t\t}, want: 0, wantErr: false},\n+\t\t{name: \"test2\", args: args{\n+\t\t\trequested: 1,\n+\t\t\tused:      2,\n+\t\t\tcapacity:  2,\n+\t\t\tweight:    1,\n+\t\t}, want: 0, wantErr: true},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tgot, err := mostRequestedScore(tt.args.requested, tt.args.used, tt.args.capacity, tt.args.weight)\n+\t\t\tif (err != nil) != tt.wantErr {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() error = %v, wantErr %v\", err, tt.wantErr)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() got = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func Test_leastRequestedScore(t *testing.T) {\n+\ttype args struct {\n+\t\trequested float64\n+\t\tused      float64\n+\t\tcapacity  float64\n+\t\tweight    int\n+\t}\n+\ttests := []struct {\n+\t\tname    string\n+\t\targs    args\n+\t\twant    float64\n+\t\twantErr bool\n+\t}{\n+\t\t{name: \"test1\", args: args{\n+\t\t\trequested: 0,\n+\t\t\tused:      0,\n+\t\t\tcapacity:  0,\n+\t\t\tweight:    0,\n+\t\t}, want: 0, wantErr: false},\n+\t\t{name: \"test2\", args: args{\n+\t\t\trequested: 1,\n+\t\t\tused:      2,\n+\t\t\tcapacity:  2,\n+\t\t\tweight:    1,\n+\t\t}, want: 0, wantErr: true},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tgot, err := leastRequestedScore(tt.args.requested, tt.args.used, tt.args.capacity, tt.args.weight)\n+\t\t\tif (err != nil) != tt.wantErr {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() error = %v, wantErr %v\", err, tt.wantErr)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() got = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func Test_resourceStrategyFitPlusWeightPlusPlugin_OnSessionOpen(t *testing.T) {\n+\ttype fields struct {\n+\t\tweight ResourceStrategyFit\n+\t}\n+\ttype args struct {\n+\t\tssn *framework.Session\n+\t}\n+\ttests := []struct {\n+\t\tname   string\n+\t\tfields fields\n+\t\targs   args\n+\t}{\n+\t\t{name: \"test1\", args: args{ssn: &framework.Session{}}},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\trsf := &resourceStrategyFitPlugin{\n+\t\t\t\tweight: tt.fields.weight,\n+\t\t\t}\n+\t\t\trsf.OnSessionOpen(tt.args.ssn)\n+\t\t})\n+\t}\n+}\n+\n+func addResource(resourceList v1.ResourceList, name v1.ResourceName, need string) {\n+\tresourceList[name] = resource.MustParse(need)\n+}\n+\n+func TestResourceStrategyFitPlugin(t *testing.T) {\n+\tGPU := v1.ResourceName(\"nvidia.com/gpu\")\n+\tFOO := v1.ResourceName(\"example.com/foo\")\n+\n+\tp1 := util.BuildPod(\"c1\", \"p1\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p1.Spec.Containers[0].Resources.Requests, FOO, \"2\")\n+\tp2 := util.BuildPod(\"c1\", \"p2\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p2.Spec.Containers[0].Resources.Requests, FOO, \"3\")\n+\tp3 := util.BuildPod(\"c1\", \"p3\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"10Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p3.Spec.Containers[0].Resources.Requests, GPU, \"2\")\n+\tp4 := util.BuildPod(\"c1\", \"p4\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p4.Spec.Containers[0].Resources.Requests, GPU, \"3\")\n+\n+\tp5 := util.BuildPod(\"c1\", \"p5\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p5.Spec.Containers[0].Resources.Requests, GPU, \"4\")\n+\taddResource(p5.Spec.Containers[0].Resources.Requests, FOO, \"4\")\n+\n+\tn1 := util.BuildNode(\"n1\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n1.Status.Allocatable, GPU, \"10\")\n+\tn2 := util.BuildNode(\"n2\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n2.Status.Allocatable, GPU, \"5\")\n+\tn3 := util.BuildNode(\"n3\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n3.Status.Allocatable, FOO, \"10\")\n+\tn4 := util.BuildNode(\"n4\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n4.Status.Allocatable, FOO, \"5\")\n+\n+\tn5 := util.BuildNode(\"n5\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n5.Status.Allocatable, GPU, \"10\")\n+\taddResource(n5.Status.Allocatable, FOO, \"5\")\n+\tn6 := util.BuildNode(\"n6\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n6.Status.Allocatable, FOO, \"5\")\n+\taddResource(n6.Status.Allocatable, FOO, \"10\")\n+\n+\tpg1 := util.BuildPodGroup(\"pg1\", \"c1\", \"c1\", 0, nil, \"\")\n+\tqueue1 := util.BuildQueue(\"c1\", 1, nil)\n+\n+\ttests := []struct {\n+\t\tuthelper.TestCommonStruct\n+\t\targuments framework.Arguments\n+\t\texpected  map[string]map[string]float64\n+\t}{\n+\t\t{\n+\t\t\tTestCommonStruct: uthelper.TestCommonStruct{\n+\n+\t\t\t\tName:      \"single job\",\n+\t\t\t\tPlugins:   map[string]framework.PluginBuilder{PluginName: New},\n+\t\t\t\tPodGroups: []*schedulingv1.PodGroup{pg1},\n+\t\t\t\tQueues:    []*schedulingv1.Queue{queue1},\n+\t\t\t\tPods:      []*v1.Pod{p1, p2, p3, p4},\n+\t\t\t\tNodes:     []*v1.Node{n1, n2, n3, n4},\n+\t\t\t},\n+\t\t\targuments: framework.Arguments{\n+\t\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\t\"nvidia.com/gpu\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"example.com/foo\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\texpected: map[string]map[string]float64{\n+\t\t\t\t\"c1/p1\": {\n+\t\t\t\t\t\"n1\": 0,\n+\t\t\t\t\t\"n2\": 0,\n+\t\t\t\t\t\"n3\": 800,\n+\t\t\t\t\t\"n4\": 600,\n+\t\t\t\t},\n+\t\t\t\t\"c1/p2\": {\n+\t\t\t\t\t\"n1\": 0,\n+\t\t\t\t\t\"n2\": 0,\n+\t\t\t\t\t\"n3\": 700,\n+\t\t\t\t\t\"n4\": 400,\n+\t\t\t\t},\n+\t\t\t\t\"c1/p3\": {\n+\t\t\t\t\t\"n1\": 200,\n+\t\t\t\t\t\"n2\": 400,\n+\t\t\t\t\t\"n3\": 0,\n+\t\t\t\t\t\"n4\": 0,\n+\t\t\t\t},\n+\t\t\t\t\"c1/p4\": {\n+\t\t\t\t\t\"n1\": 300,\n+\t\t\t\t\t\"n2\": 600,\n+\t\t\t\t\t\"n3\": 0,\n+\t\t\t\t\t\"n4\": 0,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tTestCommonStruct: uthelper.TestCommonStruct{\n+\t\t\t\tName:      \"single job\",\n+\t\t\t\tPlugins:   map[string]framework.PluginBuilder{PluginName: New},\n+\t\t\t\tPodGroups: []*schedulingv1.PodGroup{pg1},\n+\t\t\t\tQueues:    []*schedulingv1.Queue{queue1},\n+\t\t\t\tPods:      []*v1.Pod{p5},\n+\t\t\t\tNodes:     []*v1.Node{n5, n6},\n+\t\t\t},\n+\t\t\targuments: framework.Arguments{\n+\t\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\t\"nvidia.com/gpu\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"example.com/foo\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\t\"weight\": 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\texpected: map[string]map[string]float64{\n+\t\t\t\t\"c1/p5\": {\n+\t\t\t\t\t\"n5\": 266.66666666,\n+\t\t\t\t\t\"n6\": 399.99999999,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\ttrueValue := true\n+\tfor i, test := range tests {\n+\t\ttiers := []conf.Tier{\n+\t\t\t{\n+\t\t\t\tPlugins: []conf.PluginOption{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tName:             PluginName,\n+\t\t\t\t\t\tEnabledNodeOrder: &trueValue,\n+\t\t\t\t\t\tArguments:        test.arguments,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}\n+\t\tssn := test.RegisterSession(tiers, nil)\n+\t\tfor _, job := range ssn.Jobs {",
        "comment_created_at": "2025-07-01T08:33:15+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "You should write this test like\r\n```\r\n\tfor i, test := range tests {\r\n\t\tt.Run(test.Name, func(t *testing.T) {\r\n\t\t\ttest.Plugins = plugins\r\n\t\t\ttest.RegisterSession(tiers, nil)\r\n\t\t\tdefer test.Close()\r\n\t\t\ttest.Run([]framework.Action{New()})\r\n\t\t\tif err := test.CheckAll(i); err != nil {\r\n\t\t\t\tt.Fatal(err)\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n```\r\nhttps://github.com/volcano-sh/volcano/blob/068b7bc3d8ecfc8274a82e4f458bbb84fac883bf/pkg/scheduler/actions/allocate/allocate_test.go#L259-L269\r\nNot only NodeOrder",
        "pr_file_module": null
      },
      {
        "comment_id": "2177537752",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
        "discussion_id": "2176831971",
        "commented_code": "@@ -0,0 +1,665 @@\n+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"k8s.io/apimachinery/pkg/api/resource\"\n+\t\"math\"\n+\t\"reflect\"\n+\t\"testing\"\n+\tschedulingv1 \"volcano.sh/apis/pkg/apis/scheduling/v1beta1\"\n+\t\"volcano.sh/volcano/pkg/scheduler/conf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/uthelper\"\n+\t\"volcano.sh/volcano/pkg/scheduler/util\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+const (\n+\teps = 1e-8\n+)\n+\n+func Test_calculateWeight(t *testing.T) {\n+\ttype args struct {\n+\t\targs framework.Arguments\n+\t}\n+\ttests := []struct {\n+\t\tname string\n+\t\targs args\n+\t\twant ResourceStrategyFit\n+\t}{\n+\t\t{\"test1\", args{framework.Arguments{\n+\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\"cpu\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\"weight\": 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}}, ResourceStrategyFit{\n+\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\"cpu\": {\n+\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}},\n+\t\t{\"test2\", args{framework.Arguments{\n+\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\"cpu\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": map[string]interface{}{\n+\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\"weight\": 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}}, ResourceStrategyFit{\n+\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\"cpu\": {\n+\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 2,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}},\n+\t\t{\"test3\", args{framework.Arguments{\n+\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t}}, ResourceStrategyFit{\n+\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\"cpu\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t\t\"memory\": {\n+\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\tWeight: 1,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tif got := calculateWeight(tt.args.args); !reflect.DeepEqual(got, tt.want) {\n+\t\t\t\tt.Errorf(\"calculateWeight() = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestPlusScore(t *testing.T) {\n+\ttype args struct {\n+\t\ttask   *api.TaskInfo\n+\t\tnode   *api.NodeInfo\n+\t\tweight ResourceStrategyFit\n+\t}\n+\ttests := []struct {\n+\t\tname string\n+\t\targs args\n+\t\twant float64\n+\t}{\n+\t\t{name: \"test1\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 400},\n+\t\t{name: \"test2\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 400,\n+\t\t\t\t\tMemory:   400,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 250},\n+\t\t{name: \"test3\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t\t{name: \"test4\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 400,\n+\t\t\t\t\tMemory:   400,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 750},\n+\t\t{name: \"test5\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t\t{name: \"test6\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 750},\n+\t\t{name: \"test7\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 0,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t\t{name: \"test8\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMemory: 400,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"cpu\": {\n+\t\t\t\t\t\tType:   config.LeastAllocated,\n+\t\t\t\t\t\tWeight: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 500},\n+\t\t{name: \"test9\", args: args{\n+\t\t\ttask: &api.TaskInfo{\n+\t\t\t\tResreq: &api.Resource{\n+\t\t\t\t\tMilliCPU: 100,\n+\t\t\t\t\tMemory:   100,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnode: &api.NodeInfo{\n+\t\t\t\tUsed: &api.Resource{\n+\t\t\t\t\tMilliCPU: 200,\n+\t\t\t\t\tMemory:   200,\n+\t\t\t\t},\n+\t\t\t\tAllocatable: &api.Resource{\n+\t\t\t\t\tMilliCPU: 500,\n+\t\t\t\t\tMemory:   500,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tweight: ResourceStrategyFit{\n+\t\t\t\tResourceStrategyFitWeight: 10,\n+\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\n+\t\t\t\t\t\"memory\": {\n+\t\t\t\t\t\tType:   config.MostAllocated,\n+\t\t\t\t\t\tWeight: 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}, want: 600},\n+\t}\n+\tsocre := map[string]float64{}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tif got := PlusScore(tt.args.task, tt.args.node, tt.args.weight); got != tt.want {\n+\t\t\t\tif tt.name == \"test5\" || tt.name == \"test6\" {\n+\t\t\t\t\tsocre[tt.name] = got\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t\tt.Errorf(\"PlusScore() = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func Test_mostRequestedScore(t *testing.T) {\n+\ttype args struct {\n+\t\trequested float64\n+\t\tused      float64\n+\t\tcapacity  float64\n+\t\tweight    int\n+\t}\n+\ttests := []struct {\n+\t\tname    string\n+\t\targs    args\n+\t\twant    float64\n+\t\twantErr bool\n+\t}{\n+\t\t{name: \"test1\", args: args{\n+\t\t\trequested: 0,\n+\t\t\tused:      0,\n+\t\t\tcapacity:  0,\n+\t\t\tweight:    0,\n+\t\t}, want: 0, wantErr: false},\n+\t\t{name: \"test2\", args: args{\n+\t\t\trequested: 1,\n+\t\t\tused:      2,\n+\t\t\tcapacity:  2,\n+\t\t\tweight:    1,\n+\t\t}, want: 0, wantErr: true},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tgot, err := mostRequestedScore(tt.args.requested, tt.args.used, tt.args.capacity, tt.args.weight)\n+\t\t\tif (err != nil) != tt.wantErr {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() error = %v, wantErr %v\", err, tt.wantErr)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() got = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func Test_leastRequestedScore(t *testing.T) {\n+\ttype args struct {\n+\t\trequested float64\n+\t\tused      float64\n+\t\tcapacity  float64\n+\t\tweight    int\n+\t}\n+\ttests := []struct {\n+\t\tname    string\n+\t\targs    args\n+\t\twant    float64\n+\t\twantErr bool\n+\t}{\n+\t\t{name: \"test1\", args: args{\n+\t\t\trequested: 0,\n+\t\t\tused:      0,\n+\t\t\tcapacity:  0,\n+\t\t\tweight:    0,\n+\t\t}, want: 0, wantErr: false},\n+\t\t{name: \"test2\", args: args{\n+\t\t\trequested: 1,\n+\t\t\tused:      2,\n+\t\t\tcapacity:  2,\n+\t\t\tweight:    1,\n+\t\t}, want: 0, wantErr: true},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tgot, err := leastRequestedScore(tt.args.requested, tt.args.used, tt.args.capacity, tt.args.weight)\n+\t\t\tif (err != nil) != tt.wantErr {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() error = %v, wantErr %v\", err, tt.wantErr)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"mostRequestedScore() got = %v, want %v\", got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func Test_resourceStrategyFitPlusWeightPlusPlugin_OnSessionOpen(t *testing.T) {\n+\ttype fields struct {\n+\t\tweight ResourceStrategyFit\n+\t}\n+\ttype args struct {\n+\t\tssn *framework.Session\n+\t}\n+\ttests := []struct {\n+\t\tname   string\n+\t\tfields fields\n+\t\targs   args\n+\t}{\n+\t\t{name: \"test1\", args: args{ssn: &framework.Session{}}},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\trsf := &resourceStrategyFitPlugin{\n+\t\t\t\tweight: tt.fields.weight,\n+\t\t\t}\n+\t\t\trsf.OnSessionOpen(tt.args.ssn)\n+\t\t})\n+\t}\n+}\n+\n+func addResource(resourceList v1.ResourceList, name v1.ResourceName, need string) {\n+\tresourceList[name] = resource.MustParse(need)\n+}\n+\n+func TestResourceStrategyFitPlugin(t *testing.T) {\n+\tGPU := v1.ResourceName(\"nvidia.com/gpu\")\n+\tFOO := v1.ResourceName(\"example.com/foo\")\n+\n+\tp1 := util.BuildPod(\"c1\", \"p1\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p1.Spec.Containers[0].Resources.Requests, FOO, \"2\")\n+\tp2 := util.BuildPod(\"c1\", \"p2\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p2.Spec.Containers[0].Resources.Requests, FOO, \"3\")\n+\tp3 := util.BuildPod(\"c1\", \"p3\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"10Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p3.Spec.Containers[0].Resources.Requests, GPU, \"2\")\n+\tp4 := util.BuildPod(\"c1\", \"p4\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p4.Spec.Containers[0].Resources.Requests, GPU, \"3\")\n+\n+\tp5 := util.BuildPod(\"c1\", \"p5\", \"\", v1.PodPending, api.BuildResourceList(\"1\", \"1Gi\"), \"pg1\", make(map[string]string), make(map[string]string))\n+\taddResource(p5.Spec.Containers[0].Resources.Requests, GPU, \"4\")\n+\taddResource(p5.Spec.Containers[0].Resources.Requests, FOO, \"4\")\n+\n+\tn1 := util.BuildNode(\"n1\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n1.Status.Allocatable, GPU, \"10\")\n+\tn2 := util.BuildNode(\"n2\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n2.Status.Allocatable, GPU, \"5\")\n+\tn3 := util.BuildNode(\"n3\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n3.Status.Allocatable, FOO, \"10\")\n+\tn4 := util.BuildNode(\"n4\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n4.Status.Allocatable, FOO, \"5\")\n+\n+\tn5 := util.BuildNode(\"n5\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n5.Status.Allocatable, GPU, \"10\")\n+\taddResource(n5.Status.Allocatable, FOO, \"5\")\n+\tn6 := util.BuildNode(\"n6\", api.BuildResourceList(\"4\", \"4Gi\", []api.ScalarResource{{Name: \"pods\", Value: \"10\"}}...), make(map[string]string))\n+\taddResource(n6.Status.Allocatable, FOO, \"5\")\n+\taddResource(n6.Status.Allocatable, FOO, \"10\")\n+\n+\tpg1 := util.BuildPodGroup(\"pg1\", \"c1\", \"c1\", 0, nil, \"\")\n+\tqueue1 := util.BuildQueue(\"c1\", 1, nil)\n+\n+\ttests := []struct {\n+\t\tuthelper.TestCommonStruct\n+\t\targuments framework.Arguments\n+\t\texpected  map[string]map[string]float64\n+\t}{\n+\t\t{\n+\t\t\tTestCommonStruct: uthelper.TestCommonStruct{\n+\n+\t\t\t\tName:      \"single job\",\n+\t\t\t\tPlugins:   map[string]framework.PluginBuilder{PluginName: New},\n+\t\t\t\tPodGroups: []*schedulingv1.PodGroup{pg1},\n+\t\t\t\tQueues:    []*schedulingv1.Queue{queue1},\n+\t\t\t\tPods:      []*v1.Pod{p1, p2, p3, p4},\n+\t\t\t\tNodes:     []*v1.Node{n1, n2, n3, n4},\n+\t\t\t},\n+\t\t\targuments: framework.Arguments{\n+\t\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\t\"nvidia.com/gpu\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"example.com/foo\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\texpected: map[string]map[string]float64{\n+\t\t\t\t\"c1/p1\": {\n+\t\t\t\t\t\"n1\": 0,\n+\t\t\t\t\t\"n2\": 0,\n+\t\t\t\t\t\"n3\": 800,\n+\t\t\t\t\t\"n4\": 600,\n+\t\t\t\t},\n+\t\t\t\t\"c1/p2\": {\n+\t\t\t\t\t\"n1\": 0,\n+\t\t\t\t\t\"n2\": 0,\n+\t\t\t\t\t\"n3\": 700,\n+\t\t\t\t\t\"n4\": 400,\n+\t\t\t\t},\n+\t\t\t\t\"c1/p3\": {\n+\t\t\t\t\t\"n1\": 200,\n+\t\t\t\t\t\"n2\": 400,\n+\t\t\t\t\t\"n3\": 0,\n+\t\t\t\t\t\"n4\": 0,\n+\t\t\t\t},\n+\t\t\t\t\"c1/p4\": {\n+\t\t\t\t\t\"n1\": 300,\n+\t\t\t\t\t\"n2\": 600,\n+\t\t\t\t\t\"n3\": 0,\n+\t\t\t\t\t\"n4\": 0,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tTestCommonStruct: uthelper.TestCommonStruct{\n+\t\t\t\tName:      \"single job\",\n+\t\t\t\tPlugins:   map[string]framework.PluginBuilder{PluginName: New},\n+\t\t\t\tPodGroups: []*schedulingv1.PodGroup{pg1},\n+\t\t\t\tQueues:    []*schedulingv1.Queue{queue1},\n+\t\t\t\tPods:      []*v1.Pod{p5},\n+\t\t\t\tNodes:     []*v1.Node{n5, n6},\n+\t\t\t},\n+\t\t\targuments: framework.Arguments{\n+\t\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\n+\t\t\t\t\"resources\": map[string]interface{}{\n+\t\t\t\t\t\"nvidia.com/gpu\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"MostAllocated\",\n+\t\t\t\t\t\t\"weight\": 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t\"example.com/foo\": map[string]interface{}{\n+\t\t\t\t\t\t\"type\":   \"LeastAllocated\",\n+\t\t\t\t\t\t\"weight\": 2,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\texpected: map[string]map[string]float64{\n+\t\t\t\t\"c1/p5\": {\n+\t\t\t\t\t\"n5\": 266.66666666,\n+\t\t\t\t\t\"n6\": 399.99999999,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\ttrueValue := true\n+\tfor i, test := range tests {\n+\t\ttiers := []conf.Tier{\n+\t\t\t{\n+\t\t\t\tPlugins: []conf.PluginOption{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tName:             PluginName,\n+\t\t\t\t\t\tEnabledNodeOrder: &trueValue,\n+\t\t\t\t\t\tArguments:        test.arguments,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}\n+\t\tssn := test.RegisterSession(tiers, nil)\n+\t\tfor _, job := range ssn.Jobs {",
        "comment_created_at": "2025-07-01T12:55:53+00:00",
        "comment_author": "LY-today",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191325187",
    "pr_number": 4391,
    "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
    "created_at": "2025-07-08T02:02:17+00:00",
    "commented_code": "+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\t\"k8s.io/apimachinery/pkg/api/resource\"\n+\tschedulingv1 \"volcano.sh/apis/pkg/apis/scheduling/v1beta1\"\n+\t\"volcano.sh/volcano/cmd/scheduler/app/options\"\n+\t\"volcano.sh/volcano/pkg/scheduler/actions/allocate\"\n+\t\"volcano.sh/volcano/pkg/scheduler/conf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/drf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/gang\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/nodeorder\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/predicates\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/proportion\"\n+\t\"volcano.sh/volcano/pkg/scheduler/uthelper\"\n+\t\"volcano.sh/volcano/pkg/scheduler/util\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+const (\n+\teps = 1e-8\n+)\n+\n+func TestMain(m *testing.M) {\n+\toptions.Default()\n+\tos.Exit(m.Run())\n+}\n+\n+func Test_calculateWeight(t *testing.T) {\n+\ttype args struct {\n+\t\targs framework.Arguments\n+\t}\n+\ttests := []struct {\n+\t\tname string\n+\t\targs args\n+\t\twant ResourceStrategyFit\n+\t}{\n+\t\t{\"test1\", args{framework.Arguments{",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2191325187",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
        "discussion_id": "2191325187",
        "commented_code": "@@ -0,0 +1,819 @@\n+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\t\"k8s.io/apimachinery/pkg/api/resource\"\n+\tschedulingv1 \"volcano.sh/apis/pkg/apis/scheduling/v1beta1\"\n+\t\"volcano.sh/volcano/cmd/scheduler/app/options\"\n+\t\"volcano.sh/volcano/pkg/scheduler/actions/allocate\"\n+\t\"volcano.sh/volcano/pkg/scheduler/conf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/drf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/gang\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/nodeorder\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/predicates\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/proportion\"\n+\t\"volcano.sh/volcano/pkg/scheduler/uthelper\"\n+\t\"volcano.sh/volcano/pkg/scheduler/util\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+const (\n+\teps = 1e-8\n+)\n+\n+func TestMain(m *testing.M) {\n+\toptions.Default()\n+\tos.Exit(m.Run())\n+}\n+\n+func Test_calculateWeight(t *testing.T) {\n+\ttype args struct {\n+\t\targs framework.Arguments\n+\t}\n+\ttests := []struct {\n+\t\tname string\n+\t\targs args\n+\t\twant ResourceStrategyFit\n+\t}{\n+\t\t{\"test1\", args{framework.Arguments{",
        "comment_created_at": "2025-07-08T02:02:17+00:00",
        "comment_author": "Monokaix",
        "comment_body": "Should format the test table, please refer to other ut.",
        "pr_file_module": null
      },
      {
        "comment_id": "2191339037",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
        "discussion_id": "2191325187",
        "commented_code": "@@ -0,0 +1,819 @@\n+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\t\"k8s.io/apimachinery/pkg/api/resource\"\n+\tschedulingv1 \"volcano.sh/apis/pkg/apis/scheduling/v1beta1\"\n+\t\"volcano.sh/volcano/cmd/scheduler/app/options\"\n+\t\"volcano.sh/volcano/pkg/scheduler/actions/allocate\"\n+\t\"volcano.sh/volcano/pkg/scheduler/conf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/drf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/gang\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/nodeorder\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/predicates\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/proportion\"\n+\t\"volcano.sh/volcano/pkg/scheduler/uthelper\"\n+\t\"volcano.sh/volcano/pkg/scheduler/util\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+const (\n+\teps = 1e-8\n+)\n+\n+func TestMain(m *testing.M) {\n+\toptions.Default()\n+\tos.Exit(m.Run())\n+}\n+\n+func Test_calculateWeight(t *testing.T) {\n+\ttype args struct {\n+\t\targs framework.Arguments\n+\t}\n+\ttests := []struct {\n+\t\tname string\n+\t\targs args\n+\t\twant ResourceStrategyFit\n+\t}{\n+\t\t{\"test1\", args{framework.Arguments{",
        "comment_created_at": "2025-07-08T02:17:37+00:00",
        "comment_author": "Monokaix",
        "comment_body": "like \r\n```go\r\n\t\t{\r\n\t\t\tname: \"test1\",\r\n\t\t\targs: args{framework.Arguments{\r\n\t\t\t\t\"ResourceStrategyFitPlusWeight\": 10,\r\n\t\t\t\t\"resources\": map[string]interface{}{\r\n\t\t\t\t\t\"cpu\": map[string]interface{}{\r\n\t\t\t\t\t\t\"type\":   \"MostAllocated\",\r\n\t\t\t\t\t\t\"weight\": 1,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"memory\": map[string]interface{}{\r\n\t\t\t\t\t\t\"type\":   \"LeastAllocated\",\r\n\t\t\t\t\t\t\"weight\": 2,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t}},\r\n\t\t\twant: ResourceStrategyFit{\r\n\t\t\t\tResourceStrategyFitWeight: 10,\r\n\t\t\t\tResources: map[v1.ResourceName]ResourcesType{\r\n\t\t\t\t\t\"cpu\": {\r\n\t\t\t\t\t\tType:   config.MostAllocated,\r\n\t\t\t\t\t\tWeight: 1,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"memory\": {\r\n\t\t\t\t\t\tType:   config.LeastAllocated,\r\n\t\t\t\t\t\tWeight: 2,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2191555301",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit_test.go",
        "discussion_id": "2191325187",
        "commented_code": "@@ -0,0 +1,819 @@\n+package resourcestrategyfit\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\t\"k8s.io/apimachinery/pkg/api/resource\"\n+\tschedulingv1 \"volcano.sh/apis/pkg/apis/scheduling/v1beta1\"\n+\t\"volcano.sh/volcano/cmd/scheduler/app/options\"\n+\t\"volcano.sh/volcano/pkg/scheduler/actions/allocate\"\n+\t\"volcano.sh/volcano/pkg/scheduler/conf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/drf\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/gang\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/nodeorder\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/predicates\"\n+\t\"volcano.sh/volcano/pkg/scheduler/plugins/proportion\"\n+\t\"volcano.sh/volcano/pkg/scheduler/uthelper\"\n+\t\"volcano.sh/volcano/pkg/scheduler/util\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+const (\n+\teps = 1e-8\n+)\n+\n+func TestMain(m *testing.M) {\n+\toptions.Default()\n+\tos.Exit(m.Run())\n+}\n+\n+func Test_calculateWeight(t *testing.T) {\n+\ttype args struct {\n+\t\targs framework.Arguments\n+\t}\n+\ttests := []struct {\n+\t\tname string\n+\t\targs args\n+\t\twant ResourceStrategyFit\n+\t}{\n+\t\t{\"test1\", args{framework.Arguments{",
        "comment_created_at": "2025-07-08T06:01:01+00:00",
        "comment_author": "LY-today",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  }
]