[
  {
    "discussion_id": "2108322403",
    "pr_number": 4316,
    "pr_file": "docs/user-guide/how_to_use_volcano_vgpu.md",
    "created_at": "2025-05-27T06:46:16+00:00",
    "commented_code": "actions: \"enqueue, allocate, backfill\"\n     tiers:\n     - plugins:\n-      - name: priority\n-      - name: gang\n-      - name: conformance\n-    - plugins:\n-      - name: drf\n+      - name: predicates\n       - name: deviceshare\n         arguments:\n-          deviceshare.VGPUEnable: true # enable vgpu\n-      - name: predicates\n-      - name: proportion\n-      - name: nodeorder\n-      - name: binpack\n+          deviceshare.VGPUEnable: true\n+          deviceshare.KnowGeometriesCMName: volcano-vgpu-device-config",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2108322403",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4316,
        "pr_file": "docs/user-guide/how_to_use_volcano_vgpu.md",
        "discussion_id": "2108322403",
        "commented_code": "@@ -32,106 +70,122 @@ data:\n     actions: \"enqueue, allocate, backfill\"\n     tiers:\n     - plugins:\n-      - name: priority\n-      - name: gang\n-      - name: conformance\n-    - plugins:\n-      - name: drf\n+      - name: predicates\n       - name: deviceshare\n         arguments:\n-          deviceshare.VGPUEnable: true # enable vgpu\n-      - name: predicates\n-      - name: proportion\n-      - name: nodeorder\n-      - name: binpack\n+          deviceshare.VGPUEnable: true\n+          deviceshare.KnowGeometriesCMName: volcano-vgpu-device-config",
        "comment_created_at": "2025-05-27T06:46:16+00:00",
        "comment_author": "Monokaix",
        "comment_body": "Should add comments to explain all the means of these arguments.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2096687278",
    "pr_number": 4302,
    "pr_file": "README.md",
    "created_at": "2025-05-20T01:26:23+00:00",
    "commented_code": "* `-` The Kubernetes version has features or API objects that Volcano can't use.\n \n \n+## Citing Volcano\n+\n+If Volcano helps your research, we appreciate your citations. Here is the BibTeX entry:\n+\n+```bibtex\n+@misc{volcano2025,\n+  title={Volcano: A Cloud Native Batch System},\n+  author={Ma, Klaus and Wang, Kevin and Li, Zenlin and others},",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2096687278",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4302,
        "pr_file": "README.md",
        "discussion_id": "2096687278",
        "commented_code": "@@ -197,6 +197,19 @@ Key:\n * `-` The Kubernetes version has features or API objects that Volcano can't use.\n \n \n+## Citing Volcano\n+\n+If Volcano helps your research, we appreciate your citations. Here is the BibTeX entry:\n+\n+```bibtex\n+@misc{volcano2025,\n+  title={Volcano: A Cloud Native Batch System},\n+  author={Ma, Klaus and Wang, Kevin and Li, Zenlin and others},",
        "comment_created_at": "2025-05-20T01:26:23+00:00",
        "comment_author": "Monokaix",
        "comment_body": "Should be Klaus Ma, Kevin Wang ",
        "pr_file_module": null
      },
      {
        "comment_id": "2097858134",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4302,
        "pr_file": "README.md",
        "discussion_id": "2096687278",
        "commented_code": "@@ -197,6 +197,19 @@ Key:\n * `-` The Kubernetes version has features or API objects that Volcano can't use.\n \n \n+## Citing Volcano\n+\n+If Volcano helps your research, we appreciate your citations. Here is the BibTeX entry:\n+\n+```bibtex\n+@misc{volcano2025,\n+  title={Volcano: A Cloud Native Batch System},\n+  author={Ma, Klaus and Wang, Kevin and Li, Zenlin and others},",
        "comment_created_at": "2025-05-20T12:38:05+00:00",
        "comment_author": "mahdikhashan",
        "comment_body": "sure. i'll update it. shall i keep `and others`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2097868937",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4302,
        "pr_file": "README.md",
        "discussion_id": "2096687278",
        "commented_code": "@@ -197,6 +197,19 @@ Key:\n * `-` The Kubernetes version has features or API objects that Volcano can't use.\n \n \n+## Citing Volcano\n+\n+If Volcano helps your research, we appreciate your citations. Here is the BibTeX entry:\n+\n+```bibtex\n+@misc{volcano2025,\n+  title={Volcano: A Cloud Native Batch System},\n+  author={Ma, Klaus and Wang, Kevin and Li, Zenlin and others},",
        "comment_created_at": "2025-05-20T12:43:24+00:00",
        "comment_author": "mahdikhashan",
        "comment_body": "i researched on it and it seems that bibtex parser(s) expect `and` between different names. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2097872405",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4302,
        "pr_file": "README.md",
        "discussion_id": "2096687278",
        "commented_code": "@@ -197,6 +197,19 @@ Key:\n * `-` The Kubernetes version has features or API objects that Volcano can't use.\n \n \n+## Citing Volcano\n+\n+If Volcano helps your research, we appreciate your citations. Here is the BibTeX entry:\n+\n+```bibtex\n+@misc{volcano2025,\n+  title={Volcano: A Cloud Native Batch System},\n+  author={Ma, Klaus and Wang, Kevin and Li, Zenlin and others},",
        "comment_created_at": "2025-05-20T12:45:01+00:00",
        "comment_author": "mahdikhashan",
        "comment_body": "done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1133412950",
    "pr_number": 2673,
    "pr_file": "docs/design/queue/queue-priority-design.md",
    "created_at": "2023-03-13T03:31:07+00:00",
    "commented_code": "+# Volcano Priority For Queue\n+\n+@[zbbkeepgoing](https://github.com/zbbkeepgoing); Feb 10, 2023\n+\n+\n+## Motivation\n+\n+Currently, Volcano has Job and Task level `PriorityClass` settings, but lacks Queue `PriorityClass` configuration.\n+Queue's `PriorityClass` can play a role in the following scenarios.\n+\n+1. Submitters of tasks and jobs can't determine their `PriorityClass`, they only know to submit to one of the queues.\n+2. The queue Priority capability can reduce the complexity of the job and the task submitter to a certain extent.\n+   After the queue has priority, the task can properly adjust the priority according to its own task situation.\n+3. The queue priority capability can help task that in high-priority queue to allocate resources first, which is very\n+   suitable in the scenario of dividing the business importance on the queue.\n+4. In the process of queue's reclaiming, `PriorityClass` can be used to help high-priority queue to reclaim the resources of other queues first.\n+\n+## Consideration\n+### Impact QueueOrderFn in session_plugin.go\n+The sorting of the queue is determined by three plugins: Priority (the Queue's PriorityClass we are currently designing),\n+proportion, and drf. there are three situation in scheduler configuration.\n+1. Priority plugin in the first. If priority setting of all queues are scatter, every queue has different priority,\n+   QueueOrderFn basically only uses `PriorityClass` as the sorting rule, DRF and Proportion are difficult to play a role\uff0c\n+   Unless the queues have the same priority. Another point is that regardless of whether the priority setting is scattered or not,\n+   it is easy to cause low-priority queues to starve to death.\n+2. Priority plugin in the middle. It is better than the first situation where low priority starves to death\uff0c\n+   But it will also cause a problem, whether is drf or proportion who is at the end ,it will be difficult to play a role.\n+   In addition, it's difficult for priority plugin to play a role in this case, because the previous plugin(drf or proportion)\n+   can basically determine the order.\n+3. Priority plugin in the end. In this case, Priority basically cannot play a role, because the previous plugin(drf and proportion)\n+   can basically determine the queue order, unless the `Share` of queue  calculated by DRF or Proportion is 0 or 1.\n+\n+### Better QueueOrderFn -> QueueScoreOrderFn\n+The above configuration is suitable for whose only consider on one or two kinds of queue sorting requirements, or one of then is\n+the main sorting strategy, and the other is the secondary sorting strategy.\n+\n+Here, propose a strategy that takes into account all queue sorting in three plugin, similar to calculating `NodeScore`,\n+use three plugin to calculate the score of each queue. **Top score has highest-priority**. user can customize weight of three plugins\n+to meet their preference for a certain priority.\n+\n+* Queue's Score Of Priority\n+\n+  `Score = (PriorityClass of queue - Minimum PriorityClass)/(Maximum PriorityClass - Minimum PriorityClass) * Weight of Priority Plugin`\n+\n+* Queue's Score Of DRF\n+\n+  `Score = (1 - node.attr.share/node.weight) * Weight of DRF Plugin`\n+\n+* Queue's Score Of Proportion\n+\n+  `Score = (1 - queue.share) * Weight of Proportion Plugin`\n+\n+`Total Score = Priority's Score + DRF's Score + Proportion's Score`\n+\n+#### QueueScoreOrderFn example\uff1a\n+```\n+Maximum PriorityClass = 100\n+Minimum PriorityClass = 0\n+Priority Weight = 1\n+DRF Weight = 1\n+Proportion Weight = 1\n+```\n+|        | Priority | DRF  Share | Proportion Share | Priority Score | DRF Score | Proportion Score | Total Score |\n+|--------|----------|------------|------------------|----------------|-----------|------------------|-------------|\n+| QueueA | 40       | 0.3        | 1.2              | 0.4            | 0.7       | -0.2             | 0.9         |\n+| QueueB | 80       | 0.4        | 0.5              | 0.8            | 0.6       | 0.5              | 1.9         |\n+| QueueC | 0        | 0.5        | 0.3              | 0              | 0.5       | 0.7              | 1.2         |\n+\n+QueueScoreOrder\uff1a **Queue B > Queue C > Queue A**\n+\n+### Impact priority of job\n+\n+Due to the Priority of queue, therefore, **if priority not setting in job, the job priority will inherit the priority of queue**.\n+\n+*Through the idea of QueueScore, here is a reflection\uff1a*\n+\n+At present, all of enqueue\u3001 allocate or reclaim actions are sort the jobs in the queue after the queue is sorted.\n+If the following situation occur.\n+\n+There are two queue:\n+\n+Queue A(priority 10) has A1 Job(default priority 10), A2 Job(priority 12).\n+\n+Queue B(priority 8) has B1 Job(default priority 8), B2 Job(priority 13).\n+\n+Current logic of the three actions are as follows:\n+* A Queue\n+    * A2 Job\n+    * A1 Job\n+* B Queue\n+    * B2 Job\n+    * B1 Job\n+\n+Try to think another way, if we think job is the base unit in scheduler, priority of job maybe more important than priority of queue.\n+\n+New logic of the three actions are as follows:\n+* B2 Job\n+* A2 Job\n+* A1 Job\n+* B1 Job\n+\n+And the QueueOrderFn in drf or proportion will be a factor affecting JobOrder.\n+Of course, the perspectives of these two methods are different, but there is no problem in essence.\n+\n+## Design\n+### API\n+```\n+apiVersion: scheduling.volcano.sh/v1beta1\n+kind: Queue\n+metadata:\n+  name: q1\n+spec:\n+  reclaimable: true\n+  weight: 1\n+  priorityClassName: system-cluster-critical\n+```\n+\n+The priority configuration of the queue follows the native PriorityClass of Kubernetes.\n+\n+### Scheduler configuration\n+```\n+actions: \"enqueue, allocate, backfill\"\n+configurations:\n+- name: enqueue:\n+  arguments:\n+    QueueScoreOrderEnable: true\n+    QueueScoreOrder.priority.weight: 1 # key: QueueScoreOrder.pluginName.weight\n+    QueueScoreOrder.drf.weight: 1\n+    QueueScoreOrder.proportion.weight: 1\n+- name: allocate:\n+  arguments:\n+    QueueScoreOrderEnable: true\n+    QueueScoreOrder.priority.weight: 1\n+    QueueScoreOrder.drf.weight: 1\n+    QueueScoreOrder.proportion.weight: 1\n+- name: reclaim:\n+  arguments:\n+    QueueScoreOrderEnable: true\n+    QueueScoreOrder.priority.weight: 1\n+    QueueScoreOrder.drf.weight: 1\n+    QueueScoreOrder.proportion.weight: 1\n+tiers:\n+- plugins:\n+  - name: priority\n+  - name: gang\n+    enablePreemptable: false\n+  - name: conformance\n+- plugins:\n+  - name: overcommit\n+  - name: drf\n+  - name: predicates\n+  - name: proportion\n+  - name: nodeorder\n+  - name: binpack\n+```\n+\n+\n+## Implementation",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "1133412950",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 2673,
        "pr_file": "docs/design/queue/queue-priority-design.md",
        "discussion_id": "1133412950",
        "commented_code": "@@ -0,0 +1,418 @@\n+# Volcano Priority For Queue\n+\n+@[zbbkeepgoing](https://github.com/zbbkeepgoing); Feb 10, 2023\n+\n+\n+## Motivation\n+\n+Currently, Volcano has Job and Task level `PriorityClass` settings, but lacks Queue `PriorityClass` configuration.\n+Queue's `PriorityClass` can play a role in the following scenarios.\n+\n+1. Submitters of tasks and jobs can't determine their `PriorityClass`, they only know to submit to one of the queues.\n+2. The queue Priority capability can reduce the complexity of the job and the task submitter to a certain extent.\n+   After the queue has priority, the task can properly adjust the priority according to its own task situation.\n+3. The queue priority capability can help task that in high-priority queue to allocate resources first, which is very\n+   suitable in the scenario of dividing the business importance on the queue.\n+4. In the process of queue's reclaiming, `PriorityClass` can be used to help high-priority queue to reclaim the resources of other queues first.\n+\n+## Consideration\n+### Impact QueueOrderFn in session_plugin.go\n+The sorting of the queue is determined by three plugins: Priority (the Queue's PriorityClass we are currently designing),\n+proportion, and drf. there are three situation in scheduler configuration.\n+1. Priority plugin in the first. If priority setting of all queues are scatter, every queue has different priority,\n+   QueueOrderFn basically only uses `PriorityClass` as the sorting rule, DRF and Proportion are difficult to play a role\uff0c\n+   Unless the queues have the same priority. Another point is that regardless of whether the priority setting is scattered or not,\n+   it is easy to cause low-priority queues to starve to death.\n+2. Priority plugin in the middle. It is better than the first situation where low priority starves to death\uff0c\n+   But it will also cause a problem, whether is drf or proportion who is at the end ,it will be difficult to play a role.\n+   In addition, it's difficult for priority plugin to play a role in this case, because the previous plugin(drf or proportion)\n+   can basically determine the order.\n+3. Priority plugin in the end. In this case, Priority basically cannot play a role, because the previous plugin(drf and proportion)\n+   can basically determine the queue order, unless the `Share` of queue  calculated by DRF or Proportion is 0 or 1.\n+\n+### Better QueueOrderFn -> QueueScoreOrderFn\n+The above configuration is suitable for whose only consider on one or two kinds of queue sorting requirements, or one of then is\n+the main sorting strategy, and the other is the secondary sorting strategy.\n+\n+Here, propose a strategy that takes into account all queue sorting in three plugin, similar to calculating `NodeScore`,\n+use three plugin to calculate the score of each queue. **Top score has highest-priority**. user can customize weight of three plugins\n+to meet their preference for a certain priority.\n+\n+* Queue's Score Of Priority\n+\n+  `Score = (PriorityClass of queue - Minimum PriorityClass)/(Maximum PriorityClass - Minimum PriorityClass) * Weight of Priority Plugin`\n+\n+* Queue's Score Of DRF\n+\n+  `Score = (1 - node.attr.share/node.weight) * Weight of DRF Plugin`\n+\n+* Queue's Score Of Proportion\n+\n+  `Score = (1 - queue.share) * Weight of Proportion Plugin`\n+\n+`Total Score = Priority's Score + DRF's Score + Proportion's Score`\n+\n+#### QueueScoreOrderFn example\uff1a\n+```\n+Maximum PriorityClass = 100\n+Minimum PriorityClass = 0\n+Priority Weight = 1\n+DRF Weight = 1\n+Proportion Weight = 1\n+```\n+|        | Priority | DRF  Share | Proportion Share | Priority Score | DRF Score | Proportion Score | Total Score |\n+|--------|----------|------------|------------------|----------------|-----------|------------------|-------------|\n+| QueueA | 40       | 0.3        | 1.2              | 0.4            | 0.7       | -0.2             | 0.9         |\n+| QueueB | 80       | 0.4        | 0.5              | 0.8            | 0.6       | 0.5              | 1.9         |\n+| QueueC | 0        | 0.5        | 0.3              | 0              | 0.5       | 0.7              | 1.2         |\n+\n+QueueScoreOrder\uff1a **Queue B > Queue C > Queue A**\n+\n+### Impact priority of job\n+\n+Due to the Priority of queue, therefore, **if priority not setting in job, the job priority will inherit the priority of queue**.\n+\n+*Through the idea of QueueScore, here is a reflection\uff1a*\n+\n+At present, all of enqueue\u3001 allocate or reclaim actions are sort the jobs in the queue after the queue is sorted.\n+If the following situation occur.\n+\n+There are two queue:\n+\n+Queue A(priority 10) has A1 Job(default priority 10), A2 Job(priority 12).\n+\n+Queue B(priority 8) has B1 Job(default priority 8), B2 Job(priority 13).\n+\n+Current logic of the three actions are as follows:\n+* A Queue\n+    * A2 Job\n+    * A1 Job\n+* B Queue\n+    * B2 Job\n+    * B1 Job\n+\n+Try to think another way, if we think job is the base unit in scheduler, priority of job maybe more important than priority of queue.\n+\n+New logic of the three actions are as follows:\n+* B2 Job\n+* A2 Job\n+* A1 Job\n+* B1 Job\n+\n+And the QueueOrderFn in drf or proportion will be a factor affecting JobOrder.\n+Of course, the perspectives of these two methods are different, but there is no problem in essence.\n+\n+## Design\n+### API\n+```\n+apiVersion: scheduling.volcano.sh/v1beta1\n+kind: Queue\n+metadata:\n+  name: q1\n+spec:\n+  reclaimable: true\n+  weight: 1\n+  priorityClassName: system-cluster-critical\n+```\n+\n+The priority configuration of the queue follows the native PriorityClass of Kubernetes.\n+\n+### Scheduler configuration\n+```\n+actions: \"enqueue, allocate, backfill\"\n+configurations:\n+- name: enqueue:\n+  arguments:\n+    QueueScoreOrderEnable: true\n+    QueueScoreOrder.priority.weight: 1 # key: QueueScoreOrder.pluginName.weight\n+    QueueScoreOrder.drf.weight: 1\n+    QueueScoreOrder.proportion.weight: 1\n+- name: allocate:\n+  arguments:\n+    QueueScoreOrderEnable: true\n+    QueueScoreOrder.priority.weight: 1\n+    QueueScoreOrder.drf.weight: 1\n+    QueueScoreOrder.proportion.weight: 1\n+- name: reclaim:\n+  arguments:\n+    QueueScoreOrderEnable: true\n+    QueueScoreOrder.priority.weight: 1\n+    QueueScoreOrder.drf.weight: 1\n+    QueueScoreOrder.proportion.weight: 1\n+tiers:\n+- plugins:\n+  - name: priority\n+  - name: gang\n+    enablePreemptable: false\n+  - name: conformance\n+- plugins:\n+  - name: overcommit\n+  - name: drf\n+  - name: predicates\n+  - name: proportion\n+  - name: nodeorder\n+  - name: binpack\n+```\n+\n+\n+## Implementation",
        "comment_created_at": "2023-03-13T03:31:07+00:00",
        "comment_author": "Thor-wl",
        "comment_body": "It is enough to see the scenarios, motivtion, feature desgin and API design in the documention. Implementation is not necessary and it's better to include that in the PR. Thanks.",
        "pr_file_module": null
      }
    ]
  }
]