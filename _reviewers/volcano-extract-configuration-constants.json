[
  {
    "discussion_id": "2191318550",
    "pr_number": 4391,
    "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit.go",
    "created_at": "2025-07-08T01:54:05+00:00",
    "commented_code": "+/*\n+Copyright 2025 The Volcano Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package resourcestrategyfit\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/klog/v2\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\tk8sFramework \"k8s.io/kubernetes/pkg/scheduler/framework\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+const (\n+\t// PluginName indicates name of volcano scheduler plugin.\n+\tPluginName = \"resource-strategy-fit\"\n+)\n+\n+type ResourceStrategyFit struct {\n+\tResourceStrategyFitWeight int                               `json:\"resourceStrategyFitWeight\"`\n+\tResources                 map[v1.ResourceName]ResourcesType `json:\"resources\"`\n+}\n+\n+type ResourcesType struct {\n+\tType   config.ScoringStrategyType `json:\"type\"`\n+\tWeight int                        `json:\"weight\"`\n+}\n+\n+func (w *ResourceStrategyFit) String() string {\n+\tmarshal, err := json.Marshal(w)\n+\tif err != nil {\n+\t\treturn \"\"\n+\t}\n+\treturn string(marshal)\n+}\n+\n+type resourceStrategyFitPlugin struct {\n+\t// Arguments given for the plugin\n+\tweight ResourceStrategyFit\n+}\n+\n+// New function returns prioritizePlugin object\n+func New(arguments framework.Arguments) framework.Plugin {\n+\tweight := calculateWeight(arguments)\n+\treturn &resourceStrategyFitPlugin{weight: weight}\n+}\n+\n+func calculateWeight(args framework.Arguments) ResourceStrategyFit {\n+\t/*\n+\t   actions: \"enqueue, allocate, backfill, reclaim, preempt\"\n+\t   tiers:\n+\t   - plugins:\n+\t     - name: resource-strategy-fit\n+\t        arguments:\n+\t          resourceStrategyFitWeight: 10\n+\t          resources:\n+\t            nvidia.com/gpu:\n+\t              type: MostAllocated\n+\t              weight: 2\n+\t            cpu:\n+\t              type: LeastAllocated\n+\t              weight: 1\n+\t*/\n+\n+\tvar weight ResourceStrategyFit\n+\n+\tresourceStrategyFitPluginWeight, b := framework.Get[int](args, \"resourceStrategyFitWeight\")\n+\tif !b || resourceStrategyFitPluginWeight <= 0 {\n+\t\tresourceStrategyFitPluginWeight = 10",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2191318550",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit.go",
        "discussion_id": "2191318550",
        "commented_code": "@@ -0,0 +1,219 @@\n+/*\n+Copyright 2025 The Volcano Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package resourcestrategyfit\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/klog/v2\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\tk8sFramework \"k8s.io/kubernetes/pkg/scheduler/framework\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+const (\n+\t// PluginName indicates name of volcano scheduler plugin.\n+\tPluginName = \"resource-strategy-fit\"\n+)\n+\n+type ResourceStrategyFit struct {\n+\tResourceStrategyFitWeight int                               `json:\"resourceStrategyFitWeight\"`\n+\tResources                 map[v1.ResourceName]ResourcesType `json:\"resources\"`\n+}\n+\n+type ResourcesType struct {\n+\tType   config.ScoringStrategyType `json:\"type\"`\n+\tWeight int                        `json:\"weight\"`\n+}\n+\n+func (w *ResourceStrategyFit) String() string {\n+\tmarshal, err := json.Marshal(w)\n+\tif err != nil {\n+\t\treturn \"\"\n+\t}\n+\treturn string(marshal)\n+}\n+\n+type resourceStrategyFitPlugin struct {\n+\t// Arguments given for the plugin\n+\tweight ResourceStrategyFit\n+}\n+\n+// New function returns prioritizePlugin object\n+func New(arguments framework.Arguments) framework.Plugin {\n+\tweight := calculateWeight(arguments)\n+\treturn &resourceStrategyFitPlugin{weight: weight}\n+}\n+\n+func calculateWeight(args framework.Arguments) ResourceStrategyFit {\n+\t/*\n+\t   actions: \"enqueue, allocate, backfill, reclaim, preempt\"\n+\t   tiers:\n+\t   - plugins:\n+\t     - name: resource-strategy-fit\n+\t        arguments:\n+\t          resourceStrategyFitWeight: 10\n+\t          resources:\n+\t            nvidia.com/gpu:\n+\t              type: MostAllocated\n+\t              weight: 2\n+\t            cpu:\n+\t              type: LeastAllocated\n+\t              weight: 1\n+\t*/\n+\n+\tvar weight ResourceStrategyFit\n+\n+\tresourceStrategyFitPluginWeight, b := framework.Get[int](args, \"resourceStrategyFitWeight\")\n+\tif !b || resourceStrategyFitPluginWeight <= 0 {\n+\t\tresourceStrategyFitPluginWeight = 10",
        "comment_created_at": "2025-07-08T01:54:05+00:00",
        "comment_author": "Monokaix",
        "comment_body": "Abstract 10 as a default const is better.",
        "pr_file_module": null
      },
      {
        "comment_id": "2191547682",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4391,
        "pr_file": "pkg/scheduler/plugins/resource-strategy-fit/resource_strategy_fit.go",
        "discussion_id": "2191318550",
        "commented_code": "@@ -0,0 +1,219 @@\n+/*\n+Copyright 2025 The Volcano Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package resourcestrategyfit\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/klog/v2\"\n+\t\"k8s.io/kubernetes/pkg/scheduler/apis/config\"\n+\tk8sFramework \"k8s.io/kubernetes/pkg/scheduler/framework\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api\"\n+\t\"volcano.sh/volcano/pkg/scheduler/framework\"\n+)\n+\n+const (\n+\t// PluginName indicates name of volcano scheduler plugin.\n+\tPluginName = \"resource-strategy-fit\"\n+)\n+\n+type ResourceStrategyFit struct {\n+\tResourceStrategyFitWeight int                               `json:\"resourceStrategyFitWeight\"`\n+\tResources                 map[v1.ResourceName]ResourcesType `json:\"resources\"`\n+}\n+\n+type ResourcesType struct {\n+\tType   config.ScoringStrategyType `json:\"type\"`\n+\tWeight int                        `json:\"weight\"`\n+}\n+\n+func (w *ResourceStrategyFit) String() string {\n+\tmarshal, err := json.Marshal(w)\n+\tif err != nil {\n+\t\treturn \"\"\n+\t}\n+\treturn string(marshal)\n+}\n+\n+type resourceStrategyFitPlugin struct {\n+\t// Arguments given for the plugin\n+\tweight ResourceStrategyFit\n+}\n+\n+// New function returns prioritizePlugin object\n+func New(arguments framework.Arguments) framework.Plugin {\n+\tweight := calculateWeight(arguments)\n+\treturn &resourceStrategyFitPlugin{weight: weight}\n+}\n+\n+func calculateWeight(args framework.Arguments) ResourceStrategyFit {\n+\t/*\n+\t   actions: \"enqueue, allocate, backfill, reclaim, preempt\"\n+\t   tiers:\n+\t   - plugins:\n+\t     - name: resource-strategy-fit\n+\t        arguments:\n+\t          resourceStrategyFitWeight: 10\n+\t          resources:\n+\t            nvidia.com/gpu:\n+\t              type: MostAllocated\n+\t              weight: 2\n+\t            cpu:\n+\t              type: LeastAllocated\n+\t              weight: 1\n+\t*/\n+\n+\tvar weight ResourceStrategyFit\n+\n+\tresourceStrategyFitPluginWeight, b := framework.Get[int](args, \"resourceStrategyFitWeight\")\n+\tif !b || resourceStrategyFitPluginWeight <= 0 {\n+\t\tresourceStrategyFitPluginWeight = 10",
        "comment_created_at": "2025-07-08T05:55:11+00:00",
        "comment_author": "LY-today",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009342091",
    "pr_number": 3953,
    "pr_file": "pkg/scheduler/api/devices/config/config.go",
    "created_at": "2025-03-24T01:33:52+00:00",
    "commented_code": "+/*\n+Copyright 2025 The Volcano Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package config\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"sync\"\n+\n+\t\"gopkg.in/yaml.v2\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/client-go/kubernetes\"\n+\t\"k8s.io/klog/v2\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api/devices\"\n+)\n+\n+type Config struct {\n+\tNvidiaConfig NvidiaConfig `yaml:\"nvidia\"`\n+}\n+\n+var (\n+\tconfigs *Config\n+\tonce    sync.Once\n+)\n+\n+func GetConfig() *Config {\n+\treturn configs\n+}\n+\n+func LoadConfigFromCM(kubeClient kubernetes.Interface, cmName string) (*Config, error) {\n+\tcm, err := kubeClient.CoreV1().ConfigMaps(\"kube-system\").Get(context.Background(), cmName, metav1.GetOptions{})\n+\tif err != nil {\n+\t\tcm, err = kubeClient.CoreV1().ConfigMaps(\"volcano-system\").Get(context.Background(), cmName, metav1.GetOptions{})\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\tdata, ok := cm.Data[\"device-config.yaml\"]",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2009342091",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3953,
        "pr_file": "pkg/scheduler/api/devices/config/config.go",
        "discussion_id": "2009342091",
        "commented_code": "@@ -0,0 +1,90 @@\n+/*\n+Copyright 2025 The Volcano Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package config\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"sync\"\n+\n+\t\"gopkg.in/yaml.v2\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/client-go/kubernetes\"\n+\t\"k8s.io/klog/v2\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api/devices\"\n+)\n+\n+type Config struct {\n+\tNvidiaConfig NvidiaConfig `yaml:\"nvidia\"`\n+}\n+\n+var (\n+\tconfigs *Config\n+\tonce    sync.Once\n+)\n+\n+func GetConfig() *Config {\n+\treturn configs\n+}\n+\n+func LoadConfigFromCM(kubeClient kubernetes.Interface, cmName string) (*Config, error) {\n+\tcm, err := kubeClient.CoreV1().ConfigMaps(\"kube-system\").Get(context.Background(), cmName, metav1.GetOptions{})\n+\tif err != nil {\n+\t\tcm, err = kubeClient.CoreV1().ConfigMaps(\"volcano-system\").Get(context.Background(), cmName, metav1.GetOptions{})\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\tdata, ok := cm.Data[\"device-config.yaml\"]",
        "comment_created_at": "2025-03-24T01:33:52+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "Extract `device-config.yaml` as a constant is better",
        "pr_file_module": null
      },
      {
        "comment_id": "2011485683",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3953,
        "pr_file": "pkg/scheduler/api/devices/config/config.go",
        "discussion_id": "2009342091",
        "commented_code": "@@ -0,0 +1,90 @@\n+/*\n+Copyright 2025 The Volcano Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package config\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"sync\"\n+\n+\t\"gopkg.in/yaml.v2\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/client-go/kubernetes\"\n+\t\"k8s.io/klog/v2\"\n+\n+\t\"volcano.sh/volcano/pkg/scheduler/api/devices\"\n+)\n+\n+type Config struct {\n+\tNvidiaConfig NvidiaConfig `yaml:\"nvidia\"`\n+}\n+\n+var (\n+\tconfigs *Config\n+\tonce    sync.Once\n+)\n+\n+func GetConfig() *Config {\n+\treturn configs\n+}\n+\n+func LoadConfigFromCM(kubeClient kubernetes.Interface, cmName string) (*Config, error) {\n+\tcm, err := kubeClient.CoreV1().ConfigMaps(\"kube-system\").Get(context.Background(), cmName, metav1.GetOptions{})\n+\tif err != nil {\n+\t\tcm, err = kubeClient.CoreV1().ConfigMaps(\"volcano-system\").Get(context.Background(), cmName, metav1.GetOptions{})\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\tdata, ok := cm.Data[\"device-config.yaml\"]",
        "comment_created_at": "2025-03-25T07:33:48+00:00",
        "comment_author": "archlitchi",
        "comment_body": "adopted",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1847722055",
    "pr_number": 3825,
    "pr_file": "pkg/scheduler/cache/cache.go",
    "created_at": "2024-11-19T06:39:28+00:00",
    "commented_code": "if len(msg) == 0 {\n \t\t\t\tmsg = baseErrorMessage\n \t\t\t}\n-\t\t\tif err := sc.taskUnschedulable(taskInfo, reason, msg, nominatedNodeName); err != nil {\n-\t\t\t\tklog.ErrorS(err, \"Failed to update unschedulable task status\", \"task\", klog.KRef(taskInfo.Namespace, taskInfo.Name),\n-\t\t\t\t\t\"reason\", reason, \"message\", msg)\n+\t\t\tts, exist := schedulingutil.GetPodStatusLastSetCache(job.UID, taskInfo.UID)\n+\t\t\tif !exist || nowTs-ts > 60 {",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "1847722055",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3825,
        "pr_file": "pkg/scheduler/cache/cache.go",
        "discussion_id": "1847722055",
        "commented_code": "@@ -1497,9 +1499,13 @@ func (sc *SchedulerCache) RecordJobStatusEvent(job *schedulingapi.JobInfo, updat\n \t\t\tif len(msg) == 0 {\n \t\t\t\tmsg = baseErrorMessage\n \t\t\t}\n-\t\t\tif err := sc.taskUnschedulable(taskInfo, reason, msg, nominatedNodeName); err != nil {\n-\t\t\t\tklog.ErrorS(err, \"Failed to update unschedulable task status\", \"task\", klog.KRef(taskInfo.Namespace, taskInfo.Name),\n-\t\t\t\t\t\"reason\", reason, \"message\", msg)\n+\t\t\tts, exist := schedulingutil.GetPodStatusLastSetCache(job.UID, taskInfo.UID)\n+\t\t\tif !exist || nowTs-ts > 60 {",
        "comment_created_at": "2024-11-19T06:39:28+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "I remember that we discussed to set the interval that can be configured or using backoff. Direct set `60` here is \r\ntoo empirical.",
        "pr_file_module": null
      }
    ]
  }
]