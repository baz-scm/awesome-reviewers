[
  {
    "discussion_id": "2090231240",
    "pr_number": 4286,
    "pr_file": "docs/user-guide/how_to_use_hypernode_auto_discovery.md",
    "created_at": "2025-05-15T04:46:14+00:00",
    "commented_code": "+# Usage Document\n+\n+## Introduction\n+\n+This design document describes the design and implementation of the HyperNode network topology discovery feature in Volcano. This feature automatically discovers the network topology structure within the cluster and creates and maintains HyperNode custom resources (CRs) based on the discovered topology information. Consequently, the Volcano Scheduler will leverage these HyperNode CRs for scheduling decisions, eliminating the need for users to manually maintain HyperNode information.\n+\n+## Prerequisites\n+\n+Please follow [this guide](https://volcano.sh/en/docs/v1-11-0/network_topology_aware_scheduling/#installing-volcano) to install Volcano with Network Topology Aware Scheduling feature enabled.\n+\n+## Configuration\n+\n+The HyperNode network topology discovery feature is configured via a ConfigMap. The ConfigMap contains the configuration for the discovery sources, such as UFM, RoCE, and label, you can modify the configuration according to your own cluster environments.\n+Please note that you should replace with your Volcano namespace if Volcano is not installed in the default namespace.\n+\n+### Example ConfigMap\n+\n+```yaml\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: volcano-controller-configmap\n+  namespace: volcano-system # Replace with your Volcano namespace if Volcano is not installed in the default namespace.\n+data:\n+  volcano-controller.conf: |\n+    discoveryConfig:\n+      - source: ufm\n+        enabled: true\n+        interval: 10m\n+        config:\n+          endpoint: https://ufm-server:8080\n+          username: admin\n+          password: password\n+          insecureSkipVerify: true\n+      - source: roce\n+        enabled: false\n+        interval: 15m\n+        config:\n+          endpoint: https://roce-server:9090",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2090231240",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4286,
        "pr_file": "docs/user-guide/how_to_use_hypernode_auto_discovery.md",
        "discussion_id": "2090231240",
        "commented_code": "@@ -0,0 +1,94 @@\n+# Usage Document\n+\n+## Introduction\n+\n+This design document describes the design and implementation of the HyperNode network topology discovery feature in Volcano. This feature automatically discovers the network topology structure within the cluster and creates and maintains HyperNode custom resources (CRs) based on the discovered topology information. Consequently, the Volcano Scheduler will leverage these HyperNode CRs for scheduling decisions, eliminating the need for users to manually maintain HyperNode information.\n+\n+## Prerequisites\n+\n+Please follow [this guide](https://volcano.sh/en/docs/v1-11-0/network_topology_aware_scheduling/#installing-volcano) to install Volcano with Network Topology Aware Scheduling feature enabled.\n+\n+## Configuration\n+\n+The HyperNode network topology discovery feature is configured via a ConfigMap. The ConfigMap contains the configuration for the discovery sources, such as UFM, RoCE, and label, you can modify the configuration according to your own cluster environments.\n+Please note that you should replace with your Volcano namespace if Volcano is not installed in the default namespace.\n+\n+### Example ConfigMap\n+\n+```yaml\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: volcano-controller-configmap\n+  namespace: volcano-system # Replace with your Volcano namespace if Volcano is not installed in the default namespace.\n+data:\n+  volcano-controller.conf: |\n+    discoveryConfig:\n+      - source: ufm\n+        enabled: true\n+        interval: 10m\n+        config:\n+          endpoint: https://ufm-server:8080\n+          username: admin\n+          password: password\n+          insecureSkipVerify: true\n+      - source: roce\n+        enabled: false\n+        interval: 15m\n+        config:\n+          endpoint: https://roce-server:9090",
        "comment_created_at": "2025-05-15T04:46:14+00:00",
        "comment_author": "yeahdongcn",
        "comment_body": "`config.endpoint` makes sense for UFM since it provides a centralized interface, but RoCE doesn\u2019t have centralized management. What is this field intended to connect to in the case of RoCE?",
        "pr_file_module": null
      },
      {
        "comment_id": "2090372472",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4286,
        "pr_file": "docs/user-guide/how_to_use_hypernode_auto_discovery.md",
        "discussion_id": "2090231240",
        "commented_code": "@@ -0,0 +1,94 @@\n+# Usage Document\n+\n+## Introduction\n+\n+This design document describes the design and implementation of the HyperNode network topology discovery feature in Volcano. This feature automatically discovers the network topology structure within the cluster and creates and maintains HyperNode custom resources (CRs) based on the discovered topology information. Consequently, the Volcano Scheduler will leverage these HyperNode CRs for scheduling decisions, eliminating the need for users to manually maintain HyperNode information.\n+\n+## Prerequisites\n+\n+Please follow [this guide](https://volcano.sh/en/docs/v1-11-0/network_topology_aware_scheduling/#installing-volcano) to install Volcano with Network Topology Aware Scheduling feature enabled.\n+\n+## Configuration\n+\n+The HyperNode network topology discovery feature is configured via a ConfigMap. The ConfigMap contains the configuration for the discovery sources, such as UFM, RoCE, and label, you can modify the configuration according to your own cluster environments.\n+Please note that you should replace with your Volcano namespace if Volcano is not installed in the default namespace.\n+\n+### Example ConfigMap\n+\n+```yaml\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: volcano-controller-configmap\n+  namespace: volcano-system # Replace with your Volcano namespace if Volcano is not installed in the default namespace.\n+data:\n+  volcano-controller.conf: |\n+    discoveryConfig:\n+      - source: ufm\n+        enabled: true\n+        interval: 10m\n+        config:\n+          endpoint: https://ufm-server:8080\n+          username: admin\n+          password: password\n+          insecureSkipVerify: true\n+      - source: roce\n+        enabled: false\n+        interval: 15m\n+        config:\n+          endpoint: https://roce-server:9090",
        "comment_created_at": "2025-05-15T06:26:17+00:00",
        "comment_author": "Monokaix",
        "comment_body": "That's a good catch, currentlt roce type is not supported, and we have no roce environment to test this feature. Do you have any idea what fields should be filled in roce environment\uff1f",
        "pr_file_module": null
      },
      {
        "comment_id": "2090761629",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4286,
        "pr_file": "docs/user-guide/how_to_use_hypernode_auto_discovery.md",
        "discussion_id": "2090231240",
        "commented_code": "@@ -0,0 +1,94 @@\n+# Usage Document\n+\n+## Introduction\n+\n+This design document describes the design and implementation of the HyperNode network topology discovery feature in Volcano. This feature automatically discovers the network topology structure within the cluster and creates and maintains HyperNode custom resources (CRs) based on the discovered topology information. Consequently, the Volcano Scheduler will leverage these HyperNode CRs for scheduling decisions, eliminating the need for users to manually maintain HyperNode information.\n+\n+## Prerequisites\n+\n+Please follow [this guide](https://volcano.sh/en/docs/v1-11-0/network_topology_aware_scheduling/#installing-volcano) to install Volcano with Network Topology Aware Scheduling feature enabled.\n+\n+## Configuration\n+\n+The HyperNode network topology discovery feature is configured via a ConfigMap. The ConfigMap contains the configuration for the discovery sources, such as UFM, RoCE, and label, you can modify the configuration according to your own cluster environments.\n+Please note that you should replace with your Volcano namespace if Volcano is not installed in the default namespace.\n+\n+### Example ConfigMap\n+\n+```yaml\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: volcano-controller-configmap\n+  namespace: volcano-system # Replace with your Volcano namespace if Volcano is not installed in the default namespace.\n+data:\n+  volcano-controller.conf: |\n+    discoveryConfig:\n+      - source: ufm\n+        enabled: true\n+        interval: 10m\n+        config:\n+          endpoint: https://ufm-server:8080\n+          username: admin\n+          password: password\n+          insecureSkipVerify: true\n+      - source: roce\n+        enabled: false\n+        interval: 15m\n+        config:\n+          endpoint: https://roce-server:9090",
        "comment_created_at": "2025-05-15T09:46:27+00:00",
        "comment_author": "yeahdongcn",
        "comment_body": "As we discussed earlier, for RoCE we can use LLDP to collect neighbor information from each node and switch, then reconstruct the full topology. On the node side, tools like https://github.com/lldpd/lldpd or other open-source alternatives can be used. However, for switches, LLDP support and access methods can vary significantly between vendors. This makes it challenging to maintain compatibility across all switch types and may require contributions from the vendors themselves.",
        "pr_file_module": null
      },
      {
        "comment_id": "2096757996",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4286,
        "pr_file": "docs/user-guide/how_to_use_hypernode_auto_discovery.md",
        "discussion_id": "2090231240",
        "commented_code": "@@ -0,0 +1,94 @@\n+# Usage Document\n+\n+## Introduction\n+\n+This design document describes the design and implementation of the HyperNode network topology discovery feature in Volcano. This feature automatically discovers the network topology structure within the cluster and creates and maintains HyperNode custom resources (CRs) based on the discovered topology information. Consequently, the Volcano Scheduler will leverage these HyperNode CRs for scheduling decisions, eliminating the need for users to manually maintain HyperNode information.\n+\n+## Prerequisites\n+\n+Please follow [this guide](https://volcano.sh/en/docs/v1-11-0/network_topology_aware_scheduling/#installing-volcano) to install Volcano with Network Topology Aware Scheduling feature enabled.\n+\n+## Configuration\n+\n+The HyperNode network topology discovery feature is configured via a ConfigMap. The ConfigMap contains the configuration for the discovery sources, such as UFM, RoCE, and label, you can modify the configuration according to your own cluster environments.\n+Please note that you should replace with your Volcano namespace if Volcano is not installed in the default namespace.\n+\n+### Example ConfigMap\n+\n+```yaml\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: volcano-controller-configmap\n+  namespace: volcano-system # Replace with your Volcano namespace if Volcano is not installed in the default namespace.\n+data:\n+  volcano-controller.conf: |\n+    discoveryConfig:\n+      - source: ufm\n+        enabled: true\n+        interval: 10m\n+        config:\n+          endpoint: https://ufm-server:8080\n+          username: admin\n+          password: password\n+          insecureSkipVerify: true\n+      - source: roce\n+        enabled: false\n+        interval: 15m\n+        config:\n+          endpoint: https://roce-server:9090",
        "comment_created_at": "2025-05-20T02:40:08+00:00",
        "comment_author": "Monokaix",
        "comment_body": "Ok\uff0cI see. This interface is extensible enough to cover RoCE in the future, if we need a daemonset we can add it in RoCE scenario.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1741522950",
    "pr_number": 3552,
    "pr_file": "docs/design/net-topology-aware.md",
    "created_at": "2024-09-03T06:54:12+00:00",
    "commented_code": "+# Net Topology Aware Plugin\n+\n+- [Net Topology Aware Plugin](#net-topology-aware-plugin)\n+  - [Backgrounds](#backgrounds)\n+  - [Motivation](#motivation)\n+  - [Proposal one](#proposal-one)\n+    - [Goals](#goals)\n+    - [Non-Goals](#non-goals)\n+    - [Design Action](#design-action)\n+      - [Pod scheduling process](#pod-scheduling-process)\n+      - [Usage](#usage)\n+    - [Drawbacks](#drawbacks)\n+\n+## Backgrounds\n+\n+A Kubernetes cluster typically comprises numerous nodes distributed across different IDCs, chassis, and switches.\n+\n+Data transformations vary in performance across these different components.\n+\n+For latency-sensitive workloads, it's crucial to execute tasks within the same IDC and ideally on the same chassis and switch.\n+\n+## Motivation\n+\n+The goal is to make the Kubernetes scheduler network-topology aware to achieve the following:\n+\n+Ensure optimal scheduling of tasks from the same job onto nodes within the same topology, such as the same IDC, chassis, or switch.\n+\n+There will be two types of network-topology aware\n+\n+- **static**: `net-topology.type: static` is aiming to aware the network topology by nodes' labels\n+- **dynamic**: `net-topology.type: dynamic` is aiming to use some tools to detect the network topology dynamically",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "1741522950",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3552,
        "pr_file": "docs/design/net-topology-aware.md",
        "discussion_id": "1741522950",
        "commented_code": "@@ -0,0 +1,90 @@\n+# Net Topology Aware Plugin\n+\n+- [Net Topology Aware Plugin](#net-topology-aware-plugin)\n+  - [Backgrounds](#backgrounds)\n+  - [Motivation](#motivation)\n+  - [Proposal one](#proposal-one)\n+    - [Goals](#goals)\n+    - [Non-Goals](#non-goals)\n+    - [Design Action](#design-action)\n+      - [Pod scheduling process](#pod-scheduling-process)\n+      - [Usage](#usage)\n+    - [Drawbacks](#drawbacks)\n+\n+## Backgrounds\n+\n+A Kubernetes cluster typically comprises numerous nodes distributed across different IDCs, chassis, and switches.\n+\n+Data transformations vary in performance across these different components.\n+\n+For latency-sensitive workloads, it's crucial to execute tasks within the same IDC and ideally on the same chassis and switch.\n+\n+## Motivation\n+\n+The goal is to make the Kubernetes scheduler network-topology aware to achieve the following:\n+\n+Ensure optimal scheduling of tasks from the same job onto nodes within the same topology, such as the same IDC, chassis, or switch.\n+\n+There will be two types of network-topology aware\n+\n+- **static**: `net-topology.type: static` is aiming to aware the network topology by nodes' labels\n+- **dynamic**: `net-topology.type: dynamic` is aiming to use some tools to detect the network topology dynamically",
        "comment_created_at": "2024-09-03T06:54:12+00:00",
        "comment_author": "william-wang",
        "comment_body": "Is there any detail for network topology discovery?",
        "pr_file_module": null
      },
      {
        "comment_id": "1747880621",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 3552,
        "pr_file": "docs/design/net-topology-aware.md",
        "discussion_id": "1741522950",
        "commented_code": "@@ -0,0 +1,90 @@\n+# Net Topology Aware Plugin\n+\n+- [Net Topology Aware Plugin](#net-topology-aware-plugin)\n+  - [Backgrounds](#backgrounds)\n+  - [Motivation](#motivation)\n+  - [Proposal one](#proposal-one)\n+    - [Goals](#goals)\n+    - [Non-Goals](#non-goals)\n+    - [Design Action](#design-action)\n+      - [Pod scheduling process](#pod-scheduling-process)\n+      - [Usage](#usage)\n+    - [Drawbacks](#drawbacks)\n+\n+## Backgrounds\n+\n+A Kubernetes cluster typically comprises numerous nodes distributed across different IDCs, chassis, and switches.\n+\n+Data transformations vary in performance across these different components.\n+\n+For latency-sensitive workloads, it's crucial to execute tasks within the same IDC and ideally on the same chassis and switch.\n+\n+## Motivation\n+\n+The goal is to make the Kubernetes scheduler network-topology aware to achieve the following:\n+\n+Ensure optimal scheduling of tasks from the same job onto nodes within the same topology, such as the same IDC, chassis, or switch.\n+\n+There will be two types of network-topology aware\n+\n+- **static**: `net-topology.type: static` is aiming to aware the network topology by nodes' labels\n+- **dynamic**: `net-topology.type: dynamic` is aiming to use some tools to detect the network topology dynamically",
        "comment_created_at": "2024-09-07T03:03:01+00:00",
        "comment_author": "lowang-bh",
        "comment_body": "For example, `ibnetdiscover` can be used to discover the InfiniBand network topology.\r\nI have add an example tool in docs.",
        "pr_file_module": null
      }
    ]
  }
]