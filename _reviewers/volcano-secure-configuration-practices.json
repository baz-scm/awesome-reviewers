[
  {
    "discussion_id": "2106797879",
    "pr_number": 4286,
    "pr_file": "pkg/controllers/hypernode/discovery/ufm/ufm.go",
    "created_at": "2025-05-26T08:11:58+00:00",
    "commented_code": "+/*\n+Copyright 2025 The Volcano Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package ufm\n+\n+import (\n+\t\"crypto/tls\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"sort\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/klog/v2\"\n+\n+\ttopologyv1alpha1 \"volcano.sh/apis/pkg/apis/topology/v1alpha1\"\n+\t\"volcano.sh/volcano/pkg/controllers/hypernode/api\"\n+\t\"volcano.sh/volcano/pkg/controllers/hypernode/utils\"\n+)\n+\n+func init() {\n+\tapi.RegisterDiscoverer(\"ufm\", NewUFMDiscoverer)\n+}\n+\n+const (\n+\t// maxBodySize defines the maximum size of response body (100MB)\n+\tmaxBodySize = 100 << 20\n+\t// ufmPortsPath defines the API path for UFM ports resources\n+\tufmPortsPath = \"/ufmRest/resources/ports\"\n+)\n+\n+// UFMInterface represents a single interface between nodes in the UFM topology\n+type UFMInterface struct {\n+\tDescription     string `json:\"description\"`\n+\tTier            int    `json:\"tier\"`\n+\tSystemName      string `json:\"system_name\"`\n+\tNodeDescription string `json:\"node_description\"`\n+\tPeerNodeName    string `json:\"peer_node_name\"`\n+}\n+\n+// LeafSwitch represents a single leaf switch in the network topology\n+type LeafSwitch struct {\n+\tName      string\n+\tTier      int\n+\tNodeNames sets.Set[string]\n+}\n+\n+// LeafSwitchesGroup represents a group of connected leaf switches\n+type LeafSwitchesGroup struct {\n+\tLeafs     map[string]LeafSwitch\n+\tNodeNames sets.Set[string]\n+}\n+\n+// ufmDiscoverer implements the Discoverer interface for UFM\n+type ufmDiscoverer struct {\n+\tendpoint          string\n+\tusername          string\n+\tpassword          string\n+\tdiscoveryInterval time.Duration\n+\tclient            *http.Client\n+\tstopCh            chan struct{}\n+}\n+\n+// NewUFMDiscoverer creates a new UFM topology discoverer\n+func NewUFMDiscoverer(cfg api.DiscoveryConfig) api.Discoverer {\n+\tendpoint := cfg.Config[\"endpoint\"].(string)\n+\tusername := cfg.Config[\"username\"].(string)\n+\tpassword := cfg.Config[\"password\"].(string)",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2106797879",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4286,
        "pr_file": "pkg/controllers/hypernode/discovery/ufm/ufm.go",
        "discussion_id": "2106797879",
        "commented_code": "@@ -0,0 +1,380 @@\n+/*\n+Copyright 2025 The Volcano Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package ufm\n+\n+import (\n+\t\"crypto/tls\"\n+\t\"encoding/json\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"sort\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/klog/v2\"\n+\n+\ttopologyv1alpha1 \"volcano.sh/apis/pkg/apis/topology/v1alpha1\"\n+\t\"volcano.sh/volcano/pkg/controllers/hypernode/api\"\n+\t\"volcano.sh/volcano/pkg/controllers/hypernode/utils\"\n+)\n+\n+func init() {\n+\tapi.RegisterDiscoverer(\"ufm\", NewUFMDiscoverer)\n+}\n+\n+const (\n+\t// maxBodySize defines the maximum size of response body (100MB)\n+\tmaxBodySize = 100 << 20\n+\t// ufmPortsPath defines the API path for UFM ports resources\n+\tufmPortsPath = \"/ufmRest/resources/ports\"\n+)\n+\n+// UFMInterface represents a single interface between nodes in the UFM topology\n+type UFMInterface struct {\n+\tDescription     string `json:\"description\"`\n+\tTier            int    `json:\"tier\"`\n+\tSystemName      string `json:\"system_name\"`\n+\tNodeDescription string `json:\"node_description\"`\n+\tPeerNodeName    string `json:\"peer_node_name\"`\n+}\n+\n+// LeafSwitch represents a single leaf switch in the network topology\n+type LeafSwitch struct {\n+\tName      string\n+\tTier      int\n+\tNodeNames sets.Set[string]\n+}\n+\n+// LeafSwitchesGroup represents a group of connected leaf switches\n+type LeafSwitchesGroup struct {\n+\tLeafs     map[string]LeafSwitch\n+\tNodeNames sets.Set[string]\n+}\n+\n+// ufmDiscoverer implements the Discoverer interface for UFM\n+type ufmDiscoverer struct {\n+\tendpoint          string\n+\tusername          string\n+\tpassword          string\n+\tdiscoveryInterval time.Duration\n+\tclient            *http.Client\n+\tstopCh            chan struct{}\n+}\n+\n+// NewUFMDiscoverer creates a new UFM topology discoverer\n+func NewUFMDiscoverer(cfg api.DiscoveryConfig) api.Discoverer {\n+\tendpoint := cfg.Config[\"endpoint\"].(string)\n+\tusername := cfg.Config[\"username\"].(string)\n+\tpassword := cfg.Config[\"password\"].(string)",
        "comment_created_at": "2025-05-26T08:11:58+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "I think encryption tools need to be integrated here. Currently, it is assumed that users configure plain text passwords, which is not only unsafe to store locally, but also unsafe to transmit over the network. This is not conducive to Volcano's security audit and introduces new security risks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1261182163",
    "pr_number": 2961,
    "pr_file": "pkg/scheduler/metrics/source/metrics_client_prometheus.go",
    "created_at": "2023-07-12T13:28:34+00:00",
    "commented_code": "var client api.Client\n \tvar err error\n \tinsecureSkipVerify := p.conf[\"tls.insecureSkipVerify\"] == \"true\"\n-\ttr := &http.Transport{\n+\tvar tr http.RoundTripper = &http.Transport{\n \t\tTLSClientConfig: &tls.Config{\n \t\t\tInsecureSkipVerify: insecureSkipVerify,\n \t\t},\n \t}\n+\ttConf := &transport.Config{\n+\t\tUsername:        p.conf[\"username\"],\n+\t\tPassword:        p.conf[\"password\"],\n+\t\tBearerToken:     p.conf[\"bearertoken\"],",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "1261182163",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 2961,
        "pr_file": "pkg/scheduler/metrics/source/metrics_client_prometheus.go",
        "discussion_id": "1261182163",
        "commented_code": "@@ -52,11 +53,21 @@ func (p *PrometheusMetricsClient) NodeMetricsAvg(ctx context.Context, nodeName s\n \tvar client api.Client\n \tvar err error\n \tinsecureSkipVerify := p.conf[\"tls.insecureSkipVerify\"] == \"true\"\n-\ttr := &http.Transport{\n+\tvar tr http.RoundTripper = &http.Transport{\n \t\tTLSClientConfig: &tls.Config{\n \t\t\tInsecureSkipVerify: insecureSkipVerify,\n \t\t},\n \t}\n+\ttConf := &transport.Config{\n+\t\tUsername:        p.conf[\"username\"],\n+\t\tPassword:        p.conf[\"password\"],\n+\t\tBearerToken:     p.conf[\"bearertoken\"],",
        "comment_created_at": "2023-07-12T13:28:34+00:00",
        "comment_author": "lowang-bh",
        "comment_body": "1. Would you please update the relative help docs?\r\n2. How about both basic auth and token auth are set? I find `HTTPWrappersForConfig` will check it and return error. link: https://github.com/kubernetes/client-go/blob/0c7c900fd55e3f77909f123388a3171d56346d7d/transport/round_trippers.go#L48-L49",
        "pr_file_module": null
      },
      {
        "comment_id": "1264276927",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 2961,
        "pr_file": "pkg/scheduler/metrics/source/metrics_client_prometheus.go",
        "discussion_id": "1261182163",
        "commented_code": "@@ -52,11 +53,21 @@ func (p *PrometheusMetricsClient) NodeMetricsAvg(ctx context.Context, nodeName s\n \tvar client api.Client\n \tvar err error\n \tinsecureSkipVerify := p.conf[\"tls.insecureSkipVerify\"] == \"true\"\n-\ttr := &http.Transport{\n+\tvar tr http.RoundTripper = &http.Transport{\n \t\tTLSClientConfig: &tls.Config{\n \t\t\tInsecureSkipVerify: insecureSkipVerify,\n \t\t},\n \t}\n+\ttConf := &transport.Config{\n+\t\tUsername:        p.conf[\"username\"],\n+\t\tPassword:        p.conf[\"password\"],\n+\t\tBearerToken:     p.conf[\"bearertoken\"],",
        "comment_created_at": "2023-07-15T01:25:15+00:00",
        "comment_author": "trsteel",
        "comment_body": "1. already updated\r\n2. yes\uff0cwe can trust the check in HTTPWrapperForConfig.",
        "pr_file_module": null
      },
      {
        "comment_id": "1264277635",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 2961,
        "pr_file": "pkg/scheduler/metrics/source/metrics_client_prometheus.go",
        "discussion_id": "1261182163",
        "commented_code": "@@ -52,11 +53,21 @@ func (p *PrometheusMetricsClient) NodeMetricsAvg(ctx context.Context, nodeName s\n \tvar client api.Client\n \tvar err error\n \tinsecureSkipVerify := p.conf[\"tls.insecureSkipVerify\"] == \"true\"\n-\ttr := &http.Transport{\n+\tvar tr http.RoundTripper = &http.Transport{\n \t\tTLSClientConfig: &tls.Config{\n \t\t\tInsecureSkipVerify: insecureSkipVerify,\n \t\t},\n \t}\n+\ttConf := &transport.Config{\n+\t\tUsername:        p.conf[\"username\"],\n+\t\tPassword:        p.conf[\"password\"],\n+\t\tBearerToken:     p.conf[\"bearertoken\"],",
        "comment_created_at": "2023-07-15T01:29:34+00:00",
        "comment_author": "lowang-bh",
        "comment_body": "If we don't handle this error, then the node metrics will not take effect. How bout do some check on the conf? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1264280964",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 2961,
        "pr_file": "pkg/scheduler/metrics/source/metrics_client_prometheus.go",
        "discussion_id": "1261182163",
        "commented_code": "@@ -52,11 +53,21 @@ func (p *PrometheusMetricsClient) NodeMetricsAvg(ctx context.Context, nodeName s\n \tvar client api.Client\n \tvar err error\n \tinsecureSkipVerify := p.conf[\"tls.insecureSkipVerify\"] == \"true\"\n-\ttr := &http.Transport{\n+\tvar tr http.RoundTripper = &http.Transport{\n \t\tTLSClientConfig: &tls.Config{\n \t\t\tInsecureSkipVerify: insecureSkipVerify,\n \t\t},\n \t}\n+\ttConf := &transport.Config{\n+\t\tUsername:        p.conf[\"username\"],\n+\t\tPassword:        p.conf[\"password\"],\n+\t\tBearerToken:     p.conf[\"bearertoken\"],",
        "comment_created_at": "2023-07-15T01:42:43+00:00",
        "comment_author": "trsteel",
        "comment_body": "Here is aleady many checks in `HTTPWrappersForConfig`, our check will same with it. Add a check function, and returns an error if check failed. I think it change nothing and improve nothing.\r\n```\r\n        // After adding checkSomehing function, we just return another error(different with `HTTPWrappersForConfig`) if auth config wrong.\r\n\tif err := checkSomehing(p.conf); err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\ttConf := &transport.Config{\r\n\t\tUsername:        p.conf[\"username\"],\r\n\t\tPassword:        p.conf[\"password\"],\r\n\t\tBearerToken:     p.conf[\"bearertoken\"],\r\n\t\tBearerTokenFile: p.conf[\"bearertokenfile\"],\r\n\t}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1293084489",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 2961,
        "pr_file": "pkg/scheduler/metrics/source/metrics_client_prometheus.go",
        "discussion_id": "1261182163",
        "commented_code": "@@ -52,11 +53,21 @@ func (p *PrometheusMetricsClient) NodeMetricsAvg(ctx context.Context, nodeName s\n \tvar client api.Client\n \tvar err error\n \tinsecureSkipVerify := p.conf[\"tls.insecureSkipVerify\"] == \"true\"\n-\ttr := &http.Transport{\n+\tvar tr http.RoundTripper = &http.Transport{\n \t\tTLSClientConfig: &tls.Config{\n \t\t\tInsecureSkipVerify: insecureSkipVerify,\n \t\t},\n \t}\n+\ttConf := &transport.Config{\n+\t\tUsername:        p.conf[\"username\"],\n+\t\tPassword:        p.conf[\"password\"],\n+\t\tBearerToken:     p.conf[\"bearertoken\"],",
        "comment_created_at": "2023-08-14T07:42:32+00:00",
        "comment_author": "lowang-bh",
        "comment_body": ">  Add a check function, and returns an error if check failed. I think it change nothing and improve nothing.\r\n\r\nHow about give a default setting to make it works if both basic auth and token auth are set?\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1293096751",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 2961,
        "pr_file": "pkg/scheduler/metrics/source/metrics_client_prometheus.go",
        "discussion_id": "1261182163",
        "commented_code": "@@ -52,11 +53,21 @@ func (p *PrometheusMetricsClient) NodeMetricsAvg(ctx context.Context, nodeName s\n \tvar client api.Client\n \tvar err error\n \tinsecureSkipVerify := p.conf[\"tls.insecureSkipVerify\"] == \"true\"\n-\ttr := &http.Transport{\n+\tvar tr http.RoundTripper = &http.Transport{\n \t\tTLSClientConfig: &tls.Config{\n \t\t\tInsecureSkipVerify: insecureSkipVerify,\n \t\t},\n \t}\n+\ttConf := &transport.Config{\n+\t\tUsername:        p.conf[\"username\"],\n+\t\tPassword:        p.conf[\"password\"],\n+\t\tBearerToken:     p.conf[\"bearertoken\"],",
        "comment_created_at": "2023-08-14T07:53:46+00:00",
        "comment_author": "trsteel",
        "comment_body": "That's a good ideal. I create a new commit for it. If basic auth is set, token will be clear.",
        "pr_file_module": null
      },
      {
        "comment_id": "1293232812",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 2961,
        "pr_file": "pkg/scheduler/metrics/source/metrics_client_prometheus.go",
        "discussion_id": "1261182163",
        "commented_code": "@@ -52,11 +53,21 @@ func (p *PrometheusMetricsClient) NodeMetricsAvg(ctx context.Context, nodeName s\n \tvar client api.Client\n \tvar err error\n \tinsecureSkipVerify := p.conf[\"tls.insecureSkipVerify\"] == \"true\"\n-\ttr := &http.Transport{\n+\tvar tr http.RoundTripper = &http.Transport{\n \t\tTLSClientConfig: &tls.Config{\n \t\t\tInsecureSkipVerify: insecureSkipVerify,\n \t\t},\n \t}\n+\ttConf := &transport.Config{\n+\t\tUsername:        p.conf[\"username\"],\n+\t\tPassword:        p.conf[\"password\"],\n+\t\tBearerToken:     p.conf[\"bearertoken\"],",
        "comment_created_at": "2023-08-14T09:35:55+00:00",
        "comment_author": "lowang-bh",
        "comment_body": "That's ok. How about the UT? I think UT should test server with root path and let conf with only basic auth, token auth, or both  basic auth and token auth are set.",
        "pr_file_module": null
      },
      {
        "comment_id": "1293243310",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 2961,
        "pr_file": "pkg/scheduler/metrics/source/metrics_client_prometheus.go",
        "discussion_id": "1261182163",
        "commented_code": "@@ -52,11 +53,21 @@ func (p *PrometheusMetricsClient) NodeMetricsAvg(ctx context.Context, nodeName s\n \tvar client api.Client\n \tvar err error\n \tinsecureSkipVerify := p.conf[\"tls.insecureSkipVerify\"] == \"true\"\n-\ttr := &http.Transport{\n+\tvar tr http.RoundTripper = &http.Transport{\n \t\tTLSClientConfig: &tls.Config{\n \t\t\tInsecureSkipVerify: insecureSkipVerify,\n \t\t},\n \t}\n+\ttConf := &transport.Config{\n+\t\tUsername:        p.conf[\"username\"],\n+\t\tPassword:        p.conf[\"password\"],\n+\t\tBearerToken:     p.conf[\"bearertoken\"],",
        "comment_created_at": "2023-08-14T09:45:39+00:00",
        "comment_author": "trsteel",
        "comment_body": "UT is added now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2030081188",
    "pr_number": 4173,
    "pr_file": "cmd/scheduler/app/options/options.go",
    "created_at": "2025-04-06T08:32:54+00:00",
    "commented_code": "\"Enable tracking of available storage capacity that CSI drivers provide; it is false by default\")\n \tfs.BoolVar(&s.EnableHealthz, \"enable-healthz\", false, \"Enable the health check; it is false by default\")\n \tfs.BoolVar(&s.EnableMetrics, \"enable-metrics\", false, \"Enable the metrics function; it is false by default\")\n+\tfs.BoolVar(&s.EnablePprof, \"enable-pprof\", false, \"Enable the pprof endpoint; it is false by default\")",
    "repo_full_name": "volcano-sh/volcano",
    "discussion_comments": [
      {
        "comment_id": "2030081188",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4173,
        "pr_file": "cmd/scheduler/app/options/options.go",
        "discussion_id": "2030081188",
        "commented_code": "@@ -141,6 +142,7 @@ func (s *ServerOption) AddFlags(fs *pflag.FlagSet) {\n \t\t\"Enable tracking of available storage capacity that CSI drivers provide; it is false by default\")\n \tfs.BoolVar(&s.EnableHealthz, \"enable-healthz\", false, \"Enable the health check; it is false by default\")\n \tfs.BoolVar(&s.EnableMetrics, \"enable-metrics\", false, \"Enable the metrics function; it is false by default\")\n+\tfs.BoolVar(&s.EnablePprof, \"enable-pprof\", false, \"Enable the pprof endpoint; it is false by default\")",
        "comment_created_at": "2025-04-06T08:32:54+00:00",
        "comment_author": "shinytang6",
        "comment_body": "Q: why not enable it by default, l remember k8s scheduler enabling pprof by default.",
        "pr_file_module": null
      },
      {
        "comment_id": "2030532392",
        "repo_full_name": "volcano-sh/volcano",
        "pr_number": 4173,
        "pr_file": "cmd/scheduler/app/options/options.go",
        "discussion_id": "2030081188",
        "commented_code": "@@ -141,6 +142,7 @@ func (s *ServerOption) AddFlags(fs *pflag.FlagSet) {\n \t\t\"Enable tracking of available storage capacity that CSI drivers provide; it is false by default\")\n \tfs.BoolVar(&s.EnableHealthz, \"enable-healthz\", false, \"Enable the health check; it is false by default\")\n \tfs.BoolVar(&s.EnableMetrics, \"enable-metrics\", false, \"Enable the metrics function; it is false by default\")\n+\tfs.BoolVar(&s.EnablePprof, \"enable-pprof\", false, \"Enable the pprof endpoint; it is false by default\")",
        "comment_created_at": "2025-04-07T06:28:08+00:00",
        "comment_author": "JesseStutler",
        "comment_body": "This is the feedback from the security audit team, the original words were \"The debug endpoint should be opt-in instead of opt-out,\" so it is turned off by default, and users can choose to turn it on",
        "pr_file_module": null
      }
    ]
  }
]