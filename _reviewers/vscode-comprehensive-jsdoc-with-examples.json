[
  {
    "discussion_id": "2132898772",
    "pr_number": 250880,
    "pr_file": "extensions/terminal-suggest/src/tokens.ts",
    "created_at": "2025-06-06T20:55:39+00:00",
    "commented_code": "const shellTypeResetChars = new Map<TerminalShellType, string[]>([\n \t[TerminalShellType.Bash, ['>', '>>', '<', '2>', '2>>', '&>', '&>>', '|', '|&', '&&', '||', '&', ';', '(', '{', '<<']],\n \t[TerminalShellType.Zsh, ['>', '>>', '<', '2>', '2>>', '&>', '&>>', '<>', '|', '|&', '&&', '||', '&', ';', '(', '{', '<<', '<<<', '<(']],\n-\t[TerminalShellType.PowerShell, ['>', '>>', '<', '2>', '2>>', '*>', '*>>', '|', '-and', '-or', '-not', '!', '&', '-eq', '-ne', '-gt', '-lt', '-ge', '-le', '-like', '-notlike', '-match', '-notmatch', '-contains', '-notcontains', '-in', '-notin']]\n+\t[TerminalShellType.PowerShell, ['>', '>>', '<', '2>', '2>>', '*>', '*>>', '|', '-and', '-or', '-not', '!', '&', ';', '-eq', '-ne', '-gt', '-lt', '-ge', '-le', '-like', '-notlike', '-match', '-notmatch', '-contains', '-notcontains', '-in', '-notin']]\n+]);\n+\n+// Command separators that start new command contexts (vs logical operators that stay in argument context)\n+const shellTypeCommandSeparators = new Map<TerminalShellType, string[]>([\n+\t[TerminalShellType.Bash, ['|', '|&', '&&', '||', '&', ';', '(', '{']],\n+\t[TerminalShellType.Zsh, ['|', '|&', '&&', '||', '&', ';', '(', '{']],\n+\t[TerminalShellType.PowerShell, ['|', '&', ';']]\n ]);\n \n const defaultShellTypeResetChars = shellTypeResetChars.get(TerminalShellType.Bash)!;\n+const defaultShellTypeCommandSeparators = shellTypeCommandSeparators.get(TerminalShellType.Bash)!;\n+\n+export { shellTypeResetChars, defaultShellTypeResetChars, shellTypeCommandSeparators, defaultShellTypeCommandSeparators };\n \n export function getTokenType(ctx: { commandLine: string; cursorPosition: number }, shellType: TerminalShellType | undefined): TokenType {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2132898772",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 250880,
        "pr_file": "extensions/terminal-suggest/src/tokens.ts",
        "discussion_id": "2132898772",
        "commented_code": "@@ -14,20 +14,102 @@ export const enum TokenType {\n const shellTypeResetChars = new Map<TerminalShellType, string[]>([\n \t[TerminalShellType.Bash, ['>', '>>', '<', '2>', '2>>', '&>', '&>>', '|', '|&', '&&', '||', '&', ';', '(', '{', '<<']],\n \t[TerminalShellType.Zsh, ['>', '>>', '<', '2>', '2>>', '&>', '&>>', '<>', '|', '|&', '&&', '||', '&', ';', '(', '{', '<<', '<<<', '<(']],\n-\t[TerminalShellType.PowerShell, ['>', '>>', '<', '2>', '2>>', '*>', '*>>', '|', '-and', '-or', '-not', '!', '&', '-eq', '-ne', '-gt', '-lt', '-ge', '-le', '-like', '-notlike', '-match', '-notmatch', '-contains', '-notcontains', '-in', '-notin']]\n+\t[TerminalShellType.PowerShell, ['>', '>>', '<', '2>', '2>>', '*>', '*>>', '|', '-and', '-or', '-not', '!', '&', ';', '-eq', '-ne', '-gt', '-lt', '-ge', '-le', '-like', '-notlike', '-match', '-notmatch', '-contains', '-notcontains', '-in', '-notin']]\n+]);\n+\n+// Command separators that start new command contexts (vs logical operators that stay in argument context)\n+const shellTypeCommandSeparators = new Map<TerminalShellType, string[]>([\n+\t[TerminalShellType.Bash, ['|', '|&', '&&', '||', '&', ';', '(', '{']],\n+\t[TerminalShellType.Zsh, ['|', '|&', '&&', '||', '&', ';', '(', '{']],\n+\t[TerminalShellType.PowerShell, ['|', '&', ';']]\n ]);\n \n const defaultShellTypeResetChars = shellTypeResetChars.get(TerminalShellType.Bash)!;\n+const defaultShellTypeCommandSeparators = shellTypeCommandSeparators.get(TerminalShellType.Bash)!;\n+\n+export { shellTypeResetChars, defaultShellTypeResetChars, shellTypeCommandSeparators, defaultShellTypeCommandSeparators };\n \n export function getTokenType(ctx: { commandLine: string; cursorPosition: number }, shellType: TerminalShellType | undefined): TokenType {",
        "comment_created_at": "2025-06-06T20:55:39+00:00",
        "comment_author": "meganrogge",
        "comment_body": "@copilot for this function, add examples to comments so it's easier to understand/ read each case",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1799343256",
    "pr_number": 231178,
    "pr_file": "src/vs/workbench/contrib/terminalContrib/clipboard/browser/terminalClipboard.ts",
    "created_at": "2024-10-14T11:47:00+00:00",
    "commented_code": "import { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\n import { TerminalSettingId } from '../../../../../platform/terminal/common/terminal.js';\n \n-export async function shouldPasteTerminalText(accessor: ServicesAccessor, text: string, bracketedPasteMode: boolean | undefined): Promise<boolean | { modifiedText: string }> {\n+class SmartPasteUtils {\n+\t/**\n+\t *\n+\t * @param string\n+\t * @returns true if the string is a path\n+\t */",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1799343256",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 231178,
        "pr_file": "src/vs/workbench/contrib/terminalContrib/clipboard/browser/terminalClipboard.ts",
        "discussion_id": "1799343256",
        "commented_code": "@@ -9,14 +9,84 @@ import { IDialogService } from '../../../../../platform/dialogs/common/dialogs.j\n import { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\n import { TerminalSettingId } from '../../../../../platform/terminal/common/terminal.js';\n \n-export async function shouldPasteTerminalText(accessor: ServicesAccessor, text: string, bracketedPasteMode: boolean | undefined): Promise<boolean | { modifiedText: string }> {\n+class SmartPasteUtils {\n+\t/**\n+\t *\n+\t * @param string\n+\t * @returns true if the string is a path\n+\t */",
        "comment_created_at": "2024-10-14T11:47:00+00:00",
        "comment_author": "Tyriar",
        "comment_body": "nit: Prefer a main description over `@returns`, eg. `Whether the provided value looks like a path.`. We also want to either add a description to the parameter or omit it.",
        "pr_file_module": null
      }
    ]
  }
]