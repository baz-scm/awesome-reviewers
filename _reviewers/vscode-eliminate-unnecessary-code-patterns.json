[
  {
    "discussion_id": "2166570668",
    "pr_number": 251989,
    "pr_file": "src/vs/workbench/contrib/terminalContrib/suggest/browser/terminalCompletionService.ts",
    "created_at": "2025-06-25T12:15:07+00:00",
    "commented_code": "label += resourceRequestConfig.pathSeparator;\n \t\t\t}\n \n+\t\t\tif (shellType) {\n+\t\t\t\tlabel = escapeTerminalCompletionLabel(label, shellType, resourceRequestConfig.pathSeparator);\n+\t\t\t}",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2166570668",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 251989,
        "pr_file": "src/vs/workbench/contrib/terminalContrib/suggest/browser/terminalCompletionService.ts",
        "discussion_id": "2166570668",
        "commented_code": "@@ -402,6 +402,10 @@ export class TerminalCompletionService extends Disposable implements ITerminalCo\n \t\t\t\tlabel += resourceRequestConfig.pathSeparator;\n \t\t\t}\n \n+\t\t\tif (shellType) {\n+\t\t\t\tlabel = escapeTerminalCompletionLabel(label, shellType, resourceRequestConfig.pathSeparator);\n+\t\t\t}",
        "comment_created_at": "2025-06-25T12:15:07+00:00",
        "comment_author": "Tyriar",
        "comment_body": "nit: Could move the if into the escape function and allow it to accept shellType undefined to simplify this function a little",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2038686187",
    "pr_number": 246231,
    "pr_file": "src/vs/platform/prompts/common/constants.ts",
    "created_at": "2025-04-11T02:02:23+00:00",
    "commented_code": "*/\n export const DEFAULT_SOURCE_FOLDER = '.github/prompts';\n \n+\n+/**\n+ * Gets the prompt file type from the provided path.\n+ */\n+export function getPromptFileType(fileUri: URI): 'instructions' | 'prompt' | undefined {\n+\tconst filename = basename(fileUri);\n+\tif (filename.endsWith(PROMPT_FILE_EXTENSION)) {\n+\t\treturn 'prompt';\n+\t} else if (filename.endsWith(INSTRUCTION_FILE_EXTENSION) || filename === COPILOT_CUSTOM_INSTRUCTIONS_FILENAME) {\n+\t\treturn 'instructions';\n+\t}\n+\treturn undefined;",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2038686187",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 246231,
        "pr_file": "src/vs/platform/prompts/common/constants.ts",
        "discussion_id": "2038686187",
        "commented_code": "@@ -33,19 +37,31 @@ export const LOCATIONS_CONFIG_KEY: string = 'chat.promptFilesLocations';\n  */\n export const DEFAULT_SOURCE_FOLDER = '.github/prompts';\n \n+\n+/**\n+ * Gets the prompt file type from the provided path.\n+ */\n+export function getPromptFileType(fileUri: URI): 'instructions' | 'prompt' | undefined {\n+\tconst filename = basename(fileUri);\n+\tif (filename.endsWith(PROMPT_FILE_EXTENSION)) {\n+\t\treturn 'prompt';\n+\t} else if (filename.endsWith(INSTRUCTION_FILE_EXTENSION) || filename === COPILOT_CUSTOM_INSTRUCTIONS_FILENAME) {\n+\t\treturn 'instructions';\n+\t}\n+\treturn undefined;",
        "comment_created_at": "2025-04-11T02:02:23+00:00",
        "comment_author": "legomushroom",
        "comment_body": "Nit: the `else` statements are redundant since we return from the if blocks 🤗 I find this style to be bit cleaner:\r\n\r\n```suggestion\r\n\tif (filename.endsWith(PROMPT_FILE_EXTENSION)) {\r\n\t\treturn 'prompt';\r\n\t}\r\n\t\r\n\tif (filename.endsWith(INSTRUCTION_FILE_EXTENSION) || filename === COPILOT_CUSTOM_INSTRUCTIONS_FILENAME) {\r\n\t\treturn 'instructions';\r\n\t}\r\n\r\n\treturn undefined;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2038687182",
    "pr_number": 246231,
    "pr_file": "src/vs/platform/prompts/common/constants.ts",
    "created_at": "2025-04-11T02:03:35+00:00",
    "commented_code": "export const getCleanPromptName = (\n \tfileUri: URI,\n ): string => {\n-\tassert(\n-\t\tisPromptFile(fileUri),\n-\t\t`Provided path '${fileUri.fsPath}' is not a prompt file.`,\n-\t);\n-\n-\t// if a Copilot custom instructions file, remove `markdown` file extension\n-\t// otherwise, remove the `prompt` file extension\n-\tconst fileExtension = (fileUri.path.endsWith(COPILOT_CUSTOM_INSTRUCTIONS_FILENAME))\n-\t\t? '.md'\n-\t\t: PROMPT_FILE_EXTENSION;\n-\n-\treturn basename(fileUri.path, fileExtension);\n+\tconst filename = basename(fileUri);\n+\tif (filename.endsWith(PROMPT_FILE_EXTENSION)) {\n+\t\treturn filename.slice(0, -PROMPT_FILE_EXTENSION.length);\n+\t} else if (filename.endsWith(INSTRUCTION_FILE_EXTENSION)) {\n+\t\treturn filename.slice(0, -INSTRUCTION_FILE_EXTENSION.length);\n+\t} else if (filename === COPILOT_CUSTOM_INSTRUCTIONS_FILENAME) {\n+\t\treturn filename.slice(0, -3);\n+\t}",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2038687182",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 246231,
        "pr_file": "src/vs/platform/prompts/common/constants.ts",
        "discussion_id": "2038687182",
        "commented_code": "@@ -56,16 +72,13 @@ export const isPromptFile = (\n export const getCleanPromptName = (\n \tfileUri: URI,\n ): string => {\n-\tassert(\n-\t\tisPromptFile(fileUri),\n-\t\t`Provided path '${fileUri.fsPath}' is not a prompt file.`,\n-\t);\n-\n-\t// if a Copilot custom instructions file, remove `markdown` file extension\n-\t// otherwise, remove the `prompt` file extension\n-\tconst fileExtension = (fileUri.path.endsWith(COPILOT_CUSTOM_INSTRUCTIONS_FILENAME))\n-\t\t? '.md'\n-\t\t: PROMPT_FILE_EXTENSION;\n-\n-\treturn basename(fileUri.path, fileExtension);\n+\tconst filename = basename(fileUri);\n+\tif (filename.endsWith(PROMPT_FILE_EXTENSION)) {\n+\t\treturn filename.slice(0, -PROMPT_FILE_EXTENSION.length);\n+\t} else if (filename.endsWith(INSTRUCTION_FILE_EXTENSION)) {\n+\t\treturn filename.slice(0, -INSTRUCTION_FILE_EXTENSION.length);\n+\t} else if (filename === COPILOT_CUSTOM_INSTRUCTIONS_FILENAME) {\n+\t\treturn filename.slice(0, -3);\n+\t}",
        "comment_created_at": "2025-04-11T02:03:35+00:00",
        "comment_author": "legomushroom",
        "comment_body": "Same here, the `else` statements just add a bit of noise to the text:\r\n\r\n```suggestion\r\n\tif (filename.endsWith(PROMPT_FILE_EXTENSION)) {\r\n\t\treturn filename.slice(0, -PROMPT_FILE_EXTENSION.length);\r\n\t}\r\n\t\r\n\tif (filename.endsWith(INSTRUCTION_FILE_EXTENSION)) {\r\n\t\treturn filename.slice(0, -INSTRUCTION_FILE_EXTENSION.length);\r\n\t}\r\n\t\r\n\tif (filename === COPILOT_CUSTOM_INSTRUCTIONS_FILENAME) {\r\n\t\treturn filename.slice(0, -3);\r\n\t}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2011150177",
    "pr_number": 244041,
    "pr_file": "src/vs/workbench/services/notebook/common/notebookDocumentService.ts",
    "created_at": "2025-03-25T01:37:35+00:00",
    "commented_code": "return notebook.with({ scheme: Schemas.vscodeNotebookMetadata, fragment });\n }\n \n+export function parseCellOutputUri(uri: URI): { notebook: URI; openIn: string; outputId?: string; cellFragment?: string; outputIndex?: number } | undefined {\n+\tif (uri.scheme !== Schemas.vscodeNotebookCellOutput) {\n+\t\treturn;\n+\t}\n+\n+\tconst params = new URLSearchParams(uri.query);\n+\tconst openIn = params.get('openIn');\n+\tif (!openIn) {\n+\t\treturn;\n+\t}\n+\tconst outputId = params.get('outputId') ?? undefined;\n+\tconst cellFragment = uri.fragment ?? undefined;\n+\tconst outputIndex = params.get('outputIndex') ? parseInt(params.get('outputIndex') || '', 10) : undefined;",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2011150177",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 244041,
        "pr_file": "src/vs/workbench/services/notebook/common/notebookDocumentService.ts",
        "discussion_id": "2011150177",
        "commented_code": "@@ -66,6 +66,35 @@ export function generateMetadataUri(notebook: URI): URI {\n \treturn notebook.with({ scheme: Schemas.vscodeNotebookMetadata, fragment });\n }\n \n+export function parseCellOutputUri(uri: URI): { notebook: URI; openIn: string; outputId?: string; cellFragment?: string; outputIndex?: number } | undefined {\n+\tif (uri.scheme !== Schemas.vscodeNotebookCellOutput) {\n+\t\treturn;\n+\t}\n+\n+\tconst params = new URLSearchParams(uri.query);\n+\tconst openIn = params.get('openIn');\n+\tif (!openIn) {\n+\t\treturn;\n+\t}\n+\tconst outputId = params.get('outputId') ?? undefined;\n+\tconst cellFragment = uri.fragment ?? undefined;\n+\tconst outputIndex = params.get('outputIndex') ? parseInt(params.get('outputIndex') || '', 10) : undefined;",
        "comment_created_at": "2025-03-25T01:37:35+00:00",
        "comment_author": "DonJayamanne",
        "comment_body": "Same code in `notebookCommon.ts`\r\nCan we not reuse that same function?",
        "pr_file_module": null
      },
      {
        "comment_id": "2011157236",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 244041,
        "pr_file": "src/vs/workbench/services/notebook/common/notebookDocumentService.ts",
        "discussion_id": "2011150177",
        "commented_code": "@@ -66,6 +66,35 @@ export function generateMetadataUri(notebook: URI): URI {\n \treturn notebook.with({ scheme: Schemas.vscodeNotebookMetadata, fragment });\n }\n \n+export function parseCellOutputUri(uri: URI): { notebook: URI; openIn: string; outputId?: string; cellFragment?: string; outputIndex?: number } | undefined {\n+\tif (uri.scheme !== Schemas.vscodeNotebookCellOutput) {\n+\t\treturn;\n+\t}\n+\n+\tconst params = new URLSearchParams(uri.query);\n+\tconst openIn = params.get('openIn');\n+\tif (!openIn) {\n+\t\treturn;\n+\t}\n+\tconst outputId = params.get('outputId') ?? undefined;\n+\tconst cellFragment = uri.fragment ?? undefined;\n+\tconst outputIndex = params.get('outputIndex') ? parseInt(params.get('outputIndex') || '', 10) : undefined;",
        "comment_created_at": "2025-03-25T01:46:24+00:00",
        "comment_author": "eleanorjboyd",
        "comment_body": "had to duplicate since it is used in labels which is too low level to reference notebookCommon from my understanding",
        "pr_file_module": null
      },
      {
        "comment_id": "2011195360",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 244041,
        "pr_file": "src/vs/workbench/services/notebook/common/notebookDocumentService.ts",
        "discussion_id": "2011150177",
        "commented_code": "@@ -66,6 +66,35 @@ export function generateMetadataUri(notebook: URI): URI {\n \treturn notebook.with({ scheme: Schemas.vscodeNotebookMetadata, fragment });\n }\n \n+export function parseCellOutputUri(uri: URI): { notebook: URI; openIn: string; outputId?: string; cellFragment?: string; outputIndex?: number } | undefined {\n+\tif (uri.scheme !== Schemas.vscodeNotebookCellOutput) {\n+\t\treturn;\n+\t}\n+\n+\tconst params = new URLSearchParams(uri.query);\n+\tconst openIn = params.get('openIn');\n+\tif (!openIn) {\n+\t\treturn;\n+\t}\n+\tconst outputId = params.get('outputId') ?? undefined;\n+\tconst cellFragment = uri.fragment ?? undefined;\n+\tconst outputIndex = params.get('outputIndex') ? parseInt(params.get('outputIndex') || '', 10) : undefined;",
        "comment_created_at": "2025-03-25T02:39:22+00:00",
        "comment_author": "DonJayamanne",
        "comment_body": "Lets get this PR out for TPI, \r\nplease can you file an issue for debt week to fix this, else we'd end up with issues if we ever make a change in one of the two places and not the other (i.e. usual problems that arise from duplicating)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849103130",
    "pr_number": 234220,
    "pr_file": "src/vs/workbench/contrib/chat/browser/chatInputPart.ts",
    "created_at": "2024-11-19T21:52:49+00:00",
    "commented_code": "// Render as attachments anything that isn't a file, but still render specific ranges in a file\n \t\t\t? [...this.attachmentModel.attachments.entries()].filter(([_, attachment]) => !attachment.isFile || attachment.isFile && typeof attachment.value === 'object' && !!attachment.value && 'range' in attachment.value)\n \t\t\t: [...this.attachmentModel.attachments.entries()];\n-\t\tdom.setVisibility(Boolean(attachments.length) || Boolean(this.implicitContext?.value), this.attachedContextContainer);\n+\t\tdom.setVisibility(Boolean(attachments.length) || Boolean(this._implicitContext?.value), this.attachedContextContainer);\n \t\tif (!attachments.length) {\n \t\t\tthis._indexOfLastAttachedContextDeletedWithKeyboard = -1;\n \t\t}\n \n-\t\tif (this.implicitContext?.value) {\n-\t\t\tconst implicitPart = store.add(this.instantiationService.createInstance(ImplicitContextAttachmentWidget, this.implicitContext, this._contextResourceLabels));\n+\t\tif (this._implicitContext?.value) {\n+\t\t\tconst implicitPart = store.add(this.instantiationService.createInstance(",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1849103130",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/workbench/contrib/chat/browser/chatInputPart.ts",
        "discussion_id": "1849103130",
        "commented_code": "@@ -755,13 +772,17 @@ export class ChatInputPart extends Disposable implements IHistoryNavigationWidge\n \t\t\t// Render as attachments anything that isn't a file, but still render specific ranges in a file\n \t\t\t? [...this.attachmentModel.attachments.entries()].filter(([_, attachment]) => !attachment.isFile || attachment.isFile && typeof attachment.value === 'object' && !!attachment.value && 'range' in attachment.value)\n \t\t\t: [...this.attachmentModel.attachments.entries()];\n-\t\tdom.setVisibility(Boolean(attachments.length) || Boolean(this.implicitContext?.value), this.attachedContextContainer);\n+\t\tdom.setVisibility(Boolean(attachments.length) || Boolean(this._implicitContext?.value), this.attachedContextContainer);\n \t\tif (!attachments.length) {\n \t\t\tthis._indexOfLastAttachedContextDeletedWithKeyboard = -1;\n \t\t}\n \n-\t\tif (this.implicitContext?.value) {\n-\t\t\tconst implicitPart = store.add(this.instantiationService.createInstance(ImplicitContextAttachmentWidget, this.implicitContext, this._contextResourceLabels));\n+\t\tif (this._implicitContext?.value) {\n+\t\t\tconst implicitPart = store.add(this.instantiationService.createInstance(",
        "comment_created_at": "2024-11-19T21:52:49+00:00",
        "comment_author": "legomushroom",
        "comment_body": "Put params on separate lines only to improve readability.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1850004804",
    "pr_number": 234220,
    "pr_file": "src/vs/workbench/common/codecs/chatbotPromptCodec/tokens/fileReference.ts",
    "created_at": "2024-11-20T10:04:04+00:00",
    "commented_code": "+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { BaseToken } from '../../baseToken.js';\n+import { Word } from '../../simpleCodec/tokens/index.js';\n+import { assert } from '../../../../../base/common/assert.js';\n+import { Range } from '../../../../../editor/common/core/range.js';\n+\n+// Start sequence for a file reference token in a prompt.\n+const TOKEN_START: string = '#file:';\n+\n+/**\n+ * A file reference token inside a prompt.\n+ */\n+export class FileReference extends BaseToken {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1850004804",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/workbench/common/codecs/chatbotPromptCodec/tokens/fileReference.ts",
        "discussion_id": "1850004804",
        "commented_code": "@@ -0,0 +1,94 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { BaseToken } from '../../baseToken.js';\n+import { Word } from '../../simpleCodec/tokens/index.js';\n+import { assert } from '../../../../../base/common/assert.js';\n+import { Range } from '../../../../../editor/common/core/range.js';\n+\n+// Start sequence for a file reference token in a prompt.\n+const TOKEN_START: string = '#file:';\n+\n+/**\n+ * A file reference token inside a prompt.\n+ */\n+export class FileReference extends BaseToken {",
        "comment_created_at": "2024-11-20T10:04:04+00:00",
        "comment_author": "roblourens",
        "comment_body": "I'm not sure `workbench/common` is the right place for these files, it all seems specific to the chat feature, so should it stay under `workbench/contrib/chat/...`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1854324932",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/workbench/common/codecs/chatbotPromptCodec/tokens/fileReference.ts",
        "discussion_id": "1850004804",
        "commented_code": "@@ -0,0 +1,94 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { BaseToken } from '../../baseToken.js';\n+import { Word } from '../../simpleCodec/tokens/index.js';\n+import { assert } from '../../../../../base/common/assert.js';\n+import { Range } from '../../../../../editor/common/core/range.js';\n+\n+// Start sequence for a file reference token in a prompt.\n+const TOKEN_START: string = '#file:';\n+\n+/**\n+ * A file reference token inside a prompt.\n+ */\n+export class FileReference extends BaseToken {",
        "comment_created_at": "2024-11-22T17:13:57+00:00",
        "comment_author": "legomushroom",
        "comment_body": "Moved 👍 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1865025866",
    "pr_number": 234220,
    "pr_file": "src/vs/editor/common/codecs/baseToken.ts",
    "created_at": "2024-12-01T21:48:02+00:00",
    "commented_code": "+/*---------------------------------------------------------------------------------------------",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1865025866",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/editor/common/codecs/baseToken.ts",
        "discussion_id": "1865025866",
        "commented_code": "@@ -0,0 +1,57 @@\n+/*---------------------------------------------------------------------------------------------",
        "comment_created_at": "2024-12-01T21:48:02+00:00",
        "comment_author": "roblourens",
        "comment_body": "Why are these files in `editor/`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1866170516",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/editor/common/codecs/baseToken.ts",
        "discussion_id": "1865025866",
        "commented_code": "@@ -0,0 +1,57 @@\n+/*---------------------------------------------------------------------------------------------",
        "comment_created_at": "2024-12-02T16:31:35+00:00",
        "comment_author": "legomushroom",
        "comment_body": "They rely on the `Range` object which is part of the `editor` 🤷 That is the only dependency that keeps it under the `/editor` folder.",
        "pr_file_module": null
      },
      {
        "comment_id": "1866210961",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/editor/common/codecs/baseToken.ts",
        "discussion_id": "1865025866",
        "commented_code": "@@ -0,0 +1,57 @@\n+/*---------------------------------------------------------------------------------------------",
        "comment_created_at": "2024-12-02T16:46:03+00:00",
        "comment_author": "roblourens",
        "comment_body": "We use Range all over the codebase. Only files related to the editor component should be in the editor folder",
        "pr_file_module": null
      },
      {
        "comment_id": "1866312059",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/editor/common/codecs/baseToken.ts",
        "discussion_id": "1865025866",
        "commented_code": "@@ -0,0 +1,57 @@\n+/*---------------------------------------------------------------------------------------------",
        "comment_created_at": "2024-12-02T17:40:21+00:00",
        "comment_author": "legomushroom",
        "comment_body": "Are you suggesting moving them under `/workbench`? I've put them to lowest possibile layer I believe. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1866390424",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/editor/common/codecs/baseToken.ts",
        "discussion_id": "1865025866",
        "commented_code": "@@ -0,0 +1,57 @@\n+/*---------------------------------------------------------------------------------------------",
        "comment_created_at": "2024-12-02T18:33:23+00:00",
        "comment_author": "roblourens",
        "comment_body": "I see, because otherwise they could be in `base`? Let's keep it in `workbench` for now. I think it makes more sense there because it's not used by the editor, it's only using an editor type, which lots of code does, but it's not part of the text editor component.",
        "pr_file_module": null
      }
    ]
  }
]