[
  {
    "discussion_id": "1626648230",
    "pr_number": 213511,
    "pr_file": "src/vs/workbench/api/node/extHostSearch.ts",
    "created_at": "2024-06-04T21:57:11+00:00",
    "commented_code": "private _internalFileSearchProvider: SearchService | null = null;\n \n \tprivate _registeredEHSearchProvider = false;\n+\tprivate _numThreadsPromise: Promise<number | undefined> = Promise.resolve(undefined);\n \n \tprivate readonly _disposables = new DisposableStore();\n \n \tconstructor(\n \t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n \t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n \t\t@IURITransformerService _uriTransformer: IURITransformerService,\n+\t\t@IExtHostConfiguration _configurationService: IExtHostConfiguration,\n \t\t@ILogService _logService: ILogService,\n \t) {\n \t\tsuper(extHostRpc, _uriTransformer, _logService);\n \n \t\tconst outputChannel = new OutputChannel('RipgrepSearchUD', this._logService);\n-\t\tthis._disposables.add(this.registerTextSearchProvider(Schemas.vscodeUserData, new RipgrepSearchProvider(outputChannel)));\n+\t\tthis._numThreadsPromise = _configurationService.getConfigProvider().then(provider => provider.getConfiguration('search').get<number>('ripgrep.numThreads'));",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1626648230",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 213511,
        "pr_file": "src/vs/workbench/api/node/extHostSearch.ts",
        "discussion_id": "1626648230",
        "commented_code": "@@ -28,19 +29,22 @@ export class NativeExtHostSearch extends ExtHostSearch implements IDisposable {\n \tprivate _internalFileSearchProvider: SearchService | null = null;\n \n \tprivate _registeredEHSearchProvider = false;\n+\tprivate _numThreadsPromise: Promise<number | undefined> = Promise.resolve(undefined);\n \n \tprivate readonly _disposables = new DisposableStore();\n \n \tconstructor(\n \t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n \t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n \t\t@IURITransformerService _uriTransformer: IURITransformerService,\n+\t\t@IExtHostConfiguration _configurationService: IExtHostConfiguration,\n \t\t@ILogService _logService: ILogService,\n \t) {\n \t\tsuper(extHostRpc, _uriTransformer, _logService);\n \n \t\tconst outputChannel = new OutputChannel('RipgrepSearchUD', this._logService);\n-\t\tthis._disposables.add(this.registerTextSearchProvider(Schemas.vscodeUserData, new RipgrepSearchProvider(outputChannel)));\n+\t\tthis._numThreadsPromise = _configurationService.getConfigProvider().then(provider => provider.getConfiguration('search').get<number>('ripgrep.numThreads'));",
        "comment_created_at": "2024-06-04T21:57:11+00:00",
        "comment_author": "andreamah",
        "comment_body": "I just tested this out, and it seems that it won't update correctly if I change the setting. This is probably because the configuration is initialized once here and isn't updated when changed. I think you should be able to listen to `onDidChangeConfiguration` on `ExtHostConfigProvider` to listen for this.",
        "pr_file_module": null
      },
      {
        "comment_id": "1627205659",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 213511,
        "pr_file": "src/vs/workbench/api/node/extHostSearch.ts",
        "discussion_id": "1626648230",
        "commented_code": "@@ -28,19 +29,22 @@ export class NativeExtHostSearch extends ExtHostSearch implements IDisposable {\n \tprivate _internalFileSearchProvider: SearchService | null = null;\n \n \tprivate _registeredEHSearchProvider = false;\n+\tprivate _numThreadsPromise: Promise<number | undefined> = Promise.resolve(undefined);\n \n \tprivate readonly _disposables = new DisposableStore();\n \n \tconstructor(\n \t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n \t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n \t\t@IURITransformerService _uriTransformer: IURITransformerService,\n+\t\t@IExtHostConfiguration _configurationService: IExtHostConfiguration,\n \t\t@ILogService _logService: ILogService,\n \t) {\n \t\tsuper(extHostRpc, _uriTransformer, _logService);\n \n \t\tconst outputChannel = new OutputChannel('RipgrepSearchUD', this._logService);\n-\t\tthis._disposables.add(this.registerTextSearchProvider(Schemas.vscodeUserData, new RipgrepSearchProvider(outputChannel)));\n+\t\tthis._numThreadsPromise = _configurationService.getConfigProvider().then(provider => provider.getConfiguration('search').get<number>('ripgrep.numThreads'));",
        "comment_created_at": "2024-06-05T08:03:01+00:00",
        "comment_author": "SimonSiefke",
        "comment_body": "Good point! I changed it to read the configuration value when the search starts so that always the latest configuration value is used. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1628211454",
    "pr_number": 213511,
    "pr_file": "src/vs/workbench/api/node/extHostSearch.ts",
    "created_at": "2024-06-05T18:12:26+00:00",
    "commented_code": "@IExtHostRpcService extHostRpc: IExtHostRpcService,\n \t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n \t\t@IURITransformerService _uriTransformer: IURITransformerService,\n+\t\t@IExtHostConfiguration private readonly configurationService: IExtHostConfiguration,\n \t\t@ILogService _logService: ILogService,\n \t) {\n \t\tsuper(extHostRpc, _uriTransformer, _logService);\n-\n+\t\tthis.getNumThreads = this.getNumThreads.bind(this);\n \t\tconst outputChannel = new OutputChannel('RipgrepSearchUD', this._logService);\n-\t\tthis._disposables.add(this.registerTextSearchProvider(Schemas.vscodeUserData, new RipgrepSearchProvider(outputChannel)));\n+\t\tthis._disposables.add(this.registerTextSearchProvider(Schemas.vscodeUserData, new RipgrepSearchProvider(outputChannel, this.getNumThreads)));\n \t\tif (initData.remote.isRemote && initData.remote.authority) {\n \t\t\tthis._registerEHSearchProviders();\n \t\t}\n \t}\n \n+\tasync getNumThreads(): Promise<number | undefined> {\n+\t\tconst configProvider = await this.configurationService.getConfigProvider();",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1628211454",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 213511,
        "pr_file": "src/vs/workbench/api/node/extHostSearch.ts",
        "discussion_id": "1628211454",
        "commented_code": "@@ -35,17 +36,24 @@ export class NativeExtHostSearch extends ExtHostSearch implements IDisposable {\n \t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n \t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n \t\t@IURITransformerService _uriTransformer: IURITransformerService,\n+\t\t@IExtHostConfiguration private readonly configurationService: IExtHostConfiguration,\n \t\t@ILogService _logService: ILogService,\n \t) {\n \t\tsuper(extHostRpc, _uriTransformer, _logService);\n-\n+\t\tthis.getNumThreads = this.getNumThreads.bind(this);\n \t\tconst outputChannel = new OutputChannel('RipgrepSearchUD', this._logService);\n-\t\tthis._disposables.add(this.registerTextSearchProvider(Schemas.vscodeUserData, new RipgrepSearchProvider(outputChannel)));\n+\t\tthis._disposables.add(this.registerTextSearchProvider(Schemas.vscodeUserData, new RipgrepSearchProvider(outputChannel, this.getNumThreads)));\n \t\tif (initData.remote.isRemote && initData.remote.authority) {\n \t\t\tthis._registerEHSearchProviders();\n \t\t}\n \t}\n \n+\tasync getNumThreads(): Promise<number | undefined> {\n+\t\tconst configProvider = await this.configurationService.getConfigProvider();",
        "comment_created_at": "2024-06-05T18:12:26+00:00",
        "comment_author": "andreamah",
        "comment_body": "Rather than querying the configuration service for every time we search, I think that using storing the `numThreads` as a property and using the configProvider once to listen to `onDidChangeConfiguration` and using `affectsConfiguration` on the event would be more efficient. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009174484",
    "pr_number": 244315,
    "pr_file": "src/vs/workbench/services/policies/common/multiplexPolicyService.ts",
    "created_at": "2025-03-23T17:29:36+00:00",
    "commented_code": "+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { IStringDictionary } from '../../../../base/common/collections.js';\n+import { PolicyName } from '../../../../base/common/policy.js';\n+import { ILogService } from '../../../../platform/log/common/log.js';\n+import { AbstractPolicyService, IPolicyService, PolicyDefinition } from '../../../../platform/policy/common/policy.js';\n+\n+export class MultiplexPolicyService extends AbstractPolicyService implements IPolicyService {\n+\n+\tconstructor(\n+\t\tprivate readonly policyServices: ReadonlyArray<IPolicyService>,\n+\t\t@ILogService private readonly logService: ILogService,\n+\t) {\n+\t\tsuper();\n+\n+\t\t// Forward policy changes from child services\n+\t\tfor (const service of policyServices) {\n+\t\t\tthis._register(service.onDidChange(names => this.onDidChangePolicies(names, service)));\n+\t\t}\n+\t}\n+\n+\tprotected async _updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<void> {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2009174484",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 244315,
        "pr_file": "src/vs/workbench/services/policies/common/multiplexPolicyService.ts",
        "discussion_id": "2009174484",
        "commented_code": "@@ -0,0 +1,51 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { IStringDictionary } from '../../../../base/common/collections.js';\n+import { PolicyName } from '../../../../base/common/policy.js';\n+import { ILogService } from '../../../../platform/log/common/log.js';\n+import { AbstractPolicyService, IPolicyService, PolicyDefinition } from '../../../../platform/policy/common/policy.js';\n+\n+export class MultiplexPolicyService extends AbstractPolicyService implements IPolicyService {\n+\n+\tconstructor(\n+\t\tprivate readonly policyServices: ReadonlyArray<IPolicyService>,\n+\t\t@ILogService private readonly logService: ILogService,\n+\t) {\n+\t\tsuper();\n+\n+\t\t// Forward policy changes from child services\n+\t\tfor (const service of policyServices) {\n+\t\t\tthis._register(service.onDidChange(names => this.onDidChangePolicies(names, service)));\n+\t\t}\n+\t}\n+\n+\tprotected async _updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<void> {",
        "comment_created_at": "2025-03-23T17:29:36+00:00",
        "comment_author": "sandy081",
        "comment_body": "I am not sure if this service is implemented properly. Where are we initialising this service with initial policy values?",
        "pr_file_module": null
      },
      {
        "comment_id": "2009175422",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 244315,
        "pr_file": "src/vs/workbench/services/policies/common/multiplexPolicyService.ts",
        "discussion_id": "2009174484",
        "commented_code": "@@ -0,0 +1,51 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { IStringDictionary } from '../../../../base/common/collections.js';\n+import { PolicyName } from '../../../../base/common/policy.js';\n+import { ILogService } from '../../../../platform/log/common/log.js';\n+import { AbstractPolicyService, IPolicyService, PolicyDefinition } from '../../../../platform/policy/common/policy.js';\n+\n+export class MultiplexPolicyService extends AbstractPolicyService implements IPolicyService {\n+\n+\tconstructor(\n+\t\tprivate readonly policyServices: ReadonlyArray<IPolicyService>,\n+\t\t@ILogService private readonly logService: ILogService,\n+\t) {\n+\t\tsuper();\n+\n+\t\t// Forward policy changes from child services\n+\t\tfor (const service of policyServices) {\n+\t\t\tthis._register(service.onDidChange(names => this.onDidChangePolicies(names, service)));\n+\t\t}\n+\t}\n+\n+\tprotected async _updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<void> {",
        "comment_created_at": "2025-03-23T17:33:54+00:00",
        "comment_author": "joshspicer",
        "comment_body": "Wouldn't it be in https://github.com/microsoft/vscode/blob/5f0269a4c9bc731eb9161340d8a1377fb130e88e/src/vs/platform/policy/common/policy.ts#L41-L42, via https://github.com/microsoft/vscode/blob/5f0269a4c9bc731eb9161340d8a1377fb130e88e/src/vs/platform/configuration/common/configurations.ts#L149-L150\r\n\r\nSo for extensions it would get configured here once the extension loads in:\r\nhttps://github.com/microsoft/vscode/blob/5f0269a4c9bc731eb9161340d8a1377fb130e88e/src/vs/platform/configuration/common/configurations.ts#L115-L116",
        "pr_file_module": null
      },
      {
        "comment_id": "2009890283",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 244315,
        "pr_file": "src/vs/workbench/services/policies/common/multiplexPolicyService.ts",
        "discussion_id": "2009174484",
        "commented_code": "@@ -0,0 +1,51 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { IStringDictionary } from '../../../../base/common/collections.js';\n+import { PolicyName } from '../../../../base/common/policy.js';\n+import { ILogService } from '../../../../platform/log/common/log.js';\n+import { AbstractPolicyService, IPolicyService, PolicyDefinition } from '../../../../platform/policy/common/policy.js';\n+\n+export class MultiplexPolicyService extends AbstractPolicyService implements IPolicyService {\n+\n+\tconstructor(\n+\t\tprivate readonly policyServices: ReadonlyArray<IPolicyService>,\n+\t\t@ILogService private readonly logService: ILogService,\n+\t) {\n+\t\tsuper();\n+\n+\t\t// Forward policy changes from child services\n+\t\tfor (const service of policyServices) {\n+\t\t\tthis._register(service.onDidChange(names => this.onDidChangePolicies(names, service)));\n+\t\t}\n+\t}\n+\n+\tprotected async _updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<void> {",
        "comment_created_at": "2025-03-24T10:26:20+00:00",
        "comment_author": "sandy081",
        "comment_body": "I mean, every policy service has initial state [here](https://github.com/microsoft/vscode/blob/38e2bc4e6813e9f7ec0ae9b8b4ea5d9fa71d2bc9/src/vs/platform/policy/common/policy.ts#L30-L31). This means, native policy service has initial policy definitions and policy values, similarly for default account policy service. So, multiplex policy service should contain the initial state. For example, if I ask for policy value immediately after creating it, I should get the value defined in the native policy service or account policy service. I see this is missing right now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009879005",
    "pr_number": 244315,
    "pr_file": "src/vs/workbench/services/policies/common/accountPolicyService.ts",
    "created_at": "2025-03-24T10:19:40+00:00",
    "commented_code": "+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { IStringDictionary } from '../../../../base/common/collections.js';\n+import { ILogService } from '../../../../platform/log/common/log.js';\n+import { AbstractPolicyService, IPolicyService, PolicyDefinition } from '../../../../platform/policy/common/policy.js';\n+import { DefaultAccountService, IDefaultAccountService } from '../../accounts/common/defaultAccount.js';\n+\n+export class AccountPolicyService extends AbstractPolicyService implements IPolicyService {\n+\tprivate chatPreviewFeaturesEnabled: boolean = true;\n+\tconstructor(\n+\t\t@ILogService private readonly logService: ILogService,\n+\t\t@IDefaultAccountService private readonly defaultAccountService: DefaultAccountService\n+\t) {\n+\t\tsuper();\n+\t\tthis._register(this.defaultAccountService.onDidChangeDefaultAccount((account) => {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2009879005",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 244315,
        "pr_file": "src/vs/workbench/services/policies/common/accountPolicyService.ts",
        "discussion_id": "2009879005",
        "commented_code": "@@ -0,0 +1,49 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { IStringDictionary } from '../../../../base/common/collections.js';\n+import { ILogService } from '../../../../platform/log/common/log.js';\n+import { AbstractPolicyService, IPolicyService, PolicyDefinition } from '../../../../platform/policy/common/policy.js';\n+import { DefaultAccountService, IDefaultAccountService } from '../../accounts/common/defaultAccount.js';\n+\n+export class AccountPolicyService extends AbstractPolicyService implements IPolicyService {\n+\tprivate chatPreviewFeaturesEnabled: boolean = true;\n+\tconstructor(\n+\t\t@ILogService private readonly logService: ILogService,\n+\t\t@IDefaultAccountService private readonly defaultAccountService: DefaultAccountService\n+\t) {\n+\t\tsuper();\n+\t\tthis._register(this.defaultAccountService.onDidChangeDefaultAccount((account) => {",
        "comment_created_at": "2025-03-24T10:19:40+00:00",
        "comment_author": "sandy081",
        "comment_body": "Are we missing initialisation here? What if the default account is already available? Then, there wont be a change event triggered for default account change.",
        "pr_file_module": null
      },
      {
        "comment_id": "2010749393",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 244315,
        "pr_file": "src/vs/workbench/services/policies/common/accountPolicyService.ts",
        "discussion_id": "2009879005",
        "commented_code": "@@ -0,0 +1,49 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { IStringDictionary } from '../../../../base/common/collections.js';\n+import { ILogService } from '../../../../platform/log/common/log.js';\n+import { AbstractPolicyService, IPolicyService, PolicyDefinition } from '../../../../platform/policy/common/policy.js';\n+import { DefaultAccountService, IDefaultAccountService } from '../../accounts/common/defaultAccount.js';\n+\n+export class AccountPolicyService extends AbstractPolicyService implements IPolicyService {\n+\tprivate chatPreviewFeaturesEnabled: boolean = true;\n+\tconstructor(\n+\t\t@ILogService private readonly logService: ILogService,\n+\t\t@IDefaultAccountService private readonly defaultAccountService: DefaultAccountService\n+\t) {\n+\t\tsuper();\n+\t\tthis._register(this.defaultAccountService.onDidChangeDefaultAccount((account) => {",
        "comment_created_at": "2025-03-24T18:48:21+00:00",
        "comment_author": "joshspicer",
        "comment_body": "added usage of `this.defaultAccountService.getDefaultAccount()`",
        "pr_file_module": null
      }
    ]
  }
]