[
  {
    "discussion_id": "2135800642",
    "pr_number": 250018,
    "pr_file": "src/vscode-dts/vscode.proposed.chatProvider.d.ts",
    "created_at": "2025-06-09T14:11:19+00:00",
    "commented_code": "provideTokenCount(model: LanguageModelChatData, text: string | LanguageModelChatMessage | LanguageModelChatMessage2, token: CancellationToken): Thenable<number>;\n \t}\n \n+\texport enum LanguageModelRequestInitiatorKind {\n+\t\t/**\n+\t\t * Used when an extension is making a request to the language model.\n+\t\t */\n+\t\tExtension = 1,\n+\t\t/**\n+\t\t * Used when an MCP server is making a request to the language model.\n+\t\t */\n+\t\tMcpServer = 2,\n+\n+\t\t/**\n+\t\t * Used when an editor feature is causing the request to be made.\n+\t\t */\n+\t\tEditor = 3,\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from an extension.\n+\t */\n+\texport interface ExtensionLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.Extension;\n+\t\t/**\n+\t\t * ID of the extension making the request.\n+\t\t */\n+\t\textensionId: string;\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from a Model Context Protocol server.\n+\t */\n+\texport interface McpServerLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.McpServer;\n+\t\t/**\n+\t\t * User-defined label of the MCP server.\n+\t\t */\n+\t\tlabel: string;\n+\t\t/**\n+\t\t * Unique ID for the MCP server when retrieved from a registry.\n+\t\t */\n+\t\tid?: string;\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from an internal editor feature.\n+\t */\n+\texport interface InternalLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.Editor;\n+\t\t/**\n+\t\t * A unique, opaque reason for the request. This string is not localized\n+\t\t * and `reason`s may change between versions of the editor.\n+\t\t */\n+\t\treason: string;\n+\t}\n+\n+\texport type LanguageModelRequestInitiator = ExtensionLanguageModelRequestInitiator | McpServerLanguageModelRequestInitiator | InternalLanguageModelRequestInitiator;",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2135800642",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 250018,
        "pr_file": "src/vscode-dts/vscode.proposed.chatProvider.d.ts",
        "discussion_id": "2135800642",
        "commented_code": "@@ -29,15 +31,83 @@ declare module 'vscode' {\n \t\tprovideTokenCount(model: LanguageModelChatData, text: string | LanguageModelChatMessage | LanguageModelChatMessage2, token: CancellationToken): Thenable<number>;\n \t}\n \n+\texport enum LanguageModelRequestInitiatorKind {\n+\t\t/**\n+\t\t * Used when an extension is making a request to the language model.\n+\t\t */\n+\t\tExtension = 1,\n+\t\t/**\n+\t\t * Used when an MCP server is making a request to the language model.\n+\t\t */\n+\t\tMcpServer = 2,\n+\n+\t\t/**\n+\t\t * Used when an editor feature is causing the request to be made.\n+\t\t */\n+\t\tEditor = 3,\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from an extension.\n+\t */\n+\texport interface ExtensionLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.Extension;\n+\t\t/**\n+\t\t * ID of the extension making the request.\n+\t\t */\n+\t\textensionId: string;\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from a Model Context Protocol server.\n+\t */\n+\texport interface McpServerLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.McpServer;\n+\t\t/**\n+\t\t * User-defined label of the MCP server.\n+\t\t */\n+\t\tlabel: string;\n+\t\t/**\n+\t\t * Unique ID for the MCP server when retrieved from a registry.\n+\t\t */\n+\t\tid?: string;\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from an internal editor feature.\n+\t */\n+\texport interface InternalLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.Editor;\n+\t\t/**\n+\t\t * A unique, opaque reason for the request. This string is not localized\n+\t\t * and `reason`s may change between versions of the editor.\n+\t\t */\n+\t\treason: string;\n+\t}\n+\n+\texport type LanguageModelRequestInitiator = ExtensionLanguageModelRequestInitiator | McpServerLanguageModelRequestInitiator | InternalLanguageModelRequestInitiator;",
        "comment_created_at": "2025-06-09T14:11:19+00:00",
        "comment_author": "jrieken",
        "comment_body": "In the API we don't do kind-discriminated or-types but plain simple classes, like [`InlineValue`](https://github.com/microsoft/vscode/blob/5e8f6f2bb4f5302e4c34c273a5d35a552c583fd6/src/vscode-dts/vscode.d.ts#L3257). I think we have two options: \n\n* have different initiators be represented as classes, or\n* have one fits-all initiator which has the `kind`-attribute and something generic like identifier",
        "pr_file_module": null
      },
      {
        "comment_id": "2136190682",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 250018,
        "pr_file": "src/vscode-dts/vscode.proposed.chatProvider.d.ts",
        "discussion_id": "2135800642",
        "commented_code": "@@ -29,15 +31,83 @@ declare module 'vscode' {\n \t\tprovideTokenCount(model: LanguageModelChatData, text: string | LanguageModelChatMessage | LanguageModelChatMessage2, token: CancellationToken): Thenable<number>;\n \t}\n \n+\texport enum LanguageModelRequestInitiatorKind {\n+\t\t/**\n+\t\t * Used when an extension is making a request to the language model.\n+\t\t */\n+\t\tExtension = 1,\n+\t\t/**\n+\t\t * Used when an MCP server is making a request to the language model.\n+\t\t */\n+\t\tMcpServer = 2,\n+\n+\t\t/**\n+\t\t * Used when an editor feature is causing the request to be made.\n+\t\t */\n+\t\tEditor = 3,\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from an extension.\n+\t */\n+\texport interface ExtensionLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.Extension;\n+\t\t/**\n+\t\t * ID of the extension making the request.\n+\t\t */\n+\t\textensionId: string;\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from a Model Context Protocol server.\n+\t */\n+\texport interface McpServerLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.McpServer;\n+\t\t/**\n+\t\t * User-defined label of the MCP server.\n+\t\t */\n+\t\tlabel: string;\n+\t\t/**\n+\t\t * Unique ID for the MCP server when retrieved from a registry.\n+\t\t */\n+\t\tid?: string;\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from an internal editor feature.\n+\t */\n+\texport interface InternalLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.Editor;\n+\t\t/**\n+\t\t * A unique, opaque reason for the request. This string is not localized\n+\t\t * and `reason`s may change between versions of the editor.\n+\t\t */\n+\t\treason: string;\n+\t}\n+\n+\texport type LanguageModelRequestInitiator = ExtensionLanguageModelRequestInitiator | McpServerLanguageModelRequestInitiator | InternalLanguageModelRequestInitiator;",
        "comment_created_at": "2025-06-09T17:49:24+00:00",
        "comment_author": "connor4312",
        "comment_body": "The one case I was looking at was quickpick items vs separators that have a `kind` like we have here. The only reason I didn't do classes is that there's no reason for an extension to instantiate these types, but that could also be done with a protected or private constructor.",
        "pr_file_module": null
      },
      {
        "comment_id": "2136241939",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 250018,
        "pr_file": "src/vscode-dts/vscode.proposed.chatProvider.d.ts",
        "discussion_id": "2135800642",
        "commented_code": "@@ -29,15 +31,83 @@ declare module 'vscode' {\n \t\tprovideTokenCount(model: LanguageModelChatData, text: string | LanguageModelChatMessage | LanguageModelChatMessage2, token: CancellationToken): Thenable<number>;\n \t}\n \n+\texport enum LanguageModelRequestInitiatorKind {\n+\t\t/**\n+\t\t * Used when an extension is making a request to the language model.\n+\t\t */\n+\t\tExtension = 1,\n+\t\t/**\n+\t\t * Used when an MCP server is making a request to the language model.\n+\t\t */\n+\t\tMcpServer = 2,\n+\n+\t\t/**\n+\t\t * Used when an editor feature is causing the request to be made.\n+\t\t */\n+\t\tEditor = 3,\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from an extension.\n+\t */\n+\texport interface ExtensionLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.Extension;\n+\t\t/**\n+\t\t * ID of the extension making the request.\n+\t\t */\n+\t\textensionId: string;\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from a Model Context Protocol server.\n+\t */\n+\texport interface McpServerLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.McpServer;\n+\t\t/**\n+\t\t * User-defined label of the MCP server.\n+\t\t */\n+\t\tlabel: string;\n+\t\t/**\n+\t\t * Unique ID for the MCP server when retrieved from a registry.\n+\t\t */\n+\t\tid?: string;\n+\t}\n+\n+\t/**\n+\t * Passed to {@link LanguageModelChatProvider.provideLanguageModelResponse}\n+\t * when it is being called from an internal editor feature.\n+\t */\n+\texport interface InternalLanguageModelRequestInitiator {\n+\t\t/**\n+\t\t * The kind of initiator making the request.\n+\t\t */\n+\t\tkind: LanguageModelRequestInitiatorKind.Editor;\n+\t\t/**\n+\t\t * A unique, opaque reason for the request. This string is not localized\n+\t\t * and `reason`s may change between versions of the editor.\n+\t\t */\n+\t\treason: string;\n+\t}\n+\n+\texport type LanguageModelRequestInitiator = ExtensionLanguageModelRequestInitiator | McpServerLanguageModelRequestInitiator | InternalLanguageModelRequestInitiator;",
        "comment_created_at": "2025-06-09T18:25:42+00:00",
        "comment_author": "jrieken",
        "comment_body": "yikes that quick pick. tho, it is same, same but different. there is no or-type. just a single type that's different depending on the value of kind. That's something we can have too (basically my 2nd suggestion)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2035530498",
    "pr_number": 246016,
    "pr_file": "src/vscode-dts/vscode.d.ts",
    "created_at": "2025-04-09T14:40:48+00:00",
    "commented_code": "* Event that fires when the current workspace has been trusted.\n \t\t */\n \t\texport const onDidGrantWorkspaceTrust: Event<void>;\n+\n+\t\t/**\n+\t\t * Decodes the content from a `Uint8Array` to a `string`. You MUST\n+\t\t * provide the entire content at once to ensure that the encoding\n+\t\t * can properly apply. Do not use this method to decode content\n+\t\t * in chunks, as that may lead to incorrect results.\n+\t\t *\n+\t\t * If no encoding is provided, will try to pick an encoding based\n+\t\t * on settings and the content of the buffer (for example byte order\n+\t\t * marks).\n+\t\t *\n+\t\t * *Note* that if you decode content that is unsupported by the\n+\t\t * encoding, the result may contain substitution characters as\n+\t\t * appropriate.\n+\t\t *\n+\t\t * @throws This method will throw an error when the content is binary.\n+\t\t *\n+\t\t * @param content The text content to decode as a `Uint8Array`.\n+\t\t * @param options Additional context for picking the encoding.\n+\t\t * @returns A thenable that resolves to the decoded `string`.\n+\t\t */\n+\t\texport function decode(content: Uint8Array, options: {\n+\t\t\t/**\n+\t\t\t * Allows to explicitly pick the encoding to use.\n+\t\t\t * See {@link TextDocument.encoding} for more information\n+\t\t\t * about valid values for encoding.\n+\t\t\t */\n+\t\t\treadonly encoding: string;\n+\t\t}): Thenable<string>;\n+\n+\t\t/**\n+\t\t * Decodes the content from a `Uint8Array` to a `string`. You MUST\n+\t\t * provide the entire content at once to ensure that the encoding\n+\t\t * can properly apply. Do not use this method to decode content\n+\t\t * in chunks, as that may lead to incorrect results.\n+\t\t *\n+\t\t * The encoding is picked based on settings and the content\n+\t\t * of the buffer (for example byte order marks).\n+\t\t *\n+\t\t * *Note* that if you decode content that is unsupported by the\n+\t\t * encoding, the result may contain substitution characters as\n+\t\t * appropriate.\n+\t\t *\n+\t\t * @throws This method will throw an error when the content is binary.\n+\t\t *\n+\t\t * @param content The content to decode as a `Uint8Array`.\n+\t\t * @param options Additional context for picking the encoding.\n+\t\t * @returns A thenable that resolves to the decoded `string`.\n+\t\t */\n+\t\texport function decode(content: Uint8Array, options: {\n+\t\t\t/**\n+\t\t\t * The URI that represents the file if known. This information\n+\t\t\t * is used to figure out the encoding related configuration\n+\t\t\t * for the file if any.\n+\t\t\t */\n+\t\t\treadonly uri: Uri | undefined;",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2035530498",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 246016,
        "pr_file": "src/vscode-dts/vscode.d.ts",
        "discussion_id": "2035530498",
        "commented_code": "@@ -14303,6 +14373,100 @@ declare module 'vscode' {\n \t\t * Event that fires when the current workspace has been trusted.\n \t\t */\n \t\texport const onDidGrantWorkspaceTrust: Event<void>;\n+\n+\t\t/**\n+\t\t * Decodes the content from a `Uint8Array` to a `string`. You MUST\n+\t\t * provide the entire content at once to ensure that the encoding\n+\t\t * can properly apply. Do not use this method to decode content\n+\t\t * in chunks, as that may lead to incorrect results.\n+\t\t *\n+\t\t * If no encoding is provided, will try to pick an encoding based\n+\t\t * on settings and the content of the buffer (for example byte order\n+\t\t * marks).\n+\t\t *\n+\t\t * *Note* that if you decode content that is unsupported by the\n+\t\t * encoding, the result may contain substitution characters as\n+\t\t * appropriate.\n+\t\t *\n+\t\t * @throws This method will throw an error when the content is binary.\n+\t\t *\n+\t\t * @param content The text content to decode as a `Uint8Array`.\n+\t\t * @param options Additional context for picking the encoding.\n+\t\t * @returns A thenable that resolves to the decoded `string`.\n+\t\t */\n+\t\texport function decode(content: Uint8Array, options: {\n+\t\t\t/**\n+\t\t\t * Allows to explicitly pick the encoding to use.\n+\t\t\t * See {@link TextDocument.encoding} for more information\n+\t\t\t * about valid values for encoding.\n+\t\t\t */\n+\t\t\treadonly encoding: string;\n+\t\t}): Thenable<string>;\n+\n+\t\t/**\n+\t\t * Decodes the content from a `Uint8Array` to a `string`. You MUST\n+\t\t * provide the entire content at once to ensure that the encoding\n+\t\t * can properly apply. Do not use this method to decode content\n+\t\t * in chunks, as that may lead to incorrect results.\n+\t\t *\n+\t\t * The encoding is picked based on settings and the content\n+\t\t * of the buffer (for example byte order marks).\n+\t\t *\n+\t\t * *Note* that if you decode content that is unsupported by the\n+\t\t * encoding, the result may contain substitution characters as\n+\t\t * appropriate.\n+\t\t *\n+\t\t * @throws This method will throw an error when the content is binary.\n+\t\t *\n+\t\t * @param content The content to decode as a `Uint8Array`.\n+\t\t * @param options Additional context for picking the encoding.\n+\t\t * @returns A thenable that resolves to the decoded `string`.\n+\t\t */\n+\t\texport function decode(content: Uint8Array, options: {\n+\t\t\t/**\n+\t\t\t * The URI that represents the file if known. This information\n+\t\t\t * is used to figure out the encoding related configuration\n+\t\t\t * for the file if any.\n+\t\t\t */\n+\t\t\treadonly uri: Uri | undefined;",
        "comment_created_at": "2025-04-09T14:40:48+00:00",
        "comment_author": "jrieken",
        "comment_body": "I would prefer not to force folks to write undefined. It doesn't feel JavaScript'ish which is something the API wants to be. Let's have\r\n\r\n```\r\ndecode(content, option: { uri });\r\ndecode(content, option: { encoding });\r\ndecode(content);\r\n```\r\n\r\nsame for encode",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1850000330",
    "pr_number": 234220,
    "pr_file": "src/vs/workbench/contrib/chat/browser/chatWidget.ts",
    "created_at": "2024-11-20T10:01:10+00:00",
    "commented_code": "this.telemetryService.publicLog2<ChatEditingWorkingSetEvent, ChatEditingWorkingSetClassification>('chatEditing/workingSetSize', { originalSize: this.inputPart.attemptedWorkingSetEntriesCount, actualSize: uniqueWorkingSetEntries.size });\n \t\t\t}\n \n+\t\t\t// factor in nested references of dynamic variables into the implicit attached context\n+\t\t\tconst variableModel = this.getContrib<ChatDynamicVariableModel>(ChatDynamicVariableModel.ID);",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1850000330",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/workbench/contrib/chat/browser/chatWidget.ts",
        "discussion_id": "1850000330",
        "commented_code": "@@ -1046,6 +1065,29 @@ export class ChatWidget extends Disposable implements IChatWidget {\n \t\t\t\tthis.telemetryService.publicLog2<ChatEditingWorkingSetEvent, ChatEditingWorkingSetClassification>('chatEditing/workingSetSize', { originalSize: this.inputPart.attemptedWorkingSetEntriesCount, actualSize: uniqueWorkingSetEntries.size });\n \t\t\t}\n \n+\t\t\t// factor in nested references of dynamic variables into the implicit attached context\n+\t\t\tconst variableModel = this.getContrib<ChatDynamicVariableModel>(ChatDynamicVariableModel.ID);",
        "comment_created_at": "2024-11-20T10:01:10+00:00",
        "comment_author": "roblourens",
        "comment_body": "If the ChatWidget calls to a contrib directly, then it's no longer a \"contrib\". The point of that model is to have something that can implement a feature on top of an object using its public interface, but is totally decoupled from the object.",
        "pr_file_module": null
      },
      {
        "comment_id": "1850002627",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/workbench/contrib/chat/browser/chatWidget.ts",
        "discussion_id": "1850000330",
        "commented_code": "@@ -1046,6 +1065,29 @@ export class ChatWidget extends Disposable implements IChatWidget {\n \t\t\t\tthis.telemetryService.publicLog2<ChatEditingWorkingSetEvent, ChatEditingWorkingSetClassification>('chatEditing/workingSetSize', { originalSize: this.inputPart.attemptedWorkingSetEntriesCount, actualSize: uniqueWorkingSetEntries.size });\n \t\t\t}\n \n+\t\t\t// factor in nested references of dynamic variables into the implicit attached context\n+\t\t\tconst variableModel = this.getContrib<ChatDynamicVariableModel>(ChatDynamicVariableModel.ID);",
        "comment_created_at": "2024-11-20T10:02:40+00:00",
        "comment_author": "roblourens",
        "comment_body": "So either this should no longer be a 'contrib' or something else needs to change, I think I need to understand the overall thing better to decide.",
        "pr_file_module": null
      },
      {
        "comment_id": "1852683178",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/workbench/contrib/chat/browser/chatWidget.ts",
        "discussion_id": "1850000330",
        "commented_code": "@@ -1046,6 +1065,29 @@ export class ChatWidget extends Disposable implements IChatWidget {\n \t\t\t\tthis.telemetryService.publicLog2<ChatEditingWorkingSetEvent, ChatEditingWorkingSetClassification>('chatEditing/workingSetSize', { originalSize: this.inputPart.attemptedWorkingSetEntriesCount, actualSize: uniqueWorkingSetEntries.size });\n \t\t\t}\n \n+\t\t\t// factor in nested references of dynamic variables into the implicit attached context\n+\t\t\tconst variableModel = this.getContrib<ChatDynamicVariableModel>(ChatDynamicVariableModel.ID);",
        "comment_created_at": "2024-11-21T18:49:47+00:00",
        "comment_author": "legomushroom",
        "comment_body": "I needed to get to the `variables` list to extend the attached context with the resolved nested file references below.\r\nMaybe there is a better place of doing this, or a better place to add the nested file references to? 🤔 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1853110648",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/workbench/contrib/chat/browser/chatWidget.ts",
        "discussion_id": "1850000330",
        "commented_code": "@@ -1046,6 +1065,29 @@ export class ChatWidget extends Disposable implements IChatWidget {\n \t\t\t\tthis.telemetryService.publicLog2<ChatEditingWorkingSetEvent, ChatEditingWorkingSetClassification>('chatEditing/workingSetSize', { originalSize: this.inputPart.attemptedWorkingSetEntriesCount, actualSize: uniqueWorkingSetEntries.size });\n \t\t\t}\n \n+\t\t\t// factor in nested references of dynamic variables into the implicit attached context\n+\t\t\tconst variableModel = this.getContrib<ChatDynamicVariableModel>(ChatDynamicVariableModel.ID);",
        "comment_created_at": "2024-11-22T00:17:15+00:00",
        "comment_author": "legomushroom",
        "comment_body": "Moved to `ChatInputPart.getAttachedAndImplicitContext()` since we add the nested file references as an implicit context atm 🚀 Let me know if that works better.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2053641696",
    "pr_number": 246768,
    "pr_file": "src/vs/workbench/contrib/chat/browser/languageModelToolsService.ts",
    "created_at": "2025-04-22T08:46:08+00:00",
    "commented_code": "this._ctxToolsCount = ChatContextKeys.Tools.toolsCount.bindTo(_contextKeyService);\n \t}\n \n+\tacceptProgress(sessionId: string | undefined, callId: string, progress: IProgressStep): void {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2053641696",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 246768,
        "pr_file": "src/vs/workbench/contrib/chat/browser/languageModelToolsService.ts",
        "discussion_id": "2053641696",
        "commented_code": "@@ -91,6 +97,17 @@ export class LanguageModelToolsService extends Disposable implements ILanguageMo\n \t\tthis._ctxToolsCount = ChatContextKeys.Tools.toolsCount.bindTo(_contextKeyService);\n \t}\n \n+\tacceptProgress(sessionId: string | undefined, callId: string, progress: IProgressStep): void {",
        "comment_created_at": "2025-04-22T08:46:08+00:00",
        "comment_author": "jrieken",
        "comment_body": "This is not nice and looks like \"IPC leaks in to service interface\". I would expect that `invokeTool` must now be called with progress and that the \"accept-progress-bits-for-call\"-logic is something that's an implementation detail of `mainThreadLanguageModelTools`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "986115997",
    "pr_number": 150967,
    "pr_file": "src/vscode-dts/vscode.d.ts",
    "created_at": "2022-10-03T18:49:30+00:00",
    "commented_code": "* Is `undefined` if the reason is not known.\n \t\t*/\n \t\treadonly reason: TextDocumentChangeReason | undefined;\n+\n+\t\t/**\n+\t\t * Optional identifier of the top-most intent that triggered this event e.g. all editing operations\n+\t\t * triggered by user pasting text from clipboard will have \"paste\" source.\n+\t\t */\n+\t\treadonly source?: string | undefined;",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "986115997",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 150967,
        "pr_file": "src/vscode-dts/vscode.d.ts",
        "discussion_id": "986115997",
        "commented_code": "@@ -11229,6 +11229,12 @@ declare module 'vscode' {\n \t\t * Is `undefined` if the reason is not known.\n \t\t*/\n \t\treadonly reason: TextDocumentChangeReason | undefined;\n+\n+\t\t/**\n+\t\t * Optional identifier of the top-most intent that triggered this event e.g. all editing operations\n+\t\t * triggered by user pasting text from clipboard will have \"paste\" source.\n+\t\t */\n+\t\treadonly source?: string | undefined;",
        "comment_created_at": "2022-10-03T18:49:30+00:00",
        "comment_author": "jrieken",
        "comment_body": "We don't accept direct changes to the API, they must go through a proposal-process in which they are examined and discussed. See https://github.com/Microsoft/vscode/wiki/Extension-API-process for details. \r\n\r\nFor this particular case I see a conflict with `TextDocumentChangeReason` a few lines above. I believe it serves a similar/same intent ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2034472384",
    "pr_number": 246016,
    "pr_file": "src/vscode-dts/vscode.d.ts",
    "created_at": "2025-04-09T05:28:45+00:00",
    "commented_code": "* Event that fires when the current workspace has been trusted.\n \t\t */\n \t\texport const onDidGrantWorkspaceTrust: Event<void>;\n+\n+\t\t/**\n+\t\t * Decodes the content from a `Uint8Array` to a `string`. You MUST\n+\t\t * provide the entire content at once to ensure that the encoding\n+\t\t * can properly apply. Do not use this method to decode content\n+\t\t * in chunks, as that may lead to incorrect results.\n+\t\t *\n+\t\t * If no encoding is provided, will try to pick an encoding based\n+\t\t * on settings and the content of the buffer (for example byte order\n+\t\t * marks).\n+\t\t *\n+\t\t * *Note* that if you decode content that is unsupported by the\n+\t\t * encoding, the result may contain substitution characters as\n+\t\t * appropriate.\n+\t\t *\n+\t\t * @throws This method will throw an error when the content is binary.\n+\t\t *\n+\t\t * @param content The text content to decode as a `Uint8Array`.\n+\t\t * @param options Additional context for picking the encoding.\n+\t\t * @returns A thenable that resolves to the decoded `string`.\n+\t\t */\n+\t\texport function decode(content: Uint8Array, options?: {\n+\t\t\t/**\n+\t\t\t * Allows to explicitly pick the encoding to use.\n+\t\t\t * See {@link TextDocument.encoding} for more information\n+\t\t\t * about valid values for encoding.\n+\t\t\t */\n+\t\t\tencoding: string;\n+\t\t}): Thenable<string>;\n+\n+\t\t/**\n+\t\t * Decodes the content from a `Uint8Array` to a `string`. You MUST\n+\t\t * provide the entire content at once to ensure that the encoding\n+\t\t * can properly apply. Do not use this method to decode content\n+\t\t * in chunks, as that may lead to incorrect results.\n+\t\t *\n+\t\t * The encoding is picked based on settings and the content\n+\t\t * of the buffer (for example byte order marks).\n+\t\t *\n+\t\t * *Note* that if you decode content that is unsupported by the\n+\t\t * encoding, the result may contain substitution characters as\n+\t\t * appropriate.\n+\t\t *\n+\t\t * @throws This method will throw an error when the content is binary.\n+\t\t *\n+\t\t * @param content The content to decode as a `Uint8Array`.\n+\t\t * @param options Additional context for picking the encoding.\n+\t\t * @returns A thenable that resolves to the decoded `string`.\n+\t\t */\n+\t\texport function decode(content: Uint8Array, options?: {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2034472384",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 246016,
        "pr_file": "src/vscode-dts/vscode.d.ts",
        "discussion_id": "2034472384",
        "commented_code": "@@ -14303,6 +14373,100 @@ declare module 'vscode' {\n \t\t * Event that fires when the current workspace has been trusted.\n \t\t */\n \t\texport const onDidGrantWorkspaceTrust: Event<void>;\n+\n+\t\t/**\n+\t\t * Decodes the content from a `Uint8Array` to a `string`. You MUST\n+\t\t * provide the entire content at once to ensure that the encoding\n+\t\t * can properly apply. Do not use this method to decode content\n+\t\t * in chunks, as that may lead to incorrect results.\n+\t\t *\n+\t\t * If no encoding is provided, will try to pick an encoding based\n+\t\t * on settings and the content of the buffer (for example byte order\n+\t\t * marks).\n+\t\t *\n+\t\t * *Note* that if you decode content that is unsupported by the\n+\t\t * encoding, the result may contain substitution characters as\n+\t\t * appropriate.\n+\t\t *\n+\t\t * @throws This method will throw an error when the content is binary.\n+\t\t *\n+\t\t * @param content The text content to decode as a `Uint8Array`.\n+\t\t * @param options Additional context for picking the encoding.\n+\t\t * @returns A thenable that resolves to the decoded `string`.\n+\t\t */\n+\t\texport function decode(content: Uint8Array, options?: {\n+\t\t\t/**\n+\t\t\t * Allows to explicitly pick the encoding to use.\n+\t\t\t * See {@link TextDocument.encoding} for more information\n+\t\t\t * about valid values for encoding.\n+\t\t\t */\n+\t\t\tencoding: string;\n+\t\t}): Thenable<string>;\n+\n+\t\t/**\n+\t\t * Decodes the content from a `Uint8Array` to a `string`. You MUST\n+\t\t * provide the entire content at once to ensure that the encoding\n+\t\t * can properly apply. Do not use this method to decode content\n+\t\t * in chunks, as that may lead to incorrect results.\n+\t\t *\n+\t\t * The encoding is picked based on settings and the content\n+\t\t * of the buffer (for example byte order marks).\n+\t\t *\n+\t\t * *Note* that if you decode content that is unsupported by the\n+\t\t * encoding, the result may contain substitution characters as\n+\t\t * appropriate.\n+\t\t *\n+\t\t * @throws This method will throw an error when the content is binary.\n+\t\t *\n+\t\t * @param content The content to decode as a `Uint8Array`.\n+\t\t * @param options Additional context for picking the encoding.\n+\t\t * @returns A thenable that resolves to the decoded `string`.\n+\t\t */\n+\t\texport function decode(content: Uint8Array, options?: {",
        "comment_created_at": "2025-04-09T05:28:45+00:00",
        "comment_author": "mjbvz",
        "comment_body": "Should we require the `options` parameter so that users have to consider it?\r\n\r\nIf the caller wants the encoding to be auto detected, maybe we require calling the function like this:\r\n\r\n```ts\r\ndecode(content, { encoding: undefined })\r\n// or\r\ndecode(content, { })\r\n```",
        "pr_file_module": null
      }
    ]
  }
]