[
  {
    "discussion_id": "2128746224",
    "pr_number": 68695,
    "pr_file": "src/vs/editor/contrib/linesOperations/linesOperations.ts",
    "created_at": "2025-06-05T12:32:52+00:00",
    "commented_code": "let commands: ICommand[] = [];\n \t\tlet selections = editor.getSelections() || [];\n \t\tlet autoIndent = editor.getConfiguration().autoIndent;\n+\t\tlet movingMultipleLines = false;\n+\t\tlet selectionDirectionDown = true;\n+\t\tlet newSelections: Selection[] = [];\n+\n+\t\tif (selections.length > 1) {\n+\t\t\tmovingMultipleLines = selections[0].endLineNumber !== selections[selections.length - 1].endLineNumber;\n+\n+\t\t\tif (movingMultipleLines) {\n+\t\t\t\t// Stash selections while processing, set new selections +/- line-change only\n+\t\t\t\tfor (const selection of selections) {\n+\t\t\t\t\tlet startCol = selection.getStartPosition().column;\n+\t\t\t\t\tlet startLine = selection.getStartPosition().lineNumber;\n+\t\t\t\t\tlet newStartLine = this.down ? startLine + 1 : startLine - 1;\n+\n+\t\t\t\t\tlet endCol = selection.getEndPosition().column;\n+\t\t\t\t\tlet endLine = selection.getEndPosition().lineNumber;\n+\t\t\t\t\tlet newEndLine = this.down ? endLine + 1 : endLine - 1;\n+\n+\t\t\t\t\tnewSelections.push(new Selection(newStartLine, startCol, newEndLine, endCol));\n+\t\t\t\t}\n+\n+\t\t\t\t// Work only with one selection per line",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2128746224",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 68695,
        "pr_file": "src/vs/editor/contrib/linesOperations/linesOperations.ts",
        "discussion_id": "2128746224",
        "commented_code": "@@ -112,18 +112,74 @@ abstract class AbstractMoveLinesAction extends EditorAction {\n \t\tlet commands: ICommand[] = [];\n \t\tlet selections = editor.getSelections() || [];\n \t\tlet autoIndent = editor.getConfiguration().autoIndent;\n+\t\tlet movingMultipleLines = false;\n+\t\tlet selectionDirectionDown = true;\n+\t\tlet newSelections: Selection[] = [];\n+\n+\t\tif (selections.length > 1) {\n+\t\t\tmovingMultipleLines = selections[0].endLineNumber !== selections[selections.length - 1].endLineNumber;\n+\n+\t\t\tif (movingMultipleLines) {\n+\t\t\t\t// Stash selections while processing, set new selections +/- line-change only\n+\t\t\t\tfor (const selection of selections) {\n+\t\t\t\t\tlet startCol = selection.getStartPosition().column;\n+\t\t\t\t\tlet startLine = selection.getStartPosition().lineNumber;\n+\t\t\t\t\tlet newStartLine = this.down ? startLine + 1 : startLine - 1;\n+\n+\t\t\t\t\tlet endCol = selection.getEndPosition().column;\n+\t\t\t\t\tlet endLine = selection.getEndPosition().lineNumber;\n+\t\t\t\t\tlet newEndLine = this.down ? endLine + 1 : endLine - 1;\n+\n+\t\t\t\t\tnewSelections.push(new Selection(newStartLine, startCol, newEndLine, endCol));\n+\t\t\t\t}\n+\n+\t\t\t\t// Work only with one selection per line",
        "comment_created_at": "2025-06-05T12:32:52+00:00",
        "comment_author": "aiday-mar",
        "comment_body": "Let's put this filter operation before the for loop above, so as not to loop over uneccessary selections in the for loop. \r\n\r\nAlso instead of doing a filter operation followed by a map operation followed by an indexOf operation which is `O(n^2)` where `n` is the number of selections could we just loop once over the selections, keep track of the `endLineNumber` of the last processed selection and if the current selection does not match this `endLineNumber` add the current selection to a pre-created selections array. This will allow us to reduce the complexity to `O(n).`\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2138072862",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 68695,
        "pr_file": "src/vs/editor/contrib/linesOperations/linesOperations.ts",
        "discussion_id": "2128746224",
        "commented_code": "@@ -112,18 +112,74 @@ abstract class AbstractMoveLinesAction extends EditorAction {\n \t\tlet commands: ICommand[] = [];\n \t\tlet selections = editor.getSelections() || [];\n \t\tlet autoIndent = editor.getConfiguration().autoIndent;\n+\t\tlet movingMultipleLines = false;\n+\t\tlet selectionDirectionDown = true;\n+\t\tlet newSelections: Selection[] = [];\n+\n+\t\tif (selections.length > 1) {\n+\t\t\tmovingMultipleLines = selections[0].endLineNumber !== selections[selections.length - 1].endLineNumber;\n+\n+\t\t\tif (movingMultipleLines) {\n+\t\t\t\t// Stash selections while processing, set new selections +/- line-change only\n+\t\t\t\tfor (const selection of selections) {\n+\t\t\t\t\tlet startCol = selection.getStartPosition().column;\n+\t\t\t\t\tlet startLine = selection.getStartPosition().lineNumber;\n+\t\t\t\t\tlet newStartLine = this.down ? startLine + 1 : startLine - 1;\n+\n+\t\t\t\t\tlet endCol = selection.getEndPosition().column;\n+\t\t\t\t\tlet endLine = selection.getEndPosition().lineNumber;\n+\t\t\t\t\tlet newEndLine = this.down ? endLine + 1 : endLine - 1;\n+\n+\t\t\t\t\tnewSelections.push(new Selection(newStartLine, startCol, newEndLine, endCol));\n+\t\t\t\t}\n+\n+\t\t\t\t// Work only with one selection per line",
        "comment_created_at": "2025-06-10T14:35:27+00:00",
        "comment_author": "2mas",
        "comment_body": "Great catch, will fix",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2128747269",
    "pr_number": 68695,
    "pr_file": "src/vs/editor/contrib/linesOperations/linesOperations.ts",
    "created_at": "2025-06-05T12:33:19+00:00",
    "commented_code": "let commands: ICommand[] = [];\n \t\tlet selections = editor.getSelections() || [];\n \t\tlet autoIndent = editor.getConfiguration().autoIndent;\n+\t\tlet movingMultipleLines = false;\n+\t\tlet selectionDirectionDown = true;\n+\t\tlet newSelections: Selection[] = [];\n+\n+\t\tif (selections.length > 1) {\n+\t\t\tmovingMultipleLines = selections[0].endLineNumber !== selections[selections.length - 1].endLineNumber;\n+\n+\t\t\tif (movingMultipleLines) {\n+\t\t\t\t// Stash selections while processing, set new selections +/- line-change only\n+\t\t\t\tfor (const selection of selections) {\n+\t\t\t\t\tlet startCol = selection.getStartPosition().column;\n+\t\t\t\t\tlet startLine = selection.getStartPosition().lineNumber;\n+\t\t\t\t\tlet newStartLine = this.down ? startLine + 1 : startLine - 1;\n+\n+\t\t\t\t\tlet endCol = selection.getEndPosition().column;\n+\t\t\t\t\tlet endLine = selection.getEndPosition().lineNumber;\n+\t\t\t\t\tlet newEndLine = this.down ? endLine + 1 : endLine - 1;\n+\n+\t\t\t\t\tnewSelections.push(new Selection(newStartLine, startCol, newEndLine, endCol));\n+\t\t\t\t}\n+\n+\t\t\t\t// Work only with one selection per line\n+\t\t\t\tselections = selections.filter((s, idx, arr) => {\n+\t\t\t\t\treturn arr.map(sel => sel['endLineNumber']).indexOf(s['endLineNumber']) === idx;\n+\t\t\t\t});\n+\n+\t\t\t\tselectionDirectionDown = selections[0].endLineNumber < selections[selections.length - 1].endLineNumber;",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2128747269",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 68695,
        "pr_file": "src/vs/editor/contrib/linesOperations/linesOperations.ts",
        "discussion_id": "2128747269",
        "commented_code": "@@ -112,18 +112,74 @@ abstract class AbstractMoveLinesAction extends EditorAction {\n \t\tlet commands: ICommand[] = [];\n \t\tlet selections = editor.getSelections() || [];\n \t\tlet autoIndent = editor.getConfiguration().autoIndent;\n+\t\tlet movingMultipleLines = false;\n+\t\tlet selectionDirectionDown = true;\n+\t\tlet newSelections: Selection[] = [];\n+\n+\t\tif (selections.length > 1) {\n+\t\t\tmovingMultipleLines = selections[0].endLineNumber !== selections[selections.length - 1].endLineNumber;\n+\n+\t\t\tif (movingMultipleLines) {\n+\t\t\t\t// Stash selections while processing, set new selections +/- line-change only\n+\t\t\t\tfor (const selection of selections) {\n+\t\t\t\t\tlet startCol = selection.getStartPosition().column;\n+\t\t\t\t\tlet startLine = selection.getStartPosition().lineNumber;\n+\t\t\t\t\tlet newStartLine = this.down ? startLine + 1 : startLine - 1;\n+\n+\t\t\t\t\tlet endCol = selection.getEndPosition().column;\n+\t\t\t\t\tlet endLine = selection.getEndPosition().lineNumber;\n+\t\t\t\t\tlet newEndLine = this.down ? endLine + 1 : endLine - 1;\n+\n+\t\t\t\t\tnewSelections.push(new Selection(newStartLine, startCol, newEndLine, endCol));\n+\t\t\t\t}\n+\n+\t\t\t\t// Work only with one selection per line\n+\t\t\t\tselections = selections.filter((s, idx, arr) => {\n+\t\t\t\t\treturn arr.map(sel => sel['endLineNumber']).indexOf(s['endLineNumber']) === idx;\n+\t\t\t\t});\n+\n+\t\t\t\tselectionDirectionDown = selections[0].endLineNumber < selections[selections.length - 1].endLineNumber;",
        "comment_created_at": "2025-06-05T12:33:19+00:00",
        "comment_author": "aiday-mar",
        "comment_body": "I am not sure I understand this piece of code. Why do we calculate the selectionDirectionDown. What does it mean?",
        "pr_file_module": null
      },
      {
        "comment_id": "2138070302",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 68695,
        "pr_file": "src/vs/editor/contrib/linesOperations/linesOperations.ts",
        "discussion_id": "2128747269",
        "commented_code": "@@ -112,18 +112,74 @@ abstract class AbstractMoveLinesAction extends EditorAction {\n \t\tlet commands: ICommand[] = [];\n \t\tlet selections = editor.getSelections() || [];\n \t\tlet autoIndent = editor.getConfiguration().autoIndent;\n+\t\tlet movingMultipleLines = false;\n+\t\tlet selectionDirectionDown = true;\n+\t\tlet newSelections: Selection[] = [];\n+\n+\t\tif (selections.length > 1) {\n+\t\t\tmovingMultipleLines = selections[0].endLineNumber !== selections[selections.length - 1].endLineNumber;\n+\n+\t\t\tif (movingMultipleLines) {\n+\t\t\t\t// Stash selections while processing, set new selections +/- line-change only\n+\t\t\t\tfor (const selection of selections) {\n+\t\t\t\t\tlet startCol = selection.getStartPosition().column;\n+\t\t\t\t\tlet startLine = selection.getStartPosition().lineNumber;\n+\t\t\t\t\tlet newStartLine = this.down ? startLine + 1 : startLine - 1;\n+\n+\t\t\t\t\tlet endCol = selection.getEndPosition().column;\n+\t\t\t\t\tlet endLine = selection.getEndPosition().lineNumber;\n+\t\t\t\t\tlet newEndLine = this.down ? endLine + 1 : endLine - 1;\n+\n+\t\t\t\t\tnewSelections.push(new Selection(newStartLine, startCol, newEndLine, endCol));\n+\t\t\t\t}\n+\n+\t\t\t\t// Work only with one selection per line\n+\t\t\t\tselections = selections.filter((s, idx, arr) => {\n+\t\t\t\t\treturn arr.map(sel => sel['endLineNumber']).indexOf(s['endLineNumber']) === idx;\n+\t\t\t\t});\n+\n+\t\t\t\tselectionDirectionDown = selections[0].endLineNumber < selections[selections.length - 1].endLineNumber;",
        "comment_created_at": "2025-06-10T14:34:17+00:00",
        "comment_author": "2mas",
        "comment_body": "We need to know if the selection direction is down or up (Add Next Occurrence vs Add Previous Occurrence) and if we are initiating a down-move, then we need to process the selections in reversed order from the bottom and up, otherwise they would replace each other. I will try to simplify and clarify this with a comment",
        "pr_file_module": null
      },
      {
        "comment_id": "2138115373",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 68695,
        "pr_file": "src/vs/editor/contrib/linesOperations/linesOperations.ts",
        "discussion_id": "2128747269",
        "commented_code": "@@ -112,18 +112,74 @@ abstract class AbstractMoveLinesAction extends EditorAction {\n \t\tlet commands: ICommand[] = [];\n \t\tlet selections = editor.getSelections() || [];\n \t\tlet autoIndent = editor.getConfiguration().autoIndent;\n+\t\tlet movingMultipleLines = false;\n+\t\tlet selectionDirectionDown = true;\n+\t\tlet newSelections: Selection[] = [];\n+\n+\t\tif (selections.length > 1) {\n+\t\t\tmovingMultipleLines = selections[0].endLineNumber !== selections[selections.length - 1].endLineNumber;\n+\n+\t\t\tif (movingMultipleLines) {\n+\t\t\t\t// Stash selections while processing, set new selections +/- line-change only\n+\t\t\t\tfor (const selection of selections) {\n+\t\t\t\t\tlet startCol = selection.getStartPosition().column;\n+\t\t\t\t\tlet startLine = selection.getStartPosition().lineNumber;\n+\t\t\t\t\tlet newStartLine = this.down ? startLine + 1 : startLine - 1;\n+\n+\t\t\t\t\tlet endCol = selection.getEndPosition().column;\n+\t\t\t\t\tlet endLine = selection.getEndPosition().lineNumber;\n+\t\t\t\t\tlet newEndLine = this.down ? endLine + 1 : endLine - 1;\n+\n+\t\t\t\t\tnewSelections.push(new Selection(newStartLine, startCol, newEndLine, endCol));\n+\t\t\t\t}\n+\n+\t\t\t\t// Work only with one selection per line\n+\t\t\t\tselections = selections.filter((s, idx, arr) => {\n+\t\t\t\t\treturn arr.map(sel => sel['endLineNumber']).indexOf(s['endLineNumber']) === idx;\n+\t\t\t\t});\n+\n+\t\t\t\tselectionDirectionDown = selections[0].endLineNumber < selections[selections.length - 1].endLineNumber;",
        "comment_created_at": "2025-06-10T14:51:20+00:00",
        "comment_author": "aiday-mar",
        "comment_body": "In that case is not sufficient to just check if we are initiating a downwards movement? I am not exactly sure, but it seems to me selections are not necessarily ordered from top to bottom. \r\n\r\nCould you give a concrete example for what this code solves?",
        "pr_file_module": null
      },
      {
        "comment_id": "2138164037",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 68695,
        "pr_file": "src/vs/editor/contrib/linesOperations/linesOperations.ts",
        "discussion_id": "2128747269",
        "commented_code": "@@ -112,18 +112,74 @@ abstract class AbstractMoveLinesAction extends EditorAction {\n \t\tlet commands: ICommand[] = [];\n \t\tlet selections = editor.getSelections() || [];\n \t\tlet autoIndent = editor.getConfiguration().autoIndent;\n+\t\tlet movingMultipleLines = false;\n+\t\tlet selectionDirectionDown = true;\n+\t\tlet newSelections: Selection[] = [];\n+\n+\t\tif (selections.length > 1) {\n+\t\t\tmovingMultipleLines = selections[0].endLineNumber !== selections[selections.length - 1].endLineNumber;\n+\n+\t\t\tif (movingMultipleLines) {\n+\t\t\t\t// Stash selections while processing, set new selections +/- line-change only\n+\t\t\t\tfor (const selection of selections) {\n+\t\t\t\t\tlet startCol = selection.getStartPosition().column;\n+\t\t\t\t\tlet startLine = selection.getStartPosition().lineNumber;\n+\t\t\t\t\tlet newStartLine = this.down ? startLine + 1 : startLine - 1;\n+\n+\t\t\t\t\tlet endCol = selection.getEndPosition().column;\n+\t\t\t\t\tlet endLine = selection.getEndPosition().lineNumber;\n+\t\t\t\t\tlet newEndLine = this.down ? endLine + 1 : endLine - 1;\n+\n+\t\t\t\t\tnewSelections.push(new Selection(newStartLine, startCol, newEndLine, endCol));\n+\t\t\t\t}\n+\n+\t\t\t\t// Work only with one selection per line\n+\t\t\t\tselections = selections.filter((s, idx, arr) => {\n+\t\t\t\t\treturn arr.map(sel => sel['endLineNumber']).indexOf(s['endLineNumber']) === idx;\n+\t\t\t\t});\n+\n+\t\t\t\tselectionDirectionDown = selections[0].endLineNumber < selections[selections.length - 1].endLineNumber;",
        "comment_created_at": "2025-06-10T15:11:18+00:00",
        "comment_author": "2mas",
        "comment_body": "Yes, if I do this:\r\n![image](https://github.com/user-attachments/assets/3163d7d7-0fb5-48be-b5e1-a7ad5a3e7096)\r\n\r\nAnd select some lines with `Add Previous Occurrence`:\r\n![image](https://github.com/user-attachments/assets/7d77fbc2-ff80-4b0e-930a-77a75dac3917)\r\n\r\nAnd move down:\r\n![image](https://github.com/user-attachments/assets/15d8076c-a8eb-4081-a495-dae982d59358)\r\n\r\n\r\nvs\r\n\r\n![image](https://github.com/user-attachments/assets/c418d4b8-82a9-4e59-ac2b-b2603982bf06)\r\n\r\n`Add Previous Occurrence`:\r\n![image](https://github.com/user-attachments/assets/7d77fbc2-ff80-4b0e-930a-77a75dac3917)\r\n\r\nmove down:\r\n![image](https://github.com/user-attachments/assets/a46f698c-eb1a-46a8-9bee-3adab014d86c)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2138193688",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 68695,
        "pr_file": "src/vs/editor/contrib/linesOperations/linesOperations.ts",
        "discussion_id": "2128747269",
        "commented_code": "@@ -112,18 +112,74 @@ abstract class AbstractMoveLinesAction extends EditorAction {\n \t\tlet commands: ICommand[] = [];\n \t\tlet selections = editor.getSelections() || [];\n \t\tlet autoIndent = editor.getConfiguration().autoIndent;\n+\t\tlet movingMultipleLines = false;\n+\t\tlet selectionDirectionDown = true;\n+\t\tlet newSelections: Selection[] = [];\n+\n+\t\tif (selections.length > 1) {\n+\t\t\tmovingMultipleLines = selections[0].endLineNumber !== selections[selections.length - 1].endLineNumber;\n+\n+\t\t\tif (movingMultipleLines) {\n+\t\t\t\t// Stash selections while processing, set new selections +/- line-change only\n+\t\t\t\tfor (const selection of selections) {\n+\t\t\t\t\tlet startCol = selection.getStartPosition().column;\n+\t\t\t\t\tlet startLine = selection.getStartPosition().lineNumber;\n+\t\t\t\t\tlet newStartLine = this.down ? startLine + 1 : startLine - 1;\n+\n+\t\t\t\t\tlet endCol = selection.getEndPosition().column;\n+\t\t\t\t\tlet endLine = selection.getEndPosition().lineNumber;\n+\t\t\t\t\tlet newEndLine = this.down ? endLine + 1 : endLine - 1;\n+\n+\t\t\t\t\tnewSelections.push(new Selection(newStartLine, startCol, newEndLine, endCol));\n+\t\t\t\t}\n+\n+\t\t\t\t// Work only with one selection per line\n+\t\t\t\tselections = selections.filter((s, idx, arr) => {\n+\t\t\t\t\treturn arr.map(sel => sel['endLineNumber']).indexOf(s['endLineNumber']) === idx;\n+\t\t\t\t});\n+\n+\t\t\t\tselectionDirectionDown = selections[0].endLineNumber < selections[selections.length - 1].endLineNumber;",
        "comment_created_at": "2025-06-10T15:21:39+00:00",
        "comment_author": "2mas",
        "comment_body": "It's because \"line 3\" gets processed first -> moved to row 6, then the next selection is processed on row 6, which is now \"line 3\" -> moved to row 7, next selection gets processed on row 7, which is \"line 3\" -> ends up on row 8. So this is why process order must be right :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2157434040",
    "pr_number": 251922,
    "pr_file": "src/vs/workbench/contrib/terminalContrib/suggest/browser/terminalCompletionService.ts",
    "created_at": "2025-06-19T17:28:43+00:00",
    "commented_code": "if (completions.resourceRequestConfig) {\n \t\t\t\tconst resourceCompletions = await this.resolveResources(completions.resourceRequestConfig, promptValue, cursorPosition, provider.id, capabilities, shellType);\n \t\t\t\tif (resourceCompletions) {\n-\t\t\t\t\tcompletionItems.push(...resourceCompletions);\n+\t\t\t\t\tfor (const item of resourceCompletions) {\n+\t\t\t\t\t\tconst labels = completionItems.map(c => c.label);\n+\t\t\t\t\t\tif (!labels.includes(item.label)) {\n+\t\t\t\t\t\t\tcompletionItems.push(item);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2157434040",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 251922,
        "pr_file": "src/vs/workbench/contrib/terminalContrib/suggest/browser/terminalCompletionService.ts",
        "discussion_id": "2157434040",
        "commented_code": "@@ -194,7 +194,12 @@ export class TerminalCompletionService extends Disposable implements ITerminalCo\n \t\t\tif (completions.resourceRequestConfig) {\n \t\t\t\tconst resourceCompletions = await this.resolveResources(completions.resourceRequestConfig, promptValue, cursorPosition, provider.id, capabilities, shellType);\n \t\t\t\tif (resourceCompletions) {\n-\t\t\t\t\tcompletionItems.push(...resourceCompletions);\n+\t\t\t\t\tfor (const item of resourceCompletions) {\n+\t\t\t\t\t\tconst labels = completionItems.map(c => c.label);\n+\t\t\t\t\t\tif (!labels.includes(item.label)) {\n+\t\t\t\t\t\t\tcompletionItems.push(item);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}",
        "comment_created_at": "2025-06-19T17:28:43+00:00",
        "comment_author": "Tyriar",
        "comment_body": "This is relatively expensive since you're doing a lot of duplicate work, try something like this:\r\n\r\n```suggestion\r\n\t\t\t\t\tconst labelSet = new Set(completionItems.map(c => c.label));\r\n\t\t\t\t\tfor (const item of resourceCompletions) {\r\n\t\t\t\t\t\tif (!labels.has(item.label)) {\r\n\t\t\t\t\t\t\tcompletionItems.push(item);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2067943564",
    "pr_number": 247763,
    "pr_file": "src/vs/workbench/contrib/chat/common/promptSyntax/service/promptsService.ts",
    "created_at": "2025-04-30T06:32:49+00:00",
    "commented_code": "}\n \t\t}\n \n-\t\treturn result;\n+\t\treturn [...new Set(result)];",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2067943564",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 247763,
        "pr_file": "src/vs/workbench/contrib/chat/common/promptSyntax/service/promptsService.ts",
        "discussion_id": "2067943564",
        "commented_code": "@@ -209,7 +209,7 @@ export class PromptsService extends Disposable implements IPromptsService {\n \t\t\t}\n \t\t}\n \n-\t\treturn result;\n+\t\treturn [...new Set(result)];",
        "comment_created_at": "2025-04-30T06:32:49+00:00",
        "comment_author": "jrieken",
        "comment_body": "I doubt this will work - the `URI` object isn't a singleton, e.g `URI.parse('file:///aaa.bbb.txt') !== URI.parse('file:///aaa.bbb.txt')` and the JS set does work by object identity ",
        "pr_file_module": null
      }
    ]
  }
]