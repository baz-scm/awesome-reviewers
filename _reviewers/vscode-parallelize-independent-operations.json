[
  {
    "discussion_id": "2216408651",
    "pr_number": 256613,
    "pr_file": "src/vs/workbench/contrib/terminalContrib/chatAgentTools/browser/runInTerminalTool.ts",
    "created_at": "2025-07-18T16:05:02+00:00",
    "commented_code": "}\n \t}\n \n+\tprivate async _pollForOutputAndIdle(\n+\t\texecution: BackgroundTerminalExecution,\n+\t\textendedPolling: boolean,\n+\t\ttoken: CancellationToken\n+\t): Promise<{ idle: boolean; output: string; pollDurationMs?: number }> {\n+\t\tconst maxWaitMs = extendedPolling ? 120000 : 20000;\n+\t\tconst maxInterval = 2000;\n+\t\tlet currentInterval = 500;\n+\t\tconst pollStartTime = Date.now();\n+\n+\t\tlet lastBufferLength = 0;\n+\t\tlet idleCount = 0;\n+\t\tlet buffer = '';\n+\n+\t\twhile (true) {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2216408651",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 256613,
        "pr_file": "src/vs/workbench/contrib/terminalContrib/chatAgentTools/browser/runInTerminalTool.ts",
        "discussion_id": "2216408651",
        "commented_code": "@@ -418,6 +463,89 @@ export class RunInTerminalTool extends Disposable implements IToolImpl {\n \t\t}\n \t}\n \n+\tprivate async _pollForOutputAndIdle(\n+\t\texecution: BackgroundTerminalExecution,\n+\t\textendedPolling: boolean,\n+\t\ttoken: CancellationToken\n+\t): Promise<{ idle: boolean; output: string; pollDurationMs?: number }> {\n+\t\tconst maxWaitMs = extendedPolling ? 120000 : 20000;\n+\t\tconst maxInterval = 2000;\n+\t\tlet currentInterval = 500;\n+\t\tconst pollStartTime = Date.now();\n+\n+\t\tlet lastBufferLength = 0;\n+\t\tlet idleCount = 0;\n+\t\tlet buffer = '';\n+\n+\t\twhile (true) {",
        "comment_created_at": "2025-07-18T16:05:02+00:00",
        "comment_author": "connor4312",
        "comment_body": "You probably want to bail out of this loop when the token is cancelled too",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2031549404",
    "pr_number": 245885,
    "pr_file": "build/azure-pipelines/win32/codesign.ts",
    "created_at": "2025-04-07T15:53:53+00:00",
    "commented_code": "+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { $, ProcessPromise, usePwsh } from 'zx';\n+\n+const arch = process.env['VSCODE_ARCH'];\n+const esrpCliDLLPath = process.env['EsrpCliDllPath'];\n+const codeSigningFolderPath = process.env['CodeSigningFolderPath'];\n+\n+type CodeSignTask = {\n+\treadonly banner: string;\n+\treadonly processPromise: ProcessPromise;\n+};\n+\n+function printBanner(title: string) {\n+\tconsole.log('#'.repeat(65));\n+\tconsole.log(`# ${title.padEnd(61)} #`);\n+\tconsole.log('#'.repeat(65));\n+}\n+\n+function sign(type: 'sign-windows' | 'sign-windows-appx', glob: string): ProcessPromise {\n+\treturn $`node build/azure-pipelines/common/sign ${esrpCliDLLPath} ${type} ${codeSigningFolderPath} '${glob}'`;\n+}\n+\n+async function main() {\n+\tusePwsh();\n+\n+\tconst codesignTasks: CodeSignTask[] = [\n+\t\t{\n+\t\t\tbanner: 'Codesign executables and shared libraries',\n+\t\t\tprocessPromise: sign('sign-windows', '*.dll,*.exe,*.node')\n+\t\t},\n+\t\t{\n+\t\t\tbanner: 'Codesign Powershell scripts',\n+\t\t\tprocessPromise: sign('sign-windows-appx', '*.ps1')\n+\t\t}\n+\t];\n+\n+\tif (process.env['VSCODE_QUALITY'] === 'insider') {\n+\t\tcodesignTasks.push({\n+\t\t\tbanner: 'Codesign context menu appx package',\n+\t\t\tprocessPromise: sign('sign-windows-appx', '*.appx')\n+\t\t});\n+\t}\n+\n+\t// Wait for processes to finish and stream their output\n+\tfor (const { banner, processPromise } of codesignTasks) {\n+\t\tprintBanner(banner);\n+\t\tawait processPromise.pipe(process.stdout);\n+\t}",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2031549404",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 245885,
        "pr_file": "build/azure-pipelines/win32/codesign.ts",
        "discussion_id": "2031549404",
        "commented_code": "@@ -0,0 +1,90 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { $, ProcessPromise, usePwsh } from 'zx';\n+\n+const arch = process.env['VSCODE_ARCH'];\n+const esrpCliDLLPath = process.env['EsrpCliDllPath'];\n+const codeSigningFolderPath = process.env['CodeSigningFolderPath'];\n+\n+type CodeSignTask = {\n+\treadonly banner: string;\n+\treadonly processPromise: ProcessPromise;\n+};\n+\n+function printBanner(title: string) {\n+\tconsole.log('#'.repeat(65));\n+\tconsole.log(`# ${title.padEnd(61)} #`);\n+\tconsole.log('#'.repeat(65));\n+}\n+\n+function sign(type: 'sign-windows' | 'sign-windows-appx', glob: string): ProcessPromise {\n+\treturn $`node build/azure-pipelines/common/sign ${esrpCliDLLPath} ${type} ${codeSigningFolderPath} '${glob}'`;\n+}\n+\n+async function main() {\n+\tusePwsh();\n+\n+\tconst codesignTasks: CodeSignTask[] = [\n+\t\t{\n+\t\t\tbanner: 'Codesign executables and shared libraries',\n+\t\t\tprocessPromise: sign('sign-windows', '*.dll,*.exe,*.node')\n+\t\t},\n+\t\t{\n+\t\t\tbanner: 'Codesign Powershell scripts',\n+\t\t\tprocessPromise: sign('sign-windows-appx', '*.ps1')\n+\t\t}\n+\t];\n+\n+\tif (process.env['VSCODE_QUALITY'] === 'insider') {\n+\t\tcodesignTasks.push({\n+\t\t\tbanner: 'Codesign context menu appx package',\n+\t\t\tprocessPromise: sign('sign-windows-appx', '*.appx')\n+\t\t});\n+\t}\n+\n+\t// Wait for processes to finish and stream their output\n+\tfor (const { banner, processPromise } of codesignTasks) {\n+\t\tprintBanner(banner);\n+\t\tawait processPromise.pipe(process.stdout);\n+\t}",
        "comment_created_at": "2025-04-07T15:53:53+00:00",
        "comment_author": "joaomoreno",
        "comment_body": "Asked Copilot to rewrite this with the `race` idea:\r\n\r\n> instead of looping over each processPromise in the order of codesignTasks, do a loop in which it waits for the first promise to complete, then print the banner and pipe the output, and goes back to the start of the loop excluding that task\r\n\r\nCame up with this:\r\n\r\n```ts\r\n// Wait for processes to finish and stream their output\r\nconst tasks = [...codesignTasks];\r\nwhile (tasks.length > 0) {\r\n\t// Wait for the first process to complete\r\n\tconst completedIndex = await Promise.race(tasks.map((task, index) => \r\n\t\ttask.processPromise.then(() => index)));\r\n\t\r\n\t// Get the completed task\r\n\tconst { banner, processPromise } = tasks[completedIndex];\r\n\t\r\n\t// Print banner and pipe output\r\n\tprintBanner(banner);\r\n\tawait processPromise.pipe(process.stdout);\r\n\t\r\n\t// Remove the completed task\r\n\ttasks.splice(completedIndex, 1);\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2031555682",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 245885,
        "pr_file": "build/azure-pipelines/win32/codesign.ts",
        "discussion_id": "2031549404",
        "commented_code": "@@ -0,0 +1,90 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { $, ProcessPromise, usePwsh } from 'zx';\n+\n+const arch = process.env['VSCODE_ARCH'];\n+const esrpCliDLLPath = process.env['EsrpCliDllPath'];\n+const codeSigningFolderPath = process.env['CodeSigningFolderPath'];\n+\n+type CodeSignTask = {\n+\treadonly banner: string;\n+\treadonly processPromise: ProcessPromise;\n+};\n+\n+function printBanner(title: string) {\n+\tconsole.log('#'.repeat(65));\n+\tconsole.log(`# ${title.padEnd(61)} #`);\n+\tconsole.log('#'.repeat(65));\n+}\n+\n+function sign(type: 'sign-windows' | 'sign-windows-appx', glob: string): ProcessPromise {\n+\treturn $`node build/azure-pipelines/common/sign ${esrpCliDLLPath} ${type} ${codeSigningFolderPath} '${glob}'`;\n+}\n+\n+async function main() {\n+\tusePwsh();\n+\n+\tconst codesignTasks: CodeSignTask[] = [\n+\t\t{\n+\t\t\tbanner: 'Codesign executables and shared libraries',\n+\t\t\tprocessPromise: sign('sign-windows', '*.dll,*.exe,*.node')\n+\t\t},\n+\t\t{\n+\t\t\tbanner: 'Codesign Powershell scripts',\n+\t\t\tprocessPromise: sign('sign-windows-appx', '*.ps1')\n+\t\t}\n+\t];\n+\n+\tif (process.env['VSCODE_QUALITY'] === 'insider') {\n+\t\tcodesignTasks.push({\n+\t\t\tbanner: 'Codesign context menu appx package',\n+\t\t\tprocessPromise: sign('sign-windows-appx', '*.appx')\n+\t\t});\n+\t}\n+\n+\t// Wait for processes to finish and stream their output\n+\tfor (const { banner, processPromise } of codesignTasks) {\n+\t\tprintBanner(banner);\n+\t\tawait processPromise.pipe(process.stdout);\n+\t}",
        "comment_created_at": "2025-04-07T15:57:23+00:00",
        "comment_author": "lszomoru",
        "comment_body": "The problem with this code is that output will not be streamed while the task is running...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009894089",
    "pr_number": 244315,
    "pr_file": "src/vs/workbench/services/accounts/common/defaultAccount.ts",
    "created_at": "2025-03-24T10:28:30+00:00",
    "commented_code": "return null;\n \t\t}\n \n-\t\tconst entitlements = await this.getEntitlements(session.accessToken, entitlementUrl);\n+\t\tconst entitlements = await this.getEntitlements(session.accessToken, tokenEntitlementUrl);\n+\t\tconst chatEntitlements = await this.getChatEntitlements(session.accessToken, chatEntitlementUrl);",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2009894089",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 244315,
        "pr_file": "src/vs/workbench/services/accounts/common/defaultAccount.ts",
        "discussion_id": "2009894089",
        "commented_code": "@@ -194,24 +214,50 @@ export class DefaultAccountManagementContribution extends Disposable implements\n \t\t\treturn null;\n \t\t}\n \n-\t\tconst entitlements = await this.getEntitlements(session.accessToken, entitlementUrl);\n+\t\tconst entitlements = await this.getEntitlements(session.accessToken, tokenEntitlementUrl);\n+\t\tconst chatEntitlements = await this.getChatEntitlements(session.accessToken, chatEntitlementUrl);",
        "comment_created_at": "2025-03-24T10:28:30+00:00",
        "comment_author": "sandy081",
        "comment_body": "Can we make these requests in parallel?",
        "pr_file_module": null
      }
    ]
  }
]