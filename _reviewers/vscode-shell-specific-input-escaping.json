[
  {
    "discussion_id": "2128560876",
    "pr_number": 250731,
    "pr_file": "src/vs/platform/terminal/common/terminalEnvironment.ts",
    "created_at": "2025-06-05T10:56:31+00:00",
    "commented_code": "if (newPath.includes('\\\\')) {\n \t\tnewPath = newPath.replace(/\\\\/g, '\\\\\\\\');\n \t}\n-\tconst bannedChars = /[\\`\\$\\|\\&\\>\\~\\#\\!\\^\\*\\;\\<\\\"\\']/g;\n+\t// Remove dangerous characters except single quotes, which we'll escape properly\n+\tconst bannedChars = /[\\`\\$\\|\\&\\>\\~\\#\\!\\^\\*\\;\\<\\\"]/g;\n \tnewPath = newPath.replace(bannedChars, '');\n+\t\n+\t// Properly escape single quotes by ending the current single-quoted string,\n+\t// adding an escaped single quote, then starting a new single-quoted string\n+\tif (newPath.includes(\"'\")) {\n+\t\tnewPath = newPath.replace(/'/g, \"'\\\\''\");\n+\t}",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2128560876",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 250731,
        "pr_file": "src/vs/platform/terminal/common/terminalEnvironment.ts",
        "discussion_id": "2128560876",
        "commented_code": "@@ -16,8 +16,16 @@ export function escapeNonWindowsPath(path: string): string {\n \tif (newPath.includes('\\\\')) {\n \t\tnewPath = newPath.replace(/\\\\/g, '\\\\\\\\');\n \t}\n-\tconst bannedChars = /[\\`\\$\\|\\&\\>\\~\\#\\!\\^\\*\\;\\<\\\"\\']/g;\n+\t// Remove dangerous characters except single quotes, which we'll escape properly\n+\tconst bannedChars = /[\\`\\$\\|\\&\\>\\~\\#\\!\\^\\*\\;\\<\\\"]/g;\n \tnewPath = newPath.replace(bannedChars, '');\n+\t\n+\t// Properly escape single quotes by ending the current single-quoted string,\n+\t// adding an escaped single quote, then starting a new single-quoted string\n+\tif (newPath.includes(\"'\")) {\n+\t\tnewPath = newPath.replace(/'/g, \"'\\\\''\");\n+\t}",
        "comment_created_at": "2025-06-05T10:56:31+00:00",
        "comment_author": "Tyriar",
        "comment_body": "This should be done in a shell specific way to prevent security problems. Add support for both ' and \" in bash, git bash, powershell, zsh and fish.",
        "pr_file_module": null
      },
      {
        "comment_id": "2128583686",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 250731,
        "pr_file": "src/vs/platform/terminal/common/terminalEnvironment.ts",
        "discussion_id": "2128560876",
        "commented_code": "@@ -16,8 +16,16 @@ export function escapeNonWindowsPath(path: string): string {\n \tif (newPath.includes('\\\\')) {\n \t\tnewPath = newPath.replace(/\\\\/g, '\\\\\\\\');\n \t}\n-\tconst bannedChars = /[\\`\\$\\|\\&\\>\\~\\#\\!\\^\\*\\;\\<\\\"\\']/g;\n+\t// Remove dangerous characters except single quotes, which we'll escape properly\n+\tconst bannedChars = /[\\`\\$\\|\\&\\>\\~\\#\\!\\^\\*\\;\\<\\\"]/g;\n \tnewPath = newPath.replace(bannedChars, '');\n+\t\n+\t// Properly escape single quotes by ending the current single-quoted string,\n+\t// adding an escaped single quote, then starting a new single-quoted string\n+\tif (newPath.includes(\"'\")) {\n+\t\tnewPath = newPath.replace(/'/g, \"'\\\\''\");\n+\t}",
        "comment_created_at": "2025-06-05T11:09:53+00:00",
        "comment_author": "Copilot",
        "comment_body": "I've implemented shell-specific escaping for bash, git bash, powershell, zsh, and fish as requested. The solution now properly handles both single and double quotes with appropriate escaping methods for each shell:\n\n- **bash/sh/zsh/git bash:** POSIX standard escaping with `'foo'\\''bar'` for single quotes and `$'foo\\'bar\"baz'` for mixed quotes\n- **Fish:** Backslash escaping `'foo\\'bar'` for single quotes  \n- **PowerShell:** Double single quotes `& 'foo''bar'` (though this is already handled separately in preparePathForShell)\n\nThe `escapeNonWindowsPath` function now accepts an optional shell type parameter while maintaining backward compatibility. All changes include comprehensive test coverage.\n\nCommit: f44b4a7",
        "pr_file_module": null
      }
    ]
  }
]