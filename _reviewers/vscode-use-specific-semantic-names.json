[
  {
    "discussion_id": "2162119637",
    "pr_number": 252102,
    "pr_file": "src/vs/workbench/services/userDataProfile/browser/mcpResource.ts",
    "created_at": "2025-06-23T17:32:01+00:00",
    "commented_code": "+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { VSBuffer } from '../../../../base/common/buffer.js';\n+import { localize } from '../../../../nls.js';\n+import { FileOperationError, FileOperationResult, IFileService } from '../../../../platform/files/common/files.js';\n+import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\n+import { ILogService } from '../../../../platform/log/common/log.js';\n+import { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\n+import { IUserDataProfile, ProfileResourceType } from '../../../../platform/userDataProfile/common/userDataProfile.js';\n+import { API_OPEN_EDITOR_COMMAND_ID } from '../../../browser/parts/editor/editorCommands.js';\n+import { ITreeItemCheckboxState, TreeItemCollapsibleState } from '../../../common/views.js';\n+import { IProfileResource, IProfileResourceChildTreeItem, IProfileResourceInitializer, IProfileResourceTreeItem, IUserDataProfileService } from '../common/userDataProfile.js';\n+\n+interface IMcpResourceContent {\n+\treadonly mcp: string | null;\n+}\n+\n+export class McpResourceInitializer implements IProfileResourceInitializer {\n+\n+\tconstructor(\n+\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n+\t\t@IFileService private readonly fileService: IFileService,\n+\t\t@ILogService private readonly logService: ILogService,\n+\t) {\n+\t}\n+\n+\tasync initialize(content: string): Promise<void> {\n+\t\tconst mcpContent: IMcpResourceContent = JSON.parse(content);\n+\t\tif (!mcpContent.mcp) {\n+\t\t\tthis.logService.info(`Initializing Profile: No MCP servers to apply...`);\n+\t\t\treturn;\n+\t\t}\n+\t\tawait this.fileService.writeFile(this.userDataProfileService.currentProfile.mcpResource, VSBuffer.fromString(mcpContent.mcp));\n+\t}\n+}\n+\n+export class McpResource implements IProfileResource {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2162119637",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 252102,
        "pr_file": "src/vs/workbench/services/userDataProfile/browser/mcpResource.ts",
        "discussion_id": "2162119637",
        "commented_code": "@@ -0,0 +1,125 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+\n+import { VSBuffer } from '../../../../base/common/buffer.js';\n+import { localize } from '../../../../nls.js';\n+import { FileOperationError, FileOperationResult, IFileService } from '../../../../platform/files/common/files.js';\n+import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\n+import { ILogService } from '../../../../platform/log/common/log.js';\n+import { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\n+import { IUserDataProfile, ProfileResourceType } from '../../../../platform/userDataProfile/common/userDataProfile.js';\n+import { API_OPEN_EDITOR_COMMAND_ID } from '../../../browser/parts/editor/editorCommands.js';\n+import { ITreeItemCheckboxState, TreeItemCollapsibleState } from '../../../common/views.js';\n+import { IProfileResource, IProfileResourceChildTreeItem, IProfileResourceInitializer, IProfileResourceTreeItem, IUserDataProfileService } from '../common/userDataProfile.js';\n+\n+interface IMcpResourceContent {\n+\treadonly mcp: string | null;\n+}\n+\n+export class McpResourceInitializer implements IProfileResourceInitializer {\n+\n+\tconstructor(\n+\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n+\t\t@IFileService private readonly fileService: IFileService,\n+\t\t@ILogService private readonly logService: ILogService,\n+\t) {\n+\t}\n+\n+\tasync initialize(content: string): Promise<void> {\n+\t\tconst mcpContent: IMcpResourceContent = JSON.parse(content);\n+\t\tif (!mcpContent.mcp) {\n+\t\t\tthis.logService.info(`Initializing Profile: No MCP servers to apply...`);\n+\t\t\treturn;\n+\t\t}\n+\t\tawait this.fileService.writeFile(this.userDataProfileService.currentProfile.mcpResource, VSBuffer.fromString(mcpContent.mcp));\n+\t}\n+}\n+\n+export class McpResource implements IProfileResource {",
        "comment_created_at": "2025-06-23T17:32:01+00:00",
        "comment_author": "connor4312",
        "comment_body": "\"MCP Resources\" are their own separate thing on the MCP protocol, I would prefer we call this file and classes `McpProfileResource...` to avoid confusion and make navigation easier :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1799339326",
    "pr_number": 231178,
    "pr_file": "src/vs/workbench/contrib/terminalContrib/clipboard/browser/terminalClipboard.ts",
    "created_at": "2024-10-14T11:43:53+00:00",
    "commented_code": "import { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\n import { TerminalSettingId } from '../../../../../platform/terminal/common/terminal.js';\n \n-export async function shouldPasteTerminalText(accessor: ServicesAccessor, text: string, bracketedPasteMode: boolean | undefined): Promise<boolean | { modifiedText: string }> {\n+class SmartPasteUtils {\n+\t/**\n+\t *\n+\t * @param string\n+\t * @returns true if the string is a path\n+\t */\n+\tstatic isPath(string: string): boolean {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1799339326",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 231178,
        "pr_file": "src/vs/workbench/contrib/terminalContrib/clipboard/browser/terminalClipboard.ts",
        "discussion_id": "1799339326",
        "commented_code": "@@ -9,14 +9,84 @@ import { IDialogService } from '../../../../../platform/dialogs/common/dialogs.j\n import { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\n import { TerminalSettingId } from '../../../../../platform/terminal/common/terminal.js';\n \n-export async function shouldPasteTerminalText(accessor: ServicesAccessor, text: string, bracketedPasteMode: boolean | undefined): Promise<boolean | { modifiedText: string }> {\n+class SmartPasteUtils {\n+\t/**\n+\t *\n+\t * @param string\n+\t * @returns true if the string is a path\n+\t */\n+\tstatic isPath(string: string): boolean {",
        "comment_created_at": "2024-10-14T11:43:53+00:00",
        "comment_author": "Tyriar",
        "comment_body": "`isPathLike`? This will help hint that it's not actually verifying that it's an actual path, but something that likely is.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1799343623",
    "pr_number": 231178,
    "pr_file": "src/vs/workbench/contrib/terminalContrib/clipboard/browser/terminalClipboard.ts",
    "created_at": "2024-10-14T11:47:20+00:00",
    "commented_code": "import { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\n import { TerminalSettingId } from '../../../../../platform/terminal/common/terminal.js';\n \n-export async function shouldPasteTerminalText(accessor: ServicesAccessor, text: string, bracketedPasteMode: boolean | undefined): Promise<boolean | { modifiedText: string }> {\n+class SmartPasteUtils {\n+\t/**\n+\t *\n+\t * @param string\n+\t * @returns true if the string is a path\n+\t */\n+\tstatic isPath(string: string): boolean {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1799343623",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 231178,
        "pr_file": "src/vs/workbench/contrib/terminalContrib/clipboard/browser/terminalClipboard.ts",
        "discussion_id": "1799343623",
        "commented_code": "@@ -9,14 +9,84 @@ import { IDialogService } from '../../../../../platform/dialogs/common/dialogs.j\n import { ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\n import { TerminalSettingId } from '../../../../../platform/terminal/common/terminal.js';\n \n-export async function shouldPasteTerminalText(accessor: ServicesAccessor, text: string, bracketedPasteMode: boolean | undefined): Promise<boolean | { modifiedText: string }> {\n+class SmartPasteUtils {\n+\t/**\n+\t *\n+\t * @param string\n+\t * @returns true if the string is a path\n+\t */\n+\tstatic isPath(string: string): boolean {",
        "comment_created_at": "2024-10-14T11:47:20+00:00",
        "comment_author": "Tyriar",
        "comment_body": "We don't want to use keywords like `string` as variable names, `text` is a good alternative.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2056613637",
    "pr_number": 247177,
    "pr_file": "src/vs/workbench/contrib/preferences/browser/preferencesSearch.ts",
    "created_at": "2025-04-23T17:52:40+00:00",
    "commented_code": "}\n }\n \n-class AiRelatedInformationSearchKeysProvider {\n-\tprivate settingKeys: string[] = [];\n+class AiSearchKeysProvider {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2056613637",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 247177,
        "pr_file": "src/vs/workbench/contrib/preferences/browser/preferencesSearch.ts",
        "discussion_id": "2056613637",
        "commented_code": "@@ -350,14 +350,11 @@ export class SettingMatches {\n \t}\n }\n \n-class AiRelatedInformationSearchKeysProvider {\n-\tprivate settingKeys: string[] = [];\n+class AiSearchKeysProvider {",
        "comment_created_at": "2025-04-23T17:52:40+00:00",
        "comment_author": "osortega",
        "comment_body": "I'll leave this up to you but maybe we should name this `AiSearchSettingKeysProvider` so it's clearer what this provider is for.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2038682183",
    "pr_number": 246231,
    "pr_file": "src/vs/workbench/contrib/chat/common/promptSyntax/utils/promptFilesLocator.ts",
    "created_at": "2025-04-11T01:57:34+00:00",
    "commented_code": "*/\n \tprivate async findInstructionFiles(\n \t\tabsoluteLocations: readonly URI[],\n+\t\ttype: TPromptsType,\n \t): Promise<readonly URI[]> {\n+\t\tconst fileExtension = getFileExtension(type);",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2038682183",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 246231,
        "pr_file": "src/vs/workbench/contrib/chat/common/promptSyntax/utils/promptFilesLocator.ts",
        "discussion_id": "2038682183",
        "commented_code": "@@ -114,7 +116,10 @@ export class PromptFilesLocator {\n \t */\n \tprivate async findInstructionFiles(\n \t\tabsoluteLocations: readonly URI[],\n+\t\ttype: TPromptsType,\n \t): Promise<readonly URI[]> {\n+\t\tconst fileExtension = getFileExtension(type);",
        "comment_created_at": "2025-04-11T01:57:34+00:00",
        "comment_author": "legomushroom",
        "comment_body": "Once I saw the `getFileExtension` usage here, I felt its need to be called `getPromptFileExtension` because otherwise it reads as \"get the text after the last . in the name\" ☺️",
        "pr_file_module": null
      },
      {
        "comment_id": "2045223527",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 246231,
        "pr_file": "src/vs/workbench/contrib/chat/common/promptSyntax/utils/promptFilesLocator.ts",
        "discussion_id": "2038682183",
        "commented_code": "@@ -114,7 +116,10 @@ export class PromptFilesLocator {\n \t */\n \tprivate async findInstructionFiles(\n \t\tabsoluteLocations: readonly URI[],\n+\t\ttype: TPromptsType,\n \t): Promise<readonly URI[]> {\n+\t\tconst fileExtension = getFileExtension(type);",
        "comment_created_at": "2025-04-15T18:27:09+00:00",
        "comment_author": "aeschli",
        "comment_body": "This got resolved",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1624549016",
    "pr_number": 213511,
    "pr_file": "src/vs/workbench/services/search/common/searchExtTypesInternal.ts",
    "created_at": "2024-06-03T14:23:11+00:00",
    "commented_code": "+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+import type { FileSearchOptions, TextSearchOptions } from './searchExtTypes';\n+\n+interface SearchOptionsExtendedCommon {\n+\tnumThreads?: number | undefined;\n+}\n+\n+export interface TextSearchOptionsExtended extends TextSearchOptions, SearchOptionsExtendedCommon { }",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1624549016",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 213511,
        "pr_file": "src/vs/workbench/services/search/common/searchExtTypesInternal.ts",
        "discussion_id": "1624549016",
        "commented_code": "@@ -0,0 +1,13 @@\n+/*---------------------------------------------------------------------------------------------\n+ *  Copyright (c) Microsoft Corporation. All rights reserved.\n+ *  Licensed under the MIT License. See License.txt in the project root for license information.\n+ *--------------------------------------------------------------------------------------------*/\n+import type { FileSearchOptions, TextSearchOptions } from './searchExtTypes';\n+\n+interface SearchOptionsExtendedCommon {\n+\tnumThreads?: number | undefined;\n+}\n+\n+export interface TextSearchOptionsExtended extends TextSearchOptions, SearchOptionsExtendedCommon { }",
        "comment_created_at": "2024-06-03T14:23:11+00:00",
        "comment_author": "andreamah",
        "comment_body": "These are specific to ripgrep, so perhaps something like `RipgrepTextSearchOptions` would make this more specific. ",
        "pr_file_module": null
      }
    ]
  }
]