[
  {
    "discussion_id": "2135882097",
    "pr_number": 250675,
    "pr_file": "src/vs/workbench/api/common/extHostNotebookEditor.ts",
    "created_at": "2025-06-09T14:55:59+00:00",
    "commented_code": "}\n \n \t_acceptSelections(selections: vscode.NotebookRange[]): void {\n-\t\tthis._selections = selections.length === 0 ? [new NotebookRange(0, 0)] : selections;\n+\t\tthis._selections = this._validSelections(selections);",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2135882097",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 250675,
        "pr_file": "src/vs/workbench/api/common/extHostNotebookEditor.ts",
        "discussion_id": "2135882097",
        "commented_code": "@@ -94,7 +97,7 @@ export class ExtHostNotebookEditor {\n \t}\n \n \t_acceptSelections(selections: vscode.NotebookRange[]): void {\n-\t\tthis._selections = selections.length === 0 ? [new NotebookRange(0, 0)] : selections;\n+\t\tthis._selections = this._validSelections(selections);",
        "comment_created_at": "2025-06-09T14:55:59+00:00",
        "comment_author": "jrieken",
        "comment_body": "You might wanna handle this one different because it would mean the renderer/us sends a broken selection and that's arguably a programming/logic flaw on our end. For extension-provided values it's a different story",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2216360593",
    "pr_number": 256612,
    "pr_file": "src/vs/workbench/contrib/tasks/common/problemMatcher.ts",
    "created_at": "2025-07-18T15:39:53+00:00",
    "commented_code": "}\n \t\t\tresult.push(pattern);\n \t\t}\n+\t\tif (result.length === 0) {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2216360593",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 256612,
        "pr_file": "src/vs/workbench/contrib/tasks/common/problemMatcher.ts",
        "discussion_id": "2216360593",
        "commented_code": "@@ -987,6 +987,10 @@ export class ProblemPatternParser extends Parser {\n \t\t\t}\n \t\t\tresult.push(pattern);\n \t\t}\n+\t\tif (result.length === 0) {",
        "comment_created_at": "2025-07-18T15:39:53+00:00",
        "comment_author": "anthonykim1",
        "comment_body": "This should be checking for result === undefined or result.length === 0, since we should cover both when problem is defined as empty array and also if it is not provided by user. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2216376005",
    "pr_number": 256612,
    "pr_file": "src/vs/workbench/contrib/tasks/common/problemMatcher.ts",
    "created_at": "2025-07-18T15:48:05+00:00",
    "commented_code": "}\n \n \tprivate validateProblemPattern(values: IProblemPattern[]): boolean {\n+\t\tif (values.length === 0) {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2216376005",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 256612,
        "pr_file": "src/vs/workbench/contrib/tasks/common/problemMatcher.ts",
        "discussion_id": "2216376005",
        "commented_code": "@@ -1042,6 +1046,10 @@ export class ProblemPatternParser extends Parser {\n \t}\n \n \tprivate validateProblemPattern(values: IProblemPattern[]): boolean {\n+\t\tif (values.length === 0) {",
        "comment_created_at": "2025-07-18T15:48:05+00:00",
        "comment_author": "anthonykim1",
        "comment_body": "We should also check for when values is passed in as null and handle this gracefully so that we don't crash on values[0].kind\r\nShould we be considering to mark empty problem pattern as a valid problem pattern? @meganrogge ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2200871503",
    "pr_number": 255187,
    "pr_file": "src/vs/workbench/contrib/chat/browser/actions/chatLanguageModelActions.ts",
    "created_at": "2025-07-11T14:23:55+00:00",
    "commented_code": "void extensionsWorkbenchService.open(extId);\n \t\t\t\t\t}\n \t\t\t\t},\n+\t\t\t\tonDidTriggerItemButton(context) {\n+\t\t\t\t\t// Handle item button clicks\n+\t\t\t\t\tconst extId = context.item.id!;",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2200871503",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 255187,
        "pr_file": "src/vs/workbench/contrib/chat/browser/actions/chatLanguageModelActions.ts",
        "discussion_id": "2200871503",
        "commented_code": "@@ -184,6 +188,14 @@ class ManageLanguageModelAuthenticationAction extends Action2 {\n \t\t\t\t\t\tvoid extensionsWorkbenchService.open(extId);\n \t\t\t\t\t}\n \t\t\t\t},\n+\t\t\t\tonDidTriggerItemButton(context) {\n+\t\t\t\t\t// Handle item button clicks\n+\t\t\t\t\tconst extId = context.item.id!;",
        "comment_created_at": "2025-07-11T14:23:55+00:00",
        "comment_author": "TylerLeonhardt",
        "comment_body": "```suggestion\n\t\t\t\t\tconst extId = context.item.id;\n```\n\nDo we need the bang there if we are checking if extId is defined?\n\nFeel free to fix that in onDidTriggerSeparatorButton as well",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2100279484",
    "pr_number": 249398,
    "pr_file": "src/vs/base/common/async.ts",
    "created_at": "2025-05-21T13:18:51+00:00",
    "commented_code": "}\n }\n \n+export function cancellableIterable<T>(iterableOrIterator: AsyncIterator<T> | AsyncIterable<T>, token: CancellationToken): AsyncIterableIterator<T> {\n+\tconst iterator = Symbol.asyncIterator in iterableOrIterator ? iterableOrIterator[Symbol.asyncIterator]() : iterableOrIterator;\n+\n+\treturn {\n+\t\tasync next(): Promise<IteratorResult<T>> {\n+\t\t\tif (token.isCancellationRequested) {\n+\t\t\t\treturn { done: true, value: undefined };\n+\t\t\t}\n+\t\t\tconst result = await raceCancellation(iterator.next(), token);\n+\t\t\treturn result || { done: true, value: undefined };",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2100279484",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 249398,
        "pr_file": "src/vs/base/common/async.ts",
        "discussion_id": "2100279484",
        "commented_code": "@@ -2169,4 +2169,23 @@ export class AsyncIterableSource<T> {\n \t}\n }\n \n+export function cancellableIterable<T>(iterableOrIterator: AsyncIterator<T> | AsyncIterable<T>, token: CancellationToken): AsyncIterableIterator<T> {\n+\tconst iterator = Symbol.asyncIterator in iterableOrIterator ? iterableOrIterator[Symbol.asyncIterator]() : iterableOrIterator;\n+\n+\treturn {\n+\t\tasync next(): Promise<IteratorResult<T>> {\n+\t\t\tif (token.isCancellationRequested) {\n+\t\t\t\treturn { done: true, value: undefined };\n+\t\t\t}\n+\t\t\tconst result = await raceCancellation(iterator.next(), token);\n+\t\t\treturn result || { done: true, value: undefined };",
        "comment_created_at": "2025-05-21T13:18:51+00:00",
        "comment_author": "jrieken",
        "comment_body": "We should probably do a more correct undefined check here so that `false`, `''` etc won't mean cancellation. The race-function does take a default result which you can uniquely check against",
        "pr_file_module": null
      },
      {
        "comment_id": "2100562486",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 249398,
        "pr_file": "src/vs/base/common/async.ts",
        "discussion_id": "2100279484",
        "commented_code": "@@ -2169,4 +2169,23 @@ export class AsyncIterableSource<T> {\n \t}\n }\n \n+export function cancellableIterable<T>(iterableOrIterator: AsyncIterator<T> | AsyncIterable<T>, token: CancellationToken): AsyncIterableIterator<T> {\n+\tconst iterator = Symbol.asyncIterator in iterableOrIterator ? iterableOrIterator[Symbol.asyncIterator]() : iterableOrIterator;\n+\n+\treturn {\n+\t\tasync next(): Promise<IteratorResult<T>> {\n+\t\t\tif (token.isCancellationRequested) {\n+\t\t\t\treturn { done: true, value: undefined };\n+\t\t\t}\n+\t\t\tconst result = await raceCancellation(iterator.next(), token);\n+\t\t\treturn result || { done: true, value: undefined };",
        "comment_created_at": "2025-05-21T15:19:00+00:00",
        "comment_author": "connor4312",
        "comment_body": "`result` is an `IteratorResult<T>` which'll always be an object, and only undefined if the `token` was cancelled",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091785752",
    "pr_number": 248952,
    "pr_file": "src/vs/base/browser/dom.ts",
    "created_at": "2025-05-15T18:51:16+00:00",
    "commented_code": "return (document.defaultView?.window ?? mainWindow) as CodeWindow;\n }\n \n+export function getFocusedWindow(): CodeWindow | undefined {\n+\tconst document = getActiveDocument();\n+\treturn (document.defaultView?.window) as CodeWindow;",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2091785752",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 248952,
        "pr_file": "src/vs/base/browser/dom.ts",
        "discussion_id": "2091785752",
        "commented_code": "@@ -942,6 +942,11 @@ export function getActiveWindow(): CodeWindow {\n \treturn (document.defaultView?.window ?? mainWindow) as CodeWindow;\n }\n \n+export function getFocusedWindow(): CodeWindow | undefined {\n+\tconst document = getActiveDocument();\n+\treturn (document.defaultView?.window) as CodeWindow;",
        "comment_created_at": "2025-05-15T18:51:16+00:00",
        "comment_author": "bpasero",
        "comment_body": "\n```suggestion\n\treturn (document.defaultView?.window) as CodeWindow | undefined;\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2159633141",
    "pr_number": 252016,
    "pr_file": "src/vs/workbench/contrib/terminalContrib/suggest/browser/terminalSuggestTelemetry.ts",
    "created_at": "2025-06-20T20:37:23+00:00",
    "commented_code": "return;\n \t\t}\n \t\tthis._acceptedCompletions = this._acceptedCompletions || [];\n-\t\tthis._acceptedCompletions.push({ label: typeof completion.label === 'string' ? completion.label : completion.label.label, kind: this._kindMap.get(completion.kind!), sessionId });\n+\t\tthis._acceptedCompletions.push({ label: typeof completion.label === 'string' ? completion.label : completion.label.label, kind: this._kindMap.get(completion.kind!), sessionId, providerId: completion.provider });\n \t}\n \tprivate _sendTelemetryInfo(fromInterrupt?: boolean, exitCode?: number): void {\n \t\tconst commandLine = this._promptInputModel?.value;\n \t\tfor (const completion of this._acceptedCompletions || []) {\n \t\t\tconst label = completion?.label;\n \t\t\tconst kind = completion?.kind;\n+\t\t\tconst providerId = completion?.providerId;\n \n \t\t\tif (label === undefined || commandLine === undefined || kind === undefined) {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2159633141",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 252016,
        "pr_file": "src/vs/workbench/contrib/terminalContrib/suggest/browser/terminalSuggestTelemetry.ts",
        "discussion_id": "2159633141",
        "commented_code": "@@ -46,13 +46,14 @@ export class TerminalSuggestTelemetry extends Disposable {\n \t\t\treturn;\n \t\t}\n \t\tthis._acceptedCompletions = this._acceptedCompletions || [];\n-\t\tthis._acceptedCompletions.push({ label: typeof completion.label === 'string' ? completion.label : completion.label.label, kind: this._kindMap.get(completion.kind!), sessionId });\n+\t\tthis._acceptedCompletions.push({ label: typeof completion.label === 'string' ? completion.label : completion.label.label, kind: this._kindMap.get(completion.kind!), sessionId, providerId: completion.provider });\n \t}\n \tprivate _sendTelemetryInfo(fromInterrupt?: boolean, exitCode?: number): void {\n \t\tconst commandLine = this._promptInputModel?.value;\n \t\tfor (const completion of this._acceptedCompletions || []) {\n \t\t\tconst label = completion?.label;\n \t\t\tconst kind = completion?.kind;\n+\t\t\tconst providerId = completion?.providerId;\n \n \t\t\tif (label === undefined || commandLine === undefined || kind === undefined) {",
        "comment_created_at": "2025-06-20T20:37:23+00:00",
        "comment_author": "Tyriar",
        "comment_body": "Let's verify provider is set here",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2059986193",
    "pr_number": 246643,
    "pr_file": "src/vs/workbench/services/host/electron-sandbox/nativeHostService.ts",
    "created_at": "2025-04-25T10:29:38+00:00",
    "commented_code": "//#region Screenshots\n \n-\tgetScreenshot(): Promise<VSBuffer | undefined> {\n-\t\treturn this.nativeHostService.getScreenshot();\n+\tgetScreenshot(rect?: IRectangle): Promise<VSBuffer | undefined> {\n+\t\treturn this.nativeHostService.getScreenshot(rect);\n+\t}\n+\n+\tasync getElementData(offsetX: number, offsetY: number, token?: CancellationToken): Promise<IElementData | undefined> {\n+\t\tif (token) {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "2059986193",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 246643,
        "pr_file": "src/vs/workbench/services/host/electron-sandbox/nativeHostService.ts",
        "discussion_id": "2059986193",
        "commented_code": "@@ -193,8 +195,21 @@ class WorkbenchHostService extends Disposable implements IHostService {\n \n \t//#region Screenshots\n \n-\tgetScreenshot(): Promise<VSBuffer | undefined> {\n-\t\treturn this.nativeHostService.getScreenshot();\n+\tgetScreenshot(rect?: IRectangle): Promise<VSBuffer | undefined> {\n+\t\treturn this.nativeHostService.getScreenshot(rect);\n+\t}\n+\n+\tasync getElementData(offsetX: number, offsetY: number, token?: CancellationToken): Promise<IElementData | undefined> {\n+\t\tif (token) {",
        "comment_created_at": "2025-04-25T10:29:38+00:00",
        "comment_author": "jrieken",
        "comment_body": "`if(token)` is questionable? Just have it default to `CancellationToken#None` instead",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1624542170",
    "pr_number": 213511,
    "pr_file": "src/vs/workbench/api/test/node/extHostSearch.test.ts",
    "created_at": "2024-06-03T14:18:48+00:00",
    "commented_code": "rpcProtocol,\n \t\t\t\t\tnew class extends mock<IExtHostInitDataService>() { override remote = { isRemote: false, authority: undefined, connectionData: null }; },\n \t\t\t\t\tnew URITransformerService(null),\n+\t\t\t\t\tnew class extends mock<IExtHostConfiguration>() {\n+\t\t\t\t\t\toverride async getConfigProvider() {\n+\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\tgetConfiguration() {\n+\t\t\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\t\t\tget() { }\n+\t\t\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} as unknown as ExtHostConfigProvider;",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1624542170",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 213511,
        "pr_file": "src/vs/workbench/api/test/node/extHostSearch.test.ts",
        "discussion_id": "1624542170",
        "commented_code": "@@ -144,6 +145,17 @@ suite('ExtHostSearch', () => {\n \t\t\t\t\trpcProtocol,\n \t\t\t\t\tnew class extends mock<IExtHostInitDataService>() { override remote = { isRemote: false, authority: undefined, connectionData: null }; },\n \t\t\t\t\tnew URITransformerService(null),\n+\t\t\t\t\tnew class extends mock<IExtHostConfiguration>() {\n+\t\t\t\t\t\toverride async getConfigProvider() {\n+\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\tgetConfiguration() {\n+\t\t\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\t\t\tget() { }\n+\t\t\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} as unknown as ExtHostConfigProvider;",
        "comment_created_at": "2024-06-03T14:18:48+00:00",
        "comment_author": "andreamah",
        "comment_body": "Is this cast necessary? Can we use `satisfies` here instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "1624850813",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 213511,
        "pr_file": "src/vs/workbench/api/test/node/extHostSearch.test.ts",
        "discussion_id": "1624542170",
        "commented_code": "@@ -144,6 +145,17 @@ suite('ExtHostSearch', () => {\n \t\t\t\t\trpcProtocol,\n \t\t\t\t\tnew class extends mock<IExtHostInitDataService>() { override remote = { isRemote: false, authority: undefined, connectionData: null }; },\n \t\t\t\t\tnew URITransformerService(null),\n+\t\t\t\t\tnew class extends mock<IExtHostConfiguration>() {\n+\t\t\t\t\t\toverride async getConfigProvider() {\n+\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\tgetConfiguration() {\n+\t\t\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\t\t\tget() { }\n+\t\t\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} as unknown as ExtHostConfigProvider;",
        "comment_created_at": "2024-06-03T17:57:15+00:00",
        "comment_author": "SimonSiefke",
        "comment_body": "Updated the mock config provider and removed the unknown cast. Thanks for spotting this!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849966260",
    "pr_number": 234220,
    "pr_file": "src/vs/base/common/stream.ts",
    "created_at": "2024-11-20T09:41:22+00:00",
    "commented_code": "error?: IErrorTransformer;\n }\n \n-export function newWriteableStream<T>(reducer: IReducer<T>, options?: WriteableStreamOptions): WriteableStream<T> {\n+export function newWriteableStream<T>(reducer: IReducer<T> | null, options?: WriteableStreamOptions): WriteableStream<T> {",
    "repo_full_name": "microsoft/vscode",
    "discussion_comments": [
      {
        "comment_id": "1849966260",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/base/common/stream.ts",
        "discussion_id": "1849966260",
        "commented_code": "@@ -186,7 +186,7 @@ export interface ITransformer<Original, Transformed> {\n \terror?: IErrorTransformer;\n }\n \n-export function newWriteableStream<T>(reducer: IReducer<T>, options?: WriteableStreamOptions): WriteableStream<T> {\n+export function newWriteableStream<T>(reducer: IReducer<T> | null, options?: WriteableStreamOptions): WriteableStream<T> {",
        "comment_created_at": "2024-11-20T09:41:22+00:00",
        "comment_author": "roblourens",
        "comment_body": "Optional argument? We generally use undefined over null",
        "pr_file_module": null
      },
      {
        "comment_id": "1852658679",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/base/common/stream.ts",
        "discussion_id": "1849966260",
        "commented_code": "@@ -186,7 +186,7 @@ export interface ITransformer<Original, Transformed> {\n \terror?: IErrorTransformer;\n }\n \n-export function newWriteableStream<T>(reducer: IReducer<T>, options?: WriteableStreamOptions): WriteableStream<T> {\n+export function newWriteableStream<T>(reducer: IReducer<T> | null, options?: WriteableStreamOptions): WriteableStream<T> {",
        "comment_created_at": "2024-11-21T18:30:05+00:00",
        "comment_author": "legomushroom",
        "comment_body": "Used `null` on purpose to make it explicit to prevent subtle silent errors. It is too easy to overlook a variable or a function return value being an undefined and pass it over, hence I wanted to make sure the folks that using this to be very specific.\r\n\r\nI do appreciate the work that TS has done with `void` and not treating the `foo?: string` and `foo: undefined | string` the same anymore, but there is still the cases when requiring the explicit `null` saves some hair on your head 🤗 Do you think it would be fine with `undefined`? You have more context so happy to revert if you think it won't be a pain in the future.",
        "pr_file_module": null
      },
      {
        "comment_id": "1865025604",
        "repo_full_name": "microsoft/vscode",
        "pr_number": 234220,
        "pr_file": "src/vs/base/common/stream.ts",
        "discussion_id": "1849966260",
        "commented_code": "@@ -186,7 +186,7 @@ export interface ITransformer<Original, Transformed> {\n \terror?: IErrorTransformer;\n }\n \n-export function newWriteableStream<T>(reducer: IReducer<T>, options?: WriteableStreamOptions): WriteableStream<T> {\n+export function newWriteableStream<T>(reducer: IReducer<T> | null, options?: WriteableStreamOptions): WriteableStream<T> {",
        "comment_created_at": "2024-12-01T21:47:12+00:00",
        "comment_author": "roblourens",
        "comment_body": "I don't think an explicit `undefined` is that different, but you can use what you want",
        "pr_file_module": null
      }
    ]
  }
]