[
  {
    "discussion_id": "2254701541",
    "pr_number": 4005,
    "pr_file": "src/cloudflare/internal/sockets.d.ts",
    "created_at": "2025-08-05T15:30:00+00:00",
    "commented_code": "address: string | SocketAddress,\n   options?: SocketOptions\n ): Socket;\n+\n+export function newHttpClient(socket: Socket): Promise<Fetcher>;",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2254701541",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4005,
        "pr_file": "src/cloudflare/internal/sockets.d.ts",
        "discussion_id": "2254701541",
        "commented_code": "@@ -30,3 +32,5 @@ export function connect(\n   address: string | SocketAddress,\n   options?: SocketOptions\n ): Socket;\n+\n+export function newHttpClient(socket: Socket): Promise<Fetcher>;",
        "comment_created_at": "2025-08-05T15:30:00+00:00",
        "comment_author": "jasnell",
        "comment_body": "We likely want to stress in the documentation that `newHttpClient` is not a part of the \"standard\" `Socket` API that we're proposing in WinterTC.",
        "pr_file_module": null
      },
      {
        "comment_id": "2254744471",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4005,
        "pr_file": "src/cloudflare/internal/sockets.d.ts",
        "discussion_id": "2254701541",
        "commented_code": "@@ -30,3 +32,5 @@ export function connect(\n   address: string | SocketAddress,\n   options?: SocketOptions\n ): Socket;\n+\n+export function newHttpClient(socket: Socket): Promise<Fetcher>;",
        "comment_created_at": "2025-08-05T16:08:19+00:00",
        "comment_author": "danlapid",
        "comment_body": "There's not going to be any documentation, this is an internal only experimental feature.",
        "pr_file_module": null
      },
      {
        "comment_id": "2254880971",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4005,
        "pr_file": "src/cloudflare/internal/sockets.d.ts",
        "discussion_id": "2254701541",
        "commented_code": "@@ -30,3 +32,5 @@ export function connect(\n   address: string | SocketAddress,\n   options?: SocketOptions\n ): Socket;\n+\n+export function newHttpClient(socket: Socket): Promise<Fetcher>;",
        "comment_created_at": "2025-08-05T17:05:45+00:00",
        "comment_author": "dom96",
        "comment_body": "Since it's internal-only, should we give it a name that emphasises this? `internalNewHttpClient` or something?",
        "pr_file_module": null
      },
      {
        "comment_id": "2255401492",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4005,
        "pr_file": "src/cloudflare/internal/sockets.d.ts",
        "discussion_id": "2254701541",
        "commented_code": "@@ -30,3 +32,5 @@ export function connect(\n   address: string | SocketAddress,\n   options?: SocketOptions\n ): Socket;\n+\n+export function newHttpClient(socket: Socket): Promise<Fetcher>;",
        "comment_created_at": "2025-08-05T21:38:16+00:00",
        "comment_author": "danlapid",
        "comment_body": "That's what the experimental guard is for.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2251781445",
    "pr_number": 4663,
    "pr_file": "src/node/internal/internal_http_incoming.ts",
    "created_at": "2025-08-04T15:05:38+00:00",
    "commented_code": "return destination;\n   }\n+\n+  // @ts-expect-error TS2416 Types insist value is a Socket, but it's actually unknown\n+  set connection(value: unknown) {\n+    this.#socket = value;\n+  }",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2251781445",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4663,
        "pr_file": "src/node/internal/internal_http_incoming.ts",
        "discussion_id": "2251781445",
        "commented_code": "@@ -358,6 +359,21 @@ export class IncomingMessage extends Readable implements _IncomingMessage {\n \n     return destination;\n   }\n+\n+  // @ts-expect-error TS2416 Types insist value is a Socket, but it's actually unknown\n+  set connection(value: unknown) {\n+    this.#socket = value;\n+  }",
        "comment_created_at": "2025-08-04T15:05:38+00:00",
        "comment_author": "jasnell",
        "comment_body": "Hm... a comment in here indicating that the `#socket` is not actually used for anything other than making the property available would be ideal. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2226886539",
    "pr_number": 4591,
    "pr_file": "src/node/internal/internal_http_server.ts",
    "created_at": "2025-07-23T22:45:33+00:00",
    "commented_code": "// TODO(soon): Revisit this once we implement net.Server\n     return this;\n   }\n+\n+  get listening(): boolean {\n+    return this.port != null;\n+  }\n+\n+  address(): string | AddressInfo | null {\n+    if (this.port == null) return null;\n+    return { port: this.port, family: 'IPv4', address: '127.0.0.1' };",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2226886539",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/node/internal/internal_http_server.ts",
        "discussion_id": "2226886539",
        "commented_code": "@@ -300,6 +238,32 @@ export class Server\n     // TODO(soon): Revisit this once we implement net.Server\n     return this;\n   }\n+\n+  get listening(): boolean {\n+    return this.port != null;\n+  }\n+\n+  address(): string | AddressInfo | null {\n+    if (this.port == null) return null;\n+    return { port: this.port, family: 'IPv4', address: '127.0.0.1' };",
        "comment_created_at": "2025-07-23T22:45:33+00:00",
        "comment_author": "jasnell",
        "comment_body": "Just noting... we need to make sure we adequately document the fact that an `http.Server` only supports the `listen(...)` variant where we pass in a port to listen. Specifying the hostname, family, etc won't be supported.\r\n\r\nWe also need to make sure we document that `address().address` will always be hardcoded to `127.0.0.1`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2219601498",
    "pr_number": 4581,
    "pr_file": "src/node/internal/internal_http_outgoing.ts",
    "created_at": "2025-07-21T15:50:02+00:00",
    "commented_code": "//     https://opensource.org/licenses/Apache-2.0\n // Copyright Joyent and Node contributors. All rights reserved. MIT license.\n \n+/* eslint-disable @typescript-eslint/no-deprecated */",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2219601498",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4581,
        "pr_file": "src/node/internal/internal_http_outgoing.ts",
        "discussion_id": "2219601498",
        "commented_code": "@@ -3,84 +3,502 @@\n //     https://opensource.org/licenses/Apache-2.0\n // Copyright Joyent and Node contributors. All rights reserved. MIT license.\n \n+/* eslint-disable @typescript-eslint/no-deprecated */",
        "comment_created_at": "2025-07-21T15:50:02+00:00",
        "comment_author": "jasnell",
        "comment_body": "Which addition would trigger the deprecated warning?",
        "pr_file_module": null
      },
      {
        "comment_id": "2219604218",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4581,
        "pr_file": "src/node/internal/internal_http_outgoing.ts",
        "discussion_id": "2219601498",
        "commented_code": "@@ -3,84 +3,502 @@\n //     https://opensource.org/licenses/Apache-2.0\n // Copyright Joyent and Node contributors. All rights reserved. MIT license.\n \n+/* eslint-disable @typescript-eslint/no-deprecated */",
        "comment_created_at": "2025-07-21T15:51:11+00:00",
        "comment_author": "anonrig",
        "comment_body": "`this.finished` and other attributes which is deprecated in types/node package.",
        "pr_file_module": null
      },
      {
        "comment_id": "2219607984",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4581,
        "pr_file": "src/node/internal/internal_http_outgoing.ts",
        "discussion_id": "2219601498",
        "commented_code": "@@ -3,84 +3,502 @@\n //     https://opensource.org/licenses/Apache-2.0\n // Copyright Joyent and Node contributors. All rights reserved. MIT license.\n \n+/* eslint-disable @typescript-eslint/no-deprecated */",
        "comment_created_at": "2025-07-21T15:52:57+00:00",
        "comment_author": "jasnell",
        "comment_body": "Might benefit from a comment about it. Not critical tho.",
        "pr_file_module": null
      },
      {
        "comment_id": "2219610307",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4581,
        "pr_file": "src/node/internal/internal_http_outgoing.ts",
        "discussion_id": "2219601498",
        "commented_code": "@@ -3,84 +3,502 @@\n //     https://opensource.org/licenses/Apache-2.0\n // Copyright Joyent and Node contributors. All rights reserved. MIT license.\n \n+/* eslint-disable @typescript-eslint/no-deprecated */",
        "comment_created_at": "2025-07-21T15:53:57+00:00",
        "comment_author": "anonrig",
        "comment_body": "You're right. A comment will be nice. I'll add.",
        "pr_file_module": null
      }
    ]
  }
]