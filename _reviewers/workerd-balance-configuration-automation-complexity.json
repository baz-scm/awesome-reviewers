[
  {
    "discussion_id": "2287690593",
    "pr_number": 4837,
    "pr_file": "src/pyodide/upload_bundles.py",
    "created_at": "2025-08-20T10:15:39+00:00",
    "commented_code": "res.raise_for_status()\n \n \n-def main():\n+def _get_replacer(backport, integrity):\n+    def replace_values(match):\n+        prefix = match.group(1)\n+        backport_key = match.group(2)\n+        middle = match.group(3)\n+        integrity_key = match.group(4)\n+        return (\n+            f'{prefix}{backport_key}\"{backport}\",{middle}{integrity_key}\"{integrity}\",'\n+        )\n+\n+    return replace_values\n+\n+\n+@dataclass\n+class BundleInfo:\n+    version: str\n+    backport: int\n+    integrity: str\n+    path: Path\n+\n+\n+def update_python_metadata_bzl(bundles: list[BundleInfo]) -> None:\n+    \"\"\"Update python_metadata.bzl file with new backport and integrity values.\"\"\"\n+    metadata_path = (\n+        Path(__file__).parent.parent.parent / \"build\" / \"python_metadata.bzl\"\n+    )\n+    content = metadata_path.read_text()\n+\n+    for info in bundles:\n+        # Find the version block and update backport and integrity\n+        version_pattern = rf'(\\s+{{\\s*\n\\s*\"name\":\\s*\"{re.escape(info.version)}\",.*?)(\"backport\":\\s*)\"[^\"]*\",(.*?)(\"integrity\":\\s*)\"[^\"]*\",'\n+\n+        content = re.sub(\n+            version_pattern,\n+            _get_replacer(info.backport, info.integrity),\n+            content,\n+            flags=re.DOTALL,\n+        )\n+\n+    metadata_path.write_text(content)",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2287690593",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4837,
        "pr_file": "src/pyodide/upload_bundles.py",
        "discussion_id": "2287690593",
        "commented_code": "@@ -64,7 +65,73 @@ def get_backport(ver):\n         res.raise_for_status()\n \n \n-def main():\n+def _get_replacer(backport, integrity):\n+    def replace_values(match):\n+        prefix = match.group(1)\n+        backport_key = match.group(2)\n+        middle = match.group(3)\n+        integrity_key = match.group(4)\n+        return (\n+            f'{prefix}{backport_key}\"{backport}\",{middle}{integrity_key}\"{integrity}\",'\n+        )\n+\n+    return replace_values\n+\n+\n+@dataclass\n+class BundleInfo:\n+    version: str\n+    backport: int\n+    integrity: str\n+    path: Path\n+\n+\n+def update_python_metadata_bzl(bundles: list[BundleInfo]) -> None:\n+    \"\"\"Update python_metadata.bzl file with new backport and integrity values.\"\"\"\n+    metadata_path = (\n+        Path(__file__).parent.parent.parent / \"build\" / \"python_metadata.bzl\"\n+    )\n+    content = metadata_path.read_text()\n+\n+    for info in bundles:\n+        # Find the version block and update backport and integrity\n+        version_pattern = rf'(\\s+{{\\s*\\n\\s*\"name\":\\s*\"{re.escape(info.version)}\",.*?)(\"backport\":\\s*)\"[^\"]*\",(.*?)(\"integrity\":\\s*)\"[^\"]*\",'\n+\n+        content = re.sub(\n+            version_pattern,\n+            _get_replacer(info.backport, info.integrity),\n+            content,\n+            flags=re.DOTALL,\n+        )\n+\n+    metadata_path.write_text(content)",
        "comment_created_at": "2025-08-20T10:15:39+00:00",
        "comment_author": "dom96",
        "comment_body": "I might be the odd one here, but this _feels_ overly fancy and like it will break in unexpected ways. Personally I'd prefer just doing the update manually. It's not like we'll be doing a lot of these, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "2287705389",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4837,
        "pr_file": "src/pyodide/upload_bundles.py",
        "discussion_id": "2287690593",
        "commented_code": "@@ -64,7 +65,73 @@ def get_backport(ver):\n         res.raise_for_status()\n \n \n-def main():\n+def _get_replacer(backport, integrity):\n+    def replace_values(match):\n+        prefix = match.group(1)\n+        backport_key = match.group(2)\n+        middle = match.group(3)\n+        integrity_key = match.group(4)\n+        return (\n+            f'{prefix}{backport_key}\"{backport}\",{middle}{integrity_key}\"{integrity}\",'\n+        )\n+\n+    return replace_values\n+\n+\n+@dataclass\n+class BundleInfo:\n+    version: str\n+    backport: int\n+    integrity: str\n+    path: Path\n+\n+\n+def update_python_metadata_bzl(bundles: list[BundleInfo]) -> None:\n+    \"\"\"Update python_metadata.bzl file with new backport and integrity values.\"\"\"\n+    metadata_path = (\n+        Path(__file__).parent.parent.parent / \"build\" / \"python_metadata.bzl\"\n+    )\n+    content = metadata_path.read_text()\n+\n+    for info in bundles:\n+        # Find the version block and update backport and integrity\n+        version_pattern = rf'(\\s+{{\\s*\\n\\s*\"name\":\\s*\"{re.escape(info.version)}\",.*?)(\"backport\":\\s*)\"[^\"]*\",(.*?)(\"integrity\":\\s*)\"[^\"]*\",'\n+\n+        content = re.sub(\n+            version_pattern,\n+            _get_replacer(info.backport, info.integrity),\n+            content,\n+            flags=re.DOTALL,\n+        )\n+\n+    metadata_path.write_text(content)",
        "comment_created_at": "2025-08-20T10:21:34+00:00",
        "comment_author": "hoodmane",
        "comment_body": "Well I've been doing them fairly often recently. I'm trying to reduce the complexity of Pyodide updates.",
        "pr_file_module": null
      },
      {
        "comment_id": "2287721423",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4837,
        "pr_file": "src/pyodide/upload_bundles.py",
        "discussion_id": "2287690593",
        "commented_code": "@@ -64,7 +65,73 @@ def get_backport(ver):\n         res.raise_for_status()\n \n \n-def main():\n+def _get_replacer(backport, integrity):\n+    def replace_values(match):\n+        prefix = match.group(1)\n+        backport_key = match.group(2)\n+        middle = match.group(3)\n+        integrity_key = match.group(4)\n+        return (\n+            f'{prefix}{backport_key}\"{backport}\",{middle}{integrity_key}\"{integrity}\",'\n+        )\n+\n+    return replace_values\n+\n+\n+@dataclass\n+class BundleInfo:\n+    version: str\n+    backport: int\n+    integrity: str\n+    path: Path\n+\n+\n+def update_python_metadata_bzl(bundles: list[BundleInfo]) -> None:\n+    \"\"\"Update python_metadata.bzl file with new backport and integrity values.\"\"\"\n+    metadata_path = (\n+        Path(__file__).parent.parent.parent / \"build\" / \"python_metadata.bzl\"\n+    )\n+    content = metadata_path.read_text()\n+\n+    for info in bundles:\n+        # Find the version block and update backport and integrity\n+        version_pattern = rf'(\\s+{{\\s*\\n\\s*\"name\":\\s*\"{re.escape(info.version)}\",.*?)(\"backport\":\\s*)\"[^\"]*\",(.*?)(\"integrity\":\\s*)\"[^\"]*\",'\n+\n+        content = re.sub(\n+            version_pattern,\n+            _get_replacer(info.backport, info.integrity),\n+            content,\n+            flags=re.DOTALL,\n+        )\n+\n+    metadata_path.write_text(content)",
        "comment_created_at": "2025-08-20T10:28:13+00:00",
        "comment_author": "hoodmane",
        "comment_body": "I guess we'll find out... if it breaks we can fix it or fall back to doing it manually.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2257173492",
    "pr_number": 4697,
    "pr_file": "src/pyodide/create_vendor_zip.py",
    "created_at": "2025-08-06T13:35:11+00:00",
    "commented_code": "return pyproject_path\n \n \n-def run_pywrangler_sync(work_dir: Path) -> Path:\n+def run_pywrangler_sync(work_dir: Path, python: str | None) -> Path:\n     \"\"\"Run `uv run pywrangler sync` in the specified directory.\"\"\"\n-    run([\"uv\", \"run\", \"pywrangler\", \"sync\"], cwd=work_dir)\n+    env = os.environ.copy()\n+    env[\"_PYODIDE_EXTRA_MOUNTS\"] = str(work_dir)\n+    if python:\n+        env[\"_PYWRANGLER_PYTHON_VERSION\"] = python\n+    run([\"uv\", \"venv\"], cwd=work_dir, env=env)\n+    run([\"uv\", \"pip\", \"install\", \"pyodide-build\"], cwd=work_dir, env=env)\n+    run([\"uv\", \"run\", \"pyodide\", \"xbuildenv\", \"install\"], cwd=work_dir, env=env)",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2257173492",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4697,
        "pr_file": "src/pyodide/create_vendor_zip.py",
        "discussion_id": "2257173492",
        "commented_code": "@@ -39,32 +40,41 @@ def create_pyproject_toml(package_name: str, target_dir: Path) -> Path:\n     return pyproject_path\n \n \n-def run_pywrangler_sync(work_dir: Path) -> Path:\n+def run_pywrangler_sync(work_dir: Path, python: str | None) -> Path:\n     \"\"\"Run `uv run pywrangler sync` in the specified directory.\"\"\"\n-    run([\"uv\", \"run\", \"pywrangler\", \"sync\"], cwd=work_dir)\n+    env = os.environ.copy()\n+    env[\"_PYODIDE_EXTRA_MOUNTS\"] = str(work_dir)\n+    if python:\n+        env[\"_PYWRANGLER_PYTHON_VERSION\"] = python\n+    run([\"uv\", \"venv\"], cwd=work_dir, env=env)\n+    run([\"uv\", \"pip\", \"install\", \"pyodide-build\"], cwd=work_dir, env=env)\n+    run([\"uv\", \"run\", \"pyodide\", \"xbuildenv\", \"install\"], cwd=work_dir, env=env)",
        "comment_created_at": "2025-08-06T13:35:11+00:00",
        "comment_author": "dom96",
        "comment_body": "Why are these necessary? I'd expect pywrangler to take care of these",
        "pr_file_module": null
      },
      {
        "comment_id": "2257304900",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4697,
        "pr_file": "src/pyodide/create_vendor_zip.py",
        "discussion_id": "2257173492",
        "commented_code": "@@ -39,32 +40,41 @@ def create_pyproject_toml(package_name: str, target_dir: Path) -> Path:\n     return pyproject_path\n \n \n-def run_pywrangler_sync(work_dir: Path) -> Path:\n+def run_pywrangler_sync(work_dir: Path, python: str | None) -> Path:\n     \"\"\"Run `uv run pywrangler sync` in the specified directory.\"\"\"\n-    run([\"uv\", \"run\", \"pywrangler\", \"sync\"], cwd=work_dir)\n+    env = os.environ.copy()\n+    env[\"_PYODIDE_EXTRA_MOUNTS\"] = str(work_dir)\n+    if python:\n+        env[\"_PYWRANGLER_PYTHON_VERSION\"] = python\n+    run([\"uv\", \"venv\"], cwd=work_dir, env=env)\n+    run([\"uv\", \"pip\", \"install\", \"pyodide-build\"], cwd=work_dir, env=env)\n+    run([\"uv\", \"run\", \"pyodide\", \"xbuildenv\", \"install\"], cwd=work_dir, env=env)",
        "comment_created_at": "2025-08-06T14:07:11+00:00",
        "comment_author": "hoodmane",
        "comment_body": "pywrangler isn't aware of multiple Python versions yet. It's a TODO.",
        "pr_file_module": null
      }
    ]
  }
]