[
  {
    "discussion_id": "2284949629",
    "pr_number": 4808,
    "pr_file": "src/pyodide/internal/_workers.py",
    "created_at": "2025-08-19T11:26:22+00:00",
    "commented_code": "\"\"\"\n \n     def __init__(self, ctx, env):\n+        _pyodide_entrypoint_helper.patchWaitUntil(ctx)",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2284949629",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4808,
        "pr_file": "src/pyodide/internal/_workers.py",
        "discussion_id": "2284949629",
        "commented_code": "@@ -1101,6 +1101,7 @@ class DurableObject:\n     \"\"\"\n \n     def __init__(self, ctx, env):\n+        _pyodide_entrypoint_helper.patchWaitUntil(ctx)",
        "comment_created_at": "2025-08-19T11:26:22+00:00",
        "comment_author": "dom96",
        "comment_body": "Right now we don't enforce that the super() constructor gets called. But IIRC we patch `env` here in some other place, so you should do this patching there too.\r\n\r\nEither that or we need to start enforcing that all user code calls this constructor.",
        "pr_file_module": null
      },
      {
        "comment_id": "2284992785",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4808,
        "pr_file": "src/pyodide/internal/_workers.py",
        "discussion_id": "2284949629",
        "commented_code": "@@ -1101,6 +1101,7 @@ class DurableObject:\n     \"\"\"\n \n     def __init__(self, ctx, env):\n+        _pyodide_entrypoint_helper.patchWaitUntil(ctx)",
        "comment_created_at": "2025-08-19T11:46:51+00:00",
        "comment_author": "danlapid",
        "comment_body": "This is a good point, I'd rather not require super() constructor gets called.",
        "pr_file_module": null
      },
      {
        "comment_id": "2285271601",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4808,
        "pr_file": "src/pyodide/internal/_workers.py",
        "discussion_id": "2284949629",
        "commented_code": "@@ -1101,6 +1101,7 @@ class DurableObject:\n     \"\"\"\n \n     def __init__(self, ctx, env):\n+        _pyodide_entrypoint_helper.patchWaitUntil(ctx)",
        "comment_created_at": "2025-08-19T13:25:42+00:00",
        "comment_author": "hoodmane",
        "comment_body": "If they don't call `super()`, they can't access `self.ctx`, and the point of this is to make sure that `self.ctx` is patched.",
        "pr_file_module": null
      },
      {
        "comment_id": "2285275802",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4808,
        "pr_file": "src/pyodide/internal/_workers.py",
        "discussion_id": "2284949629",
        "commented_code": "@@ -1101,6 +1101,7 @@ class DurableObject:\n     \"\"\"\n \n     def __init__(self, ctx, env):\n+        _pyodide_entrypoint_helper.patchWaitUntil(ctx)",
        "comment_created_at": "2025-08-19T13:27:00+00:00",
        "comment_author": "danlapid",
        "comment_body": "Is the fetch's version of ctx patched regardless?",
        "pr_file_module": null
      },
      {
        "comment_id": "2285297718",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4808,
        "pr_file": "src/pyodide/internal/_workers.py",
        "discussion_id": "2284949629",
        "commented_code": "@@ -1101,6 +1101,7 @@ class DurableObject:\n     \"\"\"\n \n     def __init__(self, ctx, env):\n+        _pyodide_entrypoint_helper.patchWaitUntil(ctx)",
        "comment_created_at": "2025-08-19T13:34:43+00:00",
        "comment_author": "hoodmane",
        "comment_body": "Oh I see they can still get it as a constructor argument. Okay I moved it into `doPyCallHelper()` which should make it impossible to miss.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2192278578",
    "pr_number": 4470,
    "pr_file": "src/pyodide/internal/_workers.py",
    "created_at": "2025-07-08T11:48:19+00:00",
    "commented_code": "return exc\n \n \n+class NonRetryableError(Exception):\n+    # This is a marker exception used to signal that a workflow step should not be retried.\n+    # This is a special exception used by workflows\n+    pass\n+\n+\n+def _from_js_error(exc: JsException) -> Exception:",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2192278578",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4470,
        "pr_file": "src/pyodide/internal/_workers.py",
        "discussion_id": "2192278578",
        "commented_code": "@@ -200,6 +201,31 @@ def _to_python_exception(exc: JsException) -> Exception:\n         return exc\n \n \n+class NonRetryableError(Exception):\n+    # This is a marker exception used to signal that a workflow step should not be retried.\n+    # This is a special exception used by workflows\n+    pass\n+\n+\n+def _from_js_error(exc: JsException) -> Exception:",
        "comment_created_at": "2025-07-08T11:48:19+00:00",
        "comment_author": "dom96",
        "comment_body": "Any reason not to just put this in `_to_python_exception` instead of defining a new function for it?",
        "pr_file_module": null
      },
      {
        "comment_id": "2192590783",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4470,
        "pr_file": "src/pyodide/internal/_workers.py",
        "discussion_id": "2192278578",
        "commented_code": "@@ -200,6 +201,31 @@ def _to_python_exception(exc: JsException) -> Exception:\n         return exc\n \n \n+class NonRetryableError(Exception):\n+    # This is a marker exception used to signal that a workflow step should not be retried.\n+    # This is a special exception used by workflows\n+    pass\n+\n+\n+def _from_js_error(exc: JsException) -> Exception:",
        "comment_created_at": "2025-07-08T13:49:15+00:00",
        "comment_author": "Caio-Nogueira",
        "comment_body": "I think `_to_python_exception` won't work for this. This is a general error thrown from the Js side. As such `exc.name` will just be `Error`, and the information about the error type is included in the `message` (that includes the traceback).\r\n\r\nAn alternative to this would be moving this added logic to the `_to_python_exception` to make it handle this use cases where errors are caught after a full round trip.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2192534114",
    "pr_number": 4470,
    "pr_file": "src/pyodide/internal/_workers.py",
    "created_at": "2025-07-08T13:27:08+00:00",
    "commented_code": "return exc\n \n \n+class NonRetryableError(Exception):\n+    # This is a marker exception used to signal that a workflow step should not be retried.\n+    # This is a special exception used by workflows\n+    pass\n+\n+\n+def _from_js_error(exc: JsException) -> Exception:\n+    # convert into Python exception after a full round trip\n+    # Python - JS - Python\n+    if not exc.message or not exc.message.startswith(\"PythonError\"):\n+        return _to_python_exception(exc)\n+\n+    # extract the Python exception type from the traceback\n+    error_message_last_line = exc.message.split(\"\n\")[-2]\n+    if error_message_last_line.startswith(\"TypeError\"):\n+        return TypeError(error_message_last_line)\n+    elif error_message_last_line.startswith(\"ValueError\"):\n+        return ValueError(error_message_last_line)\n+    elif error_message_last_line.startswith(\"_workers.NonRetryableError\"):\n+        return NonRetryableError(error_message_last_line)\n+    # TODO(caio): Add support for timeout error from engine\n+    else:\n+        return _to_python_exception(exc)",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2192534114",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4470,
        "pr_file": "src/pyodide/internal/_workers.py",
        "discussion_id": "2192534114",
        "commented_code": "@@ -200,6 +201,31 @@ def _to_python_exception(exc: JsException) -> Exception:\n         return exc\n \n \n+class NonRetryableError(Exception):\n+    # This is a marker exception used to signal that a workflow step should not be retried.\n+    # This is a special exception used by workflows\n+    pass\n+\n+\n+def _from_js_error(exc: JsException) -> Exception:\n+    # convert into Python exception after a full round trip\n+    # Python - JS - Python\n+    if not exc.message or not exc.message.startswith(\"PythonError\"):\n+        return _to_python_exception(exc)\n+\n+    # extract the Python exception type from the traceback\n+    error_message_last_line = exc.message.split(\"\\n\")[-2]\n+    if error_message_last_line.startswith(\"TypeError\"):\n+        return TypeError(error_message_last_line)\n+    elif error_message_last_line.startswith(\"ValueError\"):\n+        return ValueError(error_message_last_line)\n+    elif error_message_last_line.startswith(\"_workers.NonRetryableError\"):\n+        return NonRetryableError(error_message_last_line)\n+    # TODO(caio): Add support for timeout error from engine\n+    else:\n+        return _to_python_exception(exc)",
        "comment_created_at": "2025-07-08T13:27:08+00:00",
        "comment_author": "hoodmane",
        "comment_body": "Probably something like this:\r\n```suggestion\r\n    import builtins\r\n    exc_type = getattr(builtins, exc.type, None)\r\n    if exc.type == \"NonRetryableError\":\r\n       exc_type = NonRetryableError\r\n    if exc_type is not None:\r\n       return exc_type(exc.message)\r\n    return _to_python_exception(exc)\r\n```\r\nAnd agreed with @dom96  that it would make sense to make this change directly in `_to_python_exception()` rather than adding separate logic.",
        "pr_file_module": null
      },
      {
        "comment_id": "2192633557",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4470,
        "pr_file": "src/pyodide/internal/_workers.py",
        "discussion_id": "2192534114",
        "commented_code": "@@ -200,6 +201,31 @@ def _to_python_exception(exc: JsException) -> Exception:\n         return exc\n \n \n+class NonRetryableError(Exception):\n+    # This is a marker exception used to signal that a workflow step should not be retried.\n+    # This is a special exception used by workflows\n+    pass\n+\n+\n+def _from_js_error(exc: JsException) -> Exception:\n+    # convert into Python exception after a full round trip\n+    # Python - JS - Python\n+    if not exc.message or not exc.message.startswith(\"PythonError\"):\n+        return _to_python_exception(exc)\n+\n+    # extract the Python exception type from the traceback\n+    error_message_last_line = exc.message.split(\"\\n\")[-2]\n+    if error_message_last_line.startswith(\"TypeError\"):\n+        return TypeError(error_message_last_line)\n+    elif error_message_last_line.startswith(\"ValueError\"):\n+        return ValueError(error_message_last_line)\n+    elif error_message_last_line.startswith(\"_workers.NonRetryableError\"):\n+        return NonRetryableError(error_message_last_line)\n+    # TODO(caio): Add support for timeout error from engine\n+    else:\n+        return _to_python_exception(exc)",
        "comment_created_at": "2025-07-08T14:06:46+00:00",
        "comment_author": "Caio-Nogueira",
        "comment_body": "> Probably something like this:\r\n> \r\n> And agreed with @dom96 that it would make sense to make this change directly in `_to_python_exception()` rather than adding separate logic.\r\n\r\nI think `type` may be lost across language or rpc barrier:\r\n```\r\n  File \"/lib/python3.12/site-packages/_workers.py\", line 212, in _from_js_error\r\n    exc_type = getattr(builtins, exc.type, None)\r\n                                 ^^^^^^^^\r\nAttributeError: type\r\n```",
        "pr_file_module": null
      }
    ]
  }
]