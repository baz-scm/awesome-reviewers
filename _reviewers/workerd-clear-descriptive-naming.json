[
  {
    "discussion_id": "2239691079",
    "pr_number": 4616,
    "pr_file": "src/pyodide/internal/metadata.ts",
    "created_at": "2025-07-29T12:39:00+00:00",
    "commented_code": "const compatibilityFlags: CompatibilityFlags =\n   (globalThis as CloudflareGlobal)?.Cloudflare?.compatibilityFlags ?? {};\n export const workflowsEnabled: boolean = !!compatibilityFlags.python_workflows;\n+export const pythonNoGlobalHandlers: boolean =\n+  !!compatibilityFlags.python_no_global_handlers;",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2239691079",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4616,
        "pr_file": "src/pyodide/internal/metadata.ts",
        "discussion_id": "2239691079",
        "commented_code": "@@ -54,3 +55,5 @@ export interface CloudflareGlobal {\n const compatibilityFlags: CompatibilityFlags =\n   (globalThis as CloudflareGlobal)?.Cloudflare?.compatibilityFlags ?? {};\n export const workflowsEnabled: boolean = !!compatibilityFlags.python_workflows;\n+export const pythonNoGlobalHandlers: boolean =\n+  !!compatibilityFlags.python_no_global_handlers;",
        "comment_created_at": "2025-07-29T12:39:00+00:00",
        "comment_author": "hoodmane",
        "comment_body": "Can we remove a layer of negation? e.g.,\r\n```suggestion\r\nexport const legacyGlobalHandlers: boolean =\r\n  !compatibilityFlags.python_no_global_handlers;\r\n```\r\nI don't like the double negative of ` !pythonNoGlobalHandlers`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2238113230",
    "pr_number": 4473,
    "pr_file": "src/pyodide/internal/python.ts",
    "created_at": "2025-07-29T01:19:34+00:00",
    "commented_code": "reportError(e as Error);\n   }\n }\n+\n+export function beforeRequest(Module: Module): void {",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2238113230",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4473,
        "pr_file": "src/pyodide/internal/python.ts",
        "discussion_id": "2238113230",
        "commented_code": "@@ -176,3 +200,8 @@ export function loadPyodide(\n     reportError(e as Error);\n   }\n }\n+\n+export function beforeRequest(Module: Module): void {",
        "comment_created_at": "2025-07-29T01:19:34+00:00",
        "comment_author": "anonrig",
        "comment_body": "```suggestion\nexport function beforeRequest(module: Module): void {\n```\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2239213632",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4473,
        "pr_file": "src/pyodide/internal/python.ts",
        "discussion_id": "2238113230",
        "commented_code": "@@ -176,3 +200,8 @@ export function loadPyodide(\n     reportError(e as Error);\n   }\n }\n+\n+export function beforeRequest(Module: Module): void {",
        "comment_created_at": "2025-07-29T09:50:28+00:00",
        "comment_author": "hoodmane",
        "comment_body": "We have this all over the place so if we're going to change it it should be consistent. I think it would be better to rename the type to `ModuleType` personally, since Emscripten calls it `Module` with a capital `M`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2223685535",
    "pr_number": 4591,
    "pr_file": "src/cloudflare/workers.ts",
    "created_at": "2025-07-22T19:45:28+00:00",
    "commented_code": ");\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n+\n+export function registerFetchEvents({ port }: { port?: number } = {}): unknown {",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2223685535",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/cloudflare/workers.ts",
        "discussion_id": "2223685535",
        "commented_code": "@@ -91,3 +92,25 @@ export const env = new Proxy(\n );\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n+\n+export function registerFetchEvents({ port }: { port?: number } = {}): unknown {",
        "comment_created_at": "2025-07-22T19:45:28+00:00",
        "comment_author": "jasnell",
        "comment_body": "Bikeshed: not a big fan of this name as it's not super clear what it means.\r\n\r\nPerhaps `registerPortHandler(...)` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2223687676",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/cloudflare/workers.ts",
        "discussion_id": "2223685535",
        "commented_code": "@@ -91,3 +92,25 @@ export const env = new Proxy(\n );\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n+\n+export function registerFetchEvents({ port }: { port?: number } = {}): unknown {",
        "comment_created_at": "2025-07-22T19:46:44+00:00",
        "comment_author": "anonrig",
        "comment_body": "registerPortHandler might be too limiting, if we want to add a feature to this function in the future. What about preRegisterHandler()?",
        "pr_file_module": null
      },
      {
        "comment_id": "2223695596",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/cloudflare/workers.ts",
        "discussion_id": "2223685535",
        "commented_code": "@@ -91,3 +92,25 @@ export const env = new Proxy(\n );\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n+\n+export function registerFetchEvents({ port }: { port?: number } = {}): unknown {",
        "comment_created_at": "2025-07-22T19:50:26+00:00",
        "comment_author": "jasnell",
        "comment_body": "Add features like what? I'd rather not try to predict the future too much. If we need a new API in the future we can just add it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2223951676",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/cloudflare/workers.ts",
        "discussion_id": "2223685535",
        "commented_code": "@@ -91,3 +92,25 @@ export const env = new Proxy(\n );\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n+\n+export function registerFetchEvents({ port }: { port?: number } = {}): unknown {",
        "comment_created_at": "2025-07-22T22:35:15+00:00",
        "comment_author": "anonrig",
        "comment_body": "> Add features like what?\r\n\r\nHaha, I can't predict future too. I just personally prefer a method that doesn't contain port in it. Maybe we can have a poll in team chat and discuss this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2224144175",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/cloudflare/workers.ts",
        "discussion_id": "2223685535",
        "commented_code": "@@ -91,3 +92,25 @@ export const env = new Proxy(\n );\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n+\n+export function registerFetchEvents({ port }: { port?: number } = {}): unknown {",
        "comment_created_at": "2025-07-23T01:50:01+00:00",
        "comment_author": "jasnell",
        "comment_body": "We've generally tried to avoid designing APIs around hypothetical futures. Pinging @kentonv because I know he's got opinions on public API surface like this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2225969787",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/cloudflare/workers.ts",
        "discussion_id": "2223685535",
        "commented_code": "@@ -91,3 +92,25 @@ export const env = new Proxy(\n );\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n+\n+export function registerFetchEvents({ port }: { port?: number } = {}): unknown {",
        "comment_created_at": "2025-07-23T15:31:26+00:00",
        "comment_author": "kentonv",
        "comment_body": "The purpose of this API is to enable the node compat HTTP server, so it should really contain the word \"node\" in it.\r\n\r\nIt's also not \"registering\" anything -- it just constructs an object and returns it. \"Register\" to me implies that it's adding something to a table somewhere, but in fact it's the `server.listen()` call that does the registration, and this call just looks up registrations.\r\n\r\nMaybe `nodeCompatHttpServerEntrypoint()`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2226222811",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/cloudflare/workers.ts",
        "discussion_id": "2223685535",
        "commented_code": "@@ -91,3 +92,25 @@ export const env = new Proxy(\n );\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n+\n+export function registerFetchEvents({ port }: { port?: number } = {}): unknown {",
        "comment_created_at": "2025-07-23T17:26:11+00:00",
        "comment_author": "jasnell",
        "comment_body": "that name works for me.",
        "pr_file_module": null
      },
      {
        "comment_id": "2226225499",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/cloudflare/workers.ts",
        "discussion_id": "2223685535",
        "commented_code": "@@ -91,3 +92,25 @@ export const env = new Proxy(\n );\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n+\n+export function registerFetchEvents({ port }: { port?: number } = {}): unknown {",
        "comment_created_at": "2025-07-23T17:27:31+00:00",
        "comment_author": "kentonv",
        "comment_body": "Or `nodeCompatHttpServerHandler()`",
        "pr_file_module": null
      },
      {
        "comment_id": "2226428818",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/cloudflare/workers.ts",
        "discussion_id": "2223685535",
        "commented_code": "@@ -91,3 +92,25 @@ export const env = new Proxy(\n );\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n+\n+export function registerFetchEvents({ port }: { port?: number } = {}): unknown {",
        "comment_created_at": "2025-07-23T19:12:45+00:00",
        "comment_author": "anonrig",
        "comment_body": "I've updated the implementation to use `nodeCompatHttpServerHandler`",
        "pr_file_module": null
      }
    ]
  }
]