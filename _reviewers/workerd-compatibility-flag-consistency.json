[
  {
    "discussion_id": "2306620287",
    "pr_number": 4922,
    "pr_file": "src/node/util.ts",
    "created_at": "2025-08-28T08:18:35+00:00",
    "commented_code": "let isSymbol: ((val: unknown) => boolean) | undefined = undefined;\n let isUndefined: ((val: unknown) => boolean) | undefined = undefined;\n \n-if (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol) {\n+if (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol_v23) {",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2306620287",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4922,
        "pr_file": "src/node/util.ts",
        "discussion_id": "2306620287",
        "commented_code": "@@ -55,7 +55,7 @@ let isString: ((val: unknown) => boolean) | undefined = undefined;\n let isSymbol: ((val: unknown) => boolean) | undefined = undefined;\n let isUndefined: ((val: unknown) => boolean) | undefined = undefined;\n \n-if (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol) {\n+if (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol_v23) {",
        "comment_created_at": "2025-08-28T08:18:35+00:00",
        "comment_author": "vicb",
        "comment_body": "IMO we should only include even releases:\n\nWith the current config:\n\n```\n  removeNodejsCompatEOLv23 @118 :Bool\n      $compatEnableFlag(\"remove_nodejs_compat_eol_v23\")\n      $compatDisableFlag(\"add_nodejs_compat_eol_v23\")\n      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2025-09-01\");\n  # Went EOL on 2025-06-01\n```\n\nThose API will be removed on 2025-09-01 (Monday). However they are in [Node 22 that will EOL on 2027-04-30](https://github.com/nodejs/Release/blob/main/README.md#release-schedule)\n\nThis means that projects created from next week using those APIs would work fine on Node 22 (the active LTS) but fail on workerd.\n\n```suggestion\nif (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol_v22) {\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2307167966",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4922,
        "pr_file": "src/node/util.ts",
        "discussion_id": "2306620287",
        "commented_code": "@@ -55,7 +55,7 @@ let isString: ((val: unknown) => boolean) | undefined = undefined;\n let isSymbol: ((val: unknown) => boolean) | undefined = undefined;\n let isUndefined: ((val: unknown) => boolean) | undefined = undefined;\n \n-if (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol) {\n+if (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol_v23) {",
        "comment_created_at": "2025-08-28T11:51:08+00:00",
        "comment_author": "jasnell",
        "comment_body": "I disagree. If we are going to go down this route of tracking eols by version at all, then we should accurately follow which major version an API was eol'd in. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2307545330",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4922,
        "pr_file": "src/node/util.ts",
        "discussion_id": "2306620287",
        "commented_code": "@@ -55,7 +55,7 @@ let isString: ((val: unknown) => boolean) | undefined = undefined;\n let isSymbol: ((val: unknown) => boolean) | undefined = undefined;\n let isUndefined: ((val: unknown) => boolean) | undefined = undefined;\n \n-if (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol) {\n+if (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol_v23) {",
        "comment_created_at": "2025-08-28T14:12:11+00:00",
        "comment_author": "jasnell",
        "comment_body": "Let's do this as a path forward. We have a general `EOL` flag, and version specific flags. The even numbered versioned `EOL` flags will be implied on by the general one, the odd numbered will be implied on by the next highest even numbered.\r\n\r\n* `EOL22` implied by `EOL` at 22 LTS end date\r\n* `EOL23` implied by `EOL24` at 23 support end date\r\n* `EOL24` implied by `EOL` at 24 LTS end date\r\n* etc\r\n\r\nExample: Suppose my worker is running with `EOL22` and I'm using API `foo` ... that `foo` is removed in 23. I update my worker later to EOL24 simply because I updated my compat date, suddenly `foo` is gone. I don't care about any other removed functions but I need `foo`, at least for now, I can turn off the EOL23 flag and get `foo` back but still otherwise be on EOL24.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2307922317",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4922,
        "pr_file": "src/node/util.ts",
        "discussion_id": "2306620287",
        "commented_code": "@@ -55,7 +55,7 @@ let isString: ((val: unknown) => boolean) | undefined = undefined;\n let isSymbol: ((val: unknown) => boolean) | undefined = undefined;\n let isUndefined: ((val: unknown) => boolean) | undefined = undefined;\n \n-if (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol) {\n+if (!Cloudflare.compatibilityFlags.remove_nodejs_compat_eol_v23) {",
        "comment_created_at": "2025-08-28T16:22:00+00:00",
        "comment_author": "vicb",
        "comment_body": "Sure, I think it's the same.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2246067398",
    "pr_number": 4635,
    "pr_file": "src/cloudflare/workers.ts",
    "created_at": "2025-07-31T18:12:23+00:00",
    "commented_code": ");\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n-\n-export function nodeCompatHttpServerHandler(\n-  { port }: { port?: number } = {},\n-  handlers: Record<string, unknown> = {}\n-): {\n-  fetch(request: Request): Promise<Response>;\n-} {\n-  if (port == null) {\n-    throw new Error(\n-      'Port is required when calling nodeCompatHttpServerHandler()'\n-    );\n-  }\n-  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n-  if (handlers == null || typeof handlers !== 'object') {\n-    throw new Error(\n-      'Handlers parameter passed to nodeCompatHttpServerHandler method must be an object'\n-    );\n-  }\n-\n-  return Object.assign(handlers, {\n-    // We intentionally omitted ctx and env variables. Users should use\n-    // importable equivalents to access those values. For example, using\n-    // import { env, waitUntil } from 'cloudflare:workers",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2246067398",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4635,
        "pr_file": "src/cloudflare/workers.ts",
        "discussion_id": "2246067398",
        "commented_code": "@@ -92,41 +91,3 @@ export const env = new Proxy(\n );\n \n export const waitUntil = entrypoints.waitUntil.bind(entrypoints);\n-\n-export function nodeCompatHttpServerHandler(\n-  { port }: { port?: number } = {},\n-  handlers: Record<string, unknown> = {}\n-): {\n-  fetch(request: Request): Promise<Response>;\n-} {\n-  if (port == null) {\n-    throw new Error(\n-      'Port is required when calling nodeCompatHttpServerHandler()'\n-    );\n-  }\n-  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n-  if (handlers == null || typeof handlers !== 'object') {\n-    throw new Error(\n-      'Handlers parameter passed to nodeCompatHttpServerHandler method must be an object'\n-    );\n-  }\n-\n-  return Object.assign(handlers, {\n-    // We intentionally omitted ctx and env variables. Users should use\n-    // importable equivalents to access those values. For example, using\n-    // import { env, waitUntil } from 'cloudflare:workers",
        "comment_created_at": "2025-07-31T18:12:23+00:00",
        "comment_author": "jasnell",
        "comment_body": "Side note... in the docs for the compat flag and the examples, please be sure to mention that the `disallow_importable_env` compat flag should *not* be set if you are using this and need access to the `env` since that will prevent access.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2238330934",
    "pr_number": 4630,
    "pr_file": "src/cloudflare/internal/vectorize-api.ts",
    "created_at": "2025-07-29T03:31:51+00:00",
    "commented_code": "// Copyright (c) 2023 Cloudflare, Inc.\n // Licensed under the Apache 2.0 license found in the LICENSE file or at:\n //     https://opensource.org/licenses/Apache-2.0\n-import { default as flags } from 'workerd:compatibility-flags';\n+declare global {\n+  const Cloudflare: {\n+    readonly compatibilityFlags: Record<string, boolean>;",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2238330934",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4630,
        "pr_file": "src/cloudflare/internal/vectorize-api.ts",
        "discussion_id": "2238330934",
        "commented_code": "@@ -1,7 +1,14 @@\n // Copyright (c) 2023 Cloudflare, Inc.\n // Licensed under the Apache 2.0 license found in the LICENSE file or at:\n //     https://opensource.org/licenses/Apache-2.0\n-import { default as flags } from 'workerd:compatibility-flags';\n+declare global {\n+  const Cloudflare: {\n+    readonly compatibilityFlags: Record<string, boolean>;",
        "comment_created_at": "2025-07-29T03:31:51+00:00",
        "comment_author": "anonrig",
        "comment_body": "Can we explicitly define these values that we use?",
        "pr_file_module": null
      },
      {
        "comment_id": "2238341859",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4630,
        "pr_file": "src/cloudflare/internal/vectorize-api.ts",
        "discussion_id": "2238330934",
        "commented_code": "@@ -1,7 +1,14 @@\n // Copyright (c) 2023 Cloudflare, Inc.\n // Licensed under the Apache 2.0 license found in the LICENSE file or at:\n //     https://opensource.org/licenses/Apache-2.0\n-import { default as flags } from 'workerd:compatibility-flags';\n+declare global {\n+  const Cloudflare: {\n+    readonly compatibilityFlags: Record<string, boolean>;",
        "comment_created_at": "2025-07-29T03:37:55+00:00",
        "comment_author": "jasnell",
        "comment_body": "I'd prefer that we find a way of auto-generating the list from the source capnp file. Let's explore that first rather than adding another thing to manually update. I'm not in a hurry to land this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2233904381",
    "pr_number": 4591,
    "pr_file": "src/node/internal/internal_http_server.ts",
    "created_at": "2025-07-27T10:33:17+00:00",
    "commented_code": "+// Copyright (c) 2017-2022 Cloudflare, Inc.\n+// Licensed under the Apache 2.0 license found in the LICENSE file or at:\n+//     https://opensource.org/licenses/Apache-2.0\n+// Copyright Joyent and Node contributors. All rights reserved. MIT license.\n+\n+// This module implements Node.js-compatible HTTP server functionality on top of\n+// the fetch API due to workerd limitations. The key challenge is bridging Node.js's\n+// stream-based API with the Fetch API's Request/Response model.\n+//\n+// The ServerResponse class implements a single-buffer strategy to minimize memory\n+// usage when converting from Node.js streams to Fetch Response bodies:\n+// - Pre-header data is temporarily buffered until headers are sent\n+// - Post-header data streams directly without intermediate buffering\n+// - Memory is freed immediately after the transition point\n+\n+import {\n+  ERR_METHOD_NOT_IMPLEMENTED,\n+  ERR_HTTP_HEADERS_SENT,\n+  ERR_HTTP_INVALID_STATUS_CODE,\n+  ERR_INVALID_CHAR,\n+  ERR_INVALID_ARG_VALUE,\n+  ERR_OUT_OF_RANGE,\n+  ERR_OPTION_NOT_IMPLEMENTED,\n+  ERR_SERVER_ALREADY_LISTEN,\n+} from 'node-internal:internal_errors';\n+import { EventEmitter } from 'node-internal:events';\n+import {\n+  kUniqueHeaders,\n+  OutgoingMessage,\n+  parseUniqueHeadersOption,\n+} from 'node-internal:internal_http_outgoing';\n+import {\n+  validateBoolean,\n+  validateInteger,\n+  validateObject,\n+  validatePort,\n+} from 'node-internal:validators';\n+import { portMapper } from 'cloudflare-internal:http';\n+import { IncomingMessage } from 'node-internal:internal_http_incoming';\n+import { STATUS_CODES } from 'node-internal:internal_http_constants';\n+import {\n+  kServerResponse,\n+  kIncomingMessage,\n+} from 'node-internal:internal_http_util';\n+import {\n+  kOutHeaders,\n+  WrittenDataBufferEntry,\n+  HeadersSentEvent,\n+} from 'node-internal:internal_http_outgoing';\n+import {\n+  chunkExpression,\n+  _checkInvalidHeaderChar,\n+} from 'node-internal:internal_http';\n+import { _normalizeArgs } from 'node-internal:internal_net';\n+import { Buffer } from 'node-internal:internal_buffer';\n+\n+import type {\n+  Server as _Server,\n+  ServerResponse as _ServerResponse,\n+  RequestListener,\n+  ServerOptions,\n+  OutgoingHttpHeaders,\n+  OutgoingHttpHeader,\n+} from 'node:http';\n+import type { Socket, AddressInfo } from 'node:net';\n+import { default as flags } from 'workerd:compatibility-flags';\n+\n+export const kConnectionsCheckingInterval = Symbol(\n+  'http.server.connectionsCheckingInterval'\n+);\n+\n+let serverRegistry: FinalizationRegistry<number> | null = null;\n+\n+// Since finalization registry is only available under a specific compat flag,\n+// let's check if it's enabled to preserve backward compatibility.",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2233904381",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/node/internal/internal_http_server.ts",
        "discussion_id": "2233904381",
        "commented_code": "@@ -0,0 +1,760 @@\n+// Copyright (c) 2017-2022 Cloudflare, Inc.\n+// Licensed under the Apache 2.0 license found in the LICENSE file or at:\n+//     https://opensource.org/licenses/Apache-2.0\n+// Copyright Joyent and Node contributors. All rights reserved. MIT license.\n+\n+// This module implements Node.js-compatible HTTP server functionality on top of\n+// the fetch API due to workerd limitations. The key challenge is bridging Node.js's\n+// stream-based API with the Fetch API's Request/Response model.\n+//\n+// The ServerResponse class implements a single-buffer strategy to minimize memory\n+// usage when converting from Node.js streams to Fetch Response bodies:\n+// - Pre-header data is temporarily buffered until headers are sent\n+// - Post-header data streams directly without intermediate buffering\n+// - Memory is freed immediately after the transition point\n+\n+import {\n+  ERR_METHOD_NOT_IMPLEMENTED,\n+  ERR_HTTP_HEADERS_SENT,\n+  ERR_HTTP_INVALID_STATUS_CODE,\n+  ERR_INVALID_CHAR,\n+  ERR_INVALID_ARG_VALUE,\n+  ERR_OUT_OF_RANGE,\n+  ERR_OPTION_NOT_IMPLEMENTED,\n+  ERR_SERVER_ALREADY_LISTEN,\n+} from 'node-internal:internal_errors';\n+import { EventEmitter } from 'node-internal:events';\n+import {\n+  kUniqueHeaders,\n+  OutgoingMessage,\n+  parseUniqueHeadersOption,\n+} from 'node-internal:internal_http_outgoing';\n+import {\n+  validateBoolean,\n+  validateInteger,\n+  validateObject,\n+  validatePort,\n+} from 'node-internal:validators';\n+import { portMapper } from 'cloudflare-internal:http';\n+import { IncomingMessage } from 'node-internal:internal_http_incoming';\n+import { STATUS_CODES } from 'node-internal:internal_http_constants';\n+import {\n+  kServerResponse,\n+  kIncomingMessage,\n+} from 'node-internal:internal_http_util';\n+import {\n+  kOutHeaders,\n+  WrittenDataBufferEntry,\n+  HeadersSentEvent,\n+} from 'node-internal:internal_http_outgoing';\n+import {\n+  chunkExpression,\n+  _checkInvalidHeaderChar,\n+} from 'node-internal:internal_http';\n+import { _normalizeArgs } from 'node-internal:internal_net';\n+import { Buffer } from 'node-internal:internal_buffer';\n+\n+import type {\n+  Server as _Server,\n+  ServerResponse as _ServerResponse,\n+  RequestListener,\n+  ServerOptions,\n+  OutgoingHttpHeaders,\n+  OutgoingHttpHeader,\n+} from 'node:http';\n+import type { Socket, AddressInfo } from 'node:net';\n+import { default as flags } from 'workerd:compatibility-flags';\n+\n+export const kConnectionsCheckingInterval = Symbol(\n+  'http.server.connectionsCheckingInterval'\n+);\n+\n+let serverRegistry: FinalizationRegistry<number> | null = null;\n+\n+// Since finalization registry is only available under a specific compat flag,\n+// let's check if it's enabled to preserve backward compatibility.",
        "comment_created_at": "2025-07-27T10:33:17+00:00",
        "comment_author": "vicb",
        "comment_body": "nits: \n- \"jsWeakRef\" is more specific than \"a specific\"\n- Not really \"backward compatibility\" but rather have to do with flags?\n\n```suggestion\n// The finalization registry is only available under the `jsWeakRef` flag\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2237398230",
    "pr_number": 4591,
    "pr_file": "src/node/internal/events.ts",
    "created_at": "2025-07-28T17:35:10+00:00",
    "commented_code": "}\n       );\n       // Only the newer process version compat adds process.emitWarning support.\n-      if (Cloudflare.compatibilityFlags['enable_nodejs_process_v2'])",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2237398230",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/node/internal/events.ts",
        "discussion_id": "2237398230",
        "commented_code": "@@ -520,8 +520,7 @@ function _addListener(\n         }\n       );\n       // Only the newer process version compat adds process.emitWarning support.\n-      if (Cloudflare.compatibilityFlags['enable_nodejs_process_v2'])",
        "comment_created_at": "2025-07-28T17:35:10+00:00",
        "comment_author": "jasnell",
        "comment_body": "Revert this to use `Cloudflare.compatibilityFlags`",
        "pr_file_module": null
      },
      {
        "comment_id": "2237513479",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/node/internal/events.ts",
        "discussion_id": "2237398230",
        "commented_code": "@@ -520,8 +520,7 @@ function _addListener(\n         }\n       );\n       // Only the newer process version compat adds process.emitWarning support.\n-      if (Cloudflare.compatibilityFlags['enable_nodejs_process_v2'])",
        "comment_created_at": "2025-07-28T18:23:22+00:00",
        "comment_author": "jasnell",
        "comment_body": "It doesn't appear functionality related to the `node:http` stuff, isn't require to enable `node:http` server, and is changing it in the wrong direction (we should be moving to `Cloudflare.compatibilityFlags` and not away from it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2237515635",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/node/internal/events.ts",
        "discussion_id": "2237398230",
        "commented_code": "@@ -520,8 +520,7 @@ function _addListener(\n         }\n       );\n       // Only the newer process version compat adds process.emitWarning support.\n-      if (Cloudflare.compatibilityFlags['enable_nodejs_process_v2'])",
        "comment_created_at": "2025-07-28T18:24:32+00:00",
        "comment_author": "anonrig",
        "comment_body": "I'll address this in a follow up. I've added a TODO to the compatibility_flags.d.ts file",
        "pr_file_module": null
      }
    ]
  }
]