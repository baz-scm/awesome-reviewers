[
  {
    "discussion_id": "2305302592",
    "pr_number": 4922,
    "pr_file": "src/workerd/io/compatibility-date.capnp",
    "created_at": "2025-08-27T21:08:34+00:00",
    "commented_code": "# a temporary error on email delivery.\n   # Note that by enabling this, user-provided Message-IDs are stripped and\n   # Email Workers will generate and use its own.\n+\n+  removeNodejsCompatEOLv22 @117 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v22\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v22\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2027-04-30\");",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2305302592",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4922,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2305302592",
        "commented_code": "@@ -1025,4 +1025,20 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n   # a temporary error on email delivery.\n   # Note that by enabling this, user-provided Message-IDs are stripped and\n   # Email Workers will generate and use its own.\n+\n+  removeNodejsCompatEOLv22 @117 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v22\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v22\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2027-04-30\");",
        "comment_created_at": "2025-08-27T21:08:34+00:00",
        "comment_author": "jasnell",
        "comment_body": "These need some documentation with them. We also should document the strategy here under the `removeNodejsCompatEOL` flag just to provide more context.",
        "pr_file_module": null
      },
      {
        "comment_id": "2307568658",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4922,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2305302592",
        "commented_code": "@@ -1025,4 +1025,20 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n   # a temporary error on email delivery.\n   # Note that by enabling this, user-provided Message-IDs are stripped and\n   # Email Workers will generate and use its own.\n+\n+  removeNodejsCompatEOLv22 @117 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v22\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v22\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2027-04-30\");",
        "comment_created_at": "2025-08-28T14:20:23+00:00",
        "comment_author": "jasnell",
        "comment_body": "```suggestion\r\n      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2027-04-30\");\r\n  # Removes APIs that reached end-of-life in Node.js 22.x. When using the\r\n  # removeNodejsCompatEOL flag, this will default enable on/after 2027-04-30.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2307564070",
    "pr_number": 4922,
    "pr_file": "src/workerd/io/compatibility-date.capnp",
    "created_at": "2025-08-28T14:18:51+00:00",
    "commented_code": "# a temporary error on email delivery.\n   # Note that by enabling this, user-provided Message-IDs are stripped and\n   # Email Workers will generate and use its own.\n+\n+  removeNodejsCompatEOLv22 @117 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v22\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v22\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2027-04-30\");\n+\n+  removeNodejsCompatEOLv23 @118 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v23\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v23\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2025-09-01\");",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2307564070",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4922,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2307564070",
        "commented_code": "@@ -1025,4 +1025,20 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n   # a temporary error on email delivery.\n   # Note that by enabling this, user-provided Message-IDs are stripped and\n   # Email Workers will generate and use its own.\n+\n+  removeNodejsCompatEOLv22 @117 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v22\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v22\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2027-04-30\");\n+\n+  removeNodejsCompatEOLv23 @118 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v23\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v23\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2025-09-01\");",
        "comment_created_at": "2025-08-28T14:18:51+00:00",
        "comment_author": "jasnell",
        "comment_body": "```suggestion\r\n      $impliedByAfterDate(name = \"removeNodejsCompatEOLv24\", date = \"2025-09-01\");\r\n  # Removes APIs that reached end-of-life in Node.js 23.x. This will default\r\n  # enable when the removeNodejsCompatEOLv24 flag is enabled after 2025-09-01.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2307572017",
    "pr_number": 4922,
    "pr_file": "src/workerd/io/compatibility-date.capnp",
    "created_at": "2025-08-28T14:21:34+00:00",
    "commented_code": "# a temporary error on email delivery.\n   # Note that by enabling this, user-provided Message-IDs are stripped and\n   # Email Workers will generate and use its own.\n+\n+  removeNodejsCompatEOLv22 @117 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v22\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v22\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2027-04-30\");\n+\n+  removeNodejsCompatEOLv23 @118 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v23\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v23\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2025-09-01\");\n+  # Went EOL on 2025-06-01\n+\n+  removeNodejsCompatEOLv24 @119 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v24\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v24\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2028-04-30\");",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2307572017",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4922,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2307572017",
        "commented_code": "@@ -1025,4 +1025,20 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n   # a temporary error on email delivery.\n   # Note that by enabling this, user-provided Message-IDs are stripped and\n   # Email Workers will generate and use its own.\n+\n+  removeNodejsCompatEOLv22 @117 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v22\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v22\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2027-04-30\");\n+\n+  removeNodejsCompatEOLv23 @118 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v23\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v23\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2025-09-01\");\n+  # Went EOL on 2025-06-01\n+\n+  removeNodejsCompatEOLv24 @119 :Bool\n+      $compatEnableFlag(\"remove_nodejs_compat_eol_v24\")\n+      $compatDisableFlag(\"add_nodejs_compat_eol_v24\")\n+      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2028-04-30\");",
        "comment_created_at": "2025-08-28T14:21:34+00:00",
        "comment_author": "jasnell",
        "comment_body": "```suggestion\r\n      $impliedByAfterDate(name = \"removeNodejsCompatEOL\", date = \"2028-04-30\");\r\n  # Removes APIs that reached end-of-life in Node.js 24.x. When using the\r\n\t# removeNodejsCompatEOL flag, this will default enable on/after 2028-04-30.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2274791187",
    "pr_number": 4776,
    "pr_file": "src/workerd/io/compatibility-date.capnp",
    "created_at": "2025-08-13T22:39:24+00:00",
    "commented_code": "#    generated and evaluated code.\n   # This flag is experimental and may be removed in the future. It is added for\n   # testing purposes.\n+\n+  typescriptTranspile @114 :Bool\n+    $compatEnableFlag(\"typescript_transpile\")\n+    $experimental;\n+  # Transpiles all Typescript files to JavaScript using swc transpiler.\n+  # This transpilation results in reformatting all the code and (currently) source map information\n+  # is lost. It will result in incorrect line numbers in stack traces.\n+  # This flag is never intended to be used enabled by default and has no effect in production.",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2274791187",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4776,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2274791187",
        "commented_code": "@@ -990,4 +991,12 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n   #    generated and evaluated code.\n   # This flag is experimental and may be removed in the future. It is added for\n   # testing purposes.\n+\n+  typescriptTranspile @114 :Bool\n+    $compatEnableFlag(\"typescript_transpile\")\n+    $experimental;\n+  # Transpiles all Typescript files to JavaScript using swc transpiler.\n+  # This transpilation results in reformatting all the code and (currently) source map information\n+  # is lost. It will result in incorrect line numbers in stack traces.\n+  # This flag is never intended to be used enabled by default and has no effect in production.",
        "comment_created_at": "2025-08-13T22:39:24+00:00",
        "comment_author": "jasnell",
        "comment_body": "Let's also document that the type stripping flag is mutually exclusive and will take precedence if both happen to be defined.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2268152611",
    "pr_number": 3509,
    "pr_file": "src/workerd/io/compatibility-date.capnp",
    "created_at": "2025-08-11T22:30:52+00:00",
    "commented_code": "# This flag is intended to be a roll-up flag. That is, as additional APIs\n   # reach EOL, new compat flags will be added for those that will have\n   # `impliedByAfterDate(name = \"removeNodeJsCompatEOL\", ...` annotations.\n+  \n+  enableWorfkflowScriptValidation @109 :Bool\n+      $compatEnableFlag(\"validate_workflow_entrypoint\")\n+      $compatDisableFlag(\"no_validate_workflow_entrypoint\")\n+      $compatEnableDate(\"2025-08-20\");\n+  # enables validation for workflow entrypoint without breaking workflows deployed without validation",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2268152611",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 3509,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2268152611",
        "commented_code": "@@ -947,4 +947,10 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n   # This flag is intended to be a roll-up flag. That is, as additional APIs\n   # reach EOL, new compat flags will be added for those that will have\n   # `impliedByAfterDate(name = \"removeNodeJsCompatEOL\", ...` annotations.\n+  \n+  enableWorfkflowScriptValidation @109 :Bool\n+      $compatEnableFlag(\"validate_workflow_entrypoint\")\n+      $compatDisableFlag(\"no_validate_workflow_entrypoint\")\n+      $compatEnableDate(\"2025-08-20\");\n+  # enables validation for workflow entrypoint without breaking workflows deployed without validation",
        "comment_created_at": "2025-08-11T22:30:52+00:00",
        "comment_author": "danlapid",
        "comment_body": "```suggestion\r\n  # This flag enables additional checks in the control plane to validate that workflows are \r\n  # defined and used correctly.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2258243177",
    "pr_number": 4706,
    "pr_file": "src/workerd/io/compatibility-date.capnp",
    "created_at": "2025-08-06T20:37:48+00:00",
    "commented_code": "$compatEnableDate(\"2025-08-11\");\n   # Disables adding `/session/metadata/vendor` to the Python Worker's sys.path. So Workers using\n   # this flag will have to place their vendored modules in a `python_modules` directory.\n+\n+  removeNodejsCompatEOL @108 :Bool\n+    $compatEnableFlag(\"remove_nodejs_compat_eol_methods\")\n+    $compatDisableFlag(\"add_nodejs_compat_eol_methods\")\n+    $impliedByAfterDate(name = \"nodeJsCompat\", date = \"2025-09-01\");\n+  # Removes the Node.js compatibility layer for EOL versions of Node.js.",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2258243177",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4706,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2258243177",
        "commented_code": "@@ -935,4 +935,10 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n       $compatEnableDate(\"2025-08-11\");\n   # Disables adding `/session/metadata/vendor` to the Python Worker's sys.path. So Workers using\n   # this flag will have to place their vendored modules in a `python_modules` directory.\n+\n+  removeNodejsCompatEOL @108 :Bool\n+    $compatEnableFlag(\"remove_nodejs_compat_eol_methods\")\n+    $compatDisableFlag(\"add_nodejs_compat_eol_methods\")\n+    $impliedByAfterDate(name = \"nodeJsCompat\", date = \"2025-09-01\");\n+  # Removes the Node.js compatibility layer for EOL versions of Node.js.",
        "comment_created_at": "2025-08-06T20:37:48+00:00",
        "comment_author": "jasnell",
        "comment_body": "Let's expand this comment a bit...\r\n\r\n```suggestion\r\n  # Removes the Node.js compatibility layer for EOL versions of Node.js.\r\n  # When the flag is enabled, APIs that have reached End-of-Life in Node.js\r\n  # will be removed for workers. When disabled, the APIs are present (but\r\n  # might still be non-functional stubs)\r\n  # This flag is intended to be a roll-up flag. That is, as additional APIs\r\n  # reach EOL, new compat flags will be added for those that will have\r\n  # `impliedByAfterDate(name = \"removeNodeJsCompatEOL\" , ...` annotations.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2233898787",
    "pr_number": 4591,
    "pr_file": "src/workerd/api/node/tests/http-server-nodejs-test.wd-test",
    "created_at": "2025-07-27T10:20:09+00:00",
    "commented_code": "+using Workerd = import \"/workerd/workerd.capnp\";\n+\n+const unitTests :Workerd.Config = (\n+  services = [\n+    ( name = \"http-server-nodejs-test\",\n+      worker = (\n+        modules = [\n+          (name = \"worker\", esModule = embed \"http-server-nodejs-test.js\")\n+        ],\n+        compatibilityDate = \"2025-01-15\",\n+        compatibilityFlags = [\"nodejs_compat\", \"experimental\", \"enable_nodejs_http_modules\", \"enable_nodejs_http_server_modules\"],",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2233898787",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/workerd/api/node/tests/http-server-nodejs-test.wd-test",
        "discussion_id": "2233898787",
        "commented_code": "@@ -0,0 +1,20 @@\n+using Workerd = import \"/workerd/workerd.capnp\";\n+\n+const unitTests :Workerd.Config = (\n+  services = [\n+    ( name = \"http-server-nodejs-test\",\n+      worker = (\n+        modules = [\n+          (name = \"worker\", esModule = embed \"http-server-nodejs-test.js\")\n+        ],\n+        compatibilityDate = \"2025-01-15\",\n+        compatibilityFlags = [\"nodejs_compat\", \"experimental\", \"enable_nodejs_http_modules\", \"enable_nodejs_http_server_modules\"],",
        "comment_created_at": "2025-07-27T10:20:09+00:00",
        "comment_author": "vicb",
        "comment_body": "For here it looks like both \"enable_nodejs_http_modules\" and \"enable_nodejs_http_server_modules\" are required to enable the server.\n\nCould you please clarify that in `compatibility-date.capnp` where there is no mention to that:\n\n```ts\n  enableNodejsHttpServerModules @103 :Bool\n      $compatEnableFlag(\"enable_nodejs_http_server_modules\")\n      $compatDisableFlag(\"disable_nodejs_http_server_modules\");\n  # Enables Node.js http server related modules such as node:_http_server\n```\n\nWhat I would like to see documented:\n\nWhat would happen if \"enable_nodejs_http_server_modules\" is used without \"enable_nodejs_http_modules\" - if that works we should document that.\n\nIf that doesn't work and both flags have to be enabled, you could change to say that \"enable_nodejs_http_modules\" is implied by \"enable_nodejs_http_server_modules\"\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2234005868",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4591,
        "pr_file": "src/workerd/api/node/tests/http-server-nodejs-test.wd-test",
        "discussion_id": "2233898787",
        "commented_code": "@@ -0,0 +1,20 @@\n+using Workerd = import \"/workerd/workerd.capnp\";\n+\n+const unitTests :Workerd.Config = (\n+  services = [\n+    ( name = \"http-server-nodejs-test\",\n+      worker = (\n+        modules = [\n+          (name = \"worker\", esModule = embed \"http-server-nodejs-test.js\")\n+        ],\n+        compatibilityDate = \"2025-01-15\",\n+        compatibilityFlags = [\"nodejs_compat\", \"experimental\", \"enable_nodejs_http_modules\", \"enable_nodejs_http_server_modules\"],",
        "comment_created_at": "2025-07-27T14:19:54+00:00",
        "comment_author": "jasnell",
        "comment_body": "Eventially both of these would have `impliedByAfter` annotations such that they would just be on when `nodejs_compat` is enabled... but yeah, some expanded docs about the relationship of these flags is helpful.",
        "pr_file_module": null
      }
    ]
  }
]