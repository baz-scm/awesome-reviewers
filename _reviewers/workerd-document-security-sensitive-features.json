[
  {
    "discussion_id": "2274795894",
    "pr_number": 4775,
    "pr_file": "src/workerd/io/compatibility-date.capnp",
    "created_at": "2025-08-13T22:42:45+00:00",
    "commented_code": "#    generated and evaluated code.\n   # This flag is experimental and may be removed in the future. It is added for\n   # testing purposes.\n+\n+  stripAuthorizationOnCrossOriginRedirect @114 :Bool\n+      $compatEnableFlag(\"strip_authorization_on_cross_origin_redirect\")\n+      $compatDisableFlag(\"retain_authorization_on_cross_origin_redirect\")\n+      $compatEnableDate(\"2025-09-01\");\n+  # This flag ensures the Authorization header is not passed on if a request is redirected to a URL\n+  # with a different origin than the requested URL. This behavior is required by the WHATWG fetch\n+  # specification. For security reasons, this flag should not be disabled.",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2274795894",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4775,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2274795894",
        "commented_code": "@@ -990,4 +990,12 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n   #    generated and evaluated code.\n   # This flag is experimental and may be removed in the future. It is added for\n   # testing purposes.\n+\n+  stripAuthorizationOnCrossOriginRedirect @114 :Bool\n+      $compatEnableFlag(\"strip_authorization_on_cross_origin_redirect\")\n+      $compatDisableFlag(\"retain_authorization_on_cross_origin_redirect\")\n+      $compatEnableDate(\"2025-09-01\");\n+  # This flag ensures the Authorization header is not passed on if a request is redirected to a URL\n+  # with a different origin than the requested URL. This behavior is required by the WHATWG fetch\n+  # specification. For security reasons, this flag should not be disabled.",
        "comment_created_at": "2025-08-13T22:42:45+00:00",
        "comment_author": "kentonv",
        "comment_body": "I actually disagree with this. It is usually not a security risk to disable this flag, and in fact may be desirable. In fact I think it was a mistake for the spec to add this requirement -- but since they added it, we have to follow it.\n\nI would change the comment to something like:\n\n> The current version of the Fetch API spec requires that, when automatic redirects are enabled, and a redirect points to a URL at a different origin, if the original request contained an `Authorization` header, that header must be removed before following the redirect. This requirement was added to the Fetch spec in 2022, well after Cloudflare Workers originally implemented it. Hence, Workers did not originally implement this requirement. This requirement is backwards-incompatible, and so the new behavior is guarded by a compatibility flag. Note that the old behavior was not inherently insecure, and indeed could be desirable in many circumstances. For example, if an API that requires authorization wishes to change its hostname, it might wish to redirect to the new hostname while having the client send along their credentials. Under the new fetch behavior, such a redirect will break clients, and this has legitimately broken real use cases. However, it's true that the old behavior could be a \"gotcha\" leading to security problems when combined with other mistakes. Hence, the spec was changed, and Workers must follow the spec.",
        "pr_file_module": null
      },
      {
        "comment_id": "2274804677",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4775,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2274795894",
        "commented_code": "@@ -990,4 +990,12 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n   #    generated and evaluated code.\n   # This flag is experimental and may be removed in the future. It is added for\n   # testing purposes.\n+\n+  stripAuthorizationOnCrossOriginRedirect @114 :Bool\n+      $compatEnableFlag(\"strip_authorization_on_cross_origin_redirect\")\n+      $compatDisableFlag(\"retain_authorization_on_cross_origin_redirect\")\n+      $compatEnableDate(\"2025-09-01\");\n+  # This flag ensures the Authorization header is not passed on if a request is redirected to a URL\n+  # with a different origin than the requested URL. This behavior is required by the WHATWG fetch\n+  # specification. For security reasons, this flag should not be disabled.",
        "comment_created_at": "2025-08-13T22:51:01+00:00",
        "comment_author": "jasnell",
        "comment_body": "We might also set a new record for most number of new compat flags added in a single week lol",
        "pr_file_module": null
      },
      {
        "comment_id": "2274805674",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4775,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2274795894",
        "commented_code": "@@ -990,4 +990,12 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n   #    generated and evaluated code.\n   # This flag is experimental and may be removed in the future. It is added for\n   # testing purposes.\n+\n+  stripAuthorizationOnCrossOriginRedirect @114 :Bool\n+      $compatEnableFlag(\"strip_authorization_on_cross_origin_redirect\")\n+      $compatDisableFlag(\"retain_authorization_on_cross_origin_redirect\")\n+      $compatEnableDate(\"2025-09-01\");\n+  # This flag ensures the Authorization header is not passed on if a request is redirected to a URL\n+  # with a different origin than the requested URL. This behavior is required by the WHATWG fetch\n+  # specification. For security reasons, this flag should not be disabled.",
        "comment_created_at": "2025-08-13T22:51:49+00:00",
        "comment_author": "npaun",
        "comment_body": "I had to fix merge conflicts twice within a couple minutes, so I think that might be accurate.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2274705944",
    "pr_number": 4773,
    "pr_file": "src/workerd/io/compatibility-date.capnp",
    "created_at": "2025-08-13T21:40:41+00:00",
    "commented_code": "$compatDisableFlag(\"disable_nodejs_http2_module\")\n     $impliedByAfterDate(name = \"nodeJsCompat\", date = \"2025-09-01\");\n   # Enables the Node.js http2 module stubs.\n+\n+  experimentalAllowEvalAlways @113 :Bool\n+      $compatEnableFlag(\"allow_insecure_inefficient_logged_eval\")",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2274705944",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4773,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2274705944",
        "commented_code": "@@ -975,4 +975,19 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n     $compatDisableFlag(\"disable_nodejs_http2_module\")\n     $impliedByAfterDate(name = \"nodeJsCompat\", date = \"2025-09-01\");\n   # Enables the Node.js http2 module stubs.\n+\n+  experimentalAllowEvalAlways @113 :Bool\n+      $compatEnableFlag(\"allow_insecure_inefficient_logged_eval\")",
        "comment_created_at": "2025-08-13T21:40:41+00:00",
        "comment_author": "kentonv",
        "comment_body": "Let's call this `allow_insecure_inefficient_logged_eval`, since if we do decide to make it  non-experimental someday, that's what we want to call it.\n\nThe intend is to get people to say \"oh maybe I should read the docs quickly to understand what this is all about\", where we can warn them that it is:\n\n* insecure: It is disastrous for security if any part of the eval()ed content is provided by an attacker.\n* inefficient: If you are using eval() to lazily compile code on first use, note that this architecture is likely not a great fit for Workers, where we create many many instances of your Worker. (If/when we implement script caching and memory snapshots, this argument becomes more clearcut.)\n* logged: We will be logging any code passed to eval() for use in forensics. Do not put PII into eval()ed strings. (Of course, if you have PII in eval()ed strings, that probably implies you are eval()ing user-controlled content, which is insecure, regardless of the logging.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2274708528",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4773,
        "pr_file": "src/workerd/io/compatibility-date.capnp",
        "discussion_id": "2274705944",
        "commented_code": "@@ -975,4 +975,19 @@ struct CompatibilityFlags @0x8f8c1b68151b6cef {\n     $compatDisableFlag(\"disable_nodejs_http2_module\")\n     $impliedByAfterDate(name = \"nodeJsCompat\", date = \"2025-09-01\");\n   # Enables the Node.js http2 module stubs.\n+\n+  experimentalAllowEvalAlways @113 :Bool\n+      $compatEnableFlag(\"allow_insecure_inefficient_logged_eval\")",
        "comment_created_at": "2025-08-13T21:41:56+00:00",
        "comment_author": "npaun",
        "comment_body": "You're not thinking big enough. React has `__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2263559677",
    "pr_number": 4612,
    "pr_file": "src/workerd/api/pyodide/setup-emscripten.c++",
    "created_at": "2025-08-08T16:56:50+00:00",
    "commented_code": "pyodideAsmWasmReader = module.getData();\n     }\n   }\n+  js.setAllowEval(true);\n+  KJ_DEFER(js.setAllowEval(false));",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2263559677",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4612,
        "pr_file": "src/workerd/api/pyodide/setup-emscripten.c++",
        "discussion_id": "2263559677",
        "commented_code": "@@ -82,6 +82,8 @@ EmscriptenRuntime EmscriptenRuntime::initialize(\n       pyodideAsmWasmReader = module.getData();\n     }\n   }\n+  js.setAllowEval(true);\n+  KJ_DEFER(js.setAllowEval(false));",
        "comment_created_at": "2025-08-08T16:56:50+00:00",
        "comment_author": "dom96",
        "comment_body": "Why is this necessary? Can you add a comment? Also can you add a guard somewhere to assert that `allowEval` is false before executing the user's Python code? Just in case we mess up in cases like this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2266196427",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4612,
        "pr_file": "src/workerd/api/pyodide/setup-emscripten.c++",
        "discussion_id": "2263559677",
        "commented_code": "@@ -82,6 +82,8 @@ EmscriptenRuntime EmscriptenRuntime::initialize(\n       pyodideAsmWasmReader = module.getData();\n     }\n   }\n+  js.setAllowEval(true);\n+  KJ_DEFER(js.setAllowEval(false));",
        "comment_created_at": "2025-08-11T09:53:39+00:00",
        "comment_author": "hoodmane",
        "comment_body": "Seems like it might not be necessary. I removed it, lets see if CI passes.",
        "pr_file_module": null
      }
    ]
  }
]