[
  {
    "discussion_id": "2262990518",
    "pr_number": 4727,
    "pr_file": "src/workerd/api/kv-instrumentation-test.js",
    "created_at": "2025-08-08T13:31:55+00:00",
    "commented_code": "return (event) => {\n       switch (event.event.type) {\n         case 'spanOpen':\n-          // The span ids will change between tests, but Map preserves insertion order\n-          spans.set(event.spanId, { name: event.event.name });\n+          // span ids are simple counters for tests, but invocation ID allows us to differentiate them\n+          spans.set(event.invocationId + event.event.spanId, {\n+            name: event.event.name,\n+          });\n           break;\n         case 'attributes': {\n-          let span = spans.get(event.spanId);\n+          let span = spans.get(event.invocationId + event.spanId);",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2262990518",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4727,
        "pr_file": "src/workerd/api/kv-instrumentation-test.js",
        "discussion_id": "2262990518",
        "commented_code": "@@ -24,21 +24,23 @@ export default {\n     return (event) => {\n       switch (event.event.type) {\n         case 'spanOpen':\n-          // The span ids will change between tests, but Map preserves insertion order\n-          spans.set(event.spanId, { name: event.event.name });\n+          // span ids are simple counters for tests, but invocation ID allows us to differentiate them\n+          spans.set(event.invocationId + event.event.spanId, {\n+            name: event.event.name,\n+          });\n           break;\n         case 'attributes': {\n-          let span = spans.get(event.spanId);\n+          let span = spans.get(event.invocationId + event.spanId);",
        "comment_created_at": "2025-08-08T13:31:55+00:00",
        "comment_author": "jasnell",
        "comment_body": "You're performing this operation (`event.invocationId + event.spanId`) multiple times in this block. Might be easier to maintain to do it once before entering the switch.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2240614285",
    "pr_number": 4636,
    "pr_file": "src/workerd/api/node/tests/http-server-nodejs-test.js",
    "created_at": "2025-07-29T18:17:32+00:00",
    "commented_code": "},\n };\n \n+// Test is taken from test/parallel/test-http-server-timeouts-validation.js\n+export const testHttpServerTimeoutsValidation = {\n+  async test() {\n+    // This test validates that the HTTP server timeouts are properly validated and set.\n+\n+    {\n+      const server = http.createServer();\n+      strictEqual(server.headersTimeout, 60000);\n+      strictEqual(server.requestTimeout, 300000);\n+    }\n+\n+    {\n+      const server = http.createServer({\n+        headersTimeout: 10000,\n+        requestTimeout: 20000,\n+      });\n+      strictEqual(server.headersTimeout, 10000);",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2240614285",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4636,
        "pr_file": "src/workerd/api/node/tests/http-server-nodejs-test.js",
        "discussion_id": "2240614285",
        "commented_code": "@@ -300,6 +394,63 @@ export const testHttpServerOptionsServerResponse = {\n   },\n };\n \n+// Test is taken from test/parallel/test-http-server-timeouts-validation.js\n+export const testHttpServerTimeoutsValidation = {\n+  async test() {\n+    // This test validates that the HTTP server timeouts are properly validated and set.\n+\n+    {\n+      const server = http.createServer();\n+      strictEqual(server.headersTimeout, 60000);\n+      strictEqual(server.requestTimeout, 300000);\n+    }\n+\n+    {\n+      const server = http.createServer({\n+        headersTimeout: 10000,\n+        requestTimeout: 20000,\n+      });\n+      strictEqual(server.headersTimeout, 10000);",
        "comment_created_at": "2025-07-29T18:17:32+00:00",
        "comment_author": "vicb",
        "comment_body": "nit: use `10_000` for consistency and readability",
        "pr_file_module": null
      }
    ]
  }
]