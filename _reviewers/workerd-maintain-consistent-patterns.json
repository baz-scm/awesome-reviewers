[
  {
    "discussion_id": "2291926701",
    "pr_number": 4857,
    "pr_file": "src/node/module.ts",
    "created_at": "2025-08-21T19:16:24+00:00",
    "commented_code": "];\n Object.freeze(builtinModules);\n \n+export function register(): void {\n+  // TODO(soon): We might support this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.register');\n+}\n+\n+export function runMain(): void {\n+  // We don't plan to support this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.runMain');\n+}\n+\n+export function syncBuiltinESMExports(): void {\n+  // TODO(soon): Investigate the possibility of supporting this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.syncBuiltinESMExports');\n+}\n+\n+export function wrap(): void {\n+  // TODO(soon): Investigate the possibility of supporting this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.wrap');\n+}\n+\n+export const globalPaths: string[] = [];\n+\n+export const constants = {\n+  compileCacheStatus: {\n+    __proto__: null,\n+    FAILED: 0,\n+    ENABLED: 1,\n+    ALREADY_ENABLED: 2,\n+    DISABLED: 3,\n+  },\n+};\n+\n+export const _cache = { __proto__: null };\n+export const _pathCache = { __proto__: null };",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2291926701",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4857,
        "pr_file": "src/node/module.ts",
        "discussion_id": "2291926701",
        "commented_code": "@@ -110,8 +156,168 @@ export const builtinModules = [\n ];\n Object.freeze(builtinModules);\n \n+export function register(): void {\n+  // TODO(soon): We might support this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.register');\n+}\n+\n+export function runMain(): void {\n+  // We don't plan to support this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.runMain');\n+}\n+\n+export function syncBuiltinESMExports(): void {\n+  // TODO(soon): Investigate the possibility of supporting this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.syncBuiltinESMExports');\n+}\n+\n+export function wrap(): void {\n+  // TODO(soon): Investigate the possibility of supporting this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.wrap');\n+}\n+\n+export const globalPaths: string[] = [];\n+\n+export const constants = {\n+  compileCacheStatus: {\n+    __proto__: null,\n+    FAILED: 0,\n+    ENABLED: 1,\n+    ALREADY_ENABLED: 2,\n+    DISABLED: 3,\n+  },\n+};\n+\n+export const _cache = { __proto__: null };\n+export const _pathCache = { __proto__: null };",
        "comment_created_at": "2025-08-21T19:16:24+00:00",
        "comment_author": "jasnell",
        "comment_body": "Elsewhere you use `Object.create(null)`. Don't have a preference but likely best to stay consistent.",
        "pr_file_module": null
      },
      {
        "comment_id": "2291937568",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4857,
        "pr_file": "src/node/module.ts",
        "discussion_id": "2291926701",
        "commented_code": "@@ -110,8 +156,168 @@ export const builtinModules = [\n ];\n Object.freeze(builtinModules);\n \n+export function register(): void {\n+  // TODO(soon): We might support this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.register');\n+}\n+\n+export function runMain(): void {\n+  // We don't plan to support this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.runMain');\n+}\n+\n+export function syncBuiltinESMExports(): void {\n+  // TODO(soon): Investigate the possibility of supporting this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.syncBuiltinESMExports');\n+}\n+\n+export function wrap(): void {\n+  // TODO(soon): Investigate the possibility of supporting this in the future.\n+  throw new ERR_METHOD_NOT_IMPLEMENTED('module.wrap');\n+}\n+\n+export const globalPaths: string[] = [];\n+\n+export const constants = {\n+  compileCacheStatus: {\n+    __proto__: null,\n+    FAILED: 0,\n+    ENABLED: 1,\n+    ALREADY_ENABLED: 2,\n+    DISABLED: 3,\n+  },\n+};\n+\n+export const _cache = { __proto__: null };\n+export const _pathCache = { __proto__: null };",
        "comment_created_at": "2025-08-21T19:22:14+00:00",
        "comment_author": "anonrig",
        "comment_body": "I've used Object.create(null) because unenv uses that. In here node.js uses __proto__: null. I can make them both use __proto__: null.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2243723325",
    "pr_number": 4643,
    "pr_file": "src/cloudflare/vectorize.ts",
    "created_at": "2025-07-30T19:56:23+00:00",
    "commented_code": "* A pre-configured list of known models.\n  * These can be supplied in place of configuring explicit dimensions.\n  */\n-export enum KnownModel {\n-  'openai/text-embedding-ada-002' = 'openai/text-embedding-ada-002',\n-  'cohere/embed-multilingual-v2.0' = 'cohere/embed-multilingual-v2.0',\n-  '@cf/baai/bge-small-en-v1.5' = '@cf/baai/bge-small-en-v1.5',\n-  '@cf/baai/bge-base-en-v1.5' = '@cf/baai/bge-base-en-v1.5',\n-  '@cf/baai/bge-large-en-v1.5' = '@cf/baai/bge-large-en-v1.5',\n-}\n+export const KnownModel = {\n+  'openai/text-embedding-ada-002': 'openai/text-embedding-ada-002',\n+  'cohere/embed-multilingual-v2.0': 'cohere/embed-multilingual-v2.0',\n+  '@cf/baai/bge-small-en-v1.5': '@cf/baai/bge-small-en-v1.5',\n+  '@cf/baai/bge-base-en-v1.5': '@cf/baai/bge-base-en-v1.5',\n+  '@cf/baai/bge-large-en-v1.5': '@cf/baai/bge-large-en-v1.5',\n+};",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2243723325",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4643,
        "pr_file": "src/cloudflare/vectorize.ts",
        "discussion_id": "2243723325",
        "commented_code": "@@ -6,41 +6,41 @@\n  * A pre-configured list of known models.\n  * These can be supplied in place of configuring explicit dimensions.\n  */\n-export enum KnownModel {\n-  'openai/text-embedding-ada-002' = 'openai/text-embedding-ada-002',\n-  'cohere/embed-multilingual-v2.0' = 'cohere/embed-multilingual-v2.0',\n-  '@cf/baai/bge-small-en-v1.5' = '@cf/baai/bge-small-en-v1.5',\n-  '@cf/baai/bge-base-en-v1.5' = '@cf/baai/bge-base-en-v1.5',\n-  '@cf/baai/bge-large-en-v1.5' = '@cf/baai/bge-large-en-v1.5',\n-}\n+export const KnownModel = {\n+  'openai/text-embedding-ada-002': 'openai/text-embedding-ada-002',\n+  'cohere/embed-multilingual-v2.0': 'cohere/embed-multilingual-v2.0',\n+  '@cf/baai/bge-small-en-v1.5': '@cf/baai/bge-small-en-v1.5',\n+  '@cf/baai/bge-base-en-v1.5': '@cf/baai/bge-base-en-v1.5',\n+  '@cf/baai/bge-large-en-v1.5': '@cf/baai/bge-large-en-v1.5',\n+};",
        "comment_created_at": "2025-07-30T19:56:23+00:00",
        "comment_author": "dario-piotrowicz",
        "comment_body": "what about adding `as const` here for more precise types? \ud83e\udd14 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2251786593",
    "pr_number": 4663,
    "pr_file": "src/node/internal/internal_http_outgoing.ts",
    "created_at": "2025-08-04T15:07:37+00:00",
    "commented_code": "// exists and is currently writable, it would flush any pending data to the socket and then\n     // write the current chunk's data directly into the socket. Afterwards, it would return with the\n     // value returned from socket.write().\n-    if (this.#buffer != null) {\n+    if (this.#buffer != null && (this._header !== null || this._headerSent)) {",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2251786593",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4663,
        "pr_file": "src/node/internal/internal_http_outgoing.ts",
        "discussion_id": "2251786593",
        "commented_code": "@@ -916,11 +921,21 @@ export class OutgoingMessage extends Writable implements _OutgoingMessage {\n     // exists and is currently writable, it would flush any pending data to the socket and then\n     // write the current chunk's data directly into the socket. Afterwards, it would return with the\n     // value returned from socket.write().\n-    if (this.#buffer != null) {\n+    if (this.#buffer != null && (this._header !== null || this._headerSent)) {",
        "comment_created_at": "2025-08-04T15:07:37+00:00",
        "comment_author": "jasnell",
        "comment_body": "I know this already merged but as a follow up, the next time someone is in this code, since the `_header !== null || this._headerSent` check is duplicated several times it might make sense to separate out into a utility function for reuse.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2238329868",
    "pr_number": 4630,
    "pr_file": "src/cloudflare/internal/vectorize-api.ts",
    "created_at": "2025-07-29T03:30:37+00:00",
    "commented_code": "// Copyright (c) 2023 Cloudflare, Inc.\n // Licensed under the Apache 2.0 license found in the LICENSE file or at:\n //     https://opensource.org/licenses/Apache-2.0\n-import { default as flags } from 'workerd:compatibility-flags';\n+declare global {",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2238329868",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4630,
        "pr_file": "src/cloudflare/internal/vectorize-api.ts",
        "discussion_id": "2238329868",
        "commented_code": "@@ -1,7 +1,14 @@\n // Copyright (c) 2023 Cloudflare, Inc.\n // Licensed under the Apache 2.0 license found in the LICENSE file or at:\n //     https://opensource.org/licenses/Apache-2.0\n-import { default as flags } from 'workerd:compatibility-flags';\n+declare global {",
        "comment_created_at": "2025-07-29T03:30:37+00:00",
        "comment_author": "anonrig",
        "comment_body": "Can we move this to internal/globals.d.ts file and include it in Cloudflare/tsconfig so we don't have to import it on every place",
        "pr_file_module": null
      },
      {
        "comment_id": "2240416968",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4630,
        "pr_file": "src/cloudflare/internal/vectorize-api.ts",
        "discussion_id": "2238329868",
        "commented_code": "@@ -1,7 +1,14 @@\n // Copyright (c) 2023 Cloudflare, Inc.\n // Licensed under the Apache 2.0 license found in the LICENSE file or at:\n //     https://opensource.org/licenses/Apache-2.0\n-import { default as flags } from 'workerd:compatibility-flags';\n+declare global {",
        "comment_created_at": "2025-07-29T16:46:57+00:00",
        "comment_author": "jasnell",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2239687443",
    "pr_number": 4616,
    "pr_file": "src/pyodide/internal/metadata.ts",
    "created_at": "2025-07-29T12:37:46+00:00",
    "commented_code": "export interface CompatibilityFlags {\n   python_workflows?: boolean;\n+  python_no_global_handlers?: boolean;\n   [key: string]: boolean | undefined;",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2239687443",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4616,
        "pr_file": "src/pyodide/internal/metadata.ts",
        "discussion_id": "2239687443",
        "commented_code": "@@ -42,6 +42,7 @@ export const MAIN_MODULE_NAME = MetadataReader.getMainModule();\n \n export interface CompatibilityFlags {\n   python_workflows?: boolean;\n+  python_no_global_handlers?: boolean;\n   [key: string]: boolean | undefined;",
        "comment_created_at": "2025-07-29T12:37:46+00:00",
        "comment_author": "hoodmane",
        "comment_body": "Maybe we should get rid of the `[key: string]` signature and just add new flags here as we use them.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191004197",
    "pr_number": 4476,
    "pr_file": "src/node/internal/internal_http_constants.ts",
    "created_at": "2025-07-07T21:00:13+00:00",
    "commented_code": "//     https://opensource.org/licenses/Apache-2.0\n // Copyright Joyent and Node contributors. All rights reserved. MIT license.\n \n-export const METHODS = [\n-  'ACL',\n-  'BIND',\n-  'CHECKOUT',\n-  'CONNECT',\n-  'COPY',\n-  'DELETE',\n-  'GET',\n-  'HEAD',\n-  'LINK',\n-  'LOCK',\n-  'M-SEARCH',\n-  'MERGE',\n-  'MKACTIVITY',\n-  'MKCALENDAR',\n-  'MKCOL',\n-  'MOVE',\n-  'NOTIFY',\n-  'OPTIONS',\n-  'PATCH',\n-  'POST',\n-  'PROPFIND',\n-  'PROPPATCH',\n-  'PURGE',\n-  'PUT',\n-  'QUERY',\n-  'REBIND',\n-  'REPORT',\n-  'SEARCH',\n-  'SOURCE',\n-  'SUBSCRIBE',\n-  'TRACE',\n-  'UNBIND',\n-  'UNLINK',\n-  'UNLOCK',\n-  'UNSUBSCRIBE',\n-].toSorted();\n+export const METHODS = Object.freeze(\n+  [\n+    'ACL',\n+    'BIND',\n+    'CHECKOUT',\n+    'CONNECT',\n+    'COPY',\n+    'DELETE',\n+    'GET',\n+    'HEAD',\n+    'LINK',\n+    'LOCK',\n+    'M-SEARCH',\n+    'MERGE',\n+    'MKACTIVITY',\n+    'MKCALENDAR',\n+    'MKCOL',\n+    'MOVE',\n+    'NOTIFY',\n+    'OPTIONS',\n+    'PATCH',\n+    'POST',\n+    'PROPFIND',\n+    'PROPPATCH',\n+    'PURGE',\n+    'PUT',\n+    'QUERY',\n+    'REBIND',\n+    'REPORT',\n+    'SEARCH',\n+    'SOURCE',\n+    'SUBSCRIBE',\n+    'TRACE',\n+    'UNBIND',\n+    'UNLINK',\n+    'UNLOCK',\n+    'UNSUBSCRIBE',\n+  ].toSorted()\n+);\n \n-export const STATUS_CODES: Record<string, string> = {\n+export const STATUS_CODES: Record<string, string> = Object.freeze({",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2191004197",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4476,
        "pr_file": "src/node/internal/internal_http_constants.ts",
        "discussion_id": "2191004197",
        "commented_code": "@@ -3,45 +3,47 @@\n //     https://opensource.org/licenses/Apache-2.0\n // Copyright Joyent and Node contributors. All rights reserved. MIT license.\n \n-export const METHODS = [\n-  'ACL',\n-  'BIND',\n-  'CHECKOUT',\n-  'CONNECT',\n-  'COPY',\n-  'DELETE',\n-  'GET',\n-  'HEAD',\n-  'LINK',\n-  'LOCK',\n-  'M-SEARCH',\n-  'MERGE',\n-  'MKACTIVITY',\n-  'MKCALENDAR',\n-  'MKCOL',\n-  'MOVE',\n-  'NOTIFY',\n-  'OPTIONS',\n-  'PATCH',\n-  'POST',\n-  'PROPFIND',\n-  'PROPPATCH',\n-  'PURGE',\n-  'PUT',\n-  'QUERY',\n-  'REBIND',\n-  'REPORT',\n-  'SEARCH',\n-  'SOURCE',\n-  'SUBSCRIBE',\n-  'TRACE',\n-  'UNBIND',\n-  'UNLINK',\n-  'UNLOCK',\n-  'UNSUBSCRIBE',\n-].toSorted();\n+export const METHODS = Object.freeze(\n+  [\n+    'ACL',\n+    'BIND',\n+    'CHECKOUT',\n+    'CONNECT',\n+    'COPY',\n+    'DELETE',\n+    'GET',\n+    'HEAD',\n+    'LINK',\n+    'LOCK',\n+    'M-SEARCH',\n+    'MERGE',\n+    'MKACTIVITY',\n+    'MKCALENDAR',\n+    'MKCOL',\n+    'MOVE',\n+    'NOTIFY',\n+    'OPTIONS',\n+    'PATCH',\n+    'POST',\n+    'PROPFIND',\n+    'PROPPATCH',\n+    'PURGE',\n+    'PUT',\n+    'QUERY',\n+    'REBIND',\n+    'REPORT',\n+    'SEARCH',\n+    'SOURCE',\n+    'SUBSCRIBE',\n+    'TRACE',\n+    'UNBIND',\n+    'UNLINK',\n+    'UNLOCK',\n+    'UNSUBSCRIBE',\n+  ].toSorted()\n+);\n \n-export const STATUS_CODES: Record<string, string> = {\n+export const STATUS_CODES: Record<string, string> = Object.freeze({",
        "comment_created_at": "2025-07-07T21:00:13+00:00",
        "comment_author": "guybedford",
        "comment_body": "Node.js STATUS_CODES _are mutable_, so I wonder if we might hit issues with this?",
        "pr_file_module": null
      },
      {
        "comment_id": "2191016053",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4476,
        "pr_file": "src/node/internal/internal_http_constants.ts",
        "discussion_id": "2191004197",
        "commented_code": "@@ -3,45 +3,47 @@\n //     https://opensource.org/licenses/Apache-2.0\n // Copyright Joyent and Node contributors. All rights reserved. MIT license.\n \n-export const METHODS = [\n-  'ACL',\n-  'BIND',\n-  'CHECKOUT',\n-  'CONNECT',\n-  'COPY',\n-  'DELETE',\n-  'GET',\n-  'HEAD',\n-  'LINK',\n-  'LOCK',\n-  'M-SEARCH',\n-  'MERGE',\n-  'MKACTIVITY',\n-  'MKCALENDAR',\n-  'MKCOL',\n-  'MOVE',\n-  'NOTIFY',\n-  'OPTIONS',\n-  'PATCH',\n-  'POST',\n-  'PROPFIND',\n-  'PROPPATCH',\n-  'PURGE',\n-  'PUT',\n-  'QUERY',\n-  'REBIND',\n-  'REPORT',\n-  'SEARCH',\n-  'SOURCE',\n-  'SUBSCRIBE',\n-  'TRACE',\n-  'UNBIND',\n-  'UNLINK',\n-  'UNLOCK',\n-  'UNSUBSCRIBE',\n-].toSorted();\n+export const METHODS = Object.freeze(\n+  [\n+    'ACL',\n+    'BIND',\n+    'CHECKOUT',\n+    'CONNECT',\n+    'COPY',\n+    'DELETE',\n+    'GET',\n+    'HEAD',\n+    'LINK',\n+    'LOCK',\n+    'M-SEARCH',\n+    'MERGE',\n+    'MKACTIVITY',\n+    'MKCALENDAR',\n+    'MKCOL',\n+    'MOVE',\n+    'NOTIFY',\n+    'OPTIONS',\n+    'PATCH',\n+    'POST',\n+    'PROPFIND',\n+    'PROPPATCH',\n+    'PURGE',\n+    'PUT',\n+    'QUERY',\n+    'REBIND',\n+    'REPORT',\n+    'SEARCH',\n+    'SOURCE',\n+    'SUBSCRIBE',\n+    'TRACE',\n+    'UNBIND',\n+    'UNLINK',\n+    'UNLOCK',\n+    'UNSUBSCRIBE',\n+  ].toSorted()\n+);\n \n-export const STATUS_CODES: Record<string, string> = {\n+export const STATUS_CODES: Record<string, string> = Object.freeze({",
        "comment_created_at": "2025-07-07T21:09:35+00:00",
        "comment_author": "jasnell",
        "comment_body": "+1... we should not freeze these. There is code in the ecosystem that mutates this.",
        "pr_file_module": null
      }
    ]
  }
]