[
  {
    "discussion_id": "2216579402",
    "pr_number": 4572,
    "pr_file": "src/workerd/api/tests/js-rpc-test.js",
    "created_at": "2025-07-18T17:36:52+00:00",
    "commented_code": "})()\n     );\n   }\n+\n+  testImportedWaitUntil() {\n+    // Initialize globalWaitUntilPromise to a promise that will be resolved in a waitUntil task\n+    // later on. We'll perform a cross-context wait to verify that the waitUntil task actually\n+    // completes and resolves the promise.\n+    let resolve;\n+    globalWaitUntilPromise = new Promise((r) => {\n+      resolve = r;\n+    });\n+\n+    waitUntil(\n+      (async () => {\n+        await scheduler.wait(100);\n+        resolve();\n+      })()\n+    );",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2216579402",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4572,
        "pr_file": "src/workerd/api/tests/js-rpc-test.js",
        "discussion_id": "2216579402",
        "commented_code": "@@ -455,6 +456,23 @@ export class MyService extends WorkerEntrypoint {\n       })()\n     );\n   }\n+\n+  testImportedWaitUntil() {\n+    // Initialize globalWaitUntilPromise to a promise that will be resolved in a waitUntil task\n+    // later on. We'll perform a cross-context wait to verify that the waitUntil task actually\n+    // completes and resolves the promise.\n+    let resolve;\n+    globalWaitUntilPromise = new Promise((r) => {\n+      resolve = r;\n+    });\n+\n+    waitUntil(\n+      (async () => {\n+        await scheduler.wait(100);\n+        resolve();\n+      })()\n+    );",
        "comment_created_at": "2025-07-18T17:36:52+00:00",
        "comment_author": "jasnell",
        "comment_body": "nit: I believe you could simplify this down to...\r\n```suggestion\r\n    waitUntil(scheduler.wait(100).then(resolve));\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2216587649",
    "pr_number": 4572,
    "pr_file": "src/workerd/api/tests/js-rpc-test.js",
    "created_at": "2025-07-18T17:42:31+00:00",
    "commented_code": "export let waitUntilWorks = {\n   async test(controller, env, ctx) {\n-    globalWaitUntilPromise = null;\n-    await env.MyService.testWaitUntil();\n+    // Tests ctx.waitUntil\n+    {\n+      globalWaitUntilPromise = null;\n+      await env.MyService.testWaitUntil();\n+\n+      assert.strictEqual(globalWaitUntilPromise instanceof Promise, true);\n+      await globalWaitUntilPromise;\n+    }\n+\n+    // Tests `import { waitUntil } from 'cloudflare:workers` on DO\n+    {\n+      globalWaitUntilPromise = null;\n+      await env.MyService.testImportedWaitUntil();\n+\n+      assert.strictEqual(globalWaitUntilPromise instanceof Promise, true);\n+      await globalWaitUntilPromise;\n+    }\n \n-    assert.strictEqual(globalWaitUntilPromise instanceof Promise, true);\n-    await globalWaitUntilPromise;\n+    // Tests `import { waitUntil } from 'cloudflare:workers` directly\n+    {\n+      globalWaitUntilPromise = null;\n+\n+      let resolve;\n+      globalWaitUntilPromise = new Promise((r) => {\n+        resolve = r;\n+      });\n+\n+      waitUntil(\n+        (async () => {\n+          await scheduler.wait(100);\n+          resolve();\n+        })()\n+      );",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2216587649",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4572,
        "pr_file": "src/workerd/api/tests/js-rpc-test.js",
        "discussion_id": "2216587649",
        "commented_code": "@@ -1179,11 +1197,40 @@ export let crossContextSharingDoesntWork = {\n \n export let waitUntilWorks = {\n   async test(controller, env, ctx) {\n-    globalWaitUntilPromise = null;\n-    await env.MyService.testWaitUntil();\n+    // Tests ctx.waitUntil\n+    {\n+      globalWaitUntilPromise = null;\n+      await env.MyService.testWaitUntil();\n+\n+      assert.strictEqual(globalWaitUntilPromise instanceof Promise, true);\n+      await globalWaitUntilPromise;\n+    }\n+\n+    // Tests `import { waitUntil } from 'cloudflare:workers` on DO\n+    {\n+      globalWaitUntilPromise = null;\n+      await env.MyService.testImportedWaitUntil();\n+\n+      assert.strictEqual(globalWaitUntilPromise instanceof Promise, true);\n+      await globalWaitUntilPromise;\n+    }\n \n-    assert.strictEqual(globalWaitUntilPromise instanceof Promise, true);\n-    await globalWaitUntilPromise;\n+    // Tests `import { waitUntil } from 'cloudflare:workers` directly\n+    {\n+      globalWaitUntilPromise = null;\n+\n+      let resolve;\n+      globalWaitUntilPromise = new Promise((r) => {\n+        resolve = r;\n+      });\n+\n+      waitUntil(\n+        (async () => {\n+          await scheduler.wait(100);\n+          resolve();\n+        })()\n+      );",
        "comment_created_at": "2025-07-18T17:42:31+00:00",
        "comment_author": "jasnell",
        "comment_body": "bit more compact and readable ...\r\n\r\n```suggestion\r\n      const { promise, resolve } = Promise.withResolvers();\r\n      waitUntil(scheduler.wait(100).then(resolve));\r\n      await promise;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2216600886",
    "pr_number": 4572,
    "pr_file": "src/workerd/api/tests/js-rpc-test.js",
    "created_at": "2025-07-18T17:51:28+00:00",
    "commented_code": "export let waitUntilWorks = {\n   async test(controller, env, ctx) {\n-    globalWaitUntilPromise = null;\n-    await env.MyService.testWaitUntil();\n+    // Tests ctx.waitUntil\n+    {\n+      globalWaitUntilPromise = null;\n+      await env.MyService.testWaitUntil();\n+\n+      assert.ok(globalWaitUntilPromise instanceof Promise);\n+      await globalWaitUntilPromise;\n+    }\n+\n+    // Tests `import { waitUntil } from 'cloudflare:workers` on WorkerEntrypoint\n+    {\n+      globalWaitUntilPromise = null;\n+      await env.MyService.testImportedWaitUntil();\n \n-    assert.strictEqual(globalWaitUntilPromise instanceof Promise, true);\n-    await globalWaitUntilPromise;\n+      assert.ok(globalWaitUntilPromise instanceof Promise);\n+      await globalWaitUntilPromise;\n+    }\n+\n+    // Tests `import { waitUntil } from 'cloudflare:workers` directly\n+    {\n+      const { promise, resolve } = Promise.withResolvers();\n+      waitUntil(scheduler.wait(100).then(resolve));\n+      await promise;",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2216600886",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4572,
        "pr_file": "src/workerd/api/tests/js-rpc-test.js",
        "discussion_id": "2216600886",
        "commented_code": "@@ -1179,11 +1197,30 @@ export let crossContextSharingDoesntWork = {\n \n export let waitUntilWorks = {\n   async test(controller, env, ctx) {\n-    globalWaitUntilPromise = null;\n-    await env.MyService.testWaitUntil();\n+    // Tests ctx.waitUntil\n+    {\n+      globalWaitUntilPromise = null;\n+      await env.MyService.testWaitUntil();\n+\n+      assert.ok(globalWaitUntilPromise instanceof Promise);\n+      await globalWaitUntilPromise;\n+    }\n+\n+    // Tests `import { waitUntil } from 'cloudflare:workers` on WorkerEntrypoint\n+    {\n+      globalWaitUntilPromise = null;\n+      await env.MyService.testImportedWaitUntil();\n \n-    assert.strictEqual(globalWaitUntilPromise instanceof Promise, true);\n-    await globalWaitUntilPromise;\n+      assert.ok(globalWaitUntilPromise instanceof Promise);\n+      await globalWaitUntilPromise;\n+    }\n+\n+    // Tests `import { waitUntil } from 'cloudflare:workers` directly\n+    {\n+      const { promise, resolve } = Promise.withResolvers();\n+      waitUntil(scheduler.wait(100).then(resolve));\n+      await promise;",
        "comment_created_at": "2025-07-18T17:51:28+00:00",
        "comment_author": "kentonv",
        "comment_body": "This doesn't test anything interesting. This promise would resolve even without the `waitUntil()` call above. `waitUntil()` only makes a difference if the promise is still running when the event ends, but that's not the case here.",
        "pr_file_module": null
      },
      {
        "comment_id": "2216602283",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4572,
        "pr_file": "src/workerd/api/tests/js-rpc-test.js",
        "discussion_id": "2216600886",
        "commented_code": "@@ -1179,11 +1197,30 @@ export let crossContextSharingDoesntWork = {\n \n export let waitUntilWorks = {\n   async test(controller, env, ctx) {\n-    globalWaitUntilPromise = null;\n-    await env.MyService.testWaitUntil();\n+    // Tests ctx.waitUntil\n+    {\n+      globalWaitUntilPromise = null;\n+      await env.MyService.testWaitUntil();\n+\n+      assert.ok(globalWaitUntilPromise instanceof Promise);\n+      await globalWaitUntilPromise;\n+    }\n+\n+    // Tests `import { waitUntil } from 'cloudflare:workers` on WorkerEntrypoint\n+    {\n+      globalWaitUntilPromise = null;\n+      await env.MyService.testImportedWaitUntil();\n \n-    assert.strictEqual(globalWaitUntilPromise instanceof Promise, true);\n-    await globalWaitUntilPromise;\n+      assert.ok(globalWaitUntilPromise instanceof Promise);\n+      await globalWaitUntilPromise;\n+    }\n+\n+    // Tests `import { waitUntil } from 'cloudflare:workers` directly\n+    {\n+      const { promise, resolve } = Promise.withResolvers();\n+      waitUntil(scheduler.wait(100).then(resolve));\n+      await promise;",
        "comment_created_at": "2025-07-18T17:52:27+00:00",
        "comment_author": "kentonv",
        "comment_body": "(Oh it was already removed.)",
        "pr_file_module": null
      }
    ]
  }
]