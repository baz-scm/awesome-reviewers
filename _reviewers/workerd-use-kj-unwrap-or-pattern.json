[
  {
    "discussion_id": "2279410918",
    "pr_number": 4797,
    "pr_file": "src/workerd/io/worker.c++",
    "created_at": "2025-08-15T16:16:39+00:00",
    "commented_code": "// Walk the prototype chain.\n       jsg::JsValue proto = startProto;\n       for (;;) {\n+        if (proto.tryCast<jsg::JsObject>() == kj::none) {\n+          errorReporter.addError(\n+              kj::str(\"Exported value's prototype chain does not end in Object.\"));\n+          return;\n+        }\n         auto protoObj = JSG_REQUIRE_NONNULL(proto.tryCast<jsg::JsObject>(), TypeError,",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2279410918",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4797,
        "pr_file": "src/workerd/io/worker.c++",
        "discussion_id": "2279410918",
        "commented_code": "@@ -2241,6 +2241,11 @@ void Worker::Lock::validateHandlers(ValidationErrorReporter& errorReporter) {\n       // Walk the prototype chain.\n       jsg::JsValue proto = startProto;\n       for (;;) {\n+        if (proto.tryCast<jsg::JsObject>() == kj::none) {\n+          errorReporter.addError(\n+              kj::str(\"Exported value's prototype chain does not end in Object.\"));\n+          return;\n+        }\n         auto protoObj = JSG_REQUIRE_NONNULL(proto.tryCast<jsg::JsObject>(), TypeError,",
        "comment_created_at": "2025-08-15T16:16:39+00:00",
        "comment_author": "fhanau",
        "comment_body": "Nit: Now that the error is handled earlier, this can be reduced to `KJ_ASSERT_NONNULL(proto.tryCast<jsg::JsObject>())` right?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2279445353",
    "pr_number": 4797,
    "pr_file": "src/workerd/io/worker.c++",
    "created_at": "2025-08-15T16:32:56+00:00",
    "commented_code": "// Walk the prototype chain.\n       jsg::JsValue proto = startProto;\n       for (;;) {\n-        auto protoObj = JSG_REQUIRE_NONNULL(proto.tryCast<jsg::JsObject>(), TypeError,\n-            \"Exported value's prototype chain does not end in Object.\");\n+        if (proto.tryCast<jsg::JsObject>() == kj::none) {",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2279445353",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4797,
        "pr_file": "src/workerd/io/worker.c++",
        "discussion_id": "2279445353",
        "commented_code": "@@ -2241,8 +2241,12 @@ void Worker::Lock::validateHandlers(ValidationErrorReporter& errorReporter) {\n       // Walk the prototype chain.\n       jsg::JsValue proto = startProto;\n       for (;;) {\n-        auto protoObj = JSG_REQUIRE_NONNULL(proto.tryCast<jsg::JsObject>(), TypeError,\n-            \"Exported value's prototype chain does not end in Object.\");\n+        if (proto.tryCast<jsg::JsObject>() == kj::none) {",
        "comment_created_at": "2025-08-15T16:32:56+00:00",
        "comment_author": "jasnell",
        "comment_body": "If believe this can just be... which would avoid the double cast.\r\n\r\n```suggestion\r\n        if (!proto.isObject()) {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2279446386",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4797,
        "pr_file": "src/workerd/io/worker.c++",
        "discussion_id": "2279445353",
        "commented_code": "@@ -2241,8 +2241,12 @@ void Worker::Lock::validateHandlers(ValidationErrorReporter& errorReporter) {\n       // Walk the prototype chain.\n       jsg::JsValue proto = startProto;\n       for (;;) {\n-        auto protoObj = JSG_REQUIRE_NONNULL(proto.tryCast<jsg::JsObject>(), TypeError,\n-            \"Exported value's prototype chain does not end in Object.\");\n+        if (proto.tryCast<jsg::JsObject>() == kj::none) {",
        "comment_created_at": "2025-08-15T16:33:30+00:00",
        "comment_author": "danlapid",
        "comment_body": "I'm not looking to change the logic here in this PR.",
        "pr_file_module": null
      },
      {
        "comment_id": "2282390979",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4797,
        "pr_file": "src/workerd/io/worker.c++",
        "discussion_id": "2279445353",
        "commented_code": "@@ -2241,8 +2241,12 @@ void Worker::Lock::validateHandlers(ValidationErrorReporter& errorReporter) {\n       // Walk the prototype chain.\n       jsg::JsValue proto = startProto;\n       for (;;) {\n-        auto protoObj = JSG_REQUIRE_NONNULL(proto.tryCast<jsg::JsObject>(), TypeError,\n-            \"Exported value's prototype chain does not end in Object.\");\n+        if (proto.tryCast<jsg::JsObject>() == kj::none) {",
        "comment_created_at": "2025-08-18T13:25:38+00:00",
        "comment_author": "kentonv",
        "comment_body": "Please use KJ_UNWRAP_OR instead of checking for none and then doing KJ_ASSERT_NONNULL immediately after it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2277366328",
    "pr_number": 4775,
    "pr_file": "src/workerd/api/http.c++",
    "created_at": "2025-08-14T17:56:07+00:00",
    "commented_code": "return js.rejectedPromise<jsg::Ref<Response>>(kj::mv(exception));\n   }\n \n+\n+  if (FeatureFlags::get(js).getStripAuthorizationOnCrossOriginRedirect()) {\n+    auto base = urlList.back().toString();\n+    auto currentUrl = jsg::Url::tryParse(base.asPtr());\n+\n+    if (currentUrl == kj::none) {\n+      auto exception =\n+        JSG_KJ_EXCEPTION(FAILED, TypeError, \"Invalid current URL; unable to follow redirect.\");\n+      return js.rejectedPromise<jsg::Ref<Response>>(kj::mv(exception));\n+    }\n+\n+\n+    auto locationUrl = jsg::Url::tryParse(location, base.asPtr());\n+\n+    if (locationUrl == kj::none) {\n+      auto exception =\n+        JSG_KJ_EXCEPTION(FAILED, TypeError, \"Invalid Location header; unable to follow redirect.\");\n+      return js.rejectedPromise<jsg::Ref<Response>>(kj::mv(exception));\n+    }\n+\n+    if (KJ_ASSERT_NONNULL(currentUrl).getOrigin() != KJ_ASSERT_NONNULL(locationUrl).getOrigin()) {",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2277366328",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4775,
        "pr_file": "src/workerd/api/http.c++",
        "discussion_id": "2277366328",
        "commented_code": "@@ -1595,6 +1595,38 @@ jsg::Promise<jsg::Ref<Response>> handleHttpRedirectResponse(jsg::Lock& js,\n     return js.rejectedPromise<jsg::Ref<Response>>(kj::mv(exception));\n   }\n \n+\n+  if (FeatureFlags::get(js).getStripAuthorizationOnCrossOriginRedirect()) {\n+    auto base = urlList.back().toString();\n+    auto currentUrl = jsg::Url::tryParse(base.asPtr());\n+\n+    if (currentUrl == kj::none) {\n+      auto exception =\n+        JSG_KJ_EXCEPTION(FAILED, TypeError, \"Invalid current URL; unable to follow redirect.\");\n+      return js.rejectedPromise<jsg::Ref<Response>>(kj::mv(exception));\n+    }\n+\n+\n+    auto locationUrl = jsg::Url::tryParse(location, base.asPtr());\n+\n+    if (locationUrl == kj::none) {\n+      auto exception =\n+        JSG_KJ_EXCEPTION(FAILED, TypeError, \"Invalid Location header; unable to follow redirect.\");\n+      return js.rejectedPromise<jsg::Ref<Response>>(kj::mv(exception));\n+    }\n+\n+    if (KJ_ASSERT_NONNULL(currentUrl).getOrigin() != KJ_ASSERT_NONNULL(locationUrl).getOrigin()) {",
        "comment_created_at": "2025-08-14T17:56:07+00:00",
        "comment_author": "kentonv",
        "comment_body": "The KJ_ASSERT_NONNULLs here are redundant since the code above ensures that these cannot possibly be null. This makes the code hard to read: It _looks like_ we're doing checks here that could fail and throw exceptions, and one has to carefully read the code that comes before it to see that's not the case.\n\nYou can avoid this problem by changing the checks above to use KJ_UNWRAP_OR, like:\n\n```cpp\n    auto currentUrl = KJ_UNWRAP_OR(jsg::Url::tryParse(base.asPtr()), {\n      auto exception =\n        JSG_KJ_EXCEPTION(FAILED, TypeError, \"Invalid current URL; unable to follow redirect.\");\n      return js.rejectedPromise<jsg::Ref<Response>>(kj::mv(exception));\n    });\n```\n\nNow you can use `currentUrl` without having to check it for nullness.",
        "pr_file_module": null
      },
      {
        "comment_id": "2277397017",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4775,
        "pr_file": "src/workerd/api/http.c++",
        "discussion_id": "2277366328",
        "commented_code": "@@ -1595,6 +1595,38 @@ jsg::Promise<jsg::Ref<Response>> handleHttpRedirectResponse(jsg::Lock& js,\n     return js.rejectedPromise<jsg::Ref<Response>>(kj::mv(exception));\n   }\n \n+\n+  if (FeatureFlags::get(js).getStripAuthorizationOnCrossOriginRedirect()) {\n+    auto base = urlList.back().toString();\n+    auto currentUrl = jsg::Url::tryParse(base.asPtr());\n+\n+    if (currentUrl == kj::none) {\n+      auto exception =\n+        JSG_KJ_EXCEPTION(FAILED, TypeError, \"Invalid current URL; unable to follow redirect.\");\n+      return js.rejectedPromise<jsg::Ref<Response>>(kj::mv(exception));\n+    }\n+\n+\n+    auto locationUrl = jsg::Url::tryParse(location, base.asPtr());\n+\n+    if (locationUrl == kj::none) {\n+      auto exception =\n+        JSG_KJ_EXCEPTION(FAILED, TypeError, \"Invalid Location header; unable to follow redirect.\");\n+      return js.rejectedPromise<jsg::Ref<Response>>(kj::mv(exception));\n+    }\n+\n+    if (KJ_ASSERT_NONNULL(currentUrl).getOrigin() != KJ_ASSERT_NONNULL(locationUrl).getOrigin()) {",
        "comment_created_at": "2025-08-14T18:12:33+00:00",
        "comment_author": "npaun",
        "comment_body": "cool macro - thanks!",
        "pr_file_module": null
      }
    ]
  }
]