[
  {
    "discussion_id": "2292180866",
    "pr_number": 4859,
    "pr_file": "src/workerd/api/node/tests/process-nodejs-test.js",
    "created_at": "2025-08-21T21:33:05+00:00",
    "commented_code": "import { readdirSync, writeFileSync } from 'node:fs';\n import * as processMod from 'node:process';\n \n+// Ensures the globalThis process and Buffer properties are handled correctly.\n+// Placement of these at the top level scope before any thing else runs is\n+// intentional. Do not move these elsewhere in the test.\n+queueMicrotask(() => process);\n+queueMicrotask(() => Buffer);\n+process.env.QUX = 1;\n+Buffer;\n+\n+const originalProcess = process;\n+globalThis.process = 123;\n+assert.strictEqual(globalThis.process, 123);\n+globalThis.process = originalProcess;\n+assert.strictEqual(globalThis.process, process);",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2292180866",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4859,
        "pr_file": "src/workerd/api/node/tests/process-nodejs-test.js",
        "discussion_id": "2292180866",
        "commented_code": "@@ -2,15 +2,28 @@ import assert from 'node:assert';\n import { readdirSync, writeFileSync } from 'node:fs';\n import * as processMod from 'node:process';\n \n+// Ensures the globalThis process and Buffer properties are handled correctly.\n+// Placement of these at the top level scope before any thing else runs is\n+// intentional. Do not move these elsewhere in the test.\n+queueMicrotask(() => process);\n+queueMicrotask(() => Buffer);\n+process.env.QUX = 1;\n+Buffer;\n+\n+const originalProcess = process;\n+globalThis.process = 123;\n+assert.strictEqual(globalThis.process, 123);\n+globalThis.process = originalProcess;\n+assert.strictEqual(globalThis.process, process);",
        "comment_created_at": "2025-08-21T21:33:05+00:00",
        "comment_author": "jasnell",
        "comment_body": "```suggestion\r\nassert.strictEqual(globalThis.process, process);\r\n// -------------------------------------------------------\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2241033796",
    "pr_number": 4636,
    "pr_file": "src/workerd/api/node/tests/http-server-nodejs-test.js",
    "created_at": "2025-07-29T21:14:56+00:00",
    "commented_code": "},\n };\n \n+// Test is taken from test/parallel/test-http-server-multiheaders2.js\n+export const testHttpServerMultiHeaders2 = {\n+  async test(_ctrl, env) {\n+    // One difference between Node.js and Cloudflare workers is that Cookie is allowed\n+    // to have multiple values but in Workers it is not supported.\n+    const multipleAllowed = [\n+      'Accept',\n+      'Accept-Charset',\n+      'Accept-Encoding',\n+      'Accept-Language',\n+      'Connection',\n+      'DAV', // GH-2750\n+      'Pragma', // GH-715\n+      'Link', // GH-1187\n+      'WWW-Authenticate', // GH-1083\n+      'Proxy-Authenticate', // GH-4052\n+      'Sec-Websocket-Extensions', // GH-2764\n+      'Sec-Websocket-Protocol', // GH-2764\n+      'Via', // GH-6660\n+\n+      // not a special case, just making sure it's parsed correctly\n+      'X-Forwarded-For',\n+\n+      // Make sure that unspecified headers is treated as multiple\n+      'Some-Random-Header',\n+      'X-Some-Random-Header',\n+    ];\n+\n+    const multipleForbidden = [\n+      'Content-Type',\n+      'User-Agent',\n+      'Referer',\n+      'Host',\n+      'Authorization',\n+      'Proxy-Authorization',\n+      'If-Modified-Since',\n+      'If-Unmodified-Since',\n+      'From',\n+      'Location',\n+      'Max-Forwards',\n+    ];\n+\n+    await using server = http.createServer(function (req, res) {\n+      for (const header of multipleForbidden) {\n+        const value = req.headers[header.toLowerCase()];\n+        strictEqual(\n+          value,\n+          'foo',\n+          `multiple forbidden header parsed incorrectly: ${header} with value: \"${value}\"`\n+        );\n+      }\n+      for (const header of multipleAllowed) {\n+        const sep = header.toLowerCase() === 'cookie' ? '; ' : ', ';\n+        strictEqual(\n+          req.headers[header.toLowerCase()],\n+          `foo${sep}bar`,\n+          `multiple allowed header parsed incorrectly: ${header}`\n+        );\n+      }\n+\n+      res.writeHead(200, { 'Content-Type': 'text/plain' });\n+      res.end('EOF');\n+    });\n+\n+    function makeHeader(value) {\n+      return function (header) {\n+        return [header, value];\n+      };\n+    }\n+\n+    const headers = []\n+      .concat(multipleAllowed.map(makeHeader('foo')))\n+      .concat(multipleForbidden.map(makeHeader('foo')))\n+      .concat(multipleAllowed.map(makeHeader('bar')))\n+      .concat(multipleForbidden.map(makeHeader('bar')));\n+\n+    server.listen(8080);\n+\n+    const res = await env.SERVICE.fetch('https://cloudflare.com/', {\n+      headers,\n+    });\n+    strictEqual(res.status, 200);\n+  },\n+};\n+\n+// Test for RFC 7230 compliant header splitting with quoted strings\n+export const testHttpServerQuotedStringHeaders = {\n+  async test(_ctrl, env) {\n+    await using server = http.createServer((req, res) => {\n+      strictEqual(req.headers['content-type'], 'text/plain; f=\"a, b, c\"');\n+      strictEqual(req.headers['authorization'], 'Bearer token=\"abc, def\"');",
    "repo_full_name": "cloudflare/workerd",
    "discussion_comments": [
      {
        "comment_id": "2241033796",
        "repo_full_name": "cloudflare/workerd",
        "pr_number": 4636,
        "pr_file": "src/workerd/api/node/tests/http-server-nodejs-test.js",
        "discussion_id": "2241033796",
        "commented_code": "@@ -184,6 +193,124 @@ export const testHttpServerMultiHeaders = {\n   },\n };\n \n+// Test is taken from test/parallel/test-http-server-multiheaders2.js\n+export const testHttpServerMultiHeaders2 = {\n+  async test(_ctrl, env) {\n+    // One difference between Node.js and Cloudflare workers is that Cookie is allowed\n+    // to have multiple values but in Workers it is not supported.\n+    const multipleAllowed = [\n+      'Accept',\n+      'Accept-Charset',\n+      'Accept-Encoding',\n+      'Accept-Language',\n+      'Connection',\n+      'DAV', // GH-2750\n+      'Pragma', // GH-715\n+      'Link', // GH-1187\n+      'WWW-Authenticate', // GH-1083\n+      'Proxy-Authenticate', // GH-4052\n+      'Sec-Websocket-Extensions', // GH-2764\n+      'Sec-Websocket-Protocol', // GH-2764\n+      'Via', // GH-6660\n+\n+      // not a special case, just making sure it's parsed correctly\n+      'X-Forwarded-For',\n+\n+      // Make sure that unspecified headers is treated as multiple\n+      'Some-Random-Header',\n+      'X-Some-Random-Header',\n+    ];\n+\n+    const multipleForbidden = [\n+      'Content-Type',\n+      'User-Agent',\n+      'Referer',\n+      'Host',\n+      'Authorization',\n+      'Proxy-Authorization',\n+      'If-Modified-Since',\n+      'If-Unmodified-Since',\n+      'From',\n+      'Location',\n+      'Max-Forwards',\n+    ];\n+\n+    await using server = http.createServer(function (req, res) {\n+      for (const header of multipleForbidden) {\n+        const value = req.headers[header.toLowerCase()];\n+        strictEqual(\n+          value,\n+          'foo',\n+          `multiple forbidden header parsed incorrectly: ${header} with value: \"${value}\"`\n+        );\n+      }\n+      for (const header of multipleAllowed) {\n+        const sep = header.toLowerCase() === 'cookie' ? '; ' : ', ';\n+        strictEqual(\n+          req.headers[header.toLowerCase()],\n+          `foo${sep}bar`,\n+          `multiple allowed header parsed incorrectly: ${header}`\n+        );\n+      }\n+\n+      res.writeHead(200, { 'Content-Type': 'text/plain' });\n+      res.end('EOF');\n+    });\n+\n+    function makeHeader(value) {\n+      return function (header) {\n+        return [header, value];\n+      };\n+    }\n+\n+    const headers = []\n+      .concat(multipleAllowed.map(makeHeader('foo')))\n+      .concat(multipleForbidden.map(makeHeader('foo')))\n+      .concat(multipleAllowed.map(makeHeader('bar')))\n+      .concat(multipleForbidden.map(makeHeader('bar')));\n+\n+    server.listen(8080);\n+\n+    const res = await env.SERVICE.fetch('https://cloudflare.com/', {\n+      headers,\n+    });\n+    strictEqual(res.status, 200);\n+  },\n+};\n+\n+// Test for RFC 7230 compliant header splitting with quoted strings\n+export const testHttpServerQuotedStringHeaders = {\n+  async test(_ctrl, env) {\n+    await using server = http.createServer((req, res) => {\n+      strictEqual(req.headers['content-type'], 'text/plain; f=\"a, b, c\"');\n+      strictEqual(req.headers['authorization'], 'Bearer token=\"abc, def\"');",
        "comment_created_at": "2025-07-29T21:14:56+00:00",
        "comment_author": "jasnell",
        "comment_body": "Perhaps include an escaped char (e.g. `\\\"') in the quoted portion of these to ensure that those are being handled correctly",
        "pr_file_module": null
      }
    ]
  }
]