[
  {
    "discussion_id": "1988972715",
    "pr_number": 8440,
    "pr_file": "packages/vite-plugin-cloudflare/README.md",
    "created_at": "2025-03-11T10:56:01+00:00",
    "commented_code": "> This output file is a snapshot of your configuration at the time of the build and is modified to reference your build artifacts.\n > It is the configuration that is used for preview and deployment.\n \n+#### Update the .gitignore file\n+\n+Wrangler will use and/or generate temporary files that should not be stored in git. Add the following lines to the `.gitignore` file:\n+\n+```gitignore\n+.wrangler\n+.dev.vars",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "1988972715",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 8440,
        "pr_file": "packages/vite-plugin-cloudflare/README.md",
        "discussion_id": "1988972715",
        "commented_code": "@@ -140,6 +140,15 @@ The `directory` in the output configuration will automatically point to the clie\n > This output file is a snapshot of your configuration at the time of the build and is modified to reference your build artifacts.\n > It is the configuration that is used for preview and deployment.\n \n+#### Update the .gitignore file\n+\n+Wrangler will use and/or generate temporary files that should not be stored in git. Add the following lines to the `.gitignore` file:\n+\n+```gitignore\n+.wrangler\n+.dev.vars",
        "comment_created_at": "2025-03-11T10:56:01+00:00",
        "comment_author": "dario-piotrowicz",
        "comment_body": "is this missing the `*`?\r\n\r\n```suggestion\r\n.dev.vars*\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1988989163",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 8440,
        "pr_file": "packages/vite-plugin-cloudflare/README.md",
        "discussion_id": "1988972715",
        "commented_code": "@@ -140,6 +140,15 @@ The `directory` in the output configuration will automatically point to the clie\n > This output file is a snapshot of your configuration at the time of the build and is modified to reference your build artifacts.\n > It is the configuration that is used for preview and deployment.\n \n+#### Update the .gitignore file\n+\n+Wrangler will use and/or generate temporary files that should not be stored in git. Add the following lines to the `.gitignore` file:\n+\n+```gitignore\n+.wrangler\n+.dev.vars",
        "comment_created_at": "2025-03-11T11:03:58+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "Oops I missed this comment \ud83d\ude22 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1935637306",
    "pr_number": 7972,
    "pr_file": ".changeset/fair-waves-punch.md",
    "created_at": "2025-01-30T13:44:43+00:00",
    "commented_code": "+---\n+\"create-cloudflare\": patch\n+---\n+\n+bump create-hono version",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "1935637306",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 7972,
        "pr_file": ".changeset/fair-waves-punch.md",
        "discussion_id": "1935637306",
        "commented_code": "@@ -0,0 +1,5 @@\n+---\n+\"create-cloudflare\": patch\n+---\n+\n+bump create-hono version",
        "comment_created_at": "2025-01-30T13:44:43+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "Might be worth adding some context here - i.e. this fixes a problem related to C3 now using wrangler.json rather than wrangler.toml\r\n\r\nAnd mention that this breaks the old version since the hono starter template has been updated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1916806682",
    "pr_number": 7774,
    "pr_file": "packages/create-cloudflare/templates/next/README.md",
    "created_at": "2025-01-15T14:58:31+00:00",
    "commented_code": "// KV Example:\n   ```\n   and uncomment the commented lines below it (also uncomment the relevant imports).\n-- Do the same in the `wrangler.toml` file, where\n-  the comment is:\n+- In the `wrangler.json` file search for the block below, and uncomment uncomment the line that contains the `\"kv_namespaces\"` declaration:",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "1916806682",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 7774,
        "pr_file": "packages/create-cloudflare/templates/next/README.md",
        "discussion_id": "1916806682",
        "commented_code": "@@ -47,10 +47,13 @@ In order to enable the example:\n   // KV Example:\n   ```\n   and uncomment the commented lines below it (also uncomment the relevant imports).\n-- Do the same in the `wrangler.toml` file, where\n-  the comment is:\n+- In the `wrangler.json` file search for the block below, and uncomment uncomment the line that contains the `\"kv_namespaces\"` declaration:",
        "comment_created_at": "2025-01-15T14:58:31+00:00",
        "comment_author": "CarmenPopoviciu",
        "comment_body": "to keep things consistent with the rest of the comments in the config file, I added the KV comment in a similar format. IMHO, it made no sense to add the extra `// KV example` line, so I didn't, and modified the readme instead. Lemme know if anyone strongly disagrees",
        "pr_file_module": null
      },
      {
        "comment_id": "1916824409",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 7774,
        "pr_file": "packages/create-cloudflare/templates/next/README.md",
        "discussion_id": "1916806682",
        "commented_code": "@@ -47,10 +47,13 @@ In order to enable the example:\n   // KV Example:\n   ```\n   and uncomment the commented lines below it (also uncomment the relevant imports).\n-- Do the same in the `wrangler.toml` file, where\n-  the comment is:\n+- In the `wrangler.json` file search for the block below, and uncomment uncomment the line that contains the `\"kv_namespaces\"` declaration:",
        "comment_created_at": "2025-01-15T15:08:12+00:00",
        "comment_author": "dario-piotrowicz",
        "comment_body": "I don't know if adding the `kv_namespaces` only for next makes sense... (why KV is the only binding included? what about DOs, R2, etc... why the preferential treatment?) as we discussed maybe we should just get rid of the KV example in the next template instead \ud83e\udd14 \r\n\r\nI'm happy to progress with this solution but (maybe as a followup) I think removing the example would be better",
        "pr_file_module": null
      },
      {
        "comment_id": "1916978147",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 7774,
        "pr_file": "packages/create-cloudflare/templates/next/README.md",
        "discussion_id": "1916806682",
        "commented_code": "@@ -47,10 +47,13 @@ In order to enable the example:\n   // KV Example:\n   ```\n   and uncomment the commented lines below it (also uncomment the relevant imports).\n-- Do the same in the `wrangler.toml` file, where\n-  the comment is:\n+- In the `wrangler.json` file search for the block below, and uncomment uncomment the line that contains the `\"kv_namespaces\"` declaration:",
        "comment_created_at": "2025-01-15T16:26:32+00:00",
        "comment_author": "CarmenPopoviciu",
        "comment_body": "> why KV is the only binding included? what about DOs, R2, etc... why the preferential treatment?\r\n\r\nI totally get what you mean. But then, wasn't this question equally relevant in the prev version? Why did the nextjs starter ship only with a KV example? I have no context whatsoever as to why/how this decision was taken. \r\n\r\nDon't get me wrong, I don't mind removing it, but then my question is, does C3 come with anything similar out of the box?...as in an example or template that exemplify how such bindings are set. Does it need to? Arguably, these are all larger prod questions",
        "pr_file_module": null
      },
      {
        "comment_id": "1917027176",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 7774,
        "pr_file": "packages/create-cloudflare/templates/next/README.md",
        "discussion_id": "1916806682",
        "commented_code": "@@ -47,10 +47,13 @@ In order to enable the example:\n   // KV Example:\n   ```\n   and uncomment the commented lines below it (also uncomment the relevant imports).\n-- Do the same in the `wrangler.toml` file, where\n-  the comment is:\n+- In the `wrangler.json` file search for the block below, and uncomment uncomment the line that contains the `\"kv_namespaces\"` declaration:",
        "comment_created_at": "2025-01-15T16:58:02+00:00",
        "comment_author": "dario-piotrowicz",
        "comment_body": "> I totally get what you mean. But then, wasn't this question equally relevant in the prev version?\r\n\r\nyeah I agree with you, this was basically the same before, the Next.js template being the only framework one having an extra KV example \ud83d\udc4d \r\n\r\nI'm just bringing it up because before it was less expensive to have this divergence (basically a single extra comment in the shared toml file) while now it seems like it requires us to add the KV declaration comment to all wrangler configs, given this extra downside maybe it's no longer worth it\r\n\r\n> Why did the nextjs starter ship only with a KV example?\r\n\r\nWe discussed it on the frameworks team and concluded that it'd be nice to show such an example to make sure that people knew how to access bindings in their Next.js app, that's all\r\n\r\n>  does C3 come with anything similar out of the box?\r\n\r\nI'd have to check, I am quite sure the Next.js one is the only fullstack template with this, as for workers I would imagine that they also have extra configs as well\r\n\r\n> Don't get me wrong, I don't mind removing it\r\n\r\nI don't particularly mind if you keep it in, I just personally think that the extra (even if very small) complexity + having the KV for all template configs makes the example not that KV Next.js example worth keeping, but it's also not a big deal \ud83d\ude42 \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1917105542",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 7774,
        "pr_file": "packages/create-cloudflare/templates/next/README.md",
        "discussion_id": "1916806682",
        "commented_code": "@@ -47,10 +47,13 @@ In order to enable the example:\n   // KV Example:\n   ```\n   and uncomment the commented lines below it (also uncomment the relevant imports).\n-- Do the same in the `wrangler.toml` file, where\n-  the comment is:\n+- In the `wrangler.json` file search for the block below, and uncomment uncomment the line that contains the `\"kv_namespaces\"` declaration:",
        "comment_created_at": "2025-01-15T17:51:28+00:00",
        "comment_author": "CarmenPopoviciu",
        "comment_body": "> while now it seems like it requires us to add the KV declaration comment to all wrangler configs\r\n\r\nI am 100% with you on this! And tbh, I do have the same concern as you. On the other hand, I 100% believe that the KV example is valuable for our users, which is why I'm holding on to it with my dear life \ud83d\ude06 . IMHO if it's not meant to live in the starter project it should def live somewhere else...tho the starter is *such* a great place, because it requires zero context switch on the dev's side\r\n\r\n> We discussed it on the frameworks team and concluded that it'd be nice to show such an example to make sure that people knew how to access bindings in their Next.js app, that's all\r\n\r\nyes \ud83d\udcaf  this!!!!\r\n\r\nhaving said all this I feel like there is not enough consensus (wrt what the right fix is) to land this PR just yet. How about if I just revert the `next` template back to `wrangler.toml`. The remix template is still using a `.toml` config file, so it wouldn't be the only exception. Just so we can bump the C3 version with a fix. And in the meanwhile, we can iterate this PR without the pressure of a fix release on our back",
        "pr_file_module": null
      },
      {
        "comment_id": "1917135065",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 7774,
        "pr_file": "packages/create-cloudflare/templates/next/README.md",
        "discussion_id": "1916806682",
        "commented_code": "@@ -47,10 +47,13 @@ In order to enable the example:\n   // KV Example:\n   ```\n   and uncomment the commented lines below it (also uncomment the relevant imports).\n-- Do the same in the `wrangler.toml` file, where\n-  the comment is:\n+- In the `wrangler.json` file search for the block below, and uncomment uncomment the line that contains the `\"kv_namespaces\"` declaration:",
        "comment_created_at": "2025-01-15T18:10:54+00:00",
        "comment_author": "CarmenPopoviciu",
        "comment_body": "oh wait...we actually can't revert back to `wrangler.toml` because of how we now standardise comments. NVM me",
        "pr_file_module": null
      },
      {
        "comment_id": "1917166620",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 7774,
        "pr_file": "packages/create-cloudflare/templates/next/README.md",
        "discussion_id": "1916806682",
        "commented_code": "@@ -47,10 +47,13 @@ In order to enable the example:\n   // KV Example:\n   ```\n   and uncomment the commented lines below it (also uncomment the relevant imports).\n-- Do the same in the `wrangler.toml` file, where\n-  the comment is:\n+- In the `wrangler.json` file search for the block below, and uncomment uncomment the line that contains the `\"kv_namespaces\"` declaration:",
        "comment_created_at": "2025-01-15T18:33:35+00:00",
        "comment_author": "dario-piotrowicz",
        "comment_body": "Nono, I am totally happy to go with the current solution! we can always re-evaluate later! no big deal \ud83d\ude42 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1921618609",
    "pr_number": 7763,
    "pr_file": "packages/vite-plugin-cloudflare/README.md",
    "created_at": "2025-01-19T19:33:08+00:00",
    "commented_code": "+# `@cloudflare/vite-plugin`\n+\n+[Intro](#intro) | [Quick start](#quick-start) | [Tutorial](#tutorial) | [API](#api) | [Worker environments](#worker-environments) | [Migrating from `wrangler dev`](#migrating-from-wrangler-dev)\n+\n+## Intro\n+\n+The Cloudflare Vite plugin enables a full-featured integration between Vite and the Workers runtime.\n+Your Worker code runs inside [workerd](https://github.com/cloudflare/workerd), matching the production behavior as closely as possible and providing confidence as you develop and deploy your applications.\n+\n+### Features\n+\n+- Provides direct access to Workers runtime APIs and bindings\n+- Supports Workers Assets, enabling you to build static sites, SPAs, and full-stack applications\n+- Leverages Vite's hot module replacement for consistently fast updates\n+- Supports `vite preview` for previewing your build output in the Workers runtime prior to deployment\n+\n+## Quick start\n+\n+### Install the dependencies\n+\n+```sh\n+npm install @cloudflare/vite-plugin wrangler --save-dev\n+```\n+\n+### Add the plugin to your Vite config\n+\n+```ts\n+// vite.config.ts\n+\n+import { defineConfig } from 'vite'\n+import { cloudflare } from '@cloudflare/vite-plugin'\n+\n+export default defineConfig({\n+  plugins: [cloudflare()],\n+})\n+```\n+\n+### Create your Worker config file\n+\n+```toml\n+# wrangler.toml\n+\n+name = \"my-worker\"\n+compatibility_date = \"2024-12-30\"\n+main = \"./src/index.ts\"\n+```\n+\n+### Create your Worker entry file\n+\n+```ts\n+// src/index.ts\n+\n+export default {\n+  fetch() {\n+    return new Response(`Running in ${navigator.userAgent}!`)\n+  },\n+}\n+```\n+\n+You can now develop (`vite dev`), build (`vite build`), preview (`vite preview`), and deploy (`wrangler deploy`) your application.\n+\n+## Tutorial\n+\n+In this tutorial, you will create a React SPA that can be deployed as a Worker with Workers Assets.\n+Then, you will add an API Worker that can be accessed from the front-end code.\n+You will develop, build, and preview the application using Vite before finally deploying to Cloudflare.\n+\n+### Set up and configure the React SPA\n+\n+#### Scaffold a Vite project\n+\n+Start by creating a React TypeScript project with Vite.\n+\n+```sh\n+npm create vite@latest cloudflare-vite-tutorial -- --template react-ts\n+```\n+\n+Open the `cloudflare-vite-tutorial` directory in your editor of choice.\n+\n+#### Add the Cloudflare dependencies\n+\n+```sh\n+npm install @cloudflare/vite-plugin wrangler --save-dev\n+```\n+\n+#### Add the plugin to your Vite config\n+\n+```ts\n+// vite.config.ts\n+\n+import { defineConfig } from 'vite'\n+import react from '@vitejs/plugin-react'\n+import { cloudflare } from '@cloudflare/vite-plugin'\n+\n+export default defineConfig({\n+  plugins: [react(), cloudflare()],\n+})\n+```\n+\n+#### Create your Worker config file\n+\n+```toml\n+# wrangler.toml\n+\n+name = \"cloudflare-vite-tutorial\"\n+compatibility_date = \"2024-12-30\"\n+assets = { not_found_handling = \"single-page-application\" }\n+```\n+\n+The [`not_found_handling`](https://developers.cloudflare.com/workers/static-assets/routing/#not_found_handling--404-page--single-page-application--none) value has been set to `single-page-application`.\n+This means that all not found requests will serve the `index.html` file.\n+With the Cloudflare plugin, the `assets` routing configuration is used in place of Vite's default behavior.\n+This ensures that your application's routing works the same way while developing as it does when deployed to production.\n+\n+Note that the [`directory`](https://developers.cloudflare.com/workers/static-assets/binding/#directory) field is not used when configuring assets with Vite.\n+The `directory` in the output configuration will automatically point to the client build output.\n+\n+> [!NOTE]\n+> When using the Cloudflare Vite plugin, the Worker config (for example, `wrangler.toml`) that you provide is the input configuration file.\n+> A separate output `wrangler.json` file is created when you run `vite build`.\n+> This output file is a snapshot of your configuration at the time of the build and is modified to reference your build artifacts.\n+> It is the configuration that is used for preview and deployment.\n+\n+#### Run the development server\n+\n+Run `npm run dev` to verify that your application is working as expected.\n+\n+For a purely front-end application, you could now build (`npm run build`), preview (`npm run preview`), and deploy (`npm exec wrangler deploy`) your application.\n+However, this tutorial will show you how to go a step further and add an API Worker.\n+\n+### Add an API Worker\n+\n+#### Configure TypeScript for your Worker code\n+\n+```sh\n+npm install @cloudflare/workers-types --save-dev\n+```\n+\n+```jsonc\n+// tsconfig.worker.json\n+\n+{\n+  \"extends\": \"./tsconfig.node.json\",\n+  \"compilerOptions\": {\n+    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.worker.tsbuildinfo\",\n+    \"types\": [\"@cloudflare/workers-types/2023-07-01\", \"vite/client\"],\n+  },\n+  \"include\": [\"api\"],\n+}\n+```\n+\n+```jsonc\n+// tsconfig.json\n+\n+{\n+  \"files\": [],\n+  \"references\": [\n+    { \"path\": \"./tsconfig.app.json\" },\n+    { \"path\": \"./tsconfig.node.json\" },\n+    { \"path\": \"./tsconfig.worker.json\" },\n+  ],\n+}\n+```\n+\n+#### Add to your Worker configuration\n+\n+```toml\n+# wrangler.toml\n+\n+name = \"cloudflare-vite-tutorial\"\n+compatibility_date = \"2024-12-30\"\n+assets = { not_found_handling = \"single-page-application\", binding = \"ASSETS\" }\n+main = \"./api/index.ts\"\n+```\n+\n+The assets `binding` defined here will allow you to access the assets functionality from your Worker.\n+\n+#### Add your API Worker\n+\n+```ts\n+// api/index.ts\n+\n+interface Env {\n+  ASSETS: Fetcher\n+}\n+\n+export default {\n+  fetch(request, env) {\n+    const url = new URL(request.url)\n+\n+    if (url.pathname.startsWith('/api/')) {\n+      return Response.json({\n+        name: 'Cloudflare',\n+      })\n+    }\n+\n+    return env.ASSETS.fetch(request)\n+  },\n+} satisfies ExportedHandler<Env>\n+```\n+\n+The Worker above will be invoked for any request not matching a static asset.\n+It returns a JSON response if the `pathname` starts with `/api/` and otherwise passes the incoming request through to the assets binding.\n+This means that for paths that do not start with `/api/`, the `not_found_handling` behavior defined in the Worker config will be evaluated and the `index.html` file will be returned, enabling SPA navigations.\n+\n+#### Call the API from the client\n+\n+Edit `src/App.tsx` so that it includes an additional button that calls the API and sets some state.\n+Replace the file contents with the following code:\n+\n+```tsx\n+// src/App.tsx\n+\n+import { useState } from 'react'\n+import reactLogo from './assets/react.svg'\n+import viteLogo from '/vite.svg'\n+import './App.css'\n+\n+function App() {\n+  const [count, setCount] = useState(0)\n+  const [name, setName] = useState('unknown')\n+\n+  return (\n+    <>\n+      <div>\n+        <a href=\"https://vite.dev\" target=\"_blank\">\n+          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\n+        </a>\n+        <a href=\"https://react.dev\" target=\"_blank\">\n+          <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n+        </a>\n+      </div>\n+      <h1>Vite + React</h1>\n+      <div className=\"card\">\n+        <button\n+          onClick={() => setCount((count) => count + 1)}\n+          aria-label=\"increment\"\n+        >\n+          count is {count}\n+        </button>\n+        <p>\n+          Edit <code>src/App.tsx</code> and save to test HMR\n+        </p>\n+      </div>\n+      <div className=\"card\">\n+        <button\n+          onClick={() => {\n+            fetch('/api/')\n+              .then((res) => res.json() as Promise<{ name: string }>)\n+              .then((data) => setName(data.name))\n+          }}\n+          aria-label=\"get name\"\n+        >\n+          Name from API is: {name}\n+        </button>\n+        <p>\n+          Edit <code>api/index.ts</code> to change the name\n+        </p>\n+      </div>\n+      <p className=\"read-the-docs\">\n+        Click on the Vite and React logos to learn more\n+      </p>\n+    </>\n+  )\n+}\n+\n+export default App\n+```\n+\n+Now, if you click the button, it will display 'Name from API is: Cloudflare'.\n+\n+Increment the counter to update the application state in the browser.\n+Next, edit `api/index.ts` by changing the `name` it returns to `'Cloudflare Workers'`.\n+If you click the button again, it will display the new `name` while preserving the previously set counter value.\n+With Vite and the Cloudflare plugin, you can iterate on the client and server parts of your app quickly without losing UI state between edits.\n+\n+#### Build your application\n+\n+Run `npm run build` to build your application.\n+\n+If you inspect the `dist` directory, you will see that it contains two subdirectories: `client` and `cloudflare-vite-tutorial`.\n+The `cloudflare-vite-tutorial` directory contains your Worker code and the output `wrangler.json` configuration.\n+\n+#### Preview your application\n+\n+Run `npm run preview` to validate that your application runs as expected.\n+This command will run your build output locally in the Workers runtime, closely matching its behaviour in production.\n+\n+#### Deploy to Cloudflare\n+\n+Run `npm exec wrangler deploy` to deploy your application to Cloudflare.\n+This command will automatically use the output `wrangler.json` that was included in the build output.\n+\n+### Next steps\n+\n+In this tutorial, we created an SPA that could be deployed as a Worker with Workers Assets.\n+We then added an API Worker that could be accessed from the front-end code and deployed to Cloudflare.\n+Possible next steps include:\n+\n+- Adding a binding to another Cloudflare service such as a [KV namespace](https://developers.cloudflare.com/kv/) or [D1 database](https://developers.cloudflare.com/d1/)\n+- Expanding the API to include additional routes\n+- Using a library, such as [tRPC](https://trpc.io/) or [Hono](https://hono.dev/), in your API Worker\n+\n+## API\n+\n+### `cloudflare`\n+\n+The `cloudflare` plugin should be included in the Vite `plugins` array:\n+\n+```ts\n+// vite.config.ts\n+\n+import { defineConfig } from 'vite'\n+import { cloudflare } from '@cloudflare/vite-plugin'\n+\n+export default defineConfig({\n+  plugins: [cloudflare()],\n+})\n+```\n+\n+It accepts an optional `PluginConfig` parameter.\n+\n+### `interface PluginConfig`\n+\n+- `configPath?: string`\n+\n+  An optional path to your Worker config file.\n+  By default, a `wrangler.toml`, `wrangler.json`, or `wrangler.jsonc` file in the root of your application will be used as the Worker config.\n+\n+- `viteEnvironment?: { name?: string }`\n+\n+  Optional Vite environment options.\n+  By default, the environment name is the Worker name with `-` characters replaced with `_`.\n+  Setting the name here will override this.\n+\n+- `persistState?: boolean | { path: string }`\n+\n+  An optional override for state persistence.\n+  By default, state is persisted to `.wrangler/state` in a `v3` subdirectory.\n+  A custom `path` can be provided or, alternatively, persistence can be disabled by setting the value to `false`.\n+\n+- `auxiliaryWorkers?: Array<AuxiliaryWorkerConfig>`\n+\n+  An optional array of auxiliary workers.\n+  You can use [service bindings](https://developers.cloudflare.com/workers/runtime-apis/bindings/service-bindings/) to call auxiliary workers from your main (entry) Worker.\n+  All requests are routed through your entry Worker.\n+  During the build, each Worker is output to a separate subdirectory of `dist`.\n+\n+> [!NOTE]\n+> When running `wrangler deploy`, only your main (entry) Worker will be deployed.\n+> If using multiple Workers, each must be deployed individually.\n+> You can inspect the `dist` directory and then run `wrangler deploy -c path-to-worker-output-config` for each.\n+\n+### `interface AuxiliaryWorkerConfig`\n+\n+- `configPath: string`\n+\n+  A required path to your Worker config file.\n+\n+- `viteEnvironment?: { name?: string }`\n+\n+  Optional Vite environment options.\n+  By default, the environment name is the Worker name with `-` characters replaced with `_`.\n+  Setting the name here will override this.\n+\n+## Worker environments\n+\n+A Worker config file may contain configuration for multiple [Worker environments](https://developers.cloudflare.com/workers/wrangler/environments/).\n+With the Cloudflare Vite plugin, you select an environment at dev or build time by providing the `CLOUDFLARE_ENV` environment variable.\n+Consider the following example `wrangler.toml` file:\n+\n+```toml\n+# wrangler.toml\n+\n+name = \"my-worker\"\n+compatibility_date = \"2024-12-30\"\n+main = \"./src/index.ts\"\n+\n+vars = { MY_VAR = \"Top-level var\" }\n+\n+[env.staging]\n+vars = { MY_VAR = \"Staging var\" }\n+\n+[env.production]\n+vars = { MY_VAR = \"Production var\" }\n+```\n+\n+If you run `CLOUDFLARE_ENV=production vite build` then the output `wrangler.json` file generated by the build will be a flattened configuration for the 'production' environment.\n+This combines [top-level only](https://developers.cloudflare.com/workers/wrangler/configuration/#top-level-only-keys), [inheritable](https://developers.cloudflare.com/workers/wrangler/configuration/#inheritable-keys), and [non-inheritable](https://developers.cloudflare.com/workers/wrangler/configuration/#non-inheritable-keys) keys.\n+The value of `MY_VAR` will therefore be `'Production var'`.\n+The name of the Worker will be `'my-worker-production'`.\n+This is because the environment name is automatically appended to the top-level Worker name.\n+\n+> [!NOTE]\n+> The default Vite environment name for a Worker is always the top-level name.\n+> This enables you to reference the Worker consistently in your Vite config when using multiple environments.\n+\n+Worker environments can also be used in development.\n+For example, you could run `CLOUDFLARE_ENV=development vite dev`.\n+It is common to use the default top-level environment as the development environment and then add additional environments as necessary.\n+\n+> [!NOTE]\n+> Running `vite dev` or `vite build` without providing `CLOUDFLARE_ENV` will use the default top-level environment.\n+> The value of `MY_VAR` will therefore be `'Top-level var'`.\n+> As Worker environments are applied at dev and build time, specifying `CLOUDFLARE_ENV` when running `vite preview` or `wrangler deploy` will have no effect.",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "1921618609",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 7763,
        "pr_file": "packages/vite-plugin-cloudflare/README.md",
        "discussion_id": "1921618609",
        "commented_code": "@@ -0,0 +1,465 @@\n+# `@cloudflare/vite-plugin`\n+\n+[Intro](#intro) | [Quick start](#quick-start) | [Tutorial](#tutorial) | [API](#api) | [Worker environments](#worker-environments) | [Migrating from `wrangler dev`](#migrating-from-wrangler-dev)\n+\n+## Intro\n+\n+The Cloudflare Vite plugin enables a full-featured integration between Vite and the Workers runtime.\n+Your Worker code runs inside [workerd](https://github.com/cloudflare/workerd), matching the production behavior as closely as possible and providing confidence as you develop and deploy your applications.\n+\n+### Features\n+\n+- Provides direct access to Workers runtime APIs and bindings\n+- Supports Workers Assets, enabling you to build static sites, SPAs, and full-stack applications\n+- Leverages Vite's hot module replacement for consistently fast updates\n+- Supports `vite preview` for previewing your build output in the Workers runtime prior to deployment\n+\n+## Quick start\n+\n+### Install the dependencies\n+\n+```sh\n+npm install @cloudflare/vite-plugin wrangler --save-dev\n+```\n+\n+### Add the plugin to your Vite config\n+\n+```ts\n+// vite.config.ts\n+\n+import { defineConfig } from 'vite'\n+import { cloudflare } from '@cloudflare/vite-plugin'\n+\n+export default defineConfig({\n+  plugins: [cloudflare()],\n+})\n+```\n+\n+### Create your Worker config file\n+\n+```toml\n+# wrangler.toml\n+\n+name = \"my-worker\"\n+compatibility_date = \"2024-12-30\"\n+main = \"./src/index.ts\"\n+```\n+\n+### Create your Worker entry file\n+\n+```ts\n+// src/index.ts\n+\n+export default {\n+  fetch() {\n+    return new Response(`Running in ${navigator.userAgent}!`)\n+  },\n+}\n+```\n+\n+You can now develop (`vite dev`), build (`vite build`), preview (`vite preview`), and deploy (`wrangler deploy`) your application.\n+\n+## Tutorial\n+\n+In this tutorial, you will create a React SPA that can be deployed as a Worker with Workers Assets.\n+Then, you will add an API Worker that can be accessed from the front-end code.\n+You will develop, build, and preview the application using Vite before finally deploying to Cloudflare.\n+\n+### Set up and configure the React SPA\n+\n+#### Scaffold a Vite project\n+\n+Start by creating a React TypeScript project with Vite.\n+\n+```sh\n+npm create vite@latest cloudflare-vite-tutorial -- --template react-ts\n+```\n+\n+Open the `cloudflare-vite-tutorial` directory in your editor of choice.\n+\n+#### Add the Cloudflare dependencies\n+\n+```sh\n+npm install @cloudflare/vite-plugin wrangler --save-dev\n+```\n+\n+#### Add the plugin to your Vite config\n+\n+```ts\n+// vite.config.ts\n+\n+import { defineConfig } from 'vite'\n+import react from '@vitejs/plugin-react'\n+import { cloudflare } from '@cloudflare/vite-plugin'\n+\n+export default defineConfig({\n+  plugins: [react(), cloudflare()],\n+})\n+```\n+\n+#### Create your Worker config file\n+\n+```toml\n+# wrangler.toml\n+\n+name = \"cloudflare-vite-tutorial\"\n+compatibility_date = \"2024-12-30\"\n+assets = { not_found_handling = \"single-page-application\" }\n+```\n+\n+The [`not_found_handling`](https://developers.cloudflare.com/workers/static-assets/routing/#not_found_handling--404-page--single-page-application--none) value has been set to `single-page-application`.\n+This means that all not found requests will serve the `index.html` file.\n+With the Cloudflare plugin, the `assets` routing configuration is used in place of Vite's default behavior.\n+This ensures that your application's routing works the same way while developing as it does when deployed to production.\n+\n+Note that the [`directory`](https://developers.cloudflare.com/workers/static-assets/binding/#directory) field is not used when configuring assets with Vite.\n+The `directory` in the output configuration will automatically point to the client build output.\n+\n+> [!NOTE]\n+> When using the Cloudflare Vite plugin, the Worker config (for example, `wrangler.toml`) that you provide is the input configuration file.\n+> A separate output `wrangler.json` file is created when you run `vite build`.\n+> This output file is a snapshot of your configuration at the time of the build and is modified to reference your build artifacts.\n+> It is the configuration that is used for preview and deployment.\n+\n+#### Run the development server\n+\n+Run `npm run dev` to verify that your application is working as expected.\n+\n+For a purely front-end application, you could now build (`npm run build`), preview (`npm run preview`), and deploy (`npm exec wrangler deploy`) your application.\n+However, this tutorial will show you how to go a step further and add an API Worker.\n+\n+### Add an API Worker\n+\n+#### Configure TypeScript for your Worker code\n+\n+```sh\n+npm install @cloudflare/workers-types --save-dev\n+```\n+\n+```jsonc\n+// tsconfig.worker.json\n+\n+{\n+  \"extends\": \"./tsconfig.node.json\",\n+  \"compilerOptions\": {\n+    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.worker.tsbuildinfo\",\n+    \"types\": [\"@cloudflare/workers-types/2023-07-01\", \"vite/client\"],\n+  },\n+  \"include\": [\"api\"],\n+}\n+```\n+\n+```jsonc\n+// tsconfig.json\n+\n+{\n+  \"files\": [],\n+  \"references\": [\n+    { \"path\": \"./tsconfig.app.json\" },\n+    { \"path\": \"./tsconfig.node.json\" },\n+    { \"path\": \"./tsconfig.worker.json\" },\n+  ],\n+}\n+```\n+\n+#### Add to your Worker configuration\n+\n+```toml\n+# wrangler.toml\n+\n+name = \"cloudflare-vite-tutorial\"\n+compatibility_date = \"2024-12-30\"\n+assets = { not_found_handling = \"single-page-application\", binding = \"ASSETS\" }\n+main = \"./api/index.ts\"\n+```\n+\n+The assets `binding` defined here will allow you to access the assets functionality from your Worker.\n+\n+#### Add your API Worker\n+\n+```ts\n+// api/index.ts\n+\n+interface Env {\n+  ASSETS: Fetcher\n+}\n+\n+export default {\n+  fetch(request, env) {\n+    const url = new URL(request.url)\n+\n+    if (url.pathname.startsWith('/api/')) {\n+      return Response.json({\n+        name: 'Cloudflare',\n+      })\n+    }\n+\n+    return env.ASSETS.fetch(request)\n+  },\n+} satisfies ExportedHandler<Env>\n+```\n+\n+The Worker above will be invoked for any request not matching a static asset.\n+It returns a JSON response if the `pathname` starts with `/api/` and otherwise passes the incoming request through to the assets binding.\n+This means that for paths that do not start with `/api/`, the `not_found_handling` behavior defined in the Worker config will be evaluated and the `index.html` file will be returned, enabling SPA navigations.\n+\n+#### Call the API from the client\n+\n+Edit `src/App.tsx` so that it includes an additional button that calls the API and sets some state.\n+Replace the file contents with the following code:\n+\n+```tsx\n+// src/App.tsx\n+\n+import { useState } from 'react'\n+import reactLogo from './assets/react.svg'\n+import viteLogo from '/vite.svg'\n+import './App.css'\n+\n+function App() {\n+  const [count, setCount] = useState(0)\n+  const [name, setName] = useState('unknown')\n+\n+  return (\n+    <>\n+      <div>\n+        <a href=\"https://vite.dev\" target=\"_blank\">\n+          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\n+        </a>\n+        <a href=\"https://react.dev\" target=\"_blank\">\n+          <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n+        </a>\n+      </div>\n+      <h1>Vite + React</h1>\n+      <div className=\"card\">\n+        <button\n+          onClick={() => setCount((count) => count + 1)}\n+          aria-label=\"increment\"\n+        >\n+          count is {count}\n+        </button>\n+        <p>\n+          Edit <code>src/App.tsx</code> and save to test HMR\n+        </p>\n+      </div>\n+      <div className=\"card\">\n+        <button\n+          onClick={() => {\n+            fetch('/api/')\n+              .then((res) => res.json() as Promise<{ name: string }>)\n+              .then((data) => setName(data.name))\n+          }}\n+          aria-label=\"get name\"\n+        >\n+          Name from API is: {name}\n+        </button>\n+        <p>\n+          Edit <code>api/index.ts</code> to change the name\n+        </p>\n+      </div>\n+      <p className=\"read-the-docs\">\n+        Click on the Vite and React logos to learn more\n+      </p>\n+    </>\n+  )\n+}\n+\n+export default App\n+```\n+\n+Now, if you click the button, it will display 'Name from API is: Cloudflare'.\n+\n+Increment the counter to update the application state in the browser.\n+Next, edit `api/index.ts` by changing the `name` it returns to `'Cloudflare Workers'`.\n+If you click the button again, it will display the new `name` while preserving the previously set counter value.\n+With Vite and the Cloudflare plugin, you can iterate on the client and server parts of your app quickly without losing UI state between edits.\n+\n+#### Build your application\n+\n+Run `npm run build` to build your application.\n+\n+If you inspect the `dist` directory, you will see that it contains two subdirectories: `client` and `cloudflare-vite-tutorial`.\n+The `cloudflare-vite-tutorial` directory contains your Worker code and the output `wrangler.json` configuration.\n+\n+#### Preview your application\n+\n+Run `npm run preview` to validate that your application runs as expected.\n+This command will run your build output locally in the Workers runtime, closely matching its behaviour in production.\n+\n+#### Deploy to Cloudflare\n+\n+Run `npm exec wrangler deploy` to deploy your application to Cloudflare.\n+This command will automatically use the output `wrangler.json` that was included in the build output.\n+\n+### Next steps\n+\n+In this tutorial, we created an SPA that could be deployed as a Worker with Workers Assets.\n+We then added an API Worker that could be accessed from the front-end code and deployed to Cloudflare.\n+Possible next steps include:\n+\n+- Adding a binding to another Cloudflare service such as a [KV namespace](https://developers.cloudflare.com/kv/) or [D1 database](https://developers.cloudflare.com/d1/)\n+- Expanding the API to include additional routes\n+- Using a library, such as [tRPC](https://trpc.io/) or [Hono](https://hono.dev/), in your API Worker\n+\n+## API\n+\n+### `cloudflare`\n+\n+The `cloudflare` plugin should be included in the Vite `plugins` array:\n+\n+```ts\n+// vite.config.ts\n+\n+import { defineConfig } from 'vite'\n+import { cloudflare } from '@cloudflare/vite-plugin'\n+\n+export default defineConfig({\n+  plugins: [cloudflare()],\n+})\n+```\n+\n+It accepts an optional `PluginConfig` parameter.\n+\n+### `interface PluginConfig`\n+\n+- `configPath?: string`\n+\n+  An optional path to your Worker config file.\n+  By default, a `wrangler.toml`, `wrangler.json`, or `wrangler.jsonc` file in the root of your application will be used as the Worker config.\n+\n+- `viteEnvironment?: { name?: string }`\n+\n+  Optional Vite environment options.\n+  By default, the environment name is the Worker name with `-` characters replaced with `_`.\n+  Setting the name here will override this.\n+\n+- `persistState?: boolean | { path: string }`\n+\n+  An optional override for state persistence.\n+  By default, state is persisted to `.wrangler/state` in a `v3` subdirectory.\n+  A custom `path` can be provided or, alternatively, persistence can be disabled by setting the value to `false`.\n+\n+- `auxiliaryWorkers?: Array<AuxiliaryWorkerConfig>`\n+\n+  An optional array of auxiliary workers.\n+  You can use [service bindings](https://developers.cloudflare.com/workers/runtime-apis/bindings/service-bindings/) to call auxiliary workers from your main (entry) Worker.\n+  All requests are routed through your entry Worker.\n+  During the build, each Worker is output to a separate subdirectory of `dist`.\n+\n+> [!NOTE]\n+> When running `wrangler deploy`, only your main (entry) Worker will be deployed.\n+> If using multiple Workers, each must be deployed individually.\n+> You can inspect the `dist` directory and then run `wrangler deploy -c path-to-worker-output-config` for each.\n+\n+### `interface AuxiliaryWorkerConfig`\n+\n+- `configPath: string`\n+\n+  A required path to your Worker config file.\n+\n+- `viteEnvironment?: { name?: string }`\n+\n+  Optional Vite environment options.\n+  By default, the environment name is the Worker name with `-` characters replaced with `_`.\n+  Setting the name here will override this.\n+\n+## Worker environments\n+\n+A Worker config file may contain configuration for multiple [Worker environments](https://developers.cloudflare.com/workers/wrangler/environments/).\n+With the Cloudflare Vite plugin, you select an environment at dev or build time by providing the `CLOUDFLARE_ENV` environment variable.\n+Consider the following example `wrangler.toml` file:\n+\n+```toml\n+# wrangler.toml\n+\n+name = \"my-worker\"\n+compatibility_date = \"2024-12-30\"\n+main = \"./src/index.ts\"\n+\n+vars = { MY_VAR = \"Top-level var\" }\n+\n+[env.staging]\n+vars = { MY_VAR = \"Staging var\" }\n+\n+[env.production]\n+vars = { MY_VAR = \"Production var\" }\n+```\n+\n+If you run `CLOUDFLARE_ENV=production vite build` then the output `wrangler.json` file generated by the build will be a flattened configuration for the 'production' environment.\n+This combines [top-level only](https://developers.cloudflare.com/workers/wrangler/configuration/#top-level-only-keys), [inheritable](https://developers.cloudflare.com/workers/wrangler/configuration/#inheritable-keys), and [non-inheritable](https://developers.cloudflare.com/workers/wrangler/configuration/#non-inheritable-keys) keys.\n+The value of `MY_VAR` will therefore be `'Production var'`.\n+The name of the Worker will be `'my-worker-production'`.\n+This is because the environment name is automatically appended to the top-level Worker name.\n+\n+> [!NOTE]\n+> The default Vite environment name for a Worker is always the top-level name.\n+> This enables you to reference the Worker consistently in your Vite config when using multiple environments.\n+\n+Worker environments can also be used in development.\n+For example, you could run `CLOUDFLARE_ENV=development vite dev`.\n+It is common to use the default top-level environment as the development environment and then add additional environments as necessary.\n+\n+> [!NOTE]\n+> Running `vite dev` or `vite build` without providing `CLOUDFLARE_ENV` will use the default top-level environment.\n+> The value of `MY_VAR` will therefore be `'Top-level var'`.\n+> As Worker environments are applied at dev and build time, specifying `CLOUDFLARE_ENV` when running `vite preview` or `wrangler deploy` will have no effect.",
        "comment_created_at": "2025-01-19T19:33:08+00:00",
        "comment_author": "jamesopstad",
        "comment_body": "```suggestion\r\n> As Cloudflare environments are applied at dev and build time, specifying `CLOUDFLARE_ENV` when running `vite preview` or `wrangler deploy` will have no effect.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1508662807",
    "pr_number": 5129,
    "pr_file": ".changeset/stale-needles-unite.md",
    "created_at": "2024-03-01T08:41:28+00:00",
    "commented_code": "+---\n+\"create-cloudflare\": patch\n+---\n+\n+fix: make sure that all C3 projects include in their `.gitignore` the wrangler files\n+\n+previously only the worker templates included in their `.gitignore` the wrangler files",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "1508662807",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 5129,
        "pr_file": ".changeset/stale-needles-unite.md",
        "discussion_id": "1508662807",
        "commented_code": "@@ -0,0 +1,9 @@\n+---\n+\"create-cloudflare\": patch\n+---\n+\n+fix: make sure that all C3 projects include in their `.gitignore` the wrangler files\n+\n+previously only the worker templates included in their `.gitignore` the wrangler files",
        "comment_created_at": "2024-03-01T08:41:28+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "```suggestion\r\nPreviously only the worker templates included in their `.gitignore` the wrangler files\r\n```",
        "pr_file_module": null
      }
    ]
  }
]