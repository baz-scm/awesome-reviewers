[
  {
    "discussion_id": "1711320160",
    "pr_number": 6412,
    "pr_file": "packages/create-cloudflare/src/__tests__/dialog.test.ts",
    "created_at": "2024-08-09T11:47:46+00:00",
    "commented_code": "+import { afterAll, beforeAll, describe, expect, test } from \"vitest\";\n+import { collectCLIOutput, normalizeOutput } from \"../../../cli/test-util\";\n+import { printSummary, printWelcomeMessage } from \"../dialog\";\n+import type { C3Context } from \"types\";\n+\n+describe(\"dialog helpers\", () => {\n+\tconst std = collectCLIOutput();\n+\n+\ttest(\"printWelcomeMessage\", () => {\n+\t\tprintWelcomeMessage(\"0.0.0\");\n+\n+\t\texpect(normalizeOutput(std.out)).toMatchInlineSnapshot(`\n+\t\t\t\" \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n+\t\t\t \u2502 \ud83d\udc4b Welcome to create-cloudflare v0.0.0!                      \u2502\n+\t\t\t \u2502 \ud83e\udde1 Let's get started.                                        \u2502\n+\t\t\t \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n+\t\t\t\"\n+\t\t`);\n+\t});\n+\n+\tdescribe(\"printSummary\", () => {\n+\t\tconst ctx: C3Context = {\n+\t\t\tproject: { name: \"test-project\", path: \"./workspace\" },\n+\t\t\targs: {\n+\t\t\t\tprojectName: \"test-project\",\n+\t\t\t},\n+\t\t\ttemplate: {\n+\t\t\t\tconfigVersion: 1,\n+\t\t\t\tid: \"test\",\n+\t\t\t\tdisplayName: \"display-name\",\n+\t\t\t\tplatform: \"workers\",\n+\t\t\t},\n+\t\t\taccount: {\n+\t\t\t\tid: \"account-id\",\n+\t\t\t\tname: \"account-name\",\n+\t\t\t},\n+\t\t\tdeployment: {\n+\t\t\t\turl: \"https://example.test.workers.dev\",\n+\t\t\t},\n+\t\t\toriginalCWD: \"./workspace\",\n+\t\t\tgitRepoAlreadyExisted: false,\n+\t\t};\n+\n+\t\tlet originalStdoutColumns: number;\n+\n+\t\tbeforeAll(() => {\n+\t\t\toriginalStdoutColumns = process.stdout.columns;\n+\t\t});\n+\n+\t\tafterAll(() => {\n+\t\t\tprocess.stdout.columns = originalStdoutColumns;\n+\t\t});\n+\n+\t\ttest(\"with deploy\", async () => {\n+\t\t\tawait printSummary(ctx);\n+\n+\t\t\texpect(normalizeOutput(std.out)).toMatchInlineSnapshot(`\n+\t\t\t\t\" \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n+\t\t\t\t \u2502 \ud83c\udf89  SUCCESS  Application deployed successfully!                                       \u2502\n+\t\t\t\t \u2502                                                                                       \u2502\n+\t\t\t\t \u2502 \ud83d\udd0d View Project                                                                       \u2502\n+\t\t\t\t \u2502    Visit: https://example.test.workers.dev                                            \u2502\n+\t\t\t\t \u2502    Dash: https://dash.cloudflare.com/?to=/:account/workers/services/view/test-project \u2502\n+\t\t\t\t \u2502                                                                                       \u2502\n+\t\t\t\t \u2502 \ud83d\udcbb Continue Developing                                                                \u2502\n+\t\t\t\t \u2502    Start dev server: npm run start                                                   \u2502\n+\t\t\t\t \u2502    Deploy again: npm run deploy                                                      \u2502\n+\t\t\t\t \u2502                                                                                       \u2502\n+\t\t\t\t \u2502 \ud83d\udcd6 Explore Documentation                                                              \u2502\n+\t\t\t\t \u2502    https://developers.cloudflare.com/workers                                          \u2502\n+\t\t\t\t \u2502                                                                                       \u2502\n+\t\t\t\t \u2502 \ud83d\udcac Join our Community                                                                 \u2502\n+\t\t\t\t \u2502    https://discord.cloudflare.com                                                     \u2502\n+\t\t\t\t \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n+\t\t\t\t\"\n+\t\t\t`);\n+\t\t});\n+\n+\t\ttest(\"with no deploy\", async () => {\n+\t\t\tawait printSummary({\n+\t\t\t\t...ctx,\n+\t\t\t\taccount: undefined,\n+\t\t\t\tdeployment: {},\n+\t\t\t\tproject: { name: \"test-project\", path: \"./example\" },\n+\t\t\t\ttemplate: {\n+\t\t\t\t\t...ctx.template,\n+\t\t\t\t\tplatform: \"pages\",\n+\t\t\t\t},\n+\t\t\t});\n+\n+\t\t\texpect(normalizeOutput(std.out)).toMatchInlineSnapshot(`\n+\t\t\t\t\" \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n+\t\t\t\t \u2502 \ud83c\udf89  SUCCESS  Application created successfully!               \u2502\n+\t\t\t\t \u2502                                                              \u2502\n+\t\t\t\t \u2502 \ud83d\udcbb Continue Developing                                       \u2502\n+\t\t\t\t \u2502    Change directories: cd ../example                         \u2502\n+\t\t\t\t \u2502    Start dev server: npm run start                          \u2502\n+\t\t\t\t \u2502    Deploy: npm run deploy                                   \u2502\n+\t\t\t\t \u2502                                                              \u2502\n+\t\t\t\t \u2502 \ud83d\udcd6 Explore Documentation                                     \u2502\n+\t\t\t\t \u2502    https://developers.cloudflare.com/pages                   \u2502\n+\t\t\t\t \u2502                                                              \u2502\n+\t\t\t\t \u2502 \ud83d\udcac Join our Community                                        \u2502\n+\t\t\t\t \u2502    https://discord.cloudflare.com                            \u2502\n+\t\t\t\t \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n+\t\t\t\t\"\n+\t\t\t`);\n+\t\t});\n+\n+\t\ttest(\"with lines truncated\", async () => {\n+\t\t\tprocess.stdout.columns = 40;",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "1711320160",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 6412,
        "pr_file": "packages/create-cloudflare/src/__tests__/dialog.test.ts",
        "discussion_id": "1711320160",
        "commented_code": "@@ -0,0 +1,137 @@\n+import { afterAll, beforeAll, describe, expect, test } from \"vitest\";\n+import { collectCLIOutput, normalizeOutput } from \"../../../cli/test-util\";\n+import { printSummary, printWelcomeMessage } from \"../dialog\";\n+import type { C3Context } from \"types\";\n+\n+describe(\"dialog helpers\", () => {\n+\tconst std = collectCLIOutput();\n+\n+\ttest(\"printWelcomeMessage\", () => {\n+\t\tprintWelcomeMessage(\"0.0.0\");\n+\n+\t\texpect(normalizeOutput(std.out)).toMatchInlineSnapshot(`\n+\t\t\t\" \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n+\t\t\t \u2502 \ud83d\udc4b Welcome to create-cloudflare v0.0.0!                      \u2502\n+\t\t\t \u2502 \ud83e\udde1 Let's get started.                                        \u2502\n+\t\t\t \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n+\t\t\t\"\n+\t\t`);\n+\t});\n+\n+\tdescribe(\"printSummary\", () => {\n+\t\tconst ctx: C3Context = {\n+\t\t\tproject: { name: \"test-project\", path: \"./workspace\" },\n+\t\t\targs: {\n+\t\t\t\tprojectName: \"test-project\",\n+\t\t\t},\n+\t\t\ttemplate: {\n+\t\t\t\tconfigVersion: 1,\n+\t\t\t\tid: \"test\",\n+\t\t\t\tdisplayName: \"display-name\",\n+\t\t\t\tplatform: \"workers\",\n+\t\t\t},\n+\t\t\taccount: {\n+\t\t\t\tid: \"account-id\",\n+\t\t\t\tname: \"account-name\",\n+\t\t\t},\n+\t\t\tdeployment: {\n+\t\t\t\turl: \"https://example.test.workers.dev\",\n+\t\t\t},\n+\t\t\toriginalCWD: \"./workspace\",\n+\t\t\tgitRepoAlreadyExisted: false,\n+\t\t};\n+\n+\t\tlet originalStdoutColumns: number;\n+\n+\t\tbeforeAll(() => {\n+\t\t\toriginalStdoutColumns = process.stdout.columns;\n+\t\t});\n+\n+\t\tafterAll(() => {\n+\t\t\tprocess.stdout.columns = originalStdoutColumns;\n+\t\t});\n+\n+\t\ttest(\"with deploy\", async () => {\n+\t\t\tawait printSummary(ctx);\n+\n+\t\t\texpect(normalizeOutput(std.out)).toMatchInlineSnapshot(`\n+\t\t\t\t\" \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n+\t\t\t\t \u2502 \ud83c\udf89  SUCCESS  Application deployed successfully!                                       \u2502\n+\t\t\t\t \u2502                                                                                       \u2502\n+\t\t\t\t \u2502 \ud83d\udd0d View Project                                                                       \u2502\n+\t\t\t\t \u2502    Visit: https://example.test.workers.dev                                            \u2502\n+\t\t\t\t \u2502    Dash: https://dash.cloudflare.com/?to=/:account/workers/services/view/test-project \u2502\n+\t\t\t\t \u2502                                                                                       \u2502\n+\t\t\t\t \u2502 \ud83d\udcbb Continue Developing                                                                \u2502\n+\t\t\t\t \u2502    Start dev server: npm run start                                                   \u2502\n+\t\t\t\t \u2502    Deploy again: npm run deploy                                                      \u2502\n+\t\t\t\t \u2502                                                                                       \u2502\n+\t\t\t\t \u2502 \ud83d\udcd6 Explore Documentation                                                              \u2502\n+\t\t\t\t \u2502    https://developers.cloudflare.com/workers                                          \u2502\n+\t\t\t\t \u2502                                                                                       \u2502\n+\t\t\t\t \u2502 \ud83d\udcac Join our Community                                                                 \u2502\n+\t\t\t\t \u2502    https://discord.cloudflare.com                                                     \u2502\n+\t\t\t\t \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n+\t\t\t\t\"\n+\t\t\t`);\n+\t\t});\n+\n+\t\ttest(\"with no deploy\", async () => {\n+\t\t\tawait printSummary({\n+\t\t\t\t...ctx,\n+\t\t\t\taccount: undefined,\n+\t\t\t\tdeployment: {},\n+\t\t\t\tproject: { name: \"test-project\", path: \"./example\" },\n+\t\t\t\ttemplate: {\n+\t\t\t\t\t...ctx.template,\n+\t\t\t\t\tplatform: \"pages\",\n+\t\t\t\t},\n+\t\t\t});\n+\n+\t\t\texpect(normalizeOutput(std.out)).toMatchInlineSnapshot(`\n+\t\t\t\t\" \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n+\t\t\t\t \u2502 \ud83c\udf89  SUCCESS  Application created successfully!               \u2502\n+\t\t\t\t \u2502                                                              \u2502\n+\t\t\t\t \u2502 \ud83d\udcbb Continue Developing                                       \u2502\n+\t\t\t\t \u2502    Change directories: cd ../example                         \u2502\n+\t\t\t\t \u2502    Start dev server: npm run start                          \u2502\n+\t\t\t\t \u2502    Deploy: npm run deploy                                   \u2502\n+\t\t\t\t \u2502                                                              \u2502\n+\t\t\t\t \u2502 \ud83d\udcd6 Explore Documentation                                     \u2502\n+\t\t\t\t \u2502    https://developers.cloudflare.com/pages                   \u2502\n+\t\t\t\t \u2502                                                              \u2502\n+\t\t\t\t \u2502 \ud83d\udcac Join our Community                                        \u2502\n+\t\t\t\t \u2502    https://discord.cloudflare.com                            \u2502\n+\t\t\t\t \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n+\t\t\t\t\"\n+\t\t\t`);\n+\t\t});\n+\n+\t\ttest(\"with lines truncated\", async () => {\n+\t\t\tprocess.stdout.columns = 40;",
        "comment_created_at": "2024-08-09T11:47:46+00:00",
        "comment_author": "RamIdeas",
        "comment_body": "This should be unset in an afterEach to not affect any following tests (there aren't any now but additional tests may be added in the future and it shouldn't be on the next dev to figure that out)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1510941011",
    "pr_number": 5136,
    "pr_file": "packages/edge-preview-authenticated-proxy/tests/index.test.ts",
    "created_at": "2024-03-04T10:30:41+00:00",
    "commented_code": ");\n \t});\n \tit(\"should reject invalid exchange_url\", async () => {\n+\t\tvi.spyOn(console, \"error\").mockImplementation(() => {});",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "1510941011",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 5136,
        "pr_file": "packages/edge-preview-authenticated-proxy/tests/index.test.ts",
        "discussion_id": "1510941011",
        "commented_code": "@@ -108,6 +109,7 @@ compatibility_date = \"2023-01-01\"\n \t\t);\n \t});\n \tit(\"should reject invalid exchange_url\", async () => {\n+\t\tvi.spyOn(console, \"error\").mockImplementation(() => {});",
        "comment_created_at": "2024-03-04T10:30:41+00:00",
        "comment_author": "mrbbot",
        "comment_body": "Should we be resetting these spies after each test? Think you can do this with...\r\n\r\n```ts\r\nafterEach(() => {\r\n  vi.restoreAllMocks();\r\n});\r\n```\r\n\r\nSame with the other changed files.",
        "pr_file_module": null
      },
      {
        "comment_id": "1510950161",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 5136,
        "pr_file": "packages/edge-preview-authenticated-proxy/tests/index.test.ts",
        "discussion_id": "1510941011",
        "commented_code": "@@ -108,6 +109,7 @@ compatibility_date = \"2023-01-01\"\n \t\t);\n \t});\n \tit(\"should reject invalid exchange_url\", async () => {\n+\t\tvi.spyOn(console, \"error\").mockImplementation(() => {});",
        "comment_created_at": "2024-03-04T10:38:14+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "I thought they get reset automatically??",
        "pr_file_module": null
      },
      {
        "comment_id": "1510951452",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 5136,
        "pr_file": "packages/edge-preview-authenticated-proxy/tests/index.test.ts",
        "discussion_id": "1510941011",
        "commented_code": "@@ -108,6 +109,7 @@ compatibility_date = \"2023-01-01\"\n \t\t);\n \t});\n \tit(\"should reject invalid exchange_url\", async () => {\n+\t\tvi.spyOn(console, \"error\").mockImplementation(() => {});",
        "comment_created_at": "2024-03-04T10:39:13+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "Eek! https://vitest.dev/guide/mocking.html\r\nApparently not.",
        "pr_file_module": null
      },
      {
        "comment_id": "1510955164",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 5136,
        "pr_file": "packages/edge-preview-authenticated-proxy/tests/index.test.ts",
        "discussion_id": "1510941011",
        "commented_code": "@@ -108,6 +109,7 @@ compatibility_date = \"2023-01-01\"\n \t\t);\n \t});\n \tit(\"should reject invalid exchange_url\", async () => {\n+\t\tvi.spyOn(console, \"error\").mockImplementation(() => {});",
        "comment_created_at": "2024-03-04T10:41:36+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "Looks like we can configure Vitest to do this for us, which I think is a no-brainer:\r\nhttps://vitest.dev/config/#restoremocks",
        "pr_file_module": null
      },
      {
        "comment_id": "1510988670",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 5136,
        "pr_file": "packages/edge-preview-authenticated-proxy/tests/index.test.ts",
        "discussion_id": "1510941011",
        "commented_code": "@@ -108,6 +109,7 @@ compatibility_date = \"2023-01-01\"\n \t\t);\n \t});\n \tit(\"should reject invalid exchange_url\", async () => {\n+\t\tvi.spyOn(console, \"error\").mockImplementation(() => {});",
        "comment_created_at": "2024-03-04T11:08:47+00:00",
        "comment_author": "mrbbot",
        "comment_body": "Oh nice! Didn't know about that option. \ud83d\udc4d ",
        "pr_file_module": null
      },
      {
        "comment_id": "1511742141",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 5136,
        "pr_file": "packages/edge-preview-authenticated-proxy/tests/index.test.ts",
        "discussion_id": "1510941011",
        "commented_code": "@@ -108,6 +109,7 @@ compatibility_date = \"2023-01-01\"\n \t\t);\n \t});\n \tit(\"should reject invalid exchange_url\", async () => {\n+\t\tvi.spyOn(console, \"error\").mockImplementation(() => {});",
        "comment_created_at": "2024-03-04T20:16:56+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "Added the option, so this comment should be moot.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1973880307",
    "pr_number": 8290,
    "pr_file": "packages/create-cloudflare/src/__tests__/git.test.ts",
    "created_at": "2025-02-27T15:55:40+00:00",
    "commented_code": "describe(\"offerGit\", async () => {\n \t\ttest(\"happy path\", async () => {\n-\t\t\tconst ctx = createTestContext();\n+\t\t\tconst ctx = createTestContext(\"test\", { projectName: \"test\" });",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "1973880307",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 8290,
        "pr_file": "packages/create-cloudflare/src/__tests__/git.test.ts",
        "discussion_id": "1973880307",
        "commented_code": "@@ -147,9 +147,8 @@ describe(\"git helpers\", () => {\n \n \tdescribe(\"offerGit\", async () => {\n \t\ttest(\"happy path\", async () => {\n-\t\t\tconst ctx = createTestContext();\n+\t\t\tconst ctx = createTestContext(\"test\", { projectName: \"test\" });",
        "comment_created_at": "2025-02-27T15:55:40+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "The `testCreateContext()` helper sets up the `ctx.args` to be all the `C3_DEFAULT_ARGS` values, which undermines the idea that the user has not provided any command line args.  By providing an args object here we ensure that none of the CLI args are set so that we have control over them in the tests.",
        "pr_file_module": null
      },
      {
        "comment_id": "1974958896",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 8290,
        "pr_file": "packages/create-cloudflare/src/__tests__/git.test.ts",
        "discussion_id": "1973880307",
        "commented_code": "@@ -147,9 +147,8 @@ describe(\"git helpers\", () => {\n \n \tdescribe(\"offerGit\", async () => {\n \t\ttest(\"happy path\", async () => {\n-\t\t\tconst ctx = createTestContext();\n+\t\t\tconst ctx = createTestContext(\"test\", { projectName: \"test\" });",
        "comment_created_at": "2025-02-28T07:50:15+00:00",
        "comment_author": "vicb",
        "comment_body": "Should your comment be a code comment?",
        "pr_file_module": null
      },
      {
        "comment_id": "1975127049",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 8290,
        "pr_file": "packages/create-cloudflare/src/__tests__/git.test.ts",
        "discussion_id": "1973880307",
        "commented_code": "@@ -147,9 +147,8 @@ describe(\"git helpers\", () => {\n \n \tdescribe(\"offerGit\", async () => {\n \t\ttest(\"happy path\", async () => {\n-\t\t\tconst ctx = createTestContext();\n+\t\t\tconst ctx = createTestContext(\"test\", { projectName: \"test\" });",
        "comment_created_at": "2025-02-28T09:50:00+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "9442311fdea8dfd51738da4b6d541919e1d46c2f",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1701735725",
    "pr_number": 6374,
    "pr_file": "packages/wrangler/src/__tests__/deploy.test.ts",
    "created_at": "2024-08-02T11:42:18+00:00",
    "commented_code": ")\n \t\t\t);\n \t\t});\n+\n+\t\tit(\"should upload an asset manifest of the files in the directory specified by --experimental-assets\", async () => {\n+\t\t\tconst assets = [\n+\t\t\t\t{ filePath: \"file-1.txt\", content: \"Content of file-1\" },\n+\t\t\t\t{ filePath: \"boop/file-2.txt\", content: \"Content of file-2\" },\n+\t\t\t];\n+\t\t\twriteAssets(assets);\n+\t\t\twriteWorkerSource();\n+\t\t\tmsw.use(\n+\t\t\t\thttp.post(\n+\t\t\t\t\t`*/accounts/some-account-id/workers/scripts/test-name/assets-upload-session`,\n+\t\t\t\t\tasync ({ request }) => {\n+\t\t\t\t\t\texpect(await request.json()).toStrictEqual({\n+\t\t\t\t\t\t\tmanifest: {\n+\t\t\t\t\t\t\t\t\"file-1.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"0de3dd5df907418e9730fd2bd747bd5e\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\"boop/file-2.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"7574a8cd3094a050388ac9663af1c1d6\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\n+\t\t\t\t\t\treturn HttpResponse.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuccess: true,\n+\t\t\t\t\t\t\t\terrors: [],\n+\t\t\t\t\t\t\t\tmessages: [],\n+\t\t\t\t\t\t\t\tresult: { jwt: \"<<aus-token>>\", buckets: [] },\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{ status: 201 }\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t)\n+\t\t\t);\n+\t\t\t// skips asset uploading since empty buckets returned\n+\t\t\tmockSubDomainRequest();\n+\t\t\tmockUploadWorkerRequest({\n+\t\t\t\texpectedMainModule: \"no-op-worker.js\",\n+\t\t\t});\n+\t\t\tawait runWrangler(\n+\t\t\t\t\"deploy --name test-name --compatibility-date 2024-07-31 --experimental-assets assets\"\n+\t\t\t);\n+\t\t});\n+\n+\t\tit(\"should upload an asset manifest of the files in the directory specified by [experimental_assets] config\", async () => {\n+\t\t\tconst assets = [\n+\t\t\t\t{ filePath: \"file-1.txt\", content: \"Content of file-1\" },\n+\t\t\t\t{ filePath: \"boop/file-2.txt\", content: \"Content of file-2\" },\n+\t\t\t];\n+\t\t\twriteAssets(assets);\n+\t\t\twriteWranglerToml({\n+\t\t\t\texperimental_assets: { directory: \"assets\" },\n+\t\t\t});\n+\t\t\twriteWorkerSource();\n+\t\t\tmsw.use(\n+\t\t\t\thttp.post(\n+\t\t\t\t\t`*/accounts/some-account-id/workers/scripts/test-name/assets-upload-session`,\n+\t\t\t\t\tasync ({ request }) => {\n+\t\t\t\t\t\texpect(await request.json()).toStrictEqual({\n+\t\t\t\t\t\t\tmanifest: {\n+\t\t\t\t\t\t\t\t\"file-1.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"0de3dd5df907418e9730fd2bd747bd5e\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\"boop/file-2.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"7574a8cd3094a050388ac9663af1c1d6\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\treturn HttpResponse.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuccess: true,\n+\t\t\t\t\t\t\t\terrors: [],\n+\t\t\t\t\t\t\t\tmessages: [],\n+\t\t\t\t\t\t\t\tresult: { jwt: \"<<aus-token>>\", buckets: [] },\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{ status: 201 }\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t)\n+\t\t\t);\n+\t\t\t// skips asset uploading since empty buckets returned\n+\t\t\tmockSubDomainRequest();\n+\t\t\tmockUploadWorkerRequest({\n+\t\t\t\texpectedMainModule: \"no-op-worker.js\",\n+\t\t\t});\n+\t\t\tawait runWrangler(\"deploy\");\n+\t\t});\n+\n+\t\tit(\"should upload assets in the requested buckets\", async () => {\n+\t\t\tconst assets = [\n+\t\t\t\t{ filePath: \"file-1.txt\", content: \"Content of file-1\" },\n+\t\t\t\t{ filePath: \"boop/file-2.txt\", content: \"Content of file-2\" },\n+\t\t\t\t{ filePath: \"boop/file-3.txt\", content: \"Content of file-3\" },\n+\t\t\t\t{ filePath: \"file-4.txt\", content: \"Content of file-4\" },\n+\t\t\t\t{ filePath: \"beep/file-5.txt\", content: \"Content of file-5\" },\n+\t\t\t\t{ filePath: \"beep/file-6.txt\", content: \"Content of file-1\" },\n+\t\t\t];\n+\t\t\twriteAssets(assets);\n+\t\t\twriteWranglerToml({\n+\t\t\t\texperimental_assets: { directory: \"assets\" },\n+\t\t\t});\n+\t\t\twriteWorkerSource();\n+\n+\t\t\tconst uploadRequests: StrictRequest<UploadPayloadFile[]>[] = [];\n+\t\t\tconst bodies: UploadPayloadFile[][] = [];\n+\t\t\tconst mockBuckets = [\n+\t\t\t\t[\n+\t\t\t\t\t\"0de3dd5df907418e9730fd2bd747bd5e\",\n+\t\t\t\t\t\"7574a8cd3094a050388ac9663af1c1d6\",\n+\t\t\t\t],\n+\t\t\t\t[\"ff5016e92f039aa743a4ff7abb3180fa\"],\n+\t\t\t\t[\"f05e28a3d0bdb90d3cf4bdafe592488f\"],\n+\t\t\t\t[\"0de3dd5df907418e9730fd2bd747bd5e\"],\n+\t\t\t];\n+\t\t\tmsw.use(\n+\t\t\t\thttp.post(\n+\t\t\t\t\t`*/accounts/some-account-id/workers/scripts/test-name/assets-upload-session`,\n+\t\t\t\t\tasync () => {\n+\t\t\t\t\t\treturn HttpResponse.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuccess: true,\n+\t\t\t\t\t\t\t\terrors: [],\n+\t\t\t\t\t\t\t\tmessages: [],\n+\t\t\t\t\t\t\t\tresult: {\n+\t\t\t\t\t\t\t\t\tjwt: \"<<aus-token>>\",\n+\t\t\t\t\t\t\t\t\tbuckets: mockBuckets,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{ status: 201 }\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t),\n+\t\t\t\thttp.post(\n+\t\t\t\t\t\"*/accounts/some-account-id/workers/assets/upload\",\n+\t\t\t\t\tasync ({ request }) => {\n+\t\t\t\t\t\tuploadRequests.push(request as StrictRequest<UploadPayloadFile[]>);\n+\t\t\t\t\t\tconst body = (await request.text())\n+\t\t\t\t\t\t\t.split(\"\n\")\n+\t\t\t\t\t\t\t.map((x) => JSON.parse(x)) as UploadPayloadFile[];\n+\n+\t\t\t\t\t\tbodies.push(body);\n+\t\t\t\t\t\texpect(request.headers.get(\"Authorization\")).toBe(\n+\t\t\t\t\t\t\t\"Bearer <<aus-token>>\"\n+\t\t\t\t\t\t);",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "1701735725",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 6374,
        "pr_file": "packages/wrangler/src/__tests__/deploy.test.ts",
        "discussion_id": "1701735725",
        "commented_code": "@@ -4422,6 +4407,231 @@ addEventListener('fetch', event => {});`\n \t\t\t\t)\n \t\t\t);\n \t\t});\n+\n+\t\tit(\"should upload an asset manifest of the files in the directory specified by --experimental-assets\", async () => {\n+\t\t\tconst assets = [\n+\t\t\t\t{ filePath: \"file-1.txt\", content: \"Content of file-1\" },\n+\t\t\t\t{ filePath: \"boop/file-2.txt\", content: \"Content of file-2\" },\n+\t\t\t];\n+\t\t\twriteAssets(assets);\n+\t\t\twriteWorkerSource();\n+\t\t\tmsw.use(\n+\t\t\t\thttp.post(\n+\t\t\t\t\t`*/accounts/some-account-id/workers/scripts/test-name/assets-upload-session`,\n+\t\t\t\t\tasync ({ request }) => {\n+\t\t\t\t\t\texpect(await request.json()).toStrictEqual({\n+\t\t\t\t\t\t\tmanifest: {\n+\t\t\t\t\t\t\t\t\"file-1.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"0de3dd5df907418e9730fd2bd747bd5e\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\"boop/file-2.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"7574a8cd3094a050388ac9663af1c1d6\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\n+\t\t\t\t\t\treturn HttpResponse.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuccess: true,\n+\t\t\t\t\t\t\t\terrors: [],\n+\t\t\t\t\t\t\t\tmessages: [],\n+\t\t\t\t\t\t\t\tresult: { jwt: \"<<aus-token>>\", buckets: [] },\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{ status: 201 }\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t)\n+\t\t\t);\n+\t\t\t// skips asset uploading since empty buckets returned\n+\t\t\tmockSubDomainRequest();\n+\t\t\tmockUploadWorkerRequest({\n+\t\t\t\texpectedMainModule: \"no-op-worker.js\",\n+\t\t\t});\n+\t\t\tawait runWrangler(\n+\t\t\t\t\"deploy --name test-name --compatibility-date 2024-07-31 --experimental-assets assets\"\n+\t\t\t);\n+\t\t});\n+\n+\t\tit(\"should upload an asset manifest of the files in the directory specified by [experimental_assets] config\", async () => {\n+\t\t\tconst assets = [\n+\t\t\t\t{ filePath: \"file-1.txt\", content: \"Content of file-1\" },\n+\t\t\t\t{ filePath: \"boop/file-2.txt\", content: \"Content of file-2\" },\n+\t\t\t];\n+\t\t\twriteAssets(assets);\n+\t\t\twriteWranglerToml({\n+\t\t\t\texperimental_assets: { directory: \"assets\" },\n+\t\t\t});\n+\t\t\twriteWorkerSource();\n+\t\t\tmsw.use(\n+\t\t\t\thttp.post(\n+\t\t\t\t\t`*/accounts/some-account-id/workers/scripts/test-name/assets-upload-session`,\n+\t\t\t\t\tasync ({ request }) => {\n+\t\t\t\t\t\texpect(await request.json()).toStrictEqual({\n+\t\t\t\t\t\t\tmanifest: {\n+\t\t\t\t\t\t\t\t\"file-1.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"0de3dd5df907418e9730fd2bd747bd5e\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\"boop/file-2.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"7574a8cd3094a050388ac9663af1c1d6\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\treturn HttpResponse.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuccess: true,\n+\t\t\t\t\t\t\t\terrors: [],\n+\t\t\t\t\t\t\t\tmessages: [],\n+\t\t\t\t\t\t\t\tresult: { jwt: \"<<aus-token>>\", buckets: [] },\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{ status: 201 }\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t)\n+\t\t\t);\n+\t\t\t// skips asset uploading since empty buckets returned\n+\t\t\tmockSubDomainRequest();\n+\t\t\tmockUploadWorkerRequest({\n+\t\t\t\texpectedMainModule: \"no-op-worker.js\",\n+\t\t\t});\n+\t\t\tawait runWrangler(\"deploy\");\n+\t\t});\n+\n+\t\tit(\"should upload assets in the requested buckets\", async () => {\n+\t\t\tconst assets = [\n+\t\t\t\t{ filePath: \"file-1.txt\", content: \"Content of file-1\" },\n+\t\t\t\t{ filePath: \"boop/file-2.txt\", content: \"Content of file-2\" },\n+\t\t\t\t{ filePath: \"boop/file-3.txt\", content: \"Content of file-3\" },\n+\t\t\t\t{ filePath: \"file-4.txt\", content: \"Content of file-4\" },\n+\t\t\t\t{ filePath: \"beep/file-5.txt\", content: \"Content of file-5\" },\n+\t\t\t\t{ filePath: \"beep/file-6.txt\", content: \"Content of file-1\" },\n+\t\t\t];\n+\t\t\twriteAssets(assets);\n+\t\t\twriteWranglerToml({\n+\t\t\t\texperimental_assets: { directory: \"assets\" },\n+\t\t\t});\n+\t\t\twriteWorkerSource();\n+\n+\t\t\tconst uploadRequests: StrictRequest<UploadPayloadFile[]>[] = [];\n+\t\t\tconst bodies: UploadPayloadFile[][] = [];\n+\t\t\tconst mockBuckets = [\n+\t\t\t\t[\n+\t\t\t\t\t\"0de3dd5df907418e9730fd2bd747bd5e\",\n+\t\t\t\t\t\"7574a8cd3094a050388ac9663af1c1d6\",\n+\t\t\t\t],\n+\t\t\t\t[\"ff5016e92f039aa743a4ff7abb3180fa\"],\n+\t\t\t\t[\"f05e28a3d0bdb90d3cf4bdafe592488f\"],\n+\t\t\t\t[\"0de3dd5df907418e9730fd2bd747bd5e\"],\n+\t\t\t];\n+\t\t\tmsw.use(\n+\t\t\t\thttp.post(\n+\t\t\t\t\t`*/accounts/some-account-id/workers/scripts/test-name/assets-upload-session`,\n+\t\t\t\t\tasync () => {\n+\t\t\t\t\t\treturn HttpResponse.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuccess: true,\n+\t\t\t\t\t\t\t\terrors: [],\n+\t\t\t\t\t\t\t\tmessages: [],\n+\t\t\t\t\t\t\t\tresult: {\n+\t\t\t\t\t\t\t\t\tjwt: \"<<aus-token>>\",\n+\t\t\t\t\t\t\t\t\tbuckets: mockBuckets,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{ status: 201 }\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t),\n+\t\t\t\thttp.post(\n+\t\t\t\t\t\"*/accounts/some-account-id/workers/assets/upload\",\n+\t\t\t\t\tasync ({ request }) => {\n+\t\t\t\t\t\tuploadRequests.push(request as StrictRequest<UploadPayloadFile[]>);\n+\t\t\t\t\t\tconst body = (await request.text())\n+\t\t\t\t\t\t\t.split(\"\\n\")\n+\t\t\t\t\t\t\t.map((x) => JSON.parse(x)) as UploadPayloadFile[];\n+\n+\t\t\t\t\t\tbodies.push(body);\n+\t\t\t\t\t\texpect(request.headers.get(\"Authorization\")).toBe(\n+\t\t\t\t\t\t\t\"Bearer <<aus-token>>\"\n+\t\t\t\t\t\t);",
        "comment_created_at": "2024-08-02T11:42:18+00:00",
        "comment_author": "RamIdeas",
        "comment_body": "I know this already exists around the codebase but I don't love this usage of `expect` inside the mock endpoints. When the test fails (it is a network error to the `fetch` call) it makes debugging incredibly difficult.\r\n\r\nWe should be writing our tests so that they fail in a way that helps us find the cause easily. (Contrived example: using `expect(string).toContain(substring)` vs `expect(string.includes(substring)).toBe(true)` results in a better output from vitest that shows both strings and a diff instead of \"expected true but got false\")\r\n\r\nInstead, can we store an array of these Authorization header values in the test function scope and push to it here (like `bodies`) and assert with all the other assertions at the end of the test. (Looks like we already have `uploadedRequests` so use that further down)",
        "pr_file_module": null
      },
      {
        "comment_id": "1701752180",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 6374,
        "pr_file": "packages/wrangler/src/__tests__/deploy.test.ts",
        "discussion_id": "1701735725",
        "commented_code": "@@ -4422,6 +4407,231 @@ addEventListener('fetch', event => {});`\n \t\t\t\t)\n \t\t\t);\n \t\t});\n+\n+\t\tit(\"should upload an asset manifest of the files in the directory specified by --experimental-assets\", async () => {\n+\t\t\tconst assets = [\n+\t\t\t\t{ filePath: \"file-1.txt\", content: \"Content of file-1\" },\n+\t\t\t\t{ filePath: \"boop/file-2.txt\", content: \"Content of file-2\" },\n+\t\t\t];\n+\t\t\twriteAssets(assets);\n+\t\t\twriteWorkerSource();\n+\t\t\tmsw.use(\n+\t\t\t\thttp.post(\n+\t\t\t\t\t`*/accounts/some-account-id/workers/scripts/test-name/assets-upload-session`,\n+\t\t\t\t\tasync ({ request }) => {\n+\t\t\t\t\t\texpect(await request.json()).toStrictEqual({\n+\t\t\t\t\t\t\tmanifest: {\n+\t\t\t\t\t\t\t\t\"file-1.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"0de3dd5df907418e9730fd2bd747bd5e\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\"boop/file-2.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"7574a8cd3094a050388ac9663af1c1d6\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\n+\t\t\t\t\t\treturn HttpResponse.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuccess: true,\n+\t\t\t\t\t\t\t\terrors: [],\n+\t\t\t\t\t\t\t\tmessages: [],\n+\t\t\t\t\t\t\t\tresult: { jwt: \"<<aus-token>>\", buckets: [] },\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{ status: 201 }\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t)\n+\t\t\t);\n+\t\t\t// skips asset uploading since empty buckets returned\n+\t\t\tmockSubDomainRequest();\n+\t\t\tmockUploadWorkerRequest({\n+\t\t\t\texpectedMainModule: \"no-op-worker.js\",\n+\t\t\t});\n+\t\t\tawait runWrangler(\n+\t\t\t\t\"deploy --name test-name --compatibility-date 2024-07-31 --experimental-assets assets\"\n+\t\t\t);\n+\t\t});\n+\n+\t\tit(\"should upload an asset manifest of the files in the directory specified by [experimental_assets] config\", async () => {\n+\t\t\tconst assets = [\n+\t\t\t\t{ filePath: \"file-1.txt\", content: \"Content of file-1\" },\n+\t\t\t\t{ filePath: \"boop/file-2.txt\", content: \"Content of file-2\" },\n+\t\t\t];\n+\t\t\twriteAssets(assets);\n+\t\t\twriteWranglerToml({\n+\t\t\t\texperimental_assets: { directory: \"assets\" },\n+\t\t\t});\n+\t\t\twriteWorkerSource();\n+\t\t\tmsw.use(\n+\t\t\t\thttp.post(\n+\t\t\t\t\t`*/accounts/some-account-id/workers/scripts/test-name/assets-upload-session`,\n+\t\t\t\t\tasync ({ request }) => {\n+\t\t\t\t\t\texpect(await request.json()).toStrictEqual({\n+\t\t\t\t\t\t\tmanifest: {\n+\t\t\t\t\t\t\t\t\"file-1.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"0de3dd5df907418e9730fd2bd747bd5e\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\"boop/file-2.txt\": {\n+\t\t\t\t\t\t\t\t\thash: \"7574a8cd3094a050388ac9663af1c1d6\",\n+\t\t\t\t\t\t\t\t\tsize: 17,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\treturn HttpResponse.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuccess: true,\n+\t\t\t\t\t\t\t\terrors: [],\n+\t\t\t\t\t\t\t\tmessages: [],\n+\t\t\t\t\t\t\t\tresult: { jwt: \"<<aus-token>>\", buckets: [] },\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{ status: 201 }\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t)\n+\t\t\t);\n+\t\t\t// skips asset uploading since empty buckets returned\n+\t\t\tmockSubDomainRequest();\n+\t\t\tmockUploadWorkerRequest({\n+\t\t\t\texpectedMainModule: \"no-op-worker.js\",\n+\t\t\t});\n+\t\t\tawait runWrangler(\"deploy\");\n+\t\t});\n+\n+\t\tit(\"should upload assets in the requested buckets\", async () => {\n+\t\t\tconst assets = [\n+\t\t\t\t{ filePath: \"file-1.txt\", content: \"Content of file-1\" },\n+\t\t\t\t{ filePath: \"boop/file-2.txt\", content: \"Content of file-2\" },\n+\t\t\t\t{ filePath: \"boop/file-3.txt\", content: \"Content of file-3\" },\n+\t\t\t\t{ filePath: \"file-4.txt\", content: \"Content of file-4\" },\n+\t\t\t\t{ filePath: \"beep/file-5.txt\", content: \"Content of file-5\" },\n+\t\t\t\t{ filePath: \"beep/file-6.txt\", content: \"Content of file-1\" },\n+\t\t\t];\n+\t\t\twriteAssets(assets);\n+\t\t\twriteWranglerToml({\n+\t\t\t\texperimental_assets: { directory: \"assets\" },\n+\t\t\t});\n+\t\t\twriteWorkerSource();\n+\n+\t\t\tconst uploadRequests: StrictRequest<UploadPayloadFile[]>[] = [];\n+\t\t\tconst bodies: UploadPayloadFile[][] = [];\n+\t\t\tconst mockBuckets = [\n+\t\t\t\t[\n+\t\t\t\t\t\"0de3dd5df907418e9730fd2bd747bd5e\",\n+\t\t\t\t\t\"7574a8cd3094a050388ac9663af1c1d6\",\n+\t\t\t\t],\n+\t\t\t\t[\"ff5016e92f039aa743a4ff7abb3180fa\"],\n+\t\t\t\t[\"f05e28a3d0bdb90d3cf4bdafe592488f\"],\n+\t\t\t\t[\"0de3dd5df907418e9730fd2bd747bd5e\"],\n+\t\t\t];\n+\t\t\tmsw.use(\n+\t\t\t\thttp.post(\n+\t\t\t\t\t`*/accounts/some-account-id/workers/scripts/test-name/assets-upload-session`,\n+\t\t\t\t\tasync () => {\n+\t\t\t\t\t\treturn HttpResponse.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuccess: true,\n+\t\t\t\t\t\t\t\terrors: [],\n+\t\t\t\t\t\t\t\tmessages: [],\n+\t\t\t\t\t\t\t\tresult: {\n+\t\t\t\t\t\t\t\t\tjwt: \"<<aus-token>>\",\n+\t\t\t\t\t\t\t\t\tbuckets: mockBuckets,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{ status: 201 }\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t),\n+\t\t\t\thttp.post(\n+\t\t\t\t\t\"*/accounts/some-account-id/workers/assets/upload\",\n+\t\t\t\t\tasync ({ request }) => {\n+\t\t\t\t\t\tuploadRequests.push(request as StrictRequest<UploadPayloadFile[]>);\n+\t\t\t\t\t\tconst body = (await request.text())\n+\t\t\t\t\t\t\t.split(\"\\n\")\n+\t\t\t\t\t\t\t.map((x) => JSON.parse(x)) as UploadPayloadFile[];\n+\n+\t\t\t\t\t\tbodies.push(body);\n+\t\t\t\t\t\texpect(request.headers.get(\"Authorization\")).toBe(\n+\t\t\t\t\t\t\t\"Bearer <<aus-token>>\"\n+\t\t\t\t\t\t);",
        "comment_created_at": "2024-08-02T11:59:12+00:00",
        "comment_author": "emily-shen",
        "comment_body": "Ah I agree completely, I meant to fix this yesterday and just forgot \ud83e\udd26 - will change now ",
        "pr_file_module": null
      }
    ]
  }
]