[
  {
    "discussion_id": "2306875184",
    "pr_number": 10482,
    "pr_file": "packages/vite-plugin-cloudflare/src/index.ts",
    "created_at": "2025-08-28T09:49:11+00:00",
    "commented_code": "? resolvedPluginConfig.workers[environmentName]\n \t\t\t: undefined;\n \t}\n+\n+\tfunction getNodeJsCompat(environmentName: string) {",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "2306875184",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 10482,
        "pr_file": "packages/vite-plugin-cloudflare/src/index.ts",
        "discussion_id": "2306875184",
        "commented_code": "@@ -1107,4 +1128,10 @@ if (import.meta.hot) {\n \t\t\t? resolvedPluginConfig.workers[environmentName]\n \t\t\t: undefined;\n \t}\n+\n+\tfunction getNodeJsCompat(environmentName: string) {",
        "comment_created_at": "2025-08-28T09:49:11+00:00",
        "comment_author": "vicb",
        "comment_body": "nit: add JSDoc to this function?",
        "pr_file_module": null
      },
      {
        "comment_id": "2306956164",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 10482,
        "pr_file": "packages/vite-plugin-cloudflare/src/index.ts",
        "discussion_id": "2306875184",
        "commented_code": "@@ -1107,4 +1128,10 @@ if (import.meta.hot) {\n \t\t\t? resolvedPluginConfig.workers[environmentName]\n \t\t\t: undefined;\n \t}\n+\n+\tfunction getNodeJsCompat(environmentName: string) {",
        "comment_created_at": "2025-08-28T10:20:51+00:00",
        "comment_author": "jamesopstad",
        "comment_body": "[67cfeba](https://github.com/cloudflare/workers-sdk/pull/10482/commits/67cfebaffa2fa2424b6e2285606df906184f9b93)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2182094632",
    "pr_number": 9816,
    "pr_file": "packages/wrangler/src/config/auto-update.ts",
    "created_at": "2025-07-03T07:43:25+00:00",
    "commented_code": "+import fs from \"node:fs\";\n+import path from \"node:path\";\n+import { applyEdits, Edit, modify } from \"jsonc-parser\";\n+import { logger } from \"../logger\";\n+import { readFileSync } from \"../parse\";\n+import {\n+\tcreateBindingConfig,\n+\tdisplayConfigSnippet,\n+\tgetGenericBindingName,\n+\tgetResourceDisplayName,\n+\tpromptForConfigUpdate,\n+\tpromptForValidBindingName,\n+\tvalidateBindingName,\n+} from \"./auto-update-helpers\";\n+import { configFormat } from \"./index\";\n+import type { RawConfig } from \"./config\";\n+\n+export interface ResourceBinding {\n+\ttype:\n+\t\t| \"d1_databases\"\n+\t\t| \"r2_buckets\"\n+\t\t| \"kv_namespaces\"\n+\t\t| \"vectorize\"\n+\t\t| \"hyperdrive\";\n+\tid: string;\n+\tname: string;\n+\tbinding?: string;\n+}\n+\n+/**\n+ * Unified function to handle binding name validation, prompting, and config updates\n+ * for all resource creation commands. This eliminates code duplication across\n+ * KV, D1, R2, Vectorize, and Hyperdrive commands.\n+ *\n+ * This function handles early binding name validation when provided,\n+ * prompts for binding names when needed, and manages config updates.\n+ */\n+export async function handleResourceBindingAndConfigUpdate(\n+\targs: { configBindingName?: string; env?: string },\n+\tconfig: RawConfig & { configPath?: string },\n+\tresource: ResourceBinding\n+): Promise<void> {\n+\t// If the file is not wrangler.jsonc, display the snippet\n+\tconst format = configFormat(config.configPath);\n+\tif (format !== \"jsonc\") {\n+\t\tlogger.debug(\n+\t\t\t`Only JSON/JSONC config files are supported for auto-update, found: ${format}. Falling back to snippet display.`\n+\t\t);\n+\n+\t\tlogger.log(`Add the following to your configuration file:`);\n+\t\tdisplayConfigSnippet(resource, config.configPath);\n+\t\treturn;\n+\t}\n+\n+\tconst { type: resourceType, id: resourceId, name: resourceName } = resource;\n+\tlet shouldUpdate = true;\n+\n+\t// Validate binding name (passed via arguments). If invalid, notify and give them the opportunity to add the config binding name interactive.\n+\tif (args.configBindingName) {\n+\t\tconst bindingNameIsValid = validateBindingName(\n+\t\t\tconfig,\n+\t\t\targs.configBindingName\n+\t\t);\n+\t\tif (bindingNameIsValid.valid) {\n+\t\t\tresource.binding = args.configBindingName;\n+\t\t} else {\n+\t\t\tlogger.log(`\u26a0\ufe0f You entered an invalid binding name.`);\n+\t\t}\n+\t}\n+\n+\t// If there is no binding name in args, prompt to know if user wants to create binding in wrangler.jsonc\n+\tif (!resource.binding) {\n+\t\tshouldUpdate = await promptForConfigUpdate(resourceType);\n+\n+\t\t// If the user does want to update wrangler.jsonc, get a valid binding name\n+\t\tif (shouldUpdate) {\n+\t\t\tresource.binding = await promptForValidBindingName(config, resourceType);\n+\t\t}\n+\t}\n+\n+\t// We now have a valid binding name. We can use it to update the wrangler.jsonc config.\n+\tif (resource.binding) {\n+\t\tupdateJsonConfig(config.configPath!, resource, config);\n+\t} else {\n+\t\t// Show snippet only\n+\t\tconst envString = args.env ? ` under [env.${args.env}]` : \"\";\n+\t\tlogger.log(`Add the following to your configuration file:`);\n+\n+\t\tdisplayConfigSnippet(resource, config.configPath);\n+\t}\n+}\n+\n+export function updateJsonConfig(",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "2182094632",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 9816,
        "pr_file": "packages/wrangler/src/config/auto-update.ts",
        "discussion_id": "2182094632",
        "commented_code": "@@ -0,0 +1,132 @@\n+import fs from \"node:fs\";\n+import path from \"node:path\";\n+import { applyEdits, Edit, modify } from \"jsonc-parser\";\n+import { logger } from \"../logger\";\n+import { readFileSync } from \"../parse\";\n+import {\n+\tcreateBindingConfig,\n+\tdisplayConfigSnippet,\n+\tgetGenericBindingName,\n+\tgetResourceDisplayName,\n+\tpromptForConfigUpdate,\n+\tpromptForValidBindingName,\n+\tvalidateBindingName,\n+} from \"./auto-update-helpers\";\n+import { configFormat } from \"./index\";\n+import type { RawConfig } from \"./config\";\n+\n+export interface ResourceBinding {\n+\ttype:\n+\t\t| \"d1_databases\"\n+\t\t| \"r2_buckets\"\n+\t\t| \"kv_namespaces\"\n+\t\t| \"vectorize\"\n+\t\t| \"hyperdrive\";\n+\tid: string;\n+\tname: string;\n+\tbinding?: string;\n+}\n+\n+/**\n+ * Unified function to handle binding name validation, prompting, and config updates\n+ * for all resource creation commands. This eliminates code duplication across\n+ * KV, D1, R2, Vectorize, and Hyperdrive commands.\n+ *\n+ * This function handles early binding name validation when provided,\n+ * prompts for binding names when needed, and manages config updates.\n+ */\n+export async function handleResourceBindingAndConfigUpdate(\n+\targs: { configBindingName?: string; env?: string },\n+\tconfig: RawConfig & { configPath?: string },\n+\tresource: ResourceBinding\n+): Promise<void> {\n+\t// If the file is not wrangler.jsonc, display the snippet\n+\tconst format = configFormat(config.configPath);\n+\tif (format !== \"jsonc\") {\n+\t\tlogger.debug(\n+\t\t\t`Only JSON/JSONC config files are supported for auto-update, found: ${format}. Falling back to snippet display.`\n+\t\t);\n+\n+\t\tlogger.log(`Add the following to your configuration file:`);\n+\t\tdisplayConfigSnippet(resource, config.configPath);\n+\t\treturn;\n+\t}\n+\n+\tconst { type: resourceType, id: resourceId, name: resourceName } = resource;\n+\tlet shouldUpdate = true;\n+\n+\t// Validate binding name (passed via arguments). If invalid, notify and give them the opportunity to add the config binding name interactive.\n+\tif (args.configBindingName) {\n+\t\tconst bindingNameIsValid = validateBindingName(\n+\t\t\tconfig,\n+\t\t\targs.configBindingName\n+\t\t);\n+\t\tif (bindingNameIsValid.valid) {\n+\t\t\tresource.binding = args.configBindingName;\n+\t\t} else {\n+\t\t\tlogger.log(`\u26a0\ufe0f You entered an invalid binding name.`);\n+\t\t}\n+\t}\n+\n+\t// If there is no binding name in args, prompt to know if user wants to create binding in wrangler.jsonc\n+\tif (!resource.binding) {\n+\t\tshouldUpdate = await promptForConfigUpdate(resourceType);\n+\n+\t\t// If the user does want to update wrangler.jsonc, get a valid binding name\n+\t\tif (shouldUpdate) {\n+\t\t\tresource.binding = await promptForValidBindingName(config, resourceType);\n+\t\t}\n+\t}\n+\n+\t// We now have a valid binding name. We can use it to update the wrangler.jsonc config.\n+\tif (resource.binding) {\n+\t\tupdateJsonConfig(config.configPath!, resource, config);\n+\t} else {\n+\t\t// Show snippet only\n+\t\tconst envString = args.env ? ` under [env.${args.env}]` : \"\";\n+\t\tlogger.log(`Add the following to your configuration file:`);\n+\n+\t\tdisplayConfigSnippet(resource, config.configPath);\n+\t}\n+}\n+\n+export function updateJsonConfig(",
        "comment_created_at": "2025-07-03T07:43:25+00:00",
        "comment_author": "vicb",
        "comment_body": "Could you please add JSDoc to this function?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2084044869",
    "pr_number": 9147,
    "pr_file": "packages/create-cloudflare/src/templates.ts",
    "created_at": "2025-05-12T07:50:43+00:00",
    "commented_code": "ctx: C3Context,\n \t) => Promise<Record<string, string | object>>;\n \n-\t/** An array of compatibility flags to be specified when deploying to pages or workers.*/\n+\t/** An array of compatibility flags to be specified when deploying to pages (unused for workers) */",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "2084044869",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 9147,
        "pr_file": "packages/create-cloudflare/src/templates.ts",
        "discussion_id": "2084044869",
        "commented_code": "@@ -132,7 +132,7 @@ export type TemplateConfig = {\n \t\tctx: C3Context,\n \t) => Promise<Record<string, string | object>>;\n \n-\t/** An array of compatibility flags to be specified when deploying to pages or workers.*/\n+\t/** An array of compatibility flags to be specified when deploying to pages (unused for workers) */",
        "comment_created_at": "2025-05-12T07:50:43+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "Good spot. I see that a couple of other Workers based c3.ts files still include this property. We should remove those as well.\r\nE.g. \r\n- packages/create-cloudflare/templates-experimental/solid/c3.ts\r\n- packages/create-cloudflare/templates/hello-world-with-assets/c3.ts\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2084162162",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 9147,
        "pr_file": "packages/create-cloudflare/src/templates.ts",
        "discussion_id": "2084044869",
        "commented_code": "@@ -132,7 +132,7 @@ export type TemplateConfig = {\n \t\tctx: C3Context,\n \t) => Promise<Record<string, string | object>>;\n \n-\t/** An array of compatibility flags to be specified when deploying to pages or workers.*/\n+\t/** An array of compatibility flags to be specified when deploying to pages (unused for workers) */",
        "comment_created_at": "2025-05-12T08:46:49+00:00",
        "comment_author": "petebacondarwin",
        "comment_body": "https://github.com/cloudflare/workers-sdk/pull/9210",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077117761",
    "pr_number": 8886,
    "pr_file": "packages/create-cloudflare/src/templates.ts",
    "created_at": "2025-05-07T08:37:38+00:00",
    "commented_code": "/** The key of the package.json \"scripts\" entry for previewing the project. Defaults to undefined (there might not be such script) */\n \tpreviewScript?: string;\n \n+\t/** The file path to the generated types file. Defaults to worker-configuration.d.ts*/",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "2077117761",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 8886,
        "pr_file": "packages/create-cloudflare/src/templates.ts",
        "discussion_id": "2077117761",
        "commented_code": "@@ -142,10 +142,18 @@ export type TemplateConfig = {\n \t/** The key of the package.json \"scripts\" entry for previewing the project. Defaults to undefined (there might not be such script) */\n \tpreviewScript?: string;\n \n+\t/** The file path to the generated types file. Defaults to worker-configuration.d.ts*/",
        "comment_created_at": "2025-05-07T08:37:38+00:00",
        "comment_author": "vicb",
        "comment_body": "nit\r\n```suggestion\r\n\t/** The path to the generated types file. Defaults to `worker-configuration.d.ts` */\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1592112194",
    "pr_number": 5716,
    "pr_file": "packages/create-cloudflare/src/frameworks/index.ts",
    "created_at": "2024-05-07T09:27:01+00:00",
    "commented_code": "logRaw(\"\");\n \n \tawait runCommand(cmd, { env });\n+\n+\t// When running e2e tests, commit the result of the scaffolding tool to facilitate\n+\t// diffing what new code is added by C3 as part of the process\n+\tif (process.env.SAVE_DIFFS) {\n+\t\tconst cmdEnv = {\n+\t\t\tsilent: true,\n+\t\t\tcwd: ctx.project.path,\n+\t\t};\n+\n+\t\t// Certain framework scaffolders commit by default. If that's the case, skip.",
    "repo_full_name": "cloudflare/workers-sdk",
    "discussion_comments": [
      {
        "comment_id": "1592112194",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 5716,
        "pr_file": "packages/create-cloudflare/src/frameworks/index.ts",
        "discussion_id": "1592112194",
        "commented_code": "@@ -49,4 +50,22 @@ export const runFrameworkGenerator = async (ctx: C3Context, args: string[]) => {\n \tlogRaw(\"\");\n \n \tawait runCommand(cmd, { env });\n+\n+\t// When running e2e tests, commit the result of the scaffolding tool to facilitate\n+\t// diffing what new code is added by C3 as part of the process\n+\tif (process.env.SAVE_DIFFS) {\n+\t\tconst cmdEnv = {\n+\t\t\tsilent: true,\n+\t\t\tcwd: ctx.project.path,\n+\t\t};\n+\n+\t\t// Certain framework scaffolders commit by default. If that's the case, skip.",
        "comment_created_at": "2024-05-07T09:27:01+00:00",
        "comment_author": "dario-piotrowicz",
        "comment_body": "Is this comment correct? I understand what it means but below I don't see any code that does what this comment is referring to \ud83d\ude15 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1595729854",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 5716,
        "pr_file": "packages/create-cloudflare/src/frameworks/index.ts",
        "discussion_id": "1592112194",
        "commented_code": "@@ -49,4 +50,22 @@ export const runFrameworkGenerator = async (ctx: C3Context, args: string[]) => {\n \tlogRaw(\"\");\n \n \tawait runCommand(cmd, { env });\n+\n+\t// When running e2e tests, commit the result of the scaffolding tool to facilitate\n+\t// diffing what new code is added by C3 as part of the process\n+\tif (process.env.SAVE_DIFFS) {\n+\t\tconst cmdEnv = {\n+\t\t\tsilent: true,\n+\t\t\tcwd: ctx.project.path,\n+\t\t};\n+\n+\t\t// Certain framework scaffolders commit by default. If that's the case, skip.",
        "comment_created_at": "2024-05-09T17:05:39+00:00",
        "comment_author": "jculvey",
        "comment_body": "It is. For example, `create-react-app` commits by default. In that case, we don't want to try the following code, because the git commit will fail. Thus, we're checking if the `create-*` package committed already by using `isInsideGitRepo` before proceeding.",
        "pr_file_module": null
      },
      {
        "comment_id": "1596046782",
        "repo_full_name": "cloudflare/workers-sdk",
        "pr_number": 5716,
        "pr_file": "packages/create-cloudflare/src/frameworks/index.ts",
        "discussion_id": "1592112194",
        "commented_code": "@@ -49,4 +50,22 @@ export const runFrameworkGenerator = async (ctx: C3Context, args: string[]) => {\n \tlogRaw(\"\");\n \n \tawait runCommand(cmd, { env });\n+\n+\t// When running e2e tests, commit the result of the scaffolding tool to facilitate\n+\t// diffing what new code is added by C3 as part of the process\n+\tif (process.env.SAVE_DIFFS) {\n+\t\tconst cmdEnv = {\n+\t\t\tsilent: true,\n+\t\t\tcwd: ctx.project.path,\n+\t\t};\n+\n+\t\t// Certain framework scaffolders commit by default. If that's the case, skip.",
        "comment_created_at": "2024-05-09T22:27:06+00:00",
        "comment_author": "dario-piotrowicz",
        "comment_body": "ah ok, because a `create-*` tool will only create a git repo when it actually commits?\r\n\r\nif that's the case maybe we could update the comment to reflect that?\r\n\r\nas in:\r\n```suggestion\r\n\t\t// Certain framework scaffolders commit by default, this implies that they initialize a git repo.\r\n\t\t// so If that's the case and we are in a repo we skip.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]