[
  {
    "discussion_id": "2216888215",
    "pr_number": 239,
    "pr_file": "plugins/action-copy-curl/src/index.ts",
    "created_at": "2025-07-18T20:39:39+00:00",
    "commented_code": "// Add method and URL all on first line\n   if (request.method) xs.push('-X', request.method);\n-  if (request.url) xs.push(quote(request.url));\n \n-  xs.push(NEWLINE);\n-\n-  // Add URL params\n-  for (const p of (request.urlParameters ?? []).filter(onlyEnabled)) {\n-    xs.push('--url-query', quote(`${p.name}=${p.value}`));\n-    xs.push(NEWLINE);\n+  // Build final URL with parameters (compatible with old curl)\n+  let finalUrl = request.url || '';\n+  const urlParams = (request.urlParameters ?? []).filter(onlyEnabled);\n+  if (urlParams.length > 0) {\n+    try {\n+      // Build url using URL class\n+      const urlObj = new URL(finalUrl);\n+      urlParams.forEach(p => {\n+        urlObj.searchParams.append(p.name, p.value);\n+      });\n+      finalUrl = urlObj.toString();\n+    } catch {\n+      // Build manually\n+      const [base, hash] = finalUrl.split('#');\n+      const separator = base!.includes('?') ? '&' : '?';\n+      const queryString = urlParams\n+        .map(p => `${encodeURIComponent(p.name)}=${encodeURIComponent(p.value)}`)\n+        .join('&');\n+      finalUrl = base + separator + queryString + (hash ? `#${hash}` : '');",
    "repo_full_name": "mountain-loop/yaak",
    "discussion_comments": [
      {
        "comment_id": "2216888215",
        "repo_full_name": "mountain-loop/yaak",
        "pr_number": 239,
        "pr_file": "plugins/action-copy-curl/src/index.ts",
        "discussion_id": "2216888215",
        "commented_code": "@@ -29,16 +29,32 @@ export async function convertToCurl(request: Partial<HttpRequest>) {\n \n   // Add method and URL all on first line\n   if (request.method) xs.push('-X', request.method);\n-  if (request.url) xs.push(quote(request.url));\n \n-  xs.push(NEWLINE);\n-\n-  // Add URL params\n-  for (const p of (request.urlParameters ?? []).filter(onlyEnabled)) {\n-    xs.push('--url-query', quote(`${p.name}=${p.value}`));\n-    xs.push(NEWLINE);\n+  // Build final URL with parameters (compatible with old curl)\n+  let finalUrl = request.url || '';\n+  const urlParams = (request.urlParameters ?? []).filter(onlyEnabled);\n+  if (urlParams.length > 0) {\n+    try {\n+      // Build url using URL class\n+      const urlObj = new URL(finalUrl);\n+      urlParams.forEach(p => {\n+        urlObj.searchParams.append(p.name, p.value);\n+      });\n+      finalUrl = urlObj.toString();\n+    } catch {\n+      // Build manually\n+      const [base, hash] = finalUrl.split('#');\n+      const separator = base!.includes('?') ? '&' : '?';\n+      const queryString = urlParams\n+        .map(p => `${encodeURIComponent(p.name)}=${encodeURIComponent(p.value)}`)\n+        .join('&');\n+      finalUrl = base + separator + queryString + (hash ? `#${hash}` : '');",
        "comment_created_at": "2025-07-18T20:39:39+00:00",
        "comment_author": "gschier",
        "comment_body": "If it works well enough for a fallback, I think we should just always used this method and remove the code in the `try {}`",
        "pr_file_module": null
      },
      {
        "comment_id": "2217085206",
        "repo_full_name": "mountain-loop/yaak",
        "pr_number": 239,
        "pr_file": "plugins/action-copy-curl/src/index.ts",
        "discussion_id": "2216888215",
        "commented_code": "@@ -29,16 +29,32 @@ export async function convertToCurl(request: Partial<HttpRequest>) {\n \n   // Add method and URL all on first line\n   if (request.method) xs.push('-X', request.method);\n-  if (request.url) xs.push(quote(request.url));\n \n-  xs.push(NEWLINE);\n-\n-  // Add URL params\n-  for (const p of (request.urlParameters ?? []).filter(onlyEnabled)) {\n-    xs.push('--url-query', quote(`${p.name}=${p.value}`));\n-    xs.push(NEWLINE);\n+  // Build final URL with parameters (compatible with old curl)\n+  let finalUrl = request.url || '';\n+  const urlParams = (request.urlParameters ?? []).filter(onlyEnabled);\n+  if (urlParams.length > 0) {\n+    try {\n+      // Build url using URL class\n+      const urlObj = new URL(finalUrl);\n+      urlParams.forEach(p => {\n+        urlObj.searchParams.append(p.name, p.value);\n+      });\n+      finalUrl = urlObj.toString();\n+    } catch {\n+      // Build manually\n+      const [base, hash] = finalUrl.split('#');\n+      const separator = base!.includes('?') ? '&' : '?';\n+      const queryString = urlParams\n+        .map(p => `${encodeURIComponent(p.name)}=${encodeURIComponent(p.value)}`)\n+        .join('&');\n+      finalUrl = base + separator + queryString + (hash ? `#${hash}` : '');",
        "comment_created_at": "2025-07-19T01:36:58+00:00",
        "comment_author": "subframe7536",
        "comment_body": "I'm not familar with the logic in plugin instance and url validation. If the `request.url` is granted to be a valid url, it can be simplified, otherwise I think we should use the superior URL API first for maximum safety and correctness.",
        "pr_file_module": null
      },
      {
        "comment_id": "2217367890",
        "repo_full_name": "mountain-loop/yaak",
        "pr_number": 239,
        "pr_file": "plugins/action-copy-curl/src/index.ts",
        "discussion_id": "2216888215",
        "commented_code": "@@ -29,16 +29,32 @@ export async function convertToCurl(request: Partial<HttpRequest>) {\n \n   // Add method and URL all on first line\n   if (request.method) xs.push('-X', request.method);\n-  if (request.url) xs.push(quote(request.url));\n \n-  xs.push(NEWLINE);\n-\n-  // Add URL params\n-  for (const p of (request.urlParameters ?? []).filter(onlyEnabled)) {\n-    xs.push('--url-query', quote(`${p.name}=${p.value}`));\n-    xs.push(NEWLINE);\n+  // Build final URL with parameters (compatible with old curl)\n+  let finalUrl = request.url || '';\n+  const urlParams = (request.urlParameters ?? []).filter(onlyEnabled);\n+  if (urlParams.length > 0) {\n+    try {\n+      // Build url using URL class\n+      const urlObj = new URL(finalUrl);\n+      urlParams.forEach(p => {\n+        urlObj.searchParams.append(p.name, p.value);\n+      });\n+      finalUrl = urlObj.toString();\n+    } catch {\n+      // Build manually\n+      const [base, hash] = finalUrl.split('#');\n+      const separator = base!.includes('?') ? '&' : '?';\n+      const queryString = urlParams\n+        .map(p => `${encodeURIComponent(p.name)}=${encodeURIComponent(p.value)}`)\n+        .join('&');\n+      finalUrl = base + separator + queryString + (hash ? `#${hash}` : '');",
        "comment_created_at": "2025-07-19T16:32:51+00:00",
        "comment_author": "gschier",
        "comment_body": "I don't think using `URL` is actually that good because it might modify the URL to do things like normalize paths.\r\n\r\nI think we should leave the URL alone as much as possible and go with the more flexible string-building approach.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2216889804",
    "pr_number": 239,
    "pr_file": "plugins/action-copy-curl/tests/index.test.ts",
    "created_at": "2025-07-18T20:41:05+00:00",
    "commented_code": "],\n       }),\n     ).toEqual(\n-      [`curl 'https://yaak.app'`, `--url-query 'a=aaa'`, `--url-query 'b=bbb'`].join(` \\\\\n  `),",
    "repo_full_name": "mountain-loop/yaak",
    "discussion_comments": [
      {
        "comment_id": "2216889804",
        "repo_full_name": "mountain-loop/yaak",
        "pr_number": 239,
        "pr_file": "plugins/action-copy-curl/tests/index.test.ts",
        "discussion_id": "2216889804",
        "commented_code": "@@ -13,7 +13,7 @@ describe('exporter-curl', () => {\n         ],\n       }),\n     ).toEqual(\n-      [`curl 'https://yaak.app'`, `--url-query 'a=aaa'`, `--url-query 'b=bbb'`].join(` \\\\\\n  `),",
        "comment_created_at": "2025-07-18T20:41:05+00:00",
        "comment_author": "gschier",
        "comment_body": "Can you modify this test to account for the `#` url fragment? ",
        "pr_file_module": null
      }
    ]
  }
]