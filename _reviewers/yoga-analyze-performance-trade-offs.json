[
  {
    "discussion_id": "117773897",
    "pr_number": 509,
    "pr_file": "YogaKit/Source/YGLayout.m",
    "created_at": "2017-05-22T15:24:21+00:00",
    "commented_code": "@interface YGLayout ()\n \n-@property (nonatomic, weak, readonly) UIView *view;\n+@property (nonatomic, assign, readonly) YGNodeRef node;",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "117773897",
        "repo_full_name": "facebook/yoga",
        "pr_number": 509,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "117773897",
        "commented_code": "@@ -89,7 +89,8 @@ - (void)set##objc_capitalized_name:(CGFloat)objc_lowercased_name\n \n @interface YGLayout ()\n \n-@property (nonatomic, weak, readonly) UIView *view;\n+@property (nonatomic, assign, readonly) YGNodeRef node;",
        "comment_created_at": "2017-05-22T15:24:21+00:00",
        "comment_author": "d16r",
        "comment_body": "Can we declare these as ivars in the header? We don't really need the readwrite properties, and it only bloats the memory footprint of these objects.",
        "pr_file_module": null
      },
      {
        "comment_id": "117891143",
        "repo_full_name": "facebook/yoga",
        "pr_number": 509,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "117773897",
        "commented_code": "@@ -89,7 +89,8 @@ - (void)set##objc_capitalized_name:(CGFloat)objc_lowercased_name\n \n @interface YGLayout ()\n \n-@property (nonatomic, weak, readonly) UIView *view;\n+@property (nonatomic, assign, readonly) YGNodeRef node;",
        "comment_created_at": "2017-05-23T03:33:17+00:00",
        "comment_author": "fjolnir",
        "comment_body": "It does not affect the memory footprint, but it does reduce the number of msgSends. So probably not a bad idea. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "130222311",
    "pr_number": 608,
    "pr_file": "YogaKit/Source/YGLayout.m",
    "created_at": "2017-07-29T15:06:05+00:00",
    "commented_code": "for (UIView *const subview in subviewsToInclude) {\n       YGAttachNodesFromViewHierachy(subview);\n     }\n+\n+    [subviewsToInclude release];",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "130222311",
        "repo_full_name": "facebook/yoga",
        "pr_number": 608,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "130222311",
        "commented_code": "@@ -376,6 +376,8 @@ static void YGAttachNodesFromViewHierachy(UIView *const view)\n     for (UIView *const subview in subviewsToInclude) {\n       YGAttachNodesFromViewHierachy(subview);\n     }\n+\n+    [subviewsToInclude release];",
        "comment_created_at": "2017-07-29T15:06:05+00:00",
        "comment_author": "d16r",
        "comment_body": "This file should be ARC-enabled, so, this should automatically be included at compile-time. Is there a reason to suspect this isn't being released?",
        "pr_file_module": null
      },
      {
        "comment_id": "130223107",
        "repo_full_name": "facebook/yoga",
        "pr_number": 608,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "130222311",
        "commented_code": "@@ -376,6 +376,8 @@ static void YGAttachNodesFromViewHierachy(UIView *const view)\n     for (UIView *const subview in subviewsToInclude) {\n       YGAttachNodesFromViewHierachy(subview);\n     }\n+\n+    [subviewsToInclude release];",
        "comment_created_at": "2017-07-29T15:50:43+00:00",
        "comment_author": "woehrl01",
        "comment_body": "Yeah! Sorry, didn't had ARC in mind while looking through the code. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "97247591",
    "pr_number": 350,
    "pr_file": "YogaKit/YGLayout.m",
    "created_at": "2017-01-23T03:22:20+00:00",
    "commented_code": "if (yoga.isLeaf) {\n     YGRemoveAllChildren(node);\n     YGNodeSetMeasureFunc(node, YGMeasureView);\n+\n+    YGSize oldSize = yoga.cachedSize;\n+    YGSize newSize = YGMeasureView(node, 0, YGMeasureModeUndefined, 0, YGMeasureModeUndefined);",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "97247591",
        "repo_full_name": "facebook/yoga",
        "pr_number": 350,
        "pr_file": "YogaKit/YGLayout.m",
        "discussion_id": "97247591",
        "commented_code": "@@ -318,6 +312,14 @@ static void YGAttachNodesFromViewHierachy(UIView *const view)\n   if (yoga.isLeaf) {\n     YGRemoveAllChildren(node);\n     YGNodeSetMeasureFunc(node, YGMeasureView);\n+\n+    YGSize oldSize = yoga.cachedSize;\n+    YGSize newSize = YGMeasureView(node, 0, YGMeasureModeUndefined, 0, YGMeasureModeUndefined);",
        "comment_created_at": "2017-01-23T03:22:20+00:00",
        "comment_author": "d16r",
        "comment_body": "I'm going to be honest, I'm not sure this is something we would want to do.\r\n\r\n1. We are now guaranteeing that every leaf node is going to be measured during every single layout call, that's going to get pretty expensive, especially if we have to size text.\r\n\r\n2. Are views measured with zero size supposed to return a non-zero value? I don't think that's an assumption we should make. As a result, I'm not sure that the result is something that we should be comparing to an *actual* measurement.",
        "pr_file_module": null
      },
      {
        "comment_id": "97287869",
        "repo_full_name": "facebook/yoga",
        "pr_number": 350,
        "pr_file": "YogaKit/YGLayout.m",
        "discussion_id": "97247591",
        "commented_code": "@@ -318,6 +312,14 @@ static void YGAttachNodesFromViewHierachy(UIView *const view)\n   if (yoga.isLeaf) {\n     YGRemoveAllChildren(node);\n     YGNodeSetMeasureFunc(node, YGMeasureView);\n+\n+    YGSize oldSize = yoga.cachedSize;\n+    YGSize newSize = YGMeasureView(node, 0, YGMeasureModeUndefined, 0, YGMeasureModeUndefined);",
        "comment_created_at": "2017-01-23T10:20:47+00:00",
        "comment_author": "hartbit",
        "comment_body": "A few points:\r\n\r\n1. My benchmarks show me that this should not be a concern. `UIImageView` `sizeThatFits` seems instantaneous because it simply returns the size of the image. `UILabel`'s `sizeThatFits` takes 0.0000567 seconds (5% STD) on my iPhone 6S.\r\n\r\n2. I'm not quite sure I understand your point. Could you explain again? :)\r\n\r\nI understand the drawbacks you are putting forward. But, having used this auto-detection in the app I'm currently working, I can tell you it's a lifesaver. I tried for a while to mark views as dirty when necessary, but it's very bug-prone. If we are really worried about performance, perhaps we could make it an optional feature?\r\n\r\n```\r\n[YGYoga setDirtyNodeDetectionEnabled:YES];\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "97458882",
        "repo_full_name": "facebook/yoga",
        "pr_number": 350,
        "pr_file": "YogaKit/YGLayout.m",
        "discussion_id": "97247591",
        "commented_code": "@@ -318,6 +312,14 @@ static void YGAttachNodesFromViewHierachy(UIView *const view)\n   if (yoga.isLeaf) {\n     YGRemoveAllChildren(node);\n     YGNodeSetMeasureFunc(node, YGMeasureView);\n+\n+    YGSize oldSize = yoga.cachedSize;\n+    YGSize newSize = YGMeasureView(node, 0, YGMeasureModeUndefined, 0, YGMeasureModeUndefined);",
        "comment_created_at": "2017-01-24T01:44:31+00:00",
        "comment_author": "emilsjolander",
        "comment_body": "@hartbit `UILabel` and `UITextView` can take substantially longer than that to measure text. It depends on the complexity of the text being shown (for example multiline bidirectional text). Also the 6s is a very fast phone.",
        "pr_file_module": null
      },
      {
        "comment_id": "97481708",
        "repo_full_name": "facebook/yoga",
        "pr_number": 350,
        "pr_file": "YogaKit/YGLayout.m",
        "discussion_id": "97247591",
        "commented_code": "@@ -318,6 +312,14 @@ static void YGAttachNodesFromViewHierachy(UIView *const view)\n   if (yoga.isLeaf) {\n     YGRemoveAllChildren(node);\n     YGNodeSetMeasureFunc(node, YGMeasureView);\n+\n+    YGSize oldSize = yoga.cachedSize;\n+    YGSize newSize = YGMeasureView(node, 0, YGMeasureModeUndefined, 0, YGMeasureModeUndefined);",
        "comment_created_at": "2017-01-24T06:30:04+00:00",
        "comment_author": "hartbit",
        "comment_body": "@emilsjolander @dshahidehpour Point taken. But in that case, I'd still argue that this feature is worthwhile for quite a few projects where the performance impact won't be felt. I use it myself on a complex project and I'm still at 60FPS. Could we introduce the feature as an **off-by-default** feature as suggested?",
        "pr_file_module": null
      },
      {
        "comment_id": "98082087",
        "repo_full_name": "facebook/yoga",
        "pr_number": 350,
        "pr_file": "YogaKit/YGLayout.m",
        "discussion_id": "97247591",
        "commented_code": "@@ -318,6 +312,14 @@ static void YGAttachNodesFromViewHierachy(UIView *const view)\n   if (yoga.isLeaf) {\n     YGRemoveAllChildren(node);\n     YGNodeSetMeasureFunc(node, YGMeasureView);\n+\n+    YGSize oldSize = yoga.cachedSize;\n+    YGSize newSize = YGMeasureView(node, 0, YGMeasureModeUndefined, 0, YGMeasureModeUndefined);",
        "comment_created_at": "2017-01-26T20:16:36+00:00",
        "comment_author": "hartbit",
        "comment_body": "@emilsjolander @dshahidehpour Sorry to bother you about this, but have you had time to think about my last message and the idea of introducing the feature as an \"experimental\" feature?",
        "pr_file_module": null
      },
      {
        "comment_id": "98492397",
        "repo_full_name": "facebook/yoga",
        "pr_number": 350,
        "pr_file": "YogaKit/YGLayout.m",
        "discussion_id": "97247591",
        "commented_code": "@@ -318,6 +312,14 @@ static void YGAttachNodesFromViewHierachy(UIView *const view)\n   if (yoga.isLeaf) {\n     YGRemoveAllChildren(node);\n     YGNodeSetMeasureFunc(node, YGMeasureView);\n+\n+    YGSize oldSize = yoga.cachedSize;\n+    YGSize newSize = YGMeasureView(node, 0, YGMeasureModeUndefined, 0, YGMeasureModeUndefined);",
        "comment_created_at": "2017-01-30T17:21:14+00:00",
        "comment_author": "emilsjolander",
        "comment_body": "@hartbit Sorry for the delay in responding. I would rather not implement these kinds of flags for now. Is it easy enough to implement outside of Yoga within applications which would like to use this? I think we should continue to think about this irregardless of whether we end up merging this PR, I know @dshahidehpour is very interested in solving this as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "99124365",
        "repo_full_name": "facebook/yoga",
        "pr_number": 350,
        "pr_file": "YogaKit/YGLayout.m",
        "discussion_id": "97247591",
        "commented_code": "@@ -318,6 +312,14 @@ static void YGAttachNodesFromViewHierachy(UIView *const view)\n   if (yoga.isLeaf) {\n     YGRemoveAllChildren(node);\n     YGNodeSetMeasureFunc(node, YGMeasureView);\n+\n+    YGSize oldSize = yoga.cachedSize;\n+    YGSize newSize = YGMeasureView(node, 0, YGMeasureModeUndefined, 0, YGMeasureModeUndefined);",
        "comment_created_at": "2017-02-02T14:01:17+00:00",
        "comment_author": "hartbit",
        "comment_body": "It's not easy necessarily easy to implement within applications outside of yoga: it requires wrapping a call to `applyLayout` with a function which visits the view hierarchy, finding the leaf nodes, caching the view's size and dirty it only if the size changes. I know iOS fairly well, and I don't yet see a better way to do it. Swizzling `setNeedsLayout` was a good idea, but it didn't work in practice.",
        "pr_file_module": null
      }
    ]
  }
]