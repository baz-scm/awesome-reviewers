[
  {
    "discussion_id": "117773526",
    "pr_number": 509,
    "pr_file": "YogaKit/Source/YGLayout.m",
    "created_at": "2017-05-22T15:22:47+00:00",
    "commented_code": "return roundf(value * scale) / scale;\n }\n \n-static void YGApplyLayoutToViewHierarchy(UIView *view, BOOL preserveOrigin)\n+static void YGApplyLayoutToHierarchy(id<YGLayoutEntity> entity, BOOL preserveOrigin, CGPoint offset)\n {\n   NSCAssert([NSThread isMainThread], @\"Framesetting should only be done on the main thread.\");\n \n-  const YGLayout *yoga = view.yoga;\n+  const YGLayout *yoga = entity.yoga;\n \n   if (!yoga.isIncludedInLayout) {\n      return;\n   }\n \n   YGNodeRef node = yoga.node;\n   const CGPoint topLeft = {\n-    YGNodeLayoutGetLeft(node),\n-    YGNodeLayoutGetTop(node),\n+    YGNodeLayoutGetLeft(node) + offset.x,\n+    YGNodeLayoutGetTop(node) + offset.y,\n   };\n \n-  const CGPoint bottomRight = {\n-    topLeft.x + YGNodeLayoutGetWidth(node),\n-    topLeft.y + YGNodeLayoutGetHeight(node),\n-  };\n-\n-  const CGPoint origin = preserveOrigin ? view.frame.origin : CGPointZero;\n-  view.frame = (CGRect) {\n+  const CGPoint origin = preserveOrigin ? entity.frame.origin : CGPointZero;\n+  entity.frame = (CGRect) {\n     .origin = {\n       .x = YGRoundPixelValue(topLeft.x + origin.x),\n       .y = YGRoundPixelValue(topLeft.y + origin.y),\n     },\n     .size = {\n-      .width = YGRoundPixelValue(bottomRight.x) - YGRoundPixelValue(topLeft.x),\n-      .height = YGRoundPixelValue(bottomRight.y) - YGRoundPixelValue(topLeft.y),\n+      .width = YGNodeLayoutGetWidth(node),\n+      .height = YGNodeLayoutGetHeight(node),\n     },\n   };\n \n   if (!yoga.isLeaf) {\n-    for (NSUInteger i=0; i<view.subviews.count; i++) {\n-      YGApplyLayoutToViewHierarchy(view.subviews[i], NO);\n+    for (NSUInteger i=0; i<entity.subEntities.count; i++) {\n+      YGApplyLayoutToHierarchy(entity.subEntities[i],\n+                               NO,\n+                               [entity conformsToProtocol:@protocol(UICoordinateSpace)] ? CGPointZero : entity.frame.origin);\n     }\n   }\n }\n \n @end\n+\n+@implementation YGLayoutContainer\n+@synthesize frame=_frame;\n+\n+- (instancetype)init\n+{\n+  return [self initWithEntity:self];\n+}\n+- (instancetype)initWithEntity:(id<YGLayoutEntity>)entity\n+{\n+  if ((self = [super initWithEntity:entity])) {\n+    self.isEnabled = YES;",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "117773526",
        "repo_full_name": "facebook/yoga",
        "pr_number": 509,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "117773526",
        "commented_code": "@@ -374,44 +384,87 @@ static CGFloat YGRoundPixelValue(CGFloat value)\n   return roundf(value * scale) / scale;\n }\n \n-static void YGApplyLayoutToViewHierarchy(UIView *view, BOOL preserveOrigin)\n+static void YGApplyLayoutToHierarchy(id<YGLayoutEntity> entity, BOOL preserveOrigin, CGPoint offset)\n {\n   NSCAssert([NSThread isMainThread], @\"Framesetting should only be done on the main thread.\");\n \n-  const YGLayout *yoga = view.yoga;\n+  const YGLayout *yoga = entity.yoga;\n \n   if (!yoga.isIncludedInLayout) {\n      return;\n   }\n \n   YGNodeRef node = yoga.node;\n   const CGPoint topLeft = {\n-    YGNodeLayoutGetLeft(node),\n-    YGNodeLayoutGetTop(node),\n+    YGNodeLayoutGetLeft(node) + offset.x,\n+    YGNodeLayoutGetTop(node) + offset.y,\n   };\n \n-  const CGPoint bottomRight = {\n-    topLeft.x + YGNodeLayoutGetWidth(node),\n-    topLeft.y + YGNodeLayoutGetHeight(node),\n-  };\n-\n-  const CGPoint origin = preserveOrigin ? view.frame.origin : CGPointZero;\n-  view.frame = (CGRect) {\n+  const CGPoint origin = preserveOrigin ? entity.frame.origin : CGPointZero;\n+  entity.frame = (CGRect) {\n     .origin = {\n       .x = YGRoundPixelValue(topLeft.x + origin.x),\n       .y = YGRoundPixelValue(topLeft.y + origin.y),\n     },\n     .size = {\n-      .width = YGRoundPixelValue(bottomRight.x) - YGRoundPixelValue(topLeft.x),\n-      .height = YGRoundPixelValue(bottomRight.y) - YGRoundPixelValue(topLeft.y),\n+      .width = YGNodeLayoutGetWidth(node),\n+      .height = YGNodeLayoutGetHeight(node),\n     },\n   };\n \n   if (!yoga.isLeaf) {\n-    for (NSUInteger i=0; i<view.subviews.count; i++) {\n-      YGApplyLayoutToViewHierarchy(view.subviews[i], NO);\n+    for (NSUInteger i=0; i<entity.subEntities.count; i++) {\n+      YGApplyLayoutToHierarchy(entity.subEntities[i],\n+                               NO,\n+                               [entity conformsToProtocol:@protocol(UICoordinateSpace)] ? CGPointZero : entity.frame.origin);\n     }\n   }\n }\n \n @end\n+\n+@implementation YGLayoutContainer\n+@synthesize frame=_frame;\n+\n+- (instancetype)init\n+{\n+  return [self initWithEntity:self];\n+}\n+- (instancetype)initWithEntity:(id<YGLayoutEntity>)entity\n+{\n+  if ((self = [super initWithEntity:entity])) {\n+    self.isEnabled = YES;",
        "comment_created_at": "2017-05-22T15:22:47+00:00",
        "comment_author": "d16r",
        "comment_body": "Usually, we force users to enable this themselves. If we think it's time, we should turn this on by default for `UIView` as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "117890785",
        "repo_full_name": "facebook/yoga",
        "pr_number": 509,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "117773526",
        "commented_code": "@@ -374,44 +384,87 @@ static CGFloat YGRoundPixelValue(CGFloat value)\n   return roundf(value * scale) / scale;\n }\n \n-static void YGApplyLayoutToViewHierarchy(UIView *view, BOOL preserveOrigin)\n+static void YGApplyLayoutToHierarchy(id<YGLayoutEntity> entity, BOOL preserveOrigin, CGPoint offset)\n {\n   NSCAssert([NSThread isMainThread], @\"Framesetting should only be done on the main thread.\");\n \n-  const YGLayout *yoga = view.yoga;\n+  const YGLayout *yoga = entity.yoga;\n \n   if (!yoga.isIncludedInLayout) {\n      return;\n   }\n \n   YGNodeRef node = yoga.node;\n   const CGPoint topLeft = {\n-    YGNodeLayoutGetLeft(node),\n-    YGNodeLayoutGetTop(node),\n+    YGNodeLayoutGetLeft(node) + offset.x,\n+    YGNodeLayoutGetTop(node) + offset.y,\n   };\n \n-  const CGPoint bottomRight = {\n-    topLeft.x + YGNodeLayoutGetWidth(node),\n-    topLeft.y + YGNodeLayoutGetHeight(node),\n-  };\n-\n-  const CGPoint origin = preserveOrigin ? view.frame.origin : CGPointZero;\n-  view.frame = (CGRect) {\n+  const CGPoint origin = preserveOrigin ? entity.frame.origin : CGPointZero;\n+  entity.frame = (CGRect) {\n     .origin = {\n       .x = YGRoundPixelValue(topLeft.x + origin.x),\n       .y = YGRoundPixelValue(topLeft.y + origin.y),\n     },\n     .size = {\n-      .width = YGRoundPixelValue(bottomRight.x) - YGRoundPixelValue(topLeft.x),\n-      .height = YGRoundPixelValue(bottomRight.y) - YGRoundPixelValue(topLeft.y),\n+      .width = YGNodeLayoutGetWidth(node),\n+      .height = YGNodeLayoutGetHeight(node),\n     },\n   };\n \n   if (!yoga.isLeaf) {\n-    for (NSUInteger i=0; i<view.subviews.count; i++) {\n-      YGApplyLayoutToViewHierarchy(view.subviews[i], NO);\n+    for (NSUInteger i=0; i<entity.subEntities.count; i++) {\n+      YGApplyLayoutToHierarchy(entity.subEntities[i],\n+                               NO,\n+                               [entity conformsToProtocol:@protocol(UICoordinateSpace)] ? CGPointZero : entity.frame.origin);\n     }\n   }\n }\n \n @end\n+\n+@implementation YGLayoutContainer\n+@synthesize frame=_frame;\n+\n+- (instancetype)init\n+{\n+  return [self initWithEntity:self];\n+}\n+- (instancetype)initWithEntity:(id<YGLayoutEntity>)entity\n+{\n+  if ((self = [super initWithEntity:entity])) {\n+    self.isEnabled = YES;",
        "comment_created_at": "2017-05-23T03:28:53+00:00",
        "comment_author": "fjolnir",
        "comment_body": "I just made it enabled by default since a container is rather useless if not enabled (A view is not). I'm fine with either default though.",
        "pr_file_module": null
      },
      {
        "comment_id": "117989141",
        "repo_full_name": "facebook/yoga",
        "pr_number": 509,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "117773526",
        "commented_code": "@@ -374,44 +384,87 @@ static CGFloat YGRoundPixelValue(CGFloat value)\n   return roundf(value * scale) / scale;\n }\n \n-static void YGApplyLayoutToViewHierarchy(UIView *view, BOOL preserveOrigin)\n+static void YGApplyLayoutToHierarchy(id<YGLayoutEntity> entity, BOOL preserveOrigin, CGPoint offset)\n {\n   NSCAssert([NSThread isMainThread], @\"Framesetting should only be done on the main thread.\");\n \n-  const YGLayout *yoga = view.yoga;\n+  const YGLayout *yoga = entity.yoga;\n \n   if (!yoga.isIncludedInLayout) {\n      return;\n   }\n \n   YGNodeRef node = yoga.node;\n   const CGPoint topLeft = {\n-    YGNodeLayoutGetLeft(node),\n-    YGNodeLayoutGetTop(node),\n+    YGNodeLayoutGetLeft(node) + offset.x,\n+    YGNodeLayoutGetTop(node) + offset.y,\n   };\n \n-  const CGPoint bottomRight = {\n-    topLeft.x + YGNodeLayoutGetWidth(node),\n-    topLeft.y + YGNodeLayoutGetHeight(node),\n-  };\n-\n-  const CGPoint origin = preserveOrigin ? view.frame.origin : CGPointZero;\n-  view.frame = (CGRect) {\n+  const CGPoint origin = preserveOrigin ? entity.frame.origin : CGPointZero;\n+  entity.frame = (CGRect) {\n     .origin = {\n       .x = YGRoundPixelValue(topLeft.x + origin.x),\n       .y = YGRoundPixelValue(topLeft.y + origin.y),\n     },\n     .size = {\n-      .width = YGRoundPixelValue(bottomRight.x) - YGRoundPixelValue(topLeft.x),\n-      .height = YGRoundPixelValue(bottomRight.y) - YGRoundPixelValue(topLeft.y),\n+      .width = YGNodeLayoutGetWidth(node),\n+      .height = YGNodeLayoutGetHeight(node),\n     },\n   };\n \n   if (!yoga.isLeaf) {\n-    for (NSUInteger i=0; i<view.subviews.count; i++) {\n-      YGApplyLayoutToViewHierarchy(view.subviews[i], NO);\n+    for (NSUInteger i=0; i<entity.subEntities.count; i++) {\n+      YGApplyLayoutToHierarchy(entity.subEntities[i],\n+                               NO,\n+                               [entity conformsToProtocol:@protocol(UICoordinateSpace)] ? CGPointZero : entity.frame.origin);\n     }\n   }\n }\n \n @end\n+\n+@implementation YGLayoutContainer\n+@synthesize frame=_frame;\n+\n+- (instancetype)init\n+{\n+  return [self initWithEntity:self];\n+}\n+- (instancetype)initWithEntity:(id<YGLayoutEntity>)entity\n+{\n+  if ((self = [super initWithEntity:entity])) {\n+    self.isEnabled = YES;",
        "comment_created_at": "2017-05-23T13:24:02+00:00",
        "comment_author": "d16r",
        "comment_body": "Sounds good!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "117774484",
    "pr_number": 509,
    "pr_file": "YogaKit/Source/YGLayout.m",
    "created_at": "2017-05-22T15:26:47+00:00",
    "commented_code": "return roundf(value * scale) / scale;\n }\n \n-static void YGApplyLayoutToViewHierarchy(UIView *view, BOOL preserveOrigin)\n+static void YGApplyLayoutToHierarchy(id<YGLayoutEntity> entity, BOOL preserveOrigin, CGPoint offset)\n {\n   NSCAssert([NSThread isMainThread], @\"Framesetting should only be done on the main thread.\");\n \n-  const YGLayout *yoga = view.yoga;\n+  const YGLayout *yoga = entity.yoga;\n \n   if (!yoga.isIncludedInLayout) {\n      return;\n   }\n \n   YGNodeRef node = yoga.node;\n   const CGPoint topLeft = {\n-    YGNodeLayoutGetLeft(node),\n-    YGNodeLayoutGetTop(node),\n+    YGNodeLayoutGetLeft(node) + offset.x,\n+    YGNodeLayoutGetTop(node) + offset.y,\n   };\n \n-  const CGPoint bottomRight = {\n-    topLeft.x + YGNodeLayoutGetWidth(node),\n-    topLeft.y + YGNodeLayoutGetHeight(node),\n-  };\n-\n-  const CGPoint origin = preserveOrigin ? view.frame.origin : CGPointZero;\n-  view.frame = (CGRect) {\n+  const CGPoint origin = preserveOrigin ? entity.frame.origin : CGPointZero;\n+  entity.frame = (CGRect) {\n     .origin = {\n       .x = YGRoundPixelValue(topLeft.x + origin.x),\n       .y = YGRoundPixelValue(topLeft.y + origin.y),\n     },\n     .size = {\n-      .width = YGRoundPixelValue(bottomRight.x) - YGRoundPixelValue(topLeft.x),\n-      .height = YGRoundPixelValue(bottomRight.y) - YGRoundPixelValue(topLeft.y),\n+      .width = YGNodeLayoutGetWidth(node),\n+      .height = YGNodeLayoutGetHeight(node),\n     },\n   };\n \n   if (!yoga.isLeaf) {\n-    for (NSUInteger i=0; i<view.subviews.count; i++) {\n-      YGApplyLayoutToViewHierarchy(view.subviews[i], NO);\n+    for (NSUInteger i=0; i<entity.subEntities.count; i++) {\n+      YGApplyLayoutToHierarchy(entity.subEntities[i],\n+                               NO,\n+                               [entity conformsToProtocol:@protocol(UICoordinateSpace)] ? CGPointZero : entity.frame.origin);\n     }\n   }\n }\n \n @end\n+\n+@implementation YGLayoutContainer\n+@synthesize frame=_frame;\n+\n+- (instancetype)init\n+{\n+  return [self initWithEntity:self];\n+}\n+- (instancetype)initWithEntity:(id<YGLayoutEntity>)entity\n+{\n+  if ((self = [super initWithEntity:entity])) {\n+    self.isEnabled = YES;\n+  }\n+  return self;\n+}\n+\n+- (YGLayout *)yoga\n+{\n+  return self;\n+}\n+\n+- (CGSize)sizeThatFits:(CGSize)fitSize\n+{\n+  return CGSizeZero;\n+}\n+\n+- (BOOL)isEnabled\n+{\n+  if (!super.isEnabled) {",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "117774484",
        "repo_full_name": "facebook/yoga",
        "pr_number": 509,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "117774484",
        "commented_code": "@@ -374,44 +384,87 @@ static CGFloat YGRoundPixelValue(CGFloat value)\n   return roundf(value * scale) / scale;\n }\n \n-static void YGApplyLayoutToViewHierarchy(UIView *view, BOOL preserveOrigin)\n+static void YGApplyLayoutToHierarchy(id<YGLayoutEntity> entity, BOOL preserveOrigin, CGPoint offset)\n {\n   NSCAssert([NSThread isMainThread], @\"Framesetting should only be done on the main thread.\");\n \n-  const YGLayout *yoga = view.yoga;\n+  const YGLayout *yoga = entity.yoga;\n \n   if (!yoga.isIncludedInLayout) {\n      return;\n   }\n \n   YGNodeRef node = yoga.node;\n   const CGPoint topLeft = {\n-    YGNodeLayoutGetLeft(node),\n-    YGNodeLayoutGetTop(node),\n+    YGNodeLayoutGetLeft(node) + offset.x,\n+    YGNodeLayoutGetTop(node) + offset.y,\n   };\n \n-  const CGPoint bottomRight = {\n-    topLeft.x + YGNodeLayoutGetWidth(node),\n-    topLeft.y + YGNodeLayoutGetHeight(node),\n-  };\n-\n-  const CGPoint origin = preserveOrigin ? view.frame.origin : CGPointZero;\n-  view.frame = (CGRect) {\n+  const CGPoint origin = preserveOrigin ? entity.frame.origin : CGPointZero;\n+  entity.frame = (CGRect) {\n     .origin = {\n       .x = YGRoundPixelValue(topLeft.x + origin.x),\n       .y = YGRoundPixelValue(topLeft.y + origin.y),\n     },\n     .size = {\n-      .width = YGRoundPixelValue(bottomRight.x) - YGRoundPixelValue(topLeft.x),\n-      .height = YGRoundPixelValue(bottomRight.y) - YGRoundPixelValue(topLeft.y),\n+      .width = YGNodeLayoutGetWidth(node),\n+      .height = YGNodeLayoutGetHeight(node),\n     },\n   };\n \n   if (!yoga.isLeaf) {\n-    for (NSUInteger i=0; i<view.subviews.count; i++) {\n-      YGApplyLayoutToViewHierarchy(view.subviews[i], NO);\n+    for (NSUInteger i=0; i<entity.subEntities.count; i++) {\n+      YGApplyLayoutToHierarchy(entity.subEntities[i],\n+                               NO,\n+                               [entity conformsToProtocol:@protocol(UICoordinateSpace)] ? CGPointZero : entity.frame.origin);\n     }\n   }\n }\n \n @end\n+\n+@implementation YGLayoutContainer\n+@synthesize frame=_frame;\n+\n+- (instancetype)init\n+{\n+  return [self initWithEntity:self];\n+}\n+- (instancetype)initWithEntity:(id<YGLayoutEntity>)entity\n+{\n+  if ((self = [super initWithEntity:entity])) {\n+    self.isEnabled = YES;\n+  }\n+  return self;\n+}\n+\n+- (YGLayout *)yoga\n+{\n+  return self;\n+}\n+\n+- (CGSize)sizeThatFits:(CGSize)fitSize\n+{\n+  return CGSizeZero;\n+}\n+\n+- (BOOL)isEnabled\n+{\n+  if (!super.isEnabled) {",
        "comment_created_at": "2017-05-22T15:26:47+00:00",
        "comment_author": "d16r",
        "comment_body": "I'm not sure this is going to do what you want.\r\n\r\nAbove you set `self.isEnabled` to YES, but you never actually check that value here. If someone changes that value to `NO`, nowhere in that code would this respect that.",
        "pr_file_module": null
      },
      {
        "comment_id": "117890733",
        "repo_full_name": "facebook/yoga",
        "pr_number": 509,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "117774484",
        "commented_code": "@@ -374,44 +384,87 @@ static CGFloat YGRoundPixelValue(CGFloat value)\n   return roundf(value * scale) / scale;\n }\n \n-static void YGApplyLayoutToViewHierarchy(UIView *view, BOOL preserveOrigin)\n+static void YGApplyLayoutToHierarchy(id<YGLayoutEntity> entity, BOOL preserveOrigin, CGPoint offset)\n {\n   NSCAssert([NSThread isMainThread], @\"Framesetting should only be done on the main thread.\");\n \n-  const YGLayout *yoga = view.yoga;\n+  const YGLayout *yoga = entity.yoga;\n \n   if (!yoga.isIncludedInLayout) {\n      return;\n   }\n \n   YGNodeRef node = yoga.node;\n   const CGPoint topLeft = {\n-    YGNodeLayoutGetLeft(node),\n-    YGNodeLayoutGetTop(node),\n+    YGNodeLayoutGetLeft(node) + offset.x,\n+    YGNodeLayoutGetTop(node) + offset.y,\n   };\n \n-  const CGPoint bottomRight = {\n-    topLeft.x + YGNodeLayoutGetWidth(node),\n-    topLeft.y + YGNodeLayoutGetHeight(node),\n-  };\n-\n-  const CGPoint origin = preserveOrigin ? view.frame.origin : CGPointZero;\n-  view.frame = (CGRect) {\n+  const CGPoint origin = preserveOrigin ? entity.frame.origin : CGPointZero;\n+  entity.frame = (CGRect) {\n     .origin = {\n       .x = YGRoundPixelValue(topLeft.x + origin.x),\n       .y = YGRoundPixelValue(topLeft.y + origin.y),\n     },\n     .size = {\n-      .width = YGRoundPixelValue(bottomRight.x) - YGRoundPixelValue(topLeft.x),\n-      .height = YGRoundPixelValue(bottomRight.y) - YGRoundPixelValue(topLeft.y),\n+      .width = YGNodeLayoutGetWidth(node),\n+      .height = YGNodeLayoutGetHeight(node),\n     },\n   };\n \n   if (!yoga.isLeaf) {\n-    for (NSUInteger i=0; i<view.subviews.count; i++) {\n-      YGApplyLayoutToViewHierarchy(view.subviews[i], NO);\n+    for (NSUInteger i=0; i<entity.subEntities.count; i++) {\n+      YGApplyLayoutToHierarchy(entity.subEntities[i],\n+                               NO,\n+                               [entity conformsToProtocol:@protocol(UICoordinateSpace)] ? CGPointZero : entity.frame.origin);\n     }\n   }\n }\n \n @end\n+\n+@implementation YGLayoutContainer\n+@synthesize frame=_frame;\n+\n+- (instancetype)init\n+{\n+  return [self initWithEntity:self];\n+}\n+- (instancetype)initWithEntity:(id<YGLayoutEntity>)entity\n+{\n+  if ((self = [super initWithEntity:entity])) {\n+    self.isEnabled = YES;\n+  }\n+  return self;\n+}\n+\n+- (YGLayout *)yoga\n+{\n+  return self;\n+}\n+\n+- (CGSize)sizeThatFits:(CGSize)fitSize\n+{\n+  return CGSizeZero;\n+}\n+\n+- (BOOL)isEnabled\n+{\n+  if (!super.isEnabled) {",
        "comment_created_at": "2017-05-23T03:27:56+00:00",
        "comment_author": "fjolnir",
        "comment_body": "The call to `super` returns the value assigned via `self.enabled = x`",
        "pr_file_module": null
      },
      {
        "comment_id": "117990539",
        "repo_full_name": "facebook/yoga",
        "pr_number": 509,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "117774484",
        "commented_code": "@@ -374,44 +384,87 @@ static CGFloat YGRoundPixelValue(CGFloat value)\n   return roundf(value * scale) / scale;\n }\n \n-static void YGApplyLayoutToViewHierarchy(UIView *view, BOOL preserveOrigin)\n+static void YGApplyLayoutToHierarchy(id<YGLayoutEntity> entity, BOOL preserveOrigin, CGPoint offset)\n {\n   NSCAssert([NSThread isMainThread], @\"Framesetting should only be done on the main thread.\");\n \n-  const YGLayout *yoga = view.yoga;\n+  const YGLayout *yoga = entity.yoga;\n \n   if (!yoga.isIncludedInLayout) {\n      return;\n   }\n \n   YGNodeRef node = yoga.node;\n   const CGPoint topLeft = {\n-    YGNodeLayoutGetLeft(node),\n-    YGNodeLayoutGetTop(node),\n+    YGNodeLayoutGetLeft(node) + offset.x,\n+    YGNodeLayoutGetTop(node) + offset.y,\n   };\n \n-  const CGPoint bottomRight = {\n-    topLeft.x + YGNodeLayoutGetWidth(node),\n-    topLeft.y + YGNodeLayoutGetHeight(node),\n-  };\n-\n-  const CGPoint origin = preserveOrigin ? view.frame.origin : CGPointZero;\n-  view.frame = (CGRect) {\n+  const CGPoint origin = preserveOrigin ? entity.frame.origin : CGPointZero;\n+  entity.frame = (CGRect) {\n     .origin = {\n       .x = YGRoundPixelValue(topLeft.x + origin.x),\n       .y = YGRoundPixelValue(topLeft.y + origin.y),\n     },\n     .size = {\n-      .width = YGRoundPixelValue(bottomRight.x) - YGRoundPixelValue(topLeft.x),\n-      .height = YGRoundPixelValue(bottomRight.y) - YGRoundPixelValue(topLeft.y),\n+      .width = YGNodeLayoutGetWidth(node),\n+      .height = YGNodeLayoutGetHeight(node),\n     },\n   };\n \n   if (!yoga.isLeaf) {\n-    for (NSUInteger i=0; i<view.subviews.count; i++) {\n-      YGApplyLayoutToViewHierarchy(view.subviews[i], NO);\n+    for (NSUInteger i=0; i<entity.subEntities.count; i++) {\n+      YGApplyLayoutToHierarchy(entity.subEntities[i],\n+                               NO,\n+                               [entity conformsToProtocol:@protocol(UICoordinateSpace)] ? CGPointZero : entity.frame.origin);\n     }\n   }\n }\n \n @end\n+\n+@implementation YGLayoutContainer\n+@synthesize frame=_frame;\n+\n+- (instancetype)init\n+{\n+  return [self initWithEntity:self];\n+}\n+- (instancetype)initWithEntity:(id<YGLayoutEntity>)entity\n+{\n+  if ((self = [super initWithEntity:entity])) {\n+    self.isEnabled = YES;\n+  }\n+  return self;\n+}\n+\n+- (YGLayout *)yoga\n+{\n+  return self;\n+}\n+\n+- (CGSize)sizeThatFits:(CGSize)fitSize\n+{\n+  return CGSizeZero;\n+}\n+\n+- (BOOL)isEnabled\n+{\n+  if (!super.isEnabled) {",
        "comment_created_at": "2017-05-23T13:29:12+00:00",
        "comment_author": "d16r",
        "comment_body": "Hmmm tricky tricky.\r\n\r\nSomething about just doesn't seem right to me, if you set the property to `NO`, it will obey you, but, if it's set to `YES` it might still return `NO` do to side-effects. That seems a bit broken.\r\n\r\nI have to take a deeper look at this later, it seems to me like this logic needs to live somewhere else.",
        "pr_file_module": null
      },
      {
        "comment_id": "118060101",
        "repo_full_name": "facebook/yoga",
        "pr_number": 509,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "117774484",
        "commented_code": "@@ -374,44 +384,87 @@ static CGFloat YGRoundPixelValue(CGFloat value)\n   return roundf(value * scale) / scale;\n }\n \n-static void YGApplyLayoutToViewHierarchy(UIView *view, BOOL preserveOrigin)\n+static void YGApplyLayoutToHierarchy(id<YGLayoutEntity> entity, BOOL preserveOrigin, CGPoint offset)\n {\n   NSCAssert([NSThread isMainThread], @\"Framesetting should only be done on the main thread.\");\n \n-  const YGLayout *yoga = view.yoga;\n+  const YGLayout *yoga = entity.yoga;\n \n   if (!yoga.isIncludedInLayout) {\n      return;\n   }\n \n   YGNodeRef node = yoga.node;\n   const CGPoint topLeft = {\n-    YGNodeLayoutGetLeft(node),\n-    YGNodeLayoutGetTop(node),\n+    YGNodeLayoutGetLeft(node) + offset.x,\n+    YGNodeLayoutGetTop(node) + offset.y,\n   };\n \n-  const CGPoint bottomRight = {\n-    topLeft.x + YGNodeLayoutGetWidth(node),\n-    topLeft.y + YGNodeLayoutGetHeight(node),\n-  };\n-\n-  const CGPoint origin = preserveOrigin ? view.frame.origin : CGPointZero;\n-  view.frame = (CGRect) {\n+  const CGPoint origin = preserveOrigin ? entity.frame.origin : CGPointZero;\n+  entity.frame = (CGRect) {\n     .origin = {\n       .x = YGRoundPixelValue(topLeft.x + origin.x),\n       .y = YGRoundPixelValue(topLeft.y + origin.y),\n     },\n     .size = {\n-      .width = YGRoundPixelValue(bottomRight.x) - YGRoundPixelValue(topLeft.x),\n-      .height = YGRoundPixelValue(bottomRight.y) - YGRoundPixelValue(topLeft.y),\n+      .width = YGNodeLayoutGetWidth(node),\n+      .height = YGNodeLayoutGetHeight(node),\n     },\n   };\n \n   if (!yoga.isLeaf) {\n-    for (NSUInteger i=0; i<view.subviews.count; i++) {\n-      YGApplyLayoutToViewHierarchy(view.subviews[i], NO);\n+    for (NSUInteger i=0; i<entity.subEntities.count; i++) {\n+      YGApplyLayoutToHierarchy(entity.subEntities[i],\n+                               NO,\n+                               [entity conformsToProtocol:@protocol(UICoordinateSpace)] ? CGPointZero : entity.frame.origin);\n     }\n   }\n }\n \n @end\n+\n+@implementation YGLayoutContainer\n+@synthesize frame=_frame;\n+\n+- (instancetype)init\n+{\n+  return [self initWithEntity:self];\n+}\n+- (instancetype)initWithEntity:(id<YGLayoutEntity>)entity\n+{\n+  if ((self = [super initWithEntity:entity])) {\n+    self.isEnabled = YES;\n+  }\n+  return self;\n+}\n+\n+- (YGLayout *)yoga\n+{\n+  return self;\n+}\n+\n+- (CGSize)sizeThatFits:(CGSize)fitSize\n+{\n+  return CGSizeZero;\n+}\n+\n+- (BOOL)isEnabled\n+{\n+  if (!super.isEnabled) {",
        "comment_created_at": "2017-05-23T17:49:32+00:00",
        "comment_author": "fjolnir",
        "comment_body": "Yes, this could be cleaner. The whole enabled/inclusion mechanism is a bit hard to reason about (at least, for me).",
        "pr_file_module": null
      },
      {
        "comment_id": "118134195",
        "repo_full_name": "facebook/yoga",
        "pr_number": 509,
        "pr_file": "YogaKit/Source/YGLayout.m",
        "discussion_id": "117774484",
        "commented_code": "@@ -374,44 +384,87 @@ static CGFloat YGRoundPixelValue(CGFloat value)\n   return roundf(value * scale) / scale;\n }\n \n-static void YGApplyLayoutToViewHierarchy(UIView *view, BOOL preserveOrigin)\n+static void YGApplyLayoutToHierarchy(id<YGLayoutEntity> entity, BOOL preserveOrigin, CGPoint offset)\n {\n   NSCAssert([NSThread isMainThread], @\"Framesetting should only be done on the main thread.\");\n \n-  const YGLayout *yoga = view.yoga;\n+  const YGLayout *yoga = entity.yoga;\n \n   if (!yoga.isIncludedInLayout) {\n      return;\n   }\n \n   YGNodeRef node = yoga.node;\n   const CGPoint topLeft = {\n-    YGNodeLayoutGetLeft(node),\n-    YGNodeLayoutGetTop(node),\n+    YGNodeLayoutGetLeft(node) + offset.x,\n+    YGNodeLayoutGetTop(node) + offset.y,\n   };\n \n-  const CGPoint bottomRight = {\n-    topLeft.x + YGNodeLayoutGetWidth(node),\n-    topLeft.y + YGNodeLayoutGetHeight(node),\n-  };\n-\n-  const CGPoint origin = preserveOrigin ? view.frame.origin : CGPointZero;\n-  view.frame = (CGRect) {\n+  const CGPoint origin = preserveOrigin ? entity.frame.origin : CGPointZero;\n+  entity.frame = (CGRect) {\n     .origin = {\n       .x = YGRoundPixelValue(topLeft.x + origin.x),\n       .y = YGRoundPixelValue(topLeft.y + origin.y),\n     },\n     .size = {\n-      .width = YGRoundPixelValue(bottomRight.x) - YGRoundPixelValue(topLeft.x),\n-      .height = YGRoundPixelValue(bottomRight.y) - YGRoundPixelValue(topLeft.y),\n+      .width = YGNodeLayoutGetWidth(node),\n+      .height = YGNodeLayoutGetHeight(node),\n     },\n   };\n \n   if (!yoga.isLeaf) {\n-    for (NSUInteger i=0; i<view.subviews.count; i++) {\n-      YGApplyLayoutToViewHierarchy(view.subviews[i], NO);\n+    for (NSUInteger i=0; i<entity.subEntities.count; i++) {\n+      YGApplyLayoutToHierarchy(entity.subEntities[i],\n+                               NO,\n+                               [entity conformsToProtocol:@protocol(UICoordinateSpace)] ? CGPointZero : entity.frame.origin);\n     }\n   }\n }\n \n @end\n+\n+@implementation YGLayoutContainer\n+@synthesize frame=_frame;\n+\n+- (instancetype)init\n+{\n+  return [self initWithEntity:self];\n+}\n+- (instancetype)initWithEntity:(id<YGLayoutEntity>)entity\n+{\n+  if ((self = [super initWithEntity:entity])) {\n+    self.isEnabled = YES;\n+  }\n+  return self;\n+}\n+\n+- (YGLayout *)yoga\n+{\n+  return self;\n+}\n+\n+- (CGSize)sizeThatFits:(CGSize)fitSize\n+{\n+  return CGSizeZero;\n+}\n+\n+- (BOOL)isEnabled\n+{\n+  if (!super.isEnabled) {",
        "comment_created_at": "2017-05-24T00:04:38+00:00",
        "comment_author": "d16r",
        "comment_body": "Yeah, whether or not it should continue to exist is another issue. While it continues to exist, I don't think this behavior is what we want. Shouldn't all this logic be `includedInLayout` instead anyway? ",
        "pr_file_module": null
      }
    ]
  }
]