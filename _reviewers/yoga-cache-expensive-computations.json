[
  {
    "discussion_id": "774314833",
    "pr_number": 1116,
    "pr_file": "yoga/Yoga.cpp",
    "created_at": "2021-12-23T04:51:20+00:00",
    "commented_code": "break;\n       case YGJustifySpaceBetween:\n         if (collectedFlexItemsValues.itemsOnLine > 1) {\n-          betweenMainDim =\n+          betweenMainDim +=\n               YGFloatMax(collectedFlexItemsValues.remainingFreeSpace, 0) /\n               (collectedFlexItemsValues.itemsOnLine - 1);\n-        } else {\n-          betweenMainDim = 0;\n         }\n         break;\n       case YGJustifySpaceEvenly:\n         // Space is distributed evenly across all elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = collectedFlexItemsValues.remainingFreeSpace /\n             (collectedFlexItemsValues.itemsOnLine + 1);\n-        leadingMainDim = betweenMainDim;\n+        betweenMainDim += leadingMainDim;\n         break;\n       case YGJustifySpaceAround:\n         // Space on the edges is half of the space between elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = 0.5 *\n+            collectedFlexItemsValues.remainingFreeSpace /\n             collectedFlexItemsValues.itemsOnLine;\n-        leadingMainDim = betweenMainDim / 2;\n+        betweenMainDim += leadingMainDim * 2;",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "774314833",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1116,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "774314833",
        "commented_code": "@@ -2475,24 +2503,23 @@ static void YGJustifyMainAxis(\n         break;\n       case YGJustifySpaceBetween:\n         if (collectedFlexItemsValues.itemsOnLine > 1) {\n-          betweenMainDim =\n+          betweenMainDim +=\n               YGFloatMax(collectedFlexItemsValues.remainingFreeSpace, 0) /\n               (collectedFlexItemsValues.itemsOnLine - 1);\n-        } else {\n-          betweenMainDim = 0;\n         }\n         break;\n       case YGJustifySpaceEvenly:\n         // Space is distributed evenly across all elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = collectedFlexItemsValues.remainingFreeSpace /\n             (collectedFlexItemsValues.itemsOnLine + 1);\n-        leadingMainDim = betweenMainDim;\n+        betweenMainDim += leadingMainDim;\n         break;\n       case YGJustifySpaceAround:\n         // Space on the edges is half of the space between elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = 0.5 *\n+            collectedFlexItemsValues.remainingFreeSpace /\n             collectedFlexItemsValues.itemsOnLine;\n-        leadingMainDim = betweenMainDim / 2;\n+        betweenMainDim += leadingMainDim * 2;",
        "comment_created_at": "2021-12-23T04:51:20+00:00",
        "comment_author": "intergalacticspacehighway",
        "comment_body": "could be a nit pick - this can also be represented as below\r\n\r\n```\r\ncase YGJustifySpaceAround: {\r\n        const float betweenMainDimWithoutGap = collectedFlexItemsValues.remainingFreeSpace /\r\n            collectedFlexItemsValues.itemsOnLine;\r\n        // Space on the edges is half of the space between elements\r\n        leadingMainDim = betweenMainDimWithoutGap / 2;\r\n        betweenMainDim += betweenMainDimWithoutGap;\r\n        break;\r\n      }\r\n```\r\n\r\nneed to check if cost of multiplication > cost of defining a scope and a variable.",
        "pr_file_module": null
      },
      {
        "comment_id": "774450499",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1116,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "774314833",
        "commented_code": "@@ -2475,24 +2503,23 @@ static void YGJustifyMainAxis(\n         break;\n       case YGJustifySpaceBetween:\n         if (collectedFlexItemsValues.itemsOnLine > 1) {\n-          betweenMainDim =\n+          betweenMainDim +=\n               YGFloatMax(collectedFlexItemsValues.remainingFreeSpace, 0) /\n               (collectedFlexItemsValues.itemsOnLine - 1);\n-        } else {\n-          betweenMainDim = 0;\n         }\n         break;\n       case YGJustifySpaceEvenly:\n         // Space is distributed evenly across all elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = collectedFlexItemsValues.remainingFreeSpace /\n             (collectedFlexItemsValues.itemsOnLine + 1);\n-        leadingMainDim = betweenMainDim;\n+        betweenMainDim += leadingMainDim;\n         break;\n       case YGJustifySpaceAround:\n         // Space on the edges is half of the space between elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = 0.5 *\n+            collectedFlexItemsValues.remainingFreeSpace /\n             collectedFlexItemsValues.itemsOnLine;\n-        leadingMainDim = betweenMainDim / 2;\n+        betweenMainDim += leadingMainDim * 2;",
        "comment_created_at": "2021-12-23T09:51:00+00:00",
        "comment_author": "jacobp100",
        "comment_body": "Deja vu! I actually did it like this originally - then I thought this path is used a lot less than the flex start, and the extra variable could affect the entire function.",
        "pr_file_module": null
      },
      {
        "comment_id": "774450884",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1116,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "774314833",
        "commented_code": "@@ -2475,24 +2503,23 @@ static void YGJustifyMainAxis(\n         break;\n       case YGJustifySpaceBetween:\n         if (collectedFlexItemsValues.itemsOnLine > 1) {\n-          betweenMainDim =\n+          betweenMainDim +=\n               YGFloatMax(collectedFlexItemsValues.remainingFreeSpace, 0) /\n               (collectedFlexItemsValues.itemsOnLine - 1);\n-        } else {\n-          betweenMainDim = 0;\n         }\n         break;\n       case YGJustifySpaceEvenly:\n         // Space is distributed evenly across all elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = collectedFlexItemsValues.remainingFreeSpace /\n             (collectedFlexItemsValues.itemsOnLine + 1);\n-        leadingMainDim = betweenMainDim;\n+        betweenMainDim += leadingMainDim;\n         break;\n       case YGJustifySpaceAround:\n         // Space on the edges is half of the space between elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = 0.5 *\n+            collectedFlexItemsValues.remainingFreeSpace /\n             collectedFlexItemsValues.itemsOnLine;\n-        leadingMainDim = betweenMainDim / 2;\n+        betweenMainDim += leadingMainDim * 2;",
        "comment_created_at": "2021-12-23T09:51:37+00:00",
        "comment_author": "jacobp100",
        "comment_body": "Let me know what you think anyway. I\u2019m not adverse to changing it",
        "pr_file_module": null
      },
      {
        "comment_id": "774487498",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1116,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "774314833",
        "commented_code": "@@ -2475,24 +2503,23 @@ static void YGJustifyMainAxis(\n         break;\n       case YGJustifySpaceBetween:\n         if (collectedFlexItemsValues.itemsOnLine > 1) {\n-          betweenMainDim =\n+          betweenMainDim +=\n               YGFloatMax(collectedFlexItemsValues.remainingFreeSpace, 0) /\n               (collectedFlexItemsValues.itemsOnLine - 1);\n-        } else {\n-          betweenMainDim = 0;\n         }\n         break;\n       case YGJustifySpaceEvenly:\n         // Space is distributed evenly across all elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = collectedFlexItemsValues.remainingFreeSpace /\n             (collectedFlexItemsValues.itemsOnLine + 1);\n-        leadingMainDim = betweenMainDim;\n+        betweenMainDim += leadingMainDim;\n         break;\n       case YGJustifySpaceAround:\n         // Space on the edges is half of the space between elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = 0.5 *\n+            collectedFlexItemsValues.remainingFreeSpace /\n             collectedFlexItemsValues.itemsOnLine;\n-        leadingMainDim = betweenMainDim / 2;\n+        betweenMainDim += leadingMainDim * 2;",
        "comment_created_at": "2021-12-23T10:51:33+00:00",
        "comment_author": "jacobp100",
        "comment_body": "As a thought, we could do,\r\n\r\n```cpp\r\n        leadingMainDim = collectedFlexItemsValues.remainingFreeSpace /\r\n             collectedFlexItemsValues.itemsOnLine;\r\n        betweenMainDim += leadingMainDim;\r\n        leadingMainDim *= 0.5;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "774600433",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1116,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "774314833",
        "commented_code": "@@ -2475,24 +2503,23 @@ static void YGJustifyMainAxis(\n         break;\n       case YGJustifySpaceBetween:\n         if (collectedFlexItemsValues.itemsOnLine > 1) {\n-          betweenMainDim =\n+          betweenMainDim +=\n               YGFloatMax(collectedFlexItemsValues.remainingFreeSpace, 0) /\n               (collectedFlexItemsValues.itemsOnLine - 1);\n-        } else {\n-          betweenMainDim = 0;\n         }\n         break;\n       case YGJustifySpaceEvenly:\n         // Space is distributed evenly across all elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = collectedFlexItemsValues.remainingFreeSpace /\n             (collectedFlexItemsValues.itemsOnLine + 1);\n-        leadingMainDim = betweenMainDim;\n+        betweenMainDim += leadingMainDim;\n         break;\n       case YGJustifySpaceAround:\n         // Space on the edges is half of the space between elements\n-        betweenMainDim = collectedFlexItemsValues.remainingFreeSpace /\n+        leadingMainDim = 0.5 *\n+            collectedFlexItemsValues.remainingFreeSpace /\n             collectedFlexItemsValues.itemsOnLine;\n-        leadingMainDim = betweenMainDim / 2;\n+        betweenMainDim += leadingMainDim * 2;",
        "comment_created_at": "2021-12-23T14:20:40+00:00",
        "comment_author": "intergalacticspacehighway",
        "comment_body": "yeah, this might be good as it prevents additional multiplication, but we can wait for someone with c++ performance experience to review it \ud83d\ude05",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "184886323",
    "pr_number": 759,
    "pr_file": "yoga/Yoga.cpp",
    "created_at": "2018-04-29T15:17:32+00:00",
    "commented_code": "// No-Op\n             } else if (alignItem == YGAlignCenter) {\n               leadingCrossDim += remainingCrossDim / 2;\n+            } else if (alignItem == YGAlignBaseline) {\n+              leadingCrossDim +=\n+                      collectedFlexItemsValues.maxBaselineAscent\n+                      - YGBaseline(child)",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "184886323",
        "repo_full_name": "facebook/yoga",
        "pr_number": 759,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "184886323",
        "commented_code": "@@ -3000,6 +3000,12 @@ static void YGNodelayoutImpl(const YGNodeRef node,\n               // No-Op\n             } else if (alignItem == YGAlignCenter) {\n               leadingCrossDim += remainingCrossDim / 2;\n+            } else if (alignItem == YGAlignBaseline) {\n+              leadingCrossDim +=\n+                      collectedFlexItemsValues.maxBaselineAscent\n+                      - YGBaseline(child)",
        "comment_created_at": "2018-04-29T15:17:32+00:00",
        "comment_author": "woehrl01",
        "comment_body": "It looks like you could store the result of the `YGBaseline` call inside the `YGLayout` of the child, so we don't have to call it twice. You just need to reset it at the beginning of the algorithm. Could be of type `float` with a default of `0`. What are your thoughts about this?",
        "pr_file_module": null
      },
      {
        "comment_id": "184898770",
        "repo_full_name": "facebook/yoga",
        "pr_number": 759,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "184886323",
        "commented_code": "@@ -3000,6 +3000,12 @@ static void YGNodelayoutImpl(const YGNodeRef node,\n               // No-Op\n             } else if (alignItem == YGAlignCenter) {\n               leadingCrossDim += remainingCrossDim / 2;\n+            } else if (alignItem == YGAlignBaseline) {\n+              leadingCrossDim +=\n+                      collectedFlexItemsValues.maxBaselineAscent\n+                      - YGBaseline(child)",
        "comment_created_at": "2018-04-29T23:24:10+00:00",
        "comment_author": "synk",
        "comment_body": "I agree with that. It should be cached since baseline calculation is relatively heavy (it's recursive and would call user defined function). I've pushed additional commit for that.",
        "pr_file_module": null
      },
      {
        "comment_id": "184918038",
        "repo_full_name": "facebook/yoga",
        "pr_number": 759,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "184886323",
        "commented_code": "@@ -3000,6 +3000,12 @@ static void YGNodelayoutImpl(const YGNodeRef node,\n               // No-Op\n             } else if (alignItem == YGAlignCenter) {\n               leadingCrossDim += remainingCrossDim / 2;\n+            } else if (alignItem == YGAlignBaseline) {\n+              leadingCrossDim +=\n+                      collectedFlexItemsValues.maxBaselineAscent\n+                      - YGBaseline(child)",
        "comment_created_at": "2018-04-30T06:37:52+00:00",
        "comment_author": "woehrl01",
        "comment_body": "Thanks for the adaption. Can we reuse the cached value [on line 3200, too](https://github.com/synk/yoga/blob/8014ff5cb6ecfba142ba3c62aa5ce953ab370ec1/yoga/Yoga.cpp#L3200)?",
        "pr_file_module": null
      },
      {
        "comment_id": "184919591",
        "repo_full_name": "facebook/yoga",
        "pr_number": 759,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "184886323",
        "commented_code": "@@ -3000,6 +3000,12 @@ static void YGNodelayoutImpl(const YGNodeRef node,\n               // No-Op\n             } else if (alignItem == YGAlignCenter) {\n               leadingCrossDim += remainingCrossDim / 2;\n+            } else if (alignItem == YGAlignBaseline) {\n+              leadingCrossDim +=\n+                      collectedFlexItemsValues.maxBaselineAscent\n+                      - YGBaseline(child)",
        "comment_created_at": "2018-04-30T06:54:30+00:00",
        "comment_author": "synk",
        "comment_body": "I missed it. Thanks",
        "pr_file_module": null
      }
    ]
  }
]