[
  {
    "discussion_id": "985995450",
    "pr_number": 1123,
    "pr_file": "yoga/Yoga.h",
    "created_at": "2022-10-03T16:26:34+00:00",
    "commented_code": "#include <functional>\n #include <vector>\n \n+// Templated delegates for YGMemoryAllocate & YGMemoryFree, so we don't have to\n+// cast nor pass in the size of the allocated chunk of memory explicitly.\n+template<typename T, typename... A>\n+T* YGAllocate(A&&... arguments) {\n+  auto* memory = reinterpret_cast<T*>(YGMemoryAllocate(sizeof(T), alignof(T)));\n+  new(memory) T(std::forward<A>(arguments)...);\n+  return memory;\n+}\n+template<typename T>\n+void YGFree(T* memory) {\n+  memory->~T();\n+  YGMemoryFree(memory);\n+}\n+",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "985995450",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1123,
        "pr_file": "yoga/Yoga.h",
        "discussion_id": "985995450",
        "commented_code": "@@ -364,6 +374,20 @@ YG_EXTERN_C_END\n #include <functional>\n #include <vector>\n \n+// Templated delegates for YGMemoryAllocate & YGMemoryFree, so we don't have to\n+// cast nor pass in the size of the allocated chunk of memory explicitly.\n+template<typename T, typename... A>\n+T* YGAllocate(A&&... arguments) {\n+  auto* memory = reinterpret_cast<T*>(YGMemoryAllocate(sizeof(T), alignof(T)));\n+  new(memory) T(std::forward<A>(arguments)...);\n+  return memory;\n+}\n+template<typename T>\n+void YGFree(T* memory) {\n+  memory->~T();\n+  YGMemoryFree(memory);\n+}\n+",
        "comment_created_at": "2022-10-03T16:26:34+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "This should not be part of the public API, since it is a helper for the internals of Yoga.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "93279773",
    "pr_number": 289,
    "pr_file": "YogaKit/YKLayout.h",
    "created_at": "2016-12-20T17:00:23+00:00",
    "commented_code": "+/**\n+ * Copyright (c) 2014-present, Facebook, Inc.\n+ * All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+\n+#import \"YKEnums.h\"\n+\n+@interface YKLayout : NSObject\n+\n+/**\n+ The property that decides if we should include this view when calculating layout. Defaults to YES.\n+ */\n+@property (nonatomic, setter=setIncluded:) BOOL isIncluded;\n+\n+/**\n+ The property that decides during layout/sizing whether or not yk_* properties should be applied. Defaults to NO.\n+ */\n+@property (nonatomic, setter=setEnabled:) BOOL isEnabled;\n+\n+@property (nonatomic) YKDirection direction;\n+@property (nonatomic) YKFlexDirection flexDirection;\n+@property (nonatomic) YKJustify justifyContent;\n+@property (nonatomic) YKAlign alignContent;\n+@property (nonatomic) YKAlign alignItems;\n+@property (nonatomic) YKAlign alignSelf;\n+@property (nonatomic) YKPositionType positionType;\n+@property (nonatomic) YKWrap flexWrap;\n+\n+@property (nonatomic) CGFloat flexGrow;\n+@property (nonatomic) CGFloat flexShrink;\n+@property (nonatomic) CGFloat flexBasis;\n+\n+@property (nonatomic) CGFloat positionLeft;\n+@property (nonatomic) CGFloat positionTop;\n+@property (nonatomic) CGFloat positionRight;\n+@property (nonatomic) CGFloat positionBottom;\n+@property (nonatomic) CGFloat positionStart;\n+@property (nonatomic) CGFloat positionEnd;\n+@property (nonatomic) CGFloat positionHorizontal;",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "93279773",
        "repo_full_name": "facebook/yoga",
        "pr_number": 289,
        "pr_file": "YogaKit/YKLayout.h",
        "discussion_id": "93279773",
        "commented_code": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc.\n+ * All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+\n+#import \"YKEnums.h\"\n+\n+@interface YKLayout : NSObject\n+\n+/**\n+ The property that decides if we should include this view when calculating layout. Defaults to YES.\n+ */\n+@property (nonatomic, setter=setIncluded:) BOOL isIncluded;\n+\n+/**\n+ The property that decides during layout/sizing whether or not yk_* properties should be applied. Defaults to NO.\n+ */\n+@property (nonatomic, setter=setEnabled:) BOOL isEnabled;\n+\n+@property (nonatomic) YKDirection direction;\n+@property (nonatomic) YKFlexDirection flexDirection;\n+@property (nonatomic) YKJustify justifyContent;\n+@property (nonatomic) YKAlign alignContent;\n+@property (nonatomic) YKAlign alignItems;\n+@property (nonatomic) YKAlign alignSelf;\n+@property (nonatomic) YKPositionType positionType;\n+@property (nonatomic) YKWrap flexWrap;\n+\n+@property (nonatomic) CGFloat flexGrow;\n+@property (nonatomic) CGFloat flexShrink;\n+@property (nonatomic) CGFloat flexBasis;\n+\n+@property (nonatomic) CGFloat positionLeft;\n+@property (nonatomic) CGFloat positionTop;\n+@property (nonatomic) CGFloat positionRight;\n+@property (nonatomic) CGFloat positionBottom;\n+@property (nonatomic) CGFloat positionStart;\n+@property (nonatomic) CGFloat positionEnd;\n+@property (nonatomic) CGFloat positionHorizontal;",
        "comment_created_at": "2016-12-20T17:00:23+00:00",
        "comment_author": "d16r",
        "comment_body": "Personally, I find this makes the API much more confusing. There are multiple properties that essentially do the same thing. I could set `positionLeft` and `positionRight` or just simply set `positionHorizontal`. To me, it would be much more idiomatic to Objective-C and Swift if we did something like this.\r\n\r\n```objc\r\n@property (nonatomic, readwrite, assign) UIEdgeInsets position;\r\n```\r\n\r\nor\r\n\r\n```objc\r\n- (void)setMargin:(CGFloat)margin forEdges:(YKEdges)edges;\r\n```\r\nwhere YKEdges is an NSOption.\r\n\r\nI would apply this comment to `margin` and `padding` too. cc: @emilsjolander ",
        "pr_file_module": null
      },
      {
        "comment_id": "93324200",
        "repo_full_name": "facebook/yoga",
        "pr_number": 289,
        "pr_file": "YogaKit/YKLayout.h",
        "discussion_id": "93279773",
        "commented_code": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc.\n+ * All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+\n+#import \"YKEnums.h\"\n+\n+@interface YKLayout : NSObject\n+\n+/**\n+ The property that decides if we should include this view when calculating layout. Defaults to YES.\n+ */\n+@property (nonatomic, setter=setIncluded:) BOOL isIncluded;\n+\n+/**\n+ The property that decides during layout/sizing whether or not yk_* properties should be applied. Defaults to NO.\n+ */\n+@property (nonatomic, setter=setEnabled:) BOOL isEnabled;\n+\n+@property (nonatomic) YKDirection direction;\n+@property (nonatomic) YKFlexDirection flexDirection;\n+@property (nonatomic) YKJustify justifyContent;\n+@property (nonatomic) YKAlign alignContent;\n+@property (nonatomic) YKAlign alignItems;\n+@property (nonatomic) YKAlign alignSelf;\n+@property (nonatomic) YKPositionType positionType;\n+@property (nonatomic) YKWrap flexWrap;\n+\n+@property (nonatomic) CGFloat flexGrow;\n+@property (nonatomic) CGFloat flexShrink;\n+@property (nonatomic) CGFloat flexBasis;\n+\n+@property (nonatomic) CGFloat positionLeft;\n+@property (nonatomic) CGFloat positionTop;\n+@property (nonatomic) CGFloat positionRight;\n+@property (nonatomic) CGFloat positionBottom;\n+@property (nonatomic) CGFloat positionStart;\n+@property (nonatomic) CGFloat positionEnd;\n+@property (nonatomic) CGFloat positionHorizontal;",
        "comment_created_at": "2016-12-20T21:00:44+00:00",
        "comment_author": "hartbit",
        "comment_body": "@dshahidehpour I agree the solution I have is not ideal, but I fail to see how `UIEdgeInsets` or a `NS_OPTIONS YKEdges` would allow us to express the `Start` and `End` values.",
        "pr_file_module": null
      },
      {
        "comment_id": "93347639",
        "repo_full_name": "facebook/yoga",
        "pr_number": 289,
        "pr_file": "YogaKit/YKLayout.h",
        "discussion_id": "93279773",
        "commented_code": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc.\n+ * All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+\n+#import \"YKEnums.h\"\n+\n+@interface YKLayout : NSObject\n+\n+/**\n+ The property that decides if we should include this view when calculating layout. Defaults to YES.\n+ */\n+@property (nonatomic, setter=setIncluded:) BOOL isIncluded;\n+\n+/**\n+ The property that decides during layout/sizing whether or not yk_* properties should be applied. Defaults to NO.\n+ */\n+@property (nonatomic, setter=setEnabled:) BOOL isEnabled;\n+\n+@property (nonatomic) YKDirection direction;\n+@property (nonatomic) YKFlexDirection flexDirection;\n+@property (nonatomic) YKJustify justifyContent;\n+@property (nonatomic) YKAlign alignContent;\n+@property (nonatomic) YKAlign alignItems;\n+@property (nonatomic) YKAlign alignSelf;\n+@property (nonatomic) YKPositionType positionType;\n+@property (nonatomic) YKWrap flexWrap;\n+\n+@property (nonatomic) CGFloat flexGrow;\n+@property (nonatomic) CGFloat flexShrink;\n+@property (nonatomic) CGFloat flexBasis;\n+\n+@property (nonatomic) CGFloat positionLeft;\n+@property (nonatomic) CGFloat positionTop;\n+@property (nonatomic) CGFloat positionRight;\n+@property (nonatomic) CGFloat positionBottom;\n+@property (nonatomic) CGFloat positionStart;\n+@property (nonatomic) CGFloat positionEnd;\n+@property (nonatomic) CGFloat positionHorizontal;",
        "comment_created_at": "2016-12-20T23:29:12+00:00",
        "comment_author": "d16r",
        "comment_body": "@hartbit Whoops, I didn't even notice those, do we think they need to part of `YogaKit`? I purposely left some properties out at first because I didn't see a huge use-case for them with UIKit.",
        "pr_file_module": null
      },
      {
        "comment_id": "93353483",
        "repo_full_name": "facebook/yoga",
        "pr_number": 289,
        "pr_file": "YogaKit/YKLayout.h",
        "discussion_id": "93279773",
        "commented_code": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc.\n+ * All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+\n+#import \"YKEnums.h\"\n+\n+@interface YKLayout : NSObject\n+\n+/**\n+ The property that decides if we should include this view when calculating layout. Defaults to YES.\n+ */\n+@property (nonatomic, setter=setIncluded:) BOOL isIncluded;\n+\n+/**\n+ The property that decides during layout/sizing whether or not yk_* properties should be applied. Defaults to NO.\n+ */\n+@property (nonatomic, setter=setEnabled:) BOOL isEnabled;\n+\n+@property (nonatomic) YKDirection direction;\n+@property (nonatomic) YKFlexDirection flexDirection;\n+@property (nonatomic) YKJustify justifyContent;\n+@property (nonatomic) YKAlign alignContent;\n+@property (nonatomic) YKAlign alignItems;\n+@property (nonatomic) YKAlign alignSelf;\n+@property (nonatomic) YKPositionType positionType;\n+@property (nonatomic) YKWrap flexWrap;\n+\n+@property (nonatomic) CGFloat flexGrow;\n+@property (nonatomic) CGFloat flexShrink;\n+@property (nonatomic) CGFloat flexBasis;\n+\n+@property (nonatomic) CGFloat positionLeft;\n+@property (nonatomic) CGFloat positionTop;\n+@property (nonatomic) CGFloat positionRight;\n+@property (nonatomic) CGFloat positionBottom;\n+@property (nonatomic) CGFloat positionStart;\n+@property (nonatomic) CGFloat positionEnd;\n+@property (nonatomic) CGFloat positionHorizontal;",
        "comment_created_at": "2016-12-21T00:21:51+00:00",
        "comment_author": "hartbit",
        "comment_body": "@dshahidehpour The Yoga website says: \"We believe that Right-to-Left (RTL) should be a first class citizen when it comes to layout\" and I strongly agree. UIKit also supports it by default with leading and trailing constraints in Auto Layout and I'd be very sorry to have them out of YogaKit.\r\n\r\nYou mention that there are multiple properties that do the same thing. But it's not unheard of in Cocoa. For example, a UIView's `frame.size` is the same as its `bounds.size`. Setting one affects the other. And it's the same with it's `center`, which is the mid-x and mid-y of `frame`.\r\n\r\nI know, this is a difficult design decision. But I think there is no perfect solution. For sake of discussion, here are the solutions I see, as well as their pros and cons.\r\n\r\n# Properties\r\n\r\n```\r\n@property (nonatomic) CGFloat paddingLeft;\r\n@property (nonatomic) CGFloat paddingRight;\r\n@property (nonatomic) CGFloat paddingTop;\r\n@property (nonatomic) CGFloat paddingBottom;\r\n@property (nonatomic) CGFloat paddingStart;\r\n@property (nonatomic) CGFloat paddingEnd;\r\n@property (nonatomic) CGFloat paddingHorizontal;\r\n@property (nonatomic) CGFloat paddingVertical;\r\n@property (nonatomic) CGFloat padding; // I've removed the All because it's a change I'd like to do\r\n```\r\n\r\n## Usage in Objective-C\r\n\r\n```\r\nview.layout.padding = 15;\r\n// OR\r\nview.layout.paddingTop = 10;\r\n// OR\r\nview.layout.paddingStart = 10;\r\n// OR\r\nview.layout.paddingHorizontal = 10;\r\nview.layout.paddingTop = 15;\r\n```\r\n\r\n## Usage in Swift\r\n\r\n```\r\nview.layout.padding = 15\r\n// OR\r\nview.layout.paddingTop = 10\r\n// OR\r\nview.layout.paddingStart = 10\r\n// OR\r\nview.layout.paddingHorizontal = 10\r\nview.layout.paddingTop = 10\r\n```\r\n\r\n## Pros\r\n\r\n* Recognizable API for people from CSS and React Native (it's actually the exact same API as React Native).\r\n* Auto-completion makes this API version fast to use, as for all other properties.\r\n\r\n## Cons\r\n\r\n* Makes the API surface larger, not very DRY.\r\n\r\n# Methods with `NS_ENUM`\r\n\r\n```\r\n- (CGFloat)paddingForEdge:(YGEdge)edge;\r\n- (void)setPadding:(CGFloat)padding forEdge:(YGEdge)edge;\r\n```\r\n\r\n## Usage in Objective-C\r\n\r\n```\r\n[view.layout setPadding:15 forEdge:YGEdgeAll];\r\n// OR\r\n[view.layout setPadding:10 forEdge:YGEdgeTop];\r\n// OR\r\n// NO WAY TO SET START\r\n[view.layout setPadding:10 forEdge:YKEdgeHorizontal];\r\n[view.layout setPadding:10 forEdge:YKEdgeTop];\r\n```\r\n\r\n## Usage in Swift\r\n\r\n```\r\nview.layout.setPadding(15, for: .all)\r\n// OR\r\nview.layout.setPadding(10, for: .top)\r\n// OR\r\n// NO WAY TO SET START\r\n// OR\r\nview.layout.setPadding(10, for: .horizontal)\r\nview.layout.setPadding(10, for: .top)\r\n```\r\n\r\n## Pros\r\n\r\n* The usage looks cleaner by having a smaller API surface area.\r\n\r\n## Cons\r\n\r\n* We can't use dot-notation like all other properties, which breaks the reading flow. Perhaps it's my personal taste, but I see that as a big minus.\r\n\r\n```\r\nroot.layout.width = 5;\r\n[root.layout setPadding:10 forEdge:YGEdgeTop];\r\nroot.layout.flexGrow = 1;\r\n```\r\n\r\n# `YGEdgeValue`\r\n\r\n```\r\n\r\n@interface YGEdgeValue\r\n@property (nonatomic) CGFloat left;\r\n@property (nonatomic) CGFloat right;\r\n@property (nonatomic) CGFloat top;\r\n@property (nonatomic) CGFloat bottom;\r\n@property (nonatomic) CGFloat start;\r\n@property (nonatomic) CGFloat end;\r\n@property (nonatomic) CGFloat horizontal;\r\n@property (nonatomic) CGFloat vertical;\r\n@property (nonatomic) CGFloat all;\r\n@end\r\n\r\n@inteface YGLayout\r\n@property (nonatomic, readonly) YGEdgeValue *padding;\r\n@end\r\n```\r\n\r\n## Usage in Objective-C\r\n\r\n```\r\nview.layout.padding.all = 15;\r\n// OR\r\nview.layout.padding.top = 10;\r\n// OR\r\nview.layout.padding.start = 10;\r\n// OR\r\nview.layout.padding.horizontal = 10;\r\nview.layout.padding.top = 15;\r\n```\r\n\r\n## Usage in Swift\r\n\r\n```\r\nview.layout.padding.all = 15\r\n// OR\r\nview.layout.padding.top = 10\r\n// OR\r\nview.layout.padding.start = 10\r\n// OR\r\nview.layout.padding.horizontal = 10\r\nview.layout.padding.top = 10\r\n```\r\n\r\n## Pros and Cons\r\n\r\nThis is basically a different flavor of properties. I'm not a hug fan of it because it multiplies the number of objects on the heap that yoga generates by 4 for a small gain in readability and API surface and a small loss in usage typing speed because having to go through two auto-completion hints (`padding`, then `top`).\r\n\r\n# Conclusion\r\n\r\nOn and all, here's my ranking of preference:\r\n\r\n1. Properties\r\n2. YGEdgeValue\r\n3. Methods",
        "pr_file_module": null
      },
      {
        "comment_id": "93354704",
        "repo_full_name": "facebook/yoga",
        "pr_number": 289,
        "pr_file": "YogaKit/YKLayout.h",
        "discussion_id": "93279773",
        "commented_code": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc.\n+ * All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+\n+#import \"YKEnums.h\"\n+\n+@interface YKLayout : NSObject\n+\n+/**\n+ The property that decides if we should include this view when calculating layout. Defaults to YES.\n+ */\n+@property (nonatomic, setter=setIncluded:) BOOL isIncluded;\n+\n+/**\n+ The property that decides during layout/sizing whether or not yk_* properties should be applied. Defaults to NO.\n+ */\n+@property (nonatomic, setter=setEnabled:) BOOL isEnabled;\n+\n+@property (nonatomic) YKDirection direction;\n+@property (nonatomic) YKFlexDirection flexDirection;\n+@property (nonatomic) YKJustify justifyContent;\n+@property (nonatomic) YKAlign alignContent;\n+@property (nonatomic) YKAlign alignItems;\n+@property (nonatomic) YKAlign alignSelf;\n+@property (nonatomic) YKPositionType positionType;\n+@property (nonatomic) YKWrap flexWrap;\n+\n+@property (nonatomic) CGFloat flexGrow;\n+@property (nonatomic) CGFloat flexShrink;\n+@property (nonatomic) CGFloat flexBasis;\n+\n+@property (nonatomic) CGFloat positionLeft;\n+@property (nonatomic) CGFloat positionTop;\n+@property (nonatomic) CGFloat positionRight;\n+@property (nonatomic) CGFloat positionBottom;\n+@property (nonatomic) CGFloat positionStart;\n+@property (nonatomic) CGFloat positionEnd;\n+@property (nonatomic) CGFloat positionHorizontal;",
        "comment_created_at": "2016-12-21T00:34:24+00:00",
        "comment_author": "hartbit",
        "comment_body": "As an additional support for the properties, I don't think it would surprise UIKit users because it is fairly idiomatic of the AutoLayout APIs:\r\n\r\n<img width=\"368\" alt=\"screen shot 2016-12-21 at 01 31 09\" src=\"https://cloud.githubusercontent.com/assets/325519/21373209/5f647db0-c71d-11e6-8cac-5853287cbeec.png\">\r\n\r\nAdd to that the fact that CSS and React Native users would feel right a home.",
        "pr_file_module": null
      },
      {
        "comment_id": "93630513",
        "repo_full_name": "facebook/yoga",
        "pr_number": 289,
        "pr_file": "YogaKit/YKLayout.h",
        "discussion_id": "93279773",
        "commented_code": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc.\n+ * All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+\n+#import \"YKEnums.h\"\n+\n+@interface YKLayout : NSObject\n+\n+/**\n+ The property that decides if we should include this view when calculating layout. Defaults to YES.\n+ */\n+@property (nonatomic, setter=setIncluded:) BOOL isIncluded;\n+\n+/**\n+ The property that decides during layout/sizing whether or not yk_* properties should be applied. Defaults to NO.\n+ */\n+@property (nonatomic, setter=setEnabled:) BOOL isEnabled;\n+\n+@property (nonatomic) YKDirection direction;\n+@property (nonatomic) YKFlexDirection flexDirection;\n+@property (nonatomic) YKJustify justifyContent;\n+@property (nonatomic) YKAlign alignContent;\n+@property (nonatomic) YKAlign alignItems;\n+@property (nonatomic) YKAlign alignSelf;\n+@property (nonatomic) YKPositionType positionType;\n+@property (nonatomic) YKWrap flexWrap;\n+\n+@property (nonatomic) CGFloat flexGrow;\n+@property (nonatomic) CGFloat flexShrink;\n+@property (nonatomic) CGFloat flexBasis;\n+\n+@property (nonatomic) CGFloat positionLeft;\n+@property (nonatomic) CGFloat positionTop;\n+@property (nonatomic) CGFloat positionRight;\n+@property (nonatomic) CGFloat positionBottom;\n+@property (nonatomic) CGFloat positionStart;\n+@property (nonatomic) CGFloat positionEnd;\n+@property (nonatomic) CGFloat positionHorizontal;",
        "comment_created_at": "2016-12-22T14:20:39+00:00",
        "comment_author": "d16r",
        "comment_body": "Hey @hartbit, sorry I took so long to respond. I really appreciate the time you put into that response, and I support all of it 100%.\r\n\r\n@emilsjolander I know we talked about `YGEdgeValue`, but, I think @hartbit makes a compelling case for why we should put these properties on the layout object. \r\n\r\n1. Matches other UIKit APIs.\r\n2. Less objects on the heap.\r\n3. One less method lookup when we are getting/setting this on the objc runtime.",
        "pr_file_module": null
      },
      {
        "comment_id": "94468496",
        "repo_full_name": "facebook/yoga",
        "pr_number": 289,
        "pr_file": "YogaKit/YKLayout.h",
        "discussion_id": "93279773",
        "commented_code": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc.\n+ * All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+\n+#import \"YKEnums.h\"\n+\n+@interface YKLayout : NSObject\n+\n+/**\n+ The property that decides if we should include this view when calculating layout. Defaults to YES.\n+ */\n+@property (nonatomic, setter=setIncluded:) BOOL isIncluded;\n+\n+/**\n+ The property that decides during layout/sizing whether or not yk_* properties should be applied. Defaults to NO.\n+ */\n+@property (nonatomic, setter=setEnabled:) BOOL isEnabled;\n+\n+@property (nonatomic) YKDirection direction;\n+@property (nonatomic) YKFlexDirection flexDirection;\n+@property (nonatomic) YKJustify justifyContent;\n+@property (nonatomic) YKAlign alignContent;\n+@property (nonatomic) YKAlign alignItems;\n+@property (nonatomic) YKAlign alignSelf;\n+@property (nonatomic) YKPositionType positionType;\n+@property (nonatomic) YKWrap flexWrap;\n+\n+@property (nonatomic) CGFloat flexGrow;\n+@property (nonatomic) CGFloat flexShrink;\n+@property (nonatomic) CGFloat flexBasis;\n+\n+@property (nonatomic) CGFloat positionLeft;\n+@property (nonatomic) CGFloat positionTop;\n+@property (nonatomic) CGFloat positionRight;\n+@property (nonatomic) CGFloat positionBottom;\n+@property (nonatomic) CGFloat positionStart;\n+@property (nonatomic) CGFloat positionEnd;\n+@property (nonatomic) CGFloat positionHorizontal;",
        "comment_created_at": "2017-01-03T19:37:41+00:00",
        "comment_author": "eklipse2k8",
        "comment_body": "I like the YGEdgeValue the best, but why does it need to be a full class? In C/C++, the pattern would be lightweight structs for this kind of data set. That way I can do something like:\r\n\r\n`view.layout.padding = {.top = 10, .bottom = 10}`\r\n\r\nOr a hypothetical \r\n`view.layout.padding = YGCreateEdgeValues(...);` ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "92973217",
    "pr_number": 258,
    "pr_file": "yoga/Yoga.h",
    "created_at": "2016-12-19T06:18:49+00:00",
    "commented_code": "WIN_EXPORT void YGNodeStyleSet##name(const YGNodeRef node, const type paramName); \\\n   WIN_EXPORT type YGNodeStyleGet##name(const YGNodeRef node);\n \n+#define YG_NODE_STYLE_PROPERTY_UNIT(type, name, paramName)                                \\\n+  YG_NODE_STYLE_PROPERTY(float, name, paramName); \\\n+  WIN_EXPORT void YGNodeStyleSet##name##WithUnit(const YGNodeRef node, const type paramName); \\",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "92973217",
        "repo_full_name": "facebook/yoga",
        "pr_number": 258,
        "pr_file": "yoga/Yoga.h",
        "discussion_id": "92973217",
        "commented_code": "@@ -107,12 +118,24 @@ WIN_EXPORT void YGNodeCopyStyle(const YGNodeRef dstNode, const YGNodeRef srcNode\n   WIN_EXPORT void YGNodeStyleSet##name(const YGNodeRef node, const type paramName); \\\n   WIN_EXPORT type YGNodeStyleGet##name(const YGNodeRef node);\n \n+#define YG_NODE_STYLE_PROPERTY_UNIT(type, name, paramName)                                \\\n+  YG_NODE_STYLE_PROPERTY(float, name, paramName); \\\n+  WIN_EXPORT void YGNodeStyleSet##name##WithUnit(const YGNodeRef node, const type paramName); \\",
        "comment_created_at": "2016-12-19T06:18:49+00:00",
        "comment_author": "emilsjolander",
        "comment_body": "Let's remove the *WithUnit APIs and just use units everywhere. This makes the API smaller and more concise. Also it forces the user to think about units.",
        "pr_file_module": null
      },
      {
        "comment_id": "92976553",
        "repo_full_name": "facebook/yoga",
        "pr_number": 258,
        "pr_file": "yoga/Yoga.h",
        "discussion_id": "92973217",
        "commented_code": "@@ -107,12 +118,24 @@ WIN_EXPORT void YGNodeCopyStyle(const YGNodeRef dstNode, const YGNodeRef srcNode\n   WIN_EXPORT void YGNodeStyleSet##name(const YGNodeRef node, const type paramName); \\\n   WIN_EXPORT type YGNodeStyleGet##name(const YGNodeRef node);\n \n+#define YG_NODE_STYLE_PROPERTY_UNIT(type, name, paramName)                                \\\n+  YG_NODE_STYLE_PROPERTY(float, name, paramName); \\\n+  WIN_EXPORT void YGNodeStyleSet##name##WithUnit(const YGNodeRef node, const type paramName); \\",
        "comment_created_at": "2016-12-19T06:55:57+00:00",
        "comment_author": "woehrl01",
        "comment_body": "How should we return the units in the getter? Should I use YGValue in both get + set or use (float, YGUnitPixel) in the set and return only the float in get?",
        "pr_file_module": null
      },
      {
        "comment_id": "92977647",
        "repo_full_name": "facebook/yoga",
        "pr_number": 258,
        "pr_file": "yoga/Yoga.h",
        "discussion_id": "92973217",
        "commented_code": "@@ -107,12 +118,24 @@ WIN_EXPORT void YGNodeCopyStyle(const YGNodeRef dstNode, const YGNodeRef srcNode\n   WIN_EXPORT void YGNodeStyleSet##name(const YGNodeRef node, const type paramName); \\\n   WIN_EXPORT type YGNodeStyleGet##name(const YGNodeRef node);\n \n+#define YG_NODE_STYLE_PROPERTY_UNIT(type, name, paramName)                                \\\n+  YG_NODE_STYLE_PROPERTY(float, name, paramName); \\\n+  WIN_EXPORT void YGNodeStyleSet##name##WithUnit(const YGNodeRef node, const type paramName); \\",
        "comment_created_at": "2016-12-19T07:09:51+00:00",
        "comment_author": "emilsjolander",
        "comment_body": "The getter should return a YGValue as well.",
        "pr_file_module": null
      }
    ]
  }
]