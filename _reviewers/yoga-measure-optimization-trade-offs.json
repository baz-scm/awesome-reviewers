[
  {
    "discussion_id": "1046003155",
    "pr_number": 1177,
    "pr_file": "javascript/Makefile",
    "created_at": "2022-12-12T15:49:06+00:00",
    "commented_code": "+CC=emcc\n+\n+all: clean dir asm\n+\n+asm:\n+\t$(CC) sources/yoga/*.cpp sources/yoga/**/*.cpp sources/*.cc \\\n+\t\t--bind \\\n+\t\t-Isources \\\n+\t\t-g0 \\\n+\t\t-Os \\\n+\t\t--closure 1 \\\n+\t\t--memory-init-file 0 \\\n+\t\t-s WASM=0 \\\n+\t\t-s WASM_ASYNC_COMPILATION=0 \\\n+\t\t-s USE_CLOSURE_COMPILER=1 \\\n+\t\t-s USE_ES6_IMPORT_META=0 \\\n+\t\t-s MODULARIZE=1 \\\n+\t\t-s ASSERTIONS=0 \\\n+\t\t-s ALLOW_MEMORY_GROWTH=1 \\\n+\t\t-s DYNAMIC_EXECUTION=0 \\\n+\t\t-s TEXTDECODER=0 \\\n+\t\t-s ENVIRONMENT='web' \\\n+\t\t-s FILESYSTEM=0 \\\n+\t\t-s MALLOC=\"emmalloc\" \\",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "1046003155",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1177,
        "pr_file": "javascript/Makefile",
        "discussion_id": "1046003155",
        "commented_code": "@@ -0,0 +1,32 @@\n+CC=emcc\n+\n+all: clean dir asm\n+\n+asm:\n+\t$(CC) sources/yoga/*.cpp sources/yoga/**/*.cpp sources/*.cc \\\n+\t\t--bind \\\n+\t\t-Isources \\\n+\t\t-g0 \\\n+\t\t-Os \\\n+\t\t--closure 1 \\\n+\t\t--memory-init-file 0 \\\n+\t\t-s WASM=0 \\\n+\t\t-s WASM_ASYNC_COMPILATION=0 \\\n+\t\t-s USE_CLOSURE_COMPILER=1 \\\n+\t\t-s USE_ES6_IMPORT_META=0 \\\n+\t\t-s MODULARIZE=1 \\\n+\t\t-s ASSERTIONS=0 \\\n+\t\t-s ALLOW_MEMORY_GROWTH=1 \\\n+\t\t-s DYNAMIC_EXECUTION=0 \\\n+\t\t-s TEXTDECODER=0 \\\n+\t\t-s ENVIRONMENT='web' \\\n+\t\t-s FILESYSTEM=0 \\\n+\t\t-s MALLOC=\"emmalloc\" \\",
        "comment_created_at": "2022-12-12T15:49:06+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "Reading, this is smaller than the default dlmalloc, but may perform worse. Do you know if it has a performance impact for Yoga?",
        "pr_file_module": null
      },
      {
        "comment_id": "1055193758",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1177,
        "pr_file": "javascript/Makefile",
        "discussion_id": "1046003155",
        "commented_code": "@@ -0,0 +1,32 @@\n+CC=emcc\n+\n+all: clean dir asm\n+\n+asm:\n+\t$(CC) sources/yoga/*.cpp sources/yoga/**/*.cpp sources/*.cc \\\n+\t\t--bind \\\n+\t\t-Isources \\\n+\t\t-g0 \\\n+\t\t-Os \\\n+\t\t--closure 1 \\\n+\t\t--memory-init-file 0 \\\n+\t\t-s WASM=0 \\\n+\t\t-s WASM_ASYNC_COMPILATION=0 \\\n+\t\t-s USE_CLOSURE_COMPILER=1 \\\n+\t\t-s USE_ES6_IMPORT_META=0 \\\n+\t\t-s MODULARIZE=1 \\\n+\t\t-s ASSERTIONS=0 \\\n+\t\t-s ALLOW_MEMORY_GROWTH=1 \\\n+\t\t-s DYNAMIC_EXECUTION=0 \\\n+\t\t-s TEXTDECODER=0 \\\n+\t\t-s ENVIRONMENT='web' \\\n+\t\t-s FILESYSTEM=0 \\\n+\t\t-s MALLOC=\"emmalloc\" \\",
        "comment_created_at": "2022-12-22T08:13:04+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "Testing locally:\r\nemmalloc: 165kb\r\ndlmalloc: 173kb",
        "pr_file_module": null
      },
      {
        "comment_id": "1055278625",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1177,
        "pr_file": "javascript/Makefile",
        "discussion_id": "1046003155",
        "commented_code": "@@ -0,0 +1,32 @@\n+CC=emcc\n+\n+all: clean dir asm\n+\n+asm:\n+\t$(CC) sources/yoga/*.cpp sources/yoga/**/*.cpp sources/*.cc \\\n+\t\t--bind \\\n+\t\t-Isources \\\n+\t\t-g0 \\\n+\t\t-Os \\\n+\t\t--closure 1 \\\n+\t\t--memory-init-file 0 \\\n+\t\t-s WASM=0 \\\n+\t\t-s WASM_ASYNC_COMPILATION=0 \\\n+\t\t-s USE_CLOSURE_COMPILER=1 \\\n+\t\t-s USE_ES6_IMPORT_META=0 \\\n+\t\t-s MODULARIZE=1 \\\n+\t\t-s ASSERTIONS=0 \\\n+\t\t-s ALLOW_MEMORY_GROWTH=1 \\\n+\t\t-s DYNAMIC_EXECUTION=0 \\\n+\t\t-s TEXTDECODER=0 \\\n+\t\t-s ENVIRONMENT='web' \\\n+\t\t-s FILESYSTEM=0 \\\n+\t\t-s MALLOC=\"emmalloc\" \\",
        "comment_created_at": "2022-12-22T09:48:27+00:00",
        "comment_author": "jeetiss",
        "comment_body": "Yes, I tested it too and it doesn't affect the perf",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1046008925",
    "pr_number": 1177,
    "pr_file": "javascript/Makefile",
    "created_at": "2022-12-12T15:53:00+00:00",
    "commented_code": "+CC=emcc\n+\n+all: clean dir asm\n+\n+asm:\n+\t$(CC) sources/yoga/*.cpp sources/yoga/**/*.cpp sources/*.cc \\\n+\t\t--bind \\\n+\t\t-Isources \\\n+\t\t-g0 \\\n+\t\t-Os \\",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "1046008925",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1177,
        "pr_file": "javascript/Makefile",
        "discussion_id": "1046008925",
        "commented_code": "@@ -0,0 +1,32 @@\n+CC=emcc\n+\n+all: clean dir asm\n+\n+asm:\n+\t$(CC) sources/yoga/*.cpp sources/yoga/**/*.cpp sources/*.cc \\\n+\t\t--bind \\\n+\t\t-Isources \\\n+\t\t-g0 \\\n+\t\t-Os \\",
        "comment_created_at": "2022-12-12T15:53:00+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "This will effectively break [C++ exceptions](https://emscripten.org/docs/optimizing/Optimizing-Code.html#c-exceptions), so we should also probably go ahead and add `-fno-exceptions` (and `-fno-rtti` would probably add some more savings)",
        "pr_file_module": null
      },
      {
        "comment_id": "1046012796",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1177,
        "pr_file": "javascript/Makefile",
        "discussion_id": "1046008925",
        "commented_code": "@@ -0,0 +1,32 @@\n+CC=emcc\n+\n+all: clean dir asm\n+\n+asm:\n+\t$(CC) sources/yoga/*.cpp sources/yoga/**/*.cpp sources/*.cc \\\n+\t\t--bind \\\n+\t\t-Isources \\\n+\t\t-g0 \\\n+\t\t-Os \\",
        "comment_created_at": "2022-12-12T15:55:38+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "One more, we should consider adding `-flto` which could make things a bit smaller/faster.",
        "pr_file_module": null
      },
      {
        "comment_id": "1055202813",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1177,
        "pr_file": "javascript/Makefile",
        "discussion_id": "1046008925",
        "commented_code": "@@ -0,0 +1,32 @@\n+CC=emcc\n+\n+all: clean dir asm\n+\n+asm:\n+\t$(CC) sources/yoga/*.cpp sources/yoga/**/*.cpp sources/*.cc \\\n+\t\t--bind \\\n+\t\t-Isources \\\n+\t\t-g0 \\\n+\t\t-Os \\",
        "comment_created_at": "2022-12-22T08:24:39+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "Disabling exceptions and RTTI saves 10kb. LTCG does not lead to size savings, but is best practice for performance so I am tempted to think we should enable it (despite impact to build perf of the Yoga repo).",
        "pr_file_module": null
      },
      {
        "comment_id": "1055284708",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1177,
        "pr_file": "javascript/Makefile",
        "discussion_id": "1046008925",
        "commented_code": "@@ -0,0 +1,32 @@\n+CC=emcc\n+\n+all: clean dir asm\n+\n+asm:\n+\t$(CC) sources/yoga/*.cpp sources/yoga/**/*.cpp sources/*.cc \\\n+\t\t--bind \\\n+\t\t-Isources \\\n+\t\t-g0 \\\n+\t\t-Os \\",
        "comment_created_at": "2022-12-22T09:54:55+00:00",
        "comment_author": "jeetiss",
        "comment_body": "yep, sure `emcc` build takes 2 times longer but it definitely makes sense\r\n\r\nthanks for suggestion\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1055298195",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1177,
        "pr_file": "javascript/Makefile",
        "discussion_id": "1046008925",
        "commented_code": "@@ -0,0 +1,32 @@\n+CC=emcc\n+\n+all: clean dir asm\n+\n+asm:\n+\t$(CC) sources/yoga/*.cpp sources/yoga/**/*.cpp sources/*.cc \\\n+\t\t--bind \\\n+\t\t-Isources \\\n+\t\t-g0 \\\n+\t\t-Os \\",
        "comment_created_at": "2022-12-22T10:09:21+00:00",
        "comment_author": "jeetiss",
        "comment_body": "\ud83d\ude80\r\n\r\n[<img width=\"633\" alt=\"\u0421\u043d\u0438\u043c\u043e\u043a \u044d\u043a\u0440\u0430\u043d\u0430 2022-12-22 \u0432 13 08 02\" src=\"https://user-images.githubusercontent.com/6726016/209110602-9a736bb6-6649-49de-bdc6-ce8a306e260b.png\">](https://github.com/jeetiss/yet-another-yoga-layout-fork/pull/10)\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "244895568",
    "pr_number": 791,
    "pr_file": "yoga/YGNode.h",
    "created_at": "2019-01-03T00:57:48+00:00",
    "commented_code": "bool isNodeFlexible();\n   bool didUseLegacyFlag();\n   bool isLayoutTreeEqualToNode(const YGNode& node) const;\n+\n+private:\n+  YGNodeRef pRoot = nullptr;\n+\n+public:\n+  uint32_t  gCurrentGenerationCount = 0;\n+  uint32_t  gDepth = 0;",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "244895568",
        "repo_full_name": "facebook/yoga",
        "pr_number": 791,
        "pr_file": "yoga/YGNode.h",
        "discussion_id": "244895568",
        "commented_code": "@@ -270,4 +270,13 @@ struct YGNode {\n   bool isNodeFlexible();\n   bool didUseLegacyFlag();\n   bool isLayoutTreeEqualToNode(const YGNode& node) const;\n+\n+private:\n+  YGNodeRef pRoot = nullptr;\n+\n+public:\n+  uint32_t  gCurrentGenerationCount = 0;\n+  uint32_t  gDepth = 0;",
        "comment_created_at": "2019-01-03T00:57:48+00:00",
        "comment_author": "jpap",
        "comment_body": "We can avoid storing `gDepth`  in every node (4 bytes overhead) by:\r\n\r\n1. Passing `gDepth` (perhaps renamed to just `depth`, again avoiding the global naming prefix) between function calls that stem from `YGNodeCalculateLayout`.\r\n2. In `YGNodeCalculateLayout`, pass `depth` as value 0, to indicate the root depth.\r\n3. Since this depth state is only used during debugging (when `gPrintChanges` is true), you could further place the increment/decrement in an if-statement that gets optimized out by the compiler when `gPrintChanges == false`, after further refactoring the latter to be const (or `#define`'d).\r\n\r\nSimilarly, we can additionally pass the generation via function calls as above, to avoid the need for a pointer from each node to the tree root, saving another 8 bytes.  I suspect the approach used in this PR also breaks cloning, which uses a \"copy on write\" scheme.  In this PR, the pointer to the root is overwritten by `YGNodeClone` immediately on all children when cloning; but now the cloned nodes are no-longer \"shared\": we would ideally need the cloned children to point to each of their tree roots; but that becomes awkward as we'd have to manage 1:M pointers, where M is the number of distinct clones. (This doesn't say how we'd then know which of the M pointers to use when performing layout on a cloned subtree; that would be difficult.)\r\n\r\nBy removing the pointer to the tree root we can also drop the new method `setChildRoot` which performs a full subtree traversal that can be expensive.",
        "pr_file_module": null
      }
    ]
  }
]