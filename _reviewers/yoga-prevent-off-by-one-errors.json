[
  {
    "discussion_id": "1359078225",
    "pr_number": 1422,
    "pr_file": "yoga/algorithm/CalculateLayout.cpp",
    "created_at": "2023-10-14T02:47:00+00:00",
    "commented_code": "currentLead += remainingAlignContentDim / 2;\n           }\n           break;\n+        case Align::SpaceEvenly:\n+          if (availableInnerCrossDim > totalLineCrossDim) {\n+            currentLead +=\n+                remainingAlignContentDim / static_cast<float>(lineCount + 1);\n+            if (lineCount > 1) {\n+              crossDimLead =\n+                  remainingAlignContentDim / static_cast<float>(lineCount + 1);\n+            }\n+          } else {\n+            currentLead += remainingAlignContentDim / 2;\n+          }\n+          break;",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "1359078225",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1422,
        "pr_file": "yoga/algorithm/CalculateLayout.cpp",
        "discussion_id": "1359078225",
        "commented_code": "@@ -2021,6 +2021,18 @@ static void calculateLayoutImpl(\n             currentLead += remainingAlignContentDim / 2;\n           }\n           break;\n+        case Align::SpaceEvenly:\n+          if (availableInnerCrossDim > totalLineCrossDim) {\n+            currentLead +=\n+                remainingAlignContentDim / static_cast<float>(lineCount + 1);\n+            if (lineCount > 1) {\n+              crossDimLead =\n+                  remainingAlignContentDim / static_cast<float>(lineCount + 1);\n+            }\n+          } else {\n+            currentLead += remainingAlignContentDim / 2;\n+          }\n+          break;",
        "comment_created_at": "2023-10-14T02:47:00+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "Am I following this logic correctly?\r\n\r\n`currentLead` is the leading position of the current line (incremented by each line height), then `crossDimLead` is the per-line lead added to each line after.\r\n\r\nWhen there is not free space left, we fall back to centering. This is the specified behavior in the [flexbox spec](https://www.w3.org/TR/css-flexbox-1/#valdef-align-content-space-around) for `space-around`, where the later [box alignment](https://www.w3.org/TR/css-align-3/#distribution-values) spec instead says `space-around` and `space-evenly` have a fallback alignment of \"safe center\"?\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1359079393",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1422,
        "pr_file": "yoga/algorithm/CalculateLayout.cpp",
        "discussion_id": "1359078225",
        "commented_code": "@@ -2021,6 +2021,18 @@ static void calculateLayoutImpl(\n             currentLead += remainingAlignContentDim / 2;\n           }\n           break;\n+        case Align::SpaceEvenly:\n+          if (availableInnerCrossDim > totalLineCrossDim) {\n+            currentLead +=\n+                remainingAlignContentDim / static_cast<float>(lineCount + 1);\n+            if (lineCount > 1) {\n+              crossDimLead =\n+                  remainingAlignContentDim / static_cast<float>(lineCount + 1);\n+            }\n+          } else {\n+            currentLead += remainingAlignContentDim / 2;\n+          }\n+          break;",
        "comment_created_at": "2023-10-14T02:57:44+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "> e.g. I think https://github.com/facebook/yoga/pull/1013 probably still needs to happen)\r\n\r\nYuck, I see. We are contributing `crossDimLead` to not just distribution of the line, but then also using it for alignment within the line.\r\n\r\nIs there a reason for `if (lineCount > 1)` here? Or was it just around for `Align::SpaceAround` to avoid division by zero, if the lead will never be used after the next line (ignoring the bug where it contributes to `align-items`).",
        "pr_file_module": null
      },
      {
        "comment_id": "1359377035",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1422,
        "pr_file": "yoga/algorithm/CalculateLayout.cpp",
        "discussion_id": "1359078225",
        "commented_code": "@@ -2021,6 +2021,18 @@ static void calculateLayoutImpl(\n             currentLead += remainingAlignContentDim / 2;\n           }\n           break;\n+        case Align::SpaceEvenly:\n+          if (availableInnerCrossDim > totalLineCrossDim) {\n+            currentLead +=\n+                remainingAlignContentDim / static_cast<float>(lineCount + 1);\n+            if (lineCount > 1) {\n+              crossDimLead =\n+                  remainingAlignContentDim / static_cast<float>(lineCount + 1);\n+            }\n+          } else {\n+            currentLead += remainingAlignContentDim / 2;\n+          }\n+          break;",
        "comment_created_at": "2023-10-14T13:24:42+00:00",
        "comment_author": "nicoburns",
        "comment_body": "> currentLead is the leading position of the current line (incremented by each line height), then crossDimLead is the per-line lead added to each line after.\r\n\r\nI think that's correct. Although, I believe the effect of the code adding to `currentLead` here is to set the \"lead\" for the *first* line.\r\n\r\n> Is there a reason for if (lineCount > 1) here?\r\n\r\nI don't think so. I just left it there on a principle of not wanting to touch anything. I think you're probably right about it being there to avoid a divide by zero. Although it seems like it might be better not to run alignment at all if there are zero lines (Taffy actually skips the entire Flexbox algorithm if there are no children as it reduces to relatively trivial calculations involving the container node's styles)\r\n\r\n> When there is not free space left, we fall back to centering. \r\n\r\nYep\r\n\r\n> This is the specified behavior in the [flexbox spec](https://www.w3.org/TR/css-flexbox-1/#valdef-align-content-space-around) for space-around, where the later [box alignment](https://www.w3.org/TR/css-align-3/#distribution-values) spec instead says space-around and space-evenly have a fallback alignment of \"safe center\"?\r\n\r\nI believe the \"safe\" alignment modes are opt-in. So these would probably be separate enum variants (or a boolean on top of the alignment) in Yoga. It looks like there's a \"smart\" mode. But that appears to involve non-node-local logic, and looks like it might be quite tricky to implement.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1044363811",
    "pr_number": 1188,
    "pr_file": "yoga/Yoga.cpp",
    "created_at": "2022-12-09T11:35:47+00:00",
    "commented_code": "const YGNodeRef child = node->getChild(i);\n     const YGStyle& childStyle = child->getStyle();\n     const YGLayout childLayout = child->getLayout();\n+    const bool isLastChild = i == collectedFlexItemsValues.endOfLineIndex - 1;\n+    // remove the gap if it is the last element of the line\n+    if (isLastChild) {\n+        betweenMainDim -= gap;\n+    }",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "1044363811",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1188,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "1044363811",
        "commented_code": "@@ -2540,6 +2540,11 @@ static void YGJustifyMainAxis(\n     const YGNodeRef child = node->getChild(i);\n     const YGStyle& childStyle = child->getStyle();\n     const YGLayout childLayout = child->getLayout();\n+    const bool isLastChild = i == collectedFlexItemsValues.endOfLineIndex - 1;\n+    // remove the gap if it is the last element of the line\n+    if (isLastChild) {\n+        betweenMainDim -= gap;\n+    }",
        "comment_created_at": "2022-12-09T11:35:47+00:00",
        "comment_author": "jacobp100",
        "comment_body": "This is a good catch! I was looking for ages what the culprit might be.\r\n\r\nI'm still trying to fully grok this step - but my feeling is the `betweenMainDim` should never be applied on the first child. I.e. on these lines:-\r\n\r\nhttps://github.com/facebook/yoga/blob/60dd791dd8d56e0fdb978ac3357030c200a2c130/yoga/Yoga.cpp#L2593-L2601\r\n\r\nI think there was always a bug here, and `collectedFlexItemsValues.mainDim` would be too large in the case any sort of justification. It would include one more `betweenMainDim` than it should have.\r\n\r\nHowever, I think we got away with it because either justification is only going to do something (i.e. set `betweenMainDim` to something bigger than zero) when the container has its size defined - and when its size is defined, we probably don't use `collectedFlexItemsValues.mainDim`.\r\n\r\nSo in the case you did `justify-content: space-between` and the container only gets sized by its contents, the children wouldn't be justified, and `betweenMainDim` would be zero.\r\n\r\nIn the case it had an explicit size and `betweenMainDim` was not zero, the explicit size was used instead, so it never really mattered that the `mainDim` was too large.\r\n\r\nMaybe we could do `const float appliedBetweenMainDim = i != 0 ? betweenMainDim : 0`",
        "pr_file_module": null
      },
      {
        "comment_id": "1044364136",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1188,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "1044363811",
        "commented_code": "@@ -2540,6 +2540,11 @@ static void YGJustifyMainAxis(\n     const YGNodeRef child = node->getChild(i);\n     const YGStyle& childStyle = child->getStyle();\n     const YGLayout childLayout = child->getLayout();\n+    const bool isLastChild = i == collectedFlexItemsValues.endOfLineIndex - 1;\n+    // remove the gap if it is the last element of the line\n+    if (isLastChild) {\n+        betweenMainDim -= gap;\n+    }",
        "comment_created_at": "2022-12-09T11:36:11+00:00",
        "comment_author": "jacobp100",
        "comment_body": "@NickGerleman does that make sense to you?",
        "pr_file_module": null
      },
      {
        "comment_id": "1044471215",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1188,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "1044363811",
        "commented_code": "@@ -2540,6 +2540,11 @@ static void YGJustifyMainAxis(\n     const YGNodeRef child = node->getChild(i);\n     const YGStyle& childStyle = child->getStyle();\n     const YGLayout childLayout = child->getLayout();\n+    const bool isLastChild = i == collectedFlexItemsValues.endOfLineIndex - 1;\n+    // remove the gap if it is the last element of the line\n+    if (isLastChild) {\n+        betweenMainDim -= gap;\n+    }",
        "comment_created_at": "2022-12-09T13:48:56+00:00",
        "comment_author": "intergalacticspacehighway",
        "comment_body": "@jacobp100 that makes sense to me!\r\nBut `collectedFlexItemsValues.mainDim` is also used to layout child items [here](https://github.com/facebook/yoga/blob/60dd791dd8d56e0fdb978ac3357030c200a2c130/yoga/Yoga.cpp#L2575). If we don't add `betweenMainDim` for the first item, there won't be a gap between first and second child. Also, verified by testing it. \r\nI am trying to run tests but getting below error on running buck test //:yoga\r\n`No build file at BUCK when resolving target //:yoga.`",
        "pr_file_module": null
      },
      {
        "comment_id": "1044499329",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1188,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "1044363811",
        "commented_code": "@@ -2540,6 +2540,11 @@ static void YGJustifyMainAxis(\n     const YGNodeRef child = node->getChild(i);\n     const YGStyle& childStyle = child->getStyle();\n     const YGLayout childLayout = child->getLayout();\n+    const bool isLastChild = i == collectedFlexItemsValues.endOfLineIndex - 1;\n+    // remove the gap if it is the last element of the line\n+    if (isLastChild) {\n+        betweenMainDim -= gap;\n+    }",
        "comment_created_at": "2022-12-09T14:20:41+00:00",
        "comment_author": "jacobp100",
        "comment_body": "Ah yeah - that makes sense. Maybe [here](https://github.com/facebook/yoga/blob/60dd791dd8d56e0fdb978ac3357030c200a2c130/yoga/Yoga.cpp#L2574) (before the child is moved) we could add:-\r\n\r\n```c\r\nif (i != 0) {\r\n  collectedFlexItemsValues.mainDim += betweenMainDim;\r\n}\r\n```\r\n\r\nThen remove that from the `mainDim` calculations below\r\n\r\n[There's an issue](https://github.com/facebook/yoga/pull/1014) around this code where `auto` margins turn negative. But assuming the fix gets merged, we need to be careful that if you have a gap and an auto margin, the gap is still applied. I.e. these two views should never be less than 10px apart\r\n\r\n```\r\n<View style={{ flexDirection: 'row', gap: 10 }}>\r\n  <View style={{ marginRight: 'auto' }} />\r\n  <View />\r\n</View>\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1044525738",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1188,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "1044363811",
        "commented_code": "@@ -2540,6 +2540,11 @@ static void YGJustifyMainAxis(\n     const YGNodeRef child = node->getChild(i);\n     const YGStyle& childStyle = child->getStyle();\n     const YGLayout childLayout = child->getLayout();\n+    const bool isLastChild = i == collectedFlexItemsValues.endOfLineIndex - 1;\n+    // remove the gap if it is the last element of the line\n+    if (isLastChild) {\n+        betweenMainDim -= gap;\n+    }",
        "comment_created_at": "2022-12-09T14:48:45+00:00",
        "comment_author": "intergalacticspacehighway",
        "comment_body": "okay, yeah. Just wanted to try a simple fix without touching too many things \ud83d\ude05. Should be easier to make changes once we have tests running. Do you think there's an issue with the approach of removing the gap for the last item? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1044564998",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1188,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "1044363811",
        "commented_code": "@@ -2540,6 +2540,11 @@ static void YGJustifyMainAxis(\n     const YGNodeRef child = node->getChild(i);\n     const YGStyle& childStyle = child->getStyle();\n     const YGLayout childLayout = child->getLayout();\n+    const bool isLastChild = i == collectedFlexItemsValues.endOfLineIndex - 1;\n+    // remove the gap if it is the last element of the line\n+    if (isLastChild) {\n+        betweenMainDim -= gap;\n+    }",
        "comment_created_at": "2022-12-09T15:25:47+00:00",
        "comment_author": "jacobp100",
        "comment_body": "Just added https://github.com/facebook/yoga/pull/1189 - I really just wanna see what happens after running on CI\r\n\r\nDid the stuff I said about the how we were always over-shooting the `mainDim` make sense? Assuming it doesn't cause extra issues to fix, it'd be nice to fix so we're less likely to see regressions later",
        "pr_file_module": null
      },
      {
        "comment_id": "1047301849",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1188,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "1044363811",
        "commented_code": "@@ -2540,6 +2540,11 @@ static void YGJustifyMainAxis(\n     const YGNodeRef child = node->getChild(i);\n     const YGStyle& childStyle = child->getStyle();\n     const YGLayout childLayout = child->getLayout();\n+    const bool isLastChild = i == collectedFlexItemsValues.endOfLineIndex - 1;\n+    // remove the gap if it is the last element of the line\n+    if (isLastChild) {\n+        betweenMainDim -= gap;\n+    }",
        "comment_created_at": "2022-12-13T15:21:26+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "Reading through this, is this a correct summary?\r\n1. `betweenMainDim` controls space between items (both gap, and justifications which add space between children)\r\n2. We iterate through the children in the line, adding its dimension and gap to the line dimensions (then padding/border at the end)\r\n   1. This is wrong with gap, since it will add extra trailing dimension\r\n   2. We think the same issue might apply to justification adding extra to line dimensions (it adds for all children), but there is only free space when the parent has a defined size, in which case we may not use the calculated dimension to begin with\r\n3. So, the question is whether to change the summing logic specific to gap, or to also apply to the existing justification code as well\r\n\r\nWe can run through an example, where a container has size 100px, we have two children of size 25px, no gap, and `YGJustifySpaceEvenly`. We would expect spacing to take a total of 50px extra in total then. Per-item, we would add `leadingMainDim` and `betweenMainDim` of the following:\r\n\r\n```cpp\r\n        // leadingMainDim = 50 / (2 + 1) = 16.67\r\n        leadingMainDim = collectedFlexItemsValues.remainingFreeSpace /\r\n            (collectedFlexItemsValues.itemsOnLine + 1);\r\n        // betweenMainDim = 16.67\r\n        betweenMainDim += leadingMainDim;\r\n        // combined: 33.33 px/item (66.66px of spacing total)\r\n```\r\n\r\nSo I am seeing the same issue where we are over-counting `betweenMainDim` during justification.\r\n\r\nSeparately, if we have `YGJustifyCenter`, we undercount by quite a bit since we only sum the leading gap, but never the trailing gap.\r\n\r\nIn the block @intergalacticspacehighway mentions, we position the item based on the accumulated offset, and the leading space for the current item. So, positioning the second item correctly would assume `betweenMainDim`, has already been added. ~So I agree that omitting it for the first child does not seem to be correct.~ edit: I see, we are adding to the main dim before positioning in the proposed change.\r\n\r\nI think fixing up this logic to be more consistently correct would be worth doing, but also I think it might be a little risky unless we can super-conclusively determine the incorrect `collectedFlexItemsValues.mainDim` would never come into place during justification. And given the current timing around the holidays, I would be weary to make that sort of change at this specific moment.\r\n\r\nSo, I think instead, we should stick with the fix @intergalacticspacehighway has for now of not adding gap to `betweenMainDim` when we are the last item. Though, as a matter of style, I agree with the note in the description that mutating the value is a bit unclear. So I think it would be better to instead have separate variables for justification gap, and gap derived gap, so that we could declare `betweenMainDim` once in the inner scope.",
        "pr_file_module": null
      },
      {
        "comment_id": "1047333195",
        "repo_full_name": "facebook/yoga",
        "pr_number": 1188,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "1044363811",
        "commented_code": "@@ -2540,6 +2540,11 @@ static void YGJustifyMainAxis(\n     const YGNodeRef child = node->getChild(i);\n     const YGStyle& childStyle = child->getStyle();\n     const YGLayout childLayout = child->getLayout();\n+    const bool isLastChild = i == collectedFlexItemsValues.endOfLineIndex - 1;\n+    // remove the gap if it is the last element of the line\n+    if (isLastChild) {\n+        betweenMainDim -= gap;\n+    }",
        "comment_created_at": "2022-12-13T15:40:23+00:00",
        "comment_author": "jacobp100",
        "comment_body": "@NickGerleman My understanding is:-\r\n\r\nPreviously, `betweenMainDim` acted as a gap, but was **only** used for justification purposes\r\n\r\nWe were adding we were adding a total `betweenMainDim * children.length` to `mainDim` - but since this is a distance between children, we should add a total `betweenMainDim * (children.length - 1)`.\r\n\r\nI believe this was never noticed this bug because for justification to do anything - meaning `betweenMainDim != 0` - the container needs an explicit main axis size. So even though `mainDim` was too big, it was just ignored\r\n\r\nWhen the container did not have an explicit axis size, `betweenMainDim` was `0`, so adding one too many `betweenMainDim`s, did not have an effect\r\n\r\nThe `gap` property leveraged `betweenMainDim`, so now in the case that a container does not have an explicit axis size, it's possible for `betweenMainDim` to be greater than zero, and suddenly it _does_ matter\r\n\r\nI think the real fix is to not include `betweenMainDim` for the last child at all - not just subtract the `gap` portion of `betweenMainDim` for the last child\r\n\r\nHope that makes sense \ud83d\ude05",
        "pr_file_module": null
      }
    ]
  }
]