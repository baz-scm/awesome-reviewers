[
  {
    "discussion_id": "251569422",
    "pr_number": 852,
    "pr_file": "yoga/Yoga.cpp",
    "created_at": "2019-01-28T19:55:09+00:00",
    "commented_code": "}\n \n YGConfigRef YGConfigGetDefault() {\n-  static YGConfigRef defaultConfig = YGConfigNew();\n+  YGConfigRef defaultConfig = YGConfigNew();",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "251569422",
        "repo_full_name": "facebook/yoga",
        "pr_number": 852,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "251569422",
        "commented_code": "@@ -224,7 +224,7 @@ WIN_EXPORT YGNodeRef YGNodeNewWithConfig(const YGConfigRef config) {\n }\n \n YGConfigRef YGConfigGetDefault() {\n-  static YGConfigRef defaultConfig = YGConfigNew();\n+  YGConfigRef defaultConfig = YGConfigNew();",
        "comment_created_at": "2019-01-28T19:55:09+00:00",
        "comment_author": "davidaurelio",
        "comment_body": "Is this to avoid the \u201cleak\u201d? This is a statically constructed instance that will live until the process exits, which seems perfectly fine. Could you explain which problem you are trying to solve?",
        "pr_file_module": null
      },
      {
        "comment_id": "262344100",
        "repo_full_name": "facebook/yoga",
        "pr_number": 852,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "251569422",
        "commented_code": "@@ -224,7 +224,7 @@ WIN_EXPORT YGNodeRef YGNodeNewWithConfig(const YGConfigRef config) {\n }\n \n YGConfigRef YGConfigGetDefault() {\n-  static YGConfigRef defaultConfig = YGConfigNew();\n+  YGConfigRef defaultConfig = YGConfigNew();",
        "comment_created_at": "2019-03-05T04:31:54+00:00",
        "comment_author": "tcdat96",
        "comment_body": "This is actually my misunderstanding about how static variables work. This was marked by CppUTest as a memory leak but it appears to be only a false alarm. I'll revert this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "228237418",
    "pr_number": 823,
    "pr_file": "yoga/Yoga.cpp",
    "created_at": "2018-10-25T16:05:28+00:00",
    "commented_code": "}\n \n static void YGZeroOutLayoutRecursivly(const YGNodeRef node) {\n-  memset(&(node->getLayout()), 0, sizeof(YGLayout));\n+  memset(static_cast<void*>(&(node->getLayout())), 0, sizeof(YGLayout));",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "228237418",
        "repo_full_name": "facebook/yoga",
        "pr_number": 823,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "228237418",
        "commented_code": "@@ -1851,7 +1851,7 @@ static bool YGNodeFixedSizeSetMeasuredDimensions(\n }\n \n static void YGZeroOutLayoutRecursivly(const YGNodeRef node) {\n-  memset(&(node->getLayout()), 0, sizeof(YGLayout));\n+  memset(static_cast<void*>(&(node->getLayout())), 0, sizeof(YGLayout));",
        "comment_created_at": "2018-10-25T16:05:28+00:00",
        "comment_author": "davidaurelio",
        "comment_body": "while you are at it, please leave the place in a better state. `static_cast<>` sidesteps the type system where we can just leverage default constructor + assignment.\r\n\r\n```suggestion\r\n  node->getLayout() = {};\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "228416850",
        "repo_full_name": "facebook/yoga",
        "pr_number": 823,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "228237418",
        "commented_code": "@@ -1851,7 +1851,7 @@ static bool YGNodeFixedSizeSetMeasuredDimensions(\n }\n \n static void YGZeroOutLayoutRecursivly(const YGNodeRef node) {\n-  memset(&(node->getLayout()), 0, sizeof(YGLayout));\n+  memset(static_cast<void*>(&(node->getLayout())), 0, sizeof(YGLayout));",
        "comment_created_at": "2018-10-26T06:26:47+00:00",
        "comment_author": "hooddanielc",
        "comment_body": ":+1:  I agree this is much better. When doing so, test results break because `YGLayout::YGLayout()` initializes `dimensions({YGUndefined, YGUndefined})` instead of `dimensions({0, 0})`. After setting dimensions to zero after assignment, tests are passing.\r\n\r\n```suggestion\r\n  node->getLayout() = {};\r\n  node->setLayoutDimension(0, 0);\r\n  node->setLayoutDimension(0, 1);\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "228453122",
        "repo_full_name": "facebook/yoga",
        "pr_number": 823,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "228237418",
        "commented_code": "@@ -1851,7 +1851,7 @@ static bool YGNodeFixedSizeSetMeasuredDimensions(\n }\n \n static void YGZeroOutLayoutRecursivly(const YGNodeRef node) {\n-  memset(&(node->getLayout()), 0, sizeof(YGLayout));\n+  memset(static_cast<void*>(&(node->getLayout())), 0, sizeof(YGLayout));",
        "comment_created_at": "2018-10-26T08:59:00+00:00",
        "comment_author": "woehrl01",
        "comment_body": "@hooddanielc, @davidaurelio  If the test results brake I think this looks like a bug of the constructor of `YGLayout` mustn't this be initialized to `{0,0}` per default in the ctor ?",
        "pr_file_module": null
      },
      {
        "comment_id": "228692637",
        "repo_full_name": "facebook/yoga",
        "pr_number": 823,
        "pr_file": "yoga/Yoga.cpp",
        "discussion_id": "228237418",
        "commented_code": "@@ -1851,7 +1851,7 @@ static bool YGNodeFixedSizeSetMeasuredDimensions(\n }\n \n static void YGZeroOutLayoutRecursivly(const YGNodeRef node) {\n-  memset(&(node->getLayout()), 0, sizeof(YGLayout));\n+  memset(static_cast<void*>(&(node->getLayout())), 0, sizeof(YGLayout));",
        "comment_created_at": "2018-10-27T00:04:28+00:00",
        "comment_author": "hooddanielc",
        "comment_body": "@woehrl01 That is what I thought at first, then I found some history in comments above `YGUndefined` definition.\r\n\r\n```\r\n/** Large positive number signifies that the property(float) is undefined.\r\n *Earlier we used to have YGundefined as NAN, but the downside of this is that\r\n *we can't use -ffast-math compiler flag as it assumes all floating-point\r\n *calculation involve and result into finite numbers. For more information\r\n *regarding -ffast-math compiler flag in clang, have a look at\r\n *https://clang.llvm.org/docs/UsersManual.html#cmdoption-ffast-math\r\n **/\r\n#define YGUndefined 10E20F\r\n```\r\n\r\nI think the alternatives of using default constructor or changing the constructor may be a breaking change. Could we add a new constructor to `YGLayout`? Does the C++ delegate constructor allow us to override part of that constructors initialization list?",
        "pr_file_module": null
      }
    ]
  }
]