[
  {
    "discussion_id": "103805559",
    "pr_number": 448,
    "pr_file": "yoga/Yoga.c",
    "created_at": "2017-03-01T22:24:58+00:00",
    "commented_code": "}\n }\n \n+static void YGNodeMarkDirtyRecursive(const YGNodeRef node) {",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "103805559",
        "repo_full_name": "facebook/yoga",
        "pr_number": 448,
        "pr_file": "yoga/Yoga.c",
        "discussion_id": "103805559",
        "commented_code": "@@ -379,6 +379,14 @@ static void YGNodeMarkDirtyInternal(const YGNodeRef node) {\n   }\n }\n \n+static void YGNodeMarkDirtyRecursive(const YGNodeRef node) {",
        "comment_created_at": "2017-03-01T22:24:58+00:00",
        "comment_author": "emilsjolander",
        "comment_body": "Sorry for the churn on this. I should have looked closer. `YGNodeMarkDirtyInternal` is already recursive so this actually doesn't make much sense ^^ You previous name is better suited \ud83d\udc4d ",
        "pr_file_module": null
      },
      {
        "comment_id": "103807032",
        "repo_full_name": "facebook/yoga",
        "pr_number": 448,
        "pr_file": "yoga/Yoga.c",
        "discussion_id": "103805559",
        "commented_code": "@@ -379,6 +379,14 @@ static void YGNodeMarkDirtyInternal(const YGNodeRef node) {\n   }\n }\n \n+static void YGNodeMarkDirtyRecursive(const YGNodeRef node) {",
        "comment_created_at": "2017-03-01T22:32:17+00:00",
        "comment_author": "woehrl01",
        "comment_body": "I renamed it back, and also changed that it only affects the children and not the node itself, so we won't have the confusion with ```YGNodeMarkDirtyInternal```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "92973793",
    "pr_number": 258,
    "pr_file": "yoga/Yoga.c",
    "created_at": "2016-12-19T06:27:26+00:00",
    "commented_code": "}\n \n   if (edge == YGEdgeStart || edge == YGEdgeEnd) {\n-    return YGUndefined;\n+    YGValue result;\n+    result.value = YGUndefined;\n+    result.defined = false;\n+    result.unit = YGUnitPixel;\n+    return result;\n   }\n \n-  return defaultValue;\n+  YGValue result;\n+  result.value = defaultValue;\n+  result.defined = (defaultValue < 0 || defaultValue >= 0); /* is faster than a nan function call and enough at this point */\n+  result.unit = YGUnitPixel;\n+  return result;\n+}\n+\n+static inline float YGValueToFloat(const YGValue unit, const float parentSize) {",
    "repo_full_name": "facebook/yoga",
    "discussion_comments": [
      {
        "comment_id": "92973793",
        "repo_full_name": "facebook/yoga",
        "pr_number": 258,
        "pr_file": "yoga/Yoga.c",
        "discussion_id": "92973793",
        "commented_code": "@@ -179,10 +179,26 @@ static inline float YGComputedEdgeValue(const float edges[YGEdgeCount],\n   }\n \n   if (edge == YGEdgeStart || edge == YGEdgeEnd) {\n-    return YGUndefined;\n+    YGValue result;\n+    result.value = YGUndefined;\n+    result.defined = false;\n+    result.unit = YGUnitPixel;\n+    return result;\n   }\n \n-  return defaultValue;\n+  YGValue result;\n+  result.value = defaultValue;\n+  result.defined = (defaultValue < 0 || defaultValue >= 0); /* is faster than a nan function call and enough at this point */\n+  result.unit = YGUnitPixel;\n+  return result;\n+}\n+\n+static inline float YGValueToFloat(const YGValue unit, const float parentSize) {",
        "comment_created_at": "2016-12-19T06:27:26+00:00",
        "comment_author": "emilsjolander",
        "comment_body": "`YGValueToFloat` is not very descriptive of what the function does. I would prefer `YGValueResolve` or something similar. What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "92976705",
        "repo_full_name": "facebook/yoga",
        "pr_number": 258,
        "pr_file": "yoga/Yoga.c",
        "discussion_id": "92973793",
        "commented_code": "@@ -179,10 +179,26 @@ static inline float YGComputedEdgeValue(const float edges[YGEdgeCount],\n   }\n \n   if (edge == YGEdgeStart || edge == YGEdgeEnd) {\n-    return YGUndefined;\n+    YGValue result;\n+    result.value = YGUndefined;\n+    result.defined = false;\n+    result.unit = YGUnitPixel;\n+    return result;\n   }\n \n-  return defaultValue;\n+  YGValue result;\n+  result.value = defaultValue;\n+  result.defined = (defaultValue < 0 || defaultValue >= 0); /* is faster than a nan function call and enough at this point */\n+  result.unit = YGUnitPixel;\n+  return result;\n+}\n+\n+static inline float YGValueToFloat(const YGValue unit, const float parentSize) {",
        "comment_created_at": "2016-12-19T06:58:19+00:00",
        "comment_author": "woehrl01",
        "comment_body": "sounds good!",
        "pr_file_module": null
      }
    ]
  }
]