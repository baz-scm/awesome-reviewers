[
  {
    "discussion_id": "2182106123",
    "pr_number": 29145,
    "pr_file": "crates/remote/src/ssh_session.rs",
    "created_at": "2025-07-03T07:49:27+00:00",
    "commented_code": "}\n \n impl SshSocket {\n+    #[cfg(not(target_os = \"windows\"))]\n+    fn new(options: SshConnectionOptions, socket_path: PathBuf) -> Result<Self> {\n+        Ok(Self {\n+            connection_options: options,\n+            socket_path,\n+        })\n+    }\n+\n+    #[cfg(target_os = \"windows\")]\n+    fn new(options: SshConnectionOptions, temp_dir: &TempDir, secrete: String) -> Result<Self> {\n+        let pwsh_script_path = temp_dir.path().join(\"askpass.ps1\");\n+        let pwsh_script_content = format!(\n+            r#\"\n+            $ErrorActionPreference = 'Stop';\n+            Write-Host \"{secrete}\"\n+            \"#,\n+            secrete = secrete\n+        );\n+        std::fs::write(&pwsh_script_path, pwsh_script_content)?;\n+        let askpass_content = format!(",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2182106123",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29145,
        "pr_file": "crates/remote/src/ssh_session.rs",
        "discussion_id": "2182106123",
        "commented_code": "@@ -338,6 +347,35 @@ pub trait SshClientDelegate: Send + Sync {\n }\n \n impl SshSocket {\n+    #[cfg(not(target_os = \"windows\"))]\n+    fn new(options: SshConnectionOptions, socket_path: PathBuf) -> Result<Self> {\n+        Ok(Self {\n+            connection_options: options,\n+            socket_path,\n+        })\n+    }\n+\n+    #[cfg(target_os = \"windows\")]\n+    fn new(options: SshConnectionOptions, temp_dir: &TempDir, secrete: String) -> Result<Self> {\n+        let pwsh_script_path = temp_dir.path().join(\"askpass.ps1\");\n+        let pwsh_script_content = format!(\n+            r#\"\n+            $ErrorActionPreference = 'Stop';\n+            Write-Host \"{secrete}\"\n+            \"#,\n+            secrete = secrete\n+        );\n+        std::fs::write(&pwsh_script_path, pwsh_script_content)?;\n+        let askpass_content = format!(",
        "comment_created_at": "2025-07-03T07:49:27+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "It's not just the content but some way to launch askpass it seems?\nLet's name it differently to ensure we do not pass any passwords or any other sensitive things, at least on the semantics, naming level.\n\n```suggestion\n        let askpass_script = format!(\n```\n\nAlso later, we store this into `askpass` field which seems worth of having the same name.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2135165850",
    "pr_number": 31390,
    "pr_file": "crates/editor/src/editor_settings.rs",
    "created_at": "2025-06-09T07:06:42+00:00",
    "commented_code": "self.show != ShowMinimap::Never\n     }\n \n+    pub fn on_active_pane(&self) -> bool {",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2135165850",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 31390,
        "pr_file": "crates/editor/src/editor_settings.rs",
        "discussion_id": "2135165850",
        "commented_code": "@@ -139,6 +140,10 @@ impl Minimap {\n         self.show != ShowMinimap::Never\n     }\n \n+    pub fn on_active_pane(&self) -> bool {",
        "comment_created_at": "2025-06-09T07:06:42+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "1. This method is used only once, so let's inline it instead.\r\n\r\n2. I like how `active` word is used here though, let's rename `FocusedPane` into `Active???`\r\nAnd let's uniformy state what the PR tries to do: here, it uses `Pane` but the title of the PR is \r\n> Add setting for minimap on active buffer only\r\n\r\nI think it's the latter based on the video and the discussion, so we can use\r\n\r\n`MinimapDisplayScope::ActivePane`\r\n\r\nBut then, `MinimapDisplayScope` is also wordy, can we do `Display` or `DisplayIn` or similar?\r\n\r\nAs a last naming thought, what if we use `editor` instead of `pane` in the new code?\r\nThen it will be `DisplayIn::AllEditors | ActiveEditor` and users won't have to guess what a `pane` is, is it a `panel` or not.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2135253761",
    "pr_number": 27556,
    "pr_file": "crates/theme/src/theme.rs",
    "created_at": "2025-06-09T08:06:59+00:00",
    "commented_code": "&self.styles.colors\n     }\n \n+    /// Returns the [`SemanticTheme`] for the semantic tokens theme.\n+    #[inline(always)]\n+    pub fn tokens(&self) -> &Arc<SemanticTheme> {",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2135253761",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 27556,
        "pr_file": "crates/theme/src/theme.rs",
        "discussion_id": "2135253761",
        "commented_code": "@@ -302,6 +347,12 @@ impl Theme {\n         &self.styles.colors\n     }\n \n+    /// Returns the [`SemanticTheme`] for the semantic tokens theme.\n+    #[inline(always)]\n+    pub fn tokens(&self) -> &Arc<SemanticTheme> {",
        "comment_created_at": "2025-06-09T08:06:59+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "```suggestion\r\n    pub fn semantic_tokens(&self) -> &Arc<SemanticTheme> {\r\n```\r\n\r\n`tokens` is quite broad, esp. in a text editor domain, so let's specify which tokens are these, as LSP case is relatively niche.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2045488349",
    "pr_number": 28808,
    "pr_file": "crates/agent/src/assistant_panel.rs",
    "created_at": "2025-04-15T20:59:26+00:00",
    "commented_code": "OpenActiveThreadAsMarkdown, OpenAgentDiff, OpenHistory, ThreadEvent, ToggleContextPicker,\n };\n \n+const ASSISTANT_PANEL_KEY: &str = \"assistant_panel\";",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2045488349",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 28808,
        "pr_file": "crates/agent/src/assistant_panel.rs",
        "discussion_id": "2045488349",
        "commented_code": "@@ -48,6 +51,13 @@ use crate::{\n     OpenActiveThreadAsMarkdown, OpenAgentDiff, OpenHistory, ThreadEvent, ToggleContextPicker,\n };\n \n+const ASSISTANT_PANEL_KEY: &str = \"assistant_panel\";",
        "comment_created_at": "2025-04-15T20:59:26+00:00",
        "comment_author": "maxdeviant",
        "comment_body": "We should call this \"agent_panel\":\r\n\r\n```suggestion\r\nconst AGENT_PANEL_KEY: &str = \"agent_panel\";\r\n```\r\n\r\nWe haven't updated some of our existing naming yet to prevent churn, but for new code we should use \"Agent Panel\" everywhere.",
        "pr_file_module": null
      },
      {
        "comment_id": "2045607800",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 28808,
        "pr_file": "crates/agent/src/assistant_panel.rs",
        "discussion_id": "2045488349",
        "commented_code": "@@ -48,6 +51,13 @@ use crate::{\n     OpenActiveThreadAsMarkdown, OpenAgentDiff, OpenHistory, ThreadEvent, ToggleContextPicker,\n };\n \n+const ASSISTANT_PANEL_KEY: &str = \"assistant_panel\";",
        "comment_created_at": "2025-04-15T22:06:11+00:00",
        "comment_author": "imumesh18",
        "comment_body": "Fixed this",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2008986063",
    "pr_number": 26741,
    "pr_file": "crates/languages/src/python.rs",
    "created_at": "2025-03-23T01:11:42+00:00",
    "commented_code": "let mut toolchains: Vec<_> = toolchains\n             .into_iter()\n             .filter_map(|toolchain| {\n-                let name = if let Some(version) = &toolchain.version {\n-                    format!(\"Python {version} ({:?})\", toolchain.kind?)\n-                } else {\n-                    format!(\"{:?}\", toolchain.kind?)\n+                let mut name = String::from(\"Python\");\n+                if let Some(ref version) = toolchain.version {\n+                    name.push(' ');\n+                    name.push_str(&version);\n                 }\n-                .into();\n+\n+                let name_and_kind = match (&toolchain.name, &toolchain.kind) {\n+                    (Some(name), Some(kind)) => Some(format!(\"({name}; {:?})\", kind)),",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2008986063",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26741,
        "pr_file": "crates/languages/src/python.rs",
        "discussion_id": "2008986063",
        "commented_code": "@@ -629,14 +629,26 @@ impl ToolchainLister for PythonToolchainProvider {\n         let mut toolchains: Vec<_> = toolchains\n             .into_iter()\n             .filter_map(|toolchain| {\n-                let name = if let Some(version) = &toolchain.version {\n-                    format!(\"Python {version} ({:?})\", toolchain.kind?)\n-                } else {\n-                    format!(\"{:?}\", toolchain.kind?)\n+                let mut name = String::from(\"Python\");\n+                if let Some(ref version) = toolchain.version {\n+                    name.push(' ');\n+                    name.push_str(&version);\n                 }\n-                .into();\n+\n+                let name_and_kind = match (&toolchain.name, &toolchain.kind) {\n+                    (Some(name), Some(kind)) => Some(format!(\"({name}; {:?})\", kind)),",
        "comment_created_at": "2025-03-23T01:11:42+00:00",
        "comment_author": "osiewicz",
        "comment_body": "Could we add a helper to get a human readable kind label? Relying on debug impl for pretty printing is far from ideal.",
        "pr_file_module": null
      },
      {
        "comment_id": "2014398160",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26741,
        "pr_file": "crates/languages/src/python.rs",
        "discussion_id": "2008986063",
        "commented_code": "@@ -629,14 +629,26 @@ impl ToolchainLister for PythonToolchainProvider {\n         let mut toolchains: Vec<_> = toolchains\n             .into_iter()\n             .filter_map(|toolchain| {\n-                let name = if let Some(version) = &toolchain.version {\n-                    format!(\"Python {version} ({:?})\", toolchain.kind?)\n-                } else {\n-                    format!(\"{:?}\", toolchain.kind?)\n+                let mut name = String::from(\"Python\");\n+                if let Some(ref version) = toolchain.version {\n+                    name.push(' ');\n+                    name.push_str(&version);\n                 }\n-                .into();\n+\n+                let name_and_kind = match (&toolchain.name, &toolchain.kind) {\n+                    (Some(name), Some(kind)) => Some(format!(\"({name}; {:?})\", kind)),",
        "comment_created_at": "2025-03-26T15:10:20+00:00",
        "comment_author": "elprans",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  }
]