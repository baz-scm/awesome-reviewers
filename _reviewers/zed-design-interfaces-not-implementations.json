[
  {
    "discussion_id": "2167873278",
    "pr_number": 29145,
    "pr_file": "crates/askpass/src/askpass.rs",
    "created_at": "2025-06-26T00:49:37+00:00",
    "commented_code": "exit(1);\n     }\n }\n+\n #[cfg(not(unix))]\n-pub fn main(_socket: &str) {}\n+pub fn main(socket: &str) {\n+    use std::io::{self, Read, Write};\n+    use std::process::exit;\n+\n+    use windows_net::UnixStream;",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2167873278",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29145,
        "pr_file": "crates/askpass/src/askpass.rs",
        "discussion_id": "2167873278",
        "commented_code": "@@ -202,28 +198,177 @@ pub fn main(socket: &str) {\n         exit(1);\n     }\n }\n+\n #[cfg(not(unix))]\n-pub fn main(_socket: &str) {}\n+pub fn main(socket: &str) {\n+    use std::io::{self, Read, Write};\n+    use std::process::exit;\n+\n+    use windows_net::UnixStream;",
        "comment_created_at": "2025-06-26T00:49:37+00:00",
        "comment_author": "mikayla-maki",
        "comment_body": "Can we merge this main function with the one above, and maybe change the `windows_net` crate to be a more general `net` crate, that exposes both `windows_net::UnixStream` and `std::os::unix::net::UnixStream` under the same API? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2167874314",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29145,
        "pr_file": "crates/askpass/src/askpass.rs",
        "discussion_id": "2167873278",
        "commented_code": "@@ -202,28 +198,177 @@ pub fn main(socket: &str) {\n         exit(1);\n     }\n }\n+\n #[cfg(not(unix))]\n-pub fn main(_socket: &str) {}\n+pub fn main(socket: &str) {\n+    use std::io::{self, Read, Write};\n+    use std::process::exit;\n+\n+    use windows_net::UnixStream;",
        "comment_created_at": "2025-06-26T00:50:42+00:00",
        "comment_author": "mikayla-maki",
        "comment_body": "The one difference, the new line check in windows versus the null byte check in unix, should be pretty easy to bracket with a `#cfg(windows)`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160115099",
    "pr_number": 33165,
    "pr_file": "crates/node_runtime/src/node_runtime.rs",
    "created_at": "2025-06-21T18:40:19+00:00",
    "commented_code": ".map(|(name, version)| format!(\"{name}@{version}\"))\n             .collect();\n \n-        let mut arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n-        arguments.extend_from_slice(&[\n-            \"--save-exact\",\n-            \"--fetch-retry-mintimeout\",\n-            \"2000\",\n-            \"--fetch-retry-maxtimeout\",\n-            \"5000\",\n-            \"--fetch-timeout\",\n-            \"5000\",\n-        ]);\n-\n-        // This is also wrong because the directory is wrong.\n-        self.run_npm_subcommand(directory, \"install\", &arguments)\n-            .await?;\n+        let instance = self.instance().await;\n+        match instance.runtime_type() {\n+            RuntimeType::Node => {\n+                let mut arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n+                arguments.extend_from_slice(&[\n+                    \"--save-exact\",\n+                    \"--fetch-retry-mintimeout\",\n+                    \"2000\",\n+                    \"--fetch-retry-maxtimeout\",\n+                    \"5000\",\n+                    \"--fetch-timeout\",\n+                    \"5000\",\n+                ]);\n+                self.run_npm_subcommand(directory, \"install\", &arguments)\n+                    .await?;\n+            }\n+            RuntimeType::Bun => {\n+                // For Bun, use 'add' instead of 'install'\n+                let arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n+                self.run_npm_subcommand(directory, \"add\", &arguments)",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2160115099",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 33165,
        "pr_file": "crates/node_runtime/src/node_runtime.rs",
        "discussion_id": "2160115099",
        "commented_code": "@@ -264,20 +321,29 @@ impl NodeRuntime {\n             .map(|(name, version)| format!(\"{name}@{version}\"))\n             .collect();\n \n-        let mut arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n-        arguments.extend_from_slice(&[\n-            \"--save-exact\",\n-            \"--fetch-retry-mintimeout\",\n-            \"2000\",\n-            \"--fetch-retry-maxtimeout\",\n-            \"5000\",\n-            \"--fetch-timeout\",\n-            \"5000\",\n-        ]);\n-\n-        // This is also wrong because the directory is wrong.\n-        self.run_npm_subcommand(directory, \"install\", &arguments)\n-            .await?;\n+        let instance = self.instance().await;\n+        match instance.runtime_type() {\n+            RuntimeType::Node => {\n+                let mut arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n+                arguments.extend_from_slice(&[\n+                    \"--save-exact\",\n+                    \"--fetch-retry-mintimeout\",\n+                    \"2000\",\n+                    \"--fetch-retry-maxtimeout\",\n+                    \"5000\",\n+                    \"--fetch-timeout\",\n+                    \"5000\",\n+                ]);\n+                self.run_npm_subcommand(directory, \"install\", &arguments)\n+                    .await?;\n+            }\n+            RuntimeType::Bun => {\n+                // For Bun, use 'add' instead of 'install'\n+                let arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n+                self.run_npm_subcommand(directory, \"add\", &arguments)",
        "comment_created_at": "2025-06-21T18:40:19+00:00",
        "comment_author": "mattfbacon",
        "comment_body": "I am asking myself, since you have logic in `run_npm_subcommand` to translate `install` to `add`, why is this necessary here as well?",
        "pr_file_module": null
      },
      {
        "comment_id": "2160184163",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 33165,
        "pr_file": "crates/node_runtime/src/node_runtime.rs",
        "discussion_id": "2160115099",
        "commented_code": "@@ -264,20 +321,29 @@ impl NodeRuntime {\n             .map(|(name, version)| format!(\"{name}@{version}\"))\n             .collect();\n \n-        let mut arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n-        arguments.extend_from_slice(&[\n-            \"--save-exact\",\n-            \"--fetch-retry-mintimeout\",\n-            \"2000\",\n-            \"--fetch-retry-maxtimeout\",\n-            \"5000\",\n-            \"--fetch-timeout\",\n-            \"5000\",\n-        ]);\n-\n-        // This is also wrong because the directory is wrong.\n-        self.run_npm_subcommand(directory, \"install\", &arguments)\n-            .await?;\n+        let instance = self.instance().await;\n+        match instance.runtime_type() {\n+            RuntimeType::Node => {\n+                let mut arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n+                arguments.extend_from_slice(&[\n+                    \"--save-exact\",\n+                    \"--fetch-retry-mintimeout\",\n+                    \"2000\",\n+                    \"--fetch-retry-maxtimeout\",\n+                    \"5000\",\n+                    \"--fetch-timeout\",\n+                    \"5000\",\n+                ]);\n+                self.run_npm_subcommand(directory, \"install\", &arguments)\n+                    .await?;\n+            }\n+            RuntimeType::Bun => {\n+                // For Bun, use 'add' instead of 'install'\n+                let arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n+                self.run_npm_subcommand(directory, \"add\", &arguments)",
        "comment_created_at": "2025-06-22T00:05:59+00:00",
        "comment_author": "versecafe",
        "comment_body": "I had a seperate branch trying this out it might make more sense to change to from `run_npm_subcommand` to a standard interface for `install` & `execute` *(ie npx, bunx)*",
        "pr_file_module": null
      },
      {
        "comment_id": "2160289444",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 33165,
        "pr_file": "crates/node_runtime/src/node_runtime.rs",
        "discussion_id": "2160115099",
        "commented_code": "@@ -264,20 +321,29 @@ impl NodeRuntime {\n             .map(|(name, version)| format!(\"{name}@{version}\"))\n             .collect();\n \n-        let mut arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n-        arguments.extend_from_slice(&[\n-            \"--save-exact\",\n-            \"--fetch-retry-mintimeout\",\n-            \"2000\",\n-            \"--fetch-retry-maxtimeout\",\n-            \"5000\",\n-            \"--fetch-timeout\",\n-            \"5000\",\n-        ]);\n-\n-        // This is also wrong because the directory is wrong.\n-        self.run_npm_subcommand(directory, \"install\", &arguments)\n-            .await?;\n+        let instance = self.instance().await;\n+        match instance.runtime_type() {\n+            RuntimeType::Node => {\n+                let mut arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n+                arguments.extend_from_slice(&[\n+                    \"--save-exact\",\n+                    \"--fetch-retry-mintimeout\",\n+                    \"2000\",\n+                    \"--fetch-retry-maxtimeout\",\n+                    \"5000\",\n+                    \"--fetch-timeout\",\n+                    \"5000\",\n+                ]);\n+                self.run_npm_subcommand(directory, \"install\", &arguments)\n+                    .await?;\n+            }\n+            RuntimeType::Bun => {\n+                // For Bun, use 'add' instead of 'install'\n+                let arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n+                self.run_npm_subcommand(directory, \"add\", &arguments)",
        "comment_created_at": "2025-06-22T10:15:34+00:00",
        "comment_author": "mattfbacon",
        "comment_body": "I agree, the strings are not very rusty",
        "pr_file_module": null
      },
      {
        "comment_id": "2160294047",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 33165,
        "pr_file": "crates/node_runtime/src/node_runtime.rs",
        "discussion_id": "2160115099",
        "commented_code": "@@ -264,20 +321,29 @@ impl NodeRuntime {\n             .map(|(name, version)| format!(\"{name}@{version}\"))\n             .collect();\n \n-        let mut arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n-        arguments.extend_from_slice(&[\n-            \"--save-exact\",\n-            \"--fetch-retry-mintimeout\",\n-            \"2000\",\n-            \"--fetch-retry-maxtimeout\",\n-            \"5000\",\n-            \"--fetch-timeout\",\n-            \"5000\",\n-        ]);\n-\n-        // This is also wrong because the directory is wrong.\n-        self.run_npm_subcommand(directory, \"install\", &arguments)\n-            .await?;\n+        let instance = self.instance().await;\n+        match instance.runtime_type() {\n+            RuntimeType::Node => {\n+                let mut arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n+                arguments.extend_from_slice(&[\n+                    \"--save-exact\",\n+                    \"--fetch-retry-mintimeout\",\n+                    \"2000\",\n+                    \"--fetch-retry-maxtimeout\",\n+                    \"5000\",\n+                    \"--fetch-timeout\",\n+                    \"5000\",\n+                ]);\n+                self.run_npm_subcommand(directory, \"install\", &arguments)\n+                    .await?;\n+            }\n+            RuntimeType::Bun => {\n+                // For Bun, use 'add' instead of 'install'\n+                let arguments: Vec<_> = packages.iter().map(|p| p.as_str()).collect();\n+                self.run_npm_subcommand(directory, \"add\", &arguments)",
        "comment_created_at": "2025-06-22T10:35:24+00:00",
        "comment_author": "nakamorichi",
        "comment_body": "Yes, standard interface would be better. I tried to keep the API change small-impact, so if want to define cleaner interfaces, I feel it will require more changes to various parts of the codebase (I could be mistaken, though).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1999220186",
    "pr_number": 26897,
    "pr_file": "crates/git/src/repository.rs",
    "created_at": "2025-03-17T16:50:31+00:00",
    "commented_code": "fn fetch(\n         &self,\n+        remote_name: String,",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1999220186",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26897,
        "pr_file": "crates/git/src/repository.rs",
        "discussion_id": "1999220186",
        "commented_code": "@@ -891,20 +892,21 @@ impl GitRepository for RealGitRepository {\n \n     fn fetch(\n         &self,\n+        remote_name: String,",
        "comment_created_at": "2025-03-17T16:50:31+00:00",
        "comment_author": "mikayla-maki",
        "comment_body": "We should switch this to a `FetchOptions` enum, which takes a specific remote or `All`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1987330460",
    "pr_number": 26307,
    "pr_file": "crates/gpui/examples/inline_text.rs",
    "created_at": "2025-03-10T13:51:22+00:00",
    "commented_code": "+use gpui::{\n+    div, prelude::*, px, size, App, Application, Bounds, Context, InlineText, Window, WindowBounds,\n+    WindowOptions,\n+};\n+\n+struct RootView;\n+\n+impl Render for RootView {\n+    fn render(&mut self, _window: &mut Window, _cx: &mut Context<Self>) -> impl IntoElement {\n+        div()\n+            .id(\"page\")\n+            .size_full()\n+            .flex()\n+            .flex_col()\n+            .p_2()\n+            .gap_2()\n+            .bg(gpui::black())\n+            .text_color(gpui::white())\n+            .child(\n+                div().border_1().border_color(gpui::red()).child(\n+                    InlineText::new()",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1987330460",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26307,
        "pr_file": "crates/gpui/examples/inline_text.rs",
        "discussion_id": "1987330460",
        "commented_code": "@@ -0,0 +1,107 @@\n+use gpui::{\n+    div, prelude::*, px, size, App, Application, Bounds, Context, InlineText, Window, WindowBounds,\n+    WindowOptions,\n+};\n+\n+struct RootView;\n+\n+impl Render for RootView {\n+    fn render(&mut self, _window: &mut Window, _cx: &mut Context<Self>) -> impl IntoElement {\n+        div()\n+            .id(\"page\")\n+            .size_full()\n+            .flex()\n+            .flex_col()\n+            .p_2()\n+            .gap_2()\n+            .bg(gpui::black())\n+            .text_color(gpui::white())\n+            .child(\n+                div().border_1().border_color(gpui::red()).child(\n+                    InlineText::new()",
        "comment_created_at": "2025-03-10T13:51:22+00:00",
        "comment_author": "huacnlee",
        "comment_body": "Why not use `span`, `Span::new`, like the before `div`.\r\n\r\nAnd the next `add_text`, `add_element`.\r\n\r\nI think we can try to have a better API like this if it's possible:\r\n\r\n```rs\r\ndiv().id(\"paragraph\")\r\n  .child(span(\"This is an inline element ->\"))\r\n  .child(span().w_4().bg(gpui::red()))\r\n  .child(span(\"text\"))\r\n```\r\n\r\nOr at least we can:\r\n\r\n```rs\r\ndiv().id(\"paragraph\")\r\n  .child(\r\n    InlineText::new()\r\n      .child(\"This is an inline element ->\")\r\n      .child(div().w_4().bg(gpui::red()))\r\n      .child(\"text\")\r\n  )\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107132083",
    "pr_number": 30783,
    "pr_file": "crates/recent_projects/src/remote_servers.rs",
    "created_at": "2025-05-26T11:30:35+00:00",
    "commented_code": "Self::Default(DefaultState::new(cx))\n     }\n }\n+/// Initialize app-level registration for OpenRemote\n+pub fn init(cx: &mut App) {\n+    // Register app-level action for OpenRemote\n+    cx.on_action({\n+        move |_: &OpenRemote, cx: &mut App| {\n+            if let Some(app_state) = AppState::try_global(cx).and_then(|weak| weak.upgrade()) {\n+                // If window exists, use it\n+                if let Some(window) = cx.active_window() {\n+                    if let Some(workspace_window) = window.downcast::<Workspace>() {",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2107132083",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 30783,
        "pr_file": "crates/recent_projects/src/remote_servers.rs",
        "discussion_id": "2107132083",
        "commented_code": "@@ -301,6 +301,43 @@ impl Mode {\n         Self::Default(DefaultState::new(cx))\n     }\n }\n+/// Initialize app-level registration for OpenRemote\n+pub fn init(cx: &mut App) {\n+    // Register app-level action for OpenRemote\n+    cx.on_action({\n+        move |_: &OpenRemote, cx: &mut App| {\n+            if let Some(app_state) = AppState::try_global(cx).and_then(|weak| weak.upgrade()) {\n+                // If window exists, use it\n+                if let Some(window) = cx.active_window() {\n+                    if let Some(workspace_window) = window.downcast::<Workspace>() {",
        "comment_created_at": "2025-05-26T11:30:35+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "Let's add a static `fn .. -> Option<Workspace>` for all this extractions, as we might want to invoke things headless for ~10 different actions it seems.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2074841689",
    "pr_number": 29591,
    "pr_file": "crates/client/src/socks.rs",
    "created_at": "2025-05-06T06:59:55+00:00",
    "commented_code": "use http_client::Url;\n use tokio_socks::tcp::{Socks4Stream, Socks5Stream};\n \n+/// Identification to a Socks V4 Proxy\n+struct Socks4Identification<'a> {\n+    user_id: &'a str,\n+}\n+\n+/// Authorization to a Socks V5 Proxy\n+struct Socks5Authorization<'a> {\n+    username: &'a str,\n+    password: &'a str,\n+}\n+\n+/// Socks Proxy Protocol Version\n+///\n+/// V4 allows idenfication using a user_id\n+/// V5 allows authorization using a username and password\n+enum SocksVersion<'a> {\n+    V4(Option<Socks4Identification<'a>>),\n+    V5(Option<Socks5Authorization<'a>>),\n+}\n+\n pub(crate) async fn connect_socks_proxy_stream(\n     proxy: Option<&Url>,\n     rpc_host: (&str, u16),\n ) -> Result<Box<dyn AsyncReadWrite>> {\n-    let stream = match parse_socks_proxy(proxy) {\n-        Some((socks_proxy, SocksVersion::V4)) => {\n-            let stream = Socks4Stream::connect_with_socket(\n-                tokio::net::TcpStream::connect(socks_proxy).await?,\n-                rpc_host,\n-            )\n-            .await\n-            .map_err(|err| anyhow!(\"error connecting to socks {}\", err))?;\n-            Box::new(stream) as Box<dyn AsyncReadWrite>\n+    // Connect directly when there is no proxy",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2074841689",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29591,
        "pr_file": "crates/client/src/socks.rs",
        "discussion_id": "2074841689",
        "commented_code": "@@ -3,59 +3,102 @@ use anyhow::{Result, anyhow};\n use http_client::Url;\n use tokio_socks::tcp::{Socks4Stream, Socks5Stream};\n \n+/// Identification to a Socks V4 Proxy\n+struct Socks4Identification<'a> {\n+    user_id: &'a str,\n+}\n+\n+/// Authorization to a Socks V5 Proxy\n+struct Socks5Authorization<'a> {\n+    username: &'a str,\n+    password: &'a str,\n+}\n+\n+/// Socks Proxy Protocol Version\n+///\n+/// V4 allows idenfication using a user_id\n+/// V5 allows authorization using a username and password\n+enum SocksVersion<'a> {\n+    V4(Option<Socks4Identification<'a>>),\n+    V5(Option<Socks5Authorization<'a>>),\n+}\n+\n pub(crate) async fn connect_socks_proxy_stream(\n     proxy: Option<&Url>,\n     rpc_host: (&str, u16),\n ) -> Result<Box<dyn AsyncReadWrite>> {\n-    let stream = match parse_socks_proxy(proxy) {\n-        Some((socks_proxy, SocksVersion::V4)) => {\n-            let stream = Socks4Stream::connect_with_socket(\n-                tokio::net::TcpStream::connect(socks_proxy).await?,\n-                rpc_host,\n-            )\n-            .await\n-            .map_err(|err| anyhow!(\"error connecting to socks {}\", err))?;\n-            Box::new(stream) as Box<dyn AsyncReadWrite>\n+    // Connect directly when there is no proxy",
        "comment_created_at": "2025-05-06T06:59:55+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "The code below seems to show that quite explicitly, so let's remove the comment.\r\n\r\nI would also argue that this function should accept `proxy: &Url` instead and `TcpStream::connect` can be done up the stack, at a single place that calls this function.\r\nShould we do that?",
        "pr_file_module": null
      },
      {
        "comment_id": "2074879219",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29591,
        "pr_file": "crates/client/src/socks.rs",
        "discussion_id": "2074841689",
        "commented_code": "@@ -3,59 +3,102 @@ use anyhow::{Result, anyhow};\n use http_client::Url;\n use tokio_socks::tcp::{Socks4Stream, Socks5Stream};\n \n+/// Identification to a Socks V4 Proxy\n+struct Socks4Identification<'a> {\n+    user_id: &'a str,\n+}\n+\n+/// Authorization to a Socks V5 Proxy\n+struct Socks5Authorization<'a> {\n+    username: &'a str,\n+    password: &'a str,\n+}\n+\n+/// Socks Proxy Protocol Version\n+///\n+/// V4 allows idenfication using a user_id\n+/// V5 allows authorization using a username and password\n+enum SocksVersion<'a> {\n+    V4(Option<Socks4Identification<'a>>),\n+    V5(Option<Socks5Authorization<'a>>),\n+}\n+\n pub(crate) async fn connect_socks_proxy_stream(\n     proxy: Option<&Url>,\n     rpc_host: (&str, u16),\n ) -> Result<Box<dyn AsyncReadWrite>> {\n-    let stream = match parse_socks_proxy(proxy) {\n-        Some((socks_proxy, SocksVersion::V4)) => {\n-            let stream = Socks4Stream::connect_with_socket(\n-                tokio::net::TcpStream::connect(socks_proxy).await?,\n-                rpc_host,\n-            )\n-            .await\n-            .map_err(|err| anyhow!(\"error connecting to socks {}\", err))?;\n-            Box::new(stream) as Box<dyn AsyncReadWrite>\n+    // Connect directly when there is no proxy",
        "comment_created_at": "2025-05-06T07:27:20+00:00",
        "comment_author": "tidely",
        "comment_body": "Yeah sounds good, I tried keeping this PR pretty concentrated, but changing from `Option<&Url>` to `&Url` does seem more natural. I'll send in a commit shortly",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2074885310",
    "pr_number": 29494,
    "pr_file": "crates/title_bar/src/title_bar.rs",
    "created_at": "2025-05-06T07:31:17+00:00",
    "commented_code": "})\n         }?;\n \n-        Some(\n-            Button::new(\"project_branch_trigger\", branch_name)\n-                .color(Color::Muted)\n-                .style(ButtonStyle::Subtle)\n-                .label_size(LabelSize::Small)\n-                .tooltip(move |window, cx| {\n-                    Tooltip::with_meta(\n-                        \"Recent Branches\",\n-                        Some(&zed_actions::git::Branch),\n-                        \"Local branches only\",\n-                        window,\n-                        cx,\n-                    )\n-                })\n-                .on_click(move |_, window, cx| {\n-                    let _ = workspace.update(cx, |_this, cx| {\n-                        window.dispatch_action(zed_actions::git::Branch.boxed_clone(), cx);\n-                    });\n-                }),\n-        )\n+        let mut branch_button = Button::new(\"project_branch_trigger\", branch_name)",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2074885310",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29494,
        "pr_file": "crates/title_bar/src/title_bar.rs",
        "discussion_id": "2074885310",
        "commented_code": "@@ -531,26 +539,34 @@ impl TitleBar {\n                 })\n         }?;\n \n-        Some(\n-            Button::new(\"project_branch_trigger\", branch_name)\n-                .color(Color::Muted)\n-                .style(ButtonStyle::Subtle)\n-                .label_size(LabelSize::Small)\n-                .tooltip(move |window, cx| {\n-                    Tooltip::with_meta(\n-                        \"Recent Branches\",\n-                        Some(&zed_actions::git::Branch),\n-                        \"Local branches only\",\n-                        window,\n-                        cx,\n-                    )\n-                })\n-                .on_click(move |_, window, cx| {\n-                    let _ = workspace.update(cx, |_this, cx| {\n-                        window.dispatch_action(zed_actions::git::Branch.boxed_clone(), cx);\n-                    });\n-                }),\n-        )\n+        let mut branch_button = Button::new(\"project_branch_trigger\", branch_name)",
        "comment_created_at": "2025-05-06T07:31:17+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "This works, but we can reduce the diff and stick to the builder-like API with `.when(TitleBarSettings::get_global(cx).show_branch_icon, |branch_button| ...)`.\r\n\r\nLet's try doing that?",
        "pr_file_module": null
      },
      {
        "comment_id": "2074957837",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29494,
        "pr_file": "crates/title_bar/src/title_bar.rs",
        "discussion_id": "2074885310",
        "commented_code": "@@ -531,26 +539,34 @@ impl TitleBar {\n                 })\n         }?;\n \n-        Some(\n-            Button::new(\"project_branch_trigger\", branch_name)\n-                .color(Color::Muted)\n-                .style(ButtonStyle::Subtle)\n-                .label_size(LabelSize::Small)\n-                .tooltip(move |window, cx| {\n-                    Tooltip::with_meta(\n-                        \"Recent Branches\",\n-                        Some(&zed_actions::git::Branch),\n-                        \"Local branches only\",\n-                        window,\n-                        cx,\n-                    )\n-                })\n-                .on_click(move |_, window, cx| {\n-                    let _ = workspace.update(cx, |_this, cx| {\n-                        window.dispatch_action(zed_actions::git::Branch.boxed_clone(), cx);\n-                    });\n-                }),\n-        )\n+        let mut branch_button = Button::new(\"project_branch_trigger\", branch_name)",
        "comment_created_at": "2025-05-06T08:14:32+00:00",
        "comment_author": "shank03",
        "comment_body": "Done !",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2073597586",
    "pr_number": 29924,
    "pr_file": "crates/project/src/environment.rs",
    "created_at": "2025-05-05T14:45:31+00:00",
    "commented_code": "/// If the project was opened from the CLI, then the inherited CLI environment is returned.\n     /// If it wasn't opened from the CLI, and an absolute path is given, then a shell is spawned in\n     /// that directory, to get environment variables as if the user has `cd`'d there.\n-    pub(crate) fn get_directory_environment(\n+    pub fn get_directory_environment(",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2073597586",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29924,
        "pr_file": "crates/project/src/environment.rs",
        "discussion_id": "2073597586",
        "commented_code": "@@ -118,7 +118,7 @@ impl ProjectEnvironment {\n     /// If the project was opened from the CLI, then the inherited CLI environment is returned.\n     /// If it wasn't opened from the CLI, and an absolute path is given, then a shell is spawned in\n     /// that directory, to get environment variables as if the user has `cd`'d there.\n-    pub(crate) fn get_directory_environment(\n+    pub fn get_directory_environment(",
        "comment_created_at": "2025-05-05T14:45:31+00:00",
        "comment_author": "WeetHet",
        "comment_body": "I would rather prefer `project.environment` methods were not used directly. We have an established API that routes them through `project` methods, see `get_buffer_environment`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2038399815",
    "pr_number": 25602,
    "pr_file": "crates/gpui/src/elements/animation.rs",
    "created_at": "2025-04-10T22:00:54+00:00",
    "commented_code": "}\n }\n \n+/// An animation which can be applied to an element when transitioning between states\n+pub struct TransitionAnimation {\n+    /// The amount of time this animation should run for when transitioning from false to true.\n+    /// When `None`, this transition isn't animated.\n+    pub forward_duration: Option<Duration>,",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2038399815",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25602,
        "pr_file": "crates/gpui/src/elements/animation.rs",
        "discussion_id": "2038399815",
        "commented_code": "@@ -41,6 +44,55 @@ impl Animation {\n     }\n }\n \n+/// An animation which can be applied to an element when transitioning between states\n+pub struct TransitionAnimation {\n+    /// The amount of time this animation should run for when transitioning from false to true.\n+    /// When `None`, this transition isn't animated.\n+    pub forward_duration: Option<Duration>,",
        "comment_created_at": "2025-04-10T22:00:54+00:00",
        "comment_author": "mikayla-maki",
        "comment_body": "I don't think I like this API as written. The type name leads me to think that this is going to be a generalized \"any kind of transition\" animation, but the specific fields only apply to a boolean, and only on specific transitions of the boolean. Except for easing which has to be the same forward and backward.\r\n\r\nWe should figure out a more generalizable API for this, that we can implement for `bool`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1989210005",
    "pr_number": 26369,
    "pr_file": "crates/gpui/src/app.rs",
    "created_at": "2025-03-11T12:57:25+00:00",
    "commented_code": "self.platform.add_recent_document(path);\n     }\n \n+    /// Updates the jump list with the updated list of recent paths for the application, only used on Windows for now.\n+    pub fn update_jump_list(&self, entries: &[&Vec<String>]) -> Option<Vec<Vec<String>>> {",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1989210005",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26369,
        "pr_file": "crates/gpui/src/app.rs",
        "discussion_id": "1989210005",
        "commented_code": "@@ -1439,6 +1439,11 @@ impl App {\n         self.platform.add_recent_document(path);\n     }\n \n+    /// Updates the jump list with the updated list of recent paths for the application, only used on Windows for now.\n+    pub fn update_jump_list(&self, entries: &[&Vec<String>]) -> Option<Vec<Vec<String>>> {",
        "comment_created_at": "2025-03-11T12:57:25+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "Let's consolidate this with https://github.com/zed-industries/zed/blob/1cfbfc199cee551318b89a2f35853ed43b8ac52d/crates/gpui/src/app.rs#L1434-L1440 and it's the same thing implemented for macOS.\r\n\r\nAt least, the vocabulary better match in the \"interface\" API.",
        "pr_file_module": null
      },
      {
        "comment_id": "1989475894",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26369,
        "pr_file": "crates/gpui/src/app.rs",
        "discussion_id": "1989210005",
        "commented_code": "@@ -1439,6 +1439,11 @@ impl App {\n         self.platform.add_recent_document(path);\n     }\n \n+    /// Updates the jump list with the updated list of recent paths for the application, only used on Windows for now.\n+    pub fn update_jump_list(&self, entries: &[&Vec<String>]) -> Option<Vec<Vec<String>>> {",
        "comment_created_at": "2025-03-11T14:53:03+00:00",
        "comment_author": "JunkuiZhang",
        "comment_body": "Sorry, I\u2019m not quite sure how these two functions could be consolidated. On macOS, a folder is added one at a time, and SSH projects are not included. On Windows, however, all folders from `WORKSPACE_DB.recent_projects_on_disk()` are added at once, including SSH projects.",
        "pr_file_module": null
      },
      {
        "comment_id": "1989787005",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26369,
        "pr_file": "crates/gpui/src/app.rs",
        "discussion_id": "1989210005",
        "commented_code": "@@ -1439,6 +1439,11 @@ impl App {\n         self.platform.add_recent_document(path);\n     }\n \n+    /// Updates the jump list with the updated list of recent paths for the application, only used on Windows for now.\n+    pub fn update_jump_list(&self, entries: &[&Vec<String>]) -> Option<Vec<Vec<String>>> {",
        "comment_created_at": "2025-03-11T17:15:59+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "I mean that there are two components shared in every OS (Linux is special but has similar concepts in certain DEs, but let's omit it as not implemented in the repo).\r\n\r\n* in the OS, there's a list of entries, ordered by \"last opened\"\r\n  * that list could be altered from the OS side (different ways to do that but still)\r\n* there's a list of last opened projects in Zed, and that list can be altered from Zed and needs to be propagated to the OS side\r\n\r\nAt let's call all these entries, lists, whatnot similarly, as of now there's \"jump_list\" for Windows only and something else for mac-only.\r\nWhat also would be good, is to keep the same, single \"add an entry\"/\"set entries\" workflow in the API if possible.",
        "pr_file_module": null
      },
      {
        "comment_id": "2011386570",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26369,
        "pr_file": "crates/gpui/src/app.rs",
        "discussion_id": "1989210005",
        "commented_code": "@@ -1439,6 +1439,11 @@ impl App {\n         self.platform.add_recent_document(path);\n     }\n \n+    /// Updates the jump list with the updated list of recent paths for the application, only used on Windows for now.\n+    pub fn update_jump_list(&self, entries: &[&Vec<String>]) -> Option<Vec<Vec<String>>> {",
        "comment_created_at": "2025-03-25T06:18:09+00:00",
        "comment_author": "mikayla-maki",
        "comment_body": "Seconded, we should consolidate these two APIs since they're doing fundamentally the same thing. Details like \"should SSH projects be included\", should be the same across different platforms. \r\n\r\nCan the windows menus be updated one at a time? If so, I'd much prefer something like the macOS API. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2012167881",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26369,
        "pr_file": "crates/gpui/src/app.rs",
        "discussion_id": "1989210005",
        "commented_code": "@@ -1439,6 +1439,11 @@ impl App {\n         self.platform.add_recent_document(path);\n     }\n \n+    /// Updates the jump list with the updated list of recent paths for the application, only used on Windows for now.\n+    pub fn update_jump_list(&self, entries: &[&Vec<String>]) -> Option<Vec<Vec<String>>> {",
        "comment_created_at": "2025-03-25T13:55:42+00:00",
        "comment_author": "JunkuiZhang",
        "comment_body": "I don't know if macOS supports setting something like `ssh://...` to the folder path.\r\n\r\nWindows menus can not be updated one at a time",
        "pr_file_module": null
      },
      {
        "comment_id": "2014915579",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26369,
        "pr_file": "crates/gpui/src/app.rs",
        "discussion_id": "1989210005",
        "commented_code": "@@ -1439,6 +1439,11 @@ impl App {\n         self.platform.add_recent_document(path);\n     }\n \n+    /// Updates the jump list with the updated list of recent paths for the application, only used on Windows for now.\n+    pub fn update_jump_list(&self, entries: &[&Vec<String>]) -> Option<Vec<Vec<String>>> {",
        "comment_created_at": "2025-03-26T19:58:28+00:00",
        "comment_author": "mikayla-maki",
        "comment_body": "Thanks for the explanation :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1939171390",
    "pr_number": 13433,
    "pr_file": "crates/workspace/src/pane.rs",
    "created_at": "2025-02-03T10:47:28+00:00",
    "commented_code": "project: Entity<Project>,\n         next_timestamp: Arc<AtomicUsize>,\n         can_drop_predicate: Option<Arc<dyn Fn(&dyn Any, &mut Window, &mut App) -> bool + 'static>>,\n-        double_click_dispatch_action: Box<dyn Action>,",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1939171390",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 13433,
        "pr_file": "crates/workspace/src/pane.rs",
        "discussion_id": "1939171390",
        "commented_code": "@@ -383,7 +384,7 @@ impl Pane {\n         project: Entity<Project>,\n         next_timestamp: Arc<AtomicUsize>,\n         can_drop_predicate: Option<Arc<dyn Fn(&dyn Any, &mut Window, &mut App) -> bool + 'static>>,\n-        double_click_dispatch_action: Box<dyn Action>,",
        "comment_created_at": "2025-02-03T10:47:28+00:00",
        "comment_author": "osiewicz",
        "comment_body": "You can prolly avoid changing the interface here and instead use `gpui::NoAction` in callers of `Pane::new` that don't have any action for double-clicks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1981670385",
    "pr_number": 26132,
    "pr_file": "crates/assistant_tool/src/assistant_tool.rs",
    "created_at": "2025-03-05T15:35:23+00:00",
    "commented_code": "fn run(\n         self: Arc<Self>,\n         input: serde_json::Value,\n+        file_changes: Arc<Mutex<HashMap<PathBuf, Vec<u8>>>>,",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1981670385",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26132,
        "pr_file": "crates/assistant_tool/src/assistant_tool.rs",
        "discussion_id": "1981670385",
        "commented_code": "@@ -31,6 +34,7 @@ pub trait Tool: 'static + Send + Sync {\n     fn run(\n         self: Arc<Self>,\n         input: serde_json::Value,\n+        file_changes: Arc<Mutex<HashMap<PathBuf, Vec<u8>>>>,",
        "comment_created_at": "2025-03-05T15:35:23+00:00",
        "comment_author": "maxdeviant",
        "comment_body": "I don't think putting it on the `Tool` interface makes sense, as this seems quite specific to the scripting tool.\r\n\r\nWhat if we put it in a `gpui::Global` instead? I suppose we would need to key it by something if we wanted it to be per-thread, so maybe pass the thread ID as an `Arc<str>` to `Tool::run`?",
        "pr_file_module": null
      }
    ]
  }
]