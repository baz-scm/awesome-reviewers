[
  {
    "discussion_id": "2062674003",
    "pr_number": 29496,
    "pr_file": "assets/icons/ai_open_router.svg",
    "created_at": "2025-04-27T16:41:56+00:00",
    "commented_code": null,
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2062674003",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29496,
        "pr_file": "assets/icons/ai_open_router.svg",
        "discussion_id": "2062674003",
        "commented_code": null,
        "comment_created_at": "2025-04-27T16:41:56+00:00",
        "comment_author": "maxdeviant",
        "comment_body": "Weâ€™ll need to make sure this icon has the same scale and matches our existing icons.",
        "pr_file_module": null
      },
      {
        "comment_id": "2062675813",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29496,
        "pr_file": "assets/icons/ai_open_router.svg",
        "discussion_id": "2062674003",
        "commented_code": null,
        "comment_created_at": "2025-04-27T16:52:00+00:00",
        "comment_author": "imumesh18",
        "comment_body": "Updated the image to be 16x16px like other icons of ai labs.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049406416",
    "pr_number": 28183,
    "pr_file": "crates/languages/src/javascript/highlights.scm",
    "created_at": "2025-04-17T17:43:08+00:00",
    "commented_code": "(escape_sequence) @string.escape\n \n (regex) @string.regex\n-(regex_flags) @keyword.regex\n+(regex_flags) @keyword.operator.regex",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2049406416",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 28183,
        "pr_file": "crates/languages/src/javascript/highlights.scm",
        "discussion_id": "2049406416",
        "commented_code": "@@ -85,7 +85,7 @@\n (escape_sequence) @string.escape\n \n (regex) @string.regex\n-(regex_flags) @keyword.regex\n+(regex_flags) @keyword.operator.regex",
        "comment_created_at": "2025-04-17T17:43:08+00:00",
        "comment_author": "probably-neb",
        "comment_body": "These changes in `javascript/highlights.scm` should also be reflected in `typescript/highlights.scm` and `tsx/highlights.scm`",
        "pr_file_module": null
      },
      {
        "comment_id": "2049407621",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 28183,
        "pr_file": "crates/languages/src/javascript/highlights.scm",
        "discussion_id": "2049406416",
        "commented_code": "@@ -85,7 +85,7 @@\n (escape_sequence) @string.escape\n \n (regex) @string.regex\n-(regex_flags) @keyword.regex\n+(regex_flags) @keyword.operator.regex",
        "comment_created_at": "2025-04-17T17:44:10+00:00",
        "comment_author": "probably-neb",
        "comment_body": "Otherwise looks good!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1965718711",
    "pr_number": 25333,
    "pr_file": "crates/languages/src/rust/highlights.scm",
    "created_at": "2025-02-21T15:46:33+00:00",
    "commented_code": "(#match? @type \"^[A-Z]\"))\n \n ; Assume all-caps names are constants\n-((identifier) @constant\n- (#match? @constant \"^_*[A-Z][A-Z\\\\d_]*$\"))\n+((identifier) @constant.variable",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1965718711",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25333,
        "pr_file": "crates/languages/src/rust/highlights.scm",
        "discussion_id": "1965718711",
        "commented_code": "@@ -47,8 +48,8 @@\n  (#match? @type \"^[A-Z]\"))\n \n ; Assume all-caps names are constants\n-((identifier) @constant\n- (#match? @constant \"^_*[A-Z][A-Z\\\\d_]*$\"))\n+((identifier) @constant.variable",
        "comment_created_at": "2025-02-21T15:46:33+00:00",
        "comment_author": "maxdeviant",
        "comment_body": "I'm not sure I understand the intent of this change.\r\n\r\nRust only has one kind of constants: constants.\r\n\r\nSo why do we need to denote them as `@constant.variable` and not just `@constant`?\r\n\r\nThis is the only place in the Rust highlights we use `@constant`, so what does `@constant.variable` give us?",
        "pr_file_module": null
      },
      {
        "comment_id": "1965787114",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25333,
        "pr_file": "crates/languages/src/rust/highlights.scm",
        "discussion_id": "1965718711",
        "commented_code": "@@ -47,8 +48,8 @@\n  (#match? @type \"^[A-Z]\"))\n \n ; Assume all-caps names are constants\n-((identifier) @constant\n- (#match? @constant \"^_*[A-Z][A-Z\\\\d_]*$\"))\n+((identifier) @constant.variable",
        "comment_created_at": "2025-02-21T16:10:43+00:00",
        "comment_author": "chbk",
        "comment_body": "The issue is that we only have two scopes to differentiate three different elements:\r\n\r\n`constant.builtin`: for builtin constants, or builtin literal values, as in Java.\r\n`constant`: for constant variables, as in C, but the concept is similar in Rust.\r\n\r\nThen how do we scope other literal values?\r\n\r\nMy solution to this is to use `constant.variable` for constants and `constant` for literals.",
        "pr_file_module": null
      },
      {
        "comment_id": "1965800524",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25333,
        "pr_file": "crates/languages/src/rust/highlights.scm",
        "discussion_id": "1965718711",
        "commented_code": "@@ -47,8 +48,8 @@\n  (#match? @type \"^[A-Z]\"))\n \n ; Assume all-caps names are constants\n-((identifier) @constant\n- (#match? @constant \"^_*[A-Z][A-Z\\\\d_]*$\"))\n+((identifier) @constant.variable",
        "comment_created_at": "2025-02-21T16:17:36+00:00",
        "comment_author": "maxdeviant",
        "comment_body": "> The issue is that we only have two scopes to differentiate three different elements:\r\n> \r\n> `constant.builtin`: for builtin constants, or builtin literal values, as in Java. `constant`: for constant variables, as in C, but the concept is similar in Rust.\r\n> \r\n> Then how do we scope other literal values?\r\n> \r\n> My solution to this is to use `constant.variable` for constants and `constant` for literals.\r\n\r\nLet's get concrete here and provide examples of what would fall into each case.\r\n\r\nWe already have `@constant.builtin` for built-in constants:\r\n\r\n```ts\r\nundefined\r\nnull\r\n```\r\n\r\nAnd right now in Rust we use `@constant` for constants:\r\n\r\n```rs\r\nconst MESSAGE: &str = \"Hello\";\r\n```\r\n\r\nWhat is the third type of constant?\r\n\r\nI know in TypeScript there are two kinds of \"constants\" that have different semantic meaning:\r\n\r\n```ts\r\nconst FIVE = 5;\r\n\r\nconst foo = bar();\r\n```\r\n\r\nIs this what you're referring to?",
        "pr_file_module": null
      },
      {
        "comment_id": "1965869883",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25333,
        "pr_file": "crates/languages/src/rust/highlights.scm",
        "discussion_id": "1965718711",
        "commented_code": "@@ -47,8 +48,8 @@\n  (#match? @type \"^[A-Z]\"))\n \n ; Assume all-caps names are constants\n-((identifier) @constant\n- (#match? @constant \"^_*[A-Z][A-Z\\\\d_]*$\"))\n+((identifier) @constant.variable",
        "comment_created_at": "2025-02-21T16:50:44+00:00",
        "comment_author": "chbk",
        "comment_body": "This is the conflict I am trying to solve. In Java:\r\n\r\n```Java\r\nfinal int x = 3; // x is a constant -> scoped constant\r\nString y = null; // null is a literal -> scoped constant.builtin\r\n```\r\n\r\nThen let's jump to CSS:\r\n\r\n```CSS\r\nbold, red /* literal values -> scoped constant, get same color as constant variables... */\r\n```\r\n\r\nAs a solution:\r\n\r\n- we differentiate literals from constants respectively with `constant` and `constant.variable`\r\n- or we add `literal` and `literal.builtin` scopes for literal values",
        "pr_file_module": null
      },
      {
        "comment_id": "1965875170",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25333,
        "pr_file": "crates/languages/src/rust/highlights.scm",
        "discussion_id": "1965718711",
        "commented_code": "@@ -47,8 +48,8 @@\n  (#match? @type \"^[A-Z]\"))\n \n ; Assume all-caps names are constants\n-((identifier) @constant\n- (#match? @constant \"^_*[A-Z][A-Z\\\\d_]*$\"))\n+((identifier) @constant.variable",
        "comment_created_at": "2025-02-21T16:54:39+00:00",
        "comment_author": "maxdeviant",
        "comment_body": "It seems like that should just be something that is fixed in the CSS highlights?\r\n\r\nI don't see why we need to introduce a new `@constant.variable` everywhere and use it as opposed to just changing the CSS selectors to use `@constant.builtin` (which we already have precedent for), or maybe some other selector that is CSS-specific.\r\n\r\nThe name `constant.variable` just doesn't seem like a good fit either, as if something is constant it is, by definition, not variable. But naming aside, it just seems like we don't need to make this change to the Rust highlights at all.",
        "pr_file_module": null
      },
      {
        "comment_id": "1965881648",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25333,
        "pr_file": "crates/languages/src/rust/highlights.scm",
        "discussion_id": "1965718711",
        "commented_code": "@@ -47,8 +48,8 @@\n  (#match? @type \"^[A-Z]\"))\n \n ; Assume all-caps names are constants\n-((identifier) @constant\n- (#match? @constant \"^_*[A-Z][A-Z\\\\d_]*$\"))\n+((identifier) @constant.variable",
        "comment_created_at": "2025-02-21T16:59:36+00:00",
        "comment_author": "chbk",
        "comment_body": "I agree the naming is odd, but they are called constant variables in C, so this was my attempt at homogenizing the language highlights. In that case, I will rework the CSS PR. Thank you for your feedback!",
        "pr_file_module": null
      }
    ]
  }
]