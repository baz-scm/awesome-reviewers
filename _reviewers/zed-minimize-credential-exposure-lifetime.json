[
  {
    "discussion_id": "2167875305",
    "pr_number": 29145,
    "pr_file": "crates/askpass/src/askpass.rs",
    "created_at": "2025-06-26T00:51:46+00:00",
    "commented_code": "exit(1);\n     }\n }\n+\n #[cfg(not(unix))]\n-pub fn main(_socket: &str) {}\n+pub fn main(socket: &str) {\n+    use std::io::{self, Read, Write};\n+    use std::process::exit;\n+\n+    use windows_net::UnixStream;\n+\n+    let mut stream = match UnixStream::connect(socket) {\n+        Ok(stream) => stream,\n+        Err(err) => {\n+            eprintln!(\"Error connecting to socket {}: {}\", socket, err);\n+            exit(1);\n+        }\n+    };\n+\n+    let mut buffer = Vec::new();\n+    if let Err(err) = io::stdin().read_to_end(&mut buffer) {\n+        eprintln!(\"Error reading from stdin: {}\", err);\n+        exit(1);\n+    }\n+\n+    while buffer.last().map_or(false, |&b| b == b'\n' || b == b'\\r') {\n+        buffer.pop();\n+    }\n+    if buffer.last() != Some(&b'\\0') {\n+        buffer.push(b'\\0');\n+    }\n+\n+    if let Err(err) = stream.write_all(&buffer) {\n+        eprintln!(\"Error writing to socket: {}\", err);\n+        exit(1);\n+    }\n+\n+    let mut response = Vec::new();\n+    if let Err(err) = stream.read_to_end(&mut response) {\n+        eprintln!(\"Error reading from socket: {}\", err);\n+        exit(1);\n+    }\n+\n+    if let Err(err) = io::stdout().write_all(&response) {\n+        eprintln!(\"Error writing to stdout: {}\", err);\n+        exit(1);\n+    }\n+}\n \n #[cfg(not(unix))]\n pub struct AskPassSession {\n-    path: PathBuf,\n+    askpass_helper: String,\n+    _askpass_task: Task<()>,\n+    secrete: std::sync::Arc<std::sync::Mutex<String>>,",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2167875305",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29145,
        "pr_file": "crates/askpass/src/askpass.rs",
        "discussion_id": "2167875305",
        "commented_code": "@@ -202,28 +198,177 @@ pub fn main(socket: &str) {\n         exit(1);\n     }\n }\n+\n #[cfg(not(unix))]\n-pub fn main(_socket: &str) {}\n+pub fn main(socket: &str) {\n+    use std::io::{self, Read, Write};\n+    use std::process::exit;\n+\n+    use windows_net::UnixStream;\n+\n+    let mut stream = match UnixStream::connect(socket) {\n+        Ok(stream) => stream,\n+        Err(err) => {\n+            eprintln!(\"Error connecting to socket {}: {}\", socket, err);\n+            exit(1);\n+        }\n+    };\n+\n+    let mut buffer = Vec::new();\n+    if let Err(err) = io::stdin().read_to_end(&mut buffer) {\n+        eprintln!(\"Error reading from stdin: {}\", err);\n+        exit(1);\n+    }\n+\n+    while buffer.last().map_or(false, |&b| b == b'\\n' || b == b'\\r') {\n+        buffer.pop();\n+    }\n+    if buffer.last() != Some(&b'\\0') {\n+        buffer.push(b'\\0');\n+    }\n+\n+    if let Err(err) = stream.write_all(&buffer) {\n+        eprintln!(\"Error writing to socket: {}\", err);\n+        exit(1);\n+    }\n+\n+    let mut response = Vec::new();\n+    if let Err(err) = stream.read_to_end(&mut response) {\n+        eprintln!(\"Error reading from socket: {}\", err);\n+        exit(1);\n+    }\n+\n+    if let Err(err) = io::stdout().write_all(&response) {\n+        eprintln!(\"Error writing to stdout: {}\", err);\n+        exit(1);\n+    }\n+}\n \n #[cfg(not(unix))]\n pub struct AskPassSession {\n-    path: PathBuf,\n+    askpass_helper: String,\n+    _askpass_task: Task<()>,\n+    secrete: std::sync::Arc<std::sync::Mutex<String>>,",
        "comment_created_at": "2025-06-26T00:51:46+00:00",
        "comment_author": "mikayla-maki",
        "comment_body": "secrete -> secret",
        "pr_file_module": null
      },
      {
        "comment_id": "2182015839",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29145,
        "pr_file": "crates/askpass/src/askpass.rs",
        "discussion_id": "2167875305",
        "commented_code": "@@ -202,28 +198,177 @@ pub fn main(socket: &str) {\n         exit(1);\n     }\n }\n+\n #[cfg(not(unix))]\n-pub fn main(_socket: &str) {}\n+pub fn main(socket: &str) {\n+    use std::io::{self, Read, Write};\n+    use std::process::exit;\n+\n+    use windows_net::UnixStream;\n+\n+    let mut stream = match UnixStream::connect(socket) {\n+        Ok(stream) => stream,\n+        Err(err) => {\n+            eprintln!(\"Error connecting to socket {}: {}\", socket, err);\n+            exit(1);\n+        }\n+    };\n+\n+    let mut buffer = Vec::new();\n+    if let Err(err) = io::stdin().read_to_end(&mut buffer) {\n+        eprintln!(\"Error reading from stdin: {}\", err);\n+        exit(1);\n+    }\n+\n+    while buffer.last().map_or(false, |&b| b == b'\\n' || b == b'\\r') {\n+        buffer.pop();\n+    }\n+    if buffer.last() != Some(&b'\\0') {\n+        buffer.push(b'\\0');\n+    }\n+\n+    if let Err(err) = stream.write_all(&buffer) {\n+        eprintln!(\"Error writing to socket: {}\", err);\n+        exit(1);\n+    }\n+\n+    let mut response = Vec::new();\n+    if let Err(err) = stream.read_to_end(&mut response) {\n+        eprintln!(\"Error reading from socket: {}\", err);\n+        exit(1);\n+    }\n+\n+    if let Err(err) = io::stdout().write_all(&response) {\n+        eprintln!(\"Error writing to stdout: {}\", err);\n+        exit(1);\n+    }\n+}\n \n #[cfg(not(unix))]\n pub struct AskPassSession {\n-    path: PathBuf,\n+    askpass_helper: String,\n+    _askpass_task: Task<()>,\n+    secrete: std::sync::Arc<std::sync::Mutex<String>>,",
        "comment_created_at": "2025-07-03T07:02:35+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "Also, adding a code that explicitly stores credentials somewhere seems somewhat scary.\nI get it that we do `drop(askpass);` but wondering if we could somehow extract this all into:\n\n```rs\nlet (askpass, askpass_rx) = ....\n....\n\nlet Some(password) = askpass_rx.next().await else {...};\nlet socket = SshSocket::new(connection_options, &temp_dir, password)?;\n```\n\nthis way, nothing related to password ever gets stuck in memory for sure.\n\nGiven good Mikayla's ideas about deduplicating the logic with the posix impl and the fact that it managed to work without storing passwords in fields, seems reasonable?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167886064",
    "pr_number": 29145,
    "pr_file": "crates/remote/src/ssh_session.rs",
    "created_at": "2025-06-26T01:01:55+00:00",
    "commented_code": "}\n \n impl SshSocket {\n+    #[cfg(not(target_os = \"windows\"))]\n+    fn new(options: SshConnectionOptions, socket_path: PathBuf) -> Result<Self> {\n+        Ok(Self {\n+            connection_options: options,\n+            socket_path,\n+        })\n+    }\n+\n+    #[cfg(target_os = \"windows\")]\n+    fn new(options: SshConnectionOptions, temp_dir: &TempDir, secrete: String) -> Result<Self> {\n+        let pwsh_script_path = temp_dir.path().join(\"askpass.ps1\");\n+        let pwsh_script_content = format!(\n+            r#\"\n+            $ErrorActionPreference = 'Stop';\n+            Write-Host \"{secrete}\"",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2167886064",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29145,
        "pr_file": "crates/remote/src/ssh_session.rs",
        "discussion_id": "2167886064",
        "commented_code": "@@ -338,6 +347,35 @@ pub trait SshClientDelegate: Send + Sync {\n }\n \n impl SshSocket {\n+    #[cfg(not(target_os = \"windows\"))]\n+    fn new(options: SshConnectionOptions, socket_path: PathBuf) -> Result<Self> {\n+        Ok(Self {\n+            connection_options: options,\n+            socket_path,\n+        })\n+    }\n+\n+    #[cfg(target_os = \"windows\")]\n+    fn new(options: SshConnectionOptions, temp_dir: &TempDir, secrete: String) -> Result<Self> {\n+        let pwsh_script_path = temp_dir.path().join(\"askpass.ps1\");\n+        let pwsh_script_content = format!(\n+            r#\"\n+            $ErrorActionPreference = 'Stop';\n+            Write-Host \"{secrete}\"",
        "comment_created_at": "2025-06-26T01:01:55+00:00",
        "comment_author": "mikayla-maki",
        "comment_body": "secrete -> secret",
        "pr_file_module": null
      },
      {
        "comment_id": "2182116031",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 29145,
        "pr_file": "crates/remote/src/ssh_session.rs",
        "discussion_id": "2167886064",
        "commented_code": "@@ -338,6 +347,35 @@ pub trait SshClientDelegate: Send + Sync {\n }\n \n impl SshSocket {\n+    #[cfg(not(target_os = \"windows\"))]\n+    fn new(options: SshConnectionOptions, socket_path: PathBuf) -> Result<Self> {\n+        Ok(Self {\n+            connection_options: options,\n+            socket_path,\n+        })\n+    }\n+\n+    #[cfg(target_os = \"windows\")]\n+    fn new(options: SshConnectionOptions, temp_dir: &TempDir, secrete: String) -> Result<Self> {\n+        let pwsh_script_path = temp_dir.path().join(\"askpass.ps1\");\n+        let pwsh_script_content = format!(\n+            r#\"\n+            $ErrorActionPreference = 'Stop';\n+            Write-Host \"{secrete}\"",
        "comment_created_at": "2025-07-03T07:54:18+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "So, this is a password that we write into a file and never control the lifecycle of that tmp file.\nHow adequate and safe this is?\n\nIs there a way where we do not store the password in files and \"hardcoded\" memory such as fields?\nHaving some `rx` oneshot seems ok? \nThen we can pass that through as a \"askpass reply result\" and call once, where the password is needed?\nOr, is it possible complicate the `SSH_ASKPASS` script so that it gets the input from Zed? \nI'm sort of surprised that ssh itself cannot handle its askpass matters internally with the user.",
        "pr_file_module": null
      }
    ]
  }
]