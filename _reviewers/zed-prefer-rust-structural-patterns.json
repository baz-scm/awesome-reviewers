[
  {
    "discussion_id": "2145079814",
    "pr_number": 32685,
    "pr_file": "crates/anthropic/src/anthropic.rs",
    "created_at": "2025-06-13T13:19:11+00:00",
    "commented_code": "}\n \n     pub fn from_id(id: &str) -> Result<Self> {\n+        if id.starts_with(\"claude-opus-4-thinking\") {",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2145079814",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 32685,
        "pr_file": "crates/anthropic/src/anthropic.rs",
        "discussion_id": "2145079814",
        "commented_code": "@@ -90,71 +90,91 @@ impl Model {\n     }\n \n     pub fn from_id(id: &str) -> Result<Self> {\n+        if id.starts_with(\"claude-opus-4-thinking\") {",
        "comment_created_at": "2025-06-13T13:19:11+00:00",
        "comment_author": "maxdeviant",
        "comment_body": "Writing this in the early-return style makes it easier to add/remove cases and produces nicer diffs.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2010017323",
    "pr_number": 26893,
    "pr_file": "crates/editor/src/element.rs",
    "created_at": "2025-03-24T11:46:04+00:00",
    "commented_code": "axis_pair(horizontal_scrollbar, vertical_scrollbar)\n     }\n \n+    fn layout_minimap(\n+        &self,\n+        window: &mut Window,\n+        cx: &mut App,\n+        snapshot: &EditorSnapshot,\n+        num_lines: f32,\n+        minimap_width: Pixels,\n+        bounds: Bounds<Pixels>,\n+        scrollbars_layout: AxisPair<Option<ScrollbarLayout>>,\n+        line_height: Pixels,\n+        visible_range: Range<DisplayRow>,\n+    ) -> Option<MinimapLayout> {\n+        match snapshot.mode {\n+            EditorMode::Full => {",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2010017323",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26893,
        "pr_file": "crates/editor/src/element.rs",
        "discussion_id": "2010017323",
        "commented_code": "@@ -1482,6 +1484,105 @@ impl EditorElement {\n         axis_pair(horizontal_scrollbar, vertical_scrollbar)\n     }\n \n+    fn layout_minimap(\n+        &self,\n+        window: &mut Window,\n+        cx: &mut App,\n+        snapshot: &EditorSnapshot,\n+        num_lines: f32,\n+        minimap_width: Pixels,\n+        bounds: Bounds<Pixels>,\n+        scrollbars_layout: AxisPair<Option<ScrollbarLayout>>,\n+        line_height: Pixels,\n+        visible_range: Range<DisplayRow>,\n+    ) -> Option<MinimapLayout> {\n+        match snapshot.mode {\n+            EditorMode::Full => {",
        "comment_created_at": "2025-03-24T11:46:04+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "NIT: we can do `if snapshot.mode != EditorMode::Full || scrollbars_layout.vertical.is_none()` with an early `return None` to avoid nested code and improve the readability.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1998727771",
    "pr_number": 26737,
    "pr_file": "crates/project/src/lsp_store.rs",
    "created_at": "2025-03-17T13:24:56+00:00",
    "commented_code": "};\n \n         if let Some(buffer) = self.buffer_store.read(cx).get_by_path(&project_path, cx) {\n+            let snapshot = self\n+                .as_local_mut()\n+                .unwrap()\n+                .buffer_snapshot_for_lsp_version(&buffer, server_id, version, cx)?;\n+\n+            if let Some(existing_diagnostics) =\n+                buffer.read(cx).get_diagnostics(server_id).map(|diag| {\n+                    diag.iter()\n+                        .filter(|v| filter(&v.diagnostic))\n+                        .map(|v| {\n+                            let start = Unclipped(v.range.start.to_point_utf16(&snapshot));\n+                            let end = Unclipped(v.range.end.to_point_utf16(&snapshot));\n+                            let range = start..end;\n+                            DiagnosticEntry {\n+                                range,\n+                                diagnostic: v.diagnostic.clone(),\n+                            }\n+                        })\n+                        .collect::<Vec<_>>()",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1998727771",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 26737,
        "pr_file": "crates/project/src/lsp_store.rs",
        "discussion_id": "1998727771",
        "commented_code": "@@ -5812,6 +5823,30 @@ impl LspStore {\n         };\n \n         if let Some(buffer) = self.buffer_store.read(cx).get_by_path(&project_path, cx) {\n+            let snapshot = self\n+                .as_local_mut()\n+                .unwrap()\n+                .buffer_snapshot_for_lsp_version(&buffer, server_id, version, cx)?;\n+\n+            if let Some(existing_diagnostics) =\n+                buffer.read(cx).get_diagnostics(server_id).map(|diag| {\n+                    diag.iter()\n+                        .filter(|v| filter(&v.diagnostic))\n+                        .map(|v| {\n+                            let start = Unclipped(v.range.start.to_point_utf16(&snapshot));\n+                            let end = Unclipped(v.range.end.to_point_utf16(&snapshot));\n+                            let range = start..end;\n+                            DiagnosticEntry {\n+                                range,\n+                                diagnostic: v.diagnostic.clone(),\n+                            }\n+                        })\n+                        .collect::<Vec<_>>()",
        "comment_created_at": "2025-03-17T13:24:56+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "```suggestion\r\n```\r\n\r\nCan also do `.get_diagnostics(server_id).into_iter().flat_map(...` and avoid any extra nesting and `if let Some`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1644026186",
    "pr_number": 12909,
    "pr_file": "crates/editor/src/editor.rs",
    "created_at": "2024-06-18T08:06:48+00:00",
    "commented_code": "context_menu: RwLock::new(None),\n             mouse_context_menu: None,\n             completion_tasks: Default::default(),\n+            signature_help_task: Default::default(),",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1644026186",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 12909,
        "pr_file": "crates/editor/src/editor.rs",
        "discussion_id": "1644026186",
        "commented_code": "@@ -1784,6 +1790,8 @@ impl Editor {\n             context_menu: RwLock::new(None),\n             mouse_context_menu: None,\n             completion_tasks: Default::default(),\n+            signature_help_task: Default::default(),",
        "comment_created_at": "2024-06-18T08:06:48+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "```suggestion\r\n            signature_help_task: None,\r\n```\r\n\r\nNIT: let's keep the compiler a bit less busy solving traits for simple cases? Same for the other one.",
        "pr_file_module": null
      },
      {
        "comment_id": "1644933188",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 12909,
        "pr_file": "crates/editor/src/editor.rs",
        "discussion_id": "1644026186",
        "commented_code": "@@ -1784,6 +1790,8 @@ impl Editor {\n             context_menu: RwLock::new(None),\n             mouse_context_menu: None,\n             completion_tasks: Default::default(),\n+            signature_help_task: Default::default(),",
        "comment_created_at": "2024-06-18T19:13:35+00:00",
        "comment_author": "tomoikey",
        "comment_body": "Thank you! I fixed it on the commit d046ccabba4c1817bae842f6ce3a5b02428e836a",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1644031624",
    "pr_number": 12909,
    "pr_file": "crates/editor/src/editor.rs",
    "created_at": "2024-06-18T08:10:45+00:00",
    "commented_code": "}))\n     }\n \n+    pub fn show_signature_help(&mut self, _: &ShowSignatureHelp, cx: &mut ViewContext<Self>) {\n+        if self.pending_rename.is_some() {\n+            return;\n+        }\n+\n+        let position = self.selections.newest_anchor().head();\n+        let (buffer, buffer_position) =\n+            if let Some(output) = self.buffer.read(cx).text_anchor_for_position(position, cx) {",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1644031624",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 12909,
        "pr_file": "crates/editor/src/editor.rs",
        "discussion_id": "1644031624",
        "commented_code": "@@ -3896,6 +3909,61 @@ impl Editor {\n         }))\n     }\n \n+    pub fn show_signature_help(&mut self, _: &ShowSignatureHelp, cx: &mut ViewContext<Self>) {\n+        if self.pending_rename.is_some() {\n+            return;\n+        }\n+\n+        let position = self.selections.newest_anchor().head();\n+        let (buffer, buffer_position) =\n+            if let Some(output) = self.buffer.read(cx).text_anchor_for_position(position, cx) {",
        "comment_created_at": "2024-06-18T08:10:45+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "```suggestion\r\n            let Some((buffer, buffer_position)) = self.buffer.read(cx).text_anchor_for_position(position, cx) else { return; }\r\n```\r\n\r\nNIT: we can destructure it right away, so that will be one less block to nest.",
        "pr_file_module": null
      },
      {
        "comment_id": "1644931972",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 12909,
        "pr_file": "crates/editor/src/editor.rs",
        "discussion_id": "1644031624",
        "commented_code": "@@ -3896,6 +3909,61 @@ impl Editor {\n         }))\n     }\n \n+    pub fn show_signature_help(&mut self, _: &ShowSignatureHelp, cx: &mut ViewContext<Self>) {\n+        if self.pending_rename.is_some() {\n+            return;\n+        }\n+\n+        let position = self.selections.newest_anchor().head();\n+        let (buffer, buffer_position) =\n+            if let Some(output) = self.buffer.read(cx).text_anchor_for_position(position, cx) {",
        "comment_created_at": "2024-06-18T19:12:16+00:00",
        "comment_author": "tomoikey",
        "comment_body": "Thank you for the review☺️ I have made the corrections on 8b8af3ad45cb6f9f9a45c2c026869a153e647953",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1647090047",
    "pr_number": 12909,
    "pr_file": "crates/editor/src/signature_help_popover.rs",
    "created_at": "2024-06-20T07:24:20+00:00",
    "commented_code": "+use crate::{Editor, EditorStyle};\n+use gpui::{\n+    div, AnyElement, FontWeight, InteractiveElement, IntoElement, MouseButton, ParentElement,\n+    Pixels, Size, StatefulInteractiveElement, Styled, ViewContext, WeakView,\n+};\n+use language::markdown::{MarkdownHighlight, MarkdownHighlightStyle};\n+use language::ParsedMarkdown;\n+use lsp::SignatureHelp;\n+use std::ops::Range;\n+use ui::StyledExt;\n+use workspace::Workspace;\n+\n+const SIGNATURE_HELP_HIGHLIGHT: MarkdownHighlight =\n+    MarkdownHighlight::Style(MarkdownHighlightStyle {\n+        italic: false,\n+        underline: true,\n+        strikethrough: false,\n+        weight: FontWeight::EXTRA_BOLD,\n+    });\n+\n+const SIGNATURE_HELP_OVERLOAD_HIGHLIGHT: MarkdownHighlight =\n+    MarkdownHighlight::Style(MarkdownHighlightStyle {\n+        italic: true,\n+        underline: false,\n+        strikethrough: false,\n+        weight: FontWeight::NORMAL,\n+    });\n+\n+#[derive(Clone, Debug)]\n+pub struct SignatureHelpPopover {\n+    pub parsed_content: ParsedMarkdown,\n+}\n+\n+/// create_signature_help_markdown_string generates the markdown text that is displayed in the `SignatureHelp` window.\n+pub fn create_signature_help_markdown_string(\n+    signature_help: SignatureHelp,\n+) -> Option<(String, Vec<(Range<usize>, MarkdownHighlight)>)> {\n+    let (signature_information, maybe_active_signature, maybe_active_parameter) = (",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1647090047",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 12909,
        "pr_file": "crates/editor/src/signature_help_popover.rs",
        "discussion_id": "1647090047",
        "commented_code": "@@ -0,0 +1,553 @@\n+use crate::{Editor, EditorStyle};\n+use gpui::{\n+    div, AnyElement, FontWeight, InteractiveElement, IntoElement, MouseButton, ParentElement,\n+    Pixels, Size, StatefulInteractiveElement, Styled, ViewContext, WeakView,\n+};\n+use language::markdown::{MarkdownHighlight, MarkdownHighlightStyle};\n+use language::ParsedMarkdown;\n+use lsp::SignatureHelp;\n+use std::ops::Range;\n+use ui::StyledExt;\n+use workspace::Workspace;\n+\n+const SIGNATURE_HELP_HIGHLIGHT: MarkdownHighlight =\n+    MarkdownHighlight::Style(MarkdownHighlightStyle {\n+        italic: false,\n+        underline: true,\n+        strikethrough: false,\n+        weight: FontWeight::EXTRA_BOLD,\n+    });\n+\n+const SIGNATURE_HELP_OVERLOAD_HIGHLIGHT: MarkdownHighlight =\n+    MarkdownHighlight::Style(MarkdownHighlightStyle {\n+        italic: true,\n+        underline: false,\n+        strikethrough: false,\n+        weight: FontWeight::NORMAL,\n+    });\n+\n+#[derive(Clone, Debug)]\n+pub struct SignatureHelpPopover {\n+    pub parsed_content: ParsedMarkdown,\n+}\n+\n+/// create_signature_help_markdown_string generates the markdown text that is displayed in the `SignatureHelp` window.\n+pub fn create_signature_help_markdown_string(\n+    signature_help: SignatureHelp,\n+) -> Option<(String, Vec<(Range<usize>, MarkdownHighlight)>)> {\n+    let (signature_information, maybe_active_signature, maybe_active_parameter) = (",
        "comment_created_at": "2024-06-20T07:24:20+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "NIT: that could be destructured in-place, without method field calls, right in the parameter declaration:\r\n\r\n```\r\npub fn create_signature_help_markdown_string(\r\n    SignatureHelp {\r\n        signatures,\r\n        active_signature,\r\n        active_parameter,\r\n    }: SignatureHelp,\r\n) -> ...",
        "pr_file_module": null
      },
      {
        "comment_id": "1648767430",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 12909,
        "pr_file": "crates/editor/src/signature_help_popover.rs",
        "discussion_id": "1647090047",
        "commented_code": "@@ -0,0 +1,553 @@\n+use crate::{Editor, EditorStyle};\n+use gpui::{\n+    div, AnyElement, FontWeight, InteractiveElement, IntoElement, MouseButton, ParentElement,\n+    Pixels, Size, StatefulInteractiveElement, Styled, ViewContext, WeakView,\n+};\n+use language::markdown::{MarkdownHighlight, MarkdownHighlightStyle};\n+use language::ParsedMarkdown;\n+use lsp::SignatureHelp;\n+use std::ops::Range;\n+use ui::StyledExt;\n+use workspace::Workspace;\n+\n+const SIGNATURE_HELP_HIGHLIGHT: MarkdownHighlight =\n+    MarkdownHighlight::Style(MarkdownHighlightStyle {\n+        italic: false,\n+        underline: true,\n+        strikethrough: false,\n+        weight: FontWeight::EXTRA_BOLD,\n+    });\n+\n+const SIGNATURE_HELP_OVERLOAD_HIGHLIGHT: MarkdownHighlight =\n+    MarkdownHighlight::Style(MarkdownHighlightStyle {\n+        italic: true,\n+        underline: false,\n+        strikethrough: false,\n+        weight: FontWeight::NORMAL,\n+    });\n+\n+#[derive(Clone, Debug)]\n+pub struct SignatureHelpPopover {\n+    pub parsed_content: ParsedMarkdown,\n+}\n+\n+/// create_signature_help_markdown_string generates the markdown text that is displayed in the `SignatureHelp` window.\n+pub fn create_signature_help_markdown_string(\n+    signature_help: SignatureHelp,\n+) -> Option<(String, Vec<(Range<usize>, MarkdownHighlight)>)> {\n+    let (signature_information, maybe_active_signature, maybe_active_parameter) = (",
        "comment_created_at": "2024-06-21T10:22:51+00:00",
        "comment_author": "tomoikey",
        "comment_body": "Thank you!!\r\nI fixed it on 713f41693",
        "pr_file_module": null
      }
    ]
  }
]