[
  {
    "discussion_id": "2182253789",
    "pr_number": 33395,
    "pr_file": "Cargo.toml",
    "created_at": "2025-07-03T09:01:31+00:00",
    "commented_code": "futures = \"0.3\"\n futures-batch = \"0.6.1\"\n futures-lite = \"1.13\"\n-git2 = { version = \"0.20.1\", default-features = false }\n+git2 = { version = \"0.20.1\", default-features = false, features = [",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2182253789",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 33395,
        "pr_file": "Cargo.toml",
        "discussion_id": "2182253789",
        "commented_code": "@@ -457,7 +457,9 @@ fork = \"0.2.0\"\n futures = \"0.3\"\n futures-batch = \"0.6.1\"\n futures-lite = \"1.13\"\n-git2 = { version = \"0.20.1\", default-features = false }\n+git2 = { version = \"0.20.1\", default-features = false, features = [",
        "comment_created_at": "2025-07-03T09:01:31+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "This changes the behavior for all crates in the project, seems like an overkill for a dev build-related change.\n\nIf it intends a global change, let's extract it into a separate PR and keep this one scoped on a local dev workflow change.\nFor that, I imagine we need to add a new [feature](https://doc.rust-lang.org/cargo/reference/features.html) right inside the `remote_server` crate and use that feature when doing a dev build.",
        "pr_file_module": null
      },
      {
        "comment_id": "2183761659",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 33395,
        "pr_file": "Cargo.toml",
        "discussion_id": "2182253789",
        "commented_code": "@@ -457,7 +457,9 @@ fork = \"0.2.0\"\n futures = \"0.3\"\n futures-batch = \"0.6.1\"\n futures-lite = \"1.13\"\n-git2 = { version = \"0.20.1\", default-features = false }\n+git2 = { version = \"0.20.1\", default-features = false, features = [",
        "comment_created_at": "2025-07-03T21:13:14+00:00",
        "comment_author": "gwen-lg",
        "comment_body": "I don't know how to fix this correctly.\r\nMy understanding is that libgit2 should **always** be build statically for remote_server, not only for **dev_build** (or by default).\r\n\"vendored-libgit2\" feature is for this, but this is also the case if no appropriate version of libgit2 is found on the system (which is the case when `remote_server` is compiled for release).\r\nBut remote_server don't depend of git2 directly, is dependency of gpui, git and project/buffer_diff zed crates.\r\n\r\nI'm not sure than add the following feature setup in remote_server impact the zed crates dependencies :\r\n```\r\n[features]\r\ndefault = [\"vendored-libgit2\"]\r\nvendored-libgit2 = [\"git2/vendored-libgit2\"]\r\n```\r\n\r\nI will test tomorrow.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2184771854",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 33395,
        "pr_file": "Cargo.toml",
        "discussion_id": "2182253789",
        "commented_code": "@@ -457,7 +457,9 @@ fork = \"0.2.0\"\n futures = \"0.3\"\n futures-batch = \"0.6.1\"\n futures-lite = \"1.13\"\n-git2 = { version = \"0.20.1\", default-features = false }\n+git2 = { version = \"0.20.1\", default-features = false, features = [",
        "comment_created_at": "2025-07-04T08:52:32+00:00",
        "comment_author": "SomeoneToIgnore",
        "comment_body": "IIRC you have to post this change (with another feature) right inside the `remote_server/Cargo.toml` and see if it brings the right results with `cargo tree` or your experiments.\r\nFeatures are additive, so this should work.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1961639650",
    "pr_number": 25148,
    "pr_file": "crates/util/Cargo.toml",
    "created_at": "2025-02-19T13:00:35+00:00",
    "commented_code": "rust-embed.workspace = true\n serde.workspace = true\n serde_json.workspace = true\n+schemars.workspace = true",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1961639650",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25148,
        "pr_file": "crates/util/Cargo.toml",
        "discussion_id": "1961639650",
        "commented_code": "@@ -31,6 +31,7 @@ regex.workspace = true\n rust-embed.workspace = true\n serde.workspace = true\n serde_json.workspace = true\n+schemars.workspace = true",
        "comment_created_at": "2025-02-19T13:00:35+00:00",
        "comment_author": "maxdeviant",
        "comment_body": "I don't think we want `util` to pull in `schemars`, as it's a relatively heavy crate.\r\n\r\nWhatever requires it should live elsewhere.",
        "pr_file_module": null
      },
      {
        "comment_id": "1961684117",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25148,
        "pr_file": "crates/util/Cargo.toml",
        "discussion_id": "1961639650",
        "commented_code": "@@ -31,6 +31,7 @@ regex.workspace = true\n rust-embed.workspace = true\n serde.workspace = true\n serde_json.workspace = true\n+schemars.workspace = true",
        "comment_created_at": "2025-02-19T13:29:31+00:00",
        "comment_author": "TomPlanche",
        "comment_body": "`schemars` is needed where we put:\r\n```rs\r\n#[derive(Copy, Clone, Debug, Default, Serialize, Deserialize, JsonSchema, PartialEq, Eq)]\r\n#[serde(rename_all = \"snake_case\")]\r\npub enum SortStrategy {\r\n    #[default]\r\n    Lexicographical,\r\n    Alphabetical,\r\n}\r\n\r\n#[derive(Copy, Clone, Debug, Default, Serialize, Deserialize, JsonSchema, PartialEq, Eq)]\r\n#[serde(rename_all = \"snake_case\")]\r\npub struct FileSortingSettings {\r\n    pub strategy: SortStrategy,\r\n}\r\n```\r\n\r\nAnd I haven't found any better place for them...",
        "pr_file_module": null
      },
      {
        "comment_id": "2003485440",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25148,
        "pr_file": "crates/util/Cargo.toml",
        "discussion_id": "1961639650",
        "commented_code": "@@ -31,6 +31,7 @@ regex.workspace = true\n rust-embed.workspace = true\n serde.workspace = true\n serde_json.workspace = true\n+schemars.workspace = true",
        "comment_created_at": "2025-03-19T14:29:30+00:00",
        "comment_author": "maxdeviant",
        "comment_body": "If the enums need to live in `util` that is fine, but they should just be plain enums, and then we introduce corresponding enums with `Serialize`, `Deserialize`, and `JsonSchema` derives that are just used in the settings (and then convert between the two).\r\n\r\nAgain, we do not want `util` to depend on `schemars`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2005616035",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 25148,
        "pr_file": "crates/util/Cargo.toml",
        "discussion_id": "1961639650",
        "commented_code": "@@ -31,6 +31,7 @@ regex.workspace = true\n rust-embed.workspace = true\n serde.workspace = true\n serde_json.workspace = true\n+schemars.workspace = true",
        "comment_created_at": "2025-03-20T13:13:41+00:00",
        "comment_author": "TomPlanche",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2123305114",
    "pr_number": 28525,
    "pr_file": "Cargo.toml",
    "created_at": "2025-06-03T09:45:45+00:00",
    "commented_code": "unicase = \"2.6\"\n unicode-script = \"0.5.7\"\n unicode-segmentation = \"1.10\"\n+unicode-width = \"0.2\"",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "2123305114",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 28525,
        "pr_file": "Cargo.toml",
        "discussion_id": "2123305114",
        "commented_code": "@@ -598,6 +598,7 @@ tree-sitter-yaml = { git = \"https://github.com/zed-industries/tree-sitter-yaml\",\n unicase = \"2.6\"\n unicode-script = \"0.5.7\"\n unicode-segmentation = \"1.10\"\n+unicode-width = \"0.2\"",
        "comment_created_at": "2025-06-03T09:45:45+00:00",
        "comment_author": "probably-neb",
        "comment_body": "Would it be possible to remove this dep? From my reading it seems we only use it in tests, and even then only to compute the size of the terminal. Would it not be ok to just use a heuristic and have the terminal be larger than needed? If not, it should definitely be a dev dependency and used (and imported) in `#[cfg(test)]` blocks in order to not impact compile times outside of tests",
        "pr_file_module": null
      },
      {
        "comment_id": "2126658205",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 28525,
        "pr_file": "Cargo.toml",
        "discussion_id": "2123305114",
        "commented_code": "@@ -598,6 +598,7 @@ tree-sitter-yaml = { git = \"https://github.com/zed-industries/tree-sitter-yaml\",\n unicase = \"2.6\"\n unicode-script = \"0.5.7\"\n unicode-segmentation = \"1.10\"\n+unicode-width = \"0.2\"",
        "comment_created_at": "2025-06-04T13:50:10+00:00",
        "comment_author": "davewa",
        "comment_body": "Sure, I'll remove it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1945499142",
    "pr_number": 21092,
    "pr_file": "crates/aws_http_client/Cargo.toml",
    "created_at": "2025-02-06T21:36:52+00:00",
    "commented_code": "schemars = { workspace = true, optional = true }\n strum.workspace = true\n thiserror.workspace = true\n-gpui_tokio.workspace = true\n+tokio = { workspace = true, features = [\"rt\", \"rt-multi-thread\"] }",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1945499142",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 21092,
        "pr_file": "crates/aws_http_client/Cargo.toml",
        "discussion_id": "1945499142",
        "commented_code": "@@ -22,7 +22,7 @@ http_client.workspace = true\n schemars = { workspace = true, optional = true }\n strum.workspace = true\n thiserror.workspace = true\n-gpui_tokio.workspace = true\n+tokio = { workspace = true, features = [\"rt\", \"rt-multi-thread\"] }",
        "comment_created_at": "2025-02-06T21:36:52+00:00",
        "comment_author": "mikayla-maki",
        "comment_body": "Let's update the dependency both here and in `gpui_tokio` to put these features in the workspace's `Cargo.toml`, so we can keep an eye on feature unification. I should have done that in the original PRs :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1958653675",
    "pr_number": 21092,
    "pr_file": "crates/workspace/Cargo.toml",
    "created_at": "2025-02-17T18:15:37+00:00",
    "commented_code": "fs.workspace = true\n futures.workspace = true\n gpui.workspace = true\n+gpui_tokio.workspace = true",
    "repo_full_name": "zed-industries/zed",
    "discussion_comments": [
      {
        "comment_id": "1958653675",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 21092,
        "pr_file": "crates/workspace/Cargo.toml",
        "discussion_id": "1958653675",
        "commented_code": "@@ -40,6 +40,7 @@ derive_more.workspace = true\n fs.workspace = true\n futures.workspace = true\n gpui.workspace = true\n+gpui_tokio.workspace = true",
        "comment_created_at": "2025-02-17T18:15:37+00:00",
        "comment_author": "maxdeviant",
        "comment_body": "This shouldn't be a regular dependency.\r\n\r\nIt should only be used in `test` or `test-support` configurations.",
        "pr_file_module": null
      },
      {
        "comment_id": "1959862152",
        "repo_full_name": "zed-industries/zed",
        "pr_number": 21092,
        "pr_file": "crates/workspace/Cargo.toml",
        "discussion_id": "1958653675",
        "commented_code": "@@ -40,6 +40,7 @@ derive_more.workspace = true\n fs.workspace = true\n futures.workspace = true\n gpui.workspace = true\n+gpui_tokio.workspace = true",
        "comment_created_at": "2025-02-18T14:28:17+00:00",
        "comment_author": "5herlocked",
        "comment_body": "Could you help me out and look at the changes i made? Cuz I don\u2019t understand why it\u2019s still saying: \u201cunrecognized module\u201d when I run the test suite.\r\n\r\nNot super well versed with Cargo nuances.",
        "pr_file_module": null
      }
    ]
  }
]